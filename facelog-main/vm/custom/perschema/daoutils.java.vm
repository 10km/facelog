#parse( "header.include.vm" )
#parse( "schema.include.vm" )
#parse( "macros.include.vm" )
#set ( $modifier = 'protected ')
#set ( $javaClassName = 'DaoUtils' )
$codewriter.setCurrentJavaFilename($extensionPkg, "${javaClassName}.java")
package $extensionPkg;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Callable;

import com.google.common.base.Objects;

#join($tables '
import ${schemaPkg}.${e.asManagerInterfaceNSP()};
import ${schemaPkg}.${e.asBeanClassNSP()};' '')

import ${schemaPkg}.exception.ObjectRetrievalException;
import ${schemaPkg}.exception.WrapDAOException;

/**
 * 数据库访问基础方法
 * @author guyadong
 *
 */
class DaoUtils implements CommonConstant {
    #join($tables '
    static final $e.asManagerInterfaceNSP() $e.asVarManager() = TableManagerInitializer.instance.${e.asVarManager()};' '')

#macro(defineMethod $table $onlyAdd)
    //////////// $table.name.toUpperCase() /////////
#set ($beanClass = $table.asBeanClassNSP())
#set ($coreClass = $table.asCoreClassNSP())
#set ($primaryKeys = $table.primaryKeys)
#define($fullVarNames)#join($primaryKeys '$e.fullVarName' ',')#end
#define($fullParams)#join($primaryKeys '$e.javaType $e.fullVarName' ',')#end
#define($fullParamComments)#join($primaryKeys '
     * @param $e.fullVarName $e.remarks ' '')
#end
#define($varNames)#join($primaryKeys '$e.varName' ',')#end
#define($varTypes)#join($primaryKeys '$e.javaType' ',')#end
#define($params)#join($primaryKeys '$e.javaType $e.varName' ',')#end
#define($paramComments)#join($primaryKeys '
     * @param $e.varName $e.remarks ' '')
#end
#if($table.hasPrimaryKey())
    /** 
     * 根据主键从数据库读取记录
     * $paramComments
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}loadByPrimaryKey($varTypes)}
     */
    //1
    $!{modifier}$beanClass _get${coreClass}($params){
        return ${table.asVarManager()}.loadByPrimaryKey($varNames);
    }
#if($table.countPrimaryKeys() == 1)
    /** 
     * 根据主键从数据库读取记录
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}loadByPrimaryKey(Collection)}
     */
    //2    
    $!{modifier}List<$beanClass> _get${coreClass}s(Collection<$table.primaryKey.javaType> ${table.primaryKey.varName}Collection){
        return ${table.asVarManager()}.loadByPrimaryKey(${table.primaryKey.varName}Collection);
    }
    /** 
     * 删除主键列表({@code ${table.primaryKey.varName}Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}deleteByPrimaryKey(Collection)}
     */
    //3  
    $!{modifier}int _delete${coreClass}sByPrimaryKey(Collection<$table.primaryKey.javaType> ${table.primaryKey.varName}Collection){
        if(null == ${table.primaryKey.varName}Collection)return 0;
        int count =0;
        for($table.primaryKey.javaType $table.primaryKey.varName:${table.primaryKey.varName}Collection){
            count += _delete${coreClass}($table.primaryKey.varName);
        }
        return count;
    }
    //3-5
    $!{modifier}List<$table.primaryKey.javaType> _toPrimaryKeyListFrom${coreClass}s(Collection<$beanClass> beans){
        return ${table.asVarManager()}.toPrimaryKeyList(beans);
    }
#end
    /** 
     *　判断主键指定的记录是否存在
     * $paramComments
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}existsPrimaryKey($varTypes)}
     */
    //4
    $!{modifier}boolean _exists${coreClass}($params){
        return ${table.asVarManager()}.existsPrimaryKey($varNames);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}existsPrimaryKey($beanClass)}
     */
    //4-2
    $!{modifier}boolean _exists${coreClass}($beanClass bean){
        return ${table.asVarManager()}.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * $paramComments 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}deleteByPrimaryKey($varTypes)}
     */
    //5
    $!{modifier}int _delete${coreClass}($params){
        return ${table.asVarManager()}.deleteByPrimaryKey($varNames);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see ${esc.hash}_delete${coreClass}($varTypes)
     */
    //5-2
    $!{modifier}int _delete${coreClass}($beanClass bean){
        return null == bean ? null : _delete${coreClass}(#join($primaryKeys 'bean.$e.getGetMethod()()' ','));
    }
    /**
     * 删除{@code ${table.asVarBean()}Collection}列表指定的记录
     * @return 返回删除的记录条数
     * @see ${esc.hash}_delete${coreClass}($varTypes)
     */
    //6
    $!{modifier}int _delete${coreClass}s(Collection<$beanClass> beans){
        if(null == beans)return 0;
        int count =0;
        for($beanClass bean:beans){
            if(null != bean)
                count += _delete${coreClass}(#join($primaryKeys 'bean.$e.getGetMethod()()' ','));
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}checkDuplicate($beanClass)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    $!{modifier}$beanClass _checkDuplicate($beanClass $table.asVarBean())throws DuplicateReord{
        try{
            return ${table.asVarManager()}.checkDuplicate($table.asVarBean());
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
#end
######################### IMPORTED KEYS########
#foreach ($importedTable in $table.importedTables)
#set ( $importedClass = "$importedTable.asBeanClassNSP()" )
#foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#set ( $fkObj = $importedTable.getForeignKey($fkName) )
#define($seeLink){@link $table.asManagerInterfaceNSP()${esc.hash}${importedTable.getImportedBeansGetMethod($fkName)}AsList($varTypes)}#end
#if($table.name.endsWith('group') && $fkObj.columns.size() == 1 && $fkObj.columns[0].name == 'group_id')
#set($methodName = "_get${importedTable.asCoreClassNSP()}sOfGroup")
    /**
     * 返回属于{@code $fullVarNames}指定组的所有{@code $importedTable.name}记录
     * $fullParamComments
     * @see $seeLink
     */
#elseif($importedTable.isSelfRef($fkObj))
#set($methodName = "_getSub${importedTable.asCoreClassNSP()}")
    /**
     * 返回{@code $fullVarNames)}指定的组下的所有子节点,如果没有子节点则返回空表
     * $fullParamComments
     * @see $seeLink
     */
#else
#set($methodName = "_${importedTable.getImportedBeansGetMethod($fkName)}On${coreClass}")
    /**
     * 返回外键(#join($fkObj.columns '$e.fullName' ','))引用指定记录(#join($primaryKeys '$e.fullName' ','))的所有{@code $importedTable.name}记录
     * $fullParamComments
     * @see $seeLink
     */
#end
    //8
    $!{modifier}List<$importedClass> ${methodName}($fullParams){
        return ${table.asVarManager()}.${importedTable.getImportedBeansGetMethod($fkName)}AsList($fullVarNames);
    }
    /**
     * 删除外键($fullVarNames))引用指定记录(#join($primaryKeys '$e.fullName' ','))的所有{@code $importedTable.name}记录
     * $fullParamComments
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}${importedTable.getImportedBeansDelMethod($fkName)}($varTypes)}
     */
    //8-2
    $!{modifier}int _${importedTable.getImportedBeansDelMethod($fkName)}On${coreClass}($fullParams){
        return ${table.asVarManager()}.${importedTable.getImportedBeansDelMethod($fkName)}($fullVarNames);
    }
#end###foreach( $fkName in $importedTable.getFkMapNames($table.name) )
#end###foreach ($importedTable in $importedTables)
####################FOREIGN KEY##################
#foreach ($foreignTable in $table.foreignTables)
#set ( $foreignClass = "$foreignTable.asBeanClassNSP()" )
#foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#set ( $fkObj = $table.getForeignKey($fkName) )
    /**
     * 返回外键(#join($fkObj.columns '$e.fullName' ','))引用的 $foreignTable.name 记录
     * @param bean
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}$table.getReferencedVarGetMethod($fkName)($beanClass)}
     */
    //8-3
    $!{modifier}$foreignClass _$table.getReferencedVarGetMethod($fkName)On${coreClass}($beanClass bean){
        return ${table.asVarManager()}.$table.getReferencedVarGetMethod($fkName)(bean);
    }
    /**
     * 设置外键${table.name}(#join($fkObj.columns '$e.name' ','))引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}$table.getReferencedVarSetMethod($fkName)($beanClass,$foreignClass)}
     */
    //8-4
    $!{modifier}$foreignClass _$table.getReferencedVarSetMethod($fkName)On${coreClass}($beanClass bean,$foreignClass beanToSet){
        return ${table.asVarManager()}.$table.getReferencedVarSetMethod($fkName)(bean,beanToSet);
    }
#end###foreach( $fkName in $table.getFkMapNames($foreignTable.name) )
#end###foreach ($foreignTable in $foreignTables)
################### METHOD FOR SELF-REFERENCE FIELD#################
#foreach($selfFk in $table.selfRefKeys)
    /**
     * 返回($fullVarNames))指定的${table.name}记录的所有的父节点(包括自己)<br>
     * 自引用字段:${table.name}(#join($selfFk.columns '$e.name'))
     * @see $table.asManagerInterfaceNSP()${esc.hash}$table.getListMethod($selfFk)($varTypes)
     */
    //9
    $!{modifier}java.util.List<$beanClass> _$table.getListMethod($selfFk)For${coreClass}($fullParams){
        return ${table.asVarManager()}.$table.getListMethod($selfFk)($fullVarNames);
    }
    /**
     * 返回{@code $selfFk.foreignTable.asVarBean()}指定的${table.name}记录的所有的父节点(包括自己)<br>
     * 自引用字段:${table.name}(#join($selfFk.columns '$e.name'))
     * @see $table.asManagerInterfaceNSP()${esc.hash}$table.getListMethod($selfFk)($selfFk.foreignTable.asBeanClassNSP())
     */
    //9-2
    $!{modifier}java.util.List<$beanClass> _$table.getListMethod($selfFk)For${coreClass}($selfFk.foreignTable.asBeanClassNSP() $selfFk.foreignTable.asVarBean()){
        return ${table.asVarManager()}.$table.getListMethod($selfFk)($selfFk.foreignTable.asVarBean());
    }
#end###foreach($selfFk in $table.selfRefKeys)
######################## SAVE #################
#if($table.type == "TABLE")
########## DEFAULT GROUP ##############
#if($table.name.endsWith('group'))
    /** 
     * 如果没有默认组则向 $table.name 表中增加默认组,失败则抛出异常 
     * 
     * @throws IllegalStateException 创建失败
     */
    //10
    $!{modifier}void _saveDefault${coreClass}IfAbsent(){
        if(!_exists${coreClass}(DEFAULT_GROUP_ID)){
            try{
                $beanClass bean = new $beanClass(DEFAULT_GROUP_ID);
                bean.setName(DEFAULT_GROUP_NAME);
                _save${coreClass}(bean);
            }catch(WrapDAOException e){}
            if(!_exists${coreClass}(DEFAULT_GROUP_ID))
                throw new IllegalStateException("can't create default group for ${table.getBasename(true)}"); 
        }
    }
#set( $ename = $table.name.replace('_group',''))
#set( $etable = $db.getTable($ename))
#set( $eBeanClass = $etable.asBeanClassNSP())
    /**
     * 检查{@link $eBeanClass}的'group_id'字段是否为默认组{@link CommonConstant${esc.hash}DEFAULT_GROUP_ID},
     * 如果是,且默认组记录不存在则创建默认组
     * @return {@code ${etable.asVarBean()}}
     * @see ${esc.hash}_saveDefault${coreClass}IfAbsent()
     */
    //11
    $!{modifier}$eBeanClass _checkGroup($eBeanClass ${etable.asVarBean()}){
        if(null != ${etable.asVarBean()} && Objects.equal(${etable.asVarBean()}.getGroupId(), DEFAULT_GROUP_ID)){
            _saveDefault${coreClass}IfAbsent();
        }
        return ${etable.asVarBean()};
    }
#end
#if($onlyAdd)
    /** 
     * 添加新记录<br>
     * $table.name 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link $beanClass${esc.hash}isNew()}返回{@code false},则抛出异常
     * @param $table.asVarBean() 要添加的新记录
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}save($beanClass)}
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}checkDuplicate($beanClass)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code ${table.asVarBean()}.isNew()} is {@code false}
     */
    //12
    $!{modifier}$beanClass _add${coreClass}($beanClass $table.asVarBean())throws DuplicateReord{
        return ${table.asVarManager()}.save(_checkDuplicate($table.asVarBean()));
    }
#####  连接表方法 ######
#if($table.isSampleJunctionTable())
#set ( $leftFk  = $table.getForeignKeysAsList()[0])
#set ( $rightFk = $table.getForeignKeysAsList()[1])
#set ( $leftCol  = $leftFk.columns[0])
#set ( $rightCol  = $rightFk.columns[0])
#set ( $leftTable = $leftFk.foreignTable)
#set ( $rightTable = $rightFk.foreignTable)
#set ( $leftClass  = $leftTable.asBeanClassNSP())
#set ( $rightClass = $rightTable.asBeanClassNSP())
#set ( $leftVar   = "${leftCol.varName}")
#set ( $rightVar   = "${rightCol.varName}")
    /**
     * 创建$leftTable.name和$rightTable.name之间的MANY TO MANY 联接表($table.name)记录<br>
     * 如果记录已经存在则返回已有记录,如果输入的参数为{@code null}或记录不存在则返回{@code null}
     * @param $leftVar $leftCol.remarks
     * @param $rightVar $rightCol.remarks
     * @see ${esc.hash}_add${coreClass}($leftClass,$rightClass)
     */
    //12-5
    $!{modifier}$beanClass _add${coreClass}($leftCol.javaType $leftVar,$rightCol.javaType $rightVar){
        return _add${coreClass}(
                    _get${leftTable.asCoreClassNSP()}($leftVar),
                    _get${rightTable.asCoreClassNSP()}($rightVar));
    }
#set ( $leftVar   = $leftTable.asVarBean())
#set ( $rightVar = $rightTable.asVarBean())
#define($pkParams)${leftVar}.${leftTable.primaryKey.getGetMethod()}(),${rightVar}.${rightTable.primaryKey.getGetMethod()}()#end
    /**
     * 创建$leftTable.name和$rightTable.name之间的MANY TO MANY 联接表($table.name)记录<br>
     * 如果记录已经存在则返回已有记录,如果输入的参数为{@code null}或记录不存在则返回{@code null}
     */
    //12-6
    $!{modifier}$beanClass _add${coreClass}($leftClass $leftVar,$rightClass $rightVar){
        if(_exists${leftTable.asCoreClassNSP()}($leftVar) && _exists${rightTable.asCoreClassNSP()}($rightVar)){
            $beanClass $table.asVarBean() = new ${beanClass}($pkParams);
            try{
                return _add${coreClass}($table.asVarBean(),$leftVar,$rightVar);
            }catch(DuplicateReord e){
                return _get${coreClass}($pkParams);
            }
        }
        return null; 
    }
    /**
     * 删除$leftTable.name和$rightTable.name之间的MANY TO MANY 联接表($table.name)记录<br>
     * @return 删除成功返回0,如果记录不存在或输入的参数为{@code null}则返回0
     */
    //12-7
    $!{modifier}int _delete${coreClass}($leftClass $leftVar,$rightClass $rightVar){
        return (null == $leftVar || null == $rightVar)
            ? 0
            : _delete${coreClass}($pkParams);
    }
#end###if($table.isSampleJunctionTable())
#if( $table.hasForeignTables() || $table.hasImportedTables() )
    /** 
     * 添加新记录(同步保存)<br>
     * $table.name 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link $beanClass${esc.hash}isNew()}返回{@code false},则抛出异常
     * @param $table.asVarBean() 要添加的新记录
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}save($beanClass #foreachForeignTables('native' $table  ", $m_foreignClass" '' '') #foreachImportedTables('native' $table  ", Collection" '' '') )}
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}checkDuplicate($beanClass)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code ${table.asVarBean()}.isNew()} is {@code false}
     */
    //13
    $!{modifier}$beanClass _add${coreClass}($beanClass $table.asVarBean()
        #foreachForeignTables('native' $table  ", $m_foreignClass $table.asRefArg($m_fkName) " '
        ' '')

        #foreachImportedTables('native' $table  ", Collection<${m_importedClass}> $m_importedTable.asImpArg($m_fkName) " '
        ' ''))throws DuplicateReord{
        checkArgument(null == ${table.asVarBean()} || ${table.asVarBean()}.isNew(),"can be add,delete,but modify record for $table.name,so the _isNew field must be true");
        _checkDuplicate($table.asVarBean());
        return ${table.asVarManager()}.save($table.asVarBean()
            #foreachForeignTables('native' $table  ", $table.asRefArg($m_fkName) " '
            ' '')

            #foreachImportedTables('native' $table  ", $m_importedTable.asImpArg($m_fkName) " '
            ' ''));
    }
#end
#else###if($onlyAdd)
    /** 
     * 参见 {@link $table.asManagerInterfaceNSP()${esc.hash}save($beanClass)}
     */
    //14
    $!{modifier}$beanClass _save${coreClass}($beanClass $table.asVarBean()){
#if($table.getColumn('group_id'))
        _checkGroup($table.asVarBean());
#end
        return ${table.asVarManager()}.save($table.asVarBean());
    }
#if( $table.hasForeignTables() || $table.hasImportedTables() )
    /** 同步保存 */
    //15
    $!{modifier}$beanClass _save${coreClass}($beanClass $table.asVarBean()
        #foreachForeignTables('native' $table  ", $m_foreignClass $table.asRefArg($m_fkName) " '
        ' '')

        #foreachImportedTables('native' $table  ", Collection<${m_importedClass}> $m_importedTable.asImpArg($m_fkName) " '
        ' '')){
#if($table.getColumn('group_id'))
        _checkGroup($table.asVarBean());
#end
        return ${table.asVarManager()}.save($table.asVarBean()
            #foreachForeignTables('native' $table  ", $table.asRefArg($m_fkName) " '
            ' '')

            #foreachImportedTables('native' $table  ", $m_importedTable.asImpArg($m_fkName) " '
            ' ''));
    }
#end###if( $table.hasForeignTables() || $table.hasImportedTables() )
########### COLLECTION SAVE (集合保存)##############
#end###if($onlyAdd)
#set($mprefix = '_save')
#set($throwsStr = '')
#if($onlyAdd)
#set($mprefix = '_add')
#set($throwsStr = 'throws DuplicateReord')
#end
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see ${esc.hash}${mprefix}${coreClass}($beanClass)
     */
    //12-3-3
    $!{modifier}Collection<$beanClass> ${mprefix}${coreClass}s(Collection<$beanClass> beans)$!{throwsStr}{
        if(null != beans){
            for($beanClass bean : beans)
                ${mprefix}${coreClass}(bean);
        }
        return beans;
    }
    /** 
     * {@link ${esc.hash}${mprefix}${coreClass}(Collection)}的事务化版本
     */
    //12-3-5
    $!{modifier}Collection<$beanClass> ${mprefix}${coreClass}sAsTransaction(final Collection<$beanClass> beans)$!{throwsStr}{
        return _runAsTransaction(new Callable<Collection<$beanClass>>(){      
            @Override
            public Collection<$beanClass> call() throws Exception {
                return ${mprefix}${coreClass}s(beans);
            }});
    }
#end###if($table.type == "TABLE")
###################### LOAD ##################
    /**
     * 查询{@code where} SQL条件语句指定的 $table.name 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}loadByWhereAsList(String,int[],int,int)}
     */
    //16
    $!{modifier}List<$beanClass> _load${coreClass}ByWhere(String where,int startRow, int numRows){
        return ${table.asVarManager()}.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 $table.name 表的所有记录
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}loadAllAsList()}
     */
    //17
    $!{modifier}List<$beanClass> _load${coreClass}All(){
        return ${table.asVarManager()}.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 $table.name 记录总数
     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}Where(String)}
     */
    //17-2
    $!{modifier}int _count${coreClass}ByWhere(String where){
        return ${table.asVarManager()}.countWhere(where);
    }
#if($table.countPrimaryKeys() == 1)
#set ($pkName = $strUtil.convertName($table.primaryKey.name,false))
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see ${esc.hash}_load${coreClass}ByWhere(String,int,int)
     */
    //18
    $!{modifier}List<$table.primaryKey.javaType> _load${coreClass}${pkName}ByWhere(String where){
        return _toPrimaryKeyListFrom${coreClass}s(_load${coreClass}ByWhere(where,1,-1));
    }
#end
#foreach($index in $table.uniqueIndicesAsList)
#set ($indexColumns = $index.getIndexColumnsList())
    /** 
     * 索引(${table.name}.${index.name})查询<br>
     * #join($indexColumns '
     * @param $e.varName $e.remarks' '')

     * @see {@link $table.asManagerInterfaceNSP()${esc.hash}loadBy${index.asCamelCaseName()}(#join($indexColumns '$e.javaType' ','))}
     */
    //18-5
    $!{modifier}$beanClass _load${coreClass}By${index.asCamelCaseName()}(#join($indexColumns '$e.javaType $e.varName' ',')){
        return ${table.asVarManager()}.loadBy${index.asCamelCaseName()}(#join($indexColumns '$e.varName' ','));
    }
#end
#### 生成 loadByTimestamp方法
#define($defineLoadByTimestamp)
#if($table.getColumn($timestampColumn))
#set ( $m_suffix = $strUtil.convertName($timestampColumn,false))
    /**
     * (主动更新机制实现)<br>
     * 返回 ${table.name}.$timestampColumn 字段大于指定时间戳({@code timestamp})的所有记录
     * @see ${esc.hash}_load${coreClass}ByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    $!{modifier}List<$beanClass> _load${coreClass}By${m_suffix}(Date timestamp,int startRow, int numRows){
        return _load${coreClass}ByWhere(makeWhere(timestamp,"$timestampColumn"),startRow,numRows);
    }
    /** 参见 {@link ${esc.hash}_load${coreClass}By${m_suffix}(Date,int,int)} */
    //20
    $!{modifier}List<$beanClass> _load${coreClass}By${m_suffix}(Date timestamp){
        return _load${coreClass}By${m_suffix}(timestamp,1,-1);
    }
    /**
     * 返回${table.name}.$timestampColumn 字段大于指定时间戳({@code timestamp})的记录总数
     * @see ${esc.hash}_count${coreClass}ByWhere(String)
     */
    //20-5
    $!{modifier}int _count${coreClass}By${m_suffix}(Date timestamp){
        return _count${coreClass}ByWhere(makeWhere(timestamp,"$timestampColumn"));
    }
#if($table.countPrimaryKeys() == 1)
#set ($pkName = $strUtil.convertName($table.primaryKey.name,false))
    /** 
     * (主动更新机制实现)<br>
     * 返回 ${table.name}.$timestampColumn 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link ${esc.hash}_load${coreClass}${pkName}ByWhere(String)} 
     */
    //21
    $!{modifier}List<$table.primaryKey.javaType> _load${coreClass}${pkName}By${m_suffix}(Date timestamp){
        return _load${coreClass}${pkName}ByWhere(makeWhere(timestamp,"$timestampColumn"));
    }
#end
#end
#end##define
#set($timestampColumn = 'create_time') 
$defineLoadByTimestamp
#set($timestampColumn = 'update_time') 
$defineLoadByTimestamp
#set($timestampColumn = 'verify_time') 
$defineLoadByTimestamp
#end###macro(defineMethod $table $onlyAdd)
    /** 生成 SQL where 语句,example: {@code WHERE create_time >'2017-09-02 12:12:12'} */
    static private String makeWhere(Date timestamp,String field){
        checkNotNull(timestamp);
        return String.format("WHERE %s > '%s'", field,timestampFormatter.format(timestamp));    
    }
    /** 事务执行 */
    protected static <T> T _runAsTransaction(Callable<T> fun){
        return personManager.runAsTransaction(checkNotNull(fun));
    }
    /** 事务执行 */
    protected static void _runAsTransaction(Runnable fun){
        personManager.runAsTransaction(checkNotNull(fun));
    }
##join($tables '#defineMethod($e false)' '')
#foreach($tname in ['fl_device','fl_device_group','fl_person','fl_person_group'])
#set($table = $db.getTable($tname))
#defineMethod($table false)
#end
#foreach($tname in ['fl_face','fl_feature','fl_image','fl_log','fl_permit','fl_store','fl_log_light'])
#set($table = $db.getTable($tname))
#defineMethod($table true)
#end
}
