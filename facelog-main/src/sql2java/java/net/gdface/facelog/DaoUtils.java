// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: daoutils.java.vm
// ______________________________________________________
package net.gdface.facelog;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import java.util.Collection;
import java.util.Date;
import java.util.List;

import com.google.common.base.Function;
import com.google.common.collect.Lists;


import net.gdface.facelog.db.IDeviceManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.IDeviceGroupManager;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.IFaceManager;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.IFeatureManager;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.IImageManager;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.ILogManager;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.IPermitManager;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.IPersonManager;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.IPersonGroupManager;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.IStoreManager;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.ILogLightManager;
import net.gdface.facelog.db.LogLightBean;
import net.gdface.facelog.db.exception.ObjectRetrievalException;

/**
 * 数据库访问基础方法
 * @author guyadong
 *
 */
class DaoUtils implements CommonConstant {
    
    static final IDeviceManager deviceManager = TableManagerInitializer.instance.deviceManager;
    static final IDeviceGroupManager deviceGroupManager = TableManagerInitializer.instance.deviceGroupManager;
    static final IFaceManager faceManager = TableManagerInitializer.instance.faceManager;
    static final IFeatureManager featureManager = TableManagerInitializer.instance.featureManager;
    static final IImageManager imageManager = TableManagerInitializer.instance.imageManager;
    static final ILogManager logManager = TableManagerInitializer.instance.logManager;
    static final IPermitManager permitManager = TableManagerInitializer.instance.permitManager;
    static final IPersonManager personManager = TableManagerInitializer.instance.personManager;
    static final IPersonGroupManager personGroupManager = TableManagerInitializer.instance.personGroupManager;
    static final IStoreManager storeManager = TableManagerInitializer.instance.storeManager;
    static final ILogLightManager logLightManager = TableManagerInitializer.instance.logLightManager;
    //////////// FL_DEVICE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 设备id
     * @see {@link IDeviceManager#loadByPrimaryKey(Integer)}
     */
    static DeviceBean _getDevice(Integer id){
        return deviceManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IDeviceManager#loadByPrimaryKey(Collection)}
     */    
    static List<DeviceBean> _getDevice(Collection<Integer> idCollection){
        return deviceManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IDeviceManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deleteDeviceByPrimaryKey(Collection<Integer> idCollection){
        return deviceManager.deleteByPrimaryKey(idCollection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 设备id
     * @see {@link IDeviceManager#existsPrimaryKey(Integer)}
     */  
    static boolean _existsDevice(Integer id){
        return deviceManager.existsPrimaryKey(id);
    }
    /**
     * 删除主键指定的记录

     * @param id 设备id 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IDeviceManager#deleteByPrimaryKey(Integer)}
     */
    static int _deleteDevice(Integer id){
        return deviceManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除{@code deviceCollection}列表指定的记录

     * @param id 设备id 
     * @return 返回删除的记录条数
     * @see {@link IDeviceManager#delete(Collection)}
     */
    static int _deleteDevice(Collection<DeviceBean> deviceCollection){
        return deviceManager.delete(deviceCollection);
    }
    /** 
     * @see {@link IDeviceManager#checkDuplicate(DeviceBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static DeviceBean _checkDuplicate(DeviceBean device)throws ObjectRetrievalException{
        return deviceManager.checkDuplicate(device);
    }
    /** 
     * @see {@link IDeviceManager#save(DeviceBean)}
     */
    static DeviceBean _save(DeviceBean device){
        return deviceManager.save(device);
    }
    /** 同步保存 */
    static DeviceBean _save(DeviceBean device
        , DeviceGroupBean refDevicegroupByGroupId 
        , Collection<ImageBean> impImageByDeviceId 
        , Collection<LogBean> impLogByDeviceId ){
        return deviceManager.save(device
            , refDevicegroupByGroupId 
            , impImageByDeviceId 
            , impLogByDeviceId );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IDeviceManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<DeviceBean> _loadDeviceByWhere(String where,int startRow, int numRows){
        return deviceManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_device 表的所有记录
     * @see {@link IDeviceManager#loadAllAsList()}
     */
    static List<DeviceBean> _loadDeviceAll(){
        return deviceManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadDeviceByWhere(String,int,int)
     */
    static List<Integer> _loadDeviceIdByWhere(String where){
        return Lists.transform(_loadDeviceByWhere(where,1,-1),
            new Function<DeviceBean,Integer>(){
                @Override
                public Integer apply(DeviceBean input) {
                    return input.getId();
                }});
    }
    /**
     * 返回 fl_device.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadDeviceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<DeviceBean> _loadDeviceByCreateTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE create_time >'%s'", timestampFormatter.format(timestamp));
        return _loadDeviceByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadDeviceByCreateTime(Date,int,int)} */
    static List<DeviceBean> _loadDeviceByCreateTime(Date timestamp){
        return _loadDeviceByCreateTime(timestamp,1,-1);
    }
    /** 
     * @return 返回查询结果记录的主键
     * @see {@link #_loadDeviceByCreateTime(Date,int,int)} 
     */
    static List<Integer> _loadDeviceIdByCreateTime(Date timestamp){
        return Lists.transform(_loadDeviceByCreateTime(timestamp,1,-1),
            new Function<DeviceBean,Integer>(){
                @Override
                public Integer apply(DeviceBean input) {
                    return input.getId();
                }});
    }

    /**
     * 返回 fl_device.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadDeviceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<DeviceBean> _loadDeviceByUpdateTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE update_time >'%s'", timestampFormatter.format(timestamp));
        return _loadDeviceByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadDeviceByUpdateTime(Date,int,int)} */
    static List<DeviceBean> _loadDeviceByUpdateTime(Date timestamp){
        return _loadDeviceByUpdateTime(timestamp,1,-1);
    }
    /** 
     * @return 返回查询结果记录的主键
     * @see {@link #_loadDeviceByUpdateTime(Date,int,int)} 
     */
    static List<Integer> _loadDeviceIdByUpdateTime(Date timestamp){
        return Lists.transform(_loadDeviceByUpdateTime(timestamp,1,-1),
            new Function<DeviceBean,Integer>(){
                @Override
                public Integer apply(DeviceBean input) {
                    return input.getId();
                }});
    }


    //////////// FL_DEVICE_GROUP /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 设备组id
     * @see {@link IDeviceGroupManager#loadByPrimaryKey(Integer)}
     */
    static DeviceGroupBean _getDeviceGroup(Integer id){
        return deviceGroupManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IDeviceGroupManager#loadByPrimaryKey(Collection)}
     */    
    static List<DeviceGroupBean> _getDeviceGroup(Collection<Integer> idCollection){
        return deviceGroupManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IDeviceGroupManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deleteDeviceGroupByPrimaryKey(Collection<Integer> idCollection){
        return deviceGroupManager.deleteByPrimaryKey(idCollection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 设备组id
     * @see {@link IDeviceGroupManager#existsPrimaryKey(Integer)}
     */  
    static boolean _existsDeviceGroup(Integer id){
        return deviceGroupManager.existsPrimaryKey(id);
    }
    /**
     * 删除主键指定的记录

     * @param id 设备组id 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IDeviceGroupManager#deleteByPrimaryKey(Integer)}
     */
    static int _deleteDeviceGroup(Integer id){
        return deviceGroupManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除{@code deviceGroupCollection}列表指定的记录

     * @param id 设备组id 
     * @return 返回删除的记录条数
     * @see {@link IDeviceGroupManager#delete(Collection)}
     */
    static int _deleteDeviceGroup(Collection<DeviceGroupBean> deviceGroupCollection){
        return deviceGroupManager.delete(deviceGroupCollection);
    }
    /** 
     * @see {@link IDeviceGroupManager#checkDuplicate(DeviceGroupBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static DeviceGroupBean _checkDuplicate(DeviceGroupBean deviceGroup)throws ObjectRetrievalException{
        return deviceGroupManager.checkDuplicate(deviceGroup);
    }
    /** 
     * @see {@link IDeviceGroupManager#save(DeviceGroupBean)}
     */
    static DeviceGroupBean _save(DeviceGroupBean deviceGroup){
        return deviceGroupManager.save(deviceGroup);
    }
    /** 同步保存 */
    static DeviceGroupBean _save(DeviceGroupBean deviceGroup
        , DeviceGroupBean refDevicegroupByParent 
        , Collection<DeviceBean> impDeviceByGroupId 
        , Collection<DeviceGroupBean> impDevicegroupByParent 
        , Collection<PermitBean> impPermitByDeviceGroupId ){
        return deviceGroupManager.save(deviceGroup
            , refDevicegroupByParent 
            , impDeviceByGroupId 
            , impDevicegroupByParent 
            , impPermitByDeviceGroupId );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IDeviceGroupManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<DeviceGroupBean> _loadDeviceGroupByWhere(String where,int startRow, int numRows){
        return deviceGroupManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_device_group 表的所有记录
     * @see {@link IDeviceGroupManager#loadAllAsList()}
     */
    static List<DeviceGroupBean> _loadDeviceGroupAll(){
        return deviceGroupManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadDeviceGroupByWhere(String,int,int)
     */
    static List<Integer> _loadDeviceGroupIdByWhere(String where){
        return Lists.transform(_loadDeviceGroupByWhere(where,1,-1),
            new Function<DeviceGroupBean,Integer>(){
                @Override
                public Integer apply(DeviceGroupBean input) {
                    return input.getId();
                }});
    }



    //////////// FL_PERSON /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 用户id
     * @see {@link IPersonManager#loadByPrimaryKey(Integer)}
     */
    static PersonBean _getPerson(Integer id){
        return personManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IPersonManager#loadByPrimaryKey(Collection)}
     */    
    static List<PersonBean> _getPerson(Collection<Integer> idCollection){
        return personManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IPersonManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deletePersonByPrimaryKey(Collection<Integer> idCollection){
        return personManager.deleteByPrimaryKey(idCollection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 用户id
     * @see {@link IPersonManager#existsPrimaryKey(Integer)}
     */  
    static boolean _existsPerson(Integer id){
        return personManager.existsPrimaryKey(id);
    }
    /**
     * 删除主键指定的记录

     * @param id 用户id 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPersonManager#deleteByPrimaryKey(Integer)}
     */
    static int _deletePerson(Integer id){
        return personManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除{@code personCollection}列表指定的记录

     * @param id 用户id 
     * @return 返回删除的记录条数
     * @see {@link IPersonManager#delete(Collection)}
     */
    static int _deletePerson(Collection<PersonBean> personCollection){
        return personManager.delete(personCollection);
    }
    /** 
     * @see {@link IPersonManager#checkDuplicate(PersonBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static PersonBean _checkDuplicate(PersonBean person)throws ObjectRetrievalException{
        return personManager.checkDuplicate(person);
    }
    /** 
     * @see {@link IPersonManager#save(PersonBean)}
     */
    static PersonBean _save(PersonBean person){
        return personManager.save(person);
    }
    /** 同步保存 */
    static PersonBean _save(PersonBean person
        , ImageBean refImageByImageMd5 
        , PersonGroupBean refPersongroupByGroupId 
        , Collection<FeatureBean> impFeatureByPersonId 
        , Collection<LogBean> impLogByPersonId ){
        return personManager.save(person
            , refImageByImageMd5 
            , refPersongroupByGroupId 
            , impFeatureByPersonId 
            , impLogByPersonId );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IPersonManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<PersonBean> _loadPersonByWhere(String where,int startRow, int numRows){
        return personManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_person 表的所有记录
     * @see {@link IPersonManager#loadAllAsList()}
     */
    static List<PersonBean> _loadPersonAll(){
        return personManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadPersonByWhere(String,int,int)
     */
    static List<Integer> _loadPersonIdByWhere(String where){
        return Lists.transform(_loadPersonByWhere(where,1,-1),
            new Function<PersonBean,Integer>(){
                @Override
                public Integer apply(PersonBean input) {
                    return input.getId();
                }});
    }
    /**
     * 返回 fl_person.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadPersonByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<PersonBean> _loadPersonByCreateTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE create_time >'%s'", timestampFormatter.format(timestamp));
        return _loadPersonByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadPersonByCreateTime(Date,int,int)} */
    static List<PersonBean> _loadPersonByCreateTime(Date timestamp){
        return _loadPersonByCreateTime(timestamp,1,-1);
    }
    /** 
     * @return 返回查询结果记录的主键
     * @see {@link #_loadPersonByCreateTime(Date,int,int)} 
     */
    static List<Integer> _loadPersonIdByCreateTime(Date timestamp){
        return Lists.transform(_loadPersonByCreateTime(timestamp,1,-1),
            new Function<PersonBean,Integer>(){
                @Override
                public Integer apply(PersonBean input) {
                    return input.getId();
                }});
    }

    /**
     * 返回 fl_person.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadPersonByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<PersonBean> _loadPersonByUpdateTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE update_time >'%s'", timestampFormatter.format(timestamp));
        return _loadPersonByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadPersonByUpdateTime(Date,int,int)} */
    static List<PersonBean> _loadPersonByUpdateTime(Date timestamp){
        return _loadPersonByUpdateTime(timestamp,1,-1);
    }
    /** 
     * @return 返回查询结果记录的主键
     * @see {@link #_loadPersonByUpdateTime(Date,int,int)} 
     */
    static List<Integer> _loadPersonIdByUpdateTime(Date timestamp){
        return Lists.transform(_loadPersonByUpdateTime(timestamp,1,-1),
            new Function<PersonBean,Integer>(){
                @Override
                public Integer apply(PersonBean input) {
                    return input.getId();
                }});
    }


    //////////// FL_PERSON_GROUP /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 用户组id
     * @see {@link IPersonGroupManager#loadByPrimaryKey(Integer)}
     */
    static PersonGroupBean _getPersonGroup(Integer id){
        return personGroupManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IPersonGroupManager#loadByPrimaryKey(Collection)}
     */    
    static List<PersonGroupBean> _getPersonGroup(Collection<Integer> idCollection){
        return personGroupManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IPersonGroupManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deletePersonGroupByPrimaryKey(Collection<Integer> idCollection){
        return personGroupManager.deleteByPrimaryKey(idCollection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 用户组id
     * @see {@link IPersonGroupManager#existsPrimaryKey(Integer)}
     */  
    static boolean _existsPersonGroup(Integer id){
        return personGroupManager.existsPrimaryKey(id);
    }
    /**
     * 删除主键指定的记录

     * @param id 用户组id 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPersonGroupManager#deleteByPrimaryKey(Integer)}
     */
    static int _deletePersonGroup(Integer id){
        return personGroupManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除{@code personGroupCollection}列表指定的记录

     * @param id 用户组id 
     * @return 返回删除的记录条数
     * @see {@link IPersonGroupManager#delete(Collection)}
     */
    static int _deletePersonGroup(Collection<PersonGroupBean> personGroupCollection){
        return personGroupManager.delete(personGroupCollection);
    }
    /** 
     * @see {@link IPersonGroupManager#checkDuplicate(PersonGroupBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static PersonGroupBean _checkDuplicate(PersonGroupBean personGroup)throws ObjectRetrievalException{
        return personGroupManager.checkDuplicate(personGroup);
    }
    /** 
     * @see {@link IPersonGroupManager#save(PersonGroupBean)}
     */
    static PersonGroupBean _save(PersonGroupBean personGroup){
        return personGroupManager.save(personGroup);
    }
    /** 同步保存 */
    static PersonGroupBean _save(PersonGroupBean personGroup
        , PersonGroupBean refPersongroupByParent 
        , Collection<PermitBean> impPermitByPersonGroupId 
        , Collection<PersonBean> impPersonByGroupId 
        , Collection<PersonGroupBean> impPersongroupByParent ){
        return personGroupManager.save(personGroup
            , refPersongroupByParent 
            , impPermitByPersonGroupId 
            , impPersonByGroupId 
            , impPersongroupByParent );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IPersonGroupManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<PersonGroupBean> _loadPersonGroupByWhere(String where,int startRow, int numRows){
        return personGroupManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_person_group 表的所有记录
     * @see {@link IPersonGroupManager#loadAllAsList()}
     */
    static List<PersonGroupBean> _loadPersonGroupAll(){
        return personGroupManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadPersonGroupByWhere(String,int,int)
     */
    static List<Integer> _loadPersonGroupIdByWhere(String where){
        return Lists.transform(_loadPersonGroupByWhere(where,1,-1),
            new Function<PersonGroupBean,Integer>(){
                @Override
                public Integer apply(PersonGroupBean input) {
                    return input.getId();
                }});
    }



    //////////// FL_FACE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 主键
     * @see {@link IFaceManager#loadByPrimaryKey(Integer)}
     */
    static FaceBean _getFace(Integer id){
        return faceManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IFaceManager#loadByPrimaryKey(Collection)}
     */    
    static List<FaceBean> _getFace(Collection<Integer> idCollection){
        return faceManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IFaceManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deleteFaceByPrimaryKey(Collection<Integer> idCollection){
        return faceManager.deleteByPrimaryKey(idCollection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 主键
     * @see {@link IFaceManager#existsPrimaryKey(Integer)}
     */  
    static boolean _existsFace(Integer id){
        return faceManager.existsPrimaryKey(id);
    }
    /**
     * 删除主键指定的记录

     * @param id 主键 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IFaceManager#deleteByPrimaryKey(Integer)}
     */
    static int _deleteFace(Integer id){
        return faceManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除{@code faceCollection}列表指定的记录

     * @param id 主键 
     * @return 返回删除的记录条数
     * @see {@link IFaceManager#delete(Collection)}
     */
    static int _deleteFace(Collection<FaceBean> faceCollection){
        return faceManager.delete(faceCollection);
    }
    /** 
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static FaceBean _checkDuplicate(FaceBean face)throws ObjectRetrievalException{
        return faceManager.checkDuplicate(face);
    }
    /** 
     * 添加新记录<br>
     * fl_face 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FaceBean#isNew()}返回{@code false},则抛出异常
     * @param face 要添加的新记录
     * @see {@link IFaceManager#save(FaceBean)}
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code face.isNew()} is {@code false}
     */
    static FaceBean _add(FaceBean face)throws ObjectRetrievalException{
        checkArgument(face.isNew(),"can be add,delete,but modify record for fl_face,so the _isNew field must be true");
        return faceManager.save(faceManager.checkDuplicate(face));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_face 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FaceBean#isNew()}返回{@code false},则抛出异常
     * @param face 要添加的新记录
     * @see {@link IFaceManager#save(FaceBean , FeatureBean, ImageBean , Collection )}
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code face.isNew()} is {@code false}
     */
    static FaceBean _save(FaceBean face
        , FeatureBean refFeatureByFeatureMd5 
        , ImageBean refImageByImageMd5 
        , Collection<LogBean> impLogByCompareFace )throws ObjectRetrievalException{
        checkArgument(face.isNew(),"can be add,delete,but modify record for fl_face,so the _isNew field must be true");
        faceManager.checkDuplicate(face);
        return faceManager.save(face
            , refFeatureByFeatureMd5 
            , refImageByImageMd5 
            , impLogByCompareFace );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IFaceManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<FaceBean> _loadFaceByWhere(String where,int startRow, int numRows){
        return faceManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_face 表的所有记录
     * @see {@link IFaceManager#loadAllAsList()}
     */
    static List<FaceBean> _loadFaceAll(){
        return faceManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadFaceByWhere(String,int,int)
     */
    static List<Integer> _loadFaceIdByWhere(String where){
        return Lists.transform(_loadFaceByWhere(where,1,-1),
            new Function<FaceBean,Integer>(){
                @Override
                public Integer apply(FaceBean input) {
                    return input.getId();
                }});
    }
    /**
     * 返回 fl_face.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadFaceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<FaceBean> _loadFaceByCreateTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE create_time >'%s'", timestampFormatter.format(timestamp));
        return _loadFaceByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadFaceByCreateTime(Date,int,int)} */
    static List<FaceBean> _loadFaceByCreateTime(Date timestamp){
        return _loadFaceByCreateTime(timestamp,1,-1);
    }
    /** 
     * @return 返回查询结果记录的主键
     * @see {@link #_loadFaceByCreateTime(Date,int,int)} 
     */
    static List<Integer> _loadFaceIdByCreateTime(Date timestamp){
        return Lists.transform(_loadFaceByCreateTime(timestamp,1,-1),
            new Function<FaceBean,Integer>(){
                @Override
                public Integer apply(FaceBean input) {
                    return input.getId();
                }});
    }



    //////////// FL_FEATURE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,特征码md5校验码
     * @see {@link IFeatureManager#loadByPrimaryKey(String)}
     */
    static FeatureBean _getFeature(String md5){
        return featureManager.loadByPrimaryKey(md5);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IFeatureManager#loadByPrimaryKey(Collection)}
     */    
    static List<FeatureBean> _getFeature(Collection<String> md5Collection){
        return featureManager.loadByPrimaryKey(md5Collection);
    }
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IFeatureManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deleteFeatureByPrimaryKey(Collection<String> md5Collection){
        return featureManager.deleteByPrimaryKey(md5Collection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,特征码md5校验码
     * @see {@link IFeatureManager#existsPrimaryKey(String)}
     */  
    static boolean _existsFeature(String md5){
        return featureManager.existsPrimaryKey(md5);
    }
    /**
     * 删除主键指定的记录

     * @param md5 主键,特征码md5校验码 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IFeatureManager#deleteByPrimaryKey(String)}
     */
    static int _deleteFeature(String md5){
        return featureManager.deleteByPrimaryKey(md5);
    }
    /**
     * 删除{@code featureCollection}列表指定的记录

     * @param md5 主键,特征码md5校验码 
     * @return 返回删除的记录条数
     * @see {@link IFeatureManager#delete(Collection)}
     */
    static int _deleteFeature(Collection<FeatureBean> featureCollection){
        return featureManager.delete(featureCollection);
    }
    /** 
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static FeatureBean _checkDuplicate(FeatureBean feature)throws ObjectRetrievalException{
        return featureManager.checkDuplicate(feature);
    }
    /** 
     * 添加新记录<br>
     * fl_feature 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FeatureBean#isNew()}返回{@code false},则抛出异常
     * @param feature 要添加的新记录
     * @see {@link IFeatureManager#save(FeatureBean)}
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code feature.isNew()} is {@code false}
     */
    static FeatureBean _add(FeatureBean feature)throws ObjectRetrievalException{
        checkArgument(feature.isNew(),"can be add,delete,but modify record for fl_feature,so the _isNew field must be true");
        return featureManager.save(featureManager.checkDuplicate(feature));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_feature 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FeatureBean#isNew()}返回{@code false},则抛出异常
     * @param feature 要添加的新记录
     * @see {@link IFeatureManager#save(FeatureBean , PersonBean , Collection, Collection )}
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code feature.isNew()} is {@code false}
     */
    static FeatureBean _save(FeatureBean feature
        , PersonBean refPersonByPersonId 
        , Collection<FaceBean> impFaceByFeatureMd5 
        , Collection<LogBean> impLogByVerifyFeature )throws ObjectRetrievalException{
        checkArgument(feature.isNew(),"can be add,delete,but modify record for fl_feature,so the _isNew field must be true");
        featureManager.checkDuplicate(feature);
        return featureManager.save(feature
            , refPersonByPersonId 
            , impFaceByFeatureMd5 
            , impLogByVerifyFeature );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IFeatureManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<FeatureBean> _loadFeatureByWhere(String where,int startRow, int numRows){
        return featureManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_feature 表的所有记录
     * @see {@link IFeatureManager#loadAllAsList()}
     */
    static List<FeatureBean> _loadFeatureAll(){
        return featureManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadFeatureByWhere(String,int,int)
     */
    static List<String> _loadFeatureMd5ByWhere(String where){
        return Lists.transform(_loadFeatureByWhere(where,1,-1),
            new Function<FeatureBean,String>(){
                @Override
                public String apply(FeatureBean input) {
                    return input.getMd5();
                }});
    }

    /**
     * 返回 fl_feature.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadFeatureByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<FeatureBean> _loadFeatureByUpdateTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE update_time >'%s'", timestampFormatter.format(timestamp));
        return _loadFeatureByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadFeatureByUpdateTime(Date,int,int)} */
    static List<FeatureBean> _loadFeatureByUpdateTime(Date timestamp){
        return _loadFeatureByUpdateTime(timestamp,1,-1);
    }
    /** 
     * @return 返回查询结果记录的主键
     * @see {@link #_loadFeatureByUpdateTime(Date,int,int)} 
     */
    static List<String> _loadFeatureMd5ByUpdateTime(Date timestamp){
        return Lists.transform(_loadFeatureByUpdateTime(timestamp,1,-1),
            new Function<FeatureBean,String>(){
                @Override
                public String apply(FeatureBean input) {
                    return input.getMd5();
                }});
    }


    //////////// FL_IMAGE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key
     * @see {@link IImageManager#loadByPrimaryKey(String)}
     */
    static ImageBean _getImage(String md5){
        return imageManager.loadByPrimaryKey(md5);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IImageManager#loadByPrimaryKey(Collection)}
     */    
    static List<ImageBean> _getImage(Collection<String> md5Collection){
        return imageManager.loadByPrimaryKey(md5Collection);
    }
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IImageManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deleteImageByPrimaryKey(Collection<String> md5Collection){
        return imageManager.deleteByPrimaryKey(md5Collection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key
     * @see {@link IImageManager#existsPrimaryKey(String)}
     */  
    static boolean _existsImage(String md5){
        return imageManager.existsPrimaryKey(md5);
    }
    /**
     * 删除主键指定的记录

     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IImageManager#deleteByPrimaryKey(String)}
     */
    static int _deleteImage(String md5){
        return imageManager.deleteByPrimaryKey(md5);
    }
    /**
     * 删除{@code imageCollection}列表指定的记录

     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @return 返回删除的记录条数
     * @see {@link IImageManager#delete(Collection)}
     */
    static int _deleteImage(Collection<ImageBean> imageCollection){
        return imageManager.delete(imageCollection);
    }
    /** 
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static ImageBean _checkDuplicate(ImageBean image)throws ObjectRetrievalException{
        return imageManager.checkDuplicate(image);
    }
    /** 
     * 添加新记录<br>
     * fl_image 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link ImageBean#isNew()}返回{@code false},则抛出异常
     * @param image 要添加的新记录
     * @see {@link IImageManager#save(ImageBean)}
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code image.isNew()} is {@code false}
     */
    static ImageBean _add(ImageBean image)throws ObjectRetrievalException{
        checkArgument(image.isNew(),"can be add,delete,but modify record for fl_image,so the _isNew field must be true");
        return imageManager.save(imageManager.checkDuplicate(image));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_image 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link ImageBean#isNew()}返回{@code false},则抛出异常
     * @param image 要添加的新记录
     * @see {@link IImageManager#save(ImageBean , DeviceBean , Collection, Collection )}
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code image.isNew()} is {@code false}
     */
    static ImageBean _save(ImageBean image
        , DeviceBean refDeviceByDeviceId 
        , Collection<FaceBean> impFaceByImageMd5 
        , Collection<PersonBean> impPersonByImageMd5 )throws ObjectRetrievalException{
        checkArgument(image.isNew(),"can be add,delete,but modify record for fl_image,so the _isNew field must be true");
        imageManager.checkDuplicate(image);
        return imageManager.save(image
            , refDeviceByDeviceId 
            , impFaceByImageMd5 
            , impPersonByImageMd5 );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IImageManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<ImageBean> _loadImageByWhere(String where,int startRow, int numRows){
        return imageManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_image 表的所有记录
     * @see {@link IImageManager#loadAllAsList()}
     */
    static List<ImageBean> _loadImageAll(){
        return imageManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadImageByWhere(String,int,int)
     */
    static List<String> _loadImageMd5ByWhere(String where){
        return Lists.transform(_loadImageByWhere(where,1,-1),
            new Function<ImageBean,String>(){
                @Override
                public String apply(ImageBean input) {
                    return input.getMd5();
                }});
    }



    //////////// FL_LOG /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 日志id
     * @see {@link ILogManager#loadByPrimaryKey(Integer)}
     */
    static LogBean _getLog(Integer id){
        return logManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link ILogManager#loadByPrimaryKey(Collection)}
     */    
    static List<LogBean> _getLog(Collection<Integer> idCollection){
        return logManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link ILogManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deleteLogByPrimaryKey(Collection<Integer> idCollection){
        return logManager.deleteByPrimaryKey(idCollection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 日志id
     * @see {@link ILogManager#existsPrimaryKey(Integer)}
     */  
    static boolean _existsLog(Integer id){
        return logManager.existsPrimaryKey(id);
    }
    /**
     * 删除主键指定的记录

     * @param id 日志id 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link ILogManager#deleteByPrimaryKey(Integer)}
     */
    static int _deleteLog(Integer id){
        return logManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除{@code logCollection}列表指定的记录

     * @param id 日志id 
     * @return 返回删除的记录条数
     * @see {@link ILogManager#delete(Collection)}
     */
    static int _deleteLog(Collection<LogBean> logCollection){
        return logManager.delete(logCollection);
    }
    /** 
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static LogBean _checkDuplicate(LogBean log)throws ObjectRetrievalException{
        return logManager.checkDuplicate(log);
    }
    /** 
     * 添加新记录<br>
     * fl_log 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link LogBean#isNew()}返回{@code false},则抛出异常
     * @param log 要添加的新记录
     * @see {@link ILogManager#save(LogBean)}
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code log.isNew()} is {@code false}
     */
    static LogBean _add(LogBean log)throws ObjectRetrievalException{
        checkArgument(log.isNew(),"can be add,delete,but modify record for fl_log,so the _isNew field must be true");
        return logManager.save(logManager.checkDuplicate(log));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_log 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link LogBean#isNew()}返回{@code false},则抛出异常
     * @param log 要添加的新记录
     * @see {@link ILogManager#save(LogBean , DeviceBean, FaceBean, FeatureBean, PersonBean  )}
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code log.isNew()} is {@code false}
     */
    static LogBean _save(LogBean log
        , DeviceBean refDeviceByDeviceId 
        , FaceBean refFaceByCompareFace 
        , FeatureBean refFeatureByVerifyFeature 
        , PersonBean refPersonByPersonId 
        )throws ObjectRetrievalException{
        checkArgument(log.isNew(),"can be add,delete,but modify record for fl_log,so the _isNew field must be true");
        logManager.checkDuplicate(log);
        return logManager.save(log
            , refDeviceByDeviceId 
            , refFaceByCompareFace 
            , refFeatureByVerifyFeature 
            , refPersonByPersonId 
            );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link ILogManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<LogBean> _loadLogByWhere(String where,int startRow, int numRows){
        return logManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_log 表的所有记录
     * @see {@link ILogManager#loadAllAsList()}
     */
    static List<LogBean> _loadLogAll(){
        return logManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadLogByWhere(String,int,int)
     */
    static List<Integer> _loadLogIdByWhere(String where){
        return Lists.transform(_loadLogByWhere(where,1,-1),
            new Function<LogBean,Integer>(){
                @Override
                public Integer apply(LogBean input) {
                    return input.getId();
                }});
    }
    /**
     * 返回 fl_log.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadLogByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<LogBean> _loadLogByCreateTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE create_time >'%s'", timestampFormatter.format(timestamp));
        return _loadLogByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadLogByCreateTime(Date,int,int)} */
    static List<LogBean> _loadLogByCreateTime(Date timestamp){
        return _loadLogByCreateTime(timestamp,1,-1);
    }
    /** 
     * @return 返回查询结果记录的主键
     * @see {@link #_loadLogByCreateTime(Date,int,int)} 
     */
    static List<Integer> _loadLogIdByCreateTime(Date timestamp){
        return Lists.transform(_loadLogByCreateTime(timestamp,1,-1),
            new Function<LogBean,Integer>(){
                @Override
                public Integer apply(LogBean input) {
                    return input.getId();
                }});
    }


    /**
     * 返回 fl_log.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadLogByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<LogBean> _loadLogByVerifyTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE verify_time >'%s'", timestampFormatter.format(timestamp));
        return _loadLogByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadLogByVerifyTime(Date,int,int)} */
    static List<LogBean> _loadLogByVerifyTime(Date timestamp){
        return _loadLogByVerifyTime(timestamp,1,-1);
    }
    /** 
     * @return 返回查询结果记录的主键
     * @see {@link #_loadLogByVerifyTime(Date,int,int)} 
     */
    static List<Integer> _loadLogIdByVerifyTime(Date timestamp){
        return Lists.transform(_loadLogByVerifyTime(timestamp,1,-1),
            new Function<LogBean,Integer>(){
                @Override
                public Integer apply(LogBean input) {
                    return input.getId();
                }});
    }

    //////////// FL_PERMIT /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param deviceGroupId 外键,设备组id
     * @param personGroupId 外键,人员组id
     * @see {@link IPermitManager#loadByPrimaryKey(Integer,Integer)}
     */
    static PermitBean _getPermit(Integer deviceGroupId,Integer personGroupId){
        return permitManager.loadByPrimaryKey(deviceGroupId,personGroupId);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param deviceGroupId 外键,设备组id
     * @param personGroupId 外键,人员组id
     * @see {@link IPermitManager#existsPrimaryKey(Integer,Integer)}
     */  
    static boolean _existsPermit(Integer deviceGroupId,Integer personGroupId){
        return permitManager.existsPrimaryKey(deviceGroupId,personGroupId);
    }
    /**
     * 删除主键指定的记录

     * @param deviceGroupId 外键,设备组id
     * @param personGroupId 外键,人员组id 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPermitManager#deleteByPrimaryKey(Integer,Integer)}
     */
    static int _deletePermit(Integer deviceGroupId,Integer personGroupId){
        return permitManager.deleteByPrimaryKey(deviceGroupId,personGroupId);
    }
    /**
     * 删除{@code permitCollection}列表指定的记录

     * @param deviceGroupId 外键,设备组id
     * @param personGroupId 外键,人员组id 
     * @return 返回删除的记录条数
     * @see {@link IPermitManager#delete(Collection)}
     */
    static int _deletePermit(Collection<PermitBean> permitCollection){
        return permitManager.delete(permitCollection);
    }
    /** 
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static PermitBean _checkDuplicate(PermitBean permit)throws ObjectRetrievalException{
        return permitManager.checkDuplicate(permit);
    }
    /** 
     * 添加新记录<br>
     * fl_permit 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link PermitBean#isNew()}返回{@code false},则抛出异常
     * @param permit 要添加的新记录
     * @see {@link IPermitManager#save(PermitBean)}
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code permit.isNew()} is {@code false}
     */
    static PermitBean _add(PermitBean permit)throws ObjectRetrievalException{
        checkArgument(permit.isNew(),"can be add,delete,but modify record for fl_permit,so the _isNew field must be true");
        return permitManager.save(permitManager.checkDuplicate(permit));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_permit 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link PermitBean#isNew()}返回{@code false},则抛出异常
     * @param permit 要添加的新记录
     * @see {@link IPermitManager#save(PermitBean , DeviceGroupBean, PersonGroupBean  )}
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code permit.isNew()} is {@code false}
     */
    static PermitBean _save(PermitBean permit
        , DeviceGroupBean refDevicegroupByDeviceGroupId 
        , PersonGroupBean refPersongroupByPersonGroupId 
        )throws ObjectRetrievalException{
        checkArgument(permit.isNew(),"can be add,delete,but modify record for fl_permit,so the _isNew field must be true");
        permitManager.checkDuplicate(permit);
        return permitManager.save(permit
            , refDevicegroupByDeviceGroupId 
            , refPersongroupByPersonGroupId 
            );
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IPermitManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<PermitBean> _loadPermitByWhere(String where,int startRow, int numRows){
        return permitManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_permit 表的所有记录
     * @see {@link IPermitManager#loadAllAsList()}
     */
    static List<PermitBean> _loadPermitAll(){
        return permitManager.loadAllAsList();
    }
    /**
     * 返回 fl_permit.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadPermitByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<PermitBean> _loadPermitByCreateTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE create_time >'%s'", timestampFormatter.format(timestamp));
        return _loadPermitByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadPermitByCreateTime(Date,int,int)} */
    static List<PermitBean> _loadPermitByCreateTime(Date timestamp){
        return _loadPermitByCreateTime(timestamp,1,-1);
    }



    //////////// FL_STORE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,md5检验码
     * @see {@link IStoreManager#loadByPrimaryKey(String)}
     */
    static StoreBean _getStore(String md5){
        return storeManager.loadByPrimaryKey(md5);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IStoreManager#loadByPrimaryKey(Collection)}
     */    
    static List<StoreBean> _getStore(Collection<String> md5Collection){
        return storeManager.loadByPrimaryKey(md5Collection);
    }
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IStoreManager#deleteByPrimaryKey(Collection)}
     */    
    static int _deleteStoreByPrimaryKey(Collection<String> md5Collection){
        return storeManager.deleteByPrimaryKey(md5Collection);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,md5检验码
     * @see {@link IStoreManager#existsPrimaryKey(String)}
     */  
    static boolean _existsStore(String md5){
        return storeManager.existsPrimaryKey(md5);
    }
    /**
     * 删除主键指定的记录

     * @param md5 主键,md5检验码 
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IStoreManager#deleteByPrimaryKey(String)}
     */
    static int _deleteStore(String md5){
        return storeManager.deleteByPrimaryKey(md5);
    }
    /**
     * 删除{@code storeCollection}列表指定的记录

     * @param md5 主键,md5检验码 
     * @return 返回删除的记录条数
     * @see {@link IStoreManager#delete(Collection)}
     */
    static int _deleteStore(Collection<StoreBean> storeCollection){
        return storeManager.delete(storeCollection);
    }
    /** 
     * @see {@link IStoreManager#checkDuplicate(StoreBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     */
    static StoreBean _checkDuplicate(StoreBean store)throws ObjectRetrievalException{
        return storeManager.checkDuplicate(store);
    }
    /** 
     * 添加新记录<br>
     * fl_store 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link StoreBean#isNew()}返回{@code false},则抛出异常
     * @param store 要添加的新记录
     * @see {@link IStoreManager#save(StoreBean)}
     * @see {@link IStoreManager#checkDuplicate(StoreBean)}
     * @throws ObjectRetrievalException if exists duplicated row
     * @throws IllegalArgumentException if {@code store.isNew()} is {@code false}
     */
    static StoreBean _add(StoreBean store)throws ObjectRetrievalException{
        checkArgument(store.isNew(),"can be add,delete,but modify record for fl_store,so the _isNew field must be true");
        return storeManager.save(storeManager.checkDuplicate(store));
    }
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link IStoreManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<StoreBean> _loadStoreByWhere(String where,int startRow, int numRows){
        return storeManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_store 表的所有记录
     * @see {@link IStoreManager#loadAllAsList()}
     */
    static List<StoreBean> _loadStoreAll(){
        return storeManager.loadAllAsList();
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadStoreByWhere(String,int,int)
     */
    static List<String> _loadStoreMd5ByWhere(String where){
        return Lists.transform(_loadStoreByWhere(where,1,-1),
            new Function<StoreBean,String>(){
                @Override
                public String apply(StoreBean input) {
                    return input.getMd5();
                }});
    }



    //////////// FL_LOG_LIGHT /////////
    /**
     * 查询{@code where}条件指定的记录
     * @see {@link ILogLightManager#loadByWhereAsList(String,int[],int,int)}
     */
    static List<LogLightBean> _loadLogLightByWhere(String where,int startRow, int numRows){
        return logLightManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_log_light 表的所有记录
     * @see {@link ILogLightManager#loadAllAsList()}
     */
    static List<LogLightBean> _loadLogLightAll(){
        return logLightManager.loadAllAsList();
    }


    /**
     * 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadLogLightByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    static List<LogLightBean> _loadLogLightByVerifyTime(Date timestamp,int startRow, int numRows){
        checkNotNull(timestamp);
        String where = String.format("WHERE verify_time >'%s'", timestampFormatter.format(timestamp));
        return _loadLogLightByWhere(where,startRow,numRows);
    }
    /** 参见 {@link #_loadLogLightByVerifyTime(Date,int,int)} */
    static List<LogLightBean> _loadLogLightByVerifyTime(Date timestamp){
        return _loadLogLightByVerifyTime(timestamp,1,-1);
    }

}
