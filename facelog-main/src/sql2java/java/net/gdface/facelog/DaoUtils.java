// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: daoutils.java.vm
// ______________________________________________________
package net.gdface.facelog;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Callable;

import com.google.common.base.Objects;


import net.gdface.facelog.db.IDeviceManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.IDeviceGroupManager;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.IFaceManager;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.IFeatureManager;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.IImageManager;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.ILogManager;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.IPermitManager;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.IPersonManager;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.IPersonGroupManager;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.IStoreManager;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.ILogLightManager;
import net.gdface.facelog.db.LogLightBean;
import net.gdface.facelog.db.exception.ObjectRetrievalException;
import net.gdface.facelog.db.exception.WrapDAOException;

/**
 * 数据库访问基础方法
 * @author guyadong
 *
 */
class DaoUtils implements CommonConstant {
    
    static final IDeviceManager deviceManager = TableManagerInitializer.instance.deviceManager;
    static final IDeviceGroupManager deviceGroupManager = TableManagerInitializer.instance.deviceGroupManager;
    static final IFaceManager faceManager = TableManagerInitializer.instance.faceManager;
    static final IFeatureManager featureManager = TableManagerInitializer.instance.featureManager;
    static final IImageManager imageManager = TableManagerInitializer.instance.imageManager;
    static final ILogManager logManager = TableManagerInitializer.instance.logManager;
    static final IPermitManager permitManager = TableManagerInitializer.instance.permitManager;
    static final IPersonManager personManager = TableManagerInitializer.instance.personManager;
    static final IPersonGroupManager personGroupManager = TableManagerInitializer.instance.personGroupManager;
    static final IStoreManager storeManager = TableManagerInitializer.instance.storeManager;
    static final ILogLightManager logLightManager = TableManagerInitializer.instance.logLightManager;
    /** 生成 SQL where 语句,example: {@code WHERE create_time >'2017-09-02 12:12:12'} */
    static private String makeWhere(Date timestamp,String field){
        checkNotNull(timestamp);
        return String.format("WHERE %s > '%s'", field,timestampFormatter.format(timestamp));    
    }
    /** 事务执行 */
    protected static <T> T _runAsTransaction(Callable<T> fun){
        return personManager.runAsTransaction(checkNotNull(fun));
    }
    /** 事务执行 */
    protected static void _runAsTransaction(Runnable fun){
        personManager.runAsTransaction(checkNotNull(fun));
    }
    //////////// FL_DEVICE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 设备id 
     * @see {@link IDeviceManager#loadByPrimaryKey(Integer)}
     */
    //1
    protected DeviceBean _getDevice(Integer id){
        return deviceManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IDeviceManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<DeviceBean> _getDevices(Collection<Integer> idCollection){
        return deviceManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IDeviceManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deleteDevicesByPrimaryKey(Collection<Integer> idCollection){
        if(null == idCollection)return 0;
        int count =0;
        for(Integer id:idCollection){
            count += _deleteDevice(id);
        }
        return count;
    }
    //3-5
    protected List<Integer> _toPrimaryKeyListFromDevices(Collection<DeviceBean> beans){
        return deviceManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 设备id 
     * @see {@link IDeviceManager#existsPrimaryKey(Integer)}
     */
    //4
    protected boolean _existsDevice(Integer id){
        return deviceManager.existsPrimaryKey(id);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IDeviceManager#existsPrimaryKey(DeviceBean)}
     */
    //4-2
    protected boolean _existsDevice(DeviceBean bean){
        return deviceManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param id 设备id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IDeviceManager#deleteByPrimaryKey(Integer)}
     */
    //5
    protected int _deleteDevice(Integer id){
        return deviceManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deleteDevice(Integer)
     */
    //5-2
    protected int _deleteDevice(DeviceBean bean){
        return null == bean ? null : _deleteDevice(bean.getId());
    }
    /**
     * 删除{@code deviceBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deleteDevice(Integer)
     */
    //6
    protected int _deleteDevices(Collection<DeviceBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(DeviceBean bean:beans){
            if(null != bean)
                count += _deleteDevice(bean.getId());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IDeviceManager#checkDuplicate(DeviceBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected DeviceBean _checkDuplicate(DeviceBean deviceBean)throws DuplicateReord{
        try{
            return deviceManager.checkDuplicate(deviceBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回外键(fl_image.device_id)引用指定记录(fl_device.id)的所有{@code fl_image}记录
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#getImageBeansByDeviceIdAsList(Integer)}
     */
    //8
    protected List<ImageBean> _getImageBeansByDeviceIdOnDevice(Integer idOfDevice){
        return deviceManager.getImageBeansByDeviceIdAsList(idOfDevice);
    }
    /**
     * 删除外键(idOfDevice))引用指定记录(fl_device.id)的所有{@code fl_image}记录
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#deleteImageBeansByDeviceId(Integer)}
     */
    //8-2
    protected int _deleteImageBeansByDeviceIdOnDevice(Integer idOfDevice){
        return deviceManager.deleteImageBeansByDeviceId(idOfDevice);
    }
    /**
     * 返回外键(fl_log.device_id)引用指定记录(fl_device.id)的所有{@code fl_log}记录
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#getLogBeansByDeviceIdAsList(Integer)}
     */
    //8
    protected List<LogBean> _getLogBeansByDeviceIdOnDevice(Integer idOfDevice){
        return deviceManager.getLogBeansByDeviceIdAsList(idOfDevice);
    }
    /**
     * 删除外键(idOfDevice))引用指定记录(fl_device.id)的所有{@code fl_log}记录
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#deleteLogBeansByDeviceId(Integer)}
     */
    //8-2
    protected int _deleteLogBeansByDeviceIdOnDevice(Integer idOfDevice){
        return deviceManager.deleteLogBeansByDeviceId(idOfDevice);
    }
    /**
     * 返回外键(fl_device.group_id)引用的 fl_device_group 记录
     * @param bean
     * @see {@link IDeviceManager#getReferencedByGroupId(DeviceBean)}
     */
    //8-3
    protected DeviceGroupBean _getReferencedByGroupIdOnDevice(DeviceBean bean){
        return deviceManager.getReferencedByGroupId(bean);
    }
    /**
     * 设置外键fl_device(group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IDeviceManager#setReferencedByGroupId(DeviceBean,DeviceGroupBean)}
     */
    //8-4
    protected DeviceGroupBean _setReferencedByGroupIdOnDevice(DeviceBean bean,DeviceGroupBean beanToSet){
        return deviceManager.setReferencedByGroupId(bean,beanToSet);
    }
    /** 
     * 参见 {@link IDeviceManager#save(DeviceBean)}
     */
    //14
    protected DeviceBean _saveDevice(DeviceBean deviceBean){
        _checkGroup(deviceBean);
        return deviceManager.save(deviceBean);
    }
    /** 同步保存 */
    //15
    protected DeviceBean _saveDevice(DeviceBean deviceBean
        , DeviceGroupBean refDevicegroupByGroupId 
        , Collection<ImageBean> impImageByDeviceId 
        , Collection<LogBean> impLogByDeviceId ){
        _checkGroup(deviceBean);
        return deviceManager.save(deviceBean
            , refDevicegroupByGroupId 
            , impImageByDeviceId 
            , impLogByDeviceId );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_saveDevice(DeviceBean)
     */
    //12-3-3
    protected Collection<DeviceBean> _saveDevices(Collection<DeviceBean> beans){
        if(null != beans){
            for(DeviceBean bean : beans)
                _saveDevice(bean);
        }
        return beans;
    }
    /** 
     * {@link #_saveDevice(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<DeviceBean> _saveDevicesAsTransaction(final Collection<DeviceBean> beans){
        return _runAsTransaction(new Callable<Collection<DeviceBean>>(){      
            @Override
            public Collection<DeviceBean> call() throws Exception {
                return _saveDevices(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_device 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IDeviceManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<DeviceBean> _loadDeviceByWhere(String where,int startRow, int numRows){
        return deviceManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_device 表的所有记录
     * @see {@link IDeviceManager#loadAllAsList()}
     */
    //17
    protected List<DeviceBean> _loadDeviceAll(){
        return deviceManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_device 记录总数
     * @see {@link IDeviceManager#Where(String)}
     */
    //17-2
    protected int _countDeviceByWhere(String where){
        return deviceManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadDeviceByWhere(String,int,int)
     */
    //18
    protected List<Integer> _loadDeviceIdByWhere(String where){
        return _toPrimaryKeyListFromDevices(_loadDeviceByWhere(where,1,-1));
    }
    /** 
     * 索引(fl_device.mac)查询<br>
     * 
     * @param mac 6字节MAC地址(HEX)
     * @see {@link IDeviceManager#loadByIndexMac(String)}
     */
    //18-5
    protected DeviceBean _loadDeviceByIndexMac(String mac){
        return deviceManager.loadByIndexMac(mac);
    }
    /** 
     * 索引(fl_device.serial_no)查询<br>
     * 
     * @param serialNo 设备序列号
     * @see {@link IDeviceManager#loadByIndexSerialNo(String)}
     */
    //18-5
    protected DeviceBean _loadDeviceByIndexSerialNo(String serialNo){
        return deviceManager.loadByIndexSerialNo(serialNo);
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_device.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadDeviceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<DeviceBean> _loadDeviceByCreateTime(Date timestamp,int startRow, int numRows){
        return _loadDeviceByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadDeviceByCreateTime(Date,int,int)} */
    //20
    protected List<DeviceBean> _loadDeviceByCreateTime(Date timestamp){
        return _loadDeviceByCreateTime(timestamp,1,-1);
    }
    /**
     * 返回fl_device.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countDeviceByWhere(String)
     */
    //20-5
    protected int _countDeviceByCreateTime(Date timestamp){
        return _countDeviceByWhere(makeWhere(timestamp,"create_time"));
    }
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_device.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #_loadDeviceIdByWhere(String)} 
     */
    //21
    protected List<Integer> _loadDeviceIdByCreateTime(Date timestamp){
        return _loadDeviceIdByWhere(makeWhere(timestamp,"create_time"));
    }

    /**
     * (主动更新机制实现)<br>
     * 返回 fl_device.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadDeviceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<DeviceBean> _loadDeviceByUpdateTime(Date timestamp,int startRow, int numRows){
        return _loadDeviceByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadDeviceByUpdateTime(Date,int,int)} */
    //20
    protected List<DeviceBean> _loadDeviceByUpdateTime(Date timestamp){
        return _loadDeviceByUpdateTime(timestamp,1,-1);
    }
    /**
     * 返回fl_device.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countDeviceByWhere(String)
     */
    //20-5
    protected int _countDeviceByUpdateTime(Date timestamp){
        return _countDeviceByWhere(makeWhere(timestamp,"update_time"));
    }
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_device.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #_loadDeviceIdByWhere(String)} 
     */
    //21
    protected List<Integer> _loadDeviceIdByUpdateTime(Date timestamp){
        return _loadDeviceIdByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_DEVICE_GROUP /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 设备组id 
     * @see {@link IDeviceGroupManager#loadByPrimaryKey(Integer)}
     */
    //1
    protected DeviceGroupBean _getDeviceGroup(Integer id){
        return deviceGroupManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IDeviceGroupManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<DeviceGroupBean> _getDeviceGroups(Collection<Integer> idCollection){
        return deviceGroupManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IDeviceGroupManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deleteDeviceGroupsByPrimaryKey(Collection<Integer> idCollection){
        if(null == idCollection)return 0;
        int count =0;
        for(Integer id:idCollection){
            count += _deleteDeviceGroup(id);
        }
        return count;
    }
    //3-5
    protected List<Integer> _toPrimaryKeyListFromDeviceGroups(Collection<DeviceGroupBean> beans){
        return deviceGroupManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 设备组id 
     * @see {@link IDeviceGroupManager#existsPrimaryKey(Integer)}
     */
    //4
    protected boolean _existsDeviceGroup(Integer id){
        return deviceGroupManager.existsPrimaryKey(id);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IDeviceGroupManager#existsPrimaryKey(DeviceGroupBean)}
     */
    //4-2
    protected boolean _existsDeviceGroup(DeviceGroupBean bean){
        return deviceGroupManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param id 设备组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IDeviceGroupManager#deleteByPrimaryKey(Integer)}
     */
    //5
    protected int _deleteDeviceGroup(Integer id){
        return deviceGroupManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deleteDeviceGroup(Integer)
     */
    //5-2
    protected int _deleteDeviceGroup(DeviceGroupBean bean){
        return null == bean ? null : _deleteDeviceGroup(bean.getId());
    }
    /**
     * 删除{@code deviceGroupBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deleteDeviceGroup(Integer)
     */
    //6
    protected int _deleteDeviceGroups(Collection<DeviceGroupBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(DeviceGroupBean bean:beans){
            if(null != bean)
                count += _deleteDeviceGroup(bean.getId());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IDeviceGroupManager#checkDuplicate(DeviceGroupBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected DeviceGroupBean _checkDuplicate(DeviceGroupBean deviceGroupBean)throws DuplicateReord{
        try{
            return deviceGroupManager.checkDuplicate(deviceGroupBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回属于{@code idOfDeviceGroup}指定组的所有{@code fl_device}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#getDeviceBeansByGroupIdAsList(Integer)}
     */
    //8
    protected List<DeviceBean> _getDevicesOfGroup(Integer idOfDeviceGroup){
        return deviceGroupManager.getDeviceBeansByGroupIdAsList(idOfDeviceGroup);
    }
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_device}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#deleteDeviceBeansByGroupId(Integer)}
     */
    //8-2
    protected int _deleteDeviceBeansByGroupIdOnDeviceGroup(Integer idOfDeviceGroup){
        return deviceGroupManager.deleteDeviceBeansByGroupId(idOfDeviceGroup);
    }
    /**
     * 返回{@code idOfDeviceGroup)}指定的组下的所有子节点,如果没有子节点则返回空表
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#getDeviceGroupBeansByParentAsList(Integer)}
     */
    //8
    protected List<DeviceGroupBean> _getSubDeviceGroup(Integer idOfDeviceGroup){
        return deviceGroupManager.getDeviceGroupBeansByParentAsList(idOfDeviceGroup);
    }
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_device_group}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#deleteDeviceGroupBeansByParent(Integer)}
     */
    //8-2
    protected int _deleteDeviceGroupBeansByParentOnDeviceGroup(Integer idOfDeviceGroup){
        return deviceGroupManager.deleteDeviceGroupBeansByParent(idOfDeviceGroup);
    }
    /**
     * 返回外键(fl_permit.device_group_id)引用指定记录(fl_device_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#getPermitBeansByDeviceGroupIdAsList(Integer)}
     */
    //8
    protected List<PermitBean> _getPermitBeansByDeviceGroupIdOnDeviceGroup(Integer idOfDeviceGroup){
        return deviceGroupManager.getPermitBeansByDeviceGroupIdAsList(idOfDeviceGroup);
    }
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#deletePermitBeansByDeviceGroupId(Integer)}
     */
    //8-2
    protected int _deletePermitBeansByDeviceGroupIdOnDeviceGroup(Integer idOfDeviceGroup){
        return deviceGroupManager.deletePermitBeansByDeviceGroupId(idOfDeviceGroup);
    }
    /**
     * 返回外键(fl_device_group.parent)引用的 fl_device_group 记录
     * @param bean
     * @see {@link IDeviceGroupManager#getReferencedByParent(DeviceGroupBean)}
     */
    //8-3
    protected DeviceGroupBean _getReferencedByParentOnDeviceGroup(DeviceGroupBean bean){
        return deviceGroupManager.getReferencedByParent(bean);
    }
    /**
     * 设置外键fl_device_group(parent)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IDeviceGroupManager#setReferencedByParent(DeviceGroupBean,DeviceGroupBean)}
     */
    //8-4
    protected DeviceGroupBean _setReferencedByParentOnDeviceGroup(DeviceGroupBean bean,DeviceGroupBean beanToSet){
        return deviceGroupManager.setReferencedByParent(bean,beanToSet);
    }
    /**
     * 返回(idOfDeviceGroup))指定的fl_device_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @see IDeviceGroupManager#listOfParent(Integer)
     */
    //9
    protected java.util.List<DeviceGroupBean> _listOfParentForDeviceGroup(Integer idOfDeviceGroup){
        return deviceGroupManager.listOfParent(idOfDeviceGroup);
    }
    /**
     * 返回{@code deviceGroupBean}指定的fl_device_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @see IDeviceGroupManager#listOfParent(DeviceGroupBean)
     */
    //9-2
    protected java.util.List<DeviceGroupBean> _listOfParentForDeviceGroup(DeviceGroupBean deviceGroupBean){
        return deviceGroupManager.listOfParent(deviceGroupBean);
    }
    /** 
     * 如果没有默认组则向 fl_device_group 表中增加默认组,失败则抛出异常 
     * 
     * @throws IllegalStateException 创建失败
     */
    //10
    protected void _saveDefaultDeviceGroupIfAbsent(){
        if(!_existsDeviceGroup(DEFAULT_GROUP_ID)){
            try{
                DeviceGroupBean bean = new DeviceGroupBean(DEFAULT_GROUP_ID);
                bean.setName(DEFAULT_GROUP_NAME);
                _saveDeviceGroup(bean);
            }catch(WrapDAOException e){}
            if(!_existsDeviceGroup(DEFAULT_GROUP_ID))
                throw new IllegalStateException("can't create default group for device_group"); 
        }
    }
    /**
     * 检查{@link DeviceBean}的'group_id'字段是否为默认组{@link CommonConstant#DEFAULT_GROUP_ID},
     * 如果是,且默认组记录不存在则创建默认组
     * @return {@code deviceBean}
     * @see #_saveDefaultDeviceGroupIfAbsent()
     */
    //11
    protected DeviceBean _checkGroup(DeviceBean deviceBean){
        if(null != deviceBean && Objects.equal(deviceBean.getGroupId(), DEFAULT_GROUP_ID)){
            _saveDefaultDeviceGroupIfAbsent();
        }
        return deviceBean;
    }
    /** 
     * 参见 {@link IDeviceGroupManager#save(DeviceGroupBean)}
     */
    //14
    protected DeviceGroupBean _saveDeviceGroup(DeviceGroupBean deviceGroupBean){
        return deviceGroupManager.save(deviceGroupBean);
    }
    /** 同步保存 */
    //15
    protected DeviceGroupBean _saveDeviceGroup(DeviceGroupBean deviceGroupBean
        , DeviceGroupBean refDevicegroupByParent 
        , Collection<DeviceBean> impDeviceByGroupId 
        , Collection<DeviceGroupBean> impDevicegroupByParent 
        , Collection<PermitBean> impPermitByDeviceGroupId ){
        return deviceGroupManager.save(deviceGroupBean
            , refDevicegroupByParent 
            , impDeviceByGroupId 
            , impDevicegroupByParent 
            , impPermitByDeviceGroupId );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_saveDeviceGroup(DeviceGroupBean)
     */
    //12-3-3
    protected Collection<DeviceGroupBean> _saveDeviceGroups(Collection<DeviceGroupBean> beans){
        if(null != beans){
            for(DeviceGroupBean bean : beans)
                _saveDeviceGroup(bean);
        }
        return beans;
    }
    /** 
     * {@link #_saveDeviceGroup(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<DeviceGroupBean> _saveDeviceGroupsAsTransaction(final Collection<DeviceGroupBean> beans){
        return _runAsTransaction(new Callable<Collection<DeviceGroupBean>>(){      
            @Override
            public Collection<DeviceGroupBean> call() throws Exception {
                return _saveDeviceGroups(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_device_group 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IDeviceGroupManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<DeviceGroupBean> _loadDeviceGroupByWhere(String where,int startRow, int numRows){
        return deviceGroupManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_device_group 表的所有记录
     * @see {@link IDeviceGroupManager#loadAllAsList()}
     */
    //17
    protected List<DeviceGroupBean> _loadDeviceGroupAll(){
        return deviceGroupManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_device_group 记录总数
     * @see {@link IDeviceGroupManager#Where(String)}
     */
    //17-2
    protected int _countDeviceGroupByWhere(String where){
        return deviceGroupManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadDeviceGroupByWhere(String,int,int)
     */
    //18
    protected List<Integer> _loadDeviceGroupIdByWhere(String where){
        return _toPrimaryKeyListFromDeviceGroups(_loadDeviceGroupByWhere(where,1,-1));
    }



    //////////// FL_PERSON /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 用户id 
     * @see {@link IPersonManager#loadByPrimaryKey(Integer)}
     */
    //1
    protected PersonBean _getPerson(Integer id){
        return personManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IPersonManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<PersonBean> _getPersons(Collection<Integer> idCollection){
        return personManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IPersonManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deletePersonsByPrimaryKey(Collection<Integer> idCollection){
        if(null == idCollection)return 0;
        int count =0;
        for(Integer id:idCollection){
            count += _deletePerson(id);
        }
        return count;
    }
    //3-5
    protected List<Integer> _toPrimaryKeyListFromPersons(Collection<PersonBean> beans){
        return personManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 用户id 
     * @see {@link IPersonManager#existsPrimaryKey(Integer)}
     */
    //4
    protected boolean _existsPerson(Integer id){
        return personManager.existsPrimaryKey(id);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IPersonManager#existsPrimaryKey(PersonBean)}
     */
    //4-2
    protected boolean _existsPerson(PersonBean bean){
        return personManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param id 用户id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPersonManager#deleteByPrimaryKey(Integer)}
     */
    //5
    protected int _deletePerson(Integer id){
        return personManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deletePerson(Integer)
     */
    //5-2
    protected int _deletePerson(PersonBean bean){
        return null == bean ? null : _deletePerson(bean.getId());
    }
    /**
     * 删除{@code personBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deletePerson(Integer)
     */
    //6
    protected int _deletePersons(Collection<PersonBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(PersonBean bean:beans){
            if(null != bean)
                count += _deletePerson(bean.getId());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IPersonManager#checkDuplicate(PersonBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected PersonBean _checkDuplicate(PersonBean personBean)throws DuplicateReord{
        try{
            return personManager.checkDuplicate(personBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回外键(fl_feature.person_id)引用指定记录(fl_person.id)的所有{@code fl_feature}记录
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#getFeatureBeansByPersonIdAsList(Integer)}
     */
    //8
    protected List<FeatureBean> _getFeatureBeansByPersonIdOnPerson(Integer idOfPerson){
        return personManager.getFeatureBeansByPersonIdAsList(idOfPerson);
    }
    /**
     * 删除外键(idOfPerson))引用指定记录(fl_person.id)的所有{@code fl_feature}记录
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#deleteFeatureBeansByPersonId(Integer)}
     */
    //8-2
    protected int _deleteFeatureBeansByPersonIdOnPerson(Integer idOfPerson){
        return personManager.deleteFeatureBeansByPersonId(idOfPerson);
    }
    /**
     * 返回外键(fl_log.person_id)引用指定记录(fl_person.id)的所有{@code fl_log}记录
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#getLogBeansByPersonIdAsList(Integer)}
     */
    //8
    protected List<LogBean> _getLogBeansByPersonIdOnPerson(Integer idOfPerson){
        return personManager.getLogBeansByPersonIdAsList(idOfPerson);
    }
    /**
     * 删除外键(idOfPerson))引用指定记录(fl_person.id)的所有{@code fl_log}记录
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#deleteLogBeansByPersonId(Integer)}
     */
    //8-2
    protected int _deleteLogBeansByPersonIdOnPerson(Integer idOfPerson){
        return personManager.deleteLogBeansByPersonId(idOfPerson);
    }
    /**
     * 返回外键(fl_person.image_md5)引用的 fl_image 记录
     * @param bean
     * @see {@link IPersonManager#getReferencedByImageMd5(PersonBean)}
     */
    //8-3
    protected ImageBean _getReferencedByImageMd5OnPerson(PersonBean bean){
        return personManager.getReferencedByImageMd5(bean);
    }
    /**
     * 设置外键fl_person(image_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPersonManager#setReferencedByImageMd5(PersonBean,ImageBean)}
     */
    //8-4
    protected ImageBean _setReferencedByImageMd5OnPerson(PersonBean bean,ImageBean beanToSet){
        return personManager.setReferencedByImageMd5(bean,beanToSet);
    }
    /**
     * 返回外键(fl_person.group_id)引用的 fl_person_group 记录
     * @param bean
     * @see {@link IPersonManager#getReferencedByGroupId(PersonBean)}
     */
    //8-3
    protected PersonGroupBean _getReferencedByGroupIdOnPerson(PersonBean bean){
        return personManager.getReferencedByGroupId(bean);
    }
    /**
     * 设置外键fl_person(group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPersonManager#setReferencedByGroupId(PersonBean,PersonGroupBean)}
     */
    //8-4
    protected PersonGroupBean _setReferencedByGroupIdOnPerson(PersonBean bean,PersonGroupBean beanToSet){
        return personManager.setReferencedByGroupId(bean,beanToSet);
    }
    /** 
     * 参见 {@link IPersonManager#save(PersonBean)}
     */
    //14
    protected PersonBean _savePerson(PersonBean personBean){
        _checkGroup(personBean);
        return personManager.save(personBean);
    }
    /** 同步保存 */
    //15
    protected PersonBean _savePerson(PersonBean personBean
        , ImageBean refImageByImageMd5 
        , PersonGroupBean refPersongroupByGroupId 
        , Collection<FeatureBean> impFeatureByPersonId 
        , Collection<LogBean> impLogByPersonId ){
        _checkGroup(personBean);
        return personManager.save(personBean
            , refImageByImageMd5 
            , refPersongroupByGroupId 
            , impFeatureByPersonId 
            , impLogByPersonId );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_savePerson(PersonBean)
     */
    //12-3-3
    protected Collection<PersonBean> _savePersons(Collection<PersonBean> beans){
        if(null != beans){
            for(PersonBean bean : beans)
                _savePerson(bean);
        }
        return beans;
    }
    /** 
     * {@link #_savePerson(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<PersonBean> _savePersonsAsTransaction(final Collection<PersonBean> beans){
        return _runAsTransaction(new Callable<Collection<PersonBean>>(){      
            @Override
            public Collection<PersonBean> call() throws Exception {
                return _savePersons(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_person 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IPersonManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<PersonBean> _loadPersonByWhere(String where,int startRow, int numRows){
        return personManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_person 表的所有记录
     * @see {@link IPersonManager#loadAllAsList()}
     */
    //17
    protected List<PersonBean> _loadPersonAll(){
        return personManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person 记录总数
     * @see {@link IPersonManager#Where(String)}
     */
    //17-2
    protected int _countPersonByWhere(String where){
        return personManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadPersonByWhere(String,int,int)
     */
    //18
    protected List<Integer> _loadPersonIdByWhere(String where){
        return _toPrimaryKeyListFromPersons(_loadPersonByWhere(where,1,-1));
    }
    /** 
     * 索引(fl_person.image_md5)查询<br>
     * 
     * @param imageMd5 用户默认照片(证件照,标准照)的md5校验码,外键
     * @see {@link IPersonManager#loadByIndexImageMd5(String)}
     */
    //18-5
    protected PersonBean _loadPersonByIndexImageMd5(String imageMd5){
        return personManager.loadByIndexImageMd5(imageMd5);
    }
    /** 
     * 索引(fl_person.papers_num)查询<br>
     * 
     * @param papersNum 证件号码
     * @see {@link IPersonManager#loadByIndexPapersNum(String)}
     */
    //18-5
    protected PersonBean _loadPersonByIndexPapersNum(String papersNum){
        return personManager.loadByIndexPapersNum(papersNum);
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadPersonByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<PersonBean> _loadPersonByCreateTime(Date timestamp,int startRow, int numRows){
        return _loadPersonByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadPersonByCreateTime(Date,int,int)} */
    //20
    protected List<PersonBean> _loadPersonByCreateTime(Date timestamp){
        return _loadPersonByCreateTime(timestamp,1,-1);
    }
    /**
     * 返回fl_person.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countPersonByWhere(String)
     */
    //20-5
    protected int _countPersonByCreateTime(Date timestamp){
        return _countPersonByWhere(makeWhere(timestamp,"create_time"));
    }
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_person.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #_loadPersonIdByWhere(String)} 
     */
    //21
    protected List<Integer> _loadPersonIdByCreateTime(Date timestamp){
        return _loadPersonIdByWhere(makeWhere(timestamp,"create_time"));
    }

    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadPersonByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<PersonBean> _loadPersonByUpdateTime(Date timestamp,int startRow, int numRows){
        return _loadPersonByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadPersonByUpdateTime(Date,int,int)} */
    //20
    protected List<PersonBean> _loadPersonByUpdateTime(Date timestamp){
        return _loadPersonByUpdateTime(timestamp,1,-1);
    }
    /**
     * 返回fl_person.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countPersonByWhere(String)
     */
    //20-5
    protected int _countPersonByUpdateTime(Date timestamp){
        return _countPersonByWhere(makeWhere(timestamp,"update_time"));
    }
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #_loadPersonIdByWhere(String)} 
     */
    //21
    protected List<Integer> _loadPersonIdByUpdateTime(Date timestamp){
        return _loadPersonIdByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_PERSON_GROUP /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 用户组id 
     * @see {@link IPersonGroupManager#loadByPrimaryKey(Integer)}
     */
    //1
    protected PersonGroupBean _getPersonGroup(Integer id){
        return personGroupManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IPersonGroupManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<PersonGroupBean> _getPersonGroups(Collection<Integer> idCollection){
        return personGroupManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IPersonGroupManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deletePersonGroupsByPrimaryKey(Collection<Integer> idCollection){
        if(null == idCollection)return 0;
        int count =0;
        for(Integer id:idCollection){
            count += _deletePersonGroup(id);
        }
        return count;
    }
    //3-5
    protected List<Integer> _toPrimaryKeyListFromPersonGroups(Collection<PersonGroupBean> beans){
        return personGroupManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 用户组id 
     * @see {@link IPersonGroupManager#existsPrimaryKey(Integer)}
     */
    //4
    protected boolean _existsPersonGroup(Integer id){
        return personGroupManager.existsPrimaryKey(id);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IPersonGroupManager#existsPrimaryKey(PersonGroupBean)}
     */
    //4-2
    protected boolean _existsPersonGroup(PersonGroupBean bean){
        return personGroupManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param id 用户组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPersonGroupManager#deleteByPrimaryKey(Integer)}
     */
    //5
    protected int _deletePersonGroup(Integer id){
        return personGroupManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deletePersonGroup(Integer)
     */
    //5-2
    protected int _deletePersonGroup(PersonGroupBean bean){
        return null == bean ? null : _deletePersonGroup(bean.getId());
    }
    /**
     * 删除{@code personGroupBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deletePersonGroup(Integer)
     */
    //6
    protected int _deletePersonGroups(Collection<PersonGroupBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(PersonGroupBean bean:beans){
            if(null != bean)
                count += _deletePersonGroup(bean.getId());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IPersonGroupManager#checkDuplicate(PersonGroupBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected PersonGroupBean _checkDuplicate(PersonGroupBean personGroupBean)throws DuplicateReord{
        try{
            return personGroupManager.checkDuplicate(personGroupBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回外键(fl_permit.person_group_id)引用指定记录(fl_person_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#getPermitBeansByPersonGroupIdAsList(Integer)}
     */
    //8
    protected List<PermitBean> _getPermitBeansByPersonGroupIdOnPersonGroup(Integer idOfPersonGroup){
        return personGroupManager.getPermitBeansByPersonGroupIdAsList(idOfPersonGroup);
    }
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#deletePermitBeansByPersonGroupId(Integer)}
     */
    //8-2
    protected int _deletePermitBeansByPersonGroupIdOnPersonGroup(Integer idOfPersonGroup){
        return personGroupManager.deletePermitBeansByPersonGroupId(idOfPersonGroup);
    }
    /**
     * 返回属于{@code idOfPersonGroup}指定组的所有{@code fl_person}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#getPersonBeansByGroupIdAsList(Integer)}
     */
    //8
    protected List<PersonBean> _getPersonsOfGroup(Integer idOfPersonGroup){
        return personGroupManager.getPersonBeansByGroupIdAsList(idOfPersonGroup);
    }
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_person}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#deletePersonBeansByGroupId(Integer)}
     */
    //8-2
    protected int _deletePersonBeansByGroupIdOnPersonGroup(Integer idOfPersonGroup){
        return personGroupManager.deletePersonBeansByGroupId(idOfPersonGroup);
    }
    /**
     * 返回{@code idOfPersonGroup)}指定的组下的所有子节点,如果没有子节点则返回空表
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#getPersonGroupBeansByParentAsList(Integer)}
     */
    //8
    protected List<PersonGroupBean> _getSubPersonGroup(Integer idOfPersonGroup){
        return personGroupManager.getPersonGroupBeansByParentAsList(idOfPersonGroup);
    }
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_person_group}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#deletePersonGroupBeansByParent(Integer)}
     */
    //8-2
    protected int _deletePersonGroupBeansByParentOnPersonGroup(Integer idOfPersonGroup){
        return personGroupManager.deletePersonGroupBeansByParent(idOfPersonGroup);
    }
    /**
     * 返回外键(fl_person_group.parent)引用的 fl_person_group 记录
     * @param bean
     * @see {@link IPersonGroupManager#getReferencedByParent(PersonGroupBean)}
     */
    //8-3
    protected PersonGroupBean _getReferencedByParentOnPersonGroup(PersonGroupBean bean){
        return personGroupManager.getReferencedByParent(bean);
    }
    /**
     * 设置外键fl_person_group(parent)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPersonGroupManager#setReferencedByParent(PersonGroupBean,PersonGroupBean)}
     */
    //8-4
    protected PersonGroupBean _setReferencedByParentOnPersonGroup(PersonGroupBean bean,PersonGroupBean beanToSet){
        return personGroupManager.setReferencedByParent(bean,beanToSet);
    }
    /**
     * 返回(idOfPersonGroup))指定的fl_person_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @see IPersonGroupManager#listOfParent(Integer)
     */
    //9
    protected java.util.List<PersonGroupBean> _listOfParentForPersonGroup(Integer idOfPersonGroup){
        return personGroupManager.listOfParent(idOfPersonGroup);
    }
    /**
     * 返回{@code personGroupBean}指定的fl_person_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @see IPersonGroupManager#listOfParent(PersonGroupBean)
     */
    //9-2
    protected java.util.List<PersonGroupBean> _listOfParentForPersonGroup(PersonGroupBean personGroupBean){
        return personGroupManager.listOfParent(personGroupBean);
    }
    /** 
     * 如果没有默认组则向 fl_person_group 表中增加默认组,失败则抛出异常 
     * 
     * @throws IllegalStateException 创建失败
     */
    //10
    protected void _saveDefaultPersonGroupIfAbsent(){
        if(!_existsPersonGroup(DEFAULT_GROUP_ID)){
            try{
                PersonGroupBean bean = new PersonGroupBean(DEFAULT_GROUP_ID);
                bean.setName(DEFAULT_GROUP_NAME);
                _savePersonGroup(bean);
            }catch(WrapDAOException e){}
            if(!_existsPersonGroup(DEFAULT_GROUP_ID))
                throw new IllegalStateException("can't create default group for person_group"); 
        }
    }
    /**
     * 检查{@link PersonBean}的'group_id'字段是否为默认组{@link CommonConstant#DEFAULT_GROUP_ID},
     * 如果是,且默认组记录不存在则创建默认组
     * @return {@code personBean}
     * @see #_saveDefaultPersonGroupIfAbsent()
     */
    //11
    protected PersonBean _checkGroup(PersonBean personBean){
        if(null != personBean && Objects.equal(personBean.getGroupId(), DEFAULT_GROUP_ID)){
            _saveDefaultPersonGroupIfAbsent();
        }
        return personBean;
    }
    /** 
     * 参见 {@link IPersonGroupManager#save(PersonGroupBean)}
     */
    //14
    protected PersonGroupBean _savePersonGroup(PersonGroupBean personGroupBean){
        return personGroupManager.save(personGroupBean);
    }
    /** 同步保存 */
    //15
    protected PersonGroupBean _savePersonGroup(PersonGroupBean personGroupBean
        , PersonGroupBean refPersongroupByParent 
        , Collection<PermitBean> impPermitByPersonGroupId 
        , Collection<PersonBean> impPersonByGroupId 
        , Collection<PersonGroupBean> impPersongroupByParent ){
        return personGroupManager.save(personGroupBean
            , refPersongroupByParent 
            , impPermitByPersonGroupId 
            , impPersonByGroupId 
            , impPersongroupByParent );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_savePersonGroup(PersonGroupBean)
     */
    //12-3-3
    protected Collection<PersonGroupBean> _savePersonGroups(Collection<PersonGroupBean> beans){
        if(null != beans){
            for(PersonGroupBean bean : beans)
                _savePersonGroup(bean);
        }
        return beans;
    }
    /** 
     * {@link #_savePersonGroup(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<PersonGroupBean> _savePersonGroupsAsTransaction(final Collection<PersonGroupBean> beans){
        return _runAsTransaction(new Callable<Collection<PersonGroupBean>>(){      
            @Override
            public Collection<PersonGroupBean> call() throws Exception {
                return _savePersonGroups(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_person_group 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IPersonGroupManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<PersonGroupBean> _loadPersonGroupByWhere(String where,int startRow, int numRows){
        return personGroupManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_person_group 表的所有记录
     * @see {@link IPersonGroupManager#loadAllAsList()}
     */
    //17
    protected List<PersonGroupBean> _loadPersonGroupAll(){
        return personGroupManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person_group 记录总数
     * @see {@link IPersonGroupManager#Where(String)}
     */
    //17-2
    protected int _countPersonGroupByWhere(String where){
        return personGroupManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadPersonGroupByWhere(String,int,int)
     */
    //18
    protected List<Integer> _loadPersonGroupIdByWhere(String where){
        return _toPrimaryKeyListFromPersonGroups(_loadPersonGroupByWhere(where,1,-1));
    }



    //////////// FL_FACE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 主键 
     * @see {@link IFaceManager#loadByPrimaryKey(Integer)}
     */
    //1
    protected FaceBean _getFace(Integer id){
        return faceManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IFaceManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<FaceBean> _getFaces(Collection<Integer> idCollection){
        return faceManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IFaceManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deleteFacesByPrimaryKey(Collection<Integer> idCollection){
        if(null == idCollection)return 0;
        int count =0;
        for(Integer id:idCollection){
            count += _deleteFace(id);
        }
        return count;
    }
    //3-5
    protected List<Integer> _toPrimaryKeyListFromFaces(Collection<FaceBean> beans){
        return faceManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 主键 
     * @see {@link IFaceManager#existsPrimaryKey(Integer)}
     */
    //4
    protected boolean _existsFace(Integer id){
        return faceManager.existsPrimaryKey(id);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IFaceManager#existsPrimaryKey(FaceBean)}
     */
    //4-2
    protected boolean _existsFace(FaceBean bean){
        return faceManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param id 主键  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IFaceManager#deleteByPrimaryKey(Integer)}
     */
    //5
    protected int _deleteFace(Integer id){
        return faceManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deleteFace(Integer)
     */
    //5-2
    protected int _deleteFace(FaceBean bean){
        return null == bean ? null : _deleteFace(bean.getId());
    }
    /**
     * 删除{@code faceBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deleteFace(Integer)
     */
    //6
    protected int _deleteFaces(Collection<FaceBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(FaceBean bean:beans){
            if(null != bean)
                count += _deleteFace(bean.getId());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected FaceBean _checkDuplicate(FaceBean faceBean)throws DuplicateReord{
        try{
            return faceManager.checkDuplicate(faceBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回外键(fl_log.compare_face)引用指定记录(fl_face.id)的所有{@code fl_log}记录
     * 
     * @param idOfFace 主键 
     * @see {@link IFaceManager#getLogBeansByCompareFaceAsList(Integer)}
     */
    //8
    protected List<LogBean> _getLogBeansByCompareFaceOnFace(Integer idOfFace){
        return faceManager.getLogBeansByCompareFaceAsList(idOfFace);
    }
    /**
     * 删除外键(idOfFace))引用指定记录(fl_face.id)的所有{@code fl_log}记录
     * 
     * @param idOfFace 主键 
     * @see {@link IFaceManager#deleteLogBeansByCompareFace(Integer)}
     */
    //8-2
    protected int _deleteLogBeansByCompareFaceOnFace(Integer idOfFace){
        return faceManager.deleteLogBeansByCompareFace(idOfFace);
    }
    /**
     * 返回外键(fl_face.feature_md5)引用的 fl_feature 记录
     * @param bean
     * @see {@link IFaceManager#getReferencedByFeatureMd5(FaceBean)}
     */
    //8-3
    protected FeatureBean _getReferencedByFeatureMd5OnFace(FaceBean bean){
        return faceManager.getReferencedByFeatureMd5(bean);
    }
    /**
     * 设置外键fl_face(feature_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IFaceManager#setReferencedByFeatureMd5(FaceBean,FeatureBean)}
     */
    //8-4
    protected FeatureBean _setReferencedByFeatureMd5OnFace(FaceBean bean,FeatureBean beanToSet){
        return faceManager.setReferencedByFeatureMd5(bean,beanToSet);
    }
    /**
     * 返回外键(fl_face.image_md5)引用的 fl_image 记录
     * @param bean
     * @see {@link IFaceManager#getReferencedByImageMd5(FaceBean)}
     */
    //8-3
    protected ImageBean _getReferencedByImageMd5OnFace(FaceBean bean){
        return faceManager.getReferencedByImageMd5(bean);
    }
    /**
     * 设置外键fl_face(image_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IFaceManager#setReferencedByImageMd5(FaceBean,ImageBean)}
     */
    //8-4
    protected ImageBean _setReferencedByImageMd5OnFace(FaceBean bean,ImageBean beanToSet){
        return faceManager.setReferencedByImageMd5(bean,beanToSet);
    }
    /** 
     * 添加新记录<br>
     * fl_face 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FaceBean#isNew()}返回{@code false},则抛出异常
     * @param faceBean 要添加的新记录
     * @see {@link IFaceManager#save(FaceBean)}
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code faceBean.isNew()} is {@code false}
     */
    //12
    protected FaceBean _addFace(FaceBean faceBean)throws DuplicateReord{
        return faceManager.save(_checkDuplicate(faceBean));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_face 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link FaceBean#isNew()}返回{@code false},则抛出异常
     * @param faceBean 要添加的新记录
     * @see {@link IFaceManager#save(FaceBean , FeatureBean, ImageBean , Collection )}
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code faceBean.isNew()} is {@code false}
     */
    //13
    protected FaceBean _addFace(FaceBean faceBean
        , FeatureBean refFeatureByFeatureMd5 
        , ImageBean refImageByImageMd5 
        , Collection<LogBean> impLogByCompareFace )throws DuplicateReord{
        checkArgument(null == faceBean || faceBean.isNew(),"can be add,delete,but modify record for fl_face,so the _isNew field must be true");
        _checkDuplicate(faceBean);
        return faceManager.save(faceBean
            , refFeatureByFeatureMd5 
            , refImageByImageMd5 
            , impLogByCompareFace );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_addFace(FaceBean)
     */
    //12-3-3
    protected Collection<FaceBean> _addFaces(Collection<FaceBean> beans)throws DuplicateReord{
        if(null != beans){
            for(FaceBean bean : beans)
                _addFace(bean);
        }
        return beans;
    }
    /** 
     * {@link #_addFace(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<FaceBean> _addFacesAsTransaction(final Collection<FaceBean> beans)throws DuplicateReord{
        return _runAsTransaction(new Callable<Collection<FaceBean>>(){      
            @Override
            public Collection<FaceBean> call() throws Exception {
                return _addFaces(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_face 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IFaceManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<FaceBean> _loadFaceByWhere(String where,int startRow, int numRows){
        return faceManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_face 表的所有记录
     * @see {@link IFaceManager#loadAllAsList()}
     */
    //17
    protected List<FaceBean> _loadFaceAll(){
        return faceManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_face 记录总数
     * @see {@link IFaceManager#Where(String)}
     */
    //17-2
    protected int _countFaceByWhere(String where){
        return faceManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadFaceByWhere(String,int,int)
     */
    //18
    protected List<Integer> _loadFaceIdByWhere(String where){
        return _toPrimaryKeyListFromFaces(_loadFaceByWhere(where,1,-1));
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_face.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadFaceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<FaceBean> _loadFaceByCreateTime(Date timestamp,int startRow, int numRows){
        return _loadFaceByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadFaceByCreateTime(Date,int,int)} */
    //20
    protected List<FaceBean> _loadFaceByCreateTime(Date timestamp){
        return _loadFaceByCreateTime(timestamp,1,-1);
    }
    /**
     * 返回fl_face.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countFaceByWhere(String)
     */
    //20-5
    protected int _countFaceByCreateTime(Date timestamp){
        return _countFaceByWhere(makeWhere(timestamp,"create_time"));
    }
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_face.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #_loadFaceIdByWhere(String)} 
     */
    //21
    protected List<Integer> _loadFaceIdByCreateTime(Date timestamp){
        return _loadFaceIdByWhere(makeWhere(timestamp,"create_time"));
    }



    //////////// FL_FEATURE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,特征码md5校验码 
     * @see {@link IFeatureManager#loadByPrimaryKey(String)}
     */
    //1
    protected FeatureBean _getFeature(String md5){
        return featureManager.loadByPrimaryKey(md5);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IFeatureManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<FeatureBean> _getFeatures(Collection<String> md5Collection){
        return featureManager.loadByPrimaryKey(md5Collection);
    }
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IFeatureManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deleteFeaturesByPrimaryKey(Collection<String> md5Collection){
        if(null == md5Collection)return 0;
        int count =0;
        for(String md5:md5Collection){
            count += _deleteFeature(md5);
        }
        return count;
    }
    //3-5
    protected List<String> _toPrimaryKeyListFromFeatures(Collection<FeatureBean> beans){
        return featureManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,特征码md5校验码 
     * @see {@link IFeatureManager#existsPrimaryKey(String)}
     */
    //4
    protected boolean _existsFeature(String md5){
        return featureManager.existsPrimaryKey(md5);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IFeatureManager#existsPrimaryKey(FeatureBean)}
     */
    //4-2
    protected boolean _existsFeature(FeatureBean bean){
        return featureManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,特征码md5校验码  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IFeatureManager#deleteByPrimaryKey(String)}
     */
    //5
    protected int _deleteFeature(String md5){
        return featureManager.deleteByPrimaryKey(md5);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deleteFeature(String)
     */
    //5-2
    protected int _deleteFeature(FeatureBean bean){
        return null == bean ? null : _deleteFeature(bean.getMd5());
    }
    /**
     * 删除{@code featureBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deleteFeature(String)
     */
    //6
    protected int _deleteFeatures(Collection<FeatureBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(FeatureBean bean:beans){
            if(null != bean)
                count += _deleteFeature(bean.getMd5());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected FeatureBean _checkDuplicate(FeatureBean featureBean)throws DuplicateReord{
        try{
            return featureManager.checkDuplicate(featureBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回外键(fl_face.feature_md5)引用指定记录(fl_feature.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#getFaceBeansByFeatureMd5AsList(String)}
     */
    //8
    protected List<FaceBean> _getFaceBeansByFeatureMd5OnFeature(String md5OfFeature){
        return featureManager.getFaceBeansByFeatureMd5AsList(md5OfFeature);
    }
    /**
     * 删除外键(md5OfFeature))引用指定记录(fl_feature.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#deleteFaceBeansByFeatureMd5(String)}
     */
    //8-2
    protected int _deleteFaceBeansByFeatureMd5OnFeature(String md5OfFeature){
        return featureManager.deleteFaceBeansByFeatureMd5(md5OfFeature);
    }
    /**
     * 返回外键(fl_log.verify_feature)引用指定记录(fl_feature.md5)的所有{@code fl_log}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#getLogBeansByVerifyFeatureAsList(String)}
     */
    //8
    protected List<LogBean> _getLogBeansByVerifyFeatureOnFeature(String md5OfFeature){
        return featureManager.getLogBeansByVerifyFeatureAsList(md5OfFeature);
    }
    /**
     * 删除外键(md5OfFeature))引用指定记录(fl_feature.md5)的所有{@code fl_log}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#deleteLogBeansByVerifyFeature(String)}
     */
    //8-2
    protected int _deleteLogBeansByVerifyFeatureOnFeature(String md5OfFeature){
        return featureManager.deleteLogBeansByVerifyFeature(md5OfFeature);
    }
    /**
     * 返回外键(fl_feature.person_id)引用的 fl_person 记录
     * @param bean
     * @see {@link IFeatureManager#getReferencedByPersonId(FeatureBean)}
     */
    //8-3
    protected PersonBean _getReferencedByPersonIdOnFeature(FeatureBean bean){
        return featureManager.getReferencedByPersonId(bean);
    }
    /**
     * 设置外键fl_feature(person_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IFeatureManager#setReferencedByPersonId(FeatureBean,PersonBean)}
     */
    //8-4
    protected PersonBean _setReferencedByPersonIdOnFeature(FeatureBean bean,PersonBean beanToSet){
        return featureManager.setReferencedByPersonId(bean,beanToSet);
    }
    /** 
     * 添加新记录<br>
     * fl_feature 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FeatureBean#isNew()}返回{@code false},则抛出异常
     * @param featureBean 要添加的新记录
     * @see {@link IFeatureManager#save(FeatureBean)}
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code featureBean.isNew()} is {@code false}
     */
    //12
    protected FeatureBean _addFeature(FeatureBean featureBean)throws DuplicateReord{
        return featureManager.save(_checkDuplicate(featureBean));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_feature 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link FeatureBean#isNew()}返回{@code false},则抛出异常
     * @param featureBean 要添加的新记录
     * @see {@link IFeatureManager#save(FeatureBean , PersonBean , Collection, Collection )}
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code featureBean.isNew()} is {@code false}
     */
    //13
    protected FeatureBean _addFeature(FeatureBean featureBean
        , PersonBean refPersonByPersonId 
        , Collection<FaceBean> impFaceByFeatureMd5 
        , Collection<LogBean> impLogByVerifyFeature )throws DuplicateReord{
        checkArgument(null == featureBean || featureBean.isNew(),"can be add,delete,but modify record for fl_feature,so the _isNew field must be true");
        _checkDuplicate(featureBean);
        return featureManager.save(featureBean
            , refPersonByPersonId 
            , impFaceByFeatureMd5 
            , impLogByVerifyFeature );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_addFeature(FeatureBean)
     */
    //12-3-3
    protected Collection<FeatureBean> _addFeatures(Collection<FeatureBean> beans)throws DuplicateReord{
        if(null != beans){
            for(FeatureBean bean : beans)
                _addFeature(bean);
        }
        return beans;
    }
    /** 
     * {@link #_addFeature(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<FeatureBean> _addFeaturesAsTransaction(final Collection<FeatureBean> beans)throws DuplicateReord{
        return _runAsTransaction(new Callable<Collection<FeatureBean>>(){      
            @Override
            public Collection<FeatureBean> call() throws Exception {
                return _addFeatures(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_feature 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IFeatureManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<FeatureBean> _loadFeatureByWhere(String where,int startRow, int numRows){
        return featureManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_feature 表的所有记录
     * @see {@link IFeatureManager#loadAllAsList()}
     */
    //17
    protected List<FeatureBean> _loadFeatureAll(){
        return featureManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_feature 记录总数
     * @see {@link IFeatureManager#Where(String)}
     */
    //17-2
    protected int _countFeatureByWhere(String where){
        return featureManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadFeatureByWhere(String,int,int)
     */
    //18
    protected List<String> _loadFeatureMd5ByWhere(String where){
        return _toPrimaryKeyListFromFeatures(_loadFeatureByWhere(where,1,-1));
    }

    /**
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadFeatureByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<FeatureBean> _loadFeatureByUpdateTime(Date timestamp,int startRow, int numRows){
        return _loadFeatureByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadFeatureByUpdateTime(Date,int,int)} */
    //20
    protected List<FeatureBean> _loadFeatureByUpdateTime(Date timestamp){
        return _loadFeatureByUpdateTime(timestamp,1,-1);
    }
    /**
     * 返回fl_feature.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countFeatureByWhere(String)
     */
    //20-5
    protected int _countFeatureByUpdateTime(Date timestamp){
        return _countFeatureByWhere(makeWhere(timestamp,"update_time"));
    }
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #_loadFeatureMd5ByWhere(String)} 
     */
    //21
    protected List<String> _loadFeatureMd5ByUpdateTime(Date timestamp){
        return _loadFeatureMd5ByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_IMAGE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#loadByPrimaryKey(String)}
     */
    //1
    protected ImageBean _getImage(String md5){
        return imageManager.loadByPrimaryKey(md5);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IImageManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<ImageBean> _getImages(Collection<String> md5Collection){
        return imageManager.loadByPrimaryKey(md5Collection);
    }
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IImageManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deleteImagesByPrimaryKey(Collection<String> md5Collection){
        if(null == md5Collection)return 0;
        int count =0;
        for(String md5:md5Collection){
            count += _deleteImage(md5);
        }
        return count;
    }
    //3-5
    protected List<String> _toPrimaryKeyListFromImages(Collection<ImageBean> beans){
        return imageManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#existsPrimaryKey(String)}
     */
    //4
    protected boolean _existsImage(String md5){
        return imageManager.existsPrimaryKey(md5);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IImageManager#existsPrimaryKey(ImageBean)}
     */
    //4-2
    protected boolean _existsImage(ImageBean bean){
        return imageManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IImageManager#deleteByPrimaryKey(String)}
     */
    //5
    protected int _deleteImage(String md5){
        return imageManager.deleteByPrimaryKey(md5);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deleteImage(String)
     */
    //5-2
    protected int _deleteImage(ImageBean bean){
        return null == bean ? null : _deleteImage(bean.getMd5());
    }
    /**
     * 删除{@code imageBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deleteImage(String)
     */
    //6
    protected int _deleteImages(Collection<ImageBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(ImageBean bean:beans){
            if(null != bean)
                count += _deleteImage(bean.getMd5());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected ImageBean _checkDuplicate(ImageBean imageBean)throws DuplicateReord{
        try{
            return imageManager.checkDuplicate(imageBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回外键(fl_face.image_md5)引用指定记录(fl_image.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#getFaceBeansByImageMd5AsList(String)}
     */
    //8
    protected List<FaceBean> _getFaceBeansByImageMd5OnImage(String md5OfImage){
        return imageManager.getFaceBeansByImageMd5AsList(md5OfImage);
    }
    /**
     * 删除外键(md5OfImage))引用指定记录(fl_image.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#deleteFaceBeansByImageMd5(String)}
     */
    //8-2
    protected int _deleteFaceBeansByImageMd5OnImage(String md5OfImage){
        return imageManager.deleteFaceBeansByImageMd5(md5OfImage);
    }
    /**
     * 返回外键(fl_person.image_md5)引用指定记录(fl_image.md5)的所有{@code fl_person}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#getPersonBeansByImageMd5AsList(String)}
     */
    //8
    protected List<PersonBean> _getPersonBeansByImageMd5OnImage(String md5OfImage){
        return imageManager.getPersonBeansByImageMd5AsList(md5OfImage);
    }
    /**
     * 删除外键(md5OfImage))引用指定记录(fl_image.md5)的所有{@code fl_person}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#deletePersonBeansByImageMd5(String)}
     */
    //8-2
    protected int _deletePersonBeansByImageMd5OnImage(String md5OfImage){
        return imageManager.deletePersonBeansByImageMd5(md5OfImage);
    }
    /**
     * 返回外键(fl_image.device_id)引用的 fl_device 记录
     * @param bean
     * @see {@link IImageManager#getReferencedByDeviceId(ImageBean)}
     */
    //8-3
    protected DeviceBean _getReferencedByDeviceIdOnImage(ImageBean bean){
        return imageManager.getReferencedByDeviceId(bean);
    }
    /**
     * 设置外键fl_image(device_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IImageManager#setReferencedByDeviceId(ImageBean,DeviceBean)}
     */
    //8-4
    protected DeviceBean _setReferencedByDeviceIdOnImage(ImageBean bean,DeviceBean beanToSet){
        return imageManager.setReferencedByDeviceId(bean,beanToSet);
    }
    /** 
     * 添加新记录<br>
     * fl_image 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link ImageBean#isNew()}返回{@code false},则抛出异常
     * @param imageBean 要添加的新记录
     * @see {@link IImageManager#save(ImageBean)}
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code imageBean.isNew()} is {@code false}
     */
    //12
    protected ImageBean _addImage(ImageBean imageBean)throws DuplicateReord{
        return imageManager.save(_checkDuplicate(imageBean));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_image 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link ImageBean#isNew()}返回{@code false},则抛出异常
     * @param imageBean 要添加的新记录
     * @see {@link IImageManager#save(ImageBean , DeviceBean , Collection, Collection )}
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code imageBean.isNew()} is {@code false}
     */
    //13
    protected ImageBean _addImage(ImageBean imageBean
        , DeviceBean refDeviceByDeviceId 
        , Collection<FaceBean> impFaceByImageMd5 
        , Collection<PersonBean> impPersonByImageMd5 )throws DuplicateReord{
        checkArgument(null == imageBean || imageBean.isNew(),"can be add,delete,but modify record for fl_image,so the _isNew field must be true");
        _checkDuplicate(imageBean);
        return imageManager.save(imageBean
            , refDeviceByDeviceId 
            , impFaceByImageMd5 
            , impPersonByImageMd5 );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_addImage(ImageBean)
     */
    //12-3-3
    protected Collection<ImageBean> _addImages(Collection<ImageBean> beans)throws DuplicateReord{
        if(null != beans){
            for(ImageBean bean : beans)
                _addImage(bean);
        }
        return beans;
    }
    /** 
     * {@link #_addImage(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<ImageBean> _addImagesAsTransaction(final Collection<ImageBean> beans)throws DuplicateReord{
        return _runAsTransaction(new Callable<Collection<ImageBean>>(){      
            @Override
            public Collection<ImageBean> call() throws Exception {
                return _addImages(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_image 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IImageManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<ImageBean> _loadImageByWhere(String where,int startRow, int numRows){
        return imageManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_image 表的所有记录
     * @see {@link IImageManager#loadAllAsList()}
     */
    //17
    protected List<ImageBean> _loadImageAll(){
        return imageManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_image 记录总数
     * @see {@link IImageManager#Where(String)}
     */
    //17-2
    protected int _countImageByWhere(String where){
        return imageManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadImageByWhere(String,int,int)
     */
    //18
    protected List<String> _loadImageMd5ByWhere(String where){
        return _toPrimaryKeyListFromImages(_loadImageByWhere(where,1,-1));
    }



    //////////// FL_LOG /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 日志id 
     * @see {@link ILogManager#loadByPrimaryKey(Integer)}
     */
    //1
    protected LogBean _getLog(Integer id){
        return logManager.loadByPrimaryKey(id);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link ILogManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<LogBean> _getLogs(Collection<Integer> idCollection){
        return logManager.loadByPrimaryKey(idCollection);
    }
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link ILogManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deleteLogsByPrimaryKey(Collection<Integer> idCollection){
        if(null == idCollection)return 0;
        int count =0;
        for(Integer id:idCollection){
            count += _deleteLog(id);
        }
        return count;
    }
    //3-5
    protected List<Integer> _toPrimaryKeyListFromLogs(Collection<LogBean> beans){
        return logManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 日志id 
     * @see {@link ILogManager#existsPrimaryKey(Integer)}
     */
    //4
    protected boolean _existsLog(Integer id){
        return logManager.existsPrimaryKey(id);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link ILogManager#existsPrimaryKey(LogBean)}
     */
    //4-2
    protected boolean _existsLog(LogBean bean){
        return logManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param id 日志id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link ILogManager#deleteByPrimaryKey(Integer)}
     */
    //5
    protected int _deleteLog(Integer id){
        return logManager.deleteByPrimaryKey(id);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deleteLog(Integer)
     */
    //5-2
    protected int _deleteLog(LogBean bean){
        return null == bean ? null : _deleteLog(bean.getId());
    }
    /**
     * 删除{@code logBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deleteLog(Integer)
     */
    //6
    protected int _deleteLogs(Collection<LogBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(LogBean bean:beans){
            if(null != bean)
                count += _deleteLog(bean.getId());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected LogBean _checkDuplicate(LogBean logBean)throws DuplicateReord{
        try{
            return logManager.checkDuplicate(logBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回外键(fl_log.device_id)引用的 fl_device 记录
     * @param bean
     * @see {@link ILogManager#getReferencedByDeviceId(LogBean)}
     */
    //8-3
    protected DeviceBean _getReferencedByDeviceIdOnLog(LogBean bean){
        return logManager.getReferencedByDeviceId(bean);
    }
    /**
     * 设置外键fl_log(device_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link ILogManager#setReferencedByDeviceId(LogBean,DeviceBean)}
     */
    //8-4
    protected DeviceBean _setReferencedByDeviceIdOnLog(LogBean bean,DeviceBean beanToSet){
        return logManager.setReferencedByDeviceId(bean,beanToSet);
    }
    /**
     * 返回外键(fl_log.compare_face)引用的 fl_face 记录
     * @param bean
     * @see {@link ILogManager#getReferencedByCompareFace(LogBean)}
     */
    //8-3
    protected FaceBean _getReferencedByCompareFaceOnLog(LogBean bean){
        return logManager.getReferencedByCompareFace(bean);
    }
    /**
     * 设置外键fl_log(compare_face)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link ILogManager#setReferencedByCompareFace(LogBean,FaceBean)}
     */
    //8-4
    protected FaceBean _setReferencedByCompareFaceOnLog(LogBean bean,FaceBean beanToSet){
        return logManager.setReferencedByCompareFace(bean,beanToSet);
    }
    /**
     * 返回外键(fl_log.verify_feature)引用的 fl_feature 记录
     * @param bean
     * @see {@link ILogManager#getReferencedByVerifyFeature(LogBean)}
     */
    //8-3
    protected FeatureBean _getReferencedByVerifyFeatureOnLog(LogBean bean){
        return logManager.getReferencedByVerifyFeature(bean);
    }
    /**
     * 设置外键fl_log(verify_feature)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link ILogManager#setReferencedByVerifyFeature(LogBean,FeatureBean)}
     */
    //8-4
    protected FeatureBean _setReferencedByVerifyFeatureOnLog(LogBean bean,FeatureBean beanToSet){
        return logManager.setReferencedByVerifyFeature(bean,beanToSet);
    }
    /**
     * 返回外键(fl_log.person_id)引用的 fl_person 记录
     * @param bean
     * @see {@link ILogManager#getReferencedByPersonId(LogBean)}
     */
    //8-3
    protected PersonBean _getReferencedByPersonIdOnLog(LogBean bean){
        return logManager.getReferencedByPersonId(bean);
    }
    /**
     * 设置外键fl_log(person_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link ILogManager#setReferencedByPersonId(LogBean,PersonBean)}
     */
    //8-4
    protected PersonBean _setReferencedByPersonIdOnLog(LogBean bean,PersonBean beanToSet){
        return logManager.setReferencedByPersonId(bean,beanToSet);
    }
    /** 
     * 添加新记录<br>
     * fl_log 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link LogBean#isNew()}返回{@code false},则抛出异常
     * @param logBean 要添加的新记录
     * @see {@link ILogManager#save(LogBean)}
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code logBean.isNew()} is {@code false}
     */
    //12
    protected LogBean _addLog(LogBean logBean)throws DuplicateReord{
        return logManager.save(_checkDuplicate(logBean));
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_log 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link LogBean#isNew()}返回{@code false},则抛出异常
     * @param logBean 要添加的新记录
     * @see {@link ILogManager#save(LogBean , DeviceBean, FaceBean, FeatureBean, PersonBean  )}
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code logBean.isNew()} is {@code false}
     */
    //13
    protected LogBean _addLog(LogBean logBean
        , DeviceBean refDeviceByDeviceId 
        , FaceBean refFaceByCompareFace 
        , FeatureBean refFeatureByVerifyFeature 
        , PersonBean refPersonByPersonId 
        )throws DuplicateReord{
        checkArgument(null == logBean || logBean.isNew(),"can be add,delete,but modify record for fl_log,so the _isNew field must be true");
        _checkDuplicate(logBean);
        return logManager.save(logBean
            , refDeviceByDeviceId 
            , refFaceByCompareFace 
            , refFeatureByVerifyFeature 
            , refPersonByPersonId 
            );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_addLog(LogBean)
     */
    //12-3-3
    protected Collection<LogBean> _addLogs(Collection<LogBean> beans)throws DuplicateReord{
        if(null != beans){
            for(LogBean bean : beans)
                _addLog(bean);
        }
        return beans;
    }
    /** 
     * {@link #_addLog(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<LogBean> _addLogsAsTransaction(final Collection<LogBean> beans)throws DuplicateReord{
        return _runAsTransaction(new Callable<Collection<LogBean>>(){      
            @Override
            public Collection<LogBean> call() throws Exception {
                return _addLogs(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_log 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link ILogManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<LogBean> _loadLogByWhere(String where,int startRow, int numRows){
        return logManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_log 表的所有记录
     * @see {@link ILogManager#loadAllAsList()}
     */
    //17
    protected List<LogBean> _loadLogAll(){
        return logManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_log 记录总数
     * @see {@link ILogManager#Where(String)}
     */
    //17-2
    protected int _countLogByWhere(String where){
        return logManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadLogByWhere(String,int,int)
     */
    //18
    protected List<Integer> _loadLogIdByWhere(String where){
        return _toPrimaryKeyListFromLogs(_loadLogByWhere(where,1,-1));
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadLogByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<LogBean> _loadLogByCreateTime(Date timestamp,int startRow, int numRows){
        return _loadLogByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadLogByCreateTime(Date,int,int)} */
    //20
    protected List<LogBean> _loadLogByCreateTime(Date timestamp){
        return _loadLogByCreateTime(timestamp,1,-1);
    }
    /**
     * 返回fl_log.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countLogByWhere(String)
     */
    //20-5
    protected int _countLogByCreateTime(Date timestamp){
        return _countLogByWhere(makeWhere(timestamp,"create_time"));
    }
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_log.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #_loadLogIdByWhere(String)} 
     */
    //21
    protected List<Integer> _loadLogIdByCreateTime(Date timestamp){
        return _loadLogIdByWhere(makeWhere(timestamp,"create_time"));
    }


    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadLogByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<LogBean> _loadLogByVerifyTime(Date timestamp,int startRow, int numRows){
        return _loadLogByWhere(makeWhere(timestamp,"verify_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadLogByVerifyTime(Date,int,int)} */
    //20
    protected List<LogBean> _loadLogByVerifyTime(Date timestamp){
        return _loadLogByVerifyTime(timestamp,1,-1);
    }
    /**
     * 返回fl_log.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countLogByWhere(String)
     */
    //20-5
    protected int _countLogByVerifyTime(Date timestamp){
        return _countLogByWhere(makeWhere(timestamp,"verify_time"));
    }
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_log.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #_loadLogIdByWhere(String)} 
     */
    //21
    protected List<Integer> _loadLogIdByVerifyTime(Date timestamp){
        return _loadLogIdByWhere(makeWhere(timestamp,"verify_time"));
    }

    //////////// FL_PERMIT /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id 
     * @see {@link IPermitManager#loadByPrimaryKey(Integer,Integer)}
     */
    //1
    protected PermitBean _getPermit(Integer deviceGroupId,Integer personGroupId){
        return permitManager.loadByPrimaryKey(deviceGroupId,personGroupId);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id 
     * @see {@link IPermitManager#existsPrimaryKey(Integer,Integer)}
     */
    //4
    protected boolean _existsPermit(Integer deviceGroupId,Integer personGroupId){
        return permitManager.existsPrimaryKey(deviceGroupId,personGroupId);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IPermitManager#existsPrimaryKey(PermitBean)}
     */
    //4-2
    protected boolean _existsPermit(PermitBean bean){
        return permitManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPermitManager#deleteByPrimaryKey(Integer,Integer)}
     */
    //5
    protected int _deletePermit(Integer deviceGroupId,Integer personGroupId){
        return permitManager.deleteByPrimaryKey(deviceGroupId,personGroupId);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deletePermit(Integer,Integer)
     */
    //5-2
    protected int _deletePermit(PermitBean bean){
        return null == bean ? null : _deletePermit(bean.getDeviceGroupId(),bean.getPersonGroupId());
    }
    /**
     * 删除{@code permitBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deletePermit(Integer,Integer)
     */
    //6
    protected int _deletePermits(Collection<PermitBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(PermitBean bean:beans){
            if(null != bean)
                count += _deletePermit(bean.getDeviceGroupId(),bean.getPersonGroupId());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected PermitBean _checkDuplicate(PermitBean permitBean)throws DuplicateReord{
        try{
            return permitManager.checkDuplicate(permitBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /**
     * 返回外键(fl_permit.device_group_id)引用的 fl_device_group 记录
     * @param bean
     * @see {@link IPermitManager#getReferencedByDeviceGroupId(PermitBean)}
     */
    //8-3
    protected DeviceGroupBean _getReferencedByDeviceGroupIdOnPermit(PermitBean bean){
        return permitManager.getReferencedByDeviceGroupId(bean);
    }
    /**
     * 设置外键fl_permit(device_group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPermitManager#setReferencedByDeviceGroupId(PermitBean,DeviceGroupBean)}
     */
    //8-4
    protected DeviceGroupBean _setReferencedByDeviceGroupIdOnPermit(PermitBean bean,DeviceGroupBean beanToSet){
        return permitManager.setReferencedByDeviceGroupId(bean,beanToSet);
    }
    /**
     * 返回外键(fl_permit.person_group_id)引用的 fl_person_group 记录
     * @param bean
     * @see {@link IPermitManager#getReferencedByPersonGroupId(PermitBean)}
     */
    //8-3
    protected PersonGroupBean _getReferencedByPersonGroupIdOnPermit(PermitBean bean){
        return permitManager.getReferencedByPersonGroupId(bean);
    }
    /**
     * 设置外键fl_permit(person_group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPermitManager#setReferencedByPersonGroupId(PermitBean,PersonGroupBean)}
     */
    //8-4
    protected PersonGroupBean _setReferencedByPersonGroupIdOnPermit(PermitBean bean,PersonGroupBean beanToSet){
        return permitManager.setReferencedByPersonGroupId(bean,beanToSet);
    }
    /** 
     * 添加新记录<br>
     * fl_permit 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link PermitBean#isNew()}返回{@code false},则抛出异常
     * @param permitBean 要添加的新记录
     * @see {@link IPermitManager#save(PermitBean)}
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code permitBean.isNew()} is {@code false}
     */
    //12
    protected PermitBean _addPermit(PermitBean permitBean)throws DuplicateReord{
        return permitManager.save(_checkDuplicate(permitBean));
    }
    /**
     * 创建fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>
     * 如果记录已经存在则返回已有记录,如果输入的参数为{@code null}或记录不存在则返回{@code null}
     * @param deviceGroupId 外键,设备组id
     * @param personGroupId 外键,人员组id
     * @see #_addPermit(DeviceGroupBean,PersonGroupBean)
     */
    //12-5
    protected PermitBean _addPermit(Integer deviceGroupId,Integer personGroupId){
        return _addPermit(
                    _getDeviceGroup(deviceGroupId),
                    _getPersonGroup(personGroupId));
    }
    /**
     * 创建fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>
     * 如果记录已经存在则返回已有记录,如果输入的参数为{@code null}或记录不存在则返回{@code null}
     */
    //12-6
    protected PermitBean _addPermit(DeviceGroupBean deviceGroupBean,PersonGroupBean personGroupBean){
        if(_existsDeviceGroup(deviceGroupBean) && _existsPersonGroup(personGroupBean)){
            PermitBean permitBean = new PermitBean(deviceGroupBean.getId(),personGroupBean.getId());
            try{
                return _addPermit(permitBean,deviceGroupBean,personGroupBean);
            }catch(DuplicateReord e){
                return _getPermit(deviceGroupBean.getId(),personGroupBean.getId());
            }
        }
        return null; 
    }
    /**
     * 删除fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>
     * @return 删除成功返回0,如果记录不存在或输入的参数为{@code null}则返回0
     */
    //12-7
    protected int _deletePermit(DeviceGroupBean deviceGroupBean,PersonGroupBean personGroupBean){
        return (null == deviceGroupBean || null == personGroupBean)
            ? 0
            : _deletePermit(deviceGroupBean.getId(),personGroupBean.getId());
    }
    /** 
     * 添加新记录(同步保存)<br>
     * fl_permit 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link PermitBean#isNew()}返回{@code false},则抛出异常
     * @param permitBean 要添加的新记录
     * @see {@link IPermitManager#save(PermitBean , DeviceGroupBean, PersonGroupBean  )}
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code permitBean.isNew()} is {@code false}
     */
    //13
    protected PermitBean _addPermit(PermitBean permitBean
        , DeviceGroupBean refDevicegroupByDeviceGroupId 
        , PersonGroupBean refPersongroupByPersonGroupId 
        )throws DuplicateReord{
        checkArgument(null == permitBean || permitBean.isNew(),"can be add,delete,but modify record for fl_permit,so the _isNew field must be true");
        _checkDuplicate(permitBean);
        return permitManager.save(permitBean
            , refDevicegroupByDeviceGroupId 
            , refPersongroupByPersonGroupId 
            );
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_addPermit(PermitBean)
     */
    //12-3-3
    protected Collection<PermitBean> _addPermits(Collection<PermitBean> beans)throws DuplicateReord{
        if(null != beans){
            for(PermitBean bean : beans)
                _addPermit(bean);
        }
        return beans;
    }
    /** 
     * {@link #_addPermit(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<PermitBean> _addPermitsAsTransaction(final Collection<PermitBean> beans)throws DuplicateReord{
        return _runAsTransaction(new Callable<Collection<PermitBean>>(){      
            @Override
            public Collection<PermitBean> call() throws Exception {
                return _addPermits(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_permit 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IPermitManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<PermitBean> _loadPermitByWhere(String where,int startRow, int numRows){
        return permitManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_permit 表的所有记录
     * @see {@link IPermitManager#loadAllAsList()}
     */
    //17
    protected List<PermitBean> _loadPermitAll(){
        return permitManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_permit 记录总数
     * @see {@link IPermitManager#Where(String)}
     */
    //17-2
    protected int _countPermitByWhere(String where){
        return permitManager.countWhere(where);
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_permit.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadPermitByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<PermitBean> _loadPermitByCreateTime(Date timestamp,int startRow, int numRows){
        return _loadPermitByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadPermitByCreateTime(Date,int,int)} */
    //20
    protected List<PermitBean> _loadPermitByCreateTime(Date timestamp){
        return _loadPermitByCreateTime(timestamp,1,-1);
    }
    /**
     * 返回fl_permit.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countPermitByWhere(String)
     */
    //20-5
    protected int _countPermitByCreateTime(Date timestamp){
        return _countPermitByWhere(makeWhere(timestamp,"create_time"));
    }



    //////////// FL_STORE /////////
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,md5检验码 
     * @see {@link IStoreManager#loadByPrimaryKey(String)}
     */
    //1
    protected StoreBean _getStore(String md5){
        return storeManager.loadByPrimaryKey(md5);
    }
    /** 
     * 根据主键从数据库读取记录
     * @see {@link IStoreManager#loadByPrimaryKey(Collection)}
     */
    //2    
    protected List<StoreBean> _getStores(Collection<String> md5Collection){
        return storeManager.loadByPrimaryKey(md5Collection);
    }
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IStoreManager#deleteByPrimaryKey(Collection)}
     */
    //3  
    protected int _deleteStoresByPrimaryKey(Collection<String> md5Collection){
        if(null == md5Collection)return 0;
        int count =0;
        for(String md5:md5Collection){
            count += _deleteStore(md5);
        }
        return count;
    }
    //3-5
    protected List<String> _toPrimaryKeyListFromStores(Collection<StoreBean> beans){
        return storeManager.toPrimaryKeyList(beans);
    }
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,md5检验码 
     * @see {@link IStoreManager#existsPrimaryKey(String)}
     */
    //4
    protected boolean _existsStore(String md5){
        return storeManager.existsPrimaryKey(md5);
    }
    /** 
     *　判断指定的记录是否存在
     * @see {@link IStoreManager#existsPrimaryKey(StoreBean)}
     */
    //4-2
    protected boolean _existsStore(StoreBean bean){
        return storeManager.existsPrimaryKey(bean);
    }
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,md5检验码  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IStoreManager#deleteByPrimaryKey(String)}
     */
    //5
    protected int _deleteStore(String md5){
        return storeManager.deleteByPrimaryKey(md5);
    }
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see #_deleteStore(String)
     */
    //5-2
    protected int _deleteStore(StoreBean bean){
        return null == bean ? null : _deleteStore(bean.getMd5());
    }
    /**
     * 删除{@code storeBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #_deleteStore(String)
     */
    //6
    protected int _deleteStores(Collection<StoreBean> beans){
        if(null == beans)return 0;
        int count =0;
        for(StoreBean bean:beans){
            if(null != bean)
                count += _deleteStore(bean.getMd5());
        }
        return count;
    }
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IStoreManager#checkDuplicate(StoreBean)}
     * @throws DuplicateReord if exists duplicated row
     */
    //7
    protected StoreBean _checkDuplicate(StoreBean storeBean)throws DuplicateReord{
        try{
            return storeManager.checkDuplicate(storeBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReord();
        }
    }
    /** 
     * 添加新记录<br>
     * fl_store 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link StoreBean#isNew()}返回{@code false},则抛出异常
     * @param storeBean 要添加的新记录
     * @see {@link IStoreManager#save(StoreBean)}
     * @see {@link IStoreManager#checkDuplicate(StoreBean)}
     * @throws DuplicateReord if exists duplicated row
     * @throws IllegalArgumentException if {@code storeBean.isNew()} is {@code false}
     */
    //12
    protected StoreBean _addStore(StoreBean storeBean)throws DuplicateReord{
        return storeManager.save(_checkDuplicate(storeBean));
    }
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #_addStore(StoreBean)
     */
    //12-3-3
    protected Collection<StoreBean> _addStores(Collection<StoreBean> beans)throws DuplicateReord{
        if(null != beans){
            for(StoreBean bean : beans)
                _addStore(bean);
        }
        return beans;
    }
    /** 
     * {@link #_addStore(Collection)}的事务化版本
     */
    //12-3-5
    protected Collection<StoreBean> _addStoresAsTransaction(final Collection<StoreBean> beans)throws DuplicateReord{
        return _runAsTransaction(new Callable<Collection<StoreBean>>(){      
            @Override
            public Collection<StoreBean> call() throws Exception {
                return _addStores(beans);
            }});
    }
    /**
     * 查询{@code where} SQL条件语句指定的 fl_store 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IStoreManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<StoreBean> _loadStoreByWhere(String where,int startRow, int numRows){
        return storeManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_store 表的所有记录
     * @see {@link IStoreManager#loadAllAsList()}
     */
    //17
    protected List<StoreBean> _loadStoreAll(){
        return storeManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_store 记录总数
     * @see {@link IStoreManager#Where(String)}
     */
    //17-2
    protected int _countStoreByWhere(String where){
        return storeManager.countWhere(where);
    }
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #_loadStoreByWhere(String,int,int)
     */
    //18
    protected List<String> _loadStoreMd5ByWhere(String where){
        return _toPrimaryKeyListFromStores(_loadStoreByWhere(where,1,-1));
    }



    //////////// FL_LOG_LIGHT /////////
    /**
     * 查询{@code where} SQL条件语句指定的 fl_log_light 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link ILogLightManager#loadByWhereAsList(String,int[],int,int)}
     */
    //16
    protected List<LogLightBean> _loadLogLightByWhere(String where,int startRow, int numRows){
        return logLightManager.loadByWhereAsList(where,null,startRow,numRows);
    }
    /**
     * 返回 fl_log_light 表的所有记录
     * @see {@link ILogLightManager#loadAllAsList()}
     */
    //17
    protected List<LogLightBean> _loadLogLightAll(){
        return logLightManager.loadAllAsList();
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_log_light 记录总数
     * @see {@link ILogLightManager#Where(String)}
     */
    //17-2
    protected int _countLogLightByWhere(String where){
        return logLightManager.countWhere(where);
    }


    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #_loadLogLightByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    //19
    protected List<LogLightBean> _loadLogLightByVerifyTime(Date timestamp,int startRow, int numRows){
        return _loadLogLightByWhere(makeWhere(timestamp,"verify_time"),startRow,numRows);
    }
    /** 参见 {@link #_loadLogLightByVerifyTime(Date,int,int)} */
    //20
    protected List<LogLightBean> _loadLogLightByVerifyTime(Date timestamp){
        return _loadLogLightByVerifyTime(timestamp,1,-1);
    }
    /**
     * 返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #_countLogLightByWhere(String)
     */
    //20-5
    protected int _countLogLightByVerifyTime(Date timestamp){
        return _countLogLightByWhere(makeWhere(timestamp,"verify_time"));
    }

}
