// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: dao.java.vm
// ______________________________________________________
package net.gdface.facelog;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Callable;

import com.google.common.base.Objects;
import com.google.common.base.Function;


import net.gdface.facelog.db.IDeviceManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.IDeviceGroupManager;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.IFaceManager;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.IFeatureManager;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.IImageManager;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.ILogManager;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.IPermitManager;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.IPersonManager;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.IPersonGroupManager;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.IStoreManager;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.ILogLightManager;
import net.gdface.facelog.db.LogLightBean;
import net.gdface.facelog.db.exception.ObjectRetrievalException;
import net.gdface.facelog.db.exception.RuntimeDaoException;

/**
 * 数据库访问基础方法
 * @author guyadong
 *
 */
class Dao implements CommonConstant {
    
    static final IDeviceManager getDeviceManager(){
        return TableManagerInitializer.INSTANCE.deviceManager;
    }
    static final IDeviceGroupManager getDeviceGroupManager(){
        return TableManagerInitializer.INSTANCE.deviceGroupManager;
    }
    static final IFaceManager getFaceManager(){
        return TableManagerInitializer.INSTANCE.faceManager;
    }
    static final IFeatureManager getFeatureManager(){
        return TableManagerInitializer.INSTANCE.featureManager;
    }
    static final IImageManager getImageManager(){
        return TableManagerInitializer.INSTANCE.imageManager;
    }
    static final ILogManager getLogManager(){
        return TableManagerInitializer.INSTANCE.logManager;
    }
    static final IPermitManager getPermitManager(){
        return TableManagerInitializer.INSTANCE.permitManager;
    }
    static final IPersonManager getPersonManager(){
        return TableManagerInitializer.INSTANCE.personManager;
    }
    static final IPersonGroupManager getPersonGroupManager(){
        return TableManagerInitializer.INSTANCE.personGroupManager;
    }
    static final IStoreManager getStoreManager(){
        return TableManagerInitializer.INSTANCE.storeManager;
    }
    static final ILogLightManager getLogLightManager(){
        return TableManagerInitializer.INSTANCE.logLightManager;
    }
    /** 生成 SQL where 语句,example: {@code WHERE create_time >'2017-09-02 12:12:12'} */
    static private String makeWhere(Date timestamp,String field){
        return String.format(
                "WHERE %s > '%s'", 
                field,
                TIMESTAMP_FORMATTER.get().format(checkNotNull(timestamp)));    
    }
    /** 事务执行 */
    protected static <T> T daoRunAsTransaction(Callable<T> fun){
        return getPersonManager().runAsTransaction(checkNotNull(fun));
    }
    /** 事务执行 */
    protected static void daoRunAsTransaction(Runnable fun){
        getPersonManager().runAsTransaction(checkNotNull(fun));
    }
    //////////// FL_DEVICE /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 设备id 
     * @see {@link IDeviceManager#loadByPrimaryKey(Integer)}
     */
    protected DeviceBean daoGetDevice(Integer id){
        return getDeviceManager().loadByPrimaryKey(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 DeviceBean 列表,没有查到记录的返回{@link DeviceBean#NULL}
     * @see {@link IDeviceManager#loadByPrimaryKey(Collection)}
     * @see DeviceBean#replaceNull(List)
     */
    protected List<DeviceBean> daoGetDevices(Collection<Integer> idCollection){
        return DeviceBean.replaceNull((getDeviceManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IDeviceManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeleteDevicesByPrimaryKey(Collection<Integer> idCollection){
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeleteDevice(id);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link DeviceBean}
     * @param {@link DeviceBean} collection
     * @return primary key list 
     */
    protected List<Integer> daoToPrimaryKeyListFromDevices(Collection<DeviceBean> beans){
        return getDeviceManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : DeviceBean to fl_device.id */ 
    protected final Function<DeviceBean,Integer> daoCastDeviceToPk = new Function<DeviceBean,Integer>(){
            @Override
            public Integer apply(DeviceBean input) {
                return null == input ? null : input.getId();
            }};
    //3-8
    /** transformer : fl_device.id to DeviceBean */ 
    protected final Function<Integer,DeviceBean> daoCastDeviceFromPk = new Function<Integer,DeviceBean>(){
            @Override
            public DeviceBean apply(Integer input) {
                return daoGetDevice(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 设备id 
     * @see {@link IDeviceManager#existsPrimaryKey(Integer)}
     */
    protected boolean daoExistsDevice(Integer id){
        return getDeviceManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IDeviceManager#existsPrimaryKey(DeviceBean)}
     */
    protected boolean daoExistsDevice(DeviceBean bean){
        return getDeviceManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 设备id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IDeviceManager#deleteByPrimaryKey(Integer)}
     */
    protected int daoDeleteDevice(Integer id){
        return getDeviceManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteDevice(Integer)
     */
    protected int daoDeleteDevice(DeviceBean bean){
        return null == bean ? 0 : daoDeleteDevice(bean.getId());
    }
    //6
    /**
     * 删除{@code deviceBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteDevice(Integer)
     */
    protected int daoDeleteDevices(Collection<DeviceBean> beans){
        int count =0;
        if(null != beans){        
            for(DeviceBean bean:beans){
                if(null != bean){
                    count += daoDeleteDevice(bean.getId());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IDeviceManager#checkDuplicate(DeviceBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected DeviceBean daoCheckDuplicate(DeviceBean deviceBean)throws DuplicateReordException{
        try{
            return getDeviceManager().checkDuplicate(deviceBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#checkDuplicate(DeviceBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code idOfDevice} 
     */
    protected Integer daoCheckDuplicateDevice(Integer idOfDevice)throws DuplicateReordException{
        if(getDeviceManager().existsPrimaryKey(idOfDevice)){
            throw new DuplicateReordException();
        }
        return idOfDevice;
    }
    //8
    /**
     * 返回外键(fl_image.device_id)引用指定记录(fl_device.id)的所有{@code fl_image}记录
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#getImageBeansByDeviceIdAsList(Integer)}
     */
    protected List<ImageBean> daoGetImageBeansByDeviceIdOnDevice(Integer idOfDevice){
        return getDeviceManager().getImageBeansByDeviceIdAsList(idOfDevice);
    }
    //8-2
    /**
     * 删除外键(idOfDevice))引用指定记录(fl_device.id)的所有{@code fl_image}记录
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#deleteImageBeansByDeviceId(Integer)}
     */
    protected int daoDeleteImageBeansByDeviceIdOnDevice(Integer idOfDevice){
        return getDeviceManager().deleteImageBeansByDeviceId(idOfDevice);
    }
    //8
    /**
     * 返回外键(fl_log.device_id)引用指定记录(fl_device.id)的所有{@code fl_log}记录
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#getLogBeansByDeviceIdAsList(Integer)}
     */
    protected List<LogBean> daoGetLogBeansByDeviceIdOnDevice(Integer idOfDevice){
        return getDeviceManager().getLogBeansByDeviceIdAsList(idOfDevice);
    }
    //8-2
    /**
     * 删除外键(idOfDevice))引用指定记录(fl_device.id)的所有{@code fl_log}记录
     * 
     * @param idOfDevice 设备id 
     * @see {@link IDeviceManager#deleteLogBeansByDeviceId(Integer)}
     */
    protected int daoDeleteLogBeansByDeviceIdOnDevice(Integer idOfDevice){
        return getDeviceManager().deleteLogBeansByDeviceId(idOfDevice);
    }
    //8-3
    /**
     * 返回外键(fl_device.group_id)引用的 fl_device_group 记录
     * @param bean
     * @see {@link IDeviceManager#getReferencedByGroupId(DeviceBean)}
     */
    protected DeviceGroupBean daoGetReferencedByGroupIdOnDevice(DeviceBean bean){
        return getDeviceManager().getReferencedByGroupId(bean);
    }
    //8-4
    /**
     * 设置外键fl_device(group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IDeviceManager#setReferencedByGroupId(DeviceBean,DeviceGroupBean)}
     */
    protected DeviceGroupBean daoSetReferencedByGroupIdOnDevice(DeviceBean bean,DeviceGroupBean beanToSet){
        return getDeviceManager().setReferencedByGroupId(bean,beanToSet);
    }
    //8-6
    /** transformer : DeviceBean to fl_device.group_id */
    protected final Function<DeviceBean,Integer> daoCastDeviceToGroupId = new Function<DeviceBean,Integer>(){
            @Override
            public Integer apply(DeviceBean input) {
                return null == input ? null : input.getGroupId();
            }};
    //14
    /** 
     * 参见 {@link IDeviceManager#save(DeviceBean)}
     */
    protected DeviceBean daoSaveDevice(DeviceBean deviceBean){
        daoCheckGroup(deviceBean);
        return getDeviceManager().save(deviceBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IDeviceManager#save(DeviceBean , DeviceGroupBean , Collection, Collection )}
     */
    protected DeviceBean daoSaveDevice(DeviceBean deviceBean
        , DeviceGroupBean refDevicegroupByGroupId 
        , Collection<ImageBean> impImageByDeviceId 
        , Collection<LogBean> impLogByDeviceId ){
        daoCheckGroup(deviceBean);
        return getDeviceManager().save(deviceBean
            , refDevicegroupByGroupId 
            , impImageByDeviceId 
            , impLogByDeviceId );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSaveDevice(DeviceBean)
     */
    protected Collection<DeviceBean> daoSaveDevices(Collection<DeviceBean> beans){
        if(null != beans){
            for(DeviceBean bean : beans){
                daoSaveDevice(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSaveDevice(Collection)}的事务化版本
     */
    protected Collection<DeviceBean> daoSaveDevicesAsTransaction(final Collection<DeviceBean> beans){
        return daoRunAsTransaction(new Callable<Collection<DeviceBean>>(){      
            @Override
            public Collection<DeviceBean> call() throws Exception {
                return daoSaveDevices(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_device 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IDeviceManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<DeviceBean> daoLoadDeviceByWhere(String where,int startRow, int numRows){
        return getDeviceManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_device 表的所有记录
     * @see {@link IDeviceManager#loadAllAsList()}
     */
    protected List<DeviceBean> daoLoadDeviceAll(){
        return getDeviceManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_device 记录总数
     * @see {@link IDeviceManager#Where(String)}
     */
    protected int daoCountDeviceByWhere(String where){
        return getDeviceManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadDeviceByWhere(String,int,int)
     */
    protected List<Integer> daoLoadDeviceIdByWhere(String where){
        return daoToPrimaryKeyListFromDevices(daoLoadDeviceByWhere(where,1,-1));
    }
    //18-5
    /** 
     * 索引(fl_device.mac)查询<br>
     * 
     * @param mac 6字节MAC地址(HEX)
     * @see {@link IDeviceManager#loadByIndexMac(String)}
     */
    protected DeviceBean daoGetDeviceByIndexMac(String mac){
        return getDeviceManager().loadByIndexMac(mac);
    }
    //18-5
    /** 
     * 索引(fl_device.serial_no)查询<br>
     * 
     * @param serialNo 设备序列号
     * @see {@link IDeviceManager#loadByIndexSerialNo(String)}
     */
    protected DeviceBean daoGetDeviceByIndexSerialNo(String serialNo){
        return getDeviceManager().loadByIndexSerialNo(serialNo);
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_device.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadDeviceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<DeviceBean> daoLoadDeviceByCreateTime(Date timestamp,int startRow, int numRows){
        return daoLoadDeviceByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadDeviceByCreateTime(Date,int,int)} */
    protected List<DeviceBean> daoLoadDeviceByCreateTime(Date timestamp){
        return daoLoadDeviceByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_device.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountDeviceByWhere(String)
     */
    protected int daoCountDeviceByCreateTime(Date timestamp){
        return daoCountDeviceByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_device.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #daoLoadDeviceIdByWhere(String)} 
     */
    protected List<Integer> daoLoadDeviceIdByCreateTime(Date timestamp){
        return daoLoadDeviceIdByWhere(makeWhere(timestamp,"create_time"));
    }

    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_device.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadDeviceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<DeviceBean> daoLoadDeviceByUpdateTime(Date timestamp,int startRow, int numRows){
        return daoLoadDeviceByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadDeviceByUpdateTime(Date,int,int)} */
    protected List<DeviceBean> daoLoadDeviceByUpdateTime(Date timestamp){
        return daoLoadDeviceByUpdateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_device.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountDeviceByWhere(String)
     */
    protected int daoCountDeviceByUpdateTime(Date timestamp){
        return daoCountDeviceByWhere(makeWhere(timestamp,"update_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_device.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #daoLoadDeviceIdByWhere(String)} 
     */
    protected List<Integer> daoLoadDeviceIdByUpdateTime(Date timestamp){
        return daoLoadDeviceIdByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_DEVICE_GROUP /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 设备组id 
     * @see {@link IDeviceGroupManager#loadByPrimaryKey(Integer)}
     */
    protected DeviceGroupBean daoGetDeviceGroup(Integer id){
        return getDeviceGroupManager().loadByPrimaryKey(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 DeviceGroupBean 列表,没有查到记录的返回{@link DeviceGroupBean#NULL}
     * @see {@link IDeviceGroupManager#loadByPrimaryKey(Collection)}
     * @see DeviceGroupBean#replaceNull(List)
     */
    protected List<DeviceGroupBean> daoGetDeviceGroups(Collection<Integer> idCollection){
        return DeviceGroupBean.replaceNull((getDeviceGroupManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IDeviceGroupManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeleteDeviceGroupsByPrimaryKey(Collection<Integer> idCollection){
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeleteDeviceGroup(id);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link DeviceGroupBean}
     * @param {@link DeviceGroupBean} collection
     * @return primary key list 
     */
    protected List<Integer> daoToPrimaryKeyListFromDeviceGroups(Collection<DeviceGroupBean> beans){
        return getDeviceGroupManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : DeviceGroupBean to fl_device_group.id */ 
    protected final Function<DeviceGroupBean,Integer> daoCastDeviceGroupToPk = new Function<DeviceGroupBean,Integer>(){
            @Override
            public Integer apply(DeviceGroupBean input) {
                return null == input ? null : input.getId();
            }};
    //3-8
    /** transformer : fl_device_group.id to DeviceGroupBean */ 
    protected final Function<Integer,DeviceGroupBean> daoCastDeviceGroupFromPk = new Function<Integer,DeviceGroupBean>(){
            @Override
            public DeviceGroupBean apply(Integer input) {
                return daoGetDeviceGroup(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 设备组id 
     * @see {@link IDeviceGroupManager#existsPrimaryKey(Integer)}
     */
    protected boolean daoExistsDeviceGroup(Integer id){
        return getDeviceGroupManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IDeviceGroupManager#existsPrimaryKey(DeviceGroupBean)}
     */
    protected boolean daoExistsDeviceGroup(DeviceGroupBean bean){
        return getDeviceGroupManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 设备组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IDeviceGroupManager#deleteByPrimaryKey(Integer)}
     */
    protected int daoDeleteDeviceGroup(Integer id){
        return getDeviceGroupManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteDeviceGroup(Integer)
     */
    protected int daoDeleteDeviceGroup(DeviceGroupBean bean){
        return null == bean ? 0 : daoDeleteDeviceGroup(bean.getId());
    }
    //6
    /**
     * 删除{@code deviceGroupBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteDeviceGroup(Integer)
     */
    protected int daoDeleteDeviceGroups(Collection<DeviceGroupBean> beans){
        int count =0;
        if(null != beans){        
            for(DeviceGroupBean bean:beans){
                if(null != bean){
                    count += daoDeleteDeviceGroup(bean.getId());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IDeviceGroupManager#checkDuplicate(DeviceGroupBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected DeviceGroupBean daoCheckDuplicate(DeviceGroupBean deviceGroupBean)throws DuplicateReordException{
        try{
            return getDeviceGroupManager().checkDuplicate(deviceGroupBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#checkDuplicate(DeviceGroupBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code idOfDeviceGroup} 
     */
    protected Integer daoCheckDuplicateDeviceGroup(Integer idOfDeviceGroup)throws DuplicateReordException{
        if(getDeviceGroupManager().existsPrimaryKey(idOfDeviceGroup)){
            throw new DuplicateReordException();
        }
        return idOfDeviceGroup;
    }
    //8
    /**
     * 返回属于{@code idOfDeviceGroup}指定组的所有{@code fl_device}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#getDeviceBeansByGroupIdAsList(Integer)}
     */
    protected List<DeviceBean> daoGetDevicesOfGroup(Integer idOfDeviceGroup){
        return getDeviceGroupManager().getDeviceBeansByGroupIdAsList(idOfDeviceGroup);
    }
    //8-2
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_device}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#deleteDeviceBeansByGroupId(Integer)}
     */
    protected int daoDeleteDeviceBeansByGroupIdOnDeviceGroup(Integer idOfDeviceGroup){
        return getDeviceGroupManager().deleteDeviceBeansByGroupId(idOfDeviceGroup);
    }
    //8
    /**
     * 返回{@code idOfDeviceGroup)}指定的组下的所有子节点,如果没有子节点则返回空表
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#getDeviceGroupBeansByParentAsList(Integer)}
     */
    protected List<DeviceGroupBean> daoGetSubDeviceGroup(Integer idOfDeviceGroup){
        return getDeviceGroupManager().getDeviceGroupBeansByParentAsList(idOfDeviceGroup);
    }
    //8-2
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_device_group}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#deleteDeviceGroupBeansByParent(Integer)}
     */
    protected int daoDeleteDeviceGroupBeansByParentOnDeviceGroup(Integer idOfDeviceGroup){
        return getDeviceGroupManager().deleteDeviceGroupBeansByParent(idOfDeviceGroup);
    }
    //8
    /**
     * 返回外键(fl_permit.device_group_id)引用指定记录(fl_device_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#getPermitBeansByDeviceGroupIdAsList(Integer)}
     */
    protected List<PermitBean> daoGetPermitBeansByDeviceGroupIdOnDeviceGroup(Integer idOfDeviceGroup){
        return getDeviceGroupManager().getPermitBeansByDeviceGroupIdAsList(idOfDeviceGroup);
    }
    //8-2
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see {@link IDeviceGroupManager#deletePermitBeansByDeviceGroupId(Integer)}
     */
    protected int daoDeletePermitBeansByDeviceGroupIdOnDeviceGroup(Integer idOfDeviceGroup){
        return getDeviceGroupManager().deletePermitBeansByDeviceGroupId(idOfDeviceGroup);
    }
    //8-3
    /**
     * 返回外键(fl_device_group.parent)引用的 fl_device_group 记录
     * @param bean
     * @see {@link IDeviceGroupManager#getReferencedByParent(DeviceGroupBean)}
     */
    protected DeviceGroupBean daoGetReferencedByParentOnDeviceGroup(DeviceGroupBean bean){
        return getDeviceGroupManager().getReferencedByParent(bean);
    }
    //8-4
    /**
     * 设置外键fl_device_group(parent)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IDeviceGroupManager#setReferencedByParent(DeviceGroupBean,DeviceGroupBean)}
     */
    protected DeviceGroupBean daoSetReferencedByParentOnDeviceGroup(DeviceGroupBean bean,DeviceGroupBean beanToSet){
        return getDeviceGroupManager().setReferencedByParent(bean,beanToSet);
    }
    //9
    /**
     * 返回(idOfDeviceGroup))指定的fl_device_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @see IDeviceGroupManager#listOfParent(Integer)
     */
    protected java.util.List<DeviceGroupBean> daoListOfParentForDeviceGroup(Integer idOfDeviceGroup){
        return getDeviceGroupManager().listOfParent(idOfDeviceGroup);
    }
    //9-2
    /**
     * 返回{@code deviceGroupBean}指定的fl_device_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @see IDeviceGroupManager#listOfParent(DeviceGroupBean)
     */
    protected java.util.List<DeviceGroupBean> daoListOfParentForDeviceGroup(DeviceGroupBean deviceGroupBean){
        return getDeviceGroupManager().listOfParent(deviceGroupBean);
    }
    //10
    /** 
     * 如果没有默认组则向 fl_device_group 表中增加默认组,失败则抛出异常 
     * 
     * @throws IllegalStateException 创建失败
     */
    protected void daoSaveDefaultDeviceGroupIfAbsent(){
        if(!daoExistsDeviceGroup(DEFAULT_GROUP_ID)){
            try{
                DeviceGroupBean bean = new DeviceGroupBean(DEFAULT_GROUP_ID);
                bean.setName(DEFAULT_GROUP_NAME);
                daoSaveDeviceGroup(bean);
            }catch(RuntimeDaoException e){
                // do nothing
            }
            if(!daoExistsDeviceGroup(DEFAULT_GROUP_ID)){
                throw new IllegalStateException("can't create default group for device_group"); 
            }
        }
    }
    //11
    /**
     * 检查{@link DeviceBean}的'group_id'字段是否为默认组{@link CommonConstant#DEFAULT_GROUP_ID},
     * 如果是,且默认组记录不存在则创建默认组
     * @return {@code deviceBean}
     * @see #daoSaveDefaultDeviceGroupIfAbsent()
     */
    protected DeviceBean daoCheckGroup(DeviceBean deviceBean){
        if(null != deviceBean && Objects.equal(deviceBean.getGroupId(), DEFAULT_GROUP_ID)){
            daoSaveDefaultDeviceGroupIfAbsent();
        }
        return deviceBean;
    }
    //14
    /** 
     * 参见 {@link IDeviceGroupManager#save(DeviceGroupBean)}
     */
    protected DeviceGroupBean daoSaveDeviceGroup(DeviceGroupBean deviceGroupBean){
        return getDeviceGroupManager().save(deviceGroupBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IDeviceGroupManager#save(DeviceGroupBean , DeviceGroupBean , Collection, Collection, Collection )}
     */
    protected DeviceGroupBean daoSaveDeviceGroup(DeviceGroupBean deviceGroupBean
        , DeviceGroupBean refDevicegroupByParent 
        , Collection<DeviceBean> impDeviceByGroupId 
        , Collection<DeviceGroupBean> impDevicegroupByParent 
        , Collection<PermitBean> impPermitByDeviceGroupId ){
        return getDeviceGroupManager().save(deviceGroupBean
            , refDevicegroupByParent 
            , impDeviceByGroupId 
            , impDevicegroupByParent 
            , impPermitByDeviceGroupId );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSaveDeviceGroup(DeviceGroupBean)
     */
    protected Collection<DeviceGroupBean> daoSaveDeviceGroups(Collection<DeviceGroupBean> beans){
        if(null != beans){
            for(DeviceGroupBean bean : beans){
                daoSaveDeviceGroup(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSaveDeviceGroup(Collection)}的事务化版本
     */
    protected Collection<DeviceGroupBean> daoSaveDeviceGroupsAsTransaction(final Collection<DeviceGroupBean> beans){
        return daoRunAsTransaction(new Callable<Collection<DeviceGroupBean>>(){      
            @Override
            public Collection<DeviceGroupBean> call() throws Exception {
                return daoSaveDeviceGroups(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_device_group 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IDeviceGroupManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupByWhere(String where,int startRow, int numRows){
        return getDeviceGroupManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_device_group 表的所有记录
     * @see {@link IDeviceGroupManager#loadAllAsList()}
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupAll(){
        return getDeviceGroupManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_device_group 记录总数
     * @see {@link IDeviceGroupManager#Where(String)}
     */
    protected int daoCountDeviceGroupByWhere(String where){
        return getDeviceGroupManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadDeviceGroupByWhere(String,int,int)
     */
    protected List<Integer> daoLoadDeviceGroupIdByWhere(String where){
        return daoToPrimaryKeyListFromDeviceGroups(daoLoadDeviceGroupByWhere(where,1,-1));
    }



    //////////// FL_PERSON /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 用户id 
     * @see {@link IPersonManager#loadByPrimaryKey(Integer)}
     */
    protected PersonBean daoGetPerson(Integer id){
        return getPersonManager().loadByPrimaryKey(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 PersonBean 列表,没有查到记录的返回{@link PersonBean#NULL}
     * @see {@link IPersonManager#loadByPrimaryKey(Collection)}
     * @see PersonBean#replaceNull(List)
     */
    protected List<PersonBean> daoGetPersons(Collection<Integer> idCollection){
        return PersonBean.replaceNull((getPersonManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IPersonManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeletePersonsByPrimaryKey(Collection<Integer> idCollection){
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeletePerson(id);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link PersonBean}
     * @param {@link PersonBean} collection
     * @return primary key list 
     */
    protected List<Integer> daoToPrimaryKeyListFromPersons(Collection<PersonBean> beans){
        return getPersonManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : PersonBean to fl_person.id */ 
    protected final Function<PersonBean,Integer> daoCastPersonToPk = new Function<PersonBean,Integer>(){
            @Override
            public Integer apply(PersonBean input) {
                return null == input ? null : input.getId();
            }};
    //3-8
    /** transformer : fl_person.id to PersonBean */ 
    protected final Function<Integer,PersonBean> daoCastPersonFromPk = new Function<Integer,PersonBean>(){
            @Override
            public PersonBean apply(Integer input) {
                return daoGetPerson(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 用户id 
     * @see {@link IPersonManager#existsPrimaryKey(Integer)}
     */
    protected boolean daoExistsPerson(Integer id){
        return getPersonManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IPersonManager#existsPrimaryKey(PersonBean)}
     */
    protected boolean daoExistsPerson(PersonBean bean){
        return getPersonManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 用户id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPersonManager#deleteByPrimaryKey(Integer)}
     */
    protected int daoDeletePerson(Integer id){
        return getPersonManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeletePerson(Integer)
     */
    protected int daoDeletePerson(PersonBean bean){
        return null == bean ? 0 : daoDeletePerson(bean.getId());
    }
    //6
    /**
     * 删除{@code personBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeletePerson(Integer)
     */
    protected int daoDeletePersons(Collection<PersonBean> beans){
        int count =0;
        if(null != beans){        
            for(PersonBean bean:beans){
                if(null != bean){
                    count += daoDeletePerson(bean.getId());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IPersonManager#checkDuplicate(PersonBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected PersonBean daoCheckDuplicate(PersonBean personBean)throws DuplicateReordException{
        try{
            return getPersonManager().checkDuplicate(personBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#checkDuplicate(PersonBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code idOfPerson} 
     */
    protected Integer daoCheckDuplicatePerson(Integer idOfPerson)throws DuplicateReordException{
        if(getPersonManager().existsPrimaryKey(idOfPerson)){
            throw new DuplicateReordException();
        }
        return idOfPerson;
    }
    //8
    /**
     * 返回外键(fl_feature.person_id)引用指定记录(fl_person.id)的所有{@code fl_feature}记录
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#getFeatureBeansByPersonIdAsList(Integer)}
     */
    protected List<FeatureBean> daoGetFeatureBeansByPersonIdOnPerson(Integer idOfPerson){
        return getPersonManager().getFeatureBeansByPersonIdAsList(idOfPerson);
    }
    //8-2
    /**
     * 删除外键(idOfPerson))引用指定记录(fl_person.id)的所有{@code fl_feature}记录
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#deleteFeatureBeansByPersonId(Integer)}
     */
    protected int daoDeleteFeatureBeansByPersonIdOnPerson(Integer idOfPerson){
        return getPersonManager().deleteFeatureBeansByPersonId(idOfPerson);
    }
    //8
    /**
     * 返回外键(fl_log.person_id)引用指定记录(fl_person.id)的所有{@code fl_log}记录
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#getLogBeansByPersonIdAsList(Integer)}
     */
    protected List<LogBean> daoGetLogBeansByPersonIdOnPerson(Integer idOfPerson){
        return getPersonManager().getLogBeansByPersonIdAsList(idOfPerson);
    }
    //8-2
    /**
     * 删除外键(idOfPerson))引用指定记录(fl_person.id)的所有{@code fl_log}记录
     * 
     * @param idOfPerson 用户id 
     * @see {@link IPersonManager#deleteLogBeansByPersonId(Integer)}
     */
    protected int daoDeleteLogBeansByPersonIdOnPerson(Integer idOfPerson){
        return getPersonManager().deleteLogBeansByPersonId(idOfPerson);
    }
    //8-3
    /**
     * 返回外键(fl_person.image_md5)引用的 fl_image 记录
     * @param bean
     * @see {@link IPersonManager#getReferencedByImageMd5(PersonBean)}
     */
    protected ImageBean daoGetReferencedByImageMd5OnPerson(PersonBean bean){
        return getPersonManager().getReferencedByImageMd5(bean);
    }
    //8-4
    /**
     * 设置外键fl_person(image_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPersonManager#setReferencedByImageMd5(PersonBean,ImageBean)}
     */
    protected ImageBean daoSetReferencedByImageMd5OnPerson(PersonBean bean,ImageBean beanToSet){
        return getPersonManager().setReferencedByImageMd5(bean,beanToSet);
    }
    //8-6
    /** transformer : PersonBean to fl_person.image_md5 */
    protected final Function<PersonBean,String> daoCastPersonToImageMd5 = new Function<PersonBean,String>(){
            @Override
            public String apply(PersonBean input) {
                return null == input ? null : input.getImageMd5();
            }};
    //8-3
    /**
     * 返回外键(fl_person.group_id)引用的 fl_person_group 记录
     * @param bean
     * @see {@link IPersonManager#getReferencedByGroupId(PersonBean)}
     */
    protected PersonGroupBean daoGetReferencedByGroupIdOnPerson(PersonBean bean){
        return getPersonManager().getReferencedByGroupId(bean);
    }
    //8-4
    /**
     * 设置外键fl_person(group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPersonManager#setReferencedByGroupId(PersonBean,PersonGroupBean)}
     */
    protected PersonGroupBean daoSetReferencedByGroupIdOnPerson(PersonBean bean,PersonGroupBean beanToSet){
        return getPersonManager().setReferencedByGroupId(bean,beanToSet);
    }
    //8-6
    /** transformer : PersonBean to fl_person.group_id */
    protected final Function<PersonBean,Integer> daoCastPersonToGroupId = new Function<PersonBean,Integer>(){
            @Override
            public Integer apply(PersonBean input) {
                return null == input ? null : input.getGroupId();
            }};
    //14
    /** 
     * 参见 {@link IPersonManager#save(PersonBean)}
     */
    protected PersonBean daoSavePerson(PersonBean personBean){
        daoCheckGroup(personBean);
        return getPersonManager().save(personBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IPersonManager#save(PersonBean , ImageBean, PersonGroupBean , Collection, Collection )}
     */
    protected PersonBean daoSavePerson(PersonBean personBean
        , ImageBean refImageByImageMd5 
        , PersonGroupBean refPersongroupByGroupId 
        , Collection<FeatureBean> impFeatureByPersonId 
        , Collection<LogBean> impLogByPersonId ){
        daoCheckGroup(personBean);
        return getPersonManager().save(personBean
            , refImageByImageMd5 
            , refPersongroupByGroupId 
            , impFeatureByPersonId 
            , impLogByPersonId );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSavePerson(PersonBean)
     */
    protected Collection<PersonBean> daoSavePersons(Collection<PersonBean> beans){
        if(null != beans){
            for(PersonBean bean : beans){
                daoSavePerson(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSavePerson(Collection)}的事务化版本
     */
    protected Collection<PersonBean> daoSavePersonsAsTransaction(final Collection<PersonBean> beans){
        return daoRunAsTransaction(new Callable<Collection<PersonBean>>(){      
            @Override
            public Collection<PersonBean> call() throws Exception {
                return daoSavePersons(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_person 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IPersonManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<PersonBean> daoLoadPersonByWhere(String where,int startRow, int numRows){
        return getPersonManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_person 表的所有记录
     * @see {@link IPersonManager#loadAllAsList()}
     */
    protected List<PersonBean> daoLoadPersonAll(){
        return getPersonManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person 记录总数
     * @see {@link IPersonManager#Where(String)}
     */
    protected int daoCountPersonByWhere(String where){
        return getPersonManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadPersonByWhere(String,int,int)
     */
    protected List<Integer> daoLoadPersonIdByWhere(String where){
        return daoToPrimaryKeyListFromPersons(daoLoadPersonByWhere(where,1,-1));
    }
    //18-5
    /** 
     * 索引(fl_person.image_md5)查询<br>
     * 
     * @param imageMd5 用户默认照片(证件照,标准照)的md5校验码,外键
     * @see {@link IPersonManager#loadByIndexImageMd5(String)}
     */
    protected PersonBean daoGetPersonByIndexImageMd5(String imageMd5){
        return getPersonManager().loadByIndexImageMd5(imageMd5);
    }
    //18-5
    /** 
     * 索引(fl_person.papers_num)查询<br>
     * 
     * @param papersNum 证件号码
     * @see {@link IPersonManager#loadByIndexPapersNum(String)}
     */
    protected PersonBean daoGetPersonByIndexPapersNum(String papersNum){
        return getPersonManager().loadByIndexPapersNum(papersNum);
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadPersonByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<PersonBean> daoLoadPersonByCreateTime(Date timestamp,int startRow, int numRows){
        return daoLoadPersonByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadPersonByCreateTime(Date,int,int)} */
    protected List<PersonBean> daoLoadPersonByCreateTime(Date timestamp){
        return daoLoadPersonByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_person.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountPersonByWhere(String)
     */
    protected int daoCountPersonByCreateTime(Date timestamp){
        return daoCountPersonByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_person.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #daoLoadPersonIdByWhere(String)} 
     */
    protected List<Integer> daoLoadPersonIdByCreateTime(Date timestamp){
        return daoLoadPersonIdByWhere(makeWhere(timestamp,"create_time"));
    }

    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadPersonByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<PersonBean> daoLoadPersonByUpdateTime(Date timestamp,int startRow, int numRows){
        return daoLoadPersonByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadPersonByUpdateTime(Date,int,int)} */
    protected List<PersonBean> daoLoadPersonByUpdateTime(Date timestamp){
        return daoLoadPersonByUpdateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_person.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountPersonByWhere(String)
     */
    protected int daoCountPersonByUpdateTime(Date timestamp){
        return daoCountPersonByWhere(makeWhere(timestamp,"update_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #daoLoadPersonIdByWhere(String)} 
     */
    protected List<Integer> daoLoadPersonIdByUpdateTime(Date timestamp){
        return daoLoadPersonIdByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_PERSON_GROUP /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 用户组id 
     * @see {@link IPersonGroupManager#loadByPrimaryKey(Integer)}
     */
    protected PersonGroupBean daoGetPersonGroup(Integer id){
        return getPersonGroupManager().loadByPrimaryKey(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 PersonGroupBean 列表,没有查到记录的返回{@link PersonGroupBean#NULL}
     * @see {@link IPersonGroupManager#loadByPrimaryKey(Collection)}
     * @see PersonGroupBean#replaceNull(List)
     */
    protected List<PersonGroupBean> daoGetPersonGroups(Collection<Integer> idCollection){
        return PersonGroupBean.replaceNull((getPersonGroupManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IPersonGroupManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeletePersonGroupsByPrimaryKey(Collection<Integer> idCollection){
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeletePersonGroup(id);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link PersonGroupBean}
     * @param {@link PersonGroupBean} collection
     * @return primary key list 
     */
    protected List<Integer> daoToPrimaryKeyListFromPersonGroups(Collection<PersonGroupBean> beans){
        return getPersonGroupManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : PersonGroupBean to fl_person_group.id */ 
    protected final Function<PersonGroupBean,Integer> daoCastPersonGroupToPk = new Function<PersonGroupBean,Integer>(){
            @Override
            public Integer apply(PersonGroupBean input) {
                return null == input ? null : input.getId();
            }};
    //3-8
    /** transformer : fl_person_group.id to PersonGroupBean */ 
    protected final Function<Integer,PersonGroupBean> daoCastPersonGroupFromPk = new Function<Integer,PersonGroupBean>(){
            @Override
            public PersonGroupBean apply(Integer input) {
                return daoGetPersonGroup(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 用户组id 
     * @see {@link IPersonGroupManager#existsPrimaryKey(Integer)}
     */
    protected boolean daoExistsPersonGroup(Integer id){
        return getPersonGroupManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IPersonGroupManager#existsPrimaryKey(PersonGroupBean)}
     */
    protected boolean daoExistsPersonGroup(PersonGroupBean bean){
        return getPersonGroupManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 用户组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPersonGroupManager#deleteByPrimaryKey(Integer)}
     */
    protected int daoDeletePersonGroup(Integer id){
        return getPersonGroupManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeletePersonGroup(Integer)
     */
    protected int daoDeletePersonGroup(PersonGroupBean bean){
        return null == bean ? 0 : daoDeletePersonGroup(bean.getId());
    }
    //6
    /**
     * 删除{@code personGroupBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeletePersonGroup(Integer)
     */
    protected int daoDeletePersonGroups(Collection<PersonGroupBean> beans){
        int count =0;
        if(null != beans){        
            for(PersonGroupBean bean:beans){
                if(null != bean){
                    count += daoDeletePersonGroup(bean.getId());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IPersonGroupManager#checkDuplicate(PersonGroupBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected PersonGroupBean daoCheckDuplicate(PersonGroupBean personGroupBean)throws DuplicateReordException{
        try{
            return getPersonGroupManager().checkDuplicate(personGroupBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#checkDuplicate(PersonGroupBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code idOfPersonGroup} 
     */
    protected Integer daoCheckDuplicatePersonGroup(Integer idOfPersonGroup)throws DuplicateReordException{
        if(getPersonGroupManager().existsPrimaryKey(idOfPersonGroup)){
            throw new DuplicateReordException();
        }
        return idOfPersonGroup;
    }
    //8
    /**
     * 返回外键(fl_permit.person_group_id)引用指定记录(fl_person_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#getPermitBeansByPersonGroupIdAsList(Integer)}
     */
    protected List<PermitBean> daoGetPermitBeansByPersonGroupIdOnPersonGroup(Integer idOfPersonGroup){
        return getPersonGroupManager().getPermitBeansByPersonGroupIdAsList(idOfPersonGroup);
    }
    //8-2
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#deletePermitBeansByPersonGroupId(Integer)}
     */
    protected int daoDeletePermitBeansByPersonGroupIdOnPersonGroup(Integer idOfPersonGroup){
        return getPersonGroupManager().deletePermitBeansByPersonGroupId(idOfPersonGroup);
    }
    //8
    /**
     * 返回属于{@code idOfPersonGroup}指定组的所有{@code fl_person}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#getPersonBeansByGroupIdAsList(Integer)}
     */
    protected List<PersonBean> daoGetPersonsOfGroup(Integer idOfPersonGroup){
        return getPersonGroupManager().getPersonBeansByGroupIdAsList(idOfPersonGroup);
    }
    //8-2
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_person}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#deletePersonBeansByGroupId(Integer)}
     */
    protected int daoDeletePersonBeansByGroupIdOnPersonGroup(Integer idOfPersonGroup){
        return getPersonGroupManager().deletePersonBeansByGroupId(idOfPersonGroup);
    }
    //8
    /**
     * 返回{@code idOfPersonGroup)}指定的组下的所有子节点,如果没有子节点则返回空表
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#getPersonGroupBeansByParentAsList(Integer)}
     */
    protected List<PersonGroupBean> daoGetSubPersonGroup(Integer idOfPersonGroup){
        return getPersonGroupManager().getPersonGroupBeansByParentAsList(idOfPersonGroup);
    }
    //8-2
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_person_group}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see {@link IPersonGroupManager#deletePersonGroupBeansByParent(Integer)}
     */
    protected int daoDeletePersonGroupBeansByParentOnPersonGroup(Integer idOfPersonGroup){
        return getPersonGroupManager().deletePersonGroupBeansByParent(idOfPersonGroup);
    }
    //8-3
    /**
     * 返回外键(fl_person_group.parent)引用的 fl_person_group 记录
     * @param bean
     * @see {@link IPersonGroupManager#getReferencedByParent(PersonGroupBean)}
     */
    protected PersonGroupBean daoGetReferencedByParentOnPersonGroup(PersonGroupBean bean){
        return getPersonGroupManager().getReferencedByParent(bean);
    }
    //8-4
    /**
     * 设置外键fl_person_group(parent)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPersonGroupManager#setReferencedByParent(PersonGroupBean,PersonGroupBean)}
     */
    protected PersonGroupBean daoSetReferencedByParentOnPersonGroup(PersonGroupBean bean,PersonGroupBean beanToSet){
        return getPersonGroupManager().setReferencedByParent(bean,beanToSet);
    }
    //9
    /**
     * 返回(idOfPersonGroup))指定的fl_person_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @see IPersonGroupManager#listOfParent(Integer)
     */
    protected java.util.List<PersonGroupBean> daoListOfParentForPersonGroup(Integer idOfPersonGroup){
        return getPersonGroupManager().listOfParent(idOfPersonGroup);
    }
    //9-2
    /**
     * 返回{@code personGroupBean}指定的fl_person_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @see IPersonGroupManager#listOfParent(PersonGroupBean)
     */
    protected java.util.List<PersonGroupBean> daoListOfParentForPersonGroup(PersonGroupBean personGroupBean){
        return getPersonGroupManager().listOfParent(personGroupBean);
    }
    //10
    /** 
     * 如果没有默认组则向 fl_person_group 表中增加默认组,失败则抛出异常 
     * 
     * @throws IllegalStateException 创建失败
     */
    protected void daoSaveDefaultPersonGroupIfAbsent(){
        if(!daoExistsPersonGroup(DEFAULT_GROUP_ID)){
            try{
                PersonGroupBean bean = new PersonGroupBean(DEFAULT_GROUP_ID);
                bean.setName(DEFAULT_GROUP_NAME);
                daoSavePersonGroup(bean);
            }catch(RuntimeDaoException e){
                // do nothing
            }
            if(!daoExistsPersonGroup(DEFAULT_GROUP_ID)){
                throw new IllegalStateException("can't create default group for person_group"); 
            }
        }
    }
    //11
    /**
     * 检查{@link PersonBean}的'group_id'字段是否为默认组{@link CommonConstant#DEFAULT_GROUP_ID},
     * 如果是,且默认组记录不存在则创建默认组
     * @return {@code personBean}
     * @see #daoSaveDefaultPersonGroupIfAbsent()
     */
    protected PersonBean daoCheckGroup(PersonBean personBean){
        if(null != personBean && Objects.equal(personBean.getGroupId(), DEFAULT_GROUP_ID)){
            daoSaveDefaultPersonGroupIfAbsent();
        }
        return personBean;
    }
    //14
    /** 
     * 参见 {@link IPersonGroupManager#save(PersonGroupBean)}
     */
    protected PersonGroupBean daoSavePersonGroup(PersonGroupBean personGroupBean){
        return getPersonGroupManager().save(personGroupBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IPersonGroupManager#save(PersonGroupBean , PersonGroupBean , Collection, Collection, Collection )}
     */
    protected PersonGroupBean daoSavePersonGroup(PersonGroupBean personGroupBean
        , PersonGroupBean refPersongroupByParent 
        , Collection<PermitBean> impPermitByPersonGroupId 
        , Collection<PersonBean> impPersonByGroupId 
        , Collection<PersonGroupBean> impPersongroupByParent ){
        return getPersonGroupManager().save(personGroupBean
            , refPersongroupByParent 
            , impPermitByPersonGroupId 
            , impPersonByGroupId 
            , impPersongroupByParent );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSavePersonGroup(PersonGroupBean)
     */
    protected Collection<PersonGroupBean> daoSavePersonGroups(Collection<PersonGroupBean> beans){
        if(null != beans){
            for(PersonGroupBean bean : beans){
                daoSavePersonGroup(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSavePersonGroup(Collection)}的事务化版本
     */
    protected Collection<PersonGroupBean> daoSavePersonGroupsAsTransaction(final Collection<PersonGroupBean> beans){
        return daoRunAsTransaction(new Callable<Collection<PersonGroupBean>>(){      
            @Override
            public Collection<PersonGroupBean> call() throws Exception {
                return daoSavePersonGroups(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_person_group 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IPersonGroupManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<PersonGroupBean> daoLoadPersonGroupByWhere(String where,int startRow, int numRows){
        return getPersonGroupManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_person_group 表的所有记录
     * @see {@link IPersonGroupManager#loadAllAsList()}
     */
    protected List<PersonGroupBean> daoLoadPersonGroupAll(){
        return getPersonGroupManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person_group 记录总数
     * @see {@link IPersonGroupManager#Where(String)}
     */
    protected int daoCountPersonGroupByWhere(String where){
        return getPersonGroupManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadPersonGroupByWhere(String,int,int)
     */
    protected List<Integer> daoLoadPersonGroupIdByWhere(String where){
        return daoToPrimaryKeyListFromPersonGroups(daoLoadPersonGroupByWhere(where,1,-1));
    }



    //////////// FL_FACE /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 主键 
     * @see {@link IFaceManager#loadByPrimaryKey(Integer)}
     */
    protected FaceBean daoGetFace(Integer id){
        return getFaceManager().loadByPrimaryKey(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 FaceBean 列表,没有查到记录的返回{@link FaceBean#NULL}
     * @see {@link IFaceManager#loadByPrimaryKey(Collection)}
     * @see FaceBean#replaceNull(List)
     */
    protected List<FaceBean> daoGetFaces(Collection<Integer> idCollection){
        return FaceBean.replaceNull((getFaceManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IFaceManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeleteFacesByPrimaryKey(Collection<Integer> idCollection){
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeleteFace(id);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link FaceBean}
     * @param {@link FaceBean} collection
     * @return primary key list 
     */
    protected List<Integer> daoToPrimaryKeyListFromFaces(Collection<FaceBean> beans){
        return getFaceManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : FaceBean to fl_face.id */ 
    protected final Function<FaceBean,Integer> daoCastFaceToPk = new Function<FaceBean,Integer>(){
            @Override
            public Integer apply(FaceBean input) {
                return null == input ? null : input.getId();
            }};
    //3-8
    /** transformer : fl_face.id to FaceBean */ 
    protected final Function<Integer,FaceBean> daoCastFaceFromPk = new Function<Integer,FaceBean>(){
            @Override
            public FaceBean apply(Integer input) {
                return daoGetFace(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 主键 
     * @see {@link IFaceManager#existsPrimaryKey(Integer)}
     */
    protected boolean daoExistsFace(Integer id){
        return getFaceManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IFaceManager#existsPrimaryKey(FaceBean)}
     */
    protected boolean daoExistsFace(FaceBean bean){
        return getFaceManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 主键  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IFaceManager#deleteByPrimaryKey(Integer)}
     */
    protected int daoDeleteFace(Integer id){
        return getFaceManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteFace(Integer)
     */
    protected int daoDeleteFace(FaceBean bean){
        return null == bean ? 0 : daoDeleteFace(bean.getId());
    }
    //6
    /**
     * 删除{@code faceBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteFace(Integer)
     */
    protected int daoDeleteFaces(Collection<FaceBean> beans){
        int count =0;
        if(null != beans){        
            for(FaceBean bean:beans){
                if(null != bean){
                    count += daoDeleteFace(bean.getId());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected FaceBean daoCheckDuplicate(FaceBean faceBean)throws DuplicateReordException{
        try{
            return getFaceManager().checkDuplicate(faceBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param idOfFace 主键 
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code idOfFace} 
     */
    protected Integer daoCheckDuplicateFace(Integer idOfFace)throws DuplicateReordException{
        if(getFaceManager().existsPrimaryKey(idOfFace)){
            throw new DuplicateReordException();
        }
        return idOfFace;
    }
    //8
    /**
     * 返回外键(fl_log.compare_face)引用指定记录(fl_face.id)的所有{@code fl_log}记录
     * 
     * @param idOfFace 主键 
     * @see {@link IFaceManager#getLogBeansByCompareFaceAsList(Integer)}
     */
    protected List<LogBean> daoGetLogBeansByCompareFaceOnFace(Integer idOfFace){
        return getFaceManager().getLogBeansByCompareFaceAsList(idOfFace);
    }
    //8-2
    /**
     * 删除外键(idOfFace))引用指定记录(fl_face.id)的所有{@code fl_log}记录
     * 
     * @param idOfFace 主键 
     * @see {@link IFaceManager#deleteLogBeansByCompareFace(Integer)}
     */
    protected int daoDeleteLogBeansByCompareFaceOnFace(Integer idOfFace){
        return getFaceManager().deleteLogBeansByCompareFace(idOfFace);
    }
    //8-3
    /**
     * 返回外键(fl_face.feature_md5)引用的 fl_feature 记录
     * @param bean
     * @see {@link IFaceManager#getReferencedByFeatureMd5(FaceBean)}
     */
    protected FeatureBean daoGetReferencedByFeatureMd5OnFace(FaceBean bean){
        return getFaceManager().getReferencedByFeatureMd5(bean);
    }
    //8-4
    /**
     * 设置外键fl_face(feature_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IFaceManager#setReferencedByFeatureMd5(FaceBean,FeatureBean)}
     */
    protected FeatureBean daoSetReferencedByFeatureMd5OnFace(FaceBean bean,FeatureBean beanToSet){
        return getFaceManager().setReferencedByFeatureMd5(bean,beanToSet);
    }
    //8-6
    /** transformer : FaceBean to fl_face.feature_md5 */
    protected final Function<FaceBean,String> daoCastFaceToFeatureMd5 = new Function<FaceBean,String>(){
            @Override
            public String apply(FaceBean input) {
                return null == input ? null : input.getFeatureMd5();
            }};
    //8-3
    /**
     * 返回外键(fl_face.image_md5)引用的 fl_image 记录
     * @param bean
     * @see {@link IFaceManager#getReferencedByImageMd5(FaceBean)}
     */
    protected ImageBean daoGetReferencedByImageMd5OnFace(FaceBean bean){
        return getFaceManager().getReferencedByImageMd5(bean);
    }
    //8-4
    /**
     * 设置外键fl_face(image_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IFaceManager#setReferencedByImageMd5(FaceBean,ImageBean)}
     */
    protected ImageBean daoSetReferencedByImageMd5OnFace(FaceBean bean,ImageBean beanToSet){
        return getFaceManager().setReferencedByImageMd5(bean,beanToSet);
    }
    //8-6
    /** transformer : FaceBean to fl_face.image_md5 */
    protected final Function<FaceBean,String> daoCastFaceToImageMd5 = new Function<FaceBean,String>(){
            @Override
            public String apply(FaceBean input) {
                return null == input ? null : input.getImageMd5();
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_face 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FaceBean#isNew()}返回{@code false},则抛出异常
     * @param faceBean 要添加的新记录
     * @see {@link IFaceManager#save(FaceBean)}
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code faceBean.isNew()} is {@code false}
     */
    protected FaceBean daoAddFace(FaceBean faceBean)throws DuplicateReordException{
        return getFaceManager().save(daoCheckDuplicate(faceBean));
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_face 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link FaceBean#isNew()}返回{@code false},则抛出异常
     * see also {@link IFaceManager#save(FaceBean , FeatureBean, ImageBean , Collection )}<br>
     * @see {@link IFaceManager#checkDuplicate(FaceBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code faceBean.isNew()} is {@code false}
     */
    protected FaceBean daoAddFace(FaceBean faceBean
        , FeatureBean refFeatureByFeatureMd5 
        , ImageBean refImageByImageMd5 
        , Collection<LogBean> impLogByCompareFace )throws DuplicateReordException{
        checkArgument(null == faceBean || faceBean.isNew(),"can be add,delete,but modify record for fl_face,so the _isNew field must be true");
        daoCheckDuplicate(faceBean);
        return getFaceManager().save(faceBean
            , refFeatureByFeatureMd5 
            , refImageByImageMd5 
            , impLogByCompareFace );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddFace(FaceBean)
     */
    protected Collection<FaceBean> daoAddFaces(Collection<FaceBean> beans)throws DuplicateReordException{
        if(null != beans){
            for(FaceBean bean : beans){
                daoAddFace(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddFace(Collection)}的事务化版本
     */
    protected Collection<FaceBean> daoAddFacesAsTransaction(final Collection<FaceBean> beans)throws DuplicateReordException{
        return daoRunAsTransaction(new Callable<Collection<FaceBean>>(){      
            @Override
            public Collection<FaceBean> call() throws Exception {
                return daoAddFaces(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_face 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IFaceManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<FaceBean> daoLoadFaceByWhere(String where,int startRow, int numRows){
        return getFaceManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_face 表的所有记录
     * @see {@link IFaceManager#loadAllAsList()}
     */
    protected List<FaceBean> daoLoadFaceAll(){
        return getFaceManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_face 记录总数
     * @see {@link IFaceManager#Where(String)}
     */
    protected int daoCountFaceByWhere(String where){
        return getFaceManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadFaceByWhere(String,int,int)
     */
    protected List<Integer> daoLoadFaceIdByWhere(String where){
        return daoToPrimaryKeyListFromFaces(daoLoadFaceByWhere(where,1,-1));
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_face.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadFaceByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<FaceBean> daoLoadFaceByCreateTime(Date timestamp,int startRow, int numRows){
        return daoLoadFaceByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadFaceByCreateTime(Date,int,int)} */
    protected List<FaceBean> daoLoadFaceByCreateTime(Date timestamp){
        return daoLoadFaceByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_face.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountFaceByWhere(String)
     */
    protected int daoCountFaceByCreateTime(Date timestamp){
        return daoCountFaceByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_face.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #daoLoadFaceIdByWhere(String)} 
     */
    protected List<Integer> daoLoadFaceIdByCreateTime(Date timestamp){
        return daoLoadFaceIdByWhere(makeWhere(timestamp,"create_time"));
    }



    //////////// FL_FEATURE /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,特征码md5校验码 
     * @see {@link IFeatureManager#loadByPrimaryKey(String)}
     */
    protected FeatureBean daoGetFeature(String md5){
        return getFeatureManager().loadByPrimaryKey(md5);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 FeatureBean 列表,没有查到记录的返回{@link FeatureBean#NULL}
     * @see {@link IFeatureManager#loadByPrimaryKey(Collection)}
     * @see FeatureBean#replaceNull(List)
     */
    protected List<FeatureBean> daoGetFeatures(Collection<String> md5Collection){
        return FeatureBean.replaceNull((getFeatureManager().loadByPrimaryKey(md5Collection)));
    }
    //3  
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IFeatureManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeleteFeaturesByPrimaryKey(Collection<String> md5Collection){
        int count =0;
        if(null != md5Collection){
            for(String md5:md5Collection){
                count += daoDeleteFeature(md5);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link FeatureBean}
     * @param {@link FeatureBean} collection
     * @return primary key list 
     */
    protected List<String> daoToPrimaryKeyListFromFeatures(Collection<FeatureBean> beans){
        return getFeatureManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : FeatureBean to fl_feature.md5 */ 
    protected final Function<FeatureBean,String> daoCastFeatureToPk = new Function<FeatureBean,String>(){
            @Override
            public String apply(FeatureBean input) {
                return null == input ? null : input.getMd5();
            }};
    //3-8
    /** transformer : fl_feature.md5 to FeatureBean */ 
    protected final Function<String,FeatureBean> daoCastFeatureFromPk = new Function<String,FeatureBean>(){
            @Override
            public FeatureBean apply(String input) {
                return daoGetFeature(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,特征码md5校验码 
     * @see {@link IFeatureManager#existsPrimaryKey(String)}
     */
    protected boolean daoExistsFeature(String md5){
        return getFeatureManager().existsPrimaryKey(md5);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IFeatureManager#existsPrimaryKey(FeatureBean)}
     */
    protected boolean daoExistsFeature(FeatureBean bean){
        return getFeatureManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,特征码md5校验码  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IFeatureManager#deleteByPrimaryKey(String)}
     */
    protected int daoDeleteFeature(String md5){
        return getFeatureManager().deleteByPrimaryKey(md5);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteFeature(String)
     */
    protected int daoDeleteFeature(FeatureBean bean){
        return null == bean ? 0 : daoDeleteFeature(bean.getMd5());
    }
    //6
    /**
     * 删除{@code featureBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteFeature(String)
     */
    protected int daoDeleteFeatures(Collection<FeatureBean> beans){
        int count =0;
        if(null != beans){        
            for(FeatureBean bean:beans){
                if(null != bean){
                    count += daoDeleteFeature(bean.getMd5());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected FeatureBean daoCheckDuplicate(FeatureBean featureBean)throws DuplicateReordException{
        try{
            return getFeatureManager().checkDuplicate(featureBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code md5OfFeature} 
     */
    protected String daoCheckDuplicateFeature(String md5OfFeature)throws DuplicateReordException{
        if(getFeatureManager().existsPrimaryKey(md5OfFeature)){
            throw new DuplicateReordException();
        }
        return md5OfFeature;
    }
    //8
    /**
     * 返回外键(fl_face.feature_md5)引用指定记录(fl_feature.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#getFaceBeansByFeatureMd5AsList(String)}
     */
    protected List<FaceBean> daoGetFaceBeansByFeatureMd5OnFeature(String md5OfFeature){
        return getFeatureManager().getFaceBeansByFeatureMd5AsList(md5OfFeature);
    }
    //8-2
    /**
     * 删除外键(md5OfFeature))引用指定记录(fl_feature.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#deleteFaceBeansByFeatureMd5(String)}
     */
    protected int daoDeleteFaceBeansByFeatureMd5OnFeature(String md5OfFeature){
        return getFeatureManager().deleteFaceBeansByFeatureMd5(md5OfFeature);
    }
    //8
    /**
     * 返回外键(fl_log.verify_feature)引用指定记录(fl_feature.md5)的所有{@code fl_log}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#getLogBeansByVerifyFeatureAsList(String)}
     */
    protected List<LogBean> daoGetLogBeansByVerifyFeatureOnFeature(String md5OfFeature){
        return getFeatureManager().getLogBeansByVerifyFeatureAsList(md5OfFeature);
    }
    //8-2
    /**
     * 删除外键(md5OfFeature))引用指定记录(fl_feature.md5)的所有{@code fl_log}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see {@link IFeatureManager#deleteLogBeansByVerifyFeature(String)}
     */
    protected int daoDeleteLogBeansByVerifyFeatureOnFeature(String md5OfFeature){
        return getFeatureManager().deleteLogBeansByVerifyFeature(md5OfFeature);
    }
    //8-3
    /**
     * 返回外键(fl_feature.person_id)引用的 fl_person 记录
     * @param bean
     * @see {@link IFeatureManager#getReferencedByPersonId(FeatureBean)}
     */
    protected PersonBean daoGetReferencedByPersonIdOnFeature(FeatureBean bean){
        return getFeatureManager().getReferencedByPersonId(bean);
    }
    //8-4
    /**
     * 设置外键fl_feature(person_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IFeatureManager#setReferencedByPersonId(FeatureBean,PersonBean)}
     */
    protected PersonBean daoSetReferencedByPersonIdOnFeature(FeatureBean bean,PersonBean beanToSet){
        return getFeatureManager().setReferencedByPersonId(bean,beanToSet);
    }
    //8-6
    /** transformer : FeatureBean to fl_feature.person_id */
    protected final Function<FeatureBean,Integer> daoCastFeatureToPersonId = new Function<FeatureBean,Integer>(){
            @Override
            public Integer apply(FeatureBean input) {
                return null == input ? null : input.getPersonId();
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_feature 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FeatureBean#isNew()}返回{@code false},则抛出异常
     * @param featureBean 要添加的新记录
     * @see {@link IFeatureManager#save(FeatureBean)}
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code featureBean.isNew()} is {@code false}
     */
    protected FeatureBean daoAddFeature(FeatureBean featureBean)throws DuplicateReordException{
        return getFeatureManager().save(daoCheckDuplicate(featureBean));
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_feature 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link FeatureBean#isNew()}返回{@code false},则抛出异常
     * see also {@link IFeatureManager#save(FeatureBean , PersonBean , Collection, Collection )}<br>
     * @see {@link IFeatureManager#checkDuplicate(FeatureBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code featureBean.isNew()} is {@code false}
     */
    protected FeatureBean daoAddFeature(FeatureBean featureBean
        , PersonBean refPersonByPersonId 
        , Collection<FaceBean> impFaceByFeatureMd5 
        , Collection<LogBean> impLogByVerifyFeature )throws DuplicateReordException{
        checkArgument(null == featureBean || featureBean.isNew(),"can be add,delete,but modify record for fl_feature,so the _isNew field must be true");
        daoCheckDuplicate(featureBean);
        return getFeatureManager().save(featureBean
            , refPersonByPersonId 
            , impFaceByFeatureMd5 
            , impLogByVerifyFeature );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddFeature(FeatureBean)
     */
    protected Collection<FeatureBean> daoAddFeatures(Collection<FeatureBean> beans)throws DuplicateReordException{
        if(null != beans){
            for(FeatureBean bean : beans){
                daoAddFeature(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddFeature(Collection)}的事务化版本
     */
    protected Collection<FeatureBean> daoAddFeaturesAsTransaction(final Collection<FeatureBean> beans)throws DuplicateReordException{
        return daoRunAsTransaction(new Callable<Collection<FeatureBean>>(){      
            @Override
            public Collection<FeatureBean> call() throws Exception {
                return daoAddFeatures(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_feature 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IFeatureManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<FeatureBean> daoLoadFeatureByWhere(String where,int startRow, int numRows){
        return getFeatureManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_feature 表的所有记录
     * @see {@link IFeatureManager#loadAllAsList()}
     */
    protected List<FeatureBean> daoLoadFeatureAll(){
        return getFeatureManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_feature 记录总数
     * @see {@link IFeatureManager#Where(String)}
     */
    protected int daoCountFeatureByWhere(String where){
        return getFeatureManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadFeatureByWhere(String,int,int)
     */
    protected List<String> daoLoadFeatureMd5ByWhere(String where){
        return daoToPrimaryKeyListFromFeatures(daoLoadFeatureByWhere(where,1,-1));
    }

    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadFeatureByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<FeatureBean> daoLoadFeatureByUpdateTime(Date timestamp,int startRow, int numRows){
        return daoLoadFeatureByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadFeatureByUpdateTime(Date,int,int)} */
    protected List<FeatureBean> daoLoadFeatureByUpdateTime(Date timestamp){
        return daoLoadFeatureByUpdateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_feature.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountFeatureByWhere(String)
     */
    protected int daoCountFeatureByUpdateTime(Date timestamp){
        return daoCountFeatureByWhere(makeWhere(timestamp,"update_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #daoLoadFeatureMd5ByWhere(String)} 
     */
    protected List<String> daoLoadFeatureMd5ByUpdateTime(Date timestamp){
        return daoLoadFeatureMd5ByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_IMAGE /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#loadByPrimaryKey(String)}
     */
    protected ImageBean daoGetImage(String md5){
        return getImageManager().loadByPrimaryKey(md5);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 ImageBean 列表,没有查到记录的返回{@link ImageBean#NULL}
     * @see {@link IImageManager#loadByPrimaryKey(Collection)}
     * @see ImageBean#replaceNull(List)
     */
    protected List<ImageBean> daoGetImages(Collection<String> md5Collection){
        return ImageBean.replaceNull((getImageManager().loadByPrimaryKey(md5Collection)));
    }
    //3  
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IImageManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeleteImagesByPrimaryKey(Collection<String> md5Collection){
        int count =0;
        if(null != md5Collection){
            for(String md5:md5Collection){
                count += daoDeleteImage(md5);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link ImageBean}
     * @param {@link ImageBean} collection
     * @return primary key list 
     */
    protected List<String> daoToPrimaryKeyListFromImages(Collection<ImageBean> beans){
        return getImageManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : ImageBean to fl_image.md5 */ 
    protected final Function<ImageBean,String> daoCastImageToPk = new Function<ImageBean,String>(){
            @Override
            public String apply(ImageBean input) {
                return null == input ? null : input.getMd5();
            }};
    //3-8
    /** transformer : fl_image.md5 to ImageBean */ 
    protected final Function<String,ImageBean> daoCastImageFromPk = new Function<String,ImageBean>(){
            @Override
            public ImageBean apply(String input) {
                return daoGetImage(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#existsPrimaryKey(String)}
     */
    protected boolean daoExistsImage(String md5){
        return getImageManager().existsPrimaryKey(md5);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IImageManager#existsPrimaryKey(ImageBean)}
     */
    protected boolean daoExistsImage(ImageBean bean){
        return getImageManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IImageManager#deleteByPrimaryKey(String)}
     */
    protected int daoDeleteImage(String md5){
        return getImageManager().deleteByPrimaryKey(md5);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteImage(String)
     */
    protected int daoDeleteImage(ImageBean bean){
        return null == bean ? 0 : daoDeleteImage(bean.getMd5());
    }
    //6
    /**
     * 删除{@code imageBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteImage(String)
     */
    protected int daoDeleteImages(Collection<ImageBean> beans){
        int count =0;
        if(null != beans){        
            for(ImageBean bean:beans){
                if(null != bean){
                    count += daoDeleteImage(bean.getMd5());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected ImageBean daoCheckDuplicate(ImageBean imageBean)throws DuplicateReordException{
        try{
            return getImageManager().checkDuplicate(imageBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code md5OfImage} 
     */
    protected String daoCheckDuplicateImage(String md5OfImage)throws DuplicateReordException{
        if(getImageManager().existsPrimaryKey(md5OfImage)){
            throw new DuplicateReordException();
        }
        return md5OfImage;
    }
    //8
    /**
     * 返回外键(fl_face.image_md5)引用指定记录(fl_image.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#getFaceBeansByImageMd5AsList(String)}
     */
    protected List<FaceBean> daoGetFaceBeansByImageMd5OnImage(String md5OfImage){
        return getImageManager().getFaceBeansByImageMd5AsList(md5OfImage);
    }
    //8-2
    /**
     * 删除外键(md5OfImage))引用指定记录(fl_image.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#deleteFaceBeansByImageMd5(String)}
     */
    protected int daoDeleteFaceBeansByImageMd5OnImage(String md5OfImage){
        return getImageManager().deleteFaceBeansByImageMd5(md5OfImage);
    }
    //8
    /**
     * 返回外键(fl_person.image_md5)引用指定记录(fl_image.md5)的所有{@code fl_person}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#getPersonBeansByImageMd5AsList(String)}
     */
    protected List<PersonBean> daoGetPersonBeansByImageMd5OnImage(String md5OfImage){
        return getImageManager().getPersonBeansByImageMd5AsList(md5OfImage);
    }
    //8-2
    /**
     * 删除外键(md5OfImage))引用指定记录(fl_image.md5)的所有{@code fl_person}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see {@link IImageManager#deletePersonBeansByImageMd5(String)}
     */
    protected int daoDeletePersonBeansByImageMd5OnImage(String md5OfImage){
        return getImageManager().deletePersonBeansByImageMd5(md5OfImage);
    }
    //8-3
    /**
     * 返回外键(fl_image.device_id)引用的 fl_device 记录
     * @param bean
     * @see {@link IImageManager#getReferencedByDeviceId(ImageBean)}
     */
    protected DeviceBean daoGetReferencedByDeviceIdOnImage(ImageBean bean){
        return getImageManager().getReferencedByDeviceId(bean);
    }
    //8-4
    /**
     * 设置外键fl_image(device_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IImageManager#setReferencedByDeviceId(ImageBean,DeviceBean)}
     */
    protected DeviceBean daoSetReferencedByDeviceIdOnImage(ImageBean bean,DeviceBean beanToSet){
        return getImageManager().setReferencedByDeviceId(bean,beanToSet);
    }
    //8-6
    /** transformer : ImageBean to fl_image.device_id */
    protected final Function<ImageBean,Integer> daoCastImageToDeviceId = new Function<ImageBean,Integer>(){
            @Override
            public Integer apply(ImageBean input) {
                return null == input ? null : input.getDeviceId();
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_image 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link ImageBean#isNew()}返回{@code false},则抛出异常
     * @param imageBean 要添加的新记录
     * @see {@link IImageManager#save(ImageBean)}
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code imageBean.isNew()} is {@code false}
     */
    protected ImageBean daoAddImage(ImageBean imageBean)throws DuplicateReordException{
        return getImageManager().save(daoCheckDuplicate(imageBean));
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_image 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link ImageBean#isNew()}返回{@code false},则抛出异常
     * see also {@link IImageManager#save(ImageBean , DeviceBean , Collection, Collection )}<br>
     * @see {@link IImageManager#checkDuplicate(ImageBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code imageBean.isNew()} is {@code false}
     */
    protected ImageBean daoAddImage(ImageBean imageBean
        , DeviceBean refDeviceByDeviceId 
        , Collection<FaceBean> impFaceByImageMd5 
        , Collection<PersonBean> impPersonByImageMd5 )throws DuplicateReordException{
        checkArgument(null == imageBean || imageBean.isNew(),"can be add,delete,but modify record for fl_image,so the _isNew field must be true");
        daoCheckDuplicate(imageBean);
        return getImageManager().save(imageBean
            , refDeviceByDeviceId 
            , impFaceByImageMd5 
            , impPersonByImageMd5 );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddImage(ImageBean)
     */
    protected Collection<ImageBean> daoAddImages(Collection<ImageBean> beans)throws DuplicateReordException{
        if(null != beans){
            for(ImageBean bean : beans){
                daoAddImage(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddImage(Collection)}的事务化版本
     */
    protected Collection<ImageBean> daoAddImagesAsTransaction(final Collection<ImageBean> beans)throws DuplicateReordException{
        return daoRunAsTransaction(new Callable<Collection<ImageBean>>(){      
            @Override
            public Collection<ImageBean> call() throws Exception {
                return daoAddImages(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_image 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IImageManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<ImageBean> daoLoadImageByWhere(String where,int startRow, int numRows){
        return getImageManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_image 表的所有记录
     * @see {@link IImageManager#loadAllAsList()}
     */
    protected List<ImageBean> daoLoadImageAll(){
        return getImageManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_image 记录总数
     * @see {@link IImageManager#Where(String)}
     */
    protected int daoCountImageByWhere(String where){
        return getImageManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadImageByWhere(String,int,int)
     */
    protected List<String> daoLoadImageMd5ByWhere(String where){
        return daoToPrimaryKeyListFromImages(daoLoadImageByWhere(where,1,-1));
    }



    //////////// FL_LOG /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param id 日志id 
     * @see {@link ILogManager#loadByPrimaryKey(Integer)}
     */
    protected LogBean daoGetLog(Integer id){
        return getLogManager().loadByPrimaryKey(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 LogBean 列表,没有查到记录的返回{@link LogBean#NULL}
     * @see {@link ILogManager#loadByPrimaryKey(Collection)}
     * @see LogBean#replaceNull(List)
     */
    protected List<LogBean> daoGetLogs(Collection<Integer> idCollection){
        return LogBean.replaceNull((getLogManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link ILogManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeleteLogsByPrimaryKey(Collection<Integer> idCollection){
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeleteLog(id);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link LogBean}
     * @param {@link LogBean} collection
     * @return primary key list 
     */
    protected List<Integer> daoToPrimaryKeyListFromLogs(Collection<LogBean> beans){
        return getLogManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : LogBean to fl_log.id */ 
    protected final Function<LogBean,Integer> daoCastLogToPk = new Function<LogBean,Integer>(){
            @Override
            public Integer apply(LogBean input) {
                return null == input ? null : input.getId();
            }};
    //3-8
    /** transformer : fl_log.id to LogBean */ 
    protected final Function<Integer,LogBean> daoCastLogFromPk = new Function<Integer,LogBean>(){
            @Override
            public LogBean apply(Integer input) {
                return daoGetLog(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 日志id 
     * @see {@link ILogManager#existsPrimaryKey(Integer)}
     */
    protected boolean daoExistsLog(Integer id){
        return getLogManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link ILogManager#existsPrimaryKey(LogBean)}
     */
    protected boolean daoExistsLog(LogBean bean){
        return getLogManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 日志id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link ILogManager#deleteByPrimaryKey(Integer)}
     */
    protected int daoDeleteLog(Integer id){
        return getLogManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteLog(Integer)
     */
    protected int daoDeleteLog(LogBean bean){
        return null == bean ? 0 : daoDeleteLog(bean.getId());
    }
    //6
    /**
     * 删除{@code logBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteLog(Integer)
     */
    protected int daoDeleteLogs(Collection<LogBean> beans){
        int count =0;
        if(null != beans){        
            for(LogBean bean:beans){
                if(null != bean){
                    count += daoDeleteLog(bean.getId());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected LogBean daoCheckDuplicate(LogBean logBean)throws DuplicateReordException{
        try{
            return getLogManager().checkDuplicate(logBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param idOfLog 日志id 
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code idOfLog} 
     */
    protected Integer daoCheckDuplicateLog(Integer idOfLog)throws DuplicateReordException{
        if(getLogManager().existsPrimaryKey(idOfLog)){
            throw new DuplicateReordException();
        }
        return idOfLog;
    }
    //8-3
    /**
     * 返回外键(fl_log.device_id)引用的 fl_device 记录
     * @param bean
     * @see {@link ILogManager#getReferencedByDeviceId(LogBean)}
     */
    protected DeviceBean daoGetReferencedByDeviceIdOnLog(LogBean bean){
        return getLogManager().getReferencedByDeviceId(bean);
    }
    //8-4
    /**
     * 设置外键fl_log(device_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link ILogManager#setReferencedByDeviceId(LogBean,DeviceBean)}
     */
    protected DeviceBean daoSetReferencedByDeviceIdOnLog(LogBean bean,DeviceBean beanToSet){
        return getLogManager().setReferencedByDeviceId(bean,beanToSet);
    }
    //8-6
    /** transformer : LogBean to fl_log.device_id */
    protected final Function<LogBean,Integer> daoCastLogToDeviceId = new Function<LogBean,Integer>(){
            @Override
            public Integer apply(LogBean input) {
                return null == input ? null : input.getDeviceId();
            }};
    //8-3
    /**
     * 返回外键(fl_log.compare_face)引用的 fl_face 记录
     * @param bean
     * @see {@link ILogManager#getReferencedByCompareFace(LogBean)}
     */
    protected FaceBean daoGetReferencedByCompareFaceOnLog(LogBean bean){
        return getLogManager().getReferencedByCompareFace(bean);
    }
    //8-4
    /**
     * 设置外键fl_log(compare_face)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link ILogManager#setReferencedByCompareFace(LogBean,FaceBean)}
     */
    protected FaceBean daoSetReferencedByCompareFaceOnLog(LogBean bean,FaceBean beanToSet){
        return getLogManager().setReferencedByCompareFace(bean,beanToSet);
    }
    //8-6
    /** transformer : LogBean to fl_log.compare_face */
    protected final Function<LogBean,Integer> daoCastLogToCompareFace = new Function<LogBean,Integer>(){
            @Override
            public Integer apply(LogBean input) {
                return null == input ? null : input.getCompareFace();
            }};
    //8-3
    /**
     * 返回外键(fl_log.verify_feature)引用的 fl_feature 记录
     * @param bean
     * @see {@link ILogManager#getReferencedByVerifyFeature(LogBean)}
     */
    protected FeatureBean daoGetReferencedByVerifyFeatureOnLog(LogBean bean){
        return getLogManager().getReferencedByVerifyFeature(bean);
    }
    //8-4
    /**
     * 设置外键fl_log(verify_feature)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link ILogManager#setReferencedByVerifyFeature(LogBean,FeatureBean)}
     */
    protected FeatureBean daoSetReferencedByVerifyFeatureOnLog(LogBean bean,FeatureBean beanToSet){
        return getLogManager().setReferencedByVerifyFeature(bean,beanToSet);
    }
    //8-6
    /** transformer : LogBean to fl_log.verify_feature */
    protected final Function<LogBean,String> daoCastLogToVerifyFeature = new Function<LogBean,String>(){
            @Override
            public String apply(LogBean input) {
                return null == input ? null : input.getVerifyFeature();
            }};
    //8-3
    /**
     * 返回外键(fl_log.person_id)引用的 fl_person 记录
     * @param bean
     * @see {@link ILogManager#getReferencedByPersonId(LogBean)}
     */
    protected PersonBean daoGetReferencedByPersonIdOnLog(LogBean bean){
        return getLogManager().getReferencedByPersonId(bean);
    }
    //8-4
    /**
     * 设置外键fl_log(person_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link ILogManager#setReferencedByPersonId(LogBean,PersonBean)}
     */
    protected PersonBean daoSetReferencedByPersonIdOnLog(LogBean bean,PersonBean beanToSet){
        return getLogManager().setReferencedByPersonId(bean,beanToSet);
    }
    //8-6
    /** transformer : LogBean to fl_log.person_id */
    protected final Function<LogBean,Integer> daoCastLogToPersonId = new Function<LogBean,Integer>(){
            @Override
            public Integer apply(LogBean input) {
                return null == input ? null : input.getPersonId();
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_log 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link LogBean#isNew()}返回{@code false},则抛出异常
     * @param logBean 要添加的新记录
     * @see {@link ILogManager#save(LogBean)}
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code logBean.isNew()} is {@code false}
     */
    protected LogBean daoAddLog(LogBean logBean)throws DuplicateReordException{
        return getLogManager().save(daoCheckDuplicate(logBean));
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_log 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link LogBean#isNew()}返回{@code false},则抛出异常
     * see also {@link ILogManager#save(LogBean , DeviceBean, FaceBean, FeatureBean, PersonBean  )}<br>
     * @see {@link ILogManager#checkDuplicate(LogBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code logBean.isNew()} is {@code false}
     */
    protected LogBean daoAddLog(LogBean logBean
        , DeviceBean refDeviceByDeviceId 
        , FaceBean refFaceByCompareFace 
        , FeatureBean refFeatureByVerifyFeature 
        , PersonBean refPersonByPersonId 
        )throws DuplicateReordException{
        checkArgument(null == logBean || logBean.isNew(),"can be add,delete,but modify record for fl_log,so the _isNew field must be true");
        daoCheckDuplicate(logBean);
        return getLogManager().save(logBean
            , refDeviceByDeviceId 
            , refFaceByCompareFace 
            , refFeatureByVerifyFeature 
            , refPersonByPersonId 
            );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddLog(LogBean)
     */
    protected Collection<LogBean> daoAddLogs(Collection<LogBean> beans)throws DuplicateReordException{
        if(null != beans){
            for(LogBean bean : beans){
                daoAddLog(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddLog(Collection)}的事务化版本
     */
    protected Collection<LogBean> daoAddLogsAsTransaction(final Collection<LogBean> beans)throws DuplicateReordException{
        return daoRunAsTransaction(new Callable<Collection<LogBean>>(){      
            @Override
            public Collection<LogBean> call() throws Exception {
                return daoAddLogs(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_log 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link ILogManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<LogBean> daoLoadLogByWhere(String where,int startRow, int numRows){
        return getLogManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_log 表的所有记录
     * @see {@link ILogManager#loadAllAsList()}
     */
    protected List<LogBean> daoLoadLogAll(){
        return getLogManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_log 记录总数
     * @see {@link ILogManager#Where(String)}
     */
    protected int daoCountLogByWhere(String where){
        return getLogManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadLogByWhere(String,int,int)
     */
    protected List<Integer> daoLoadLogIdByWhere(String where){
        return daoToPrimaryKeyListFromLogs(daoLoadLogByWhere(where,1,-1));
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadLogByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<LogBean> daoLoadLogByCreateTime(Date timestamp,int startRow, int numRows){
        return daoLoadLogByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadLogByCreateTime(Date,int,int)} */
    protected List<LogBean> daoLoadLogByCreateTime(Date timestamp){
        return daoLoadLogByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_log.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountLogByWhere(String)
     */
    protected int daoCountLogByCreateTime(Date timestamp){
        return daoCountLogByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_log.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #daoLoadLogIdByWhere(String)} 
     */
    protected List<Integer> daoLoadLogIdByCreateTime(Date timestamp){
        return daoLoadLogIdByWhere(makeWhere(timestamp,"create_time"));
    }


    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadLogByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<LogBean> daoLoadLogByVerifyTime(Date timestamp,int startRow, int numRows){
        return daoLoadLogByWhere(makeWhere(timestamp,"verify_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadLogByVerifyTime(Date,int,int)} */
    protected List<LogBean> daoLoadLogByVerifyTime(Date timestamp){
        return daoLoadLogByVerifyTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_log.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountLogByWhere(String)
     */
    protected int daoCountLogByVerifyTime(Date timestamp){
        return daoCountLogByWhere(makeWhere(timestamp,"verify_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_log.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see {@link #daoLoadLogIdByWhere(String)} 
     */
    protected List<Integer> daoLoadLogIdByVerifyTime(Date timestamp){
        return daoLoadLogIdByWhere(makeWhere(timestamp,"verify_time"));
    }

    //////////// FL_PERMIT /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id 
     * @see {@link IPermitManager#loadByPrimaryKey(Integer,Integer)}
     */
    protected PermitBean daoGetPermit(Integer deviceGroupId,Integer personGroupId){
        return getPermitManager().loadByPrimaryKey(deviceGroupId,personGroupId);
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id 
     * @see {@link IPermitManager#existsPrimaryKey(Integer,Integer)}
     */
    protected boolean daoExistsPermit(Integer deviceGroupId,Integer personGroupId){
        return getPermitManager().existsPrimaryKey(deviceGroupId,personGroupId);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IPermitManager#existsPrimaryKey(PermitBean)}
     */
    protected boolean daoExistsPermit(PermitBean bean){
        return getPermitManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IPermitManager#deleteByPrimaryKey(Integer,Integer)}
     */
    protected int daoDeletePermit(Integer deviceGroupId,Integer personGroupId){
        return getPermitManager().deleteByPrimaryKey(deviceGroupId,personGroupId);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeletePermit(Integer,Integer)
     */
    protected int daoDeletePermit(PermitBean bean){
        return null == bean ? 0 : daoDeletePermit(bean.getDeviceGroupId(),bean.getPersonGroupId());
    }
    //6
    /**
     * 删除{@code permitBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeletePermit(Integer,Integer)
     */
    protected int daoDeletePermits(Collection<PermitBean> beans){
        int count =0;
        if(null != beans){        
            for(PermitBean bean:beans){
                if(null != bean){
                    count += daoDeletePermit(bean.getDeviceGroupId(),bean.getPersonGroupId());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected PermitBean daoCheckDuplicate(PermitBean permitBean)throws DuplicateReordException{
        try{
            return getPermitManager().checkDuplicate(permitBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param deviceGroupIdOfPermit 外键,设备组id 
     * @param personGroupIdOfPermit 外键,人员组id 
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws DuplicateReordException if exists duplicated row
     * 
     */
    protected void daoCheckDuplicatePermit(Integer deviceGroupIdOfPermit,Integer personGroupIdOfPermit)throws DuplicateReordException{
        if(getPermitManager().existsPrimaryKey(deviceGroupIdOfPermit,personGroupIdOfPermit)){
            throw new DuplicateReordException();
        }
    }
    //8-3
    /**
     * 返回外键(fl_permit.device_group_id)引用的 fl_device_group 记录
     * @param bean
     * @see {@link IPermitManager#getReferencedByDeviceGroupId(PermitBean)}
     */
    protected DeviceGroupBean daoGetReferencedByDeviceGroupIdOnPermit(PermitBean bean){
        return getPermitManager().getReferencedByDeviceGroupId(bean);
    }
    //8-4
    /**
     * 设置外键fl_permit(device_group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPermitManager#setReferencedByDeviceGroupId(PermitBean,DeviceGroupBean)}
     */
    protected DeviceGroupBean daoSetReferencedByDeviceGroupIdOnPermit(PermitBean bean,DeviceGroupBean beanToSet){
        return getPermitManager().setReferencedByDeviceGroupId(bean,beanToSet);
    }
    //8-6
    /** transformer : PermitBean to fl_permit.device_group_id */
    protected final Function<PermitBean,Integer> daoCastPermitToDeviceGroupId = new Function<PermitBean,Integer>(){
            @Override
            public Integer apply(PermitBean input) {
                return null == input ? null : input.getDeviceGroupId();
            }};
    //8-3
    /**
     * 返回外键(fl_permit.person_group_id)引用的 fl_person_group 记录
     * @param bean
     * @see {@link IPermitManager#getReferencedByPersonGroupId(PermitBean)}
     */
    protected PersonGroupBean daoGetReferencedByPersonGroupIdOnPermit(PermitBean bean){
        return getPermitManager().getReferencedByPersonGroupId(bean);
    }
    //8-4
    /**
     * 设置外键fl_permit(person_group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see {@link IPermitManager#setReferencedByPersonGroupId(PermitBean,PersonGroupBean)}
     */
    protected PersonGroupBean daoSetReferencedByPersonGroupIdOnPermit(PermitBean bean,PersonGroupBean beanToSet){
        return getPermitManager().setReferencedByPersonGroupId(bean,beanToSet);
    }
    //8-6
    /** transformer : PermitBean to fl_permit.person_group_id */
    protected final Function<PermitBean,Integer> daoCastPermitToPersonGroupId = new Function<PermitBean,Integer>(){
            @Override
            public Integer apply(PermitBean input) {
                return null == input ? null : input.getPersonGroupId();
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_permit 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link PermitBean#isNew()}返回{@code false},则抛出异常
     * @param permitBean 要添加的新记录
     * @see {@link IPermitManager#save(PermitBean)}
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code permitBean.isNew()} is {@code false}
     */
    protected PermitBean daoAddPermit(PermitBean permitBean)throws DuplicateReordException{
        return getPermitManager().save(daoCheckDuplicate(permitBean));
    }
    //12-5
    /**
     * 创建fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>
     * 如果记录已经存在则返回已有记录,如果输入的参数为{@code null}或记录不存在则返回{@code null}
     * @param deviceGroupId 外键,设备组id
     * @param personGroupId 外键,人员组id
     * @see #daoAddPermit(DeviceGroupBean,PersonGroupBean)
     */
    protected PermitBean daoAddPermit(Integer deviceGroupId,Integer personGroupId){
        return daoAddPermit(
                    daoGetDeviceGroup(deviceGroupId),
                    daoGetPersonGroup(personGroupId));
    }
    //12-6
    /**
     * 创建fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>
     * 如果记录已经存在则返回已有记录,如果输入的参数为{@code null}或记录不存在则返回{@code null}
     */
    protected PermitBean daoAddPermit(DeviceGroupBean deviceGroupBean,PersonGroupBean personGroupBean){
        if(daoExistsDeviceGroup(deviceGroupBean) && daoExistsPersonGroup(personGroupBean)){
            PermitBean permitBean = new PermitBean(deviceGroupBean.getId(),personGroupBean.getId());
            try{
                return daoAddPermit(permitBean,deviceGroupBean,personGroupBean);
            }catch(DuplicateReordException e){
                return daoGetPermit(deviceGroupBean.getId(),personGroupBean.getId());
            }
        }
        return null; 
    }
    //12-7
    /**
     * 删除fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>
     * @return 删除成功返回0,如果记录不存在或输入的参数为{@code null}则返回0
     */
    protected int daoDeletePermit(DeviceGroupBean deviceGroupBean,PersonGroupBean personGroupBean){
        return (null == deviceGroupBean || null == personGroupBean)
            ? 0
            : daoDeletePermit(deviceGroupBean.getId(),personGroupBean.getId());
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_permit 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link PermitBean#isNew()}返回{@code false},则抛出异常
     * see also {@link IPermitManager#save(PermitBean , DeviceGroupBean, PersonGroupBean  )}<br>
     * @see {@link IPermitManager#checkDuplicate(PermitBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code permitBean.isNew()} is {@code false}
     */
    protected PermitBean daoAddPermit(PermitBean permitBean
        , DeviceGroupBean refDevicegroupByDeviceGroupId 
        , PersonGroupBean refPersongroupByPersonGroupId 
        )throws DuplicateReordException{
        checkArgument(null == permitBean || permitBean.isNew(),"can be add,delete,but modify record for fl_permit,so the _isNew field must be true");
        daoCheckDuplicate(permitBean);
        return getPermitManager().save(permitBean
            , refDevicegroupByDeviceGroupId 
            , refPersongroupByPersonGroupId 
            );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddPermit(PermitBean)
     */
    protected Collection<PermitBean> daoAddPermits(Collection<PermitBean> beans)throws DuplicateReordException{
        if(null != beans){
            for(PermitBean bean : beans){
                daoAddPermit(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddPermit(Collection)}的事务化版本
     */
    protected Collection<PermitBean> daoAddPermitsAsTransaction(final Collection<PermitBean> beans)throws DuplicateReordException{
        return daoRunAsTransaction(new Callable<Collection<PermitBean>>(){      
            @Override
            public Collection<PermitBean> call() throws Exception {
                return daoAddPermits(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_permit 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IPermitManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<PermitBean> daoLoadPermitByWhere(String where,int startRow, int numRows){
        return getPermitManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_permit 表的所有记录
     * @see {@link IPermitManager#loadAllAsList()}
     */
    protected List<PermitBean> daoLoadPermitAll(){
        return getPermitManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_permit 记录总数
     * @see {@link IPermitManager#Where(String)}
     */
    protected int daoCountPermitByWhere(String where){
        return getPermitManager().countWhere(where);
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_permit.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadPermitByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<PermitBean> daoLoadPermitByCreateTime(Date timestamp,int startRow, int numRows){
        return daoLoadPermitByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadPermitByCreateTime(Date,int,int)} */
    protected List<PermitBean> daoLoadPermitByCreateTime(Date timestamp){
        return daoLoadPermitByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_permit.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountPermitByWhere(String)
     */
    protected int daoCountPermitByCreateTime(Date timestamp){
        return daoCountPermitByWhere(makeWhere(timestamp,"create_time"));
    }



    //////////// FL_STORE /////////
    //1
    /** 
     * 根据主键从数据库读取记录
     * 
     * @param md5 主键,md5检验码 
     * @see {@link IStoreManager#loadByPrimaryKey(String)}
     */
    protected StoreBean daoGetStore(String md5){
        return getStoreManager().loadByPrimaryKey(md5);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 StoreBean 列表,没有查到记录的返回{@link StoreBean#NULL}
     * @see {@link IStoreManager#loadByPrimaryKey(Collection)}
     * @see StoreBean#replaceNull(List)
     */
    protected List<StoreBean> daoGetStores(Collection<String> md5Collection){
        return StoreBean.replaceNull((getStoreManager().loadByPrimaryKey(md5Collection)));
    }
    //3  
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see {@link IStoreManager#deleteByPrimaryKey(Collection)}
     */
    protected int daoDeleteStoresByPrimaryKey(Collection<String> md5Collection){
        int count =0;
        if(null != md5Collection){
            for(String md5:md5Collection){
                count += daoDeleteStore(md5);
            }
        }
        return count;
    }
    //3-5
    /**
     * unwrap primary key from {@link StoreBean}
     * @param {@link StoreBean} collection
     * @return primary key list 
     */
    protected List<String> daoToPrimaryKeyListFromStores(Collection<StoreBean> beans){
        return getStoreManager().toPrimaryKeyList(beans);
    }
    //3-7
    /** transformer : StoreBean to fl_store.md5 */ 
    protected final Function<StoreBean,String> daoCastStoreToPk = new Function<StoreBean,String>(){
            @Override
            public String apply(StoreBean input) {
                return null == input ? null : input.getMd5();
            }};
    //3-8
    /** transformer : fl_store.md5 to StoreBean */ 
    protected final Function<String,StoreBean> daoCastStoreFromPk = new Function<String,StoreBean>(){
            @Override
            public StoreBean apply(String input) {
                return daoGetStore(input);
            }};
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,md5检验码 
     * @see {@link IStoreManager#existsPrimaryKey(String)}
     */
    protected boolean daoExistsStore(String md5){
        return getStoreManager().existsPrimaryKey(md5);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see {@link IStoreManager#existsPrimaryKey(StoreBean)}
     */
    protected boolean daoExistsStore(StoreBean bean){
        return getStoreManager().existsPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,md5检验码  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see {@link IStoreManager#deleteByPrimaryKey(String)}
     */
    protected int daoDeleteStore(String md5){
        return getStoreManager().deleteByPrimaryKey(md5);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteStore(String)
     */
    protected int daoDeleteStore(StoreBean bean){
        return null == bean ? 0 : daoDeleteStore(bean.getMd5());
    }
    //6
    /**
     * 删除{@code storeBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteStore(String)
     */
    protected int daoDeleteStores(Collection<StoreBean> beans){
        int count =0;
        if(null != beans){        
            for(StoreBean bean:beans){
                if(null != bean){
                    count += daoDeleteStore(bean.getMd5());
                }
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see {@link IStoreManager#checkDuplicate(StoreBean)}
     * @throws DuplicateReordException if exists duplicated row
     */
    protected StoreBean daoCheckDuplicate(StoreBean storeBean)throws DuplicateReordException{
        try{
            return getStoreManager().checkDuplicate(storeBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateReordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param md5OfStore 主键,md5检验码 
     * @see {@link IStoreManager#checkDuplicate(StoreBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @return always {@code md5OfStore} 
     */
    protected String daoCheckDuplicateStore(String md5OfStore)throws DuplicateReordException{
        if(getStoreManager().existsPrimaryKey(md5OfStore)){
            throw new DuplicateReordException();
        }
        return md5OfStore;
    }
    //12
    /** 
     * 添加新记录<br>
     * fl_store 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link StoreBean#isNew()}返回{@code false},则抛出异常
     * @param storeBean 要添加的新记录
     * @see {@link IStoreManager#save(StoreBean)}
     * @see {@link IStoreManager#checkDuplicate(StoreBean)}
     * @throws DuplicateReordException if exists duplicated row
     * @throws IllegalArgumentException if {@code storeBean.isNew()} is {@code false}
     */
    protected StoreBean daoAddStore(StoreBean storeBean)throws DuplicateReordException{
        return getStoreManager().save(daoCheckDuplicate(storeBean));
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddStore(StoreBean)
     */
    protected Collection<StoreBean> daoAddStores(Collection<StoreBean> beans)throws DuplicateReordException{
        if(null != beans){
            for(StoreBean bean : beans){
                daoAddStore(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddStore(Collection)}的事务化版本
     */
    protected Collection<StoreBean> daoAddStoresAsTransaction(final Collection<StoreBean> beans)throws DuplicateReordException{
        return daoRunAsTransaction(new Callable<Collection<StoreBean>>(){      
            @Override
            public Collection<StoreBean> call() throws Exception {
                return daoAddStores(beans);
            }});
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_store 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link IStoreManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<StoreBean> daoLoadStoreByWhere(String where,int startRow, int numRows){
        return getStoreManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_store 表的所有记录
     * @see {@link IStoreManager#loadAllAsList()}
     */
    protected List<StoreBean> daoLoadStoreAll(){
        return getStoreManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_store 记录总数
     * @see {@link IStoreManager#Where(String)}
     */
    protected int daoCountStoreByWhere(String where){
        return getStoreManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadStoreByWhere(String,int,int)
     */
    protected List<String> daoLoadStoreMd5ByWhere(String where){
        return daoToPrimaryKeyListFromStores(daoLoadStoreByWhere(where,1,-1));
    }



    //////////// FL_LOG_LIGHT /////////
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_log_light 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @see {@link ILogLightManager#loadByWhereAsList(String,int[],int,int)}
     */
    protected List<LogLightBean> daoLoadLogLightByWhere(String where,int startRow, int numRows){
        return getLogLightManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //17
    /**
     * 返回 fl_log_light 表的所有记录
     * @see {@link ILogLightManager#loadAllAsList()}
     */
    protected List<LogLightBean> daoLoadLogLightAll(){
        return getLogLightManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_log_light 记录总数
     * @see {@link ILogLightManager#Where(String)}
     */
    protected int daoCountLogLightByWhere(String where){
        return getLogLightManager().countWhere(where);
    }


    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadLogLightByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<LogLightBean> daoLoadLogLightByVerifyTime(Date timestamp,int startRow, int numRows){
        return daoLoadLogLightByWhere(makeWhere(timestamp,"verify_time"),startRow,numRows);
    }
    //20
    /** 参见 {@link #daoLoadLogLightByVerifyTime(Date,int,int)} */
    protected List<LogLightBean> daoLoadLogLightByVerifyTime(Date timestamp){
        return daoLoadLogLightByVerifyTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountLogLightByWhere(String)
     */
    protected int daoCountLogLightByVerifyTime(Date timestamp){
        return daoCountLogLightByWhere(makeWhere(timestamp,"verify_time"));
    }

}
