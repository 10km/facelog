// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: base.command.adapter.java.vm
// ______________________________________________________
package net.gdface.facelog.service;

import java.net.URL;
import java.util.Map;

/**
 * 命令执行基类
 * @author guyadong
 *
 */
public class BaseCommandAdapter {
    public static enum Cmd{
        /** 设备重启 */reset,
        /** 发送消息 */message,
        /** 更新版本 */update,
        /** 自定义命令 */custom;
        @SuppressWarnings("unchecked")
        public <T> Ack<?> run(BaseCommandAdapter adapter,Map<String,Object> parameters){
            switch(this){
            case reset:{
                    Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                    try{
                        adapter.reset();
                    }catch(Exception e){
                        // 填入异常状态,设置错误信息
                        ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                    }                
                    return ack;
                }
            case message:{
                    Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                    try{
                        adapter.message((String)parameters.get("message"));
                    }catch(Exception e){
                        // 填入异常状态,设置错误信息
                        ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                    }                
                    return ack;
                }
            case update:{
                    Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                    try{
                        adapter.update((URL)parameters.get("url"),(String)parameters.get("version"));
                    }catch(Exception e){
                        // 填入异常状态,设置错误信息
                        ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                    }                
                    return ack;
                }
            case custom:{
                    Ack<Object> ack = new Ack<Object>().setStatus(Ack.Status.OK);
                    try{
                        Object res = adapter.custom((Map<String,Object>)parameters.get("parameters"));
                        // 填入返回值
                        ack.setValue(res);
                    }catch(Exception e){
                        // 填入异常状态,设置错误信息
                        ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                    }                
                    return ack;
                }
            default:
                // dead code 不会执行到这里
                throw new IllegalArgumentException();
            }
        }
    }
    /**
     * 设备重启<br>
     *
     */
    public void reset(){
    }
    /**
     * 发送消息<br>
     * @param message 发送到设备的消息
     *
     */
    public void message(String message){
    }
    /**
     * 更新版本<br>
     * @param url 更新版本的位置
     * @param version 版本号
     *
     */
    public void update(URL url,String version){
    }
    /**
     * 自定义命令<br>
     * @param parameters 自定义参数表
     *
     */
    public Object custom(Map<String,Object> parameters){
        return null;
    }
}