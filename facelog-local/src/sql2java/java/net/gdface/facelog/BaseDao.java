// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: base.dao.java.vm
// ______________________________________________________
package net.gdface.facelog;

import static com.google.common.base.Preconditions.*;

import com.google.common.base.Throwables;

import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.Callable;

import com.google.common.base.Function;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;

import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.BaseBean;
import net.gdface.facelog.db.Constant;


import net.gdface.facelog.db.IDeviceManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.IDeviceGroupManager;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.IFaceManager;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.IFeatureManager;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.IImageManager;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.ILogManager;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.IPermitManager;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.IPersonManager;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.IPersonGroupManager;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.IStoreManager;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.ILogLightManager;
import net.gdface.facelog.db.LogLightBean;
import net.gdface.facelog.db.exception.ObjectRetrievalException;
import net.gdface.facelog.db.exception.RuntimeDaoException;

/**
 * 数据库访问基础方法
 * @author guyadong
 *
 */
class BaseDao implements CommonConstant,Constant {
    
    static final IDeviceManager getDeviceManager(){
        return TableManagerInitializer.INSTANCE.deviceManager;
    }
    static final IDeviceGroupManager getDeviceGroupManager(){
        return TableManagerInitializer.INSTANCE.deviceGroupManager;
    }
    static final IFaceManager getFaceManager(){
        return TableManagerInitializer.INSTANCE.faceManager;
    }
    static final IFeatureManager getFeatureManager(){
        return TableManagerInitializer.INSTANCE.featureManager;
    }
    static final IImageManager getImageManager(){
        return TableManagerInitializer.INSTANCE.imageManager;
    }
    static final ILogManager getLogManager(){
        return TableManagerInitializer.INSTANCE.logManager;
    }
    static final IPermitManager getPermitManager(){
        return TableManagerInitializer.INSTANCE.permitManager;
    }
    static final IPersonManager getPersonManager(){
        return TableManagerInitializer.INSTANCE.personManager;
    }
    static final IPersonGroupManager getPersonGroupManager(){
        return TableManagerInitializer.INSTANCE.personGroupManager;
    }
    static final IStoreManager getStoreManager(){
        return TableManagerInitializer.INSTANCE.storeManager;
    }
    static final ILogLightManager getLogLightManager(){
        return TableManagerInitializer.INSTANCE.logLightManager;
    }
    /**
     * 返回{@code table}指定的数据库表对应的{@link TableManager}对象
     * @param table 数据库表名,可用的值: fl_device,fl_device_group,fl_face,fl_feature,fl_image,fl_log,fl_permit,fl_person,fl_person_group,fl_store,fl_log_light,
     *              输入值无效则抛出异常
     * @return {@link TableManager}对象
     */
    @SuppressWarnings("unchecked")
    static final <B extends BaseBean<B>>TableManager<B> getManager(String table){
        switch(table){
        case "fl_device":
            return (TableManager<B>)getDeviceManager();
        case "fl_device_group":
            return (TableManager<B>)getDeviceGroupManager();
        case "fl_face":
            return (TableManager<B>)getFaceManager();
        case "fl_feature":
            return (TableManager<B>)getFeatureManager();
        case "fl_image":
            return (TableManager<B>)getImageManager();
        case "fl_log":
            return (TableManager<B>)getLogManager();
        case "fl_permit":
            return (TableManager<B>)getPermitManager();
        case "fl_person":
            return (TableManager<B>)getPersonManager();
        case "fl_person_group":
            return (TableManager<B>)getPersonGroupManager();
        case "fl_store":
            return (TableManager<B>)getStoreManager();
        case "fl_log_light":
            return (TableManager<B>)getLogLightManager();        
        default:
            throw new IllegalArgumentException(String.format("INVALID table name %s",table));
        }
    }
    /** 生成 SQL where 语句,example: {@code WHERE create_time >'2017-09-02 12:12:12'} */
    static private String makeWhere(Date timestamp,String field){
        SimpleDateFormat formatter = new SimpleDateFormat(TIMESTAMP_FORMATTER_STR);
        return String.format(
                "WHERE %s > '%s'", 
                field,
                formatter.format(checkNotNull(timestamp)));    
    }
    /** 
     * 事务执行 
     * @throws RuntimeDaoException
     */
    protected static <T> T daoRunAsTransaction(Callable<T> fun)
                    throws RuntimeDaoException{
        return getPersonManager().runAsTransaction(checkNotNull(fun));
    }
    /** 
     * 事务执行 
     * @throws RuntimeDaoException
     */
    protected static void daoRunAsTransaction(Runnable fun)
                    throws RuntimeDaoException{
        getPersonManager().runAsTransaction(checkNotNull(fun));
    }
    /**
     * 查询 {@code table}表的{@code column}字段的数据
     * @param table 数据库表名
     * @param column 有效的table表字段名或table对应java类的字段名
     * @param distinct 为{@code true}只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @return {@code column}字段记录
     * @see TableManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected<T>List<T> daoLoadColumnAsList(String table,String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getManager(table).loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    /**
     * 查询 {@code table}表的{@code column}字段的数据
     * @param table 数据库表名
     * @param column 有效的table表字段名或table对应java类的字段名
     * @param distinct 为{@code true}只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @see TableManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected<T>List<T> daoLoadColumnAsList(String table,String column,boolean distinct,String where)
                    throws RuntimeDaoException{
        return getManager(table).loadColumnAsList(column, distinct, where, 1, -1);
    }

    protected static final <T extends Exception> void throwCauseIfInstanceOf(Exception error,Class<T> expType) throws T {
        if(null != error.getCause()){
            Throwables.throwIfInstanceOf(error.getCause(),expType);
        }
    }
    /**
     * 数据库写操作类型
     * @author guyadong
     *
     */
    protected enum WriteOp{
        /** 增加记录 */insert,
        /** 更新记录 */update,
        /** 删除记录 */delete
    }
    //////////// FL_DEVICE /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param id 设备id 
     * @return 
     * @see IDeviceManager#loadByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoGetDevice(Integer id)throws RuntimeDaoException{
        return getDeviceManager().loadByPrimaryKey(id);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param id 设备id 
     * @return 
     * @see IDeviceManager#loadByPrimaryKeyChecked(Integer)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected DeviceBean daoGetDeviceChecked(Integer id)throws RuntimeDaoException,ObjectRetrievalException{
        return getDeviceManager().loadByPrimaryKeyChecked(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 DeviceBean 列表,没有查到记录的返回{@link DeviceBean#NULL}
     * @see IDeviceManager#loadByPrimaryKey(Collection)
     * @see DeviceBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<DeviceBean> daoGetDevices(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        return DeviceBean.replaceNull((getDeviceManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see IDeviceManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDevicesByPrimaryKey(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeleteDevice(id);
            }
        }
        return count;
    }
    //3-5
    /** transformer : DeviceBean to fl_device.id */ 
    protected final Function<DeviceBean,Integer> daoCastDeviceToPk = new Function<DeviceBean,Integer>(){
            @Override
            public Integer apply(DeviceBean input) {
                return null == input ? null : input.getId();
            }};
    //3-6
    /** transformer : fl_device.id to DeviceBean */ 
    protected final Function<Integer,DeviceBean> daoCastDeviceFromPk = new Function<Integer,DeviceBean>(){
            @Override
            public DeviceBean apply(Integer input) {
                return daoGetDevice(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link DeviceBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link DeviceBean} collection
     * @return primary key list
     * @see IDeviceManager#toPrimaryKeyList(Collection)
     */
    protected List<Integer> daoToPrimaryKeyListFromDevices(Collection<DeviceBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getDeviceManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link DeviceBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link DeviceBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<Integer> daoToPrimaryKeyListFromDevices(List<DeviceBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastDeviceToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 设备id 
     * @see IDeviceManager#existsPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsDevice(Integer id)
                    throws RuntimeDaoException{
        return getDeviceManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IDeviceManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsDevice(DeviceBean bean)
                    throws RuntimeDaoException{
        return getDeviceManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 设备id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IDeviceManager#deleteByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDevice(Integer id)
                    throws RuntimeDaoException{
        return getDeviceManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteDevice(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDevice(DeviceBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeleteDevice(bean.getId());
    }
    //6
    /**
     * 删除{@code deviceBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteDevice(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDevices(Collection<DeviceBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(DeviceBean bean:beans){
                count += daoDeleteDevice(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected DeviceBean daoCheckDuplicate(DeviceBean deviceBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getDeviceManager().checkDuplicate(deviceBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param id 设备id 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code idOfDevice} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected Integer daoCheckDuplicateDevice(Integer id)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getDeviceManager().existsPrimaryKey(id)){
            throw new DuplicateRecordException();
        }
        return id;
    }
    //8
    /**
     * 返回外键(fl_image.device_id)引用指定记录(fl_device.id)的所有{@code fl_image}记录
     * 
     * @param idOfDevice 设备id 
     * @see IDeviceManager#getImageBeansByDeviceIdAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<ImageBean> daoGetImageBeansByDeviceIdOnDevice(Integer idOfDevice)
                    throws RuntimeDaoException{
        return getDeviceManager().getImageBeansByDeviceIdAsList(idOfDevice);
    }
    //8-2
    /**
     * 删除外键(idOfDevice))引用指定记录(fl_device.id)的所有{@code fl_image}记录
     * 
     * @param idOfDevice 设备id 
     * @see IDeviceManager#deleteImageBeansByDeviceId(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteImageBeansByDeviceIdOnDevice(Integer idOfDevice)
                    throws RuntimeDaoException{
        return getDeviceManager().deleteImageBeansByDeviceId(idOfDevice);
    }
    //8
    /**
     * 返回外键(fl_log.device_id)引用指定记录(fl_device.id)的所有{@code fl_log}记录
     * 
     * @param idOfDevice 设备id 
     * @see IDeviceManager#getLogBeansByDeviceIdAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoGetLogBeansByDeviceIdOnDevice(Integer idOfDevice)
                    throws RuntimeDaoException{
        return getDeviceManager().getLogBeansByDeviceIdAsList(idOfDevice);
    }
    //8-2
    /**
     * 删除外键(idOfDevice))引用指定记录(fl_device.id)的所有{@code fl_log}记录
     * 
     * @param idOfDevice 设备id 
     * @see IDeviceManager#deleteLogBeansByDeviceId(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteLogBeansByDeviceIdOnDevice(Integer idOfDevice)
                    throws RuntimeDaoException{
        return getDeviceManager().deleteLogBeansByDeviceId(idOfDevice);
    }
    //8-3
    /**
     * 返回外键(fl_device.group_id)引用的 fl_device_group 记录
     * @param bean
     * @see IDeviceManager#getReferencedByGroupId(DeviceBean)
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoGetReferencedByGroupIdOnDevice(DeviceBean bean)
                    throws RuntimeDaoException{
        return getDeviceManager().getReferencedByGroupId(bean);
    }
    //8-4
    /**
     * 设置外键fl_device(group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IDeviceManager#setReferencedByGroupId(DeviceBean,DeviceGroupBean)
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoSetReferencedByGroupIdOnDevice(DeviceBean bean,DeviceGroupBean beanToSet)
                    throws RuntimeDaoException{
        return getDeviceManager().setReferencedByGroupId(bean,beanToSet);
    }
    //8-6
    /** transformer : DeviceBean to fl_device.group_id */
    protected final Function<DeviceBean,Integer> daoCastDeviceToGroupId = new Function<DeviceBean,Integer>(){
            @Override
            public Integer apply(DeviceBean input) {
                return null == input ? null : input.getGroupId();
            }};
    //8-8
    /** transformer : fl_device.id to fl_device.group_id */
    protected final Function<Integer,Integer> daoCastDevicePkToGroupId = new Function<Integer,Integer>(){
            @Override
            public Integer apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastDeviceToGroupId.apply(daoGetDevice(input));
            }};
    //14
    /** 
     * 参见 {@link TableManager#save(BaseBean)}
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoSaveDevice(DeviceBean deviceBean)
                    throws RuntimeDaoException{
        daoCheckGroup(deviceBean);
        return getDeviceManager().save(deviceBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IDeviceManager#save(DeviceBean , DeviceGroupBean , Collection, Collection )}
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoSaveDevice(DeviceBean deviceBean
        , DeviceGroupBean refDevicegroupByGroupId 
        , Collection<ImageBean> impImageByDeviceId 
        , Collection<LogBean> impLogByDeviceId )throws RuntimeDaoException{
        daoCheckGroup(deviceBean);
        return getDeviceManager().save(deviceBean
            , refDevicegroupByGroupId 
            , impImageByDeviceId 
            , impLogByDeviceId );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSaveDevice(DeviceBean)
     * @throws RuntimeDaoException
     */
    protected Collection<DeviceBean> daoSaveDevices(Collection<DeviceBean> beans)
                    throws RuntimeDaoException {
        if(null != beans){
            for(DeviceBean bean : beans){
                daoSaveDevice(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSaveDevices(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<DeviceBean> daoSaveDevicesAsTransaction(final Collection<DeviceBean> beans)
                    throws RuntimeDaoException {
        try{
            return daoRunAsTransaction(new Callable<Collection<DeviceBean>>(){      
                @Override
                public Collection<DeviceBean> call() throws Exception {
                    return daoSaveDevices(beans);
                }});
        }catch(RuntimeException e){
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_device 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IDeviceManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<DeviceBean> daoLoadDeviceByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getDeviceManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_device 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IDeviceManager#loadUsingTemplate(DeviceBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<DeviceBean> daoLoadDeviceUsingTemplate(DeviceBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getDeviceManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_device 的{@code column}字段的数据
     * @param column 有效的fl_device表字段名或{@link DeviceBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IDeviceManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfDeviceAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getDeviceManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_device 表的所有记录
     * @see IDeviceManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<DeviceBean> daoLoadDeviceAll()
                    throws RuntimeDaoException{
        return getDeviceManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_device 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountDeviceByWhere(String where)
                    throws RuntimeDaoException{
        return getDeviceManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadDeviceByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadDeviceIdByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromDevices(daoLoadDeviceByWhere(where,1,-1));
    }
    //18-5
    /** 
     * 索引(fl_device.mac)查询,没有找到记录返回{@code null}<br>
     * 
     * @param mac 6字节MAC地址(HEX)
     * @see IDeviceManager#loadByIndexMac(String)
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoGetDeviceByIndexMac(String mac)
                    throws RuntimeDaoException{
        return getDeviceManager().loadByIndexMac(mac);
    }
    //18-7
    /** 
     * 索引(fl_device.mac)查询,没有找到记录抛出异常<br>
     * 
     * @param mac 6字节MAC地址(HEX)
     * @see IDeviceManager#loadByIndexMacChecked(String)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected DeviceBean daoGetDeviceByIndexMacChecked(String mac)
                    throws RuntimeDaoException,ObjectRetrievalException{
        return getDeviceManager().loadByIndexMacChecked(mac);
    }
    //18-8
    /** 
     * 检查数据库中是否有(唯一键)相同的记录,如果有则抛出异常
     * 
     * @param mac 6字节MAC地址(HEX)
     * @throws DuplicateRecordException if exists duplicated row
     * @throws RuntimeDaoException
     */
    protected String daoCheckDuplicateDeviceByIndexMac(String mac)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(null != daoGetDeviceByIndexMac(mac)){
            throw new DuplicateRecordException();
        }
        return mac;
    }
    //18-5
    /** 
     * 索引(fl_device.serial_no)查询,没有找到记录返回{@code null}<br>
     * 
     * @param serialNo 设备序列号
     * @see IDeviceManager#loadByIndexSerialNo(String)
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoGetDeviceByIndexSerialNo(String serialNo)
                    throws RuntimeDaoException{
        return getDeviceManager().loadByIndexSerialNo(serialNo);
    }
    //18-7
    /** 
     * 索引(fl_device.serial_no)查询,没有找到记录抛出异常<br>
     * 
     * @param serialNo 设备序列号
     * @see IDeviceManager#loadByIndexSerialNoChecked(String)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected DeviceBean daoGetDeviceByIndexSerialNoChecked(String serialNo)
                    throws RuntimeDaoException,ObjectRetrievalException{
        return getDeviceManager().loadByIndexSerialNoChecked(serialNo);
    }
    //18-8
    /** 
     * 检查数据库中是否有(唯一键)相同的记录,如果有则抛出异常
     * 
     * @param serialNo 设备序列号
     * @throws DuplicateRecordException if exists duplicated row
     * @throws RuntimeDaoException
     */
    protected String daoCheckDuplicateDeviceByIndexSerialNo(String serialNo)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(null != daoGetDeviceByIndexSerialNo(serialNo)){
            throw new DuplicateRecordException();
        }
        return serialNo;
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_device.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadDeviceByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<DeviceBean> daoLoadDeviceByCreateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadDeviceByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadDeviceByCreateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<DeviceBean> daoLoadDeviceByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadDeviceByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_device.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountDeviceByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountDeviceByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountDeviceByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_device.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadDeviceIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadDeviceIdByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadDeviceIdByWhere(makeWhere(timestamp,"create_time"));
    }

    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_device.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadDeviceByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<DeviceBean> daoLoadDeviceByUpdateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadDeviceByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadDeviceByUpdateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<DeviceBean> daoLoadDeviceByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadDeviceByUpdateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_device.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountDeviceByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountDeviceByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountDeviceByWhere(makeWhere(timestamp,"update_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_device.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadDeviceIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadDeviceIdByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadDeviceIdByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_DEVICE_GROUP /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param id 设备组id 
     * @return 
     * @see IDeviceGroupManager#loadByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoGetDeviceGroup(Integer id)throws RuntimeDaoException{
        return getDeviceGroupManager().loadByPrimaryKey(id);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param id 设备组id 
     * @return 
     * @see IDeviceGroupManager#loadByPrimaryKeyChecked(Integer)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected DeviceGroupBean daoGetDeviceGroupChecked(Integer id)throws RuntimeDaoException,ObjectRetrievalException{
        return getDeviceGroupManager().loadByPrimaryKeyChecked(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 DeviceGroupBean 列表,没有查到记录的返回{@link DeviceGroupBean#NULL}
     * @see IDeviceGroupManager#loadByPrimaryKey(Collection)
     * @see DeviceGroupBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<DeviceGroupBean> daoGetDeviceGroups(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        return DeviceGroupBean.replaceNull((getDeviceGroupManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see IDeviceGroupManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDeviceGroupsByPrimaryKey(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeleteDeviceGroup(id);
            }
        }
        return count;
    }
    //3-5
    /** transformer : DeviceGroupBean to fl_device_group.id */ 
    protected final Function<DeviceGroupBean,Integer> daoCastDeviceGroupToPk = new Function<DeviceGroupBean,Integer>(){
            @Override
            public Integer apply(DeviceGroupBean input) {
                return null == input ? null : input.getId();
            }};
    //3-6
    /** transformer : fl_device_group.id to DeviceGroupBean */ 
    protected final Function<Integer,DeviceGroupBean> daoCastDeviceGroupFromPk = new Function<Integer,DeviceGroupBean>(){
            @Override
            public DeviceGroupBean apply(Integer input) {
                return daoGetDeviceGroup(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link DeviceGroupBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link DeviceGroupBean} collection
     * @return primary key list
     * @see IDeviceGroupManager#toPrimaryKeyList(Collection)
     */
    protected List<Integer> daoToPrimaryKeyListFromDeviceGroups(Collection<DeviceGroupBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getDeviceGroupManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link DeviceGroupBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link DeviceGroupBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<Integer> daoToPrimaryKeyListFromDeviceGroups(List<DeviceGroupBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastDeviceGroupToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 设备组id 
     * @see IDeviceGroupManager#existsPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsDeviceGroup(Integer id)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IDeviceGroupManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsDeviceGroup(DeviceGroupBean bean)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 设备组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IDeviceGroupManager#deleteByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDeviceGroup(Integer id)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteDeviceGroup(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDeviceGroup(DeviceGroupBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeleteDeviceGroup(bean.getId());
    }
    //6
    /**
     * 删除{@code deviceGroupBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteDeviceGroup(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDeviceGroups(Collection<DeviceGroupBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(DeviceGroupBean bean:beans){
                count += daoDeleteDeviceGroup(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected DeviceGroupBean daoCheckDuplicate(DeviceGroupBean deviceGroupBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getDeviceGroupManager().checkDuplicate(deviceGroupBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param id 设备组id 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code idOfDeviceGroup} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected Integer daoCheckDuplicateDeviceGroup(Integer id)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getDeviceGroupManager().existsPrimaryKey(id)){
            throw new DuplicateRecordException();
        }
        return id;
    }
    //8
    /**
     * 返回属于{@code idOfDeviceGroup}指定组的所有{@code fl_device}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see IDeviceGroupManager#getDeviceBeansByGroupIdAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<DeviceBean> daoGetDevicesOfGroup(Integer idOfDeviceGroup)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().getDeviceBeansByGroupIdAsList(idOfDeviceGroup);
    }
    //8-2
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_device}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see IDeviceGroupManager#deleteDeviceBeansByGroupId(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDeviceBeansByGroupIdOnDeviceGroup(Integer idOfDeviceGroup)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().deleteDeviceBeansByGroupId(idOfDeviceGroup);
    }
    //8
    /**
     * 返回{@code idOfDeviceGroup)}指定的组下的所有子节点,如果没有子节点则返回空表
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see IDeviceGroupManager#getDeviceGroupBeansByParentAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<DeviceGroupBean> daoGetSubDeviceGroup(Integer idOfDeviceGroup)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().getDeviceGroupBeansByParentAsList(idOfDeviceGroup);
    }
    //8-2
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_device_group}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see IDeviceGroupManager#deleteDeviceGroupBeansByParent(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteDeviceGroupBeansByParentOnDeviceGroup(Integer idOfDeviceGroup)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().deleteDeviceGroupBeansByParent(idOfDeviceGroup);
    }
    //8
    /**
     * 返回外键(fl_permit.device_group_id)引用指定记录(fl_device_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see IDeviceGroupManager#getPermitBeansByDeviceGroupIdAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<PermitBean> daoGetPermitBeansByDeviceGroupIdOnDeviceGroup(Integer idOfDeviceGroup)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().getPermitBeansByDeviceGroupIdAsList(idOfDeviceGroup);
    }
    //8-2
    /**
     * 删除外键(idOfDeviceGroup))引用指定记录(fl_device_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfDeviceGroup 设备组id 
     * @see IDeviceGroupManager#deletePermitBeansByDeviceGroupId(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePermitBeansByDeviceGroupIdOnDeviceGroup(Integer idOfDeviceGroup)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().deletePermitBeansByDeviceGroupId(idOfDeviceGroup);
    }
    //8-3
    /**
     * 返回外键(fl_device_group.parent)引用的 fl_device_group 记录
     * @param bean
     * @see IDeviceGroupManager#getReferencedByParent(DeviceGroupBean)
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoGetReferencedByParentOnDeviceGroup(DeviceGroupBean bean)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().getReferencedByParent(bean);
    }
    //8-4
    /**
     * 设置外键fl_device_group(parent)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IDeviceGroupManager#setReferencedByParent(DeviceGroupBean,DeviceGroupBean)
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoSetReferencedByParentOnDeviceGroup(DeviceGroupBean bean,DeviceGroupBean beanToSet)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().setReferencedByParent(bean,beanToSet);
    }
    //9
    /**
     * 返回(idOfDeviceGroup))指定的fl_device_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @see IDeviceGroupManager#listOfParent(Integer)
     * @throws RuntimeDaoException
     */
    protected java.util.List<DeviceGroupBean> daoListOfParentForDeviceGroup(Integer idOfDeviceGroup)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().listOfParent(idOfDeviceGroup);
    }
    //9-2
    /**
     * 返回{@code deviceGroupBean}指定的fl_device_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @see IDeviceGroupManager#listOfParent(DeviceGroupBean)
     * @throws RuntimeDaoException
     */
    protected java.util.List<DeviceGroupBean> daoListOfParentForDeviceGroup(DeviceGroupBean deviceGroupBean)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().listOfParent(deviceGroupBean);
    }
    //9-3
    /**
     * 返回(idOfDeviceGroup))指定的fl_device_group记录的所有的子节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @see IDeviceGroupManager#childListByParent(Integer)
     * @throws RuntimeDaoException
     */
    protected java.util.List<DeviceGroupBean> daoChildListByParentForDeviceGroup(Integer idOfDeviceGroup)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().childListByParent(idOfDeviceGroup);
    }
    //9-4
    /**
     * 返回{@code deviceGroupBean}指定的fl_device_group记录的所有的子节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @see IDeviceGroupManager#listOfParent(DeviceGroupBean)
     * @throws RuntimeDaoException
     */
    protected java.util.List<DeviceGroupBean> daoChildListByParentForDeviceGroup(DeviceGroupBean deviceGroupBean)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().childListByParent(deviceGroupBean);
    }
    //10
    /** 
     * 如果没有默认组则向 fl_device_group 表中增加默认组,失败则抛出异常 
     * 
     * @throws IllegalStateException 创建失败
     * @throws RuntimeDaoException
     */
    protected void daoSaveDefaultDeviceGroupIfAbsent()
                    throws RuntimeDaoException{
        if(!daoExistsDeviceGroup(DEFAULT_GROUP_ID)){
            try{
                DeviceGroupBean bean = new DeviceGroupBean(DEFAULT_GROUP_ID);
                bean.setName(DEFAULT_GROUP_NAME);
                daoSaveDeviceGroup(bean);
            }catch(RuntimeDaoException e){
                // do nothing
            }
            if(!daoExistsDeviceGroup(DEFAULT_GROUP_ID)){
                throw new IllegalStateException("can't create default group for device_group"); 
            }
        }
    }
    //11
    /**
     * 检查{@link DeviceBean}的'group_id'字段是否为默认组{@link CommonConstant#DEFAULT_GROUP_ID},
     * 如果是,且默认组记录不存在则创建默认组
     * @return {@code deviceBean}
     * @see #daoSaveDefaultDeviceGroupIfAbsent()
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoCheckGroup(DeviceBean deviceBean)
                    throws RuntimeDaoException{
        if(null != deviceBean && Objects.equals(deviceBean.getGroupId(), DEFAULT_GROUP_ID)){
            daoSaveDefaultDeviceGroupIfAbsent();
        }
        return deviceBean;
    }
    //14
    /** 
     * 参见 {@link TableManager#save(BaseBean)}
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoSaveDeviceGroup(DeviceGroupBean deviceGroupBean)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().save(deviceGroupBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IDeviceGroupManager#save(DeviceGroupBean , DeviceGroupBean , Collection, Collection, Collection )}
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoSaveDeviceGroup(DeviceGroupBean deviceGroupBean
        , DeviceGroupBean refDevicegroupByParent 
        , Collection<DeviceBean> impDeviceByGroupId 
        , Collection<DeviceGroupBean> impDevicegroupByParent 
        , Collection<PermitBean> impPermitByDeviceGroupId )throws RuntimeDaoException{
        return getDeviceGroupManager().save(deviceGroupBean
            , refDevicegroupByParent 
            , impDeviceByGroupId 
            , impDevicegroupByParent 
            , impPermitByDeviceGroupId );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSaveDeviceGroup(DeviceGroupBean)
     * @throws RuntimeDaoException
     */
    protected Collection<DeviceGroupBean> daoSaveDeviceGroups(Collection<DeviceGroupBean> beans)
                    throws RuntimeDaoException {
        if(null != beans){
            for(DeviceGroupBean bean : beans){
                daoSaveDeviceGroup(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSaveDeviceGroups(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<DeviceGroupBean> daoSaveDeviceGroupsAsTransaction(final Collection<DeviceGroupBean> beans)
                    throws RuntimeDaoException {
        try{
            return daoRunAsTransaction(new Callable<Collection<DeviceGroupBean>>(){      
                @Override
                public Collection<DeviceGroupBean> call() throws Exception {
                    return daoSaveDeviceGroups(beans);
                }});
        }catch(RuntimeException e){
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_device_group 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IDeviceGroupManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_device_group 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IDeviceGroupManager#loadUsingTemplate(DeviceGroupBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupUsingTemplate(DeviceGroupBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_device_group 的{@code column}字段的数据
     * @param column 有效的fl_device_group表字段名或{@link DeviceGroupBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IDeviceGroupManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfDeviceGroupAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_device_group 表的所有记录
     * @see IDeviceGroupManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupAll()
                    throws RuntimeDaoException{
        return getDeviceGroupManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_device_group 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountDeviceGroupByWhere(String where)
                    throws RuntimeDaoException{
        return getDeviceGroupManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadDeviceGroupByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadDeviceGroupIdByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromDeviceGroups(daoLoadDeviceGroupByWhere(where,1,-1));
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_device_group.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadDeviceGroupByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupByCreateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadDeviceGroupByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadDeviceGroupByCreateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadDeviceGroupByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_device_group.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountDeviceGroupByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountDeviceGroupByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountDeviceGroupByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_device_group.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadDeviceGroupIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadDeviceGroupIdByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadDeviceGroupIdByWhere(makeWhere(timestamp,"create_time"));
    }

    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_device_group.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadDeviceGroupByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupByUpdateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadDeviceGroupByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadDeviceGroupByUpdateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<DeviceGroupBean> daoLoadDeviceGroupByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadDeviceGroupByUpdateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_device_group.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountDeviceGroupByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountDeviceGroupByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountDeviceGroupByWhere(makeWhere(timestamp,"update_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_device_group.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadDeviceGroupIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadDeviceGroupIdByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadDeviceGroupIdByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_PERSON /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param id 用户id 
     * @return 
     * @see IPersonManager#loadByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected PersonBean daoGetPerson(Integer id)throws RuntimeDaoException{
        return getPersonManager().loadByPrimaryKey(id);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param id 用户id 
     * @return 
     * @see IPersonManager#loadByPrimaryKeyChecked(Integer)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected PersonBean daoGetPersonChecked(Integer id)throws RuntimeDaoException,ObjectRetrievalException{
        return getPersonManager().loadByPrimaryKeyChecked(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 PersonBean 列表,没有查到记录的返回{@link PersonBean#NULL}
     * @see IPersonManager#loadByPrimaryKey(Collection)
     * @see PersonBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<PersonBean> daoGetPersons(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        return PersonBean.replaceNull((getPersonManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see IPersonManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersonsByPrimaryKey(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeletePerson(id);
            }
        }
        return count;
    }
    //3-5
    /** transformer : PersonBean to fl_person.id */ 
    protected final Function<PersonBean,Integer> daoCastPersonToPk = new Function<PersonBean,Integer>(){
            @Override
            public Integer apply(PersonBean input) {
                return null == input ? null : input.getId();
            }};
    //3-6
    /** transformer : fl_person.id to PersonBean */ 
    protected final Function<Integer,PersonBean> daoCastPersonFromPk = new Function<Integer,PersonBean>(){
            @Override
            public PersonBean apply(Integer input) {
                return daoGetPerson(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link PersonBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link PersonBean} collection
     * @return primary key list
     * @see IPersonManager#toPrimaryKeyList(Collection)
     */
    protected List<Integer> daoToPrimaryKeyListFromPersons(Collection<PersonBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getPersonManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link PersonBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link PersonBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<Integer> daoToPrimaryKeyListFromPersons(List<PersonBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastPersonToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 用户id 
     * @see IPersonManager#existsPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsPerson(Integer id)
                    throws RuntimeDaoException{
        return getPersonManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IPersonManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsPerson(PersonBean bean)
                    throws RuntimeDaoException{
        return getPersonManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 用户id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IPersonManager#deleteByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePerson(Integer id)
                    throws RuntimeDaoException{
        return getPersonManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeletePerson(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePerson(PersonBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeletePerson(bean.getId());
    }
    //6
    /**
     * 删除{@code personBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeletePerson(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersons(Collection<PersonBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(PersonBean bean:beans){
                count += daoDeletePerson(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected PersonBean daoCheckDuplicate(PersonBean personBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getPersonManager().checkDuplicate(personBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param id 用户id 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code idOfPerson} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected Integer daoCheckDuplicatePerson(Integer id)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getPersonManager().existsPrimaryKey(id)){
            throw new DuplicateRecordException();
        }
        return id;
    }
    //8
    /**
     * 返回外键(fl_feature.person_id)引用指定记录(fl_person.id)的所有{@code fl_feature}记录
     * 
     * @param idOfPerson 用户id 
     * @see IPersonManager#getFeatureBeansByPersonIdAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<FeatureBean> daoGetFeatureBeansByPersonIdOnPerson(Integer idOfPerson)
                    throws RuntimeDaoException{
        return getPersonManager().getFeatureBeansByPersonIdAsList(idOfPerson);
    }
    //8-2
    /**
     * 删除外键(idOfPerson))引用指定记录(fl_person.id)的所有{@code fl_feature}记录
     * 
     * @param idOfPerson 用户id 
     * @see IPersonManager#deleteFeatureBeansByPersonId(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFeatureBeansByPersonIdOnPerson(Integer idOfPerson)
                    throws RuntimeDaoException{
        return getPersonManager().deleteFeatureBeansByPersonId(idOfPerson);
    }
    //8
    /**
     * 返回外键(fl_log.person_id)引用指定记录(fl_person.id)的所有{@code fl_log}记录
     * 
     * @param idOfPerson 用户id 
     * @see IPersonManager#getLogBeansByPersonIdAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoGetLogBeansByPersonIdOnPerson(Integer idOfPerson)
                    throws RuntimeDaoException{
        return getPersonManager().getLogBeansByPersonIdAsList(idOfPerson);
    }
    //8-2
    /**
     * 删除外键(idOfPerson))引用指定记录(fl_person.id)的所有{@code fl_log}记录
     * 
     * @param idOfPerson 用户id 
     * @see IPersonManager#deleteLogBeansByPersonId(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteLogBeansByPersonIdOnPerson(Integer idOfPerson)
                    throws RuntimeDaoException{
        return getPersonManager().deleteLogBeansByPersonId(idOfPerson);
    }
    //8-3
    /**
     * 返回外键(fl_person.image_md5)引用的 fl_image 记录
     * @param bean
     * @see IPersonManager#getReferencedByImageMd5(PersonBean)
     * @throws RuntimeDaoException
     */
    protected ImageBean daoGetReferencedByImageMd5OnPerson(PersonBean bean)
                    throws RuntimeDaoException{
        return getPersonManager().getReferencedByImageMd5(bean);
    }
    //8-4
    /**
     * 设置外键fl_person(image_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IPersonManager#setReferencedByImageMd5(PersonBean,ImageBean)
     * @throws RuntimeDaoException
     */
    protected ImageBean daoSetReferencedByImageMd5OnPerson(PersonBean bean,ImageBean beanToSet)
                    throws RuntimeDaoException{
        return getPersonManager().setReferencedByImageMd5(bean,beanToSet);
    }
    //8-6
    /** transformer : PersonBean to fl_person.image_md5 */
    protected final Function<PersonBean,String> daoCastPersonToImageMd5 = new Function<PersonBean,String>(){
            @Override
            public String apply(PersonBean input) {
                return null == input ? null : input.getImageMd5();
            }};
    //8-8
    /** transformer : fl_person.id to fl_person.image_md5 */
    protected final Function<Integer,String> daoCastPersonPkToImageMd5 = new Function<Integer,String>(){
            @Override
            public String apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastPersonToImageMd5.apply(daoGetPerson(input));
            }};
    //8-3
    /**
     * 返回外键(fl_person.group_id)引用的 fl_person_group 记录
     * @param bean
     * @see IPersonManager#getReferencedByGroupId(PersonBean)
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoGetReferencedByGroupIdOnPerson(PersonBean bean)
                    throws RuntimeDaoException{
        return getPersonManager().getReferencedByGroupId(bean);
    }
    //8-4
    /**
     * 设置外键fl_person(group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IPersonManager#setReferencedByGroupId(PersonBean,PersonGroupBean)
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoSetReferencedByGroupIdOnPerson(PersonBean bean,PersonGroupBean beanToSet)
                    throws RuntimeDaoException{
        return getPersonManager().setReferencedByGroupId(bean,beanToSet);
    }
    //8-6
    /** transformer : PersonBean to fl_person.group_id */
    protected final Function<PersonBean,Integer> daoCastPersonToGroupId = new Function<PersonBean,Integer>(){
            @Override
            public Integer apply(PersonBean input) {
                return null == input ? null : input.getGroupId();
            }};
    //8-8
    /** transformer : fl_person.id to fl_person.group_id */
    protected final Function<Integer,Integer> daoCastPersonPkToGroupId = new Function<Integer,Integer>(){
            @Override
            public Integer apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastPersonToGroupId.apply(daoGetPerson(input));
            }};
    //14
    /** 
     * 参见 {@link TableManager#save(BaseBean)}
     * @throws RuntimeDaoException
     */
    protected PersonBean daoSavePerson(PersonBean personBean)
                    throws RuntimeDaoException{
        daoCheckGroup(personBean);
        return getPersonManager().save(personBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IPersonManager#save(PersonBean , ImageBean, PersonGroupBean , Collection, Collection )}
     * @throws RuntimeDaoException
     */
    protected PersonBean daoSavePerson(PersonBean personBean
        , ImageBean refImageByImageMd5 
        , PersonGroupBean refPersongroupByGroupId 
        , Collection<FeatureBean> impFeatureByPersonId 
        , Collection<LogBean> impLogByPersonId )throws RuntimeDaoException{
        daoCheckGroup(personBean);
        return getPersonManager().save(personBean
            , refImageByImageMd5 
            , refPersongroupByGroupId 
            , impFeatureByPersonId 
            , impLogByPersonId );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSavePerson(PersonBean)
     * @throws RuntimeDaoException
     */
    protected Collection<PersonBean> daoSavePersons(Collection<PersonBean> beans)
                    throws RuntimeDaoException {
        if(null != beans){
            for(PersonBean bean : beans){
                daoSavePerson(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSavePersons(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<PersonBean> daoSavePersonsAsTransaction(final Collection<PersonBean> beans)
                    throws RuntimeDaoException {
        try{
            return daoRunAsTransaction(new Callable<Collection<PersonBean>>(){      
                @Override
                public Collection<PersonBean> call() throws Exception {
                    return daoSavePersons(beans);
                }});
        }catch(RuntimeException e){
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_person 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPersonManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<PersonBean> daoLoadPersonByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPersonManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_person 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPersonManager#loadUsingTemplate(PersonBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<PersonBean> daoLoadPersonUsingTemplate(PersonBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPersonManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_person 的{@code column}字段的数据
     * @param column 有效的fl_person表字段名或{@link PersonBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPersonManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfPersonAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPersonManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_person 表的所有记录
     * @see IPersonManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<PersonBean> daoLoadPersonAll()
                    throws RuntimeDaoException{
        return getPersonManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountPersonByWhere(String where)
                    throws RuntimeDaoException{
        return getPersonManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadPersonByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadPersonIdByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromPersons(daoLoadPersonByWhere(where,1,-1));
    }
    //18-5
    /** 
     * 索引(fl_person.image_md5)查询,没有找到记录返回{@code null}<br>
     * 
     * @param imageMd5 用户默认照片(证件照,标准照)的md5校验码,外键
     * @see IPersonManager#loadByIndexImageMd5(String)
     * @throws RuntimeDaoException
     */
    protected PersonBean daoGetPersonByIndexImageMd5(String imageMd5)
                    throws RuntimeDaoException{
        return getPersonManager().loadByIndexImageMd5(imageMd5);
    }
    //18-7
    /** 
     * 索引(fl_person.image_md5)查询,没有找到记录抛出异常<br>
     * 
     * @param imageMd5 用户默认照片(证件照,标准照)的md5校验码,外键
     * @see IPersonManager#loadByIndexImageMd5Checked(String)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected PersonBean daoGetPersonByIndexImageMd5Checked(String imageMd5)
                    throws RuntimeDaoException,ObjectRetrievalException{
        return getPersonManager().loadByIndexImageMd5Checked(imageMd5);
    }
    //18-8
    /** 
     * 检查数据库中是否有(唯一键)相同的记录,如果有则抛出异常
     * 
     * @param imageMd5 用户默认照片(证件照,标准照)的md5校验码,外键
     * @throws DuplicateRecordException if exists duplicated row
     * @throws RuntimeDaoException
     */
    protected String daoCheckDuplicatePersonByIndexImageMd5(String imageMd5)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(null != daoGetPersonByIndexImageMd5(imageMd5)){
            throw new DuplicateRecordException();
        }
        return imageMd5;
    }
    //18-5
    /** 
     * 索引(fl_person.mobile_phone)查询,没有找到记录返回{@code null}<br>
     * 
     * @param mobilePhone 手机号码
     * @see IPersonManager#loadByIndexMobilePhone(String)
     * @throws RuntimeDaoException
     */
    protected PersonBean daoGetPersonByIndexMobilePhone(String mobilePhone)
                    throws RuntimeDaoException{
        return getPersonManager().loadByIndexMobilePhone(mobilePhone);
    }
    //18-7
    /** 
     * 索引(fl_person.mobile_phone)查询,没有找到记录抛出异常<br>
     * 
     * @param mobilePhone 手机号码
     * @see IPersonManager#loadByIndexMobilePhoneChecked(String)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected PersonBean daoGetPersonByIndexMobilePhoneChecked(String mobilePhone)
                    throws RuntimeDaoException,ObjectRetrievalException{
        return getPersonManager().loadByIndexMobilePhoneChecked(mobilePhone);
    }
    //18-8
    /** 
     * 检查数据库中是否有(唯一键)相同的记录,如果有则抛出异常
     * 
     * @param mobilePhone 手机号码
     * @throws DuplicateRecordException if exists duplicated row
     * @throws RuntimeDaoException
     */
    protected String daoCheckDuplicatePersonByIndexMobilePhone(String mobilePhone)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(null != daoGetPersonByIndexMobilePhone(mobilePhone)){
            throw new DuplicateRecordException();
        }
        return mobilePhone;
    }
    //18-5
    /** 
     * 索引(fl_person.papers_num)查询,没有找到记录返回{@code null}<br>
     * 
     * @param papersNum 证件号码
     * @see IPersonManager#loadByIndexPapersNum(String)
     * @throws RuntimeDaoException
     */
    protected PersonBean daoGetPersonByIndexPapersNum(String papersNum)
                    throws RuntimeDaoException{
        return getPersonManager().loadByIndexPapersNum(papersNum);
    }
    //18-7
    /** 
     * 索引(fl_person.papers_num)查询,没有找到记录抛出异常<br>
     * 
     * @param papersNum 证件号码
     * @see IPersonManager#loadByIndexPapersNumChecked(String)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected PersonBean daoGetPersonByIndexPapersNumChecked(String papersNum)
                    throws RuntimeDaoException,ObjectRetrievalException{
        return getPersonManager().loadByIndexPapersNumChecked(papersNum);
    }
    //18-8
    /** 
     * 检查数据库中是否有(唯一键)相同的记录,如果有则抛出异常
     * 
     * @param papersNum 证件号码
     * @throws DuplicateRecordException if exists duplicated row
     * @throws RuntimeDaoException
     */
    protected String daoCheckDuplicatePersonByIndexPapersNum(String papersNum)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(null != daoGetPersonByIndexPapersNum(papersNum)){
            throw new DuplicateRecordException();
        }
        return papersNum;
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadPersonByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<PersonBean> daoLoadPersonByCreateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadPersonByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadPersonByCreateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<PersonBean> daoLoadPersonByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPersonByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_person.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountPersonByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountPersonByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountPersonByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_person.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadPersonIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadPersonIdByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPersonIdByWhere(makeWhere(timestamp,"create_time"));
    }

    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadPersonByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<PersonBean> daoLoadPersonByUpdateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadPersonByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadPersonByUpdateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<PersonBean> daoLoadPersonByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPersonByUpdateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_person.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountPersonByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountPersonByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountPersonByWhere(makeWhere(timestamp,"update_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadPersonIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadPersonIdByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPersonIdByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_PERSON_GROUP /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param id 用户组id 
     * @return 
     * @see IPersonGroupManager#loadByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoGetPersonGroup(Integer id)throws RuntimeDaoException{
        return getPersonGroupManager().loadByPrimaryKey(id);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param id 用户组id 
     * @return 
     * @see IPersonGroupManager#loadByPrimaryKeyChecked(Integer)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected PersonGroupBean daoGetPersonGroupChecked(Integer id)throws RuntimeDaoException,ObjectRetrievalException{
        return getPersonGroupManager().loadByPrimaryKeyChecked(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 PersonGroupBean 列表,没有查到记录的返回{@link PersonGroupBean#NULL}
     * @see IPersonGroupManager#loadByPrimaryKey(Collection)
     * @see PersonGroupBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<PersonGroupBean> daoGetPersonGroups(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        return PersonGroupBean.replaceNull((getPersonGroupManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see IPersonGroupManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersonGroupsByPrimaryKey(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeletePersonGroup(id);
            }
        }
        return count;
    }
    //3-5
    /** transformer : PersonGroupBean to fl_person_group.id */ 
    protected final Function<PersonGroupBean,Integer> daoCastPersonGroupToPk = new Function<PersonGroupBean,Integer>(){
            @Override
            public Integer apply(PersonGroupBean input) {
                return null == input ? null : input.getId();
            }};
    //3-6
    /** transformer : fl_person_group.id to PersonGroupBean */ 
    protected final Function<Integer,PersonGroupBean> daoCastPersonGroupFromPk = new Function<Integer,PersonGroupBean>(){
            @Override
            public PersonGroupBean apply(Integer input) {
                return daoGetPersonGroup(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link PersonGroupBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link PersonGroupBean} collection
     * @return primary key list
     * @see IPersonGroupManager#toPrimaryKeyList(Collection)
     */
    protected List<Integer> daoToPrimaryKeyListFromPersonGroups(Collection<PersonGroupBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getPersonGroupManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link PersonGroupBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link PersonGroupBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<Integer> daoToPrimaryKeyListFromPersonGroups(List<PersonGroupBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastPersonGroupToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 用户组id 
     * @see IPersonGroupManager#existsPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsPersonGroup(Integer id)
                    throws RuntimeDaoException{
        return getPersonGroupManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IPersonGroupManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsPersonGroup(PersonGroupBean bean)
                    throws RuntimeDaoException{
        return getPersonGroupManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 用户组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IPersonGroupManager#deleteByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersonGroup(Integer id)
                    throws RuntimeDaoException{
        return getPersonGroupManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeletePersonGroup(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersonGroup(PersonGroupBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeletePersonGroup(bean.getId());
    }
    //6
    /**
     * 删除{@code personGroupBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeletePersonGroup(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersonGroups(Collection<PersonGroupBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(PersonGroupBean bean:beans){
                count += daoDeletePersonGroup(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected PersonGroupBean daoCheckDuplicate(PersonGroupBean personGroupBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getPersonGroupManager().checkDuplicate(personGroupBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param id 用户组id 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code idOfPersonGroup} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected Integer daoCheckDuplicatePersonGroup(Integer id)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getPersonGroupManager().existsPrimaryKey(id)){
            throw new DuplicateRecordException();
        }
        return id;
    }
    //8
    /**
     * 返回外键(fl_permit.person_group_id)引用指定记录(fl_person_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see IPersonGroupManager#getPermitBeansByPersonGroupIdAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<PermitBean> daoGetPermitBeansByPersonGroupIdOnPersonGroup(Integer idOfPersonGroup)
                    throws RuntimeDaoException{
        return getPersonGroupManager().getPermitBeansByPersonGroupIdAsList(idOfPersonGroup);
    }
    //8-2
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_permit}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see IPersonGroupManager#deletePermitBeansByPersonGroupId(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePermitBeansByPersonGroupIdOnPersonGroup(Integer idOfPersonGroup)
                    throws RuntimeDaoException{
        return getPersonGroupManager().deletePermitBeansByPersonGroupId(idOfPersonGroup);
    }
    //8
    /**
     * 返回属于{@code idOfPersonGroup}指定组的所有{@code fl_person}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see IPersonGroupManager#getPersonBeansByGroupIdAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<PersonBean> daoGetPersonsOfGroup(Integer idOfPersonGroup)
                    throws RuntimeDaoException{
        return getPersonGroupManager().getPersonBeansByGroupIdAsList(idOfPersonGroup);
    }
    //8-2
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_person}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see IPersonGroupManager#deletePersonBeansByGroupId(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersonBeansByGroupIdOnPersonGroup(Integer idOfPersonGroup)
                    throws RuntimeDaoException{
        return getPersonGroupManager().deletePersonBeansByGroupId(idOfPersonGroup);
    }
    //8
    /**
     * 返回{@code idOfPersonGroup)}指定的组下的所有子节点,如果没有子节点则返回空表
     * 
     * @param idOfPersonGroup 用户组id 
     * @see IPersonGroupManager#getPersonGroupBeansByParentAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<PersonGroupBean> daoGetSubPersonGroup(Integer idOfPersonGroup)
                    throws RuntimeDaoException{
        return getPersonGroupManager().getPersonGroupBeansByParentAsList(idOfPersonGroup);
    }
    //8-2
    /**
     * 删除外键(idOfPersonGroup))引用指定记录(fl_person_group.id)的所有{@code fl_person_group}记录
     * 
     * @param idOfPersonGroup 用户组id 
     * @see IPersonGroupManager#deletePersonGroupBeansByParent(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersonGroupBeansByParentOnPersonGroup(Integer idOfPersonGroup)
                    throws RuntimeDaoException{
        return getPersonGroupManager().deletePersonGroupBeansByParent(idOfPersonGroup);
    }
    //8-3
    /**
     * 返回外键(fl_person_group.parent)引用的 fl_person_group 记录
     * @param bean
     * @see IPersonGroupManager#getReferencedByParent(PersonGroupBean)
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoGetReferencedByParentOnPersonGroup(PersonGroupBean bean)
                    throws RuntimeDaoException{
        return getPersonGroupManager().getReferencedByParent(bean);
    }
    //8-4
    /**
     * 设置外键fl_person_group(parent)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IPersonGroupManager#setReferencedByParent(PersonGroupBean,PersonGroupBean)
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoSetReferencedByParentOnPersonGroup(PersonGroupBean bean,PersonGroupBean beanToSet)
                    throws RuntimeDaoException{
        return getPersonGroupManager().setReferencedByParent(bean,beanToSet);
    }
    //9
    /**
     * 返回(idOfPersonGroup))指定的fl_person_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @see IPersonGroupManager#listOfParent(Integer)
     * @throws RuntimeDaoException
     */
    protected java.util.List<PersonGroupBean> daoListOfParentForPersonGroup(Integer idOfPersonGroup)
                    throws RuntimeDaoException{
        return getPersonGroupManager().listOfParent(idOfPersonGroup);
    }
    //9-2
    /**
     * 返回{@code personGroupBean}指定的fl_person_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @see IPersonGroupManager#listOfParent(PersonGroupBean)
     * @throws RuntimeDaoException
     */
    protected java.util.List<PersonGroupBean> daoListOfParentForPersonGroup(PersonGroupBean personGroupBean)
                    throws RuntimeDaoException{
        return getPersonGroupManager().listOfParent(personGroupBean);
    }
    //9-3
    /**
     * 返回(idOfPersonGroup))指定的fl_person_group记录的所有的子节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @see IPersonGroupManager#childListByParent(Integer)
     * @throws RuntimeDaoException
     */
    protected java.util.List<PersonGroupBean> daoChildListByParentForPersonGroup(Integer idOfPersonGroup)
                    throws RuntimeDaoException{
        return getPersonGroupManager().childListByParent(idOfPersonGroup);
    }
    //9-4
    /**
     * 返回{@code personGroupBean}指定的fl_person_group记录的所有的子节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @see IPersonGroupManager#listOfParent(PersonGroupBean)
     * @throws RuntimeDaoException
     */
    protected java.util.List<PersonGroupBean> daoChildListByParentForPersonGroup(PersonGroupBean personGroupBean)
                    throws RuntimeDaoException{
        return getPersonGroupManager().childListByParent(personGroupBean);
    }
    //10
    /** 
     * 如果没有默认组则向 fl_person_group 表中增加默认组,失败则抛出异常 
     * 
     * @throws IllegalStateException 创建失败
     * @throws RuntimeDaoException
     */
    protected void daoSaveDefaultPersonGroupIfAbsent()
                    throws RuntimeDaoException{
        if(!daoExistsPersonGroup(DEFAULT_GROUP_ID)){
            try{
                PersonGroupBean bean = new PersonGroupBean(DEFAULT_GROUP_ID);
                bean.setName(DEFAULT_GROUP_NAME);
                daoSavePersonGroup(bean);
            }catch(RuntimeDaoException e){
                // do nothing
            }
            if(!daoExistsPersonGroup(DEFAULT_GROUP_ID)){
                throw new IllegalStateException("can't create default group for person_group"); 
            }
        }
    }
    //11
    /**
     * 检查{@link PersonBean}的'group_id'字段是否为默认组{@link CommonConstant#DEFAULT_GROUP_ID},
     * 如果是,且默认组记录不存在则创建默认组
     * @return {@code personBean}
     * @see #daoSaveDefaultPersonGroupIfAbsent()
     * @throws RuntimeDaoException
     */
    protected PersonBean daoCheckGroup(PersonBean personBean)
                    throws RuntimeDaoException{
        if(null != personBean && Objects.equals(personBean.getGroupId(), DEFAULT_GROUP_ID)){
            daoSaveDefaultPersonGroupIfAbsent();
        }
        return personBean;
    }
    //14
    /** 
     * 参见 {@link TableManager#save(BaseBean)}
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoSavePersonGroup(PersonGroupBean personGroupBean)
                    throws RuntimeDaoException{
        return getPersonGroupManager().save(personGroupBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IPersonGroupManager#save(PersonGroupBean , PersonGroupBean , Collection, Collection, Collection )}
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoSavePersonGroup(PersonGroupBean personGroupBean
        , PersonGroupBean refPersongroupByParent 
        , Collection<PermitBean> impPermitByPersonGroupId 
        , Collection<PersonBean> impPersonByGroupId 
        , Collection<PersonGroupBean> impPersongroupByParent )throws RuntimeDaoException{
        return getPersonGroupManager().save(personGroupBean
            , refPersongroupByParent 
            , impPermitByPersonGroupId 
            , impPersonByGroupId 
            , impPersongroupByParent );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSavePersonGroup(PersonGroupBean)
     * @throws RuntimeDaoException
     */
    protected Collection<PersonGroupBean> daoSavePersonGroups(Collection<PersonGroupBean> beans)
                    throws RuntimeDaoException {
        if(null != beans){
            for(PersonGroupBean bean : beans){
                daoSavePersonGroup(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSavePersonGroups(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<PersonGroupBean> daoSavePersonGroupsAsTransaction(final Collection<PersonGroupBean> beans)
                    throws RuntimeDaoException {
        try{
            return daoRunAsTransaction(new Callable<Collection<PersonGroupBean>>(){      
                @Override
                public Collection<PersonGroupBean> call() throws Exception {
                    return daoSavePersonGroups(beans);
                }});
        }catch(RuntimeException e){
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_person_group 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPersonGroupManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<PersonGroupBean> daoLoadPersonGroupByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPersonGroupManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_person_group 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPersonGroupManager#loadUsingTemplate(PersonGroupBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<PersonGroupBean> daoLoadPersonGroupUsingTemplate(PersonGroupBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPersonGroupManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_person_group 的{@code column}字段的数据
     * @param column 有效的fl_person_group表字段名或{@link PersonGroupBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPersonGroupManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfPersonGroupAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPersonGroupManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_person_group 表的所有记录
     * @see IPersonGroupManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<PersonGroupBean> daoLoadPersonGroupAll()
                    throws RuntimeDaoException{
        return getPersonGroupManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person_group 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountPersonGroupByWhere(String where)
                    throws RuntimeDaoException{
        return getPersonGroupManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadPersonGroupByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadPersonGroupIdByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromPersonGroups(daoLoadPersonGroupByWhere(where,1,-1));
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person_group.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadPersonGroupByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<PersonGroupBean> daoLoadPersonGroupByCreateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadPersonGroupByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadPersonGroupByCreateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<PersonGroupBean> daoLoadPersonGroupByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPersonGroupByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_person_group.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountPersonGroupByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountPersonGroupByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountPersonGroupByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_person_group.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadPersonGroupIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadPersonGroupIdByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPersonGroupIdByWhere(makeWhere(timestamp,"create_time"));
    }

    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person_group.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadPersonGroupByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<PersonGroupBean> daoLoadPersonGroupByUpdateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadPersonGroupByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadPersonGroupByUpdateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<PersonGroupBean> daoLoadPersonGroupByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPersonGroupByUpdateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_person_group.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountPersonGroupByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountPersonGroupByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountPersonGroupByWhere(makeWhere(timestamp,"update_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_person_group.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadPersonGroupIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadPersonGroupIdByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPersonGroupIdByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_PERMIT /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id 
     * @return 
     * @see IPermitManager#loadByPrimaryKey(Integer,Integer)
     * @throws RuntimeDaoException
     */
    protected PermitBean daoGetPermit(Integer deviceGroupId,Integer personGroupId)throws RuntimeDaoException{
        return getPermitManager().loadByPrimaryKey(deviceGroupId,personGroupId);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id 
     * @return 
     * @see IPermitManager#loadByPrimaryKeyChecked(Integer,Integer)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected PermitBean daoGetPermitChecked(Integer deviceGroupId,Integer personGroupId)throws RuntimeDaoException,ObjectRetrievalException{
        return getPermitManager().loadByPrimaryKeyChecked(deviceGroupId,personGroupId);
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id 
     * @see IPermitManager#existsPrimaryKey(Integer,Integer)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsPermit(Integer deviceGroupId,Integer personGroupId)
                    throws RuntimeDaoException{
        return getPermitManager().existsPrimaryKey(deviceGroupId,personGroupId);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IPermitManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsPermit(PermitBean bean)
                    throws RuntimeDaoException{
        return getPermitManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IPermitManager#deleteByPrimaryKey(Integer,Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePermit(Integer deviceGroupId,Integer personGroupId)
                    throws RuntimeDaoException{
        return getPermitManager().deleteByPrimaryKey(deviceGroupId,personGroupId);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeletePermit(Integer,Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePermit(PermitBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeletePermit(bean.getDeviceGroupId(),bean.getPersonGroupId());
    }
    //6
    /**
     * 删除{@code permitBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeletePermit(Integer,Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePermits(Collection<PermitBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(PermitBean bean:beans){
                count += daoDeletePermit(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected PermitBean daoCheckDuplicate(PermitBean permitBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getPermitManager().checkDuplicate(permitBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param deviceGroupId 外键,设备组id 
     * @param personGroupId 外键,人员组id 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected void daoCheckDuplicatePermit(Integer deviceGroupId,Integer personGroupId)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getPermitManager().existsPrimaryKey(deviceGroupId,personGroupId)){
            throw new DuplicateRecordException();
        }
    }
    //8-3
    /**
     * 返回外键(fl_permit.device_group_id)引用的 fl_device_group 记录
     * @param bean
     * @see IPermitManager#getReferencedByDeviceGroupId(PermitBean)
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoGetReferencedByDeviceGroupIdOnPermit(PermitBean bean)
                    throws RuntimeDaoException{
        return getPermitManager().getReferencedByDeviceGroupId(bean);
    }
    //8-4
    /**
     * 设置外键fl_permit(device_group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IPermitManager#setReferencedByDeviceGroupId(PermitBean,DeviceGroupBean)
     * @throws RuntimeDaoException
     */
    protected DeviceGroupBean daoSetReferencedByDeviceGroupIdOnPermit(PermitBean bean,DeviceGroupBean beanToSet)
                    throws RuntimeDaoException{
        return getPermitManager().setReferencedByDeviceGroupId(bean,beanToSet);
    }
    //8-6
    /** transformer : PermitBean to fl_permit.device_group_id */
    protected final Function<PermitBean,Integer> daoCastPermitToDeviceGroupId = new Function<PermitBean,Integer>(){
            @Override
            public Integer apply(PermitBean input) {
                return null == input ? null : input.getDeviceGroupId();
            }};
    //8-3
    /**
     * 返回外键(fl_permit.person_group_id)引用的 fl_person_group 记录
     * @param bean
     * @see IPermitManager#getReferencedByPersonGroupId(PermitBean)
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoGetReferencedByPersonGroupIdOnPermit(PermitBean bean)
                    throws RuntimeDaoException{
        return getPermitManager().getReferencedByPersonGroupId(bean);
    }
    //8-4
    /**
     * 设置外键fl_permit(person_group_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IPermitManager#setReferencedByPersonGroupId(PermitBean,PersonGroupBean)
     * @throws RuntimeDaoException
     */
    protected PersonGroupBean daoSetReferencedByPersonGroupIdOnPermit(PermitBean bean,PersonGroupBean beanToSet)
                    throws RuntimeDaoException{
        return getPermitManager().setReferencedByPersonGroupId(bean,beanToSet);
    }
    //8-6
    /** transformer : PermitBean to fl_permit.person_group_id */
    protected final Function<PermitBean,Integer> daoCastPermitToPersonGroupId = new Function<PermitBean,Integer>(){
            @Override
            public Integer apply(PermitBean input) {
                return null == input ? null : input.getPersonGroupId();
            }};
    //14
    /** 
     * 参见 {@link TableManager#save(BaseBean)}
     * @throws RuntimeDaoException
     */
    protected PermitBean daoSavePermit(PermitBean permitBean)
                    throws RuntimeDaoException{
        return getPermitManager().save(permitBean);
    }
    //15
    /** 同步保存<br> 
     * see also {@link IPermitManager#save(PermitBean , DeviceGroupBean, PersonGroupBean  )}
     * @throws RuntimeDaoException
     */
    protected PermitBean daoSavePermit(PermitBean permitBean
        , DeviceGroupBean refDevicegroupByDeviceGroupId 
        , PersonGroupBean refPersongroupByPersonGroupId 
        )throws RuntimeDaoException{
        return getPermitManager().save(permitBean
            , refDevicegroupByDeviceGroupId 
            , refPersongroupByPersonGroupId 
            );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoSavePermit(PermitBean)
     * @throws RuntimeDaoException
     */
    protected Collection<PermitBean> daoSavePermits(Collection<PermitBean> beans)
                    throws RuntimeDaoException {
        if(null != beans){
            for(PermitBean bean : beans){
                daoSavePermit(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoSavePermits(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<PermitBean> daoSavePermitsAsTransaction(final Collection<PermitBean> beans)
                    throws RuntimeDaoException {
        try{
            return daoRunAsTransaction(new Callable<Collection<PermitBean>>(){      
                @Override
                public Collection<PermitBean> call() throws Exception {
                    return daoSavePermits(beans);
                }});
        }catch(RuntimeException e){
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_permit 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPermitManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<PermitBean> daoLoadPermitByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPermitManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_permit 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPermitManager#loadUsingTemplate(PermitBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<PermitBean> daoLoadPermitUsingTemplate(PermitBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPermitManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_permit 的{@code column}字段的数据
     * @param column 有效的fl_permit表字段名或{@link PermitBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IPermitManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfPermitAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getPermitManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_permit 表的所有记录
     * @see IPermitManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<PermitBean> daoLoadPermitAll()
                    throws RuntimeDaoException{
        return getPermitManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_permit 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountPermitByWhere(String where)
                    throws RuntimeDaoException{
        return getPermitManager().countWhere(where);
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_permit.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadPermitByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<PermitBean> daoLoadPermitByCreateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadPermitByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadPermitByCreateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<PermitBean> daoLoadPermitByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadPermitByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_permit.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountPermitByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountPermitByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountPermitByWhere(makeWhere(timestamp,"create_time"));
    }



    //////////// FL_FACE /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param id 主键 
     * @return 
     * @see IFaceManager#loadByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected FaceBean daoGetFace(Integer id)throws RuntimeDaoException{
        return getFaceManager().loadByPrimaryKey(id);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param id 主键 
     * @return 
     * @see IFaceManager#loadByPrimaryKeyChecked(Integer)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected FaceBean daoGetFaceChecked(Integer id)throws RuntimeDaoException,ObjectRetrievalException{
        return getFaceManager().loadByPrimaryKeyChecked(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 FaceBean 列表,没有查到记录的返回{@link FaceBean#NULL}
     * @see IFaceManager#loadByPrimaryKey(Collection)
     * @see FaceBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<FaceBean> daoGetFaces(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        return FaceBean.replaceNull((getFaceManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see IFaceManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFacesByPrimaryKey(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeleteFace(id);
            }
        }
        return count;
    }
    //3-5
    /** transformer : FaceBean to fl_face.id */ 
    protected final Function<FaceBean,Integer> daoCastFaceToPk = new Function<FaceBean,Integer>(){
            @Override
            public Integer apply(FaceBean input) {
                return null == input ? null : input.getId();
            }};
    //3-6
    /** transformer : fl_face.id to FaceBean */ 
    protected final Function<Integer,FaceBean> daoCastFaceFromPk = new Function<Integer,FaceBean>(){
            @Override
            public FaceBean apply(Integer input) {
                return daoGetFace(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link FaceBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link FaceBean} collection
     * @return primary key list
     * @see IFaceManager#toPrimaryKeyList(Collection)
     */
    protected List<Integer> daoToPrimaryKeyListFromFaces(Collection<FaceBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getFaceManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link FaceBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link FaceBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<Integer> daoToPrimaryKeyListFromFaces(List<FaceBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastFaceToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 主键 
     * @see IFaceManager#existsPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsFace(Integer id)
                    throws RuntimeDaoException{
        return getFaceManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IFaceManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsFace(FaceBean bean)
                    throws RuntimeDaoException{
        return getFaceManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 主键  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IFaceManager#deleteByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFace(Integer id)
                    throws RuntimeDaoException{
        return getFaceManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteFace(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFace(FaceBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeleteFace(bean.getId());
    }
    //6
    /**
     * 删除{@code faceBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteFace(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFaces(Collection<FaceBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(FaceBean bean:beans){
                count += daoDeleteFace(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected FaceBean daoCheckDuplicate(FaceBean faceBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getFaceManager().checkDuplicate(faceBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param id 主键 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code idOfFace} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected Integer daoCheckDuplicateFace(Integer id)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getFaceManager().existsPrimaryKey(id)){
            throw new DuplicateRecordException();
        }
        return id;
    }
    //8
    /**
     * 返回外键(fl_log.compare_face)引用指定记录(fl_face.id)的所有{@code fl_log}记录
     * 
     * @param idOfFace 主键 
     * @see IFaceManager#getLogBeansByCompareFaceAsList(Integer)
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoGetLogBeansByCompareFaceOnFace(Integer idOfFace)
                    throws RuntimeDaoException{
        return getFaceManager().getLogBeansByCompareFaceAsList(idOfFace);
    }
    //8-2
    /**
     * 删除外键(idOfFace))引用指定记录(fl_face.id)的所有{@code fl_log}记录
     * 
     * @param idOfFace 主键 
     * @see IFaceManager#deleteLogBeansByCompareFace(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteLogBeansByCompareFaceOnFace(Integer idOfFace)
                    throws RuntimeDaoException{
        return getFaceManager().deleteLogBeansByCompareFace(idOfFace);
    }
    //8-3
    /**
     * 返回外键(fl_face.feature_md5)引用的 fl_feature 记录
     * @param bean
     * @see IFaceManager#getReferencedByFeatureMd5(FaceBean)
     * @throws RuntimeDaoException
     */
    protected FeatureBean daoGetReferencedByFeatureMd5OnFace(FaceBean bean)
                    throws RuntimeDaoException{
        return getFaceManager().getReferencedByFeatureMd5(bean);
    }
    //8-4
    /**
     * 设置外键fl_face(feature_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IFaceManager#setReferencedByFeatureMd5(FaceBean,FeatureBean)
     * @throws RuntimeDaoException
     */
    protected FeatureBean daoSetReferencedByFeatureMd5OnFace(FaceBean bean,FeatureBean beanToSet)
                    throws RuntimeDaoException{
        return getFaceManager().setReferencedByFeatureMd5(bean,beanToSet);
    }
    //8-6
    /** transformer : FaceBean to fl_face.feature_md5 */
    protected final Function<FaceBean,String> daoCastFaceToFeatureMd5 = new Function<FaceBean,String>(){
            @Override
            public String apply(FaceBean input) {
                return null == input ? null : input.getFeatureMd5();
            }};
    //8-8
    /** transformer : fl_face.id to fl_face.feature_md5 */
    protected final Function<Integer,String> daoCastFacePkToFeatureMd5 = new Function<Integer,String>(){
            @Override
            public String apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastFaceToFeatureMd5.apply(daoGetFace(input));
            }};
    //8-3
    /**
     * 返回外键(fl_face.image_md5)引用的 fl_image 记录
     * @param bean
     * @see IFaceManager#getReferencedByImageMd5(FaceBean)
     * @throws RuntimeDaoException
     */
    protected ImageBean daoGetReferencedByImageMd5OnFace(FaceBean bean)
                    throws RuntimeDaoException{
        return getFaceManager().getReferencedByImageMd5(bean);
    }
    //8-4
    /**
     * 设置外键fl_face(image_md5)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IFaceManager#setReferencedByImageMd5(FaceBean,ImageBean)
     * @throws RuntimeDaoException
     */
    protected ImageBean daoSetReferencedByImageMd5OnFace(FaceBean bean,ImageBean beanToSet)
                    throws RuntimeDaoException{
        return getFaceManager().setReferencedByImageMd5(bean,beanToSet);
    }
    //8-6
    /** transformer : FaceBean to fl_face.image_md5 */
    protected final Function<FaceBean,String> daoCastFaceToImageMd5 = new Function<FaceBean,String>(){
            @Override
            public String apply(FaceBean input) {
                return null == input ? null : input.getImageMd5();
            }};
    //8-8
    /** transformer : fl_face.id to fl_face.image_md5 */
    protected final Function<Integer,String> daoCastFacePkToImageMd5 = new Function<Integer,String>(){
            @Override
            public String apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastFaceToImageMd5.apply(daoGetFace(input));
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_face 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FaceBean#isNew()}返回{@code false},则抛出异常
     * @param faceBean 要添加的新记录
     * @see TableManager#save(BaseBean)
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code faceBean.isNew()} is {@code false}
     */
    protected FaceBean daoAddFace(FaceBean faceBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == faceBean || faceBean.isNew(),"can be add,delete,but modify record for fl_face,so the _isNew field must be true");
        return getFaceManager().save(daoCheckDuplicate(faceBean));
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_face 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link FaceBean#isNew()}返回{@code false},则抛出异常
     * see also {@link IFaceManager#save(FaceBean , FeatureBean, ImageBean , Collection )}<br>
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code faceBean.isNew()} is {@code false}
     */
    protected FaceBean daoAddFace(FaceBean faceBean
        , FeatureBean refFeatureByFeatureMd5 
        , ImageBean refImageByImageMd5 
        , Collection<LogBean> impLogByCompareFace )throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == faceBean || faceBean.isNew(),"can be add,delete,but modify record for fl_face,so the _isNew field must be true");
        daoCheckDuplicate(faceBean);
        return getFaceManager().save(faceBean
            , refFeatureByFeatureMd5 
            , refImageByImageMd5 
            , impLogByCompareFace );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddFace(FaceBean)
     * @throws RuntimeDaoException
     */
    protected Collection<FaceBean> daoAddFaces(Collection<FaceBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        if(null != beans){
            for(FaceBean bean : beans){
                daoAddFace(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddFaces(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<FaceBean> daoAddFacesAsTransaction(final Collection<FaceBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        try{
            return daoRunAsTransaction(new Callable<Collection<FaceBean>>(){      
                @Override
                public Collection<FaceBean> call() throws Exception {
                    return daoAddFaces(beans);
                }});
        }catch(RuntimeException e){
            throwCauseIfInstanceOf(e,DuplicateRecordException.class);
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_face 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IFaceManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<FaceBean> daoLoadFaceByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getFaceManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_face 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IFaceManager#loadUsingTemplate(FaceBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<FaceBean> daoLoadFaceUsingTemplate(FaceBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getFaceManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_face 的{@code column}字段的数据
     * @param column 有效的fl_face表字段名或{@link FaceBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IFaceManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfFaceAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getFaceManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_face 表的所有记录
     * @see IFaceManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<FaceBean> daoLoadFaceAll()
                    throws RuntimeDaoException{
        return getFaceManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_face 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountFaceByWhere(String where)
                    throws RuntimeDaoException{
        return getFaceManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadFaceByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadFaceIdByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromFaces(daoLoadFaceByWhere(where,1,-1));
    }



    //////////// FL_FEATURE /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param md5 主键,特征码md5校验码 
     * @return 
     * @see IFeatureManager#loadByPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected FeatureBean daoGetFeature(String md5)throws RuntimeDaoException{
        return getFeatureManager().loadByPrimaryKey(md5);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param md5 主键,特征码md5校验码 
     * @return 
     * @see IFeatureManager#loadByPrimaryKeyChecked(String)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected FeatureBean daoGetFeatureChecked(String md5)throws RuntimeDaoException,ObjectRetrievalException{
        return getFeatureManager().loadByPrimaryKeyChecked(md5);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 FeatureBean 列表,没有查到记录的返回{@link FeatureBean#NULL}
     * @see IFeatureManager#loadByPrimaryKey(Collection)
     * @see FeatureBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<FeatureBean> daoGetFeatures(Collection<String> md5Collection)
                    throws RuntimeDaoException{
        return FeatureBean.replaceNull((getFeatureManager().loadByPrimaryKey(md5Collection)));
    }
    //3  
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see IFeatureManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFeaturesByPrimaryKey(Collection<String> md5Collection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != md5Collection){
            for(String md5:md5Collection){
                count += daoDeleteFeature(md5);
            }
        }
        return count;
    }
    //3-5
    /** transformer : FeatureBean to fl_feature.md5 */ 
    protected final Function<FeatureBean,String> daoCastFeatureToPk = new Function<FeatureBean,String>(){
            @Override
            public String apply(FeatureBean input) {
                return null == input ? null : input.getMd5();
            }};
    //3-6
    /** transformer : fl_feature.md5 to FeatureBean */ 
    protected final Function<String,FeatureBean> daoCastFeatureFromPk = new Function<String,FeatureBean>(){
            @Override
            public FeatureBean apply(String input) {
                return daoGetFeature(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link FeatureBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link FeatureBean} collection
     * @return primary key list
     * @see IFeatureManager#toPrimaryKeyList(Collection)
     */
    protected List<String> daoToPrimaryKeyListFromFeatures(Collection<FeatureBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getFeatureManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link FeatureBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link FeatureBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<String> daoToPrimaryKeyListFromFeatures(List<FeatureBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastFeatureToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,特征码md5校验码 
     * @see IFeatureManager#existsPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsFeature(String md5)
                    throws RuntimeDaoException{
        return getFeatureManager().existsPrimaryKey(md5);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IFeatureManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsFeature(FeatureBean bean)
                    throws RuntimeDaoException{
        return getFeatureManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,特征码md5校验码  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IFeatureManager#deleteByPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFeature(String md5)
                    throws RuntimeDaoException{
        return getFeatureManager().deleteByPrimaryKey(md5);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteFeature(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFeature(FeatureBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeleteFeature(bean.getMd5());
    }
    //6
    /**
     * 删除{@code featureBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteFeature(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFeatures(Collection<FeatureBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(FeatureBean bean:beans){
                count += daoDeleteFeature(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected FeatureBean daoCheckDuplicate(FeatureBean featureBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getFeatureManager().checkDuplicate(featureBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param md5 主键,特征码md5校验码 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code md5OfFeature} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected String daoCheckDuplicateFeature(String md5)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getFeatureManager().existsPrimaryKey(md5)){
            throw new DuplicateRecordException();
        }
        return md5;
    }
    //8
    /**
     * 返回外键(fl_face.feature_md5)引用指定记录(fl_feature.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see IFeatureManager#getFaceBeansByFeatureMd5AsList(String)
     * @throws RuntimeDaoException
     */
    protected List<FaceBean> daoGetFaceBeansByFeatureMd5OnFeature(String md5OfFeature)
                    throws RuntimeDaoException{
        return getFeatureManager().getFaceBeansByFeatureMd5AsList(md5OfFeature);
    }
    //8-2
    /**
     * 删除外键(md5OfFeature))引用指定记录(fl_feature.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see IFeatureManager#deleteFaceBeansByFeatureMd5(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFaceBeansByFeatureMd5OnFeature(String md5OfFeature)
                    throws RuntimeDaoException{
        return getFeatureManager().deleteFaceBeansByFeatureMd5(md5OfFeature);
    }
    //8
    /**
     * 返回外键(fl_log.verify_feature)引用指定记录(fl_feature.md5)的所有{@code fl_log}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see IFeatureManager#getLogBeansByVerifyFeatureAsList(String)
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoGetLogBeansByVerifyFeatureOnFeature(String md5OfFeature)
                    throws RuntimeDaoException{
        return getFeatureManager().getLogBeansByVerifyFeatureAsList(md5OfFeature);
    }
    //8-2
    /**
     * 删除外键(md5OfFeature))引用指定记录(fl_feature.md5)的所有{@code fl_log}记录
     * 
     * @param md5OfFeature 主键,特征码md5校验码 
     * @see IFeatureManager#deleteLogBeansByVerifyFeature(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteLogBeansByVerifyFeatureOnFeature(String md5OfFeature)
                    throws RuntimeDaoException{
        return getFeatureManager().deleteLogBeansByVerifyFeature(md5OfFeature);
    }
    //8-3
    /**
     * 返回外键(fl_feature.person_id)引用的 fl_person 记录
     * @param bean
     * @see IFeatureManager#getReferencedByPersonId(FeatureBean)
     * @throws RuntimeDaoException
     */
    protected PersonBean daoGetReferencedByPersonIdOnFeature(FeatureBean bean)
                    throws RuntimeDaoException{
        return getFeatureManager().getReferencedByPersonId(bean);
    }
    //8-4
    /**
     * 设置外键fl_feature(person_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IFeatureManager#setReferencedByPersonId(FeatureBean,PersonBean)
     * @throws RuntimeDaoException
     */
    protected PersonBean daoSetReferencedByPersonIdOnFeature(FeatureBean bean,PersonBean beanToSet)
                    throws RuntimeDaoException{
        return getFeatureManager().setReferencedByPersonId(bean,beanToSet);
    }
    //8-6
    /** transformer : FeatureBean to fl_feature.person_id */
    protected final Function<FeatureBean,Integer> daoCastFeatureToPersonId = new Function<FeatureBean,Integer>(){
            @Override
            public Integer apply(FeatureBean input) {
                return null == input ? null : input.getPersonId();
            }};
    //8-8
    /** transformer : fl_feature.md5 to fl_feature.person_id */
    protected final Function<String,Integer> daoCastFeaturePkToPersonId = new Function<String,Integer>(){
            @Override
            public Integer apply(String input) {
                return null == input 
                    ? null 
                    : daoCastFeatureToPersonId.apply(daoGetFeature(input));
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_feature 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link FeatureBean#isNew()}返回{@code false},则抛出异常
     * @param featureBean 要添加的新记录
     * @see TableManager#save(BaseBean)
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code featureBean.isNew()} is {@code false}
     */
    protected FeatureBean daoAddFeature(FeatureBean featureBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == featureBean || featureBean.isNew(),"can be add,delete,but modify record for fl_feature,so the _isNew field must be true");
        return getFeatureManager().save(daoCheckDuplicate(featureBean));
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_feature 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link FeatureBean#isNew()}返回{@code false},则抛出异常
     * see also {@link IFeatureManager#save(FeatureBean , PersonBean , Collection, Collection )}<br>
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code featureBean.isNew()} is {@code false}
     */
    protected FeatureBean daoAddFeature(FeatureBean featureBean
        , PersonBean refPersonByPersonId 
        , Collection<FaceBean> impFaceByFeatureMd5 
        , Collection<LogBean> impLogByVerifyFeature )throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == featureBean || featureBean.isNew(),"can be add,delete,but modify record for fl_feature,so the _isNew field must be true");
        daoCheckDuplicate(featureBean);
        return getFeatureManager().save(featureBean
            , refPersonByPersonId 
            , impFaceByFeatureMd5 
            , impLogByVerifyFeature );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddFeature(FeatureBean)
     * @throws RuntimeDaoException
     */
    protected Collection<FeatureBean> daoAddFeatures(Collection<FeatureBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        if(null != beans){
            for(FeatureBean bean : beans){
                daoAddFeature(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddFeatures(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<FeatureBean> daoAddFeaturesAsTransaction(final Collection<FeatureBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        try{
            return daoRunAsTransaction(new Callable<Collection<FeatureBean>>(){      
                @Override
                public Collection<FeatureBean> call() throws Exception {
                    return daoAddFeatures(beans);
                }});
        }catch(RuntimeException e){
            throwCauseIfInstanceOf(e,DuplicateRecordException.class);
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_feature 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IFeatureManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<FeatureBean> daoLoadFeatureByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getFeatureManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_feature 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IFeatureManager#loadUsingTemplate(FeatureBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<FeatureBean> daoLoadFeatureUsingTemplate(FeatureBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getFeatureManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_feature 的{@code column}字段的数据
     * @param column 有效的fl_feature表字段名或{@link FeatureBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IFeatureManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfFeatureAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getFeatureManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_feature 表的所有记录
     * @see IFeatureManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<FeatureBean> daoLoadFeatureAll()
                    throws RuntimeDaoException{
        return getFeatureManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_feature 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountFeatureByWhere(String where)
                    throws RuntimeDaoException{
        return getFeatureManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadFeatureByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<String> daoLoadFeatureMd5ByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromFeatures(daoLoadFeatureByWhere(where,1,-1));
    }

    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadFeatureByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<FeatureBean> daoLoadFeatureByUpdateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadFeatureByWhere(makeWhere(timestamp,"update_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadFeatureByUpdateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<FeatureBean> daoLoadFeatureByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadFeatureByUpdateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_feature.update_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountFeatureByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountFeatureByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountFeatureByWhere(makeWhere(timestamp,"update_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadFeatureMd5ByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<String> daoLoadFeatureMd5ByUpdateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadFeatureMd5ByWhere(makeWhere(timestamp,"update_time"));
    }


    //////////// FL_IMAGE /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @return 
     * @see IImageManager#loadByPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected ImageBean daoGetImage(String md5)throws RuntimeDaoException{
        return getImageManager().loadByPrimaryKey(md5);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @return 
     * @see IImageManager#loadByPrimaryKeyChecked(String)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected ImageBean daoGetImageChecked(String md5)throws RuntimeDaoException,ObjectRetrievalException{
        return getImageManager().loadByPrimaryKeyChecked(md5);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 ImageBean 列表,没有查到记录的返回{@link ImageBean#NULL}
     * @see IImageManager#loadByPrimaryKey(Collection)
     * @see ImageBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<ImageBean> daoGetImages(Collection<String> md5Collection)
                    throws RuntimeDaoException{
        return ImageBean.replaceNull((getImageManager().loadByPrimaryKey(md5Collection)));
    }
    //3  
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see IImageManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteImagesByPrimaryKey(Collection<String> md5Collection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != md5Collection){
            for(String md5:md5Collection){
                count += daoDeleteImage(md5);
            }
        }
        return count;
    }
    //3-5
    /** transformer : ImageBean to fl_image.md5 */ 
    protected final Function<ImageBean,String> daoCastImageToPk = new Function<ImageBean,String>(){
            @Override
            public String apply(ImageBean input) {
                return null == input ? null : input.getMd5();
            }};
    //3-6
    /** transformer : fl_image.md5 to ImageBean */ 
    protected final Function<String,ImageBean> daoCastImageFromPk = new Function<String,ImageBean>(){
            @Override
            public ImageBean apply(String input) {
                return daoGetImage(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link ImageBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link ImageBean} collection
     * @return primary key list
     * @see IImageManager#toPrimaryKeyList(Collection)
     */
    protected List<String> daoToPrimaryKeyListFromImages(Collection<ImageBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getImageManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link ImageBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link ImageBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<String> daoToPrimaryKeyListFromImages(List<ImageBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastImageToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see IImageManager#existsPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsImage(String md5)
                    throws RuntimeDaoException{
        return getImageManager().existsPrimaryKey(md5);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IImageManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsImage(ImageBean bean)
                    throws RuntimeDaoException{
        return getImageManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IImageManager#deleteByPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteImage(String md5)
                    throws RuntimeDaoException{
        return getImageManager().deleteByPrimaryKey(md5);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteImage(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteImage(ImageBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeleteImage(bean.getMd5());
    }
    //6
    /**
     * 删除{@code imageBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteImage(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteImages(Collection<ImageBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(ImageBean bean:beans){
                count += daoDeleteImage(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected ImageBean daoCheckDuplicate(ImageBean imageBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getImageManager().checkDuplicate(imageBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param md5 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code md5OfImage} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected String daoCheckDuplicateImage(String md5)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getImageManager().existsPrimaryKey(md5)){
            throw new DuplicateRecordException();
        }
        return md5;
    }
    //8
    /**
     * 返回外键(fl_face.image_md5)引用指定记录(fl_image.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see IImageManager#getFaceBeansByImageMd5AsList(String)
     * @throws RuntimeDaoException
     */
    protected List<FaceBean> daoGetFaceBeansByImageMd5OnImage(String md5OfImage)
                    throws RuntimeDaoException{
        return getImageManager().getFaceBeansByImageMd5AsList(md5OfImage);
    }
    //8-2
    /**
     * 删除外键(md5OfImage))引用指定记录(fl_image.md5)的所有{@code fl_face}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see IImageManager#deleteFaceBeansByImageMd5(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteFaceBeansByImageMd5OnImage(String md5OfImage)
                    throws RuntimeDaoException{
        return getImageManager().deleteFaceBeansByImageMd5(md5OfImage);
    }
    //8
    /**
     * 返回外键(fl_person.image_md5)引用指定记录(fl_image.md5)的所有{@code fl_person}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see IImageManager#getPersonBeansByImageMd5AsList(String)
     * @throws RuntimeDaoException
     */
    protected List<PersonBean> daoGetPersonBeansByImageMd5OnImage(String md5OfImage)
                    throws RuntimeDaoException{
        return getImageManager().getPersonBeansByImageMd5AsList(md5OfImage);
    }
    //8-2
    /**
     * 删除外键(md5OfImage))引用指定记录(fl_image.md5)的所有{@code fl_person}记录
     * 
     * @param md5OfImage 主键,图像md5检验码,同时也是从 fl_store 获取图像数据的key 
     * @see IImageManager#deletePersonBeansByImageMd5(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeletePersonBeansByImageMd5OnImage(String md5OfImage)
                    throws RuntimeDaoException{
        return getImageManager().deletePersonBeansByImageMd5(md5OfImage);
    }
    //8-3
    /**
     * 返回外键(fl_image.device_id)引用的 fl_device 记录
     * @param bean
     * @see IImageManager#getReferencedByDeviceId(ImageBean)
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoGetReferencedByDeviceIdOnImage(ImageBean bean)
                    throws RuntimeDaoException{
        return getImageManager().getReferencedByDeviceId(bean);
    }
    //8-4
    /**
     * 设置外键fl_image(device_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see IImageManager#setReferencedByDeviceId(ImageBean,DeviceBean)
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoSetReferencedByDeviceIdOnImage(ImageBean bean,DeviceBean beanToSet)
                    throws RuntimeDaoException{
        return getImageManager().setReferencedByDeviceId(bean,beanToSet);
    }
    //8-6
    /** transformer : ImageBean to fl_image.device_id */
    protected final Function<ImageBean,Integer> daoCastImageToDeviceId = new Function<ImageBean,Integer>(){
            @Override
            public Integer apply(ImageBean input) {
                return null == input ? null : input.getDeviceId();
            }};
    //8-8
    /** transformer : fl_image.md5 to fl_image.device_id */
    protected final Function<String,Integer> daoCastImagePkToDeviceId = new Function<String,Integer>(){
            @Override
            public Integer apply(String input) {
                return null == input 
                    ? null 
                    : daoCastImageToDeviceId.apply(daoGetImage(input));
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_image 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link ImageBean#isNew()}返回{@code false},则抛出异常
     * @param imageBean 要添加的新记录
     * @see TableManager#save(BaseBean)
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code imageBean.isNew()} is {@code false}
     */
    protected ImageBean daoAddImage(ImageBean imageBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == imageBean || imageBean.isNew(),"can be add,delete,but modify record for fl_image,so the _isNew field must be true");
        return getImageManager().save(daoCheckDuplicate(imageBean));
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_image 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link ImageBean#isNew()}返回{@code false},则抛出异常
     * see also {@link IImageManager#save(ImageBean , DeviceBean , Collection, Collection )}<br>
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code imageBean.isNew()} is {@code false}
     */
    protected ImageBean daoAddImage(ImageBean imageBean
        , DeviceBean refDeviceByDeviceId 
        , Collection<FaceBean> impFaceByImageMd5 
        , Collection<PersonBean> impPersonByImageMd5 )throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == imageBean || imageBean.isNew(),"can be add,delete,but modify record for fl_image,so the _isNew field must be true");
        daoCheckDuplicate(imageBean);
        return getImageManager().save(imageBean
            , refDeviceByDeviceId 
            , impFaceByImageMd5 
            , impPersonByImageMd5 );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddImage(ImageBean)
     * @throws RuntimeDaoException
     */
    protected Collection<ImageBean> daoAddImages(Collection<ImageBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        if(null != beans){
            for(ImageBean bean : beans){
                daoAddImage(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddImages(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<ImageBean> daoAddImagesAsTransaction(final Collection<ImageBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        try{
            return daoRunAsTransaction(new Callable<Collection<ImageBean>>(){      
                @Override
                public Collection<ImageBean> call() throws Exception {
                    return daoAddImages(beans);
                }});
        }catch(RuntimeException e){
            throwCauseIfInstanceOf(e,DuplicateRecordException.class);
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_image 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IImageManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<ImageBean> daoLoadImageByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getImageManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_image 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IImageManager#loadUsingTemplate(ImageBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<ImageBean> daoLoadImageUsingTemplate(ImageBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getImageManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_image 的{@code column}字段的数据
     * @param column 有效的fl_image表字段名或{@link ImageBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IImageManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfImageAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getImageManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_image 表的所有记录
     * @see IImageManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<ImageBean> daoLoadImageAll()
                    throws RuntimeDaoException{
        return getImageManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_image 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountImageByWhere(String where)
                    throws RuntimeDaoException{
        return getImageManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadImageByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<String> daoLoadImageMd5ByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromImages(daoLoadImageByWhere(where,1,-1));
    }



    //////////// FL_LOG /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param id 日志id 
     * @return 
     * @see ILogManager#loadByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected LogBean daoGetLog(Integer id)throws RuntimeDaoException{
        return getLogManager().loadByPrimaryKey(id);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param id 日志id 
     * @return 
     * @see ILogManager#loadByPrimaryKeyChecked(Integer)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected LogBean daoGetLogChecked(Integer id)throws RuntimeDaoException,ObjectRetrievalException{
        return getLogManager().loadByPrimaryKeyChecked(id);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 LogBean 列表,没有查到记录的返回{@link LogBean#NULL}
     * @see ILogManager#loadByPrimaryKey(Collection)
     * @see LogBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoGetLogs(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        return LogBean.replaceNull((getLogManager().loadByPrimaryKey(idCollection)));
    }
    //3  
    /** 
     * 删除主键列表({@code idCollection})指定的记录
     * @return 返回删除的记录条数
     * @see ILogManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteLogsByPrimaryKey(Collection<Integer> idCollection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != idCollection){
            for(Integer id:idCollection){
                count += daoDeleteLog(id);
            }
        }
        return count;
    }
    //3-5
    /** transformer : LogBean to fl_log.id */ 
    protected final Function<LogBean,Integer> daoCastLogToPk = new Function<LogBean,Integer>(){
            @Override
            public Integer apply(LogBean input) {
                return null == input ? null : input.getId();
            }};
    //3-6
    /** transformer : fl_log.id to LogBean */ 
    protected final Function<Integer,LogBean> daoCastLogFromPk = new Function<Integer,LogBean>(){
            @Override
            public LogBean apply(Integer input) {
                return daoGetLog(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link LogBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link LogBean} collection
     * @return primary key list
     * @see ILogManager#toPrimaryKeyList(Collection)
     */
    protected List<Integer> daoToPrimaryKeyListFromLogs(Collection<LogBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getLogManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link LogBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link LogBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<Integer> daoToPrimaryKeyListFromLogs(List<LogBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastLogToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param id 日志id 
     * @see ILogManager#existsPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsLog(Integer id)
                    throws RuntimeDaoException{
        return getLogManager().existsPrimaryKey(id);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see ILogManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsLog(LogBean bean)
                    throws RuntimeDaoException{
        return getLogManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param id 日志id  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see ILogManager#deleteByPrimaryKey(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteLog(Integer id)
                    throws RuntimeDaoException{
        return getLogManager().deleteByPrimaryKey(id);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteLog(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteLog(LogBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeleteLog(bean.getId());
    }
    //6
    /**
     * 删除{@code logBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteLog(Integer)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteLogs(Collection<LogBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(LogBean bean:beans){
                count += daoDeleteLog(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected LogBean daoCheckDuplicate(LogBean logBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getLogManager().checkDuplicate(logBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param id 日志id 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code idOfLog} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected Integer daoCheckDuplicateLog(Integer id)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getLogManager().existsPrimaryKey(id)){
            throw new DuplicateRecordException();
        }
        return id;
    }
    //8-3
    /**
     * 返回外键(fl_log.device_id)引用的 fl_device 记录
     * @param bean
     * @see ILogManager#getReferencedByDeviceId(LogBean)
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoGetReferencedByDeviceIdOnLog(LogBean bean)
                    throws RuntimeDaoException{
        return getLogManager().getReferencedByDeviceId(bean);
    }
    //8-4
    /**
     * 设置外键fl_log(device_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see ILogManager#setReferencedByDeviceId(LogBean,DeviceBean)
     * @throws RuntimeDaoException
     */
    protected DeviceBean daoSetReferencedByDeviceIdOnLog(LogBean bean,DeviceBean beanToSet)
                    throws RuntimeDaoException{
        return getLogManager().setReferencedByDeviceId(bean,beanToSet);
    }
    //8-6
    /** transformer : LogBean to fl_log.device_id */
    protected final Function<LogBean,Integer> daoCastLogToDeviceId = new Function<LogBean,Integer>(){
            @Override
            public Integer apply(LogBean input) {
                return null == input ? null : input.getDeviceId();
            }};
    //8-8
    /** transformer : fl_log.id to fl_log.device_id */
    protected final Function<Integer,Integer> daoCastLogPkToDeviceId = new Function<Integer,Integer>(){
            @Override
            public Integer apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastLogToDeviceId.apply(daoGetLog(input));
            }};
    //8-3
    /**
     * 返回外键(fl_log.compare_face)引用的 fl_face 记录
     * @param bean
     * @see ILogManager#getReferencedByCompareFace(LogBean)
     * @throws RuntimeDaoException
     */
    protected FaceBean daoGetReferencedByCompareFaceOnLog(LogBean bean)
                    throws RuntimeDaoException{
        return getLogManager().getReferencedByCompareFace(bean);
    }
    //8-4
    /**
     * 设置外键fl_log(compare_face)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see ILogManager#setReferencedByCompareFace(LogBean,FaceBean)
     * @throws RuntimeDaoException
     */
    protected FaceBean daoSetReferencedByCompareFaceOnLog(LogBean bean,FaceBean beanToSet)
                    throws RuntimeDaoException{
        return getLogManager().setReferencedByCompareFace(bean,beanToSet);
    }
    //8-6
    /** transformer : LogBean to fl_log.compare_face */
    protected final Function<LogBean,Integer> daoCastLogToCompareFace = new Function<LogBean,Integer>(){
            @Override
            public Integer apply(LogBean input) {
                return null == input ? null : input.getCompareFace();
            }};
    //8-8
    /** transformer : fl_log.id to fl_log.compare_face */
    protected final Function<Integer,Integer> daoCastLogPkToCompareFace = new Function<Integer,Integer>(){
            @Override
            public Integer apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastLogToCompareFace.apply(daoGetLog(input));
            }};
    //8-3
    /**
     * 返回外键(fl_log.verify_feature)引用的 fl_feature 记录
     * @param bean
     * @see ILogManager#getReferencedByVerifyFeature(LogBean)
     * @throws RuntimeDaoException
     */
    protected FeatureBean daoGetReferencedByVerifyFeatureOnLog(LogBean bean)
                    throws RuntimeDaoException{
        return getLogManager().getReferencedByVerifyFeature(bean);
    }
    //8-4
    /**
     * 设置外键fl_log(verify_feature)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see ILogManager#setReferencedByVerifyFeature(LogBean,FeatureBean)
     * @throws RuntimeDaoException
     */
    protected FeatureBean daoSetReferencedByVerifyFeatureOnLog(LogBean bean,FeatureBean beanToSet)
                    throws RuntimeDaoException{
        return getLogManager().setReferencedByVerifyFeature(bean,beanToSet);
    }
    //8-6
    /** transformer : LogBean to fl_log.verify_feature */
    protected final Function<LogBean,String> daoCastLogToVerifyFeature = new Function<LogBean,String>(){
            @Override
            public String apply(LogBean input) {
                return null == input ? null : input.getVerifyFeature();
            }};
    //8-8
    /** transformer : fl_log.id to fl_log.verify_feature */
    protected final Function<Integer,String> daoCastLogPkToVerifyFeature = new Function<Integer,String>(){
            @Override
            public String apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastLogToVerifyFeature.apply(daoGetLog(input));
            }};
    //8-3
    /**
     * 返回外键(fl_log.person_id)引用的 fl_person 记录
     * @param bean
     * @see ILogManager#getReferencedByPersonId(LogBean)
     * @throws RuntimeDaoException
     */
    protected PersonBean daoGetReferencedByPersonIdOnLog(LogBean bean)
                    throws RuntimeDaoException{
        return getLogManager().getReferencedByPersonId(bean);
    }
    //8-4
    /**
     * 设置外键fl_log(person_id)引用为{@code beanToSet}指定的记录,
     * 如果{@code beanToSet}没有保存则先save
     * @param bean
     * @param beanToSet 被引用的记录
     * @see ILogManager#setReferencedByPersonId(LogBean,PersonBean)
     * @throws RuntimeDaoException
     */
    protected PersonBean daoSetReferencedByPersonIdOnLog(LogBean bean,PersonBean beanToSet)
                    throws RuntimeDaoException{
        return getLogManager().setReferencedByPersonId(bean,beanToSet);
    }
    //8-6
    /** transformer : LogBean to fl_log.person_id */
    protected final Function<LogBean,Integer> daoCastLogToPersonId = new Function<LogBean,Integer>(){
            @Override
            public Integer apply(LogBean input) {
                return null == input ? null : input.getPersonId();
            }};
    //8-8
    /** transformer : fl_log.id to fl_log.person_id */
    protected final Function<Integer,Integer> daoCastLogPkToPersonId = new Function<Integer,Integer>(){
            @Override
            public Integer apply(Integer input) {
                return null == input 
                    ? null 
                    : daoCastLogToPersonId.apply(daoGetLog(input));
            }};
    //12
    /** 
     * 添加新记录<br>
     * fl_log 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link LogBean#isNew()}返回{@code false},则抛出异常
     * @param logBean 要添加的新记录
     * @see TableManager#save(BaseBean)
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code logBean.isNew()} is {@code false}
     */
    protected LogBean daoAddLog(LogBean logBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == logBean || logBean.isNew(),"can be add,delete,but modify record for fl_log,so the _isNew field must be true");
        return getLogManager().save(daoCheckDuplicate(logBean));
    }
    //13
    /** 
     * 添加新记录(同步保存)<br>
     * fl_log 表只允许添加删除,不允许修改,所以如果数据库中已经存在相同记录或{@link LogBean#isNew()}返回{@code false},则抛出异常
     * see also {@link ILogManager#save(LogBean , DeviceBean, FaceBean, FeatureBean, PersonBean  )}<br>
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code logBean.isNew()} is {@code false}
     */
    protected LogBean daoAddLog(LogBean logBean
        , DeviceBean refDeviceByDeviceId 
        , FaceBean refFaceByCompareFace 
        , FeatureBean refFeatureByVerifyFeature 
        , PersonBean refPersonByPersonId 
        )throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == logBean || logBean.isNew(),"can be add,delete,but modify record for fl_log,so the _isNew field must be true");
        daoCheckDuplicate(logBean);
        return getLogManager().save(logBean
            , refDeviceByDeviceId 
            , refFaceByCompareFace 
            , refFeatureByVerifyFeature 
            , refPersonByPersonId 
            );
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddLog(LogBean)
     * @throws RuntimeDaoException
     */
    protected Collection<LogBean> daoAddLogs(Collection<LogBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        if(null != beans){
            for(LogBean bean : beans){
                daoAddLog(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddLogs(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<LogBean> daoAddLogsAsTransaction(final Collection<LogBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        try{
            return daoRunAsTransaction(new Callable<Collection<LogBean>>(){      
                @Override
                public Collection<LogBean> call() throws Exception {
                    return daoAddLogs(beans);
                }});
        }catch(RuntimeException e){
            throwCauseIfInstanceOf(e,DuplicateRecordException.class);
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_log 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see ILogManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoLoadLogByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getLogManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_log 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see ILogManager#loadUsingTemplate(LogBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoLoadLogUsingTemplate(LogBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getLogManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_log 的{@code column}字段的数据
     * @param column 有效的fl_log表字段名或{@link LogBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see ILogManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfLogAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getLogManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_log 表的所有记录
     * @see ILogManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoLoadLogAll()
                    throws RuntimeDaoException{
        return getLogManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_log 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountLogByWhere(String where)
                    throws RuntimeDaoException{
        return getLogManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadLogByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadLogIdByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromLogs(daoLoadLogByWhere(where,1,-1));
    }
    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadLogByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<LogBean> daoLoadLogByCreateTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadLogByWhere(makeWhere(timestamp,"create_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadLogByCreateTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoLoadLogByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadLogByCreateTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_log.create_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountLogByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountLogByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountLogByWhere(makeWhere(timestamp,"create_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_log.create_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadLogIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadLogIdByCreateTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadLogIdByWhere(makeWhere(timestamp,"create_time"));
    }


    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadLogByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<LogBean> daoLoadLogByVerifyTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadLogByWhere(makeWhere(timestamp,"verify_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadLogByVerifyTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<LogBean> daoLoadLogByVerifyTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadLogByVerifyTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_log.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountLogByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountLogByVerifyTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountLogByWhere(makeWhere(timestamp,"verify_time"));
    }
    //21
    /** 
     * (主动更新机制实现)<br>
     * 返回 fl_log.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadLogIdByWhere(String)
     * @throws RuntimeDaoException
     */
    protected List<Integer> daoLoadLogIdByVerifyTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadLogIdByWhere(makeWhere(timestamp,"verify_time"));
    }

    //////////// FL_STORE /////////
    //1
    /** 
     * 根据主键从数据库读取记录,没有找到记录返回{@code null}<br>
     * 
     * @param md5 主键,md5检验码 
     * @return 
     * @see IStoreManager#loadByPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected StoreBean daoGetStore(String md5)throws RuntimeDaoException{
        return getStoreManager().loadByPrimaryKey(md5);
    }
    //1-2
    /** 
     * 根据主键从数据库读取记录,没有找到记录抛出异常<br>
     * 
     * @param md5 主键,md5检验码 
     * @return 
     * @see IStoreManager#loadByPrimaryKeyChecked(String)
     * @throws RuntimeDaoException
     * @throws ObjectRetrievalException 没有找到记录
     */
    protected StoreBean daoGetStoreChecked(String md5)throws RuntimeDaoException,ObjectRetrievalException{
        return getStoreManager().loadByPrimaryKeyChecked(md5);
    }
    //2    
    /** 
     * 根据主键从数据库读取记录
     * @return 返回与输入参数下标对应的 StoreBean 列表,没有查到记录的返回{@link StoreBean#NULL}
     * @see IStoreManager#loadByPrimaryKey(Collection)
     * @see StoreBean#replaceNull(List)
     * @throws RuntimeDaoException
     */
    protected List<StoreBean> daoGetStores(Collection<String> md5Collection)
                    throws RuntimeDaoException{
        return StoreBean.replaceNull((getStoreManager().loadByPrimaryKey(md5Collection)));
    }
    //3  
    /** 
     * 删除主键列表({@code md5Collection})指定的记录
     * @return 返回删除的记录条数
     * @see IStoreManager#deleteByPrimaryKey(Collection)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteStoresByPrimaryKey(Collection<String> md5Collection)
                    throws RuntimeDaoException{
        int count =0;
        if(null != md5Collection){
            for(String md5:md5Collection){
                count += daoDeleteStore(md5);
            }
        }
        return count;
    }
    //3-5
    /** transformer : StoreBean to fl_store.md5 */ 
    protected final Function<StoreBean,String> daoCastStoreToPk = new Function<StoreBean,String>(){
            @Override
            public String apply(StoreBean input) {
                return null == input ? null : input.getMd5();
            }};
    //3-6
    /** transformer : fl_store.md5 to StoreBean */ 
    protected final Function<String,StoreBean> daoCastStoreFromPk = new Function<String,StoreBean>(){
            @Override
            public StoreBean apply(String input) {
                return daoGetStore(input);
            }};
    //3-8
    /**
     * unwrap primary key from {@link StoreBean}<br>
     * if {@code beans} is {@code null},return a empty list(immutable)
     *
     * @param beans {@link StoreBean} collection
     * @return primary key list
     * @see IStoreManager#toPrimaryKeyList(Collection)
     */
    protected List<String> daoToPrimaryKeyListFromStores(Collection<StoreBean> beans){
        if (null == beans){
            return ImmutableList.of();
        }else{
            return getStoreManager().toPrimaryKeyList(beans);
        }
    }
    //3-9
    /**
     * unwrap primary key from {@link StoreBean}<br>
     *
     * the returned list is a transformed view of {@code beans}; 
     * changes to {@code beans} will be reflected in the returned list and vice versa. 
     *
     * if {@code beans} is {@code null},return a empty list(immutable)
     * @param beans {@link StoreBean} list
     * @return primary key list 
     * @see Lists#transform(List, Function)
     */
    protected List<String> daoToPrimaryKeyListFromStores(List<StoreBean> beans){
        if(null == beans){
            return ImmutableList.of();
        }else{
            return Lists.transform(beans,daoCastStoreToPk);
        }
    }
    //4
    /** 
     *　判断主键指定的记录是否存在
     * 
     * @param md5 主键,md5检验码 
     * @see IStoreManager#existsPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsStore(String md5)
                    throws RuntimeDaoException{
        return getStoreManager().existsPrimaryKey(md5);
    }
    //4-2
    /** 
     *　判断指定的记录是否存在
     * @see IStoreManager#existsByPrimaryKey(Object)
     * @throws RuntimeDaoException
     */
    protected boolean daoExistsStore(StoreBean bean)
                    throws RuntimeDaoException{
        return getStoreManager().existsByPrimaryKey(bean);
    }
    //5
    /**
     * 删除主键指定的记录
     * 
     * @param md5 主键,md5检验码  
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     * @see IStoreManager#deleteByPrimaryKey(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteStore(String md5)
                    throws RuntimeDaoException{
        return getStoreManager().deleteByPrimaryKey(md5);
    }
    //5-2
    /**
     * 删除指定的记录
     * @param bean 要删除的记录
     * @return 返回删除的记录条数(1),如果{@code bean}为{@code null}或记录不存在返回0
     * @see #daoDeleteStore(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteStore(StoreBean bean)
                    throws RuntimeDaoException{
        return null == bean ? 0 : daoDeleteStore(bean.getMd5());
    }
    //6
    /**
     * 删除{@code storeBeanCollection}列表指定的记录
     * @return 返回删除的记录条数
     * @see #daoDeleteStore(String)
     * @throws RuntimeDaoException
     */
    protected int daoDeleteStores(Collection<StoreBean> beans)
                    throws RuntimeDaoException{
        int count =0;
        if(null != beans){        
            for(StoreBean bean:beans){
                count += daoDeleteStore(bean);
            }
        }
        return count;
    }
    //7
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     */
    protected StoreBean daoCheckDuplicate(StoreBean storeBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        try{
            return getStoreManager().checkDuplicate(storeBean);
        }catch(ObjectRetrievalException e){
            throw new DuplicateRecordException();
        }
    }
    //7-3
    /** 
     * 检查数据库中是否有(主键)相同的记录,如果有则抛出异常
     * 
     * @param md5 主键,md5检验码 
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws DuplicateRecordException if exists duplicated row
     * @return always {@code md5OfStore} 
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException
     */
    protected String daoCheckDuplicateStore(String md5)
                    throws RuntimeDaoException,DuplicateRecordException{
        if(getStoreManager().existsPrimaryKey(md5)){
            throw new DuplicateRecordException();
        }
        return md5;
    }
    //12
    /** 
     * 添加新记录<br>
     * fl_store 表只支持添加删除,不支持修改,所以如果数据库中已经存在相同记录或{@link StoreBean#isNew()}返回{@code false},则抛出异常
     * @param storeBean 要添加的新记录
     * @see TableManager#save(BaseBean)
     * @see TableManager#checkDuplicate(BaseBean)
     * @throws RuntimeDaoException
     * @throws DuplicateRecordException if exists duplicated row
     * @throws IllegalArgumentException if {@code storeBean.isNew()} is {@code false}
     */
    protected StoreBean daoAddStore(StoreBean storeBean)
                    throws RuntimeDaoException,DuplicateRecordException{
        checkArgument(null == storeBean || storeBean.isNew(),"can be add,delete,but modify record for fl_store,so the _isNew field must be true");
        return getStoreManager().save(daoCheckDuplicate(storeBean));
    }
    //12-3-3
    /** 
     * 添加新记录<br>
     * @param beans 要添加的新记录集合
     * @return always {@code beans}
     * @see #daoAddStore(StoreBean)
     * @throws RuntimeDaoException
     */
    protected Collection<StoreBean> daoAddStores(Collection<StoreBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        if(null != beans){
            for(StoreBean bean : beans){
                daoAddStore(bean);
            }
        }
        return beans;
    }
    //12-3-5
    /** 
     * {@link #daoAddStores(Collection)}的事务化版本
     * @throws RuntimeDaoException
     */
    protected Collection<StoreBean> daoAddStoresAsTransaction(final Collection<StoreBean> beans)
                    throws RuntimeDaoException ,DuplicateRecordException{
        try{
            return daoRunAsTransaction(new Callable<Collection<StoreBean>>(){      
                @Override
                public Collection<StoreBean> call() throws Exception {
                    return daoAddStores(beans);
                }});
        }catch(RuntimeException e){
            throwCauseIfInstanceOf(e,DuplicateRecordException.class);
            throw e;
        }
    }
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_store 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IStoreManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<StoreBean> daoLoadStoreByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getStoreManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_store 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IStoreManager#loadUsingTemplate(StoreBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<StoreBean> daoLoadStoreUsingTemplate(StoreBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getStoreManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_store 的{@code column}字段的数据
     * @param column 有效的fl_store表字段名或{@link StoreBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see IStoreManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfStoreAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getStoreManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_store 表的所有记录
     * @see IStoreManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<StoreBean> daoLoadStoreAll()
                    throws RuntimeDaoException{
        return getStoreManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_store 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountStoreByWhere(String where)
                    throws RuntimeDaoException{
        return getStoreManager().countWhere(where);
    }
    //18
    /** 
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #daoLoadStoreByWhere(String,int,int)
     * @throws RuntimeDaoException
     */
    protected List<String> daoLoadStoreMd5ByWhere(String where)
                    throws RuntimeDaoException{
        return daoToPrimaryKeyListFromStores(daoLoadStoreByWhere(where,1,-1));
    }



    //////////// FL_LOG_LIGHT /////////
    //16
    /**
     * 查询{@code where} SQL条件语句指定的 fl_log_light 记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see ILogLightManager#loadByWhereAsList(String,int[],int,int)
     * @throws RuntimeDaoException
     */
    protected List<LogLightBean> daoLoadLogLightByWhere(String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getLogLightManager().loadByWhereAsList(where,null,startRow,numRows);
    }
    //16-2
    /**
     * 以{@code bean} 为模板查询 fl_log_light 记录
     * @param bean 模板对象
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see ILogLightManager#loadUsingTemplate(LogLightBean,int,int)
     * @throws RuntimeDaoException
     */
    protected List<LogLightBean> daoLoadLogLightUsingTemplate(LogLightBean bean,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getLogLightManager().loadUsingTemplateAsList(bean,startRow,numRows);
    }
    //16-3
    /**
     * 查询 fl_log_light 的{@code column}字段的数据
     * @param column 有效的fl_log_light表字段名或{@link LogLightBean} 字段名
     * @param distinct 只返回不重复记录
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return {@code column}字段记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @see ILogLightManager#loadColumnAsList(String,boolean,String,int,int)
     * @throws RuntimeDaoException
     */
    protected <T>List<T> daoLoadColumnOfLogLightAsList(String column,boolean distinct,String where,int startRow, int numRows)
                    throws RuntimeDaoException{
        return getLogLightManager().loadColumnAsList(column, distinct, where, startRow, numRows);
    }
    //17
    /**
     * 返回 fl_log_light 表的所有记录
     * @see ILogLightManager#loadAllAsList()
     * @throws RuntimeDaoException
     */
    protected List<LogLightBean> daoLoadLogLightAll()
                    throws RuntimeDaoException{
        return getLogLightManager().loadAllAsList();
    }
    //17-2
    /**
     * 返回满足{@code where} SQL条件语句的 fl_log_light 记录总数
     * @see TableManager#countWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountLogLightByWhere(String where)
                    throws RuntimeDaoException{
        return getLogLightManager().countWhere(where);
    }


    //19
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #daoLoadLogLightByWhere(String,int,int)
     * @throws RuntimeDaoException
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     */
    protected List<LogLightBean> daoLoadLogLightByVerifyTime(Date timestamp,int startRow, int numRows)
                    throws RuntimeDaoException{
        return daoLoadLogLightByWhere(makeWhere(timestamp,"verify_time"),startRow,numRows);
    }
    //20
    /** 
     * 参见 {@link #daoLoadLogLightByVerifyTime(Date,int,int)} 
     * @throws RuntimeDaoException
     */
    protected List<LogLightBean> daoLoadLogLightByVerifyTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoLoadLogLightByVerifyTime(timestamp,1,-1);
    }
    //20-5
    /**
     * 返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #daoCountLogLightByWhere(String)
     * @throws RuntimeDaoException
     */
    protected int daoCountLogLightByVerifyTime(Date timestamp)
                    throws RuntimeDaoException{
        return daoCountLogLightByWhere(makeWhere(timestamp,"verify_time"));
    }

}
