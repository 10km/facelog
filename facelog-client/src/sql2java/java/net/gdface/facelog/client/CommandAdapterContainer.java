// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: command.adapter.container.java.vm
// ______________________________________________________

package net.gdface.facelog.client;

import java.net.URL;
import java.util.List;
import java.util.Map;

/**
 * 命令执行器容器对象<br>
 * 允许应用项目用不同的{@link CommandAdapter}对象分别实现设备命令
 * @author guyadong
 *
 */
public class CommandAdapterContainer extends CommandAdapter{
    /** {@link Cmd#parameter} 的命令执行器 */
    private CommandAdapter parameterAdapter;
    /** setter of {@link #parameterAdapter} */
    public CommandAdapterContainer setParameterAdapter(CommandAdapter parameterAdapter){
        this.parameterAdapter = parameterAdapter;
        return this;
    }
    /** getter of {@link #parameterAdapter} */
    public CommandAdapter getParameterAdapter(){
        return this.parameterAdapter;
    }
    /** 
     * 调用 {@link #parameterAdapter} 命令执行器<br>
     * 如果 {@link #parameterAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public void parameter(String key,String value)throws DeviceCmdException{
        if(null != this.parameterAdapter){
            this.parameterAdapter.parameter(key,value);
        }else{
            super.parameter(key,value);
        }
    }
    /** {@link Cmd#config} 的命令执行器 */
    private CommandAdapter configAdapter;
    /** setter of {@link #configAdapter} */
    public CommandAdapterContainer setConfigAdapter(CommandAdapter configAdapter){
        this.configAdapter = configAdapter;
        return this;
    }
    /** getter of {@link #configAdapter} */
    public CommandAdapter getConfigAdapter(){
        return this.configAdapter;
    }
    /** 
     * 调用 {@link #configAdapter} 命令执行器<br>
     * 如果 {@link #configAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public void config(Map<String,String> properties)throws DeviceCmdException{
        if(null != this.configAdapter){
            this.configAdapter.config(properties);
        }else{
            super.config(properties);
        }
    }
    /** {@link Cmd#status} 的命令执行器 */
    private CommandAdapter statusAdapter;
    /** setter of {@link #statusAdapter} */
    public CommandAdapterContainer setStatusAdapter(CommandAdapter statusAdapter){
        this.statusAdapter = statusAdapter;
        return this;
    }
    /** getter of {@link #statusAdapter} */
    public CommandAdapter getStatusAdapter(){
        return this.statusAdapter;
    }
    /** 
     * 调用 {@link #statusAdapter} 命令执行器<br>
     * 如果 {@link #statusAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public Object status(String name)throws DeviceCmdException{
        return null == this.statusAdapter 
            ? super.status(name)
            : this.statusAdapter.status(name);
    }
    /** {@link Cmd#report} 的命令执行器 */
    private CommandAdapter reportAdapter;
    /** setter of {@link #reportAdapter} */
    public CommandAdapterContainer setReportAdapter(CommandAdapter reportAdapter){
        this.reportAdapter = reportAdapter;
        return this;
    }
    /** getter of {@link #reportAdapter} */
    public CommandAdapter getReportAdapter(){
        return this.reportAdapter;
    }
    /** 
     * 调用 {@link #reportAdapter} 命令执行器<br>
     * 如果 {@link #reportAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public Map<String,Object> report(List<String> names)throws DeviceCmdException{
        return null == this.reportAdapter 
            ? super.report(names)
            : this.reportAdapter.report(names);
    }
    /** {@link Cmd#enable} 的命令执行器 */
    private CommandAdapter enableAdapter;
    /** setter of {@link #enableAdapter} */
    public CommandAdapterContainer setEnableAdapter(CommandAdapter enableAdapter){
        this.enableAdapter = enableAdapter;
        return this;
    }
    /** getter of {@link #enableAdapter} */
    public CommandAdapter getEnableAdapter(){
        return this.enableAdapter;
    }
    /** 
     * 调用 {@link #enableAdapter} 命令执行器<br>
     * 如果 {@link #enableAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public void enable(Boolean enable)throws DeviceCmdException{
        if(null != this.enableAdapter){
            this.enableAdapter.enable(enable);
        }else{
            super.enable(enable);
        }
    }
    /** {@link Cmd#isEnable} 的命令执行器 */
    private CommandAdapter isEnableAdapter;
    /** setter of {@link #isEnableAdapter} */
    public CommandAdapterContainer setIsEnableAdapter(CommandAdapter isEnableAdapter){
        this.isEnableAdapter = isEnableAdapter;
        return this;
    }
    /** getter of {@link #isEnableAdapter} */
    public CommandAdapter getIsEnableAdapter(){
        return this.isEnableAdapter;
    }
    /** 
     * 调用 {@link #isEnableAdapter} 命令执行器<br>
     * 如果 {@link #isEnableAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public Boolean isEnable(String message)throws DeviceCmdException{
        return null == this.isEnableAdapter 
            ? super.isEnable(message)
            : this.isEnableAdapter.isEnable(message);
    }
    /** {@link Cmd#reset} 的命令执行器 */
    private CommandAdapter resetAdapter;
    /** setter of {@link #resetAdapter} */
    public CommandAdapterContainer setResetAdapter(CommandAdapter resetAdapter){
        this.resetAdapter = resetAdapter;
        return this;
    }
    /** getter of {@link #resetAdapter} */
    public CommandAdapter getResetAdapter(){
        return this.resetAdapter;
    }
    /** 
     * 调用 {@link #resetAdapter} 命令执行器<br>
     * 如果 {@link #resetAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public void reset()throws DeviceCmdException{
        if(null != this.resetAdapter){
            this.resetAdapter.reset();
        }else{
            super.reset();
        }
    }
    /** {@link Cmd#time} 的命令执行器 */
    private CommandAdapter timeAdapter;
    /** setter of {@link #timeAdapter} */
    public CommandAdapterContainer setTimeAdapter(CommandAdapter timeAdapter){
        this.timeAdapter = timeAdapter;
        return this;
    }
    /** getter of {@link #timeAdapter} */
    public CommandAdapter getTimeAdapter(){
        return this.timeAdapter;
    }
    /** 
     * 调用 {@link #timeAdapter} 命令执行器<br>
     * 如果 {@link #timeAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public void time(Long unixTimestamp)throws DeviceCmdException{
        if(null != this.timeAdapter){
            this.timeAdapter.time(unixTimestamp);
        }else{
            super.time(unixTimestamp);
        }
    }
    /** {@link Cmd#update} 的命令执行器 */
    private CommandAdapter updateAdapter;
    /** setter of {@link #updateAdapter} */
    public CommandAdapterContainer setUpdateAdapter(CommandAdapter updateAdapter){
        this.updateAdapter = updateAdapter;
        return this;
    }
    /** getter of {@link #updateAdapter} */
    public CommandAdapter getUpdateAdapter(){
        return this.updateAdapter;
    }
    /** 
     * 调用 {@link #updateAdapter} 命令执行器<br>
     * 如果 {@link #updateAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public void update(URL url,String version)throws DeviceCmdException{
        if(null != this.updateAdapter){
            this.updateAdapter.update(url,version);
        }else{
            super.update(url,version);
        }
    }
    /** {@link Cmd#message} 的命令执行器 */
    private CommandAdapter messageAdapter;
    /** setter of {@link #messageAdapter} */
    public CommandAdapterContainer setMessageAdapter(CommandAdapter messageAdapter){
        this.messageAdapter = messageAdapter;
        return this;
    }
    /** getter of {@link #messageAdapter} */
    public CommandAdapter getMessageAdapter(){
        return this.messageAdapter;
    }
    /** 
     * 调用 {@link #messageAdapter} 命令执行器<br>
     * 如果 {@link #messageAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public void message(String message)throws DeviceCmdException{
        if(null != this.messageAdapter){
            this.messageAdapter.message(message);
        }else{
            super.message(message);
        }
    }
    /** {@link Cmd#custom} 的命令执行器 */
    private CommandAdapter customAdapter;
    /** setter of {@link #customAdapter} */
    public CommandAdapterContainer setCustomAdapter(CommandAdapter customAdapter){
        this.customAdapter = customAdapter;
        return this;
    }
    /** getter of {@link #customAdapter} */
    public CommandAdapter getCustomAdapter(){
        return this.customAdapter;
    }
    /** 
     * 调用 {@link #customAdapter} 命令执行器<br>
     * 如果 {@link #customAdapter} 为 {@code null},则调用父类方法抛出{@link UnsupportCmdExeption}异常
     */
    @Override
    public Object custom(String cmdName,Map<String,Object> parameters)throws DeviceCmdException{
        return null == this.customAdapter 
            ? super.custom(cmdName,parameters)
            : this.customAdapter.custom(cmdName,parameters);
    }
}