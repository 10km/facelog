// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: service.client.java.vm
// ______________________________________________________
package net.gdface.facelog.client;
import org.apache.thrift.TApplicationException;
import com.facebook.swift.service.RuntimeTApplicationException;
import static com.google.common.base.Preconditions.checkNotNull;
import java.nio.ByteBuffer;
import java.util.*;

/**
 * 定义 FaceLog 服务接口<br>
 * <ul>
 * <li>所有标明为图像数据的参数,是指具有特定图像格式的图像数据(如jpg,png...),而非无格式的原始点阵位图</li>
 * <li>在执行涉及数据库操作的方法时如果数据库发生异常，则会被封装到{@link WrapDAOException}抛出，
 * 所有非{@link RuntimeException}异常会被封装在{@link ServiceRuntime}抛出</li>
 * <li>所有数据库对象(Java Bean,比如 {@link PersonBean}),在执行保存操作(save)时,
 * 如果为新增记录({@link PersonBean#isNew()}为true),则执行insert操作,否则执行update操作,
 * 如果数据库已经存在指定的记录而{@code isNew()}为{@code true},则那么执行insert操作数据库就会抛出异常，
 * 所以请在执行save时特别注意{@code isNew()}状态</li>
 * </ul>
 * remote implementation of the service IFaceLog<br>
 * all method comments be copied from {@code net.gdface.facelog.FaceLogDefinition.java}<br>
 * <b>NOTE:</b>methods with 'Generic' suffix support generic type argument for {@code byte[]}.<br>
 * @author guyadong
 */
class IFaceLogClient implements Constant{
    
    /** bean converter between {@link DeviceBean} and corresponding thrift bean */
    private IBeanConverter<DeviceBean,net.gdface.facelog.client.thrift.DeviceBean> converterDeviceBean = ThriftConverter.converterDeviceBean;
    /** bean converter between {@link DeviceGroupBean} and corresponding thrift bean */
    private IBeanConverter<DeviceGroupBean,net.gdface.facelog.client.thrift.DeviceGroupBean> converterDeviceGroupBean = ThriftConverter.converterDeviceGroupBean;
    /** bean converter between {@link FaceBean} and corresponding thrift bean */
    private IBeanConverter<FaceBean,net.gdface.facelog.client.thrift.FaceBean> converterFaceBean = ThriftConverter.converterFaceBean;
    /** bean converter between {@link FeatureBean} and corresponding thrift bean */
    private IBeanConverter<FeatureBean,net.gdface.facelog.client.thrift.FeatureBean> converterFeatureBean = ThriftConverter.converterFeatureBean;
    /** bean converter between {@link ImageBean} and corresponding thrift bean */
    private IBeanConverter<ImageBean,net.gdface.facelog.client.thrift.ImageBean> converterImageBean = ThriftConverter.converterImageBean;
    /** bean converter between {@link LogBean} and corresponding thrift bean */
    private IBeanConverter<LogBean,net.gdface.facelog.client.thrift.LogBean> converterLogBean = ThriftConverter.converterLogBean;
    /** bean converter between {@link PermitBean} and corresponding thrift bean */
    private IBeanConverter<PermitBean,net.gdface.facelog.client.thrift.PermitBean> converterPermitBean = ThriftConverter.converterPermitBean;
    /** bean converter between {@link PersonBean} and corresponding thrift bean */
    private IBeanConverter<PersonBean,net.gdface.facelog.client.thrift.PersonBean> converterPersonBean = ThriftConverter.converterPersonBean;
    /** bean converter between {@link PersonGroupBean} and corresponding thrift bean */
    private IBeanConverter<PersonGroupBean,net.gdface.facelog.client.thrift.PersonGroupBean> converterPersonGroupBean = ThriftConverter.converterPersonGroupBean;
    /** bean converter between {@link LogLightBean} and corresponding thrift bean */
    private IBeanConverter<LogLightBean,net.gdface.facelog.client.thrift.LogLightBean> converterLogLightBean = ThriftConverter.converterLogLightBean;

    private final net.gdface.facelog.client.thrift.IFaceLog service;
    /**
     * constructor 
     * @param service a instance of net.gdface.facelog.client.thrift.IFaceLog created by Swift, must not be null
     */
    IFaceLogClient(net.gdface.facelog.client.thrift.IFaceLog service){
        checkNotNull(service,"service is null");
        this.service = service;
    }
    /**
     * 增加一个人脸特征记录，如果记录已经存在则抛出异常
     * @param feature 特征数据
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param faecBeans 生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null
     * @return 保存的人脸特征记录{@link FeatureBean}
     * @throws ServiceRuntime
     * @throws DuplicateReord
     */
    // 1 SERIVCE PORT : addFeature
    public FeatureBean addFeature(
            byte[] feature,
            int personId,
            List<FaceBean> faecBeans)throws net.gdface.facelog.client.thrift.DuplicateReord{
        try{
            return converterFeatureBean.fromRight(service.addFeature(
                    feature,
                    personId,
                    converterFaceBean.toRight(faecBeans)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /** 
     * Generic version of {@link #addFeature(byte[],int,List)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // 1 GENERIC
    public FeatureBean addFeatureGeneric(
            Object feature,
            int personId,
            List<FaceBean> faecBeans)throws net.gdface.facelog.client.thrift.DuplicateReord{
        try{
            return converterFeatureBean.fromRight(service.addFeature(
                    GenericUtils.toBytes(feature),
                    personId,
                    converterFaceBean.toRight(faecBeans)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 增加一个人脸特征记录,特征数据由faceInfo指定的多张图像合成，如果记录已经存在则抛出异常
     * @param feature 特征数据
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param faceInfo 生成特征数据的图像及人脸信息对象(每张图对应一张人脸),可为null
     * @param deviceId 图像来源设备id,可为null
     * @return 保存的人脸特征记录{@link FeatureBean}
     * @throws ServiceRuntime
     * @throws DuplicateReord
     */
    // 2 SERIVCE PORT : addFeatureMulti
    public FeatureBean addFeature(
            byte[] feature,
            int personId,
            Map<ByteBuffer, FaceBean> faceInfo,
            int deviceId)throws net.gdface.facelog.client.thrift.DuplicateReord{
        try{
            return converterFeatureBean.fromRight(service.addFeatureMulti(
                    feature,
                    personId,
                    GenericUtils.toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                    deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /** 
     * Generic version of {@link #addFeature(byte[],int,Map,int)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // 2 GENERIC
    public FeatureBean addFeatureGeneric(
            Object feature,
            int personId,
            Map<ByteBuffer, FaceBean> faceInfo,
            int deviceId)throws net.gdface.facelog.client.thrift.DuplicateReord{
        try{
            return converterFeatureBean.fromRight(service.addFeatureMulti(
                    GenericUtils.toBytes(feature),
                    personId,
                    GenericUtils.toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                    deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存图像数据,如果图像数据已经存在，则抛出异常
     * @param imageData 图像数据
     * @param deviceId 图像来源设备id,可为null
     * @param faceBean 关联的人脸信息对象,可为null
     * @param personId 关联的人员id(fl_person.id),可为null
     * @return 
     * @throws DuplicateReord 数据库中已经存在要保存的图像数据
     * @throws ServiceRuntime
     */
    // 3 SERIVCE PORT : addImage
    public ImageBean addImage(
            byte[] imageData,
            int deviceId,
            FaceBean faceBean,
            int personId)throws net.gdface.facelog.client.thrift.DuplicateReord{
        try{
            return converterImageBean.fromRight(service.addImage(
                    imageData,
                    deviceId,
                    converterFaceBean.toRight(faceBean),
                    personId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /** 
     * Generic version of {@link #addImage(byte[],int,FaceBean,int)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // 3 GENERIC
    public ImageBean addImageGeneric(
            Object imageData,
            int deviceId,
            FaceBean faceBean,
            int personId)throws net.gdface.facelog.client.thrift.DuplicateReord{
        try{
            return converterImageBean.fromRight(service.addImage(
                    GenericUtils.toBytes(imageData),
                    deviceId,
                    converterFaceBean.toRight(faceBean),
                    personId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 添加一条验证日志记录
     * @param bean
     * @throws ServiceRuntime
     */
    // 4 SERIVCE PORT : addLog
    public void addLog(LogBean bean){
        try{
            service.addLog(converterLogBean.toRight(bean));
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 添加一组验证日志记录(事务存储)
     * @param beans
     * @throws ServiceRuntime
     */
    // 5 SERIVCE PORT : addLogs
    public void addLogs(List<LogBean> beans){
        try{
            service.addLogs(converterLogBean.toRight(beans));
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 添加一个(允许)通行关联记录:允许{@code personGroup}指定的人员组在
     * {@code deviceGroup}指定的设备组下属的所有设备通行
     * @param deviceGroup
     * @param personGroup
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 6 SERIVCE PORT : addPermit
    public void addPermit(
            DeviceGroupBean deviceGroup,
            PersonGroupBean personGroup){
        try{
            service.addPermit(
                    converterDeviceGroupBean.toRight(deviceGroup),
                    converterPersonGroupBean.toRight(personGroup));
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }

    // 7 SERIVCE PORT : addPermitById
    public void addPermit(
            int deviceGroupId,
            int personGroupId){
        try{
            service.addPermitById(
                    deviceGroupId,
                    personGroupId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回满足{@code where} SQL条件语句的fl_device记录总数
     * @param where
     * @return 
     * @throws ServiceRuntime
     */
    // 8 SERIVCE PORT : countDeviceByWhere
    public int countDeviceByWhere(String where){
        try{
            return service.countDeviceByWhere(where);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回满足{@code where} SQL条件语句的fl_device_group记录总数
     */
    // 9 SERIVCE PORT : countDeviceGroupByWhere
    public int countDeviceGroupByWhere(String where){
        try{
            return service.countDeviceGroupByWhere(where);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回满足{@code where}条件的日志记录(fl_log)数目
     * @param where 为{@code null}时返回所有记录
     * @return 
     * @throws ServiceRuntime
     */
    // 10 SERIVCE PORT : countLogByWhere
    public int countLogByWhere(String where){
        try{
            return service.countLogByWhere(where);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #countLogLightByWhere(String)
     * @throws ServiceRuntime
     */
    // 11 SERIVCE PORT : countLogLightByVerifyTime
    public int countLogLightByVerifyTime(Date timestamp){
        try{
            return service.countLogLightByVerifyTime(GenericUtils.toLong(timestamp,Date.class));
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回符合{@code where}条件的记录条数
     * @param where
     * @return 
     * @throws ServiceRuntime
     */
    // 12 SERIVCE PORT : countLogLightByWhere
    public int countLogLightByWhere(String where){
        try{
            return service.countLogLightByWhere(where);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回满足{@code where}条件的日志记录(fl_person)数目
     * @param where 为{@code null}时返回所有记录
     * @return 
     * @throws ServiceRuntime
     */
    // 13 SERIVCE PORT : countPersonByWhere
    public int countPersonByWhere(String where){
        try{
            return service.countPersonByWhere(where);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person_group 记录总数
     * @see {@link IPersonGroupManager#Where(String)}
     */
    // 14 SERIVCE PORT : countPersonGroupByWhere
    public int countPersonGroupByWhere(String where){
        try{
            return service.countPersonGroupByWhere(where);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除 personId 关联的所有特征(feature)记录
     * @param personId
     * @param deleteImage 是否删除关联的 image记录
     * @return 
     * @see #deleteFeature(String, boolean)
     * @throws ServiceRuntime
     */
    // 15 SERIVCE PORT : deleteAllFeaturesByPersonId
    public int deleteAllFeaturesByPersonId(
            int personId,
            boolean deleteImage){
        try{
            return service.deleteAllFeaturesByPersonId(
                    personId,
                    deleteImage);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除{@code deviceGroupId}指定的设备组<br>
     * 组删除后，所有子节点记录不会被删除，但parent字段会被自动默认为{@code null}
     * @param deviceGroupId
     * @return 返回删除的记录条数
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 16 SERIVCE PORT : deleteDeviceGroup
    public int deleteDeviceGroup(int deviceGroupId){
        try{
            return service.deleteDeviceGroup(deviceGroupId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除featureMd5指定的特征记录及关联的face记录
     * @param featureMd5
     * @param deleteImage 是否删除关联的 image记录
     * @return 返回删除的特征记录关联的图像(image)记录的MD5<br>
     * {@code deleteImage}为{@code true}时返回空表
     * @throws ServiceRuntime
     */
    // 17 SERIVCE PORT : deleteFeature
    public List<String> deleteFeature(
            String featureMd5,
            boolean deleteImage){
        try{
            return service.deleteFeature(
                    featureMd5,
                    deleteImage);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除imageMd5指定图像及其缩略图
     * @param imageMd5
     * @return 删除成功返回1,否则返回0
     * @throws ServiceRuntime
     */
    // 18 SERIVCE PORT : deleteImage
    public int deleteImage(String imageMd5){
        try{
            return service.deleteImage(imageMd5);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除通行关联记录,参见{@link #addPermit(DeviceGroupBean, PersonGroupBean)}
     * @param deviceGroup
     * @param personGroup
     * @return 删除成功返回1,否则返回0
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 19 SERIVCE PORT : deletePermit
    public int deletePermit(
            DeviceGroupBean deviceGroup,
            PersonGroupBean personGroup){
        try{
            return service.deletePermit(
                    converterDeviceGroupBean.toRight(deviceGroup),
                    converterPersonGroupBean.toRight(personGroup));
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除personId指定的人员(person)记录及关联的所有记录
     * @param personId
     * @return 
     * @throws ServiceRuntime
     */
    // 20 SERIVCE PORT : deletePerson
    public int deletePerson(int personId){
        try{
            return service.deletePerson(personId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除papersNum指定的人员(person)记录及关联的所有记录
     * @param papersNum 证件号码
     * @return 返回删除的 person 记录数量
     * @throws ServiceRuntime
     * @see {@link #deletePerson(int)}
     */
    // 21 SERIVCE PORT : deletePersonByPapersNum
    public int deletePersonByPapersNum(String papersNum){
        try{
            return service.deletePersonByPapersNum(papersNum);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除{@code personGroupId}指定的人员组<br>
     * 组删除后，所有子节点记录不会被删除，但parent字段会被自动默认为{@code null}
     * @param personGroupId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 22 SERIVCE PORT : deletePersonGroup
    public int deletePersonGroup(int personGroupId){
        try{
            return service.deletePersonGroup(personGroupId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除personIdList指定的人员(person)记录及关联的所有记录
     * @param personIdList 人员id列表
     * @return 返回删除的 person 记录数量
     * @throws ServiceRuntime
     */
    // 23 SERIVCE PORT : deletePersons
    public int deletePersons(List<Integer> personIdList){
        try{
            return service.deletePersons(personIdList);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 删除papersNum指定的人员(person)记录及关联的所有记录
     * @param papersNumlist 证件号码列表
     * @return 返回删除的 person 记录数量
     * @throws ServiceRuntime
     */
    // 24 SERIVCE PORT : deletePersonsByPapersNum
    public int deletePersonsByPapersNum(List<String> papersNumlist){
        try{
            return service.deletePersonsByPapersNum(papersNumlist);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 设置 personId 指定的人员为禁止状态
     * @param personId
     * @throws ServiceRuntime
     * @see #setPersonExpiryDate(int, long)
     */
    // 25 SERIVCE PORT : disablePerson
    public void disablePerson(int personId){
        try{
            service.disablePerson(personId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 设置 personIdList 指定的人员为禁止状态
     * @param personIdList 人员id列表
     * @throws ServiceRuntime
     */
    // 26 SERIVCE PORT : disablePersonList
    public void disablePerson(List<Integer> personIdList){
        try{
            service.disablePersonList(personIdList);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 判断id指定的设备记录是否存在
     * @param id
     * @return 
     * @throws ServiceRuntime
     */
    // 27 SERIVCE PORT : existsDevice
    public boolean existsDevice(int id){
        try{
            return service.existsDevice(id);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 判断md5指定的特征记录是否存在
     * @param md5
     * @return 
     * @throws ServiceRuntime
     */
    // 28 SERIVCE PORT : existsFeature
    public boolean existsFeature(String md5){
        try{
            return service.existsFeature(md5);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 判断md5指定的图像记录是否存在
     * @param md5
     * @return 
     * @throws ServiceRuntime
     */
    // 29 SERIVCE PORT : existsImage
    public boolean existsImage(String md5){
        try{
            return service.existsImage(md5);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 判断是否存在personId指定的人员记录
     * @param persionId
     * @return 
     * @throws ServiceRuntime
     */
    // 30 SERIVCE PORT : existsPerson
    public boolean existsPerson(int persionId){
        try{
            return service.existsPerson(persionId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回{@code deviceId}指定的设备记录
     * @param deviceId
     * @return 
     * @throws ServiceRuntime
     */
    // 31 SERIVCE PORT : getDevice
    public DeviceBean getDevice(int deviceId){
        try{
            return converterDeviceBean.fromRight(service.getDevice(deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据设备组id返回数据库记录
     * @param deviceGroupId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 32 SERIVCE PORT : getDeviceGroup
    public DeviceGroupBean getDeviceGroup(int deviceGroupId){
        try{
            return converterDeviceGroupBean.fromRight(service.getDeviceGroup(deviceGroupId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回设备组id列表指定的数据库记录
     * @param groupIdList
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 33 SERIVCE PORT : getDeviceGroups
    public List<DeviceGroupBean> getDeviceGroups(List<Integer> groupIdList){
        try{
            return converterDeviceGroupBean.fromRight(service.getDeviceGroups(groupIdList));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回featureMd5的人脸特征记录关联的设备id<br>
     * @param featureMd5
     * @return 如果没有关联的设备则返回{@code null}
     * @throws ServiceRuntime
     */
    // 34 SERIVCE PORT : getDeviceIdOfFeature
    public Integer getDeviceIdOfFeature(String featureMd5){
        try{
            return service.getDeviceIdOfFeature(featureMd5);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回 {@code idList} 指定的设备记录
     * @param idList
     * @return 
     * @throws ServiceRuntime
     */
    // 35 SERIVCE PORT : getDevices
    public List<DeviceBean> getDevices(List<Integer> idList){
        try{
            return converterDeviceBean.fromRight(service.getDevices(idList));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回{@code deviceGroupId}指定的设备组下属的所有设备记录<br>
     * 如果没有下属设备记录则返回空表
     * @param deviceGroupId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 36 SERIVCE PORT : getDevicesOfGroup
    public List<DeviceBean> getDevicesOfGroup(int deviceGroupId){
        try{
            return converterDeviceBean.fromRight(service.getDevicesOfGroup(deviceGroupId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据MD5校验码返回人脸特征数据记录
     * @param md5
     * @return 如果数据库中没有对应的数据则返回null
     * @throws ServiceRuntime
     */
    // 37 SERIVCE PORT : getFeature
    public FeatureBean getFeature(String md5){
        try{
            return converterFeatureBean.fromRight(service.getFeature(md5));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回 persionId 关联的所有人脸特征记录
     * @param personId fl_person.id
     * @return 返回 fl_feature.md5  列表
     * @throws ServiceRuntime
     */
    // 38 SERIVCE PORT : getFeatureBeansByPersonId
    public List<String> getFeatureBeansByPersonId(int personId){
        try{
            return service.getFeatureBeansByPersonId(personId);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据MD5校验码返回人脸特征数据
     * @param md5
     * @return 二进制数据字节数组,如果数据库中没有对应的数据则返回null
     * @throws ServiceRuntime
     */
    // 39 SERIVCE PORT : getFeatureBytes
    public byte[] getFeatureBytes(String md5){
        try{
            return service.getFeatureBytes(md5);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据MD5校验码返回人脸特征数据记录
     * @param md5 md5列表
     * @return {@link FeatureBean}列表
     * @throws ServiceRuntime
     */
    // 40 SERIVCE PORT : getFeatures
    public List<FeatureBean> getFeatures(List<String> md5){
        try{
            return converterFeatureBean.fromRight(service.getFeatures(md5));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回指定人员{@code personId}关联的所有特征<br>
     * @param personId
     * @return 
     * @throws ServiceRuntime
     */
    // 41 SERIVCE PORT : getFeaturesOfPerson
    public List<String> getFeaturesOfPerson(int personId){
        try{
            return service.getFeaturesOfPerson(personId);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 获取人员组通行权限<br>
     * 返回{@code personGroupId}指定的人员组在{@code deviceId}设备上是否允许通行
     * @param deviceId
     * @param personGroupId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 42 SERIVCE PORT : getGroupPermit
    public boolean getGroupPermit(
            int deviceId,
            int personGroupId){
        try{
            return service.getGroupPermit(
                    deviceId,
                    personGroupId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 参见 {@link #getGroupPermit(Integer, Integer) }
     */
    // 43 SERIVCE PORT : getGroupPermits
    public List<Boolean> getGroupPermits(
            int deviceId,
            List<Integer> personGroupIdList){
        try{
            return service.getGroupPermits(
                    deviceId,
                    personGroupIdList);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据图像的MD5校验码返回图像记录
     * @param imageMD5
     * @return {@link ImageBean} ,如果没有对应记录则返回null
     * @throws ServiceRuntime
     */
    // 44 SERIVCE PORT : getImage
    public ImageBean getImage(String imageMD5){
        try{
            return converterImageBean.fromRight(service.getImage(imageMD5));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据图像的MD5校验码返回图像数据
     * @param imageMD5
     * @return 二进制数据字节数组,如果数据库中没有对应的数据则返回null
     * @throws ServiceRuntime
     * @see {@link #getBinary(String)}
     */
    // 45 SERIVCE PORT : getImageBytes
    public byte[] getImageBytes(String imageMD5){
        try{
            return service.getImageBytes(imageMD5);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回featureMd5的人脸特征记录关联的所有图像记录id(MD5)
     * @param featureMd5 人脸特征id(MD5)
     * @return 
     * @throws ServiceRuntime
     */
    // 46 SERIVCE PORT : getImagesAssociatedByFeature
    public List<String> getImagesAssociatedByFeature(String featureMd5){
        try{
            return service.getImagesAssociatedByFeature(featureMd5);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回 persionId 关联的所有日志记录
     * @param personId fl_person.id
     * @return 
     * @throws ServiceRuntime
     */
    // 47 SERIVCE PORT : getLogBeansByPersonId
    public List<LogBean> getLogBeansByPersonId(int personId){
        try{
            return converterLogBean.fromRight(service.getLogBeansByPersonId(personId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回personId指定的人员记录
     * @param personId
     * @return 
     * @throws ServiceRuntime
     */
    // 48 SERIVCE PORT : getPerson
    public PersonBean getPerson(int personId){
        try{
            return converterPersonBean.fromRight(service.getPerson(personId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据证件号码返回人员记录
     * @param papersNum
     * @return 
     * @throws ServiceRuntime
     */
    // 49 SERIVCE PORT : getPersonByPapersNum
    public PersonBean getPersonByPapersNum(String papersNum){
        try{
            return converterPersonBean.fromRight(service.getPersonByPapersNum(papersNum));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据人员组id返回数据库记录
     * @param personGroupId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 50 SERIVCE PORT : getPersonGroup
    public PersonGroupBean getPersonGroup(int personGroupId){
        try{
            return converterPersonGroupBean.fromRight(service.getPersonGroup(personGroupId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回人员组id列表指定的数据库记录
     * @param groupIdList
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 51 SERIVCE PORT : getPersonGroups
    public List<PersonGroupBean> getPersonGroups(List<Integer> groupIdList){
        try{
            return converterPersonGroupBean.fromRight(service.getPersonGroups(groupIdList));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 获取人员通行权限<br>
     * 返回{@code personId}指定的人员在{@code deviceId}设备上是否允许通行
     * @param deviceId
     * @param personId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 52 SERIVCE PORT : getPersonPermit
    public boolean getPersonPermit(
            int deviceId,
            int personId){
        try{
            return service.getPersonPermit(
                    deviceId,
                    personId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 参见 {@link #getPersonPermit(Integer, Integer) }
     */
    // 53 SERIVCE PORT : getPersonPermits
    public List<Boolean> getPersonPermits(
            int deviceId,
            List<Integer> personIdList){
        try{
            return service.getPersonPermits(
                    deviceId,
                    personIdList);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回 list 指定的人员记录
     * @param idList 人员id列表
     * @return 
     * @throws ServiceRuntime
     */
    // 54 SERIVCE PORT : getPersons
    public List<PersonBean> getPersons(List<Integer> idList){
        try{
            return converterPersonBean.fromRight(service.getPersons(idList));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回{@code deviceGroupId}指定的人员组下属的所有人员记录<br>
     * 如果没有下属人员记录则返回空表
     * @param deviceGroupId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 55 SERIVCE PORT : getPersonsOfGroup
    public List<PersonBean> getPersonsOfGroup(int personGroupId){
        try{
            return converterPersonBean.fromRight(service.getPersonsOfGroup(personGroupId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回{@code deviceGroupId}指定的设备组下的所有子节点<br>
     * 如果没有子节点则返回空表
     * @param deviceGroupId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 56 SERIVCE PORT : getSubDeviceGroup
    public List<DeviceGroupBean> getSubDeviceGroup(int deviceGroupId){
        try{
            return converterDeviceGroupBean.fromRight(service.getSubDeviceGroup(deviceGroupId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回{@code personGroupId}指定的人员组下的所有子节点<br>
     * 如果没有子节点则返回空表
     * @param personGroupId
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 57 SERIVCE PORT : getSubPersonGroup
    public List<PersonGroupBean> getSubPersonGroup(int personGroupId){
        try{
            return converterPersonGroupBean.fromRight(service.getSubPersonGroup(personGroupId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 判断 personId 指定的人员记录是否过期
     * @param personId
     * @return 
     * @throws ServiceRuntime
     */
    // 58 SERIVCE PORT : isDisable
    public boolean isDisable(int personId){
        try{
            return service.isDisable(personId);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回所有人员记录
     * @return 
     * @throws ServiceRuntime
     */
    // 59 SERIVCE PORT : loadAllPerson
    public List<Integer> loadAllPerson(){
        try{
            return service.loadAllPerson();
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据{@code where}指定的查询条件查询设备记录
     * @param where SQL 条件语句
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 
     * @throws ServiceRuntime
     */
    // 60 SERIVCE PORT : loadDeviceByWhere
    public List<DeviceBean> loadDeviceByWhere(
            String where,
            int startRow,
            int numRows){
        try{
            return converterDeviceBean.fromRight(service.loadDeviceByWhere(
                    where,
                    startRow,
                    numRows));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 查询{@code where} SQL条件语句指定的记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     */
    // 61 SERIVCE PORT : loadDeviceGroupByWhere
    public List<DeviceGroupBean> loadDeviceGroupByWhere(
            String where,
            int startRow,
            int numRows){
        try{
            return converterDeviceGroupBean.fromRight(service.loadDeviceGroupByWhere(
                    where,
                    startRow,
                    numRows));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #loadDeviceGroupByWhere(String,int,int)
     */
    // 62 SERIVCE PORT : loadDeviceGroupIdByWhere
    public List<Integer> loadDeviceGroupIdByWhere(String where){
        try{
            return service.loadDeviceGroupIdByWhere(where);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 根据{@code where}指定的查询条件查询设备记录
     * @param where
     * @return 返回设备ID列表
     * @throws ServiceRuntime
     */
    // 63 SERIVCE PORT : loadDeviceIdByWhere
    public List<Integer> loadDeviceIdByWhere(String where){
        try{
            return service.loadDeviceIdByWhere(where);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_feature记录
     * @param timestamp
     * @return 返回 fl_feature.md5 列表
     * @throws ServiceRuntime
     */
    // 64 SERIVCE PORT : loadFeatureMd5ByUpdate
    public List<String> loadFeatureMd5ByUpdate(Date timestamp){
        try{
            return service.loadFeatureMd5ByUpdate(GenericUtils.toLong(timestamp,Date.class));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 日志查询<br>
     * 根据{@code where}指定的查询条件查询日志记录
     * @param where
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 
     * @throws ServiceRuntime
     */
    // 65 SERIVCE PORT : loadLogByWhere
    public List<LogBean> loadLogByWhere(
            String where,
            int startRow,
            int numRows){
        try{
            return converterLogBean.fromRight(service.loadLogByWhere(
                    where,
                    startRow,
                    numRows));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #loadLogLightByWhere(String,int,int)
     * @throws IllegalArgumentException {@code timestamp}为{@code null}时
     * @throws ServiceRuntime
     */
    // 66 SERIVCE PORT : loadLogLightByVerifyTime
    public List<LogLightBean> loadLogLightByVerifyTime(
            Date timestamp,
            int startRow,
            int numRows){
        try{
            return converterLogLightBean.fromRight(service.loadLogLightByVerifyTime(
                    GenericUtils.toLong(timestamp,Date.class),
                    startRow,
                    numRows));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 日志查询<br>
     * 根据{@code where}指定的查询条件查询日志记录{@link LogLightBean}
     * @param where
     * @param startRow
     * @param numRows
     * @return 
     * @throws ServiceRuntime
     */
    // 67 SERIVCE PORT : loadLogLightByWhere
    public List<LogLightBean> loadLogLightByWhere(
            String where,
            int startRow,
            int numRows){
        try{
            return converterLogLightBean.fromRight(service.loadLogLightByWhere(
                    where,
                    startRow,
                    numRows));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_permit.create_time 字段大于指定时间戳( {@code timestamp} )的所有fl_permit记录
     * @param timestamp
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 68 SERIVCE PORT : loadPermitByUpdate
    public List<PermitBean> loadPermitByUpdate(Date timestamp){
        try{
            return converterPermitBean.fromRight(service.loadPermitByUpdate(GenericUtils.toLong(timestamp,Date.class)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回 where 指定的所有人员记录
     * @param where SQL条件语句
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 
     * @throws ServiceRuntime
     */
    // 69 SERIVCE PORT : loadPersonByWhere
    public List<PersonBean> loadPersonByWhere(
            String where,
            int startRow,
            int numRows){
        try{
            return converterPersonBean.fromRight(service.loadPersonByWhere(
                    where,
                    startRow,
                    numRows));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 查询{@code where} SQL条件语句指定的记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     */
    // 70 SERIVCE PORT : loadPersonGroupByWhere
    public List<PersonGroupBean> loadPersonGroupByWhere(
            String where,
            int startRow,
            int numRows){
        try{
            return converterPersonGroupBean.fromRight(service.loadPersonGroupByWhere(
                    where,
                    startRow,
                    numRows));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #loadPersonGroupByWhere(String,int,int)
     * @throws ServiceRuntime
     */
    // 71 SERIVCE PORT : loadPersonGroupIdByWhere
    public List<Integer> loadPersonGroupIdByWhere(String where){
        try{
            return service.loadPersonGroupIdByWhere(where);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_person记录
     * @param timestamp
     * @return 返回fl_person.id 列表
     * @throws ServiceRuntime
     */
    // 72 SERIVCE PORT : loadPersonIdByUpdateTime
    public List<Integer> loadPersonIdByUpdateTime(Date timestamp){
        try{
            return service.loadPersonIdByUpdateTime(GenericUtils.toLong(timestamp,Date.class));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 返回 where 指定的所有人员记录
     * @param where SQL条件语句
     * @return 返回 fl_person.id 列表
     * @throws ServiceRuntime
     */
    // 73 SERIVCE PORT : loadPersonIdByWhere
    public List<Integer> loadPersonIdByWhere(String where){
        try{
            return service.loadPersonIdByWhere(where);
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * (主动更新机制实现)<br>
     * 返回fl_person.update_time字段大于指定时间戳( {@code timestamp} )的所有fl_person记录<br>
     * 同时包含fl_feature更新记录引用的fl_person记录
     * @param timestamp
     * @return 返回fl_person.id 列表
     * @throws ServiceRuntime
     */
    // 74 SERIVCE PORT : loadUpdatedPersons
    public List<Integer> loadUpdatedPersons(Date timestamp){
        try{
            return service.loadUpdatedPersons(GenericUtils.toLong(timestamp,Date.class));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 替换personId指定的人员记录的人脸特征数据,同时删除原特征数据记录(fl_feature)及关联的fl_face表记录
     * @param personId 人员记录id
     * @param featureMd5 人脸特征数据记录id (已经保存在数据库中)
     * @param deleteOldFeatureImage 是否删除原特征数据记录间接关联的原始图像记录(fl_image)
     * @throws ServiceRuntime
     */
    // 75 SERIVCE PORT : replaceFeature
    public void replaceFeature(
            int personId,
            String featureMd5,
            boolean deleteOldFeatureImage){
        try{
            service.replaceFeature(
                    personId,
                    featureMd5,
                    deleteOldFeatureImage);
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存设备记录
     * @param deviceBean
     * @return 
     * @throws ServiceRuntime
     */
    // 76 SERIVCE PORT : saveDevice
    public DeviceBean saveDevice(DeviceBean deviceBean){
        try{
            return converterDeviceBean.fromRight(service.saveDevice(converterDeviceBean.toRight(deviceBean)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存设备组记录
     * @param deviceGroupBean
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 77 SERIVCE PORT : saveDeviceGroup
    public DeviceGroupBean saveDeviceGroup(DeviceGroupBean deviceGroupBean){
        try{
            return converterDeviceGroupBean.fromRight(service.saveDeviceGroup(converterDeviceGroupBean.toRight(deviceGroupBean)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员(person)记录
     * @param bean
     * @return 
     * @throws ServiceRuntime
     */
    // 78 SERIVCE PORT : savePerson
    public PersonBean savePerson(PersonBean bean){
        try{
            return converterPersonBean.fromRight(service.savePerson(converterPersonBean.toRight(bean)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * @param bean 人员信息对象
     * @param idPhoto 标准照图像
     * @param feature 人脸特征数据
     * @param featureImage 提取特征源图像,为null 时,默认使用idPhoto
     * @param featureFaceBean 人脸位置对象,为null 时,不保存人脸数据
     * @param deviceBean featureImage来源设备对象
     * @return 
     */
    // 79 SERIVCE PORT : savePersonFull
    public PersonBean savePerson(
            PersonBean bean,
            byte[] idPhoto,
            byte[] feature,
            byte[] featureImage,
            FaceBean featureFaceBean,
            int deviceId){
        try{
            return converterPersonBean.fromRight(service.savePersonFull(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    feature,
                    featureImage,
                    converterFaceBean.toRight(featureFaceBean),
                    deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],byte[],byte[],FaceBean,int)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // 79 GENERIC
    public PersonBean savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            Object feature,
            Object featureImage,
            FaceBean featureFaceBean,
            int deviceId){
        try{
            return converterPersonBean.fromRight(service.savePersonFull(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    GenericUtils.toBytes(feature),
                    GenericUtils.toBytes(featureImage),
                    converterFaceBean.toRight(featureFaceBean),
                    deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员组记录
     * @param personGroupBean
     * @return 
     * @throws WrapDAOException
     * @throws ServiceRuntime
     */
    // 80 SERIVCE PORT : savePersonGroup
    public PersonGroupBean savePersonGroup(PersonGroupBean personGroupBean){
        try{
            return converterPersonGroupBean.fromRight(service.savePersonGroup(converterPersonGroupBean.toRight(personGroupBean)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员(person)记录
     * @param beans
     * @throws ServiceRuntime
     */
    // 81 SERIVCE PORT : savePersons
    public void savePersons(List<PersonBean> beans){
        try{
            service.savePersons(converterPersonBean.toRight(beans));
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员信息记录(包含标准照)
     * @param persons
     * @return 
     * @throws ServiceRuntime
     */
    // 82 SERIVCE PORT : savePersonsWithPhoto
    public Integer savePerson(Map<ByteBuffer, PersonBean> persons){
        try{
            return service.savePersonsWithPhoto(GenericUtils.toBytesKey(converterPersonBean.toRightValue(persons)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像对象,可为null
     * @return 
     * @throws ServiceRuntime
     */
    // 83 SERIVCE PORT : savePersonWithPhoto
    public PersonBean savePerson(
            PersonBean bean,
            byte[] idPhoto){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhoto(
                    converterPersonBean.toRight(bean),
                    idPhoto));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[])}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // 83 GENERIC
    public PersonBean savePersonGeneric(
            PersonBean bean,
            Object idPhoto){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhoto(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param featureBean 用于验证的人脸特征数据对象,可为null
     * @param deviceId 标准照图像来源设备id,可为null
     * @return 
     * @throws ServiceRuntime
     */
    // 84 SERIVCE PORT : savePersonWithPhotoAndFeature
    public PersonBean savePerson(
            PersonBean bean,
            byte[] idPhoto,
            FeatureBean featureBean,
            int deviceId){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhotoAndFeature(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    converterFeatureBean.toRight(featureBean),
                    deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],FeatureBean,int)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // 84 GENERIC
    public PersonBean savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            FeatureBean featureBean,
            int deviceId){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhotoAndFeature(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    converterFeatureBean.toRight(featureBean),
                    deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param feature 用于验证的人脸特征数据,可为null,不可重复, 参见 {@link #addFeature(ByteBuffer, Integer, List)}
     * @param faceBeans 参见 {@link #addFeature(ByteBuffer, Integer, List)}
     * @return 
     * @throws ServiceRuntime
     */
    // 85 SERIVCE PORT : savePersonWithPhotoAndFeatureMultiFaces
    public PersonBean savePerson(
            PersonBean bean,
            byte[] idPhoto,
            byte[] feature,
            List<FaceBean> faceBeans){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhotoAndFeatureMultiFaces(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    feature,
                    converterFaceBean.toRight(faceBeans)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],byte[],List)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // 85 GENERIC
    public PersonBean savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            Object feature,
            List<FaceBean> faceBeans){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhotoAndFeatureMultiFaces(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    GenericUtils.toBytes(feature),
                    converterFaceBean.toRight(faceBeans)));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param feature 用于验证的人脸特征数据,可为null
     * @param faceInfo 生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null
     * @param deviceId faceInfo 图像来源设备id,可为null
     * @return bean 保存的{@link PersonBean}对象
     * @throws ServiceRuntime
     */
    // 86 SERIVCE PORT : savePersonWithPhotoAndFeatureMultiImage
    public PersonBean savePerson(
            PersonBean bean,
            byte[] idPhoto,
            byte[] feature,
            Map<ByteBuffer, FaceBean> faceInfo,
            int deviceId){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhotoAndFeatureMultiImage(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    feature,
                    GenericUtils.toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                    deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],byte[],Map,int)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see {@link GenericUtils#toBytes(Object)}
     */
    // 86 GENERIC
    public PersonBean savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            Object feature,
            Map<ByteBuffer, FaceBean> faceInfo,
            int deviceId){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhotoAndFeatureMultiImage(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    GenericUtils.toBytes(feature),
                    GenericUtils.toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                    deviceId));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhotoMd5 标准照图像对象,可为null
     * @param featureMd5 用于验证的人脸特征数据对象,可为null
     * @return 
     * @throws ServiceRuntime
     */
    // 87 SERIVCE PORT : savePersonWithPhotoAndFeatureSaved
    public PersonBean savePerson(
            PersonBean bean,
            String idPhotoMd5,
            String featureMd5){
        try{
            return converterPersonBean.fromRight(service.savePersonWithPhotoAndFeatureSaved(
                    converterPersonBean.toRight(bean),
                    idPhotoMd5,
                    featureMd5));
        }
        catch(RuntimeTApplicationException e){
            Throwable cause = e.getCause();
            if (cause instanceof TApplicationException  
                && ((TApplicationException) cause).getType() == TApplicationException.MISSING_RESULT){
                return null;
            }
            throw e;
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 修改 personId 指定的人员记录的有效期
     * @param personId
     * @param expiryDate 失效日期
     * @throws ServiceRuntime
     */
    // 88 SERIVCE PORT : setPersonExpiryDate
    public void setPersonExpiryDate(
            int personId,
            Date expiryDate){
        try{
            service.setPersonExpiryDate(
                    personId,
                    GenericUtils.toLong(expiryDate,Date.class));
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
    /**
     * 修改 personIdList 指定的人员记录的有效期
     * @param personIdList 人员id列表
     * @param expiryDate 失效日期
     * @throws ServiceRuntime
     */
    // 89 SERIVCE PORT : setPersonExpiryDateList
    public void setPersonExpiryDate(
            List<Integer> personIdList,
            Date expiryDate){
        try{
            service.setPersonExpiryDateList(
                    personIdList,
                    GenericUtils.toLong(expiryDate,Date.class));
        }
        catch(net.gdface.facelog.client.thrift.ServiceRuntime e){
            throw new ServiceRuntime(e);
        }
    }
}
