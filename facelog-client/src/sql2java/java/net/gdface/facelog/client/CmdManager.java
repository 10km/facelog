// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: cmd.manager.java.vm
// ______________________________________________________
package net.gdface.facelog.client;

import java.net.URL;
import java.util.List;
import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkArgument;

import com.alibaba.fastjson.JSON;
import com.google.common.base.Function;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.primitives.Ints;

import gu.simplemq.Channel;
import gu.simplemq.redis.JedisPoolLazy;
import gu.simplemq.redis.RedisFactory;
import net.gdface.facelog.client.thrift.RedisParam;
import net.gdface.facelog.client.thrift.Token;

import gu.simplemq.redis.RedisPublisher;
import gu.simplemq.redis.RedisSubscriber;

/**
 * 
 * client 端 redis管理模块
 * @author guyadong
 *
 */
public class CmdManager {    
    private final Channel<DeviceInstruction> cmdChannel;
    private final IFaceLogClient client;
    private final Token token;
    private final RedisPublisher redisPublisher ;
    private final Map<RedisParam, String> redisParameters;
    private final RedisSubscriber subscriber;
    public CmdManager(IFaceLogClient client,
            JedisPoolLazy poolLazy,
            CmdChannelAdapter cmdChannelAdapter,
            Token token) {
        this.client = checkNotNull(client);
        this.token = checkNotNull(token);
        this.redisPublisher = RedisFactory.getPublisher(checkNotNull(poolLazy));
        this.subscriber = RedisFactory.getSubscriber(checkNotNull(poolLazy));
        this.redisParameters = client.getRedisParameters(token);
        this.cmdChannel = new Channel<DeviceInstruction>(
                this.redisParameters.get(RedisParam.CMD_CHANNEL),
                cmdChannelAdapter){};
        this.subscriber.register(cmdChannel);
    }

    /**
     * 发送设备命令
     * @param cmd
     */
    private void sendCmd(DeviceInstruction cmd){
        if(null != cmd){
            checkArgument(null != cmd.getCmd(),"cmd field  of DeviceInstruction must not be null");
            Map<String,String>params;
            if(null == cmd.getParameters()){
                    params = ImmutableMap.of();
            }else{
                    params = Maps.transformValues(cmd.getParameters(), new Function<Object,String>(){
                        @Override
                        public String apply(Object input) {
                            return JSON.toJSONString(input);
                        }});
            }
            cmd.setParameters(params);
            redisPublisher.publish(this.cmdChannel, cmd);
        }
    }
    /**
     * 发送设备命令
     * @param cmd
     * @param target 执行命令的目标(设备/设备组)
     * @param group 为@{@code true}时{@code target}为设备组
     * @param ackChannel 命令响应通道
     * @param parameters 命令参数
     * @see {@link DeviceInstruction}
     */
    public void sendCmd(Cmd cmd,
                            List<Integer> target,
                            boolean group,
                            String ackChannel,
                            Map<String, String> parameters){
        DeviceInstruction deviceInstruction = new DeviceInstruction()
                .setCmd(checkNotNull(cmd))
                .setCmdSn(client.applyCmdSn(token))
                .setTarget(target, group)
                .setAckChannel(ackChannel)
                .setParameters(parameters);
        sendCmd(deviceInstruction);
    }
    /**
     * 发送设备命令
     * @param cmd
     * @param target 
     * @param group 
     * @param ackChannel 
     * @param parameters
     */
    public void sendCmd(Cmd cmd,
            int target,
            boolean group,
            String ackChannel,
            Map<String, String> parameters){
        sendCmd(cmd,Lists.newArrayList(target),group,ackChannel,parameters);
    }
    /**
     * 向指定设备({@code deviceId})发送设备命令
     * @param cmd
     * @param deviceId
     * @param ackChannel
     * @param parameters
     */
    public void sendDeviceCmd(Cmd cmd,
            int deviceId,
            String ackChannel,
            Map<String, String> parameters){
        sendCmd(cmd,Lists.newArrayList(deviceId),false,ackChannel,parameters);
    }
    /**
     * 向指定设备组({@code deviceGroupId})发送设备命令
     * @param cmd
     * @param deviceGroupId
     * @param ackChannel
     * @param parameters
     */
    public void sendDeviceGroupCmd(Cmd cmd,
            int deviceGroupId,
            String ackChannel,
            Map<String, String> parameters){
        sendCmd(cmd,Lists.newArrayList(deviceGroupId),true,ackChannel,parameters);
    }
    public static class Target{
        private List<Integer> target;
        private boolean group;
        private String ackChannel;
        private final CmdManager parent;
        private boolean autoRemove = true;
        private Target(CmdManager parent){
            this.parent = parent;
        }
        public Target setTarget(List<Integer> target,boolean group){
            this.target = target;
            this.group = group;
            return this;
        }
        public Target setDeviceTarget(List<Integer> target){
            this.target = target;
            this.group = false;
            return this;
        }
        public Target setDeviceTarget(int... target){
            return setDeviceTarget(Ints.asList(target));
        }
        public Target setDeviceGroupTarget(List<Integer> target){
            this.target = target;
            this.group = true;
            return this;
        }
        public Target setDeviceGroupTarget(int... target){
            return setDeviceGroupTarget(Ints.asList(target));
        }
        public Target setAckChannel(String ackChannel){
            this.ackChannel = ackChannel;
            return this;
        }
        public CmdManager build(boolean autoRemove){
            this.autoRemove = autoRemove;
            return this.parent;
        }
        public CmdManager build(){
            return this.parent;
        }
    } 
    private static ThreadLocal<Target> tlsTarget= new ThreadLocal<Target>();
    public Target targetBuilder(){
        if(null == tlsTarget.get()){
            tlsTarget.set(new Target(this));
        }
        return tlsTarget.get();
    }
    public CmdManager removeTlsTarget(){
        tlsTarget.remove();
        return this;
    }
/*
    public CmdManager parameter(String key,String value){
        checkArgument(null !=tlsTarget.get(),
                "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        sendCmd(Cmd.parameter,
                target.target,
                target.group,
                target.ackChannel,
                ImmutableMap.of("key", key, "value", value));
        if(target.autoRemove){
            tlsTarget.remove();    
        }        
        return this;
    }
*/    
    /**
     * 设备命令 <br>
     * 设置参数,可用于运行时修改参数<br>
     * @param key 参数名
     * @param value 参数值
     *
     */
    public void parameter(String key,String value){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("key", key)
            .put("value", value)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 设置一组参数,可用于需要重启有效的参数<br>
     * @param properties 参数配置对象, {@code 参数名(key)->参数值(value)映射}
     *
     */
    public void config(Map<String,String> properties){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("properties", properties)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 读取设备状态参数<br>
     * @param name 需要报告状态的参数名
     * @return {@code name}指定设备状态参数值
     *
     */
    public void status(String name){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("name", name)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 设备状态报告,返回一组状态参数<br>
     * @param names 需要报告状态的参数名列表
     * @return 设备状态参数对象,{@code 参数名(key)->参数值(value)映射},key与{@code names}对应
     *
     */
    public void report(List<String> names){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("names", names)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 设置设备工作状态<br>
     * @param enable {@code true}:工作状态,否则为非工作状态
     *
     */
    public void enable(Boolean enable){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("enable", enable)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 返回设备工作状态<br>
     * @param message 工作状态附加消息,比如"设备维修,禁止通行"
     * @return 为{@code true}:工作状态,{@code false}:非工作状态
     *
     */
    public void isEnable(String message){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("message", message)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 设备重启<br>
     *
     */
    public void reset(){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 设备与服务器时间同步<br>
     * @param unixTimestamp 服务器 unix 时间(秒),参见<a href = "https://en.wikipedia.org/wiki/Unix_time">Unix time</a>
     *
     */
    public void time(Long unixTimestamp){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("unixTimestamp", unixTimestamp)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 更新版本<br>
     * @param url 更新版本的位置
     * @param version 版本号
     *
     */
    public void update(URL url,String version){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("url", url)
            .put("version", version)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 发送消息<br>
     * @param message 发送到设备的消息
     *
     */
    public void message(String message){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("message", message)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
    /**
     * 设备命令 <br>
     * 自定义命令,命令名及命令参数由项目自定义<br>
     * @param cmdName 自定义命令名称
     * @param parameters 自定义参数表
     * @return 返回自定义结果对象
     *
     */
    public void custom(String cmdName,Map<String,Object> parameters){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
            .put("cmdName", cmdName)
            .put("parameters", parameters)
            .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
}
