// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// template: service.client.async.java.vm
// ______________________________________________________
package net.gdface.facelog.client;
import com.facebook.nifty.client.FramedClientConnector;
import com.facebook.swift.service.ThriftClientManager;
import com.google.common.base.Function;
import com.google.common.collect.Maps;
import com.google.common.collect.Maps.EntryTransformer;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import static com.google.common.net.HostAndPort.fromParts;
import java.nio.ByteBuffer;
import java.util.*;
import java.util.Map.Entry;
/**
 * remote implementation of the service IFaceLog(asynchronous implementation)<br>
 * all comment copied from {@code net.gdface.facelog.FaceLogDefinition.java}<br>
 * @author guyadong
 */
public class IFaceLogClientAsync implements Constant{
    
    private IBeanConverter<DeviceBean,net.gdface.facelog.client.thrift.DeviceBean> converterDeviceBean = ThriftConverter.converterDeviceBean;
    private IBeanConverter<FaceBean,net.gdface.facelog.client.thrift.FaceBean> converterFaceBean = ThriftConverter.converterFaceBean;
    private IBeanConverter<FeatureBean,net.gdface.facelog.client.thrift.FeatureBean> converterFeatureBean = ThriftConverter.converterFeatureBean;
    private IBeanConverter<ImageBean,net.gdface.facelog.client.thrift.ImageBean> converterImageBean = ThriftConverter.converterImageBean;
    private IBeanConverter<LogBean,net.gdface.facelog.client.thrift.LogBean> converterLogBean = ThriftConverter.converterLogBean;
    private IBeanConverter<PersonBean,net.gdface.facelog.client.thrift.PersonBean> converterPersonBean = ThriftConverter.converterPersonBean;
    private IBeanConverter<LogLightBean,net.gdface.facelog.client.thrift.LogLightBean> converterLogLightBean = ThriftConverter.converterLogLightBean;

    /** 
     * @return converter of DeviceBean 
     */
    public IBeanConverter<DeviceBean,net.gdface.facelog.client.thrift.DeviceBean> getDeviceBeanConverter(){
        return converterDeviceBean;
    }
    /** 
     * setup converter of DeviceBean 
     * @param converterDeviceBean must not be null. 
     */
    public void setDeviceBeanConverter(IBeanConverter<DeviceBean,net.gdface.facelog.client.thrift.DeviceBean> converterDeviceBean){
        if(null == converterDeviceBean)
            throw new NullPointerException();
        this.converterDeviceBean = converterDeviceBean;
    }
    /** 
     * @return converter of FaceBean 
     */
    public IBeanConverter<FaceBean,net.gdface.facelog.client.thrift.FaceBean> getFaceBeanConverter(){
        return converterFaceBean;
    }
    /** 
     * setup converter of FaceBean 
     * @param converterFaceBean must not be null. 
     */
    public void setFaceBeanConverter(IBeanConverter<FaceBean,net.gdface.facelog.client.thrift.FaceBean> converterFaceBean){
        if(null == converterFaceBean)
            throw new NullPointerException();
        this.converterFaceBean = converterFaceBean;
    }
    /** 
     * @return converter of FeatureBean 
     */
    public IBeanConverter<FeatureBean,net.gdface.facelog.client.thrift.FeatureBean> getFeatureBeanConverter(){
        return converterFeatureBean;
    }
    /** 
     * setup converter of FeatureBean 
     * @param converterFeatureBean must not be null. 
     */
    public void setFeatureBeanConverter(IBeanConverter<FeatureBean,net.gdface.facelog.client.thrift.FeatureBean> converterFeatureBean){
        if(null == converterFeatureBean)
            throw new NullPointerException();
        this.converterFeatureBean = converterFeatureBean;
    }
    /** 
     * @return converter of ImageBean 
     */
    public IBeanConverter<ImageBean,net.gdface.facelog.client.thrift.ImageBean> getImageBeanConverter(){
        return converterImageBean;
    }
    /** 
     * setup converter of ImageBean 
     * @param converterImageBean must not be null. 
     */
    public void setImageBeanConverter(IBeanConverter<ImageBean,net.gdface.facelog.client.thrift.ImageBean> converterImageBean){
        if(null == converterImageBean)
            throw new NullPointerException();
        this.converterImageBean = converterImageBean;
    }
    /** 
     * @return converter of LogBean 
     */
    public IBeanConverter<LogBean,net.gdface.facelog.client.thrift.LogBean> getLogBeanConverter(){
        return converterLogBean;
    }
    /** 
     * setup converter of LogBean 
     * @param converterLogBean must not be null. 
     */
    public void setLogBeanConverter(IBeanConverter<LogBean,net.gdface.facelog.client.thrift.LogBean> converterLogBean){
        if(null == converterLogBean)
            throw new NullPointerException();
        this.converterLogBean = converterLogBean;
    }
    /** 
     * @return converter of PersonBean 
     */
    public IBeanConverter<PersonBean,net.gdface.facelog.client.thrift.PersonBean> getPersonBeanConverter(){
        return converterPersonBean;
    }
    /** 
     * setup converter of PersonBean 
     * @param converterPersonBean must not be null. 
     */
    public void setPersonBeanConverter(IBeanConverter<PersonBean,net.gdface.facelog.client.thrift.PersonBean> converterPersonBean){
        if(null == converterPersonBean)
            throw new NullPointerException();
        this.converterPersonBean = converterPersonBean;
    }
    /** 
     * @return converter of LogLightBean 
     */
    public IBeanConverter<LogLightBean,net.gdface.facelog.client.thrift.LogLightBean> getLogLightBeanConverter(){
        return converterLogLightBean;
    }
    /** 
     * setup converter of LogLightBean 
     * @param converterLogLightBean must not be null. 
     */
    public void setLogLightBeanConverter(IBeanConverter<LogLightBean,net.gdface.facelog.client.thrift.LogLightBean> converterLogLightBean){
        if(null == converterLogLightBean)
            throw new NullPointerException();
        this.converterLogLightBean = converterLogLightBean;
    }
    private final ThriftClientManager clientManager = new ThriftClientManager();

    private final net.gdface.facelog.client.thrift.IFaceLog.Async service;
    public IFaceLogClientAsync(String host,int port){
        try{
            service = clientManager.createClient(
                    new FramedClientConnector(fromParts(host, port)),
                    net.gdface.facelog.client.thrift.IFaceLog.Async.class).get();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
    }
    protected static final byte[] toBytes(ByteBuffer buffer){
        if(null == buffer)return null;
        int pos = buffer.position();
        try{
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);
            return bytes;
        }finally{
            buffer.position(pos);
        }
    }
    protected static final<V>Map<byte[],V> toBytesKey(Map<ByteBuffer,V> source){
        if(null == source)return null;
        HashMap<byte[], V> dest = new HashMap<byte[],V>();
        for(Entry<ByteBuffer, V> entry:source.entrySet()){
            dest.put(toBytes(entry.getKey()), entry.getValue());
        }
        return dest;
    }
    private static final EntryTransformer<Object,ByteBuffer,byte[]> transformer = new EntryTransformer<Object,ByteBuffer,byte[]>(){
        @Override
        public byte[] transformEntry(Object key, ByteBuffer value) {
             return toBytes(value);
        }};
    protected static final<K> Map<K,byte[]> toBytesValue(Map<K,ByteBuffer> source){
        if(null == source)return null;
        return Maps.transformEntries(source, transformer);
    }
    /**
     * 增加一个人脸特征记录，如果记录已经存在则抛出异常
     * @param feature 特征数据
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param faecBeans 生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null
     * @return 保存的人脸特征记录{@link FeatureBean}
     */
    public ListenableFuture<FeatureBean> addFeature(byte[] feature,int personId,List<FaceBean> faecBeans){
        return Futures.transform(
                service.addFeature(feature,
                personId,
                converterFaceBean.toRight(faecBeans)), 
                new Function<net.gdface.facelog.client.thrift.FeatureBean,FeatureBean>(){
                    @Override
                    public FeatureBean apply(net.gdface.facelog.client.thrift.FeatureBean input) {
                        return converterFeatureBean.fromRight(input);
                    }
                });
    }
    /**
     * 增加一个人脸特征记录,特征数据由faceInfo指定的多张图像合成，如果记录已经存在则抛出异常
     * @param feature 特征数据
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param faceInfo 生成特征数据的图像及人脸信息对象(每张图对应一张人脸),可为null
     * @param deviceId 图像来源设备id,可为null
     * @return 保存的人脸特征记录{@link FeatureBean}
     */
    public ListenableFuture<FeatureBean> addFeature(byte[] feature,int personId,Map<ByteBuffer, FaceBean> faceInfo,int deviceId){
        return Futures.transform(
                service.addFeatureMulti(feature,
                personId,
                toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                deviceId), 
                new Function<net.gdface.facelog.client.thrift.FeatureBean,FeatureBean>(){
                    @Override
                    public FeatureBean apply(net.gdface.facelog.client.thrift.FeatureBean input) {
                        return converterFeatureBean.fromRight(input);
                    }
                });
    }
    /**
     * 保存图像数据,如果图像数据已经存在，则抛出异常
     * @param imageData 图像数据
     * @param deviceId 图像来源设备id,可为null
     * @param faceBean 关联的人脸信息对象,可为null
     * @param personId 关联的人员id(fl_person.id),可为null
     * @return 
     * @see {@link #_addImage(ByteBuffer, DeviceBean, List, List)}
     */
    public ListenableFuture<ImageBean> addImage(byte[] imageData,int deviceId,FaceBean faceBean,int personId){
        return Futures.transform(
                service.addImage(imageData,
                deviceId,
                converterFaceBean.toRight(faceBean),
                personId), 
                new Function<net.gdface.facelog.client.thrift.ImageBean,ImageBean>(){
                    @Override
                    public ImageBean apply(net.gdface.facelog.client.thrift.ImageBean input) {
                        return converterImageBean.fromRight(input);
                    }
                });
    }
    /**
     * 添加一条验证日志记录
     * @param bean
     */
    public ListenableFuture<Void> addLog(LogBean bean){
        return service.addLog(converterLogBean.toRight(bean));
    }
    /**
     * 添加一组验证日志记录(事务存储)
     * @param beans
     */
    public ListenableFuture<Void> addLog(List<LogBean> beans){
        return service.addLogList(converterLogBean.toRight(beans));
    }

    public ListenableFuture<Integer> countLogLightWhere(String where){
        return service.countLogLightWhere(where);
    }

    public ListenableFuture<Integer> countLogWhere(String where){
        return service.countLogWhere(where);
    }
    /**
     * 删除 personId 关联的所有特征(feature)记录
     * @param personId
     * @param deleteImage 是否删除关联的 image记录
     * @return 
     * @see #deleteFeature(String, boolean)
     */
    public ListenableFuture<Integer> deleteAllFeaturesByPersonId(int personId,boolean deleteImage){
        return service.deleteAllFeaturesByPersonId(personId,
                deleteImage);
    }
    /**
     * 删除featureMd5指定的特征记录及关联的face记录
     * @param featureMd5
     * @param deleteImage 是否删除关联的 image记录
     * @return 
     */
    public ListenableFuture<List<String>> deleteFeature(String featureMd5,boolean deleteImage){
        return service.deleteFeature(featureMd5,
                deleteImage);
    }
    /**
     * 删除imageMd5指定图像及其缩略图
     * @param imageMd5
     * @return 
     */
    public ListenableFuture<Integer> deleteImage(String imageMd5){
        return service.deleteImage(imageMd5);
    }
    /**
     * 删除personId指定的人员(person)记录及关联的所有记录
     * @param personId
     * @return 
     */
    public ListenableFuture<Integer> deletePerson(int personId){
        return service.deletePerson(personId);
    }
    /**
     * 删除papersNum指定的人员(person)记录及关联的所有记录
     * @param papersNum 证件号码
     * @return 返回删除的 person 记录数量
     * @see {@link #deletePerson(int)}
     */
    public ListenableFuture<Integer> deletePersonByPapersNum(String papersNum){
        return service.deletePersonByPapersNum(papersNum);
    }
    /**
     * 删除personIdList指定的人员(person)记录及关联的所有记录
     * @param personIdList 人员id列表
     * @return 返回删除的 person 记录数量
     */
    public ListenableFuture<Integer> deletePersons(List<Integer> personIdList){
        return service.deletePersons(personIdList);
    }
    /**
     * 删除papersNum指定的人员(person)记录及关联的所有记录
     * @param papersNumlist 证件号码列表
     * @return 返回删除的 person 记录数量
     */
    public ListenableFuture<Integer> deletePersonsByPapersNum(List<String> papersNumlist){
        return service.deletePersonsByPapersNum(papersNumlist);
    }
    /**
     * 设置 personId 指定的人员为禁止状态
     * @param personId
     * @see #setPersonExpiryDate(int, long)
     */
    public ListenableFuture<Void> disablePerson(int personId){
        return service.disablePerson(personId);
    }
    /**
     * 设置 personIdList 指定的人员为禁止状态
     * @param personIdList 人员id列表
     */
    public ListenableFuture<Void> disablePerson(List<Integer> personIdList){
        return service.disablePersonList(personIdList);
    }
    /**
     * 判断id指定的设备记录是否存在
     * @param id
     * @return 
     */
    public ListenableFuture<Boolean> existsDevice(int id){
        return service.existsDevice(id);
    }
    /**
     * 判断md5指定的特征记录是否存在
     * @param md5
     * @return 
     */
    public ListenableFuture<Boolean> existsFeature(String md5){
        return service.existsFeature(md5);
    }
    /**
     * 判断md5指定的图像记录是否存在
     * @param md5
     * @return 
     */
    public ListenableFuture<Boolean> existsImage(String md5){
        return service.existsImage(md5);
    }
    /**
     * 判断是否存在personId指定的人员记录
     * @param persionId
     * @return 
     */
    public ListenableFuture<Boolean> existsPerson(int persionId){
        return service.existsPerson(persionId);
    }

    public ListenableFuture<DeviceBean> getDevice(int deviceId){
        return Futures.transform(
                service.getDevice(deviceId), 
                new Function<net.gdface.facelog.client.thrift.DeviceBean,DeviceBean>(){
                    @Override
                    public DeviceBean apply(net.gdface.facelog.client.thrift.DeviceBean input) {
                        return converterDeviceBean.fromRight(input);
                    }
                });
    }

    public ListenableFuture<List<DeviceBean>> getDevice(List<Integer> deviceId){
        return Futures.transform(
                service.getDeviceList(deviceId), 
                new Function<List<net.gdface.facelog.client.thrift.DeviceBean>,List<DeviceBean>>(){
                    @Override
                    public List<DeviceBean> apply(List<net.gdface.facelog.client.thrift.DeviceBean> input) {
                        return converterDeviceBean.fromRight(input);
                    }
                });
    }
    /**
     * 根据MD5校验码返回人脸特征数据记录
     * @param md5
     * @return 如果数据库中没有对应的数据则返回null
     */
    public ListenableFuture<FeatureBean> getFeature(String md5){
        return Futures.transform(
                service.getFeature(md5), 
                new Function<net.gdface.facelog.client.thrift.FeatureBean,FeatureBean>(){
                    @Override
                    public FeatureBean apply(net.gdface.facelog.client.thrift.FeatureBean input) {
                        return converterFeatureBean.fromRight(input);
                    }
                });
    }
    /**
     * 返回 persionId 关联的所有人脸特征记录
     * @param personId fl_person.id
     * @return 返回 fl_feature.md5  列表
     */
    public ListenableFuture<List<String>> getFeatureBeansByPersonId(int personId){
        return service.getFeatureBeansByPersonId(personId);
    }
    /**
     * 根据MD5校验码返回人脸特征数据
     * @param md5
     * @return 二进制数据字节数组,如果数据库中没有对应的数据则返回null
     */
    public ListenableFuture<byte[]> getFeatureBytes(String md5){
        return service.getFeatureBytes(md5);
    }
    /**
     * 根据MD5校验码返回人脸特征数据记录
     * @param md5 md5列表
     * @return {@link FeatureBean}列表
     */
    public ListenableFuture<List<FeatureBean>> getFeature(List<String> md5){
        return Futures.transform(
                service.getFeatureList(md5), 
                new Function<List<net.gdface.facelog.client.thrift.FeatureBean>,List<FeatureBean>>(){
                    @Override
                    public List<FeatureBean> apply(List<net.gdface.facelog.client.thrift.FeatureBean> input) {
                        return converterFeatureBean.fromRight(input);
                    }
                });
    }
    /**
     * 根据图像的MD5校验码返回图像记录
     * @param imageMD5
     * @return {@link ImageBean} ,如果没有对应记录则返回null
     */
    public ListenableFuture<ImageBean> getImage(String imageMD5){
        return Futures.transform(
                service.getImage(imageMD5), 
                new Function<net.gdface.facelog.client.thrift.ImageBean,ImageBean>(){
                    @Override
                    public ImageBean apply(net.gdface.facelog.client.thrift.ImageBean input) {
                        return converterImageBean.fromRight(input);
                    }
                });
    }
    /**
     * 根据图像的MD5校验码返回图像数据
     * @param imageMD5
     * @return 二进制数据字节数组,如果数据库中没有对应的数据则返回null
     * @see {@link #getBinary(String)}
     */
    public ListenableFuture<byte[]> getImageBytes(String imageMD5){
        return service.getImageBytes(imageMD5);
    }
    /**
     * 返回featureMd5的人脸特征记录关联的所有图像记录id(MD5)
     * @param featureMd5 人脸特征id(MD5)
     * @return 
     */
    public ListenableFuture<List<String>> getImagesAssociatedByFeature(String featureMd5){
        return service.getImagesAssociatedByFeature(featureMd5);
    }
    /**
     * 返回 persionId 关联的所有日志记录
     * @param personId fl_person.id
     * @return 
     */
    public ListenableFuture<List<LogBean>> getLogBeansByPersonId(int personId){
        return Futures.transform(
                service.getLogBeansByPersonId(personId), 
                new Function<List<net.gdface.facelog.client.thrift.LogBean>,List<LogBean>>(){
                    @Override
                    public List<LogBean> apply(List<net.gdface.facelog.client.thrift.LogBean> input) {
                        return converterLogBean.fromRight(input);
                    }
                });
    }
    /**
     * 返回personId指定的人员记录
     * @param personId
     * @return 
     */
    public ListenableFuture<PersonBean> getPerson(int personId){
        return Futures.transform(
                service.getPerson(personId), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 根据证件号码返回人员记录
     * @param papersNum
     * @return 
     */
    public ListenableFuture<PersonBean> getPersonByPapersNum(String papersNum){
        return Futures.transform(
                service.getPersonByPapersNum(papersNum), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 返回 list 指定的人员记录
     * @param idList 人员id列表
     * @return 
     */
    public ListenableFuture<List<PersonBean>> getPersons(List<Integer> idList){
        return Futures.transform(
                service.getPersons(idList), 
                new Function<List<net.gdface.facelog.client.thrift.PersonBean>,List<PersonBean>>(){
                    @Override
                    public List<PersonBean> apply(List<net.gdface.facelog.client.thrift.PersonBean> input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 判断 personId 指定的人员记录是否过期
     * @param personId
     * @return 
     */
    public ListenableFuture<Boolean> isDisable(int personId){
        return service.isDisable(personId);
    }
    /**
     * 返回所有人员记录
     * @return 
     */
    public ListenableFuture<List<Integer>> loadAllPerson(){
        return service.loadAllPerson();
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳( timestamp )的所有fl_feature记录
     * @param timestamp
     * @return 返回 fl_feature.md5 列表
     */
    public ListenableFuture<List<String>> loadFeatureMd5ByUpdate(long timestamp){
        return service.loadFeatureMd5ByUpdate(timestamp);
    }

    public ListenableFuture<List<LogBean>> loadLogByWhere(String where,int startRow,int numRows){
        return Futures.transform(
                service.loadLogByWhere(where,
                startRow,
                numRows), 
                new Function<List<net.gdface.facelog.client.thrift.LogBean>,List<LogBean>>(){
                    @Override
                    public List<LogBean> apply(List<net.gdface.facelog.client.thrift.LogBean> input) {
                        return converterLogBean.fromRight(input);
                    }
                });
    }

    public ListenableFuture<List<LogLightBean>> loadLogLightByWhere(String where,int startRow,int numRows){
        return Futures.transform(
                service.loadLogLightByWhere(where,
                startRow,
                numRows), 
                new Function<List<net.gdface.facelog.client.thrift.LogLightBean>,List<LogLightBean>>(){
                    @Override
                    public List<LogLightBean> apply(List<net.gdface.facelog.client.thrift.LogLightBean> input) {
                        return converterLogLightBean.fromRight(input);
                    }
                });
    }
    /**
     * 返回 where 指定的所有人员记录
     * @param where SQL条件语句
     * @return 返回 fl_person.id 列表
     */
    public ListenableFuture<List<Integer>> loadPersonByWhere(String where){
        return service.loadPersonByWhere(where);
    }
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳( timestamp )的所有fl_person记录
     * @param timestamp
     * @return 返回fl_person.id 列表
     */
    public ListenableFuture<List<Integer>> loadPersonIdByUpdate(long timestamp){
        return service.loadPersonIdByUpdate(timestamp);
    }
    /**
     * (主动更新机制实现)<br>
     * 返回fl_person.update_time字段大于指定时间戳( timestamp )的所有fl_person记录<br>
     * 同时包含fl_feature更新记录引用的fl_person记录
     * @param timestamp
     * @return 返回fl_person.id 列表
     */
    public ListenableFuture<List<Integer>> loadUpdatePersons(long timestamp){
        return service.loadUpdatePersons(timestamp);
    }
    /**
     * 替换personId指定的人员记录的人脸特征数据,同时删除原特征数据记录(fl_feature)及关联的fl_face表记录
     * @param personId 人员记录id
     * @param featureMd5 人脸特征数据记录id (已经保存在数据库中)
     * @param deleteOldFeatureImage 是否删除原特征数据记录间接关联的原始图像记录(fl_image)
     */
    public ListenableFuture<Void> replaceFeature(int personId,String featureMd5,boolean deleteOldFeatureImage){
        return service.replaceFeature(personId,
                featureMd5,
                deleteOldFeatureImage);
    }

    public ListenableFuture<DeviceBean> saveDevice(DeviceBean deviceBean){
        return Futures.transform(
                service.saveDevice(converterDeviceBean.toRight(deviceBean)), 
                new Function<net.gdface.facelog.client.thrift.DeviceBean,DeviceBean>(){
                    @Override
                    public DeviceBean apply(net.gdface.facelog.client.thrift.DeviceBean input) {
                        return converterDeviceBean.fromRight(input);
                    }
                });
    }
    /**
     * 保存人员(person)记录
     * @param bean
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(PersonBean bean){
        return Futures.transform(
                service.savePerson(converterPersonBean.toRight(bean)), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * @param bean 人员信息对象
     * @param idPhoto 标准照图像
     * @param feature 人脸特征数据
     * @param featureImage 提取特征源图像,为null 时,默认使用idPhoto
     * @param featureFaceBean 人脸位置对象,为null 时,不保存人脸数据
     * @param deviceBean featureImage来源设备对象
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(PersonBean bean,byte[] idPhoto,byte[] feature,byte[] featureImage,FaceBean featureFaceBean,int deviceId){
        return Futures.transform(
                service.savePersonFull(converterPersonBean.toRight(bean),
                idPhoto,
                feature,
                featureImage,
                converterFaceBean.toRight(featureFaceBean),
                deviceId), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 保存人员(person)记录
     * @param beans
     */
    public ListenableFuture<Void> savePerson(List<PersonBean> beans){
        return service.savePersonList(converterPersonBean.toRight(beans));
    }
    /**
     * 保存人员信息记录(包含标准照)
     * @param persons
     * @return 
     */
    public ListenableFuture<Integer> savePerson(Map<ByteBuffer, PersonBean> persons){
        return service.savePersonsWithPhoto(toBytesKey(converterPersonBean.toRightValue(persons)));
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像对象,可为null
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(PersonBean bean,byte[] idPhoto){
        return Futures.transform(
                service.savePersonWithPhoto(converterPersonBean.toRight(bean),
                idPhoto), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param featureBean 用于验证的人脸特征数据对象,可为null
     * @param deviceId 标准照图像来源设备id,可为null
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(PersonBean bean,byte[] idPhoto,FeatureBean featureBean,int deviceId){
        return Futures.transform(
                service.savePersonWithPhotoAndFeature(converterPersonBean.toRight(bean),
                idPhoto,
                converterFeatureBean.toRight(featureBean),
                deviceId), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param feature 用于验证的人脸特征数据,可为null,不可重复, 参见 {@link #addFeature(ByteBuffer, Integer, List)}
     * @param faceBeans 参见 {@link #addFeature(ByteBuffer, Integer, List)}
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(PersonBean bean,byte[] idPhoto,byte[] feature,List<FaceBean> faceBeans){
        return Futures.transform(
                service.savePersonWithPhotoAndFeatureMultiFaces(converterPersonBean.toRight(bean),
                idPhoto,
                feature,
                converterFaceBean.toRight(faceBeans)), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param feature 用于验证的人脸特征数据,可为null
     * @param faceInfo 生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null
     * @param deviceId faceInfo 图像来源设备id,可为null
     * @return bean 保存的{@link PersonBean}对象
     */
    public ListenableFuture<PersonBean> savePerson(PersonBean bean,byte[] idPhoto,byte[] feature,Map<ByteBuffer, FaceBean> faceInfo,int deviceId){
        return Futures.transform(
                service.savePersonWithPhotoAndFeatureMultiImage(converterPersonBean.toRight(bean),
                idPhoto,
                feature,
                toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                deviceId), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhotoMd5 标准照图像对象,可为null
     * @param featureMd5 用于验证的人脸特征数据对象,可为null
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(PersonBean bean,String idPhotoMd5,String featureMd5){
        return Futures.transform(
                service.savePersonWithPhotoAndFeatureSaved(converterPersonBean.toRight(bean),
                idPhotoMd5,
                featureMd5), 
                new Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                });
    }
    /**
     * 修改 personId 指定的人员记录的有效期
     * @param personId
     * @param expiryDate 失效日期
     */
    public ListenableFuture<Void> setPersonExpiryDate(int personId,long expiryDate){
        return service.setPersonExpiryDate(personId,
                expiryDate);
    }
    /**
     * 修改 personIdList 指定的人员记录的有效期
     * @param personIdList 人员id列表
     * @param expiryDate 失效日期
     */
    public ListenableFuture<Void> setPersonExpiryDate(List<Integer> personIdList,long expiryDate){
        return service.setPersonExpiryDateList(personIdList,
                expiryDate);
    }
}
