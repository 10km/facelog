// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: service.client.async.java.vm
// ______________________________________________________
package net.gdface.facelog.client;

import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.MoreExecutors;
import static com.google.common.base.Preconditions.*;
import java.nio.ByteBuffer;
import java.util.*;

/**
 * FaceLog 服务接口<br>
 * <ul>
 * <li>所有标明为图像数据的参数,是指具有特定图像格式的图像数据(如jpg,png...),而非无格式的原始点阵位图</li>
 * <li>所有{@link RuntimeException}异常会被封装在{@link ServiceRuntimeException}抛出,
 * client端可以通过{@link ServiceRuntimeException#getType()}获取异常类型.<br>
 * 异常类型定义参见{@link CommonConstant.ExceptionType},<br>
 * 例如: 在执行涉及数据库操作的异常{@link RuntimeDaoException}，
 * 被封装到{@link ServiceRuntimeException}抛出时type为{@link ExceptionType#DAO}</li>
 * <li>所有数据库对象(Java Bean,比如 {@link PersonBean}),在执行保存操作(save)时,
 * 如果为新增记录({@link PersonBean#isNew()}为true),则执行insert操作,否则执行update操作,
 * 如果数据库已经存在指定的记录而{@code isNew()}为{@code true},则那么执行insert操作数据库就会抛出异常，
 * 所以请在执行save时特别注意{@code isNew()}状态</li>
 * <li>对于以add为前缀的添加记录方法,在添加记录前会检查数据库中是否有(主键)相同记录,
 * 如果有则会抛出异常{@link DuplicateRecordException}</li>
 * <li>所有带{@link Token}参数的方法都需要提供访问令牌,访问令牌分为人员令牌,设备令牌和root令牌(仅用于root帐户),
 * 注释中标注为{@code PERSON_ONLY}的方法只接受人员令牌,
 * 注释中标注为{@code DEVICE_ONLY}的方法只接受设备令牌,
 * 注释中标注为{@code ROOT_ONLY}的方法只接受root令牌,
 * 关于令牌申请和释放参见{@link #applyPersonToken(int, String, boolean)},{@link #releasePersonToken(Token)},{@link #online(DeviceBean)},{@link #offline(Token)}</li>
 * </ul>
 * remote implementation of the service IFaceLog(asynchronous implementation)<br>
 * all method comments be copied from {@code net.gdface.facelog.service.BaseFaceLog.java}<br>
 * <b>NOTE 1:</b>methods with 'Generic' suffix support generic type argument for {@code byte[]}.See also {@link GenericUtils#toBytes(Object)}<br>
 * <b>NOTE 2:</b>for each method,{@link List} type input argument must not have {@code null} element.<br>
 * @author guyadong
 */
public class IFaceLogClientAsync implements Constant{
    
    /** bean converter between {@link DeviceBean} and corresponding thrift bean */
    private IBeanConverter<DeviceBean,net.gdface.facelog.client.thrift.DeviceBean> converterDeviceBean = ThriftConverter.CONVERTER_DEVICEBEAN;
    /** bean converter between {@link DeviceGroupBean} and corresponding thrift bean */
    private IBeanConverter<DeviceGroupBean,net.gdface.facelog.client.thrift.DeviceGroupBean> converterDeviceGroupBean = ThriftConverter.CONVERTER_DEVICEGROUPBEAN;
    /** bean converter between {@link FaceBean} and corresponding thrift bean */
    private IBeanConverter<FaceBean,net.gdface.facelog.client.thrift.FaceBean> converterFaceBean = ThriftConverter.CONVERTER_FACEBEAN;
    /** bean converter between {@link FeatureBean} and corresponding thrift bean */
    private IBeanConverter<FeatureBean,net.gdface.facelog.client.thrift.FeatureBean> converterFeatureBean = ThriftConverter.CONVERTER_FEATUREBEAN;
    /** bean converter between {@link ImageBean} and corresponding thrift bean */
    private IBeanConverter<ImageBean,net.gdface.facelog.client.thrift.ImageBean> converterImageBean = ThriftConverter.CONVERTER_IMAGEBEAN;
    /** bean converter between {@link LogBean} and corresponding thrift bean */
    private IBeanConverter<LogBean,net.gdface.facelog.client.thrift.LogBean> converterLogBean = ThriftConverter.CONVERTER_LOGBEAN;
    /** bean converter between {@link PermitBean} and corresponding thrift bean */
    private IBeanConverter<PermitBean,net.gdface.facelog.client.thrift.PermitBean> converterPermitBean = ThriftConverter.CONVERTER_PERMITBEAN;
    /** bean converter between {@link PersonBean} and corresponding thrift bean */
    private IBeanConverter<PersonBean,net.gdface.facelog.client.thrift.PersonBean> converterPersonBean = ThriftConverter.CONVERTER_PERSONBEAN;
    /** bean converter between {@link PersonGroupBean} and corresponding thrift bean */
    private IBeanConverter<PersonGroupBean,net.gdface.facelog.client.thrift.PersonGroupBean> converterPersonGroupBean = ThriftConverter.CONVERTER_PERSONGROUPBEAN;
    /** bean converter between {@link LogLightBean} and corresponding thrift bean */
    private IBeanConverter<LogLightBean,net.gdface.facelog.client.thrift.LogLightBean> converterLogLightBean = ThriftConverter.CONVERTER_LOGLIGHTBEAN;

    private final ClientFactory factory;
    /**
     * constructor 
     * @param service a instance of net.gdface.facelog.client.thrift.IFaceLog.Async created by Swift, must not be null
     */
    IFaceLogClientAsync(ClientFactory factory){
        this.factory = checkNotNull(factory,"factory is null");
    }
    
    private net.gdface.facelog.client.thrift.IFaceLog.Async delegate(){
    	return factory.applyInstance(net.gdface.facelog.client.thrift.IFaceLog.Async.class);
    }
    // 1 SERIVCE PORT : getPerson
    /**
     * 返回personId指定的人员记录
     * @param personId
     * @return 
     */
    public ListenableFuture<PersonBean> getPerson(int personId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.getPerson(personId), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 2 SERIVCE PORT : getPersons
    /**
     * 返回 list 指定的人员记录
     * @param idList 人员id列表
     * @return 
     */
    public ListenableFuture<List<PersonBean>> getPersons(List<Integer> idList){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<PersonBean>> future = Futures.transform(
                service.getPersons(CollectionUtils.checkNotNullElement(idList)), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.PersonBean>,List<PersonBean>>(){
                    @Override
                    public List<PersonBean> apply(List<net.gdface.facelog.client.thrift.PersonBean> input) {
                        return PersonBean.replaceNullInstance(converterPersonBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<PersonBean>>(service,future);

    }
    // 3 SERIVCE PORT : getPersonByPapersNum
    /**
     * 根据证件号码返回人员记录
     * @param papersNum
     * @return 
     */
    public ListenableFuture<PersonBean> getPersonByPapersNum(String papersNum){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.getPersonByPapersNum(papersNum), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 4 SERIVCE PORT : getFeatureBeansByPersonId
    /**
     * 返回 persionId 关联的所有人脸特征记录
     * @param personId fl_person.id
     * @return 返回 fl_feature.md5  列表
     */
    public ListenableFuture<List<String>> getFeatureBeansByPersonId(int personId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<String>> future = Futures.transform(
                service.getFeatureBeansByPersonId(personId), 
                new com.google.common.base.Function<List<String>,List<String>>(){
                    @Override
                    public List<String> apply(List<String> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<String>>(service,future);

    }
    // 5 SERIVCE PORT : deletePerson
    /**
     * 删除personId指定的人员(person)记录及关联的所有记录
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param personId
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<Integer> deletePerson(
            int personId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deletePerson(
                    personId,
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 6 SERIVCE PORT : deletePersons
    /**
     * 删除personIdList指定的人员(person)记录及关联的所有记录
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param personIdList 人员id列表
     * @param token 访问令牌
     * @return 返回删除的 person 记录数量
     */
    public ListenableFuture<Integer> deletePersons(
            List<Integer> personIdList,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deletePersons(
                    CollectionUtils.checkNotNullElement(personIdList),
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 7 SERIVCE PORT : deletePersonByPapersNum
    /**
     * 删除papersNum指定的人员(person)记录及关联的所有记录
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param papersNum 证件号码
     * @param token 访问令牌
     * @return 返回删除的 person 记录数量
     * @see {@link #deletePerson(int, Token)}
     */
    public ListenableFuture<Integer> deletePersonByPapersNum(
            String papersNum,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deletePersonByPapersNum(
                    papersNum,
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 8 SERIVCE PORT : deletePersonsByPapersNum
    /**
     * 删除papersNum指定的人员(person)记录及关联的所有记录
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param papersNumlist 证件号码列表
     * @param token 访问令牌
     * @return 返回删除的 person 记录数量
     */
    public ListenableFuture<Integer> deletePersonsByPapersNum(
            List<String> papersNumlist,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deletePersonsByPapersNum(
                    CollectionUtils.checkNotNullElement(papersNumlist),
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 9 SERIVCE PORT : existsPerson
    /**
     * 判断是否存在personId指定的人员记录
     * @param persionId
     * @return 
     */
    public ListenableFuture<Boolean> existsPerson(int persionId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.existsPerson(persionId), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 10 SERIVCE PORT : isDisable
    /**
     * 判断 personId 指定的人员记录是否过期
     * @param personId
     * @return 
     */
    public ListenableFuture<Boolean> isDisable(int personId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.isDisable(personId), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 11 SERIVCE PORT : disablePerson
    /**
     * 设置 personId 指定的人员为禁止状态
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param personId
     * @param token 访问令牌
     * @see #setPersonExpiryDate(int, long, Token)
     */
    public ListenableFuture<Void> disablePerson(
            int personId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.disablePerson(
                    personId,
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 12 SERIVCE PORT : setPersonExpiryDate
    /**
     * 修改 personId 指定的人员记录的有效期
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param personId
     * @param expiryDate 失效日期
     * @param token 访问令牌
     */
    public ListenableFuture<Void> setPersonExpiryDate(
            int personId,
            Date expiryDate,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.setPersonExpiryDate(
                    personId,
                    GenericUtils.toLong(expiryDate,Date.class),
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 13 SERIVCE PORT : setPersonExpiryDateList
    /**
     * 修改 personIdList 指定的人员记录的有效期
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param personIdList 人员id列表
     * @param expiryDate 失效日期
     * @param token 访问令牌
     */
    public ListenableFuture<Void> setPersonExpiryDate(
            List<Integer> personIdList,
            Date expiryDate,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.setPersonExpiryDateList(
                    CollectionUtils.checkNotNullElement(personIdList),
                    GenericUtils.toLong(expiryDate,Date.class),
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 14 SERIVCE PORT : disablePersonList
    /**
     * 设置 personIdList 指定的人员为禁止状态
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param personIdList 人员id列表
     * @param token 访问令牌
     */
    public ListenableFuture<Void> disablePerson(
            List<Integer> personIdList,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.disablePersonList(
                    CollectionUtils.checkNotNullElement(personIdList),
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 15 SERIVCE PORT : getLogBeansByPersonId
    /**
     * 返回 persionId 关联的所有日志记录
     * @param personId fl_person.id
     * @return 
     */
    public ListenableFuture<List<LogBean>> getLogBeansByPersonId(int personId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<LogBean>> future = Futures.transform(
                service.getLogBeansByPersonId(personId), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.LogBean>,List<LogBean>>(){
                    @Override
                    public List<LogBean> apply(List<net.gdface.facelog.client.thrift.LogBean> input) {
                        return LogBean.replaceNullInstance(converterLogBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<LogBean>>(service,future);

    }
    // 16 SERIVCE PORT : loadAllPerson
    /**
     * 返回所有人员记录
     * @return 
     */
    public ListenableFuture<List<Integer>> loadAllPerson(){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadAllPerson(), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 17 SERIVCE PORT : loadPersonIdByWhere
    /**
     * 返回 where 指定的所有人员记录
     * @param where SQL条件语句
     * @return 返回 fl_person.id 列表
     */
    public ListenableFuture<List<Integer>> loadPersonIdByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadPersonIdByWhere(where), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 18 SERIVCE PORT : loadPersonByWhere
    /**
     * 返回 where 指定的所有人员记录
     * @param where SQL条件语句
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 
     */
    public ListenableFuture<List<PersonBean>> loadPersonByWhere(
            String where,
            int startRow,
            int numRows){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<PersonBean>> future = Futures.transform(
                service.loadPersonByWhere(
                    where,
                    startRow,
                    numRows), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.PersonBean>,List<PersonBean>>(){
                    @Override
                    public List<PersonBean> apply(List<net.gdface.facelog.client.thrift.PersonBean> input) {
                        return PersonBean.replaceNullInstance(converterPersonBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<PersonBean>>(service,future);

    }
    // 19 SERIVCE PORT : countPersonByWhere
    /**
     * 返回满足{@code where}条件的日志记录(fl_person)数目
     * @param where 为{@code null}时返回所有记录
     * @return 
     */
    public ListenableFuture<Integer> countPersonByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.countPersonByWhere(where), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 20 SERIVCE PORT : savePerson
    /**
     * 保存人员(person)记录
     * @param bean
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(
            PersonBean bean,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePerson(
                    converterPersonBean.toRight(bean),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 21 SERIVCE PORT : savePersons
    /**
     * 保存人员(person)记录
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param beans
     * @param token 访问令牌
     */
    public ListenableFuture<Void> savePersons(
            List<PersonBean> beans,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.savePersons(
                    converterPersonBean.toRight(CollectionUtils.checkNotNullElement(beans)),
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 22 SERIVCE PORT : savePersonWithPhoto
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhoto 标准照图像对象,可为null
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(
            PersonBean bean,
            byte[] idPhoto,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhoto(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 22 GENERIC
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],net.gdface.facelog.client.thrift.Token)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see GenericUtils#toBytes(Object)
     */
    public ListenableFuture<PersonBean> savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhoto(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 23 SERIVCE PORT : savePersonsWithPhoto
    /**
     * 保存人员信息记录(包含标准照)
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param persons
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<Integer> savePerson(
            Map<ByteBuffer, PersonBean> persons,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.savePersonsWithPhoto(
                    GenericUtils.toBytesKey(converterPersonBean.toRightValue(persons)),
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 24 SERIVCE PORT : savePersonWithPhotoAndFeatureSaved
    /**
     * 保存人员信息记录
     * @param bean
     * @param idPhotoMd5 标准照图像对象,可为null
     * @param featureMd5 用于验证的人脸特征数据对象,可为null
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(
            PersonBean bean,
            String idPhotoMd5,
            String featureMd5,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhotoAndFeatureSaved(
                    converterPersonBean.toRight(bean),
                    idPhotoMd5,
                    featureMd5,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 25 SERIVCE PORT : savePersonWithPhotoAndFeature
    /**
     * 保存人员信息记录
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param featureBean 用于验证的人脸特征数据对象,可为null
     * @param deviceId 标准照图像来源设备id,可为null
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(
            PersonBean bean,
            byte[] idPhoto,
            FeatureBean featureBean,
            Integer deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhotoAndFeature(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    converterFeatureBean.toRight(featureBean),
                    deviceId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 25 GENERIC
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],FeatureBean,Integer,net.gdface.facelog.client.thrift.Token)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see GenericUtils#toBytes(Object)
     */
    public ListenableFuture<PersonBean> savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            FeatureBean featureBean,
            Integer deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhotoAndFeature(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    converterFeatureBean.toRight(featureBean),
                    deviceId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 26 SERIVCE PORT : savePersonWithPhotoAndFeatureMultiFaces
    /**
     * 保存人员信息记录
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param feature 用于验证的人脸特征数据,可为null,不可重复, 参见 {@link #addFeature(ByteBuffer, Integer, List, Token)}
     * @param faceBeans 参见 {@link #addFeature(ByteBuffer, Integer, List, Token)}
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(
            PersonBean bean,
            byte[] idPhoto,
            byte[] feature,
            List<FaceBean> faceBeans,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhotoAndFeatureMultiFaces(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    feature,
                    converterFaceBean.toRight(CollectionUtils.checkNotNullElement(faceBeans)),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 26 GENERIC
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],byte[],List,net.gdface.facelog.client.thrift.Token)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see GenericUtils#toBytes(Object)
     */
    public ListenableFuture<PersonBean> savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            Object feature,
            List<FaceBean> faceBeans,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhotoAndFeatureMultiFaces(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    GenericUtils.toBytes(feature),
                    converterFaceBean.toRight(CollectionUtils.checkNotNullElement(faceBeans)),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 27 SERIVCE PORT : savePersonWithPhotoAndFeatureMultiImage
    /**
     * 保存人员信息记录
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param bean
     * @param idPhoto 标准照图像,可为null
     * @param feature 用于验证的人脸特征数据,可为null
     * @param faceInfo 生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null
     * @param deviceId faceInfo 图像来源设备id,可为null
     * @param token 访问令牌
     * @return bean 保存的{@link PersonBean}对象
     */
    public ListenableFuture<PersonBean> savePerson(
            PersonBean bean,
            byte[] idPhoto,
            byte[] feature,
            Map<ByteBuffer, FaceBean> faceInfo,
            Integer deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhotoAndFeatureMultiImage(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    feature,
                    GenericUtils.toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                    deviceId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 27 GENERIC
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],byte[],Map,Integer,net.gdface.facelog.client.thrift.Token)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see GenericUtils#toBytes(Object)
     */
    public ListenableFuture<PersonBean> savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            Object feature,
            Map<ByteBuffer, FaceBean> faceInfo,
            Integer deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonWithPhotoAndFeatureMultiImage(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    GenericUtils.toBytes(feature),
                    GenericUtils.toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                    deviceId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 28 SERIVCE PORT : savePersonFull
    /**
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param bean 人员信息对象
     * @param idPhoto 标准照图像
     * @param feature 人脸特征数据
     * @param featureImage 提取特征源图像,为null 时,默认使用idPhoto
     * @param featureFaceBean 人脸位置对象,为null 时,不保存人脸数据
     * @param token 访问令牌
     * @param deviceBean featureImage来源设备对象
     * @return 
     */
    public ListenableFuture<PersonBean> savePerson(
            PersonBean bean,
            byte[] idPhoto,
            byte[] feature,
            byte[] featureImage,
            FaceBean featureFaceBean,
            Integer deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonFull(
                    converterPersonBean.toRight(bean),
                    idPhoto,
                    feature,
                    featureImage,
                    converterFaceBean.toRight(featureFaceBean),
                    deviceId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 28 GENERIC
    /** 
     * Generic version of {@link #savePerson(PersonBean,byte[],byte[],byte[],FaceBean,Integer,net.gdface.facelog.client.thrift.Token)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see GenericUtils#toBytes(Object)
     */
    public ListenableFuture<PersonBean> savePersonGeneric(
            PersonBean bean,
            Object idPhoto,
            Object feature,
            Object featureImage,
            FaceBean featureFaceBean,
            Integer deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonBean> future = Futures.transform(
                service.savePersonFull(
                    converterPersonBean.toRight(bean),
                    GenericUtils.toBytes(idPhoto),
                    GenericUtils.toBytes(feature),
                    GenericUtils.toBytes(featureImage),
                    converterFaceBean.toRight(featureFaceBean),
                    deviceId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonBean,PersonBean>(){
                    @Override
                    public PersonBean apply(net.gdface.facelog.client.thrift.PersonBean input) {
                        return converterPersonBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonBean>(service,future);

    }
    // 29 SERIVCE PORT : replaceFeature
    /**
     * 替换personId指定的人员记录的人脸特征数据,同时删除原特征数据记录(fl_feature)及关联的fl_face表记录
     * @param personId 人员记录id
     * @param featureMd5 人脸特征数据记录id (已经保存在数据库中)
     * @param deleteOldFeatureImage 是否删除原特征数据记录间接关联的原始图像记录(fl_image)
     * @param token 访问令牌
     */
    public ListenableFuture<Void> replaceFeature(
            Integer personId,
            String featureMd5,
            boolean deleteOldFeatureImage,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.replaceFeature(
                    personId,
                    featureMd5,
                    deleteOldFeatureImage,
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 30 SERIVCE PORT : loadUpdatedPersons
    /**
     * (主动更新机制实现)<br>
     * 返回fl_person.update_time字段大于指定时间戳( {@code timestamp} )的所有fl_person记录<br>
     * 同时包含fl_feature更新记录引用的fl_person记录
     * @param timestamp
     * @return 返回fl_person.id 列表
     */
    public ListenableFuture<List<Integer>> loadUpdatedPersons(Date timestamp){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadUpdatedPersons(GenericUtils.toLong(timestamp,Date.class)), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 31 SERIVCE PORT : loadPersonIdByUpdateTime
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_person记录
     * @param timestamp
     * @return 返回fl_person.id 列表
     */
    public ListenableFuture<List<Integer>> loadPersonIdByUpdateTime(Date timestamp){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadPersonIdByUpdateTime(GenericUtils.toLong(timestamp,Date.class)), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 32 SERIVCE PORT : loadFeatureMd5ByUpdate
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_feature记录
     * @param timestamp
     * @return 返回 fl_feature.md5 列表
     */
    public ListenableFuture<List<String>> loadFeatureMd5ByUpdate(Date timestamp){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<String>> future = Futures.transform(
                service.loadFeatureMd5ByUpdate(GenericUtils.toLong(timestamp,Date.class)), 
                new com.google.common.base.Function<List<String>,List<String>>(){
                    @Override
                    public List<String> apply(List<String> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<String>>(service,future);

    }
    // 33 SERIVCE PORT : addLog
    /**
     * 添加一条验证日志记录
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param bean
     * @param token 访问令牌
     */
    public ListenableFuture<Void> addLog(
            LogBean bean,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.addLog(
                    converterLogBean.toRight(bean),
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 34 SERIVCE PORT : addLogs
    /**
     * 添加一组验证日志记录(事务存储)
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param beans
     * @param token 访问令牌
     */
    public ListenableFuture<Void> addLogs(
            List<LogBean> beans,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.addLogs(
                    converterLogBean.toRight(CollectionUtils.checkNotNullElement(beans)),
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 35 SERIVCE PORT : loadLogByWhere
    /**
     * 日志查询<br>
     * 根据{@code where}指定的查询条件查询日志记录
     * @param where
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 
     */
    public ListenableFuture<List<LogBean>> loadLogByWhere(
            String where,
            int startRow,
            int numRows){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<LogBean>> future = Futures.transform(
                service.loadLogByWhere(
                    where,
                    startRow,
                    numRows), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.LogBean>,List<LogBean>>(){
                    @Override
                    public List<LogBean> apply(List<net.gdface.facelog.client.thrift.LogBean> input) {
                        return LogBean.replaceNullInstance(converterLogBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<LogBean>>(service,future);

    }
    // 36 SERIVCE PORT : loadLogLightByWhere
    /**
     * 日志查询<br>
     * 根据{@code where}指定的查询条件查询日志记录{@link LogLightBean}
     * @param where
     * @param startRow
     * @param numRows
     * @return 
     */
    public ListenableFuture<List<LogLightBean>> loadLogLightByWhere(
            String where,
            int startRow,
            int numRows){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<LogLightBean>> future = Futures.transform(
                service.loadLogLightByWhere(
                    where,
                    startRow,
                    numRows), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.LogLightBean>,List<LogLightBean>>(){
                    @Override
                    public List<LogLightBean> apply(List<net.gdface.facelog.client.thrift.LogLightBean> input) {
                        return LogLightBean.replaceNullInstance(converterLogLightBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<LogLightBean>>(service,future);

    }
    // 37 SERIVCE PORT : countLogLightByWhere
    /**
     * 返回符合{@code where}条件的记录条数
     * @param where
     * @return 
     */
    public ListenableFuture<Integer> countLogLightByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.countLogLightByWhere(where), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 38 SERIVCE PORT : countLogByWhere
    /**
     * 返回满足{@code where}条件的日志记录(fl_log)数目
     * @param where 为{@code null}时返回所有记录
     * @return 
     */
    public ListenableFuture<Integer> countLogByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.countLogByWhere(where), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 39 SERIVCE PORT : loadLogLightByVerifyTime
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @see #loadLogLightByWhere(String,int,int)
     */
    public ListenableFuture<List<LogLightBean>> loadLogLightByVerifyTime(
            Date timestamp,
            int startRow,
            int numRows){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<LogLightBean>> future = Futures.transform(
                service.loadLogLightByVerifyTime(
                    GenericUtils.toLong(timestamp,Date.class),
                    startRow,
                    numRows), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.LogLightBean>,List<LogLightBean>>(){
                    @Override
                    public List<LogLightBean> apply(List<net.gdface.facelog.client.thrift.LogLightBean> input) {
                        return LogLightBean.replaceNullInstance(converterLogLightBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<LogLightBean>>(service,future);

    }
    // 40 SERIVCE PORT : countLogLightByVerifyTime
    /**
     * 返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @see #countLogLightByWhere(String)
     */
    public ListenableFuture<Integer> countLogLightByVerifyTime(Date timestamp){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.countLogLightByVerifyTime(GenericUtils.toLong(timestamp,Date.class)), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 41 SERIVCE PORT : existsImage
    /**
     * 判断md5指定的图像记录是否存在
     * @param md5
     * @return 
     */
    public ListenableFuture<Boolean> existsImage(String md5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.existsImage(md5), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 42 SERIVCE PORT : addImage
    /**
     * 保存图像数据,如果图像数据已经存在，则抛出异常
     * @param imageData 图像数据
     * @param deviceId 图像来源设备id,可为null
     * @param faceBean 关联的人脸信息对象,可为null
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<ImageBean> addImage(
            byte[] imageData,
            Integer deviceId,
            FaceBean faceBean,
            Integer personId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<ImageBean> future = Futures.transform(
                service.addImage(
                    imageData,
                    deviceId,
                    converterFaceBean.toRight(faceBean),
                    personId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.ImageBean,ImageBean>(){
                    @Override
                    public ImageBean apply(net.gdface.facelog.client.thrift.ImageBean input) {
                        return converterImageBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,ImageBean>(service,future);

    }
    // 42 GENERIC
    /** 
     * Generic version of {@link #addImage(byte[],Integer,FaceBean,Integer,net.gdface.facelog.client.thrift.Token)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see GenericUtils#toBytes(Object)
     */
    public ListenableFuture<ImageBean> addImageGeneric(
            Object imageData,
            Integer deviceId,
            FaceBean faceBean,
            Integer personId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<ImageBean> future = Futures.transform(
                service.addImage(
                    GenericUtils.toBytes(imageData),
                    deviceId,
                    converterFaceBean.toRight(faceBean),
                    personId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.ImageBean,ImageBean>(){
                    @Override
                    public ImageBean apply(net.gdface.facelog.client.thrift.ImageBean input) {
                        return converterImageBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,ImageBean>(service,future);

    }
    // 43 SERIVCE PORT : existsFeature
    /**
     * 判断md5指定的特征记录是否存在
     * @param md5
     * @return 
     */
    public ListenableFuture<Boolean> existsFeature(String md5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.existsFeature(md5), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 44 SERIVCE PORT : addFeature
    /**
     * 增加一个人脸特征记录，如果记录已经存在则抛出异常
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param feature 特征数据
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param faecBeans 生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null
     * @param token 访问令牌
     * @return 保存的人脸特征记录{@link FeatureBean}
     */
    public ListenableFuture<FeatureBean> addFeature(
            byte[] feature,
            Integer personId,
            List<FaceBean> faecBeans,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<FeatureBean> future = Futures.transform(
                service.addFeature(
                    feature,
                    personId,
                    converterFaceBean.toRight(CollectionUtils.checkNotNullElement(faecBeans)),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.FeatureBean,FeatureBean>(){
                    @Override
                    public FeatureBean apply(net.gdface.facelog.client.thrift.FeatureBean input) {
                        return converterFeatureBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,FeatureBean>(service,future);

    }
    // 44 GENERIC
    /** 
     * Generic version of {@link #addFeature(byte[],Integer,List,net.gdface.facelog.client.thrift.Token)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see GenericUtils#toBytes(Object)
     */
    public ListenableFuture<FeatureBean> addFeatureGeneric(
            Object feature,
            Integer personId,
            List<FaceBean> faecBeans,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<FeatureBean> future = Futures.transform(
                service.addFeature(
                    GenericUtils.toBytes(feature),
                    personId,
                    converterFaceBean.toRight(CollectionUtils.checkNotNullElement(faecBeans)),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.FeatureBean,FeatureBean>(){
                    @Override
                    public FeatureBean apply(net.gdface.facelog.client.thrift.FeatureBean input) {
                        return converterFeatureBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,FeatureBean>(service,future);

    }
    // 45 SERIVCE PORT : addFeatureMulti
    /**
     * 增加一个人脸特征记录,特征数据由faceInfo指定的多张图像合成，如果记录已经存在则抛出异常
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param feature 特征数据
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param faceInfo 生成特征数据的图像及人脸信息对象(每张图对应一张人脸),可为null
     * @param deviceId 图像来源设备id,可为null
     * @param token 访问令牌
     * @return 保存的人脸特征记录{@link FeatureBean}
     */
    public ListenableFuture<FeatureBean> addFeature(
            byte[] feature,
            Integer personId,
            Map<ByteBuffer, FaceBean> faceInfo,
            Integer deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<FeatureBean> future = Futures.transform(
                service.addFeatureMulti(
                    feature,
                    personId,
                    GenericUtils.toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                    deviceId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.FeatureBean,FeatureBean>(){
                    @Override
                    public FeatureBean apply(net.gdface.facelog.client.thrift.FeatureBean input) {
                        return converterFeatureBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,FeatureBean>(service,future);

    }
    // 45 GENERIC
    /** 
     * Generic version of {@link #addFeature(byte[],Integer,Map,Integer,net.gdface.facelog.client.thrift.Token)}<br>
     * {@code Object} type instead of all argument with {@code byte[]} type,which can read binary data,
     * such as {@code InputStream,URL,URI,File,ByteBuffer},supported type depend on {@link GenericUtils#toBytes(Object)} <br>
     * @see GenericUtils#toBytes(Object)
     */
    public ListenableFuture<FeatureBean> addFeatureGeneric(
            Object feature,
            Integer personId,
            Map<ByteBuffer, FaceBean> faceInfo,
            Integer deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<FeatureBean> future = Futures.transform(
                service.addFeatureMulti(
                    GenericUtils.toBytes(feature),
                    personId,
                    GenericUtils.toBytesKey(converterFaceBean.toRightValue(faceInfo)),
                    deviceId,
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.FeatureBean,FeatureBean>(){
                    @Override
                    public FeatureBean apply(net.gdface.facelog.client.thrift.FeatureBean input) {
                        return converterFeatureBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,FeatureBean>(service,future);

    }
    // 46 SERIVCE PORT : deleteFeature
    /**
     * 删除featureMd5指定的特征记录及关联的face记录
     * @param featureMd5
     * @param deleteImage 是否删除关联的 image记录
     * @param token 访问令牌
     * @return 返回删除的特征记录关联的图像(image)记录的MD5<br>
     * {@code deleteImage}为{@code true}时返回空表
     */
    public ListenableFuture<List<String>> deleteFeature(
            String featureMd5,
            boolean deleteImage,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<String>> future = Futures.transform(
                service.deleteFeature(
                    featureMd5,
                    deleteImage,
                    token), 
                new com.google.common.base.Function<List<String>,List<String>>(){
                    @Override
                    public List<String> apply(List<String> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<String>>(service,future);

    }
    // 47 SERIVCE PORT : deleteAllFeaturesByPersonId
    /**
     * 删除 personId 关联的所有特征(feature)记录
     * @param personId
     * @param deleteImage 是否删除关联的 image记录
     * @param token 访问令牌
     * @return 
     * @see #deleteFeature(String, boolean, Token)
     */
    public ListenableFuture<Integer> deleteAllFeaturesByPersonId(
            int personId,
            boolean deleteImage,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deleteAllFeaturesByPersonId(
                    personId,
                    deleteImage,
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 48 SERIVCE PORT : getFeature
    /**
     * 根据MD5校验码返回人脸特征数据记录
     * @param md5
     * @return 如果数据库中没有对应的数据则返回null
     */
    public ListenableFuture<FeatureBean> getFeature(String md5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<FeatureBean> future = Futures.transform(
                service.getFeature(md5), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.FeatureBean,FeatureBean>(){
                    @Override
                    public FeatureBean apply(net.gdface.facelog.client.thrift.FeatureBean input) {
                        return converterFeatureBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,FeatureBean>(service,future);

    }
    // 49 SERIVCE PORT : getFeatures
    /**
     * 根据MD5校验码返回人脸特征数据记录
     * @param md5 md5列表
     * @return {@link FeatureBean}列表
     */
    public ListenableFuture<List<FeatureBean>> getFeatures(List<String> md5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<FeatureBean>> future = Futures.transform(
                service.getFeatures(CollectionUtils.checkNotNullElement(md5)), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.FeatureBean>,List<FeatureBean>>(){
                    @Override
                    public List<FeatureBean> apply(List<net.gdface.facelog.client.thrift.FeatureBean> input) {
                        return FeatureBean.replaceNullInstance(converterFeatureBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<FeatureBean>>(service,future);

    }
    // 50 SERIVCE PORT : getFeaturesOfPerson
    /**
     * 返回指定人员{@code personId}关联的所有特征<br>
     * @param personId
     * @return 
     */
    public ListenableFuture<List<String>> getFeaturesOfPerson(int personId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<String>> future = Futures.transform(
                service.getFeaturesOfPerson(personId), 
                new com.google.common.base.Function<List<String>,List<String>>(){
                    @Override
                    public List<String> apply(List<String> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<String>>(service,future);

    }
    // 51 SERIVCE PORT : getFeatureBytes
    /**
     * 根据MD5校验码返回人脸特征数据
     * @param md5
     * @return 二进制数据字节数组,如果数据库中没有对应的数据则返回null
     */
    public ListenableFuture<byte[]> getFeatureBytes(String md5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<byte[]> future = Futures.transform(
                service.getFeatureBytes(md5), 
                new com.google.common.base.Function<byte[],byte[]>(){
                    @Override
                    public byte[] apply(byte[] input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,byte[]>(service,future);

    }
    // 52 SERIVCE PORT : getImageBytes
    /**
     * 根据图像的MD5校验码返回图像数据
     * @param imageMD5
     * @return 二进制数据字节数组,如果数据库中没有对应的数据则返回null
     * @see {@link #getBinary(String)}
     */
    public ListenableFuture<byte[]> getImageBytes(String imageMD5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<byte[]> future = Futures.transform(
                service.getImageBytes(imageMD5), 
                new com.google.common.base.Function<byte[],byte[]>(){
                    @Override
                    public byte[] apply(byte[] input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,byte[]>(service,future);

    }
    // 53 SERIVCE PORT : getImage
    /**
     * 根据图像的MD5校验码返回图像记录
     * @param imageMD5
     * @return {@link ImageBean} ,如果没有对应记录则返回null
     */
    public ListenableFuture<ImageBean> getImage(String imageMD5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<ImageBean> future = Futures.transform(
                service.getImage(imageMD5), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.ImageBean,ImageBean>(){
                    @Override
                    public ImageBean apply(net.gdface.facelog.client.thrift.ImageBean input) {
                        return converterImageBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,ImageBean>(service,future);

    }
    // 54 SERIVCE PORT : getImagesAssociatedByFeature
    /**
     * 返回featureMd5的人脸特征记录关联的所有图像记录id(MD5)
     * @param featureMd5 人脸特征id(MD5)
     * @return 
     */
    public ListenableFuture<List<String>> getImagesAssociatedByFeature(String featureMd5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<String>> future = Futures.transform(
                service.getImagesAssociatedByFeature(featureMd5), 
                new com.google.common.base.Function<List<String>,List<String>>(){
                    @Override
                    public List<String> apply(List<String> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<String>>(service,future);

    }
    // 55 SERIVCE PORT : getDeviceIdOfFeature
    /**
     * 返回featureMd5的人脸特征记录关联的设备id<br>
     * @param featureMd5
     * @return 如果没有关联的设备则返回{@code null}
     */
    public ListenableFuture<Integer> getDeviceIdOfFeature(String featureMd5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.getDeviceIdOfFeature(featureMd5), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 56 SERIVCE PORT : deleteImage
    /**
     * 删除imageMd5指定图像及其缩略图
     * @param imageMd5
     * @param token 访问令牌
     * @return 删除成功返回1,否则返回0
     */
    public ListenableFuture<Integer> deleteImage(
            String imageMd5,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deleteImage(
                    imageMd5,
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 57 SERIVCE PORT : existsDevice
    /**
     * 判断id指定的设备记录是否存在
     * @param id
     * @return 
     */
    public ListenableFuture<Boolean> existsDevice(int id){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.existsDevice(id), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 58 SERIVCE PORT : saveDevice
    /**
     * 保存设备记录
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param deviceBean
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<DeviceBean> saveDevice(
            DeviceBean deviceBean,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<DeviceBean> future = Futures.transform(
                service.saveDevice(
                    converterDeviceBean.toRight(deviceBean),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.DeviceBean,DeviceBean>(){
                    @Override
                    public DeviceBean apply(net.gdface.facelog.client.thrift.DeviceBean input) {
                        return converterDeviceBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,DeviceBean>(service,future);

    }
    // 59 SERIVCE PORT : updateDevice
    /**
     * 更新设备记录(必须是已经存在的设备记录，否则抛出异常)
     * @param deviceBean
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<DeviceBean> updateDevice(
            DeviceBean deviceBean,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<DeviceBean> future = Futures.transform(
                service.updateDevice(
                    converterDeviceBean.toRight(deviceBean),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.DeviceBean,DeviceBean>(){
                    @Override
                    public DeviceBean apply(net.gdface.facelog.client.thrift.DeviceBean input) {
                        return converterDeviceBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,DeviceBean>(service,future);

    }
    // 60 SERIVCE PORT : getDevice
    /**
     * 返回{@code deviceId}指定的设备记录
     * @param deviceId
     * @return 
     */
    public ListenableFuture<DeviceBean> getDevice(int deviceId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<DeviceBean> future = Futures.transform(
                service.getDevice(deviceId), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.DeviceBean,DeviceBean>(){
                    @Override
                    public DeviceBean apply(net.gdface.facelog.client.thrift.DeviceBean input) {
                        return converterDeviceBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,DeviceBean>(service,future);

    }
    // 61 SERIVCE PORT : getDevices
    /**
     * 返回 {@code idList} 指定的设备记录
     * @param idList
     * @return 
     */
    public ListenableFuture<List<DeviceBean>> getDevices(List<Integer> idList){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<DeviceBean>> future = Futures.transform(
                service.getDevices(CollectionUtils.checkNotNullElement(idList)), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.DeviceBean>,List<DeviceBean>>(){
                    @Override
                    public List<DeviceBean> apply(List<net.gdface.facelog.client.thrift.DeviceBean> input) {
                        return DeviceBean.replaceNullInstance(converterDeviceBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<DeviceBean>>(service,future);

    }
    // 62 SERIVCE PORT : loadDeviceByWhere
    /**
     * 根据{@code where}指定的查询条件查询设备记录
     * @param where SQL 条件语句
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 
     */
    public ListenableFuture<List<DeviceBean>> loadDeviceByWhere(
            String where,
            int startRow,
            int numRows){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<DeviceBean>> future = Futures.transform(
                service.loadDeviceByWhere(
                    where,
                    startRow,
                    numRows), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.DeviceBean>,List<DeviceBean>>(){
                    @Override
                    public List<DeviceBean> apply(List<net.gdface.facelog.client.thrift.DeviceBean> input) {
                        return DeviceBean.replaceNullInstance(converterDeviceBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<DeviceBean>>(service,future);

    }
    // 63 SERIVCE PORT : countDeviceByWhere
    /**
     * 返回满足{@code where} SQL条件语句的fl_device记录总数
     * @param where
     * @return 
     */
    public ListenableFuture<Integer> countDeviceByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.countDeviceByWhere(where), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 64 SERIVCE PORT : loadDeviceIdByWhere
    /**
     * 根据{@code where}指定的查询条件查询设备记录
     * @param where
     * @return 返回设备ID列表
     */
    public ListenableFuture<List<Integer>> loadDeviceIdByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadDeviceIdByWhere(where), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 65 SERIVCE PORT : saveDeviceGroup
    /**
     * 保存设备组记录
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param deviceGroupBean
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<DeviceGroupBean> saveDeviceGroup(
            DeviceGroupBean deviceGroupBean,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<DeviceGroupBean> future = Futures.transform(
                service.saveDeviceGroup(
                    converterDeviceGroupBean.toRight(deviceGroupBean),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.DeviceGroupBean,DeviceGroupBean>(){
                    @Override
                    public DeviceGroupBean apply(net.gdface.facelog.client.thrift.DeviceGroupBean input) {
                        return converterDeviceGroupBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,DeviceGroupBean>(service,future);

    }
    // 66 SERIVCE PORT : getDeviceGroup
    /**
     * 根据设备组id返回数据库记录
     * @param deviceGroupId
     * @return 
     */
    public ListenableFuture<DeviceGroupBean> getDeviceGroup(int deviceGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<DeviceGroupBean> future = Futures.transform(
                service.getDeviceGroup(deviceGroupId), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.DeviceGroupBean,DeviceGroupBean>(){
                    @Override
                    public DeviceGroupBean apply(net.gdface.facelog.client.thrift.DeviceGroupBean input) {
                        return converterDeviceGroupBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,DeviceGroupBean>(service,future);

    }
    // 67 SERIVCE PORT : getDeviceGroups
    /**
     * 返回设备组id列表指定的数据库记录
     * @param groupIdList
     * @return 
     */
    public ListenableFuture<List<DeviceGroupBean>> getDeviceGroups(List<Integer> groupIdList){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<DeviceGroupBean>> future = Futures.transform(
                service.getDeviceGroups(CollectionUtils.checkNotNullElement(groupIdList)), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.DeviceGroupBean>,List<DeviceGroupBean>>(){
                    @Override
                    public List<DeviceGroupBean> apply(List<net.gdface.facelog.client.thrift.DeviceGroupBean> input) {
                        return DeviceGroupBean.replaceNullInstance(converterDeviceGroupBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<DeviceGroupBean>>(service,future);

    }
    // 68 SERIVCE PORT : deleteDeviceGroup
    /**
     * 删除{@code deviceGroupId}指定的设备组<br>
     * 组删除后，所有子节点记录不会被删除，但parent字段会被自动默认为{@code null}
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param deviceGroupId
     * @param token 访问令牌
     * @return 返回删除的记录条数
     */
    public ListenableFuture<Integer> deleteDeviceGroup(
            int deviceGroupId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deleteDeviceGroup(
                    deviceGroupId,
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 69 SERIVCE PORT : getSubDeviceGroup
    /**
     * 返回{@code deviceGroupId}指定的设备组下的所有子节点(设备组)<br>
     * 如果没有子节点则返回空表
     * @param deviceGroupId
     * @return 设备组ID列表
     */
    public ListenableFuture<List<Integer>> getSubDeviceGroup(int deviceGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.getSubDeviceGroup(deviceGroupId), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 70 SERIVCE PORT : getDevicesOfGroup
    /**
     * 返回{@code deviceGroupId}指定的设备组下属的所有设备记录<br>
     * 如果没有下属设备记录则返回空表
     * @param deviceGroupId
     * @return 
     */
    public ListenableFuture<List<Integer>> getDevicesOfGroup(int deviceGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.getDevicesOfGroup(deviceGroupId), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 71 SERIVCE PORT : listOfParentForDeviceGroup
    /**
     * 返回({@code deviceGroupId})指定的fl_device_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @param deviceGroupId
     * @return 如果{@code deviceGroupId}无效则返回空表
     */
    public ListenableFuture<List<Integer>> listOfParentForDeviceGroup(int deviceGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.listOfParentForDeviceGroup(deviceGroupId), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 72 SERIVCE PORT : getDeviceGroupsBelongs
    /**
     * 返回({@code deviceId})指定的设备所属所有设备组<br>
     * @param deviceId
     * @return 如果{@code deviceId}无效则返回空表
     * @see {@link #listOfParentForDeviceGroup(int)}
     */
    public ListenableFuture<List<Integer>> getDeviceGroupsBelongs(int deviceId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.getDeviceGroupsBelongs(deviceId), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 73 SERIVCE PORT : savePersonGroup
    /**
     * 保存人员组记录
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param personGroupBean
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<PersonGroupBean> savePersonGroup(
            PersonGroupBean personGroupBean,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonGroupBean> future = Futures.transform(
                service.savePersonGroup(
                    converterPersonGroupBean.toRight(personGroupBean),
                    token), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonGroupBean,PersonGroupBean>(){
                    @Override
                    public PersonGroupBean apply(net.gdface.facelog.client.thrift.PersonGroupBean input) {
                        return converterPersonGroupBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonGroupBean>(service,future);

    }
    // 74 SERIVCE PORT : getPersonGroup
    /**
     * 根据人员组id返回数据库记录
     * @param personGroupId
     * @return 
     */
    public ListenableFuture<PersonGroupBean> getPersonGroup(int personGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<PersonGroupBean> future = Futures.transform(
                service.getPersonGroup(personGroupId), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.PersonGroupBean,PersonGroupBean>(){
                    @Override
                    public PersonGroupBean apply(net.gdface.facelog.client.thrift.PersonGroupBean input) {
                        return converterPersonGroupBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,PersonGroupBean>(service,future);

    }
    // 75 SERIVCE PORT : getPersonGroups
    /**
     * 返回人员组id列表指定的数据库记录
     * @param groupIdList
     * @return 
     */
    public ListenableFuture<List<PersonGroupBean>> getPersonGroups(List<Integer> groupIdList){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<PersonGroupBean>> future = Futures.transform(
                service.getPersonGroups(CollectionUtils.checkNotNullElement(groupIdList)), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.PersonGroupBean>,List<PersonGroupBean>>(){
                    @Override
                    public List<PersonGroupBean> apply(List<net.gdface.facelog.client.thrift.PersonGroupBean> input) {
                        return PersonGroupBean.replaceNullInstance(converterPersonGroupBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<PersonGroupBean>>(service,future);

    }
    // 76 SERIVCE PORT : deletePersonGroup
    /**
     * 删除{@code personGroupId}指定的人员组<br>
     * 组删除后，所有子节点记录不会被删除，但parent字段会被自动默认为{@code null}
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param personGroupId
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<Integer> deletePersonGroup(
            int personGroupId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deletePersonGroup(
                    personGroupId,
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 77 SERIVCE PORT : getSubPersonGroup
    /**
     * 返回{@code personGroupId}指定的人员组下的所有子节点(人员组)<br>
     * 如果没有子节点则返回空表
     * @param personGroupId
     * @return 人员组ID列表
     */
    public ListenableFuture<List<Integer>> getSubPersonGroup(int personGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.getSubPersonGroup(personGroupId), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 78 SERIVCE PORT : getPersonsOfGroup
    /**
     * 返回{@code deviceGroupId}指定的人员组下属的所有人员记录<br>
     * 如果没有下属人员记录则返回空表
     * @param deviceGroupId
     * @return 人员ID列表
     */
    public ListenableFuture<List<Integer>> getPersonsOfGroup(int personGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.getPersonsOfGroup(personGroupId), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 79 SERIVCE PORT : listOfParentForPersonGroup
    /**
     * 返回({@code personGroupId})指定的fl_person_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @param personGroupId
     * @return 如果{@code personGroupId}无效则返回空表
     */
    public ListenableFuture<List<Integer>> listOfParentForPersonGroup(int personGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.listOfParentForPersonGroup(personGroupId), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 80 SERIVCE PORT : getPersonGroupsBelongs
    /**
     * 返回({@code personId})指定的人员所属所有人员组<br>
     * @param personId
     * @return 如果{@code personId}无效则返回空表
     * @see {@link #listOfParentForPersonGroup(int)}
     */
    public ListenableFuture<List<Integer>> getPersonGroupsBelongs(int personId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.getPersonGroupsBelongs(personId), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 81 SERIVCE PORT : loadDeviceGroupByWhere
    /**
     * 查询{@code where} SQL条件语句指定的记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @return 设备组ID列表
     */
    public ListenableFuture<List<Integer>> loadDeviceGroupByWhere(
            String where,
            int startRow,
            int numRows){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadDeviceGroupByWhere(
                    where,
                    startRow,
                    numRows), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 82 SERIVCE PORT : countDeviceGroupByWhere
    /**
     * 返回满足{@code where} SQL条件语句的fl_device_group记录总数
     */
    public ListenableFuture<Integer> countDeviceGroupByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.countDeviceGroupByWhere(where), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 83 SERIVCE PORT : loadDeviceGroupIdByWhere
    /**
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #loadDeviceGroupByWhere(String,int,int)
     */
    public ListenableFuture<List<Integer>> loadDeviceGroupIdByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadDeviceGroupIdByWhere(where), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 84 SERIVCE PORT : addPermit
    /**
     * 添加一个(允许)通行关联记录:允许{@code personGroup}指定的人员组在
     * {@code deviceGroup}指定的设备组下属的所有设备通行
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param deviceGroup
     * @param personGroup
     * @param token 访问令牌
     */
    public ListenableFuture<Void> addPermit(
            DeviceGroupBean deviceGroup,
            PersonGroupBean personGroup,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.addPermit(
                    converterDeviceGroupBean.toRight(deviceGroup),
                    converterPersonGroupBean.toRight(personGroup),
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 85 SERIVCE PORT : addPermitById
    /**
     * 创建fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>
     * 如果记录已经存在则返回已有记录,如果输入的参数为{@code null}或记录不存在则返回{@code null}
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param deviceGroupId 外键,设备组id
     * @param personGroupId 外键,人员组id
     * @param token 访问令牌
     * @see #addPermit(DeviceGroupBean,PersonGroupBean, Token)
     */
    public ListenableFuture<Void> addPermit(
            int deviceGroupId,
            int personGroupId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.addPermitById(
                    deviceGroupId,
                    personGroupId,
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 86 SERIVCE PORT : deletePermit
    /**
     * 删除通行关联记录,参见{@link #addPermit(DeviceGroupBean, PersonGroupBean, Token)}
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param deviceGroup
     * @param personGroup
     * @param token 访问令牌
     * @return 删除成功返回1,否则返回0
     */
    public ListenableFuture<Integer> deletePermit(
            DeviceGroupBean deviceGroup,
            PersonGroupBean personGroup,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.deletePermit(
                    converterDeviceGroupBean.toRight(deviceGroup),
                    converterPersonGroupBean.toRight(personGroup),
                    token), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 87 SERIVCE PORT : getGroupPermit
    /**
     * 获取人员组通行权限<br>
     * 返回{@code personGroupId}指定的人员组在{@code deviceId}设备上是否允许通行
     * @param deviceId
     * @param personGroupId
     * @return 
     */
    public ListenableFuture<Boolean> getGroupPermit(
            int deviceId,
            int personGroupId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.getGroupPermit(
                    deviceId,
                    personGroupId), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 88 SERIVCE PORT : getPersonPermit
    /**
     * 获取人员通行权限<br>
     * 返回{@code personId}指定的人员在{@code deviceId}设备上是否允许通行
     * @param deviceId
     * @param personId
     * @return 
     */
    public ListenableFuture<Boolean> getPersonPermit(
            int deviceId,
            int personId){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.getPersonPermit(
                    deviceId,
                    personId), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 89 SERIVCE PORT : getGroupPermits
    /**
     * 参见 {@link #getGroupPermit(Integer, Integer) }
     */
    public ListenableFuture<List<Boolean>> getGroupPermits(
            int deviceId,
            List<Integer> personGroupIdList){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Boolean>> future = Futures.transform(
                service.getGroupPermits(
                    deviceId,
                    CollectionUtils.checkNotNullElement(personGroupIdList)), 
                new com.google.common.base.Function<List<Boolean>,List<Boolean>>(){
                    @Override
                    public List<Boolean> apply(List<Boolean> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Boolean>>(service,future);

    }
    // 90 SERIVCE PORT : getPersonPermits
    /**
     * 参见 {@link #getPersonPermit(Integer, Integer) }
     */
    public ListenableFuture<List<Boolean>> getPersonPermits(
            int deviceId,
            List<Integer> personIdList){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Boolean>> future = Futures.transform(
                service.getPersonPermits(
                    deviceId,
                    CollectionUtils.checkNotNullElement(personIdList)), 
                new com.google.common.base.Function<List<Boolean>,List<Boolean>>(){
                    @Override
                    public List<Boolean> apply(List<Boolean> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Boolean>>(service,future);

    }
    // 91 SERIVCE PORT : loadPermitByUpdate
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_permit.create_time 字段大于指定时间戳( {@code timestamp} )的所有fl_permit记录
     * @param timestamp
     * @return 
     */
    public ListenableFuture<List<PermitBean>> loadPermitByUpdate(Date timestamp){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<PermitBean>> future = Futures.transform(
                service.loadPermitByUpdate(GenericUtils.toLong(timestamp,Date.class)), 
                new com.google.common.base.Function<List<net.gdface.facelog.client.thrift.PermitBean>,List<PermitBean>>(){
                    @Override
                    public List<PermitBean> apply(List<net.gdface.facelog.client.thrift.PermitBean> input) {
                        return PermitBean.replaceNullInstance(converterPermitBean.fromRight(input));
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<PermitBean>>(service,future);

    }
    // 92 SERIVCE PORT : loadPersonGroupByWhere
    /**
     * 查询{@code where} SQL条件语句指定的记录
     * @param where SQL 条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(<0时返回所有记录)
     * @return 人员组ID列表
     */
    public ListenableFuture<List<Integer>> loadPersonGroupByWhere(
            String where,
            int startRow,
            int numRows){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadPersonGroupByWhere(
                    where,
                    startRow,
                    numRows), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 93 SERIVCE PORT : countPersonGroupByWhere
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person_group 记录总数
     * @see {@link IPersonGroupManager#Where(String)}
     */
    public ListenableFuture<Integer> countPersonGroupByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Integer> future = Futures.transform(
                service.countPersonGroupByWhere(where), 
                new com.google.common.base.Function<Integer,Integer>(){
                    @Override
                    public Integer apply(Integer input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Integer>(service,future);

    }
    // 94 SERIVCE PORT : loadPersonGroupIdByWhere
    /**
     * 查询{@code where}条件指定的记录
     * @return 返回查询结果记录的主键
     * @see #loadPersonGroupByWhere(String,int,int)
     */
    public ListenableFuture<List<Integer>> loadPersonGroupIdByWhere(String where){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<List<Integer>> future = Futures.transform(
                service.loadPersonGroupIdByWhere(where), 
                new com.google.common.base.Function<List<Integer>,List<Integer>>(){
                    @Override
                    public List<Integer> apply(List<Integer> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,List<Integer>>(service,future);

    }
    // 95 SERIVCE PORT : registerDevice
    /**
     * 新设备注册,如果设备已经注册则返回注册设备记录<br>
     * 注册时必须提供设备MAC地址,是否提供序列号,根据应用需要选择
     * @param newDevice 设备记录,_isNew字段必须为{@code true},{@code id}字段不要指定,数据库会自动分配,保存在返回值中
     * @return 
     */
    public ListenableFuture<DeviceBean> registerDevice(DeviceBean newDevice){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<DeviceBean> future = Futures.transform(
                service.registerDevice(converterDeviceBean.toRight(newDevice)), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.DeviceBean,DeviceBean>(){
                    @Override
                    public DeviceBean apply(net.gdface.facelog.client.thrift.DeviceBean input) {
                        return converterDeviceBean.fromRight(input);
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,DeviceBean>(service,future);

    }
    // 96 SERIVCE PORT : unregisterDevice
    /**
     * (设备端)设备删除
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param deviceId
     * @param token 设备验证令牌
     */
    public ListenableFuture<Void> unregisterDevice(
            int deviceId,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.unregisterDevice(
                    deviceId,
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 97 SERIVCE PORT : online
    /**
     * 设备申请上线,每次调用都会产生一个新的令牌
     * @param device 上线设备信息，必须提供{@code id, mac, serialNo}字段
     * @return 设备访问令牌
     */
    public ListenableFuture<net.gdface.facelog.client.thrift.Token> online(DeviceBean device){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<net.gdface.facelog.client.thrift.Token> future = Futures.transform(
                service.online(converterDeviceBean.toRight(device)), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.Token,net.gdface.facelog.client.thrift.Token>(){
                    @Override
                    public net.gdface.facelog.client.thrift.Token apply(net.gdface.facelog.client.thrift.Token input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,net.gdface.facelog.client.thrift.Token>(service,future);

    }
    // 98 SERIVCE PORT : offline
    /**
     * 设备申请离线,删除设备令牌
     * <br>{@link TokenMangement.Enable#DEVICE_ONLY}
     * @param token 当前持有的令牌
     */
    public ListenableFuture<Void> offline(net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.offline(token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 99 SERIVCE PORT : applyPersonToken
    /**
     * 申请人员访问令牌
     * @param personId
     * @param password 密码
     * @param isMd5 为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)
     * @return 
     */
    public ListenableFuture<net.gdface.facelog.client.thrift.Token> applyPersonToken(
            int personId,
            String password,
            boolean isMd5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<net.gdface.facelog.client.thrift.Token> future = Futures.transform(
                service.applyPersonToken(
                    personId,
                    password,
                    isMd5), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.Token,net.gdface.facelog.client.thrift.Token>(){
                    @Override
                    public net.gdface.facelog.client.thrift.Token apply(net.gdface.facelog.client.thrift.Token input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,net.gdface.facelog.client.thrift.Token>(service,future);

    }
    // 100 SERIVCE PORT : releasePersonToken
    /**
     * 释放人员访问令牌
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param token 当前持有的令牌
     */
    public ListenableFuture<Void> releasePersonToken(net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.releasePersonToken(token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 101 SERIVCE PORT : applyRootToken
    /**
     * 申请root访问令牌
     * @param password root用户密码
     * @param isMd5 为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)
     * @return 
     */
    public ListenableFuture<net.gdface.facelog.client.thrift.Token> applyRootToken(
            String password,
            boolean isMd5){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<net.gdface.facelog.client.thrift.Token> future = Futures.transform(
                service.applyRootToken(
                    password,
                    isMd5), 
                new com.google.common.base.Function<net.gdface.facelog.client.thrift.Token,net.gdface.facelog.client.thrift.Token>(){
                    @Override
                    public net.gdface.facelog.client.thrift.Token apply(net.gdface.facelog.client.thrift.Token input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,net.gdface.facelog.client.thrift.Token>(service,future);

    }
    // 102 SERIVCE PORT : releaseRootToken
    /**
     * 释放root访问令牌
     * <br>{@link TokenMangement.Enable#ROOT_ONLY}
     * @param token 当前持有的令牌
     */
    public ListenableFuture<Void> releaseRootToken(net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.releaseRootToken(token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 103 SERIVCE PORT : isValidPassword
    /**
     * 验证用户密码是否匹配
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param userId 用户id字符串,root用户id即为{@link CommonConstant#ROOT_NAME}
     * @param password 用户密码
     * @param isMd5 为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)
     * @param token 访问令牌
     * @return {@code true}密码匹配
     */
    public ListenableFuture<Boolean> isValidPassword(
            String userId,
            String password,
            boolean isMd5,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.isValidPassword(
                    userId,
                    password,
                    isMd5,
                    token), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 104 SERIVCE PORT : applyAckChannel
    /**
     * 申请一个唯一的命令响应通道(默认有效期)<br>
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<String> applyAckChannel(net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<String> future = Futures.transform(
                service.applyAckChannel(token), 
                new com.google.common.base.Function<String,String>(){
                    @Override
                    public String apply(String input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,String>(service,future);

    }
    // 105 SERIVCE PORT : applyAckChannelWithDuration
    /**
     * 申请一个唯一的命令响应通道<br>
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param token 访问令牌
     * @param duration 通道有效时间(秒) >0有效,否则使用默认的有效期
     * @return 
     */
    public ListenableFuture<String> applyAckChannel(
            net.gdface.facelog.client.thrift.Token token,
            long duration){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<String> future = Futures.transform(
                service.applyAckChannelWithDuration(
                    token,
                    duration), 
                new com.google.common.base.Function<String,String>(){
                    @Override
                    public String apply(String input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,String>(service,future);

    }
    // 106 SERIVCE PORT : applyCmdSn
    /**
     * 申请一个唯一的命令序列号
     * <br>{@link TokenMangement.Enable#PERSON_ONLY}
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<Long> applyCmdSn(net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Long> future = Futures.transform(
                service.applyCmdSn(token), 
                new com.google.common.base.Function<Long,Long>(){
                    @Override
                    public Long apply(Long input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Long>(service,future);

    }
    // 107 SERIVCE PORT : isValidCmdSn
    /**
     * 判断命令序列号是否有效<br>
     * 序列号过期或不存在都返回{@code false}
     * @param cmdSn
     * @return 
     */
    public ListenableFuture<Boolean> isValidCmdSn(long cmdSn){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.isValidCmdSn(cmdSn), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 108 SERIVCE PORT : isValidAckChannel
    /**
     * 判断命令响应通道是否有效<br>
     * 通道过期或不存在都返回{@code false}
     * @param ackChannel
     * @return 
     */
    public ListenableFuture<Boolean> isValidAckChannel(String ackChannel){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Boolean> future = Futures.transform(
                service.isValidAckChannel(ackChannel), 
                new com.google.common.base.Function<Boolean,Boolean>(){
                    @Override
                    public Boolean apply(Boolean input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Boolean>(service,future);

    }
    // 109 SERIVCE PORT : getRedisParameters
    /**
     * 返回redis访问基本参数:<br>
     * <ul>
     * <li>redis服务器地址</li>
     * <li>设备命令通道名</li>
     * <li>人员验证实时监控通道名</li>
     * <li>设备心跳实时监控通道名</li>
     * <li>设备心跳包间隔时间(秒)</li>
     * <li>设备心跳包失效时间(秒)</li>
     * </ul>
     * 参见{@link MQParam}定义
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<Map<net.gdface.facelog.client.thrift.MQParam, String>> getRedisParameters(net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Map<net.gdface.facelog.client.thrift.MQParam, String>> future = Futures.transform(
                service.getRedisParameters(token), 
                new com.google.common.base.Function<Map<net.gdface.facelog.client.thrift.MQParam, String>,Map<net.gdface.facelog.client.thrift.MQParam, String>>(){
                    @Override
                    public Map<net.gdface.facelog.client.thrift.MQParam, String> apply(Map<net.gdface.facelog.client.thrift.MQParam, String> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Map<net.gdface.facelog.client.thrift.MQParam, String>>(service,future);

    }
    // 110 SERIVCE PORT : getProperty
    /**
     * 返回指定的参数,如果参数没有定义则返回{@code null}
     * <br>{@link TokenMangement.Enable#ROOT_ONLY}
     * @param key
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<String> getProperty(
            String key,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<String> future = Futures.transform(
                service.getProperty(
                    key,
                    token), 
                new com.google.common.base.Function<String,String>(){
                    @Override
                    public String apply(String input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,String>(service,future);

    }
    // 111 SERIVCE PORT : getServiceConfig
    /**
     * 获取服务的所有配置参数
     * <br>{@link TokenMangement.Enable#ROOT_ONLY}
     * @param token 访问令牌
     * @return 
     */
    public ListenableFuture<Map<String, String>> getServiceConfig(net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Map<String, String>> future = Futures.transform(
                service.getServiceConfig(token), 
                new com.google.common.base.Function<Map<String, String>,Map<String, String>>(){
                    @Override
                    public Map<String, String> apply(Map<String, String> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Map<String, String>>(service,future);

    }
    // 112 SERIVCE PORT : setProperty
    /**
     * 修改/增加指定的配置参数
     * <br>{@link TokenMangement.Enable#ROOT_ONLY}
     * @param key 参数名
     * @param value 参数值
     * @param token 访问令牌
     */
    public ListenableFuture<Void> setProperty(
            String key,
            String value,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.setProperty(
                    key,
                    value,
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 113 SERIVCE PORT : setProperties
    /**
     * 修改一组配置参数
     * <br>{@link TokenMangement.Enable#ROOT_ONLY}
     * @param config 参数名-参数值对
     * @param token 访问令牌
     */
    public ListenableFuture<Void> setProperties(
            Map<String, String> config,
            net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.setProperties(
                    config,
                    token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 114 SERIVCE PORT : saveServiceConfig
    /**
     * 配置参数持久化<br>
     * 保存修改的配置到自定义配置文件
     * <br>{@link TokenMangement.Enable#ROOT_ONLY}
     * @param token 访问令牌
     */
    public ListenableFuture<Void> saveServiceConfig(net.gdface.facelog.client.thrift.Token token){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Void> future = Futures.transform(
                service.saveServiceConfig(token), 
                new com.google.common.base.Function<Void,Void>(){
                    @Override
                    public Void apply(Void input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Void>(service,future);

    }
    // 115 SERIVCE PORT : version
    /**
     * 返回服务版本号 {@link Version#VERSION}
     * @return 
     */
    public ListenableFuture<String> version(){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<String> future = Futures.transform(
                service.version(), 
                new com.google.common.base.Function<String,String>(){
                    @Override
                    public String apply(String input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,String>(service,future);

    }
    // 116 SERIVCE PORT : versionInfo
    /**
     * 返回服务版本的详细信息<br>
     * <ul>
     * <li>{@code VERSION} -- {@link Version#VERSION}</li>
     * <li>{@code SCM_REVISION} -- {@link Version#SCM_REVISION}</li>
     * <li>{@code SCM_BRANCH} -- {@link Version#SCM_BRANCH}</li>
     * <li>{@code TIMESTAMP} -- {@link Version#TIMESTAMP}</li>
     * </ul>
     * @return 
     */
    public ListenableFuture<Map<String, String>> versionInfo(){
        final net.gdface.facelog.client.thrift.IFaceLog.Async service = delegate();
        ListenableFuture<Map<String, String>> future = Futures.transform(
                service.versionInfo(), 
                new com.google.common.base.Function<Map<String, String>,Map<String, String>>(){
                    @Override
                    public Map<String, String> apply(Map<String, String> input) {
                        return input;
                    }
                },MoreExecutors.directExecutor());
        return factory.new ListenableFutureDecorator<net.gdface.facelog.client.thrift.IFaceLog.Async,Map<String, String>>(service,future);

    }
    ///////////////// CLIENT EXTENSIVE CONVENIENCE TOOLS /////////////
    
    /**
     * 根据设备ID返回设备所属的设备组ID的{@code Function}实例,
     * 设备ID无效则返回{@code null}
     */
    public final com.google.common.base.Function<Integer,Integer> deviceGroupIdGetter = 
        new com.google.common.base.Function<Integer,Integer>(){
        @Override
        public Integer apply(Integer input) {
            try{
                DeviceBean device = getDevice(input).get();
                return null == device ? null : device.getGroupId();
            }catch(Exception e){
                com.google.common.base.Throwables.throwIfUnchecked(e);
                throw new RuntimeException(e);
            }
        }};
    /**
     * 根据设备ID返回一个获取设备组ID的{@code Supplier}实例
     * @param deviceId
     * @return 对应的groupId,如果{@code deviceId}无效则返回{@code null}
     * @see #deviceGroupIdGetter
     * @throws ServiceRuntimeException
     */
    public com.google.common.base.Supplier<Integer> getDeviceGroupIdSupplier(final int deviceId){
        return new com.google.common.base.Supplier<Integer>(){
            @Override
            public Integer get() {
                return deviceGroupIdGetter.apply(deviceId);
            }        
        };
    }
    /**
     * 根据人员ID返回人员所属的所有组ID的{@code Function}实例
     * 如果人员ID无效则返回空表
     */
    public final com.google.common.base.Function<Integer,List<Integer>> personGroupBelonsGetter = 
        new com.google.common.base.Function<Integer,List<Integer>>(){
        @Override
        public List<Integer> apply(Integer personId) {
            try{
                return getPersonGroupsBelongs(personId).get();
            }catch(Exception e){
                com.google.common.base.Throwables.throwIfUnchecked(e);
                throw new RuntimeException(e);
            }
        }};
    /**
     * 根据人员ID返回一个获取所属组ID列表的{@code Supplier}实例
     * @param personId
     * @return 人员组ID列表,如果{@code personId}无效则返回空表
     * @see #personGroupBelonsGetter
     * @throws ServiceRuntimeException
     */
    public com.google.common.base.Supplier<List<Integer>> getPersonGroupBelonsSupplier(final int personId){
        return new com.google.common.base.Supplier<List<Integer>>(){
            @Override
            public List<Integer> get() {
                return personGroupBelonsGetter.apply(personId);
            }        
        };
    }
    /**
     * (管理端)创建{@link CmdManager}实例<br>
     * 使用默认REDIS连接池,参见 {@link gu.simplemq.redis.JedisPoolLazy#getDefaultInstance()}
     * @param token 访问令牌(person Token or root Token)
     * @return
     * @throws ServiceRuntimeException
     */
    public CmdManager makeCmdManager(net.gdface.facelog.client.thrift.Token token){
        try{
            checkArgument(checkNotNull(token).getType() == net.gdface.facelog.client.thrift.TokenType.PERSON 
                || token.getType() == net.gdface.facelog.client.thrift.TokenType.ROOT,"person or root token required");
            
            return new CmdManager(
                    gu.simplemq.redis.JedisPoolLazy.getDefaultInstance(),
                    getRedisParameters(token).get());
        }catch(Exception e){
            com.google.common.base.Throwables.throwIfUnchecked(e);
            throw new RuntimeException(e);
        }
    }
    /**
     * (设备端)创建设备命令分发器<br>
     * @param poolLazy
     * @param token 设备令牌
     * @return
     */
    public CmdDispatcher makeCmdDispatcher(net.gdface.facelog.client.thrift.Token token){
        try{
            checkArgument(checkNotNull(token).getType() == net.gdface.facelog.client.thrift.TokenType.DEVICE,"device token required");
            int deviceId = token.getId();
            return new CmdDispatcher(deviceId,
                    this.getDeviceGroupIdSupplier(deviceId))
                .setCmdSnValidator(cmdSnValidator)
                .setAckChannelValidator(ackChannelValidator)
                .setCmdAdapter(new CommandAdapterContainer())
                .registerChannel(this.getRedisParameters(token).get().get(net.gdface.facelog.client.thrift.MQParam.CMD_CHANNEL));
          }catch(Exception e){
              com.google.common.base.Throwables.throwIfUnchecked(e);
              throw new RuntimeException(e);
          }
    }
    /**
     * 返回一个申请命令响应通道的{@link com.google.common.base.Supplier}实例
     * @param token 访问令牌
     * @param duration 命令通道有效时间(秒) >0有效,否则使用默认的有效期
     * @return
     */
    public com.google.common.base.Supplier<String> 
    getAckChannelSupplier(final net.gdface.facelog.client.thrift.Token token,final long duration){
        return new com.google.common.base.Supplier<String>(){
            @Override
            public String get() {
                try{
                    return applyAckChannel(token,duration).get();
                }catch(Exception e){
                    com.google.common.base.Throwables.throwIfUnchecked(e);
                    throw new RuntimeException(e);
                }
            }
        }; 
    }
    /**
     * 返回一个申请命令响应通道的{@link com.google.common.base.Supplier}实例
     * @param token 访问令牌
     * @return
     */
    public com.google.common.base.Supplier<String> 
    getAckChannelSupplier(final net.gdface.facelog.client.thrift.Token token){
        return getAckChannelSupplier(token,0L);
    }
    /**
     * 返回一个申请命令序号的{@code Supplier}实例
     * @param token
     * @return 访问令牌
     */
    public com.google.common.base.Supplier<Long> 
    getCmdSnSupplier(final net.gdface.facelog.client.thrift.Token token){
        return new com.google.common.base.Supplier<Long>(){
            @Override
            public Long get() {
                try{
                    return applyCmdSn(token).get();
                }catch(Exception e){
                    com.google.common.base.Throwables.throwIfUnchecked(e);
                    throw new RuntimeException(e);
                }
            }
        }; 
    }
    /** 设备命令序列号验证器 */
    public final com.google.common.base.Predicate<Long> cmdSnValidator = 
        new com.google.common.base.Predicate<Long>(){
            @Override
            public boolean apply(Long input) {
                try{
                    return null == input ? false : isValidCmdSn(input).get();
                }catch(Exception e){
                    com.google.common.base.Throwables.throwIfUnchecked(e);
                    throw new RuntimeException(e);
                }
            }};
    /** 设备命令响应通道验证器 */
    public final com.google.common.base.Predicate<String> ackChannelValidator =
        new com.google.common.base.Predicate<String>(){
            @Override
            public boolean apply(String input) {
                try{
                    return null == input || input.isEmpty() ? false : isValidAckChannel(input).get();
                }catch(Exception e){
                    com.google.common.base.Throwables.throwIfUnchecked(e);
                    throw new RuntimeException(e);
                }
            }};
}
