// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: cmd.java.vm
// ______________________________________________________

package net.gdface.facelog.client;

import java.net.URL;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.TypeUtils;
import com.google.common.collect.ImmutableMap;
import com.google.common.reflect.TypeToken;

/** 
 * 设备命令定义 
 * @author guyadong
 */
public enum Cmd{
    /** 设置参数,可用于运行时修改参数 */parameter,
    /** 设置一组参数,可用于需要重启有效的参数 */config,
    /** 读取设备状态参数 */status,
    /** 设备状态报告,返回一组状态参数 */report,
    /** 设置设备工作状态 */enable,
    /** 返回设备工作状态 */isEnable,
    /** 设备重启 */reset,
    /** 设备与服务器时间同步 */time,
    /** 更新版本 */update,
    /** 发送消息 */message,
    /** 自定义命令,命令名及命令参数由项目自定义 */custom;
    
    /**
     * 对{@code adapter}执行当前设备命令
     * @param adapter 命令执行对象
     * @param parameters
     * @return 包含命令执行结果的命令响应对象
     */
    @SuppressWarnings("serial")
    public Ack<?> run(CommandAdapter adapter,Map<String,? extends Object> parameters){
        if(null == parameters){
            parameters = ImmutableMap.of();
        }
        switch(this){
        case parameter:{
                Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                try{
                    adapter.parameter(
                            cast(parameters.get("key"),new TypeToken<String>(){}),
                            cast(parameters.get("value"),new TypeToken<String>(){}));
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case config:{
                Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                try{
                    adapter.config(
                            cast(parameters.get("properties"),new TypeToken<Map<String,String>>(){}));
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case status:{
                Ack<Object> ack = new Ack<Object>().setStatus(Ack.Status.OK);
                try{
                    Object res = adapter.status(
                            cast(parameters.get("name"),new TypeToken<String>(){}));
                    // 填入返回值
                    ack.setValue(res);
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case report:{
                Ack<Map<String,Object>> ack = new Ack<Map<String,Object>>().setStatus(Ack.Status.OK);
                try{
                    Map<String,Object> res = adapter.report(
                            cast(parameters.get("names"),new TypeToken<List<String>>(){}));
                    // 填入返回值
                    ack.setValue(res);
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case enable:{
                Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                try{
                    adapter.enable(
                            cast(parameters.get("enable"),new TypeToken<Boolean>(){}));
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case isEnable:{
                Ack<Boolean> ack = new Ack<Boolean>().setStatus(Ack.Status.OK);
                try{
                    Boolean res = adapter.isEnable(
                            cast(parameters.get("message"),new TypeToken<String>(){}));
                    // 填入返回值
                    ack.setValue(res);
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case reset:{
                Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                try{
                    adapter.reset();
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case time:{
                Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                try{
                    adapter.time(
                            cast(parameters.get("unixTimestamp"),new TypeToken<Long>(){}));
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case update:{
                Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                try{
                    adapter.update(
                            cast(parameters.get("url"),new TypeToken<URL>(){}),
                            cast(parameters.get("version"),new TypeToken<String>(){}));
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case message:{
                Ack<Void> ack = new Ack<Void>().setStatus(Ack.Status.OK);
                try{
                    adapter.message(
                            cast(parameters.get("message"),new TypeToken<String>(){}));
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        case custom:{
                Ack<Object> ack = new Ack<Object>().setStatus(Ack.Status.OK);
                try{
                    Object res = adapter.custom(
                            cast(parameters.get("cmdName"),new TypeToken<String>(){}),
                            cast(parameters.get("parameters"),new TypeToken<Map<String,Object>>(){}));
                    // 填入返回值
                    ack.setValue(res);
                }catch(CommandAdapter.UnsupportCmdExeption e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
        default:
            // dead code 不会执行到这里
            throw new IllegalArgumentException();
        }
    }
    @SuppressWarnings("unchecked")
    static private<T> T cast(Object value,TypeToken<T> typeToken){
        return (T)TypeUtils.cast(value,
                typeToken.getType(),
                ParserConfig.getGlobalInstance());
    }
}
