// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: service.runtime.exception.java.vm
// ______________________________________________________
package net.gdface.facelog.client;

import java.io.PrintStream;
import java.io.PrintWriter;

import com.google.common.base.Preconditions;

/**
 * Runtime exception wrap class<br>
 * all {@link RuntimeException} threw from service was wrapped to the exception<br>
 * catch the exception to retrieve detail error message from service<br>
 * retrieve service stack trace message by call {@link #getServiceStackTraceMessage()}<br>
 * get exception type by call {@link getType()}
 * @author guyadong
 *
 */
public final class ServiceRuntimeException extends RuntimeException {
    private static final long serialVersionUID = 1L;
    private String message;    
    private String causeClass;
    private final String serviceStackTraceMessage;
    private final int type;    
    /**
     * @param cause
     */
    ServiceRuntimeException(net.gdface.facelog.client.thrift.ServiceRuntimeException cause) {
        super(cause);
        type = cause.getType();
        message = cause.getMessage();
        causeClass = cause.getCauseClass();
        serviceStackTraceMessage = cause.getServiceStackTraceMessage();
    }

    /**
     * print stack trace message from service to {@link System#err}
     * @see #printStackTrace()
     */
    public void printServiceStackTrace() {
        printServiceStackTrace(System.err);
    }

    /**
     * @param s
     * @see #printServiceStackTrace()
     * @see #printStackTrace(PrintStream)
     * @throws NullPointerException s is {@code null}
     */
    public void printServiceStackTrace(PrintStream s) {
        synchronized (Preconditions.checkNotNull(s)) {
            s.println(serviceStackTraceMessage);
        }
    }

    /**
     * @param s
     * @see #printServiceStackTrace()
     * @see #printStackTrace(PrintWriter)
     * @throws NullPointerException s is {@code null}
     */
    public void printServiceStackTrace(PrintWriter s) {
        synchronized (Preconditions.checkNotNull(s)) {
            s.println(serviceStackTraceMessage);
        }
    }
    /** return error message from service */
    @Override
    public String getMessage() {
        return message;
    }
    /** return cause exception class name */
    public String getCauseClass() {
        return causeClass;
    }
    /** return stack trace message from service */
    public String getServiceStackTraceMessage() {
        return serviceStackTraceMessage;
    }
    /** return exception type */
    public int getType() {
        return type;
    }
}
