// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: service.runtime.exception.java.vm
// ______________________________________________________
package net.gdface.facelog.client;

import java.io.PrintStream;
import java.io.PrintWriter;

import com.google.common.base.Preconditions;

import net.gdface.facelog.client.thrift.ExceptionType;

/**
 * 封装服务端调用产生的运行时异常<br>
 * 调用service端方法时产生的所有{@link RuntimeException}在抛出到客户端时被封装在{@link net.gdface.facelog.client.thrift.ServiceRuntimeException}中,
 * 捕获此异常可以获取服务端抛出的{@link RuntimeException}的详细信息<br>
 * 调用{@link #getServerStackTraceMessage()}可以获取服务器端的堆栈错误信息<br>
 * 调用{@link #printServerStackTrace()}控制台输出服务器端的堆栈错误信息<br>
 * @author guyadong
 *
 */
public final class ServiceRuntimeException extends RuntimeException {
    private static final long serialVersionUID = 1L;
    /**
     * 服务器端错误堆栈信息
     */
    private final String serverStackTraceMessage;
    /** 异常类型 */
    private final ExceptionType type;
    /**
     * @param cause
     */
    ServiceRuntimeException(net.gdface.facelog.client.thrift.ServiceRuntimeException cause) {
        super(cause);
        serverStackTraceMessage = cause.getServerStackTraceMessage();
        type = cause.getType();
    }

    @Override
    public String getMessage() {
        return getServerStackTraceMessage();
    }
    /**
     * 输出服务器端堆栈错误信息到{@link System#err}
     * @see #printStackTrace()
     */
    public void printServerStackTrace() {
        printServerStackTrace(System.err);
    }

    /**
     * @param s
     * @see #printServerStackTrace()
     * @see #printStackTrace(PrintStream)
     * @throws NullPointerException s is {@code null}
     */
    public void printServerStackTrace(PrintStream s) {
        synchronized (Preconditions.checkNotNull(s)) {
            s.println(serverStackTraceMessage);
        }
    }

    /**
     * @param s
     * @see #printServerStackTrace()
     * @see #printStackTrace(PrintWriter)
     * @throws NullPointerException s is {@code null}
     */
    public void printServerStackTrace(PrintWriter s) {
        synchronized (Preconditions.checkNotNull(s)) {
            s.println(serverStackTraceMessage);
        }
    }
    
    /** 返回服务器端异常的堆栈信息 */
    public String getServerStackTraceMessage() {
        return serverStackTraceMessage;
    }
    /** 返回异常类型 */
    public ExceptionType getType() {
        return type;
    }
}
