// $Id: Main.java,v 1.11 2007/11/12 14:06:31 kameleono Exp $
package org.acme;

import java.sql.SQLException;

import org.acme.sample.Manager;
import org.acme.sample.catalog.CategoryBean;
import org.acme.sample.catalog.CategoryManager;
import org.acme.sample.catalog.ItemBean;
import org.acme.sample.catalog.ItemManager;
import org.acme.sample.exception.DAOException;
import org.acme.sample.products.product.ProductBean;
import org.acme.sample.products.product.ProductManager;
import org.acme.sample.users.SupplierBean;
import org.acme.sample.users.SupplierManager;

/**
 * Sample application using the database layer generated by sql2java to
 * access the sample schema.
 * 
 * @author afagot
 * @version $Revision: 1.11 $
 */
public final class Main
{
    private Main() {
        super();
    }
    
    /**
     * Simple application managing the simple Supplier entity
     * and performing some simple transaction.
     * 
     * @param args
     * <ol>
     *      <li>driver class name</li>
     *      <li>url</li>
     *      <li>username</li>
     *      <li>password (optional)</li>
     * </ol>
     * @throws Exception
     *      on driver instantiation problem
     */
    public static final void main(final String[] args) throws Exception
    {
        // Connection settings
        // (you can pass a DataSource (recommended))
        Manager.getInstance().setJdbcDriver(args[0].trim());
        Manager.getInstance().setJdbcUrl(args[1].trim());
        Manager.getInstance().setJdbcUsername(args[2].trim());
        Manager.getInstance().setJdbcPassword(args.length>3?args[3].trim():"");

        workWithSupplier();
        workInTransaction();
        
        log("");
        log("___________________________________________________________");
        log("");
        log(" You can also load all suppliers...");
        log(" ...or load products given a template");
        log(" ...or ... ...");
        log("___________________________________________________________");
        log("");
    }

    private static void log(String msg)
    {
        System.out.println("Sample: "+msg);
    }
    
    private static void workWithSupplier() throws DAOException
    {
        // The managers responsible for storing/loading
        // bean to/from the database
        SupplierManager sm = SupplierManager.getInstance();
        
        log("___________________________________________________________");
        log("");
        log("CREATE a supplier bean using the supplier manager.");
        log("___________________________________________________________");
        log("");
        SupplierBean supplier = sm.createSupplierBean();
        supplier.setName("Jack Sparrow");
        supplier.setStatus("OK");
        supplier.setAddr1(null);// --> testing null
        log(supplier.toString());

        log("___________________________________________________________");
        log("");
        log("SAVE this supplier bean to the database.");
        log("___________________________________________________________");
        log("");
        sm.save(supplier);

        log("___________________________________________________________");
        log("");
        log("After this save, print it");
        log("___________________________________________________________");
        log("");
        log(supplier.toString());
        log("- (look at its id, see we retrieved the auto generated key)");

        log("___________________________________________________________");
        log("");
        log("Update the supplier, save the changes and print it.");
        log("___________________________________________________________");
        log("");
        supplier.setAddr1("2 Townsend street");
        supplier.setAddr2("... blah blah");
        supplier = sm.save(supplier);  // --> update
        log(supplier.toString());

        log("___________________________________________________________");
        log("");
        log("Try to save an unmodified supplier ==> does nothing...");
        log("___________________________________________________________");
        log("");
        supplier = sm.save(supplier);  // --> does nothing
        log(supplier.toString());

        log("___________________________________________________________");
        log("");
        log("DELETE a supplier bean given a supplier bean TEMPLATE");
        log("___________________________________________________________");
        log("");
        SupplierBean supplierToDelete = sm.createSupplierBean();
        supplierToDelete.setName("Jack Sparrow");
        log("   number of rows deleted: " + sm.deleteUsingTemplate(supplierToDelete));
    }
    
    private static void workInTransaction() throws DAOException
    {
        // The managers responsible for storing/loading
        // bean to/from the database
        SupplierManager sm = SupplierManager.getInstance();
        CategoryManager cm = CategoryManager.getInstance();
        ProductManager  pm = ProductManager.getInstance();
        ItemManager     im = ItemManager.getInstance();

        log("___________________________________________________________");
        log("");
        log("Work in a transaction");
        log("___________________________________________________________");
        log("");
        
        try {
            Manager.getInstance().beginTransaction(); // <--- TRANSACTION
            boolean commit = false;
    
            try {
                String tag = "_tmp"+System.currentTimeMillis(); // since this example may be run several time
    
                log("    - create a supplier");
                SupplierBean sb = sm.createSupplierBean();
                sb.setName("sf.net "+tag);
                sb.setStatus("OK");
                sm.save(sb); // <--- in transaction
    
                log("    - create a category");
                CategoryBean cb = cm.createCategoryBean();
                cb.setCatid("c"+tag);
                cb.setName("category "+tag);
                cm.save(cb); // <--- in transaction
    
                log("    - create a first product");
                ProductBean pb1 = pm.createProductBean();
                pb1.setProductid("p1"+tag);
                pb1.setName("sql2java product 1");
                pb1.setCategory(cb.getCatid());
                pm.save(pb1); // <--- in transaction
                ItemBean ib1 = im.createItemBean();
                ib1.setItemid("i1"+tag);
                ib1.setListprice(new java.math.BigDecimal(2));
                ib1.setProductid(pb1.getProductid());
                ib1.setSupplier(sb.getSuppid());
                im.save(ib1); // <--- in transaction
    
                log("    - create a second product");
                ProductBean pb2 = pm.createProductBean();
                pb2.setProductid("p2"+tag);
                pb2.setName("sql2java product 2");
                pb2.setCategory(cb.getCatid());
                pm.save(pb2); // <--- in transaction
                ItemBean ib2 = im.createItemBean();
                ib2.setItemid("i2"+tag);
                ib2.setListprice(new java.math.BigDecimal(42));
                ib2.setProductid(pb2.getProductid());
                ib2.setSupplier(sb.getSuppid());
                im.save(ib2); // <--- in transaction
    
                commit = true;// <--- if we reach here we can commit
            } finally {
                Manager.getInstance().endTransaction(commit);  // <--- END OF TRANSACTION: COMMIT OR ROLLBACK IS DONE
                if (commit) {
                    log("   transaction succeeded: commit OK");
                } else {
                    log("   transaction failed: rollback OK");
                }
            }
        } catch (SQLException se) {
            log(" error in transaction");
            log(se.getMessage());
        }
    }
}

