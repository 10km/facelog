##$Id: ibatis.java.vm,v 1.2 2008/04/15 20:46:27 kameleono Exp $
#parse( "table.include.vm" )
#set ( $clase  = $table.asCoreClass() )
#set ( $pk     = $table.getPrimaryKey() )
#set ( $db     = $codewriter.db )
#set ( $dbdesc = "${db.getUrl()} ${db.getEngine()} ${db.getCatalog()} ${db.getSchema()}" )
$codewriter.setCurrentJavaFilename($table.getPackage(), "${clase}.java")
package $table.getPackage();

import $pkg.SQLMapQuery; // clase que proporciona el acceso a SQLMap de iBatis
import java.io.*;
import java.util.List;
import com.ibatis.sqlmap.client.SqlMapClient;

/**
* ${clase}.java
*
* WARNING: This is an autogenerated file - (JSQL2iBatis - http://sourceforge.net/projects/jsql2ibatis/)
*
* @author (JSQL2iBatis - http://sourceforge.net/projects/jsql2ibatis/)
* @version 0.0.2
* @since ${fecha} 
*/
public class $clase 
{

/*
* Constructor. Crea una nueva instancia de la clase.
*/
public $clase()
{
${clase}.trazas("constructor","Iniciado.");
}

// Metodos get and set
	
#foreach( $atributo in $columns )
// campo $atributo.getName()
private $atributo.getJavaType() ${atributo.getVarName()};
    	
/**
* Recupera el valor del atributo $atributo.getName()
* @return el valor de $atributo.getName()
*/ 
public $atributo.getJavaType() ${atributo.getGetMethod()}() {
return $atributo.getVarName();
}
//----
    	
/**
* Fija el valor del atributo $atributo.getName()
* @param valor el valor de $atributo.getName()
*/ 
public void ${atributo.getSetMethod()}(${atributo.getJavaType()} valor) {
this.${atributo.getVarName()} = valor;
}
//----
#end
		
// Operaciones DAO, se autogeneran las operaciones selectAll,selectByPK,insert,update,delete y getNextSID
	
/*
* Recupera un listado de todos los elementos.
* @return List una lista de elementos ${clase}.
* @throws Exception Excepcion levantada en caso de error.
*/	
public List getAll() throws Exception
{
SqlMapClient sqlmap = SQLMapQuery.getSqlMapInstance("${dbdesc}");
if (sqlmap==null) throw new Exception("sqlmap is null");
$clase c = new ${clase}();
return (List) sqlmap.queryForList("${clase}.getAll", c);
}
//----	
	
#if ( $table.countPrimaryKeys() > 0 )

#set ( $keys = "" )
/**
* Recupera un $clase por la clave primaria.
#foreach( $clave in $primaryKeys )
* @param $clave.getVarName() 
#if ( $velocityCount > 1 )#set( $keys = "$keys, " )#end
#set ( $keys = "$keys${clave.getJavaType()} $clave.getVarName()" )
#end
* @return un objeto de la clase ${clase}.
* @throws Exception Excepcion levantada en caso de error.
*/
public static ${clase} selectByPK($keys) throws Exception
{
 SqlMapClient sqlmap = SQLMapQuery.getSqlMapInstance("${dbdesc}");
 if (sqlmap==null) throw new Exception("sqlmap is null");
 //sqlmap.startTransaction();
 $clase c = new ${clase}();
 #foreach( $clave in $primaryKeys )
c.${clave.getSetMethod()}(${clave.getVarName()});
 #end
return (${clase}) sqlmap.queryForObject("${clase}.get${clase}ByPK", c);
}
//----	
#end	

/*
* Inserta un elemento en la base de datos.
* @throws Exception Excepcion levantada en caso de error.
*/	
public void insert() throws Exception
{
 SqlMapClient sqlmap = SQLMapQuery.getSqlMapInstance("${dbdesc}");
 if (sqlmap==null) throw new Exception("sqlmap is null");
#if ( $table.countPrimaryKeys() > 0 )
 //DO: descomenta si vas a autogenerar el ID
 //String nextSid = ${clase}.getNextSid(this.${primaryKeys.get(0).getGetMethod()}());
#end
 sqlmap.insert("${clase}.insert${clase}", this);
#if ( $table.countPrimaryKeys() > 0 )
 //DO: descomenta si vas a autogenerar el ID
 //return nextSid;
#end
}
//----

/*
* Actualiza un elemento en la base de datos.
* @throws Exception Excepcion levantada en caso de error.
*/
public void update() throws Exception
{
 SqlMapClient sqlmap = SQLMapQuery.getSqlMapInstance("${dbdesc}");
 if (sqlmap==null) throw new Exception("sqlmap is null");
 sqlmap.update("${clase}.update${clase}", this);
}
//----

/*
* Elimina un elemento en la base de datos.
* @throws Exception Excepcion levantada en caso de error.
*/
public void delete() throws Exception
{
 SqlMapClient sqlmap = SQLMapQuery.getSqlMapInstance("${dbdesc}");
 if (sqlmap==null) throw new Exception("sqlmap is null");
 sqlmap.delete("${clase}.delete${clase}", this);
}
//----

#if ( $table.countPrimaryKeys() > 0 )
#set ( $pk = $primaryKeys.get(0) )
public static String getNextSID(${pk.getJavaType()} ${pk.getVarName()}) throws Exception
{
SqlMapClient sqlmap = SQLMapQuery.getSqlMapInstance("${dbdesc}");
if (sqlmap==null) throw new Exception("sqlmap is null");		
${clase} m = new ${clase}();
m.${pk.getSetMethod()}(${pk.getVarName()});
String nextSid = (String) sqlmap.queryForObject("${clase}.getNextSID", m);
if (nextSid==null) nextSid="1";
return nextSid;
}
#end
	
// trazas
/**
* Imprime un mensaje de trazas.
* @param metodo nombre del metodo.
* @param mensaje texto del mensaje de trazas.
*/
public static void trazas(String metodo,String mensaje)
{
//NOTA: cambia esto por el metodo que tu emplees para tracear.
String MENSAJE_TRAZAS="["+metodo+"]: "+mensaje;
System.out.println(MENSAJE_TRAZAS);
}
//----

// imprimir contenido del bean

/**
* Imprime el contenido.
* @return String un String con el contenido de los atributos.
*/
public String imprimir()
{
StringBuffer sb = new StringBuffer();
#foreach( $atributo in $columns )
sb.append("${atributo.getName()}=["+this.${atributo.getGetMethod()}()+"]\r\n");
#end
return sb.toString();
}
//----


/*
//Para probar el funcionamiento de la clase
public void main(String args[]) 
{
try
{
System.out.println("[iniciado]");
${clase} test = new ${clase}();
#foreach( $atributo in $atributos)
test.${atributo.getSetMethod()}("Aqui Valor de ${atributo.getName()}");
#end
test.insert();
System.out.println("[Finalizado]");
}
catch(Exception e)
{
e.printStackTrace();}
}
//----
*/

}
//end of class ${clase}