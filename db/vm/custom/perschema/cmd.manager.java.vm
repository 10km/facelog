#parse( "header.include.vm" )
#parse( "macros.include.vm" )
#parse( "commands.definition.vm" )
## 只在thrift_client时生成
#if(!$codewriter.getPropertyExplodedAsList("template.folder.include").contains("thrift_client"))
#set($codewriter.saveCurrentFile = false)
#stop
#end
#set ($thriftPackage = ${codewriter.getDependencyPackage()})
#set ( $javaClassName = 'CmdManager' )
$codewriter.setCurrentJavaFilename($extensionPkg, "${javaClassName}.java")
package $extensionPkg;

import ${thriftPackage}.RedisParam;

import java.net.URL;
import java.util.List;
import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkState;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.google.common.primitives.Ints;

import gu.simplemq.Channel;
import gu.simplemq.redis.JedisPoolLazy;
import gu.simplemq.redis.RedisFactory;

import gu.simplemq.redis.RedisPublisher;
import gu.simplemq.redis.RedisSubscriber;

/**
 * 
 * client 端 redis管理模块<br>
 * 发送设备命令示例:
 * <pre>
 *    String ackChannel = iFaceLogClient.applyAckChannel(myToken); // 向facelog服务申请命令响应通道
 *    long cmdSn = iFaceLogClient.applyCmdSn(myToken); // 向facelog服务申请命令序列号
 *      targetBuilder()
 *          .setCmdSn(cmdSn) /
 *          .setDeviceTarget(deviceId) // 指定目标设备ID
 *          .setAckChannel(ackChannel) 
 *          .build()
 *          .reset(); // 执行reset命令
 * </pre>
 * @author guyadong
 *
 */
public class CmdManager {    
    private final Channel<DeviceInstruction> cmdChannel;
    private final RedisPublisher redisPublisher ;
    private final Map<RedisParam, String> redisParameters;
    private final RedisSubscriber subscriber;
    /**
     * 构造方法
     * @param poolLazy 
     * @param cmdChannelAdapter 
     * @param redisParameters redis 服务器参数,参见 {@link IFaceLogClient${esc.hash}getRedisParameters(net.gdface.facelog.client.thrift.Token)}
     */
    protected CmdManager(JedisPoolLazy poolLazy,
            CmdChannelAdapter cmdChannelAdapter,
            Map<RedisParam, String> redisParameters) {
        this.redisPublisher = RedisFactory.getPublisher(checkNotNull(poolLazy));
        this.subscriber = RedisFactory.getSubscriber(checkNotNull(poolLazy));
        this.redisParameters = checkNotNull(redisParameters);
        this.cmdChannel = new Channel<DeviceInstruction>(
                this.redisParameters.get(RedisParam.CMD_CHANNEL),
                cmdChannelAdapter){};
        this.subscriber.register(cmdChannel);
    }
    /**
     * 构造方法
     * @param poolLazy redis 连接池对象
     * @param cmdChannelAdapter 应用程序执行设备命令的对象
     * @param redisParameters redis 服务器参数,参见 {@link IFaceLogClient${esc.hash}getRedisParameters(net.gdface.facelog.client.thrift.Token)}
     * @param deviceId 当前设备ID
     */
    public CmdManager(JedisPoolLazy poolLazy,
            CommandAdapter cmdChannelAdapter,
            Map<RedisParam, String> redisParameters,
            int deviceId) {
        this(poolLazy,
                new CmdChannelAdapter(cmdChannelAdapter,deviceId),
                redisParameters);
    }
    /**
     * 构造方法<br>
     * 使用默认{@link JedisPoolLazy}对象,参见 {@link JedisPoolLazy${esc.hash}getDefaultInstance()}
     * @param cmdChannelAdapter
     * @param redisParameters
     * @param deviceId
     * @see ${esc.hash}CmdManager(JedisPoolLazy, CommandAdapter, Map, int, List)
     */
    public CmdManager(CommandAdapter cmdChannelAdapter,
            Map<RedisParam, String> redisParameters,
            int deviceId) {
        this(JedisPoolLazy.getDefaultInstance(),
                new CmdChannelAdapter(cmdChannelAdapter,deviceId),
                redisParameters);
    }
    /**
     * 发送设备命令
     * @param cmd
     * @return 收到命令的客户端数目
     */
    private long sendCmd(DeviceInstruction cmd){
        checkArgument(null != cmd,"cmd is null");
        checkArgument(null != cmd.getCmd(),"DeviceInstruction.cmd field must not be null");
        checkArgument(null != cmd.getTarget() && !cmd.getTarget().isEmpty(),"DeviceInstruction.target field must not be null");
        if(null == cmd.getParameters()){
            cmd.setParameters(ImmutableMap.<String,Object>of());
        }
        return redisPublisher.publish(this.cmdChannel, cmd);
    }
    /** 
     * 设备命令构建类,用于设置除{@link DeviceInstruction${esc.hash}parameters}字段之的其他字段
     */
    public class CmdBuilder{       
        private List<Integer> target;
        private boolean group;
        private Long cmdSn;
        private String ackChannel;
        private final CmdManager parent;
        private boolean autoRemove = true;
        private CmdBuilder(CmdManager parent){
            this.parent = parent;
        }
        /** 参见 {@link DeviceInstruction${esc.hash}setTarget(List, boolean)} */
        public CmdBuilder setTarget(List<Integer> target,boolean group){
            this.target = target;
            this.group = group;
            return this;
        }
        /** 指定设备目标为设备ID列表,参见 {@link DeviceInstruction${esc.hash}setTarget(List, boolean)} */
        public CmdBuilder setDeviceTarget(List<Integer> target){
            return setTarget(target,false);
        }
        /** 指定设备目标为设备ID列表,参见 {@link DeviceInstruction${esc.hash}setTarget(List, boolean)} */
        public CmdBuilder setDeviceTarget(int... target){
            return setDeviceTarget(Ints.asList(target));
        }
        /** 指定设备目标为设备组ID列表,参见 {@link DeviceInstruction${esc.hash}setTarget(List, boolean)} */
        public CmdBuilder setDeviceGroupTarget(List<Integer> target){
            return setTarget(target,true);
        }
        /** 指定设备目标为设备组ID列表,参见 {@link DeviceInstruction${esc.hash}setTarget(List, boolean)} */
        public CmdBuilder setDeviceGroupTarget(int... target){
            return setDeviceGroupTarget(Ints.asList(target));
        }
        /** 参见 {@link DeviceInstruction${esc.hash}setCmdSn(long)} */
        public CmdBuilder setCmdSn(long cmdSn) {
            this.cmdSn = cmdSn;
            return this;
        }
        /** 参见 {@link DeviceInstruction${esc.hash}setAckChannel(String)} */
        public CmdBuilder setAckChannel(String ackChannel){
            this.ackChannel = ackChannel;
            return this;
        }
        /** 数据有效性验证 */
        private void validate(){
            checkState(null != cmdSn,"cmdSn is uninitialized");
        }
        /**
         * 完成build,返回 {@link CmdManager}对象<br> 
         * @param autoRemove 为{@code true}时,完成设备命令发送后自动清除Thread Local Storage变量{@link CmdManager${esc.hash}TLS_BUILDER},
         *                                    默认值为{@code true}
         * @return
         */
        public CmdManager build(boolean autoRemove){
            validate();
            this.autoRemove = autoRemove;
            return this.parent;
        }
        /** 完成build,返回 {@link CmdManager}对象 */
        public CmdManager build(){
            validate();
            return this.parent;
        }
    } 
    /** 
     * 用于保存当前线程使用的 {@link CmdBuilder}对象<br>,
     * TLS变量,在多线程高并发环境如果不显式执行{@link ThreadLocal${esc.hash}remove()}有资源泄漏风险,
     * 如果{@link CmdBuilder${esc.hash}autoRemove}为{@code true},则调用设备命令方法发送完命令后会自动清除TLS变量,
     * 否则需要调用 {@link CmdManager${esc.hash}removeTlsTarget()}方法手动清除。
      */
    private static final ThreadLocal<CmdBuilder> TLS_BUILDER= new ThreadLocal<CmdBuilder>();
    public CmdBuilder targetBuilder(){
        if(null == TLS_BUILDER.get()){
            TLS_BUILDER.set(new CmdBuilder(this));
        }
        return TLS_BUILDER.get();
    }
    /** 
     * 清除TLS变量 {@link ${esc.hash}TLS_BUILDER}
     * @see {@link ThreadLocal${esc.hash}remove()}
     */
    public CmdManager removeTlsTarget(){
        TLS_BUILDER.remove();
        return this;
    }
    protected static final CmdBuilder checkTlsAvailable(){
        return checkNotNull(TLS_BUILDER.get(),
                "not defined target,please call method targetBuilder(),and set target info");
    }

#foreach($entry in $commands.entrySet())
#set($key = $entry.key)
#set($value = $entry.value)
#set($params = $value['params'].entrySet())
    /**
     * 设备命令 <br>
     * $value['desc']<br>#join($params '
     * @param $e.key $!{e.value[1]}' '')

     * @return 收到命令的客户端数目
     *
     */
    public long ${key}(#join($params '$e.value[0] $e.key' ',')){
        CmdBuilder builder = checkTlsAvailable();
        try{
            // 所有的命令参数封装到 Map
            Map<String, Object> params = Maps.newHashMap();
            #join($params 'params.put("$e.key", $e.key);' '
            ')

            DeviceInstruction deviceInstruction = new DeviceInstruction()
                    .setCmd(Cmd.${key})
                    .setCmdSn(builder.cmdSn)
                    .setTarget(builder.target, builder.group)
                    .setAckChannel(builder.ackChannel)
                    .setParameters(params);
            return sendCmd(deviceInstruction);
        }finally{
            if(builder.autoRemove){
                removeTlsTarget(); 
            }
        }
    }
#end
}
