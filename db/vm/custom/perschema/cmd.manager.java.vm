#parse( "header.include.vm" )
#parse( "macros.include.vm" )
#parse( "commands.definition.vm" )
## 只在thrift_client时生成
#if(!$codewriter.getPropertyExplodedAsList("template.folder.include").contains("thrift_client"))
#set($codewriter.saveCurrentFile = false)
#stop
#end
#set ( $javaClassName = 'CmdManager' )
$codewriter.setCurrentJavaFilename($extensionPkg, "${javaClassName}.java")
package $extensionPkg;

import java.net.URL;
import java.util.List;
import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkArgument;

import com.alibaba.fastjson.JSON;
import com.google.common.base.Function;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.primitives.Ints;

import gu.simplemq.Channel;
import gu.simplemq.redis.JedisPoolLazy;
import gu.simplemq.redis.RedisFactory;
import net.gdface.facelog.client.thrift.RedisParam;
import net.gdface.facelog.client.thrift.Token;

import gu.simplemq.redis.RedisPublisher;
import gu.simplemq.redis.RedisSubscriber;

/**
 * 
 * client 端 redis管理模块
 * @author guyadong
 *
 */
public class CmdManager {    
    private final Channel<DeviceInstruction> cmdChannel;
    private final IFaceLogClient client;
    private final Token token;
    private final RedisPublisher redisPublisher ;
    private final Map<RedisParam, String> redisParameters;
    private final RedisSubscriber subscriber;
    public CmdManager(IFaceLogClient client,
            JedisPoolLazy poolLazy,
            CmdChannelAdapter cmdChannelAdapter,
            Token token) {
        this.client = checkNotNull(client);
        this.token = checkNotNull(token);
        this.redisPublisher = RedisFactory.getPublisher(checkNotNull(poolLazy));
        this.subscriber = RedisFactory.getSubscriber(checkNotNull(poolLazy));
        this.redisParameters = client.getRedisParameters(token);
        this.cmdChannel = new Channel<DeviceInstruction>(
                this.redisParameters.get(RedisParam.CMD_CHANNEL),
                cmdChannelAdapter){};
        this.subscriber.register(cmdChannel);
    }

    /**
     * 发送设备命令
     * @param cmd
     */
    private void sendCmd(DeviceInstruction cmd){
        if(null != cmd){
            checkArgument(null != cmd.getCmd(),"cmd field  of DeviceInstruction must not be null");
            Map<String,String>params;
            if(null == cmd.getParameters()){
                    params = ImmutableMap.of();
            }else{
                    params = Maps.transformValues(cmd.getParameters(), new Function<Object,String>(){
                        @Override
                        public String apply(Object input) {
                            return JSON.toJSONString(input);
                        }});
            }
            cmd.setParameters(params);
            redisPublisher.publish(this.cmdChannel, cmd);
        }
    }
    /**
     * 发送设备命令
     * @param cmd
     * @param target 执行命令的目标(设备/设备组)
     * @param group 为@{@code true}时{@code target}为设备组
     * @param ackChannel 命令响应通道
     * @param parameters 命令参数
     * @see {@link DeviceInstruction}
     */
    public void sendCmd(Cmd cmd,
                            List<Integer> target,
                            boolean group,
                            String ackChannel,
                            Map<String, String> parameters){
        DeviceInstruction deviceInstruction = new DeviceInstruction()
                .setCmd(checkNotNull(cmd))
                .setCmdSn(client.applyCmdSn(token))
                .setTarget(target, group)
                .setAckChannel(ackChannel)
                .setParameters(parameters);
        sendCmd(deviceInstruction);
    }
    /**
     * 发送设备命令
     * @param cmd
     * @param target 
     * @param group 
     * @param ackChannel 
     * @param parameters
     */
    public void sendCmd(Cmd cmd,
            int target,
            boolean group,
            String ackChannel,
            Map<String, String> parameters){
        sendCmd(cmd,Lists.newArrayList(target),group,ackChannel,parameters);
    }
    /**
     * 向指定设备({@code deviceId})发送设备命令
     * @param cmd
     * @param deviceId
     * @param ackChannel
     * @param parameters
     */
    public void sendDeviceCmd(Cmd cmd,
            int deviceId,
            String ackChannel,
            Map<String, String> parameters){
        sendCmd(cmd,Lists.newArrayList(deviceId),false,ackChannel,parameters);
    }
    /**
     * 向指定设备组({@code deviceGroupId})发送设备命令
     * @param cmd
     * @param deviceGroupId
     * @param ackChannel
     * @param parameters
     */
    public void sendDeviceGroupCmd(Cmd cmd,
            int deviceGroupId,
            String ackChannel,
            Map<String, String> parameters){
        sendCmd(cmd,Lists.newArrayList(deviceGroupId),true,ackChannel,parameters);
    }
    public static class Target{
        private List<Integer> target;
        private boolean group;
        private String ackChannel;
        private final CmdManager parent;
        private boolean autoRemove = true;
        private Target(CmdManager parent){
            this.parent = parent;
        }
        public Target setTarget(List<Integer> target,boolean group){
            this.target = target;
            this.group = group;
            return this;
        }
        public Target setDeviceTarget(List<Integer> target){
            this.target = target;
            this.group = false;
            return this;
        }
        public Target setDeviceTarget(int... target){
            return setDeviceTarget(Ints.asList(target));
        }
        public Target setDeviceGroupTarget(List<Integer> target){
            this.target = target;
            this.group = true;
            return this;
        }
        public Target setDeviceGroupTarget(int... target){
            return setDeviceGroupTarget(Ints.asList(target));
        }
        public Target setAckChannel(String ackChannel){
            this.ackChannel = ackChannel;
            return this;
        }
        public CmdManager build(boolean autoRemove){
            this.autoRemove = autoRemove;
            return this.parent;
        }
        public CmdManager build(){
            return this.parent;
        }
    } 
    private static ThreadLocal<Target> tlsTarget= new ThreadLocal<Target>();
    public Target targetBuilder(){
        if(null == tlsTarget.get()){
            tlsTarget.set(new Target(this));
        }
        return tlsTarget.get();
    }
    public CmdManager removeTlsTarget(){
        tlsTarget.remove();
        return this;
    }
/*
    public CmdManager parameter(String key,String value){
        checkArgument(null !=tlsTarget.get(),
                "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        sendCmd(Cmd.parameter,
                target.target,
                target.group,
                target.ackChannel,
                ImmutableMap.of("key", key, "value", value));
        if(target.autoRemove){
            tlsTarget.remove();    
        }        
        return this;
    }
*/    
#foreach($entry in $commands.entrySet())
#set($key = $entry.key)
#set($value = $entry.value)
#set($params = $value['params'].entrySet())
    /**
     * 设备命令 <br>
     * $value['desc']<br>#join($params '
     * @param $e.key $!{e.value[1]}' '')

#if($value['return']!='void')
     * @return $!{value['returnDesc']}
#end
     *
     */
    public void ${key}(#join($params '$e.value[0] $e.key' ',')){
        checkArgument(null !=tlsTarget.get(),
            "not defined target,please call method targetBuilder(),and set target info");
        Target target = tlsTarget.get();
        ImmutableMap<String, String> params = ImmutableMap.<String,String>builder()
                #join($params '.put("$e.key", $e.key)' '
                ')

                .build();
        sendCmd(Cmd.parameter,
            target.target,
            target.group,
            target.ackChannel,
            params);
        if(target.autoRemove){
            tlsTarget.remove();    
        }        

    }
#end
}
