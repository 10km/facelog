#parse( "header.include.vm" )
#parse( "macros.include.vm" )
#set ( $javaClassName = 'BaseCommandAdapter' )
$codewriter.setCurrentJavaFilename($extensionPkg, "${javaClassName}.java")
#set($commands =  {
      'reset'  : {'desc':'设备重启',    
                  'return':'void',   
                  'params':{}},
      'message': {'desc':'发送消息',    
                  'return':'void',   
                  'params':{'message':['String','发送到设备的消息']}},
      'update' : {'desc':'更新版本',    
                  'return':'void',   
                  'params':{'url':['URL','更新版本的位置'],
                            'version':['String','版本号']}},
      'custom' : {'desc':'自定义命令',  
                  'return':'Object', 
                  'params':{'cmdName':['String','自定义命令名称'],'parameters':['Map<String,Object>','自定义参数表']}}
                  })
package $extensionPkg;

import java.net.URL;
import java.util.Map;

import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.TypeUtils;
import com.google.common.collect.ImmutableMap;
import com.google.common.reflect.TypeToken;

/**
 * 命令执行基类
 * @author guyadong
 *
 */
public class BaseCommandAdapter {
    public static enum Cmd{
        #join($commands.entrySet() '/** $e.value["desc"] */$e.key' ',
        ');
        /**
         * 执行当前设备命令
         * @param adapter
         * @param parameters
         * @return
         */
        @SuppressWarnings("serial")
        public Ack<?> run(BaseCommandAdapter adapter,Map<String,Object> parameters){
            if(null == parameters){
                parameters = ImmutableMap.of();
            }
            switch(this){
#foreach($entry in $commands.entrySet())
#set($key = $entry.key)
#set($value = $entry.value)
#set($params = $value['params'].entrySet())
#if($entry.value['return']=='void')
#set($returnParamType ='Void')
#else
#set($returnParamType =$entry.value['return'])
#end
            case $key:{
                    Ack<$returnParamType> ack = new Ack<$returnParamType>().setStatus(Ack.Status.OK);
#define($callCmd)adapter.${key}(#join($params '
                                cast(parameters.get("$e.key"),new TypeToken<${e.value[0]}>(){})' ','))#end
                    try{
#if($entry.value['return']=='void')
                        $callCmd;
#else
                        Object res = $callCmd;
                        // 填入返回值
                        ack.setValue(res);
#end
                    }catch(Exception e){
                        // 填入异常状态,设置错误信息
                        ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                    }                
                    return ack;
                }
#end
            default:
                // dead code 不会执行到这里
                throw new IllegalArgumentException();
            }
        }
    }
    @SuppressWarnings("unchecked")
    static private<T> T cast(Object value,TypeToken<T> typeToken){
        return (T)TypeUtils.cast(value,
                typeToken.getType(),
                ParserConfig.getGlobalInstance());
    }
#foreach($entry in $commands.entrySet())
#set($key = $entry.key)
#set($value = $entry.value)
#set($params = $value['params'].entrySet())
    /**
     * $value['desc']<br>#join($params '
     * @param $e.key $!{e.value[1]}' '')

     *
     */
    public $value['return'] ${key}(#join($params '$e.value[0] $e.key' ',')){
#if($value['return']!='void')
        return null;
#end
    }
#end
}