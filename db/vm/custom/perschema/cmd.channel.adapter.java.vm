#parse( "header.include.vm" )
#parse( "macros.include.vm" )
## 只在thrift_client时生成
#if(!$codewriter.getPropertyExplodedAsList("template.folder.include").contains("thrift_client"))
#set($codewriter.saveCurrentFile = false)
#stop
#end
#set ( $javaClassName = 'CmdChannelAdapter' )
$codewriter.setCurrentJavaFilename($extensionPkg, "${javaClassName}.java")
package $extensionPkg;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Preconditions.checkArgument;

import java.util.List;

import com.google.common.collect.Iterators;

import com.google.common.base.Predicate;
import com.google.common.base.Strings;

import gu.simplemq.Channel;
import gu.simplemq.IMessageAdapter;
import gu.simplemq.exceptions.SmqUnsubscribeException;
import gu.simplemq.redis.RedisPublisher;
import gu.simplemq.redis.JedisPoolLazy;

/**
 * 设备命令执行对象
 * @author guyadong
 *
 */
public class CmdChannelAdapter implements IMessageAdapter<DeviceInstruction>{
    private final CommandAdapter cmdAdapter;
    private final IFaceLogClient dao;
    private final int deviceId;
    private List<Integer> groupIdList;
    private RedisPublisher redisPublisher = new RedisPublisher(JedisPoolLazy.getDefaultInstance());
    public CmdChannelAdapter(CommandAdapter cmdAdapter,IFaceLogClient dao,int deviceId) {
        this.cmdAdapter = checkNotNull(cmdAdapter,"cmdAdapter is null");
        this.dao = checkNotNull(dao,"dao is null");
        checkArgument(this.dao.existsDevice(deviceId),"INVALID deviceId");
        this.deviceId= deviceId;
        groupIdList= this.dao.listOfParentForDeviceGroup(this.dao.getDevice(deviceId).getGroupId());
    }
    private boolean selfIncluded(boolean group,List<Integer> idList){
        if(group){
            return Iterators.tryFind(idList.iterator(), new Predicate<Integer>(){
                @Override
                public boolean apply(Integer input) {
                    return groupIdList.contains(input);
                }}).isPresent();
        }else{
            return idList.contains(this.deviceId);
        }
    }
    /**
     * 执行指定的设备命令并向命令响应频道返回命令结果
     */
    @Override
    public void onSubscribe(DeviceInstruction t) throws SmqUnsubscribeException {
        if(null != t.getTarget() && selfIncluded(t.isGroup(),t.getTarget())){
            Ack<?> ack = t.getCmd().run(cmdAdapter, t.getParameters()).setCmdSn(t.getCmdSn());
            // 如果指定了响应频道则向指定的频道发送响应消息
            if(!Strings.isNullOrEmpty(t.getAckChannel())){
                Channel<Ack<?>> ackChannel = new Channel<Ack<?>>(t.getAckChannel()){};
                redisPublisher.publish(ackChannel, ack);
            }
        }
    }
}