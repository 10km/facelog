#parse( "header.include.vm" )
#parse( "macros.include.vm" )
## 只在thrift_client时生成
#if(!$codewriter.getPropertyExplodedAsList("template.folder.include").contains("thrift_client"))
#set($codewriter.saveCurrentFile = false)
#stop
#end
#set ( $javaClassName = 'Ack' )
$codewriter.setCurrentJavaFilename($extensionPkg, "${javaClassName}.java")
package $extensionPkg;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;

/**
 * 设备命令响应对象
 * @author guyadong
 *
 * @param <T> 设备命令执行返回结果类型
 */
public class Ack<T> {
    private long cmdSn;
    private int deviceId;
    private T value;
    private Status status;
    private String errorMessage;
    public static enum Status{
        /** 调用正常返回 */OK,
        /** 调用出错 */ERROR;
        /**
         * 返回状态信息
         * @param ack
         * @return
         */
        public <T>String message(Ack<T>ack){
            Preconditions.checkArgument(null != ack,"ack is null");
            StringBuffer buffer = new StringBuffer(String.format("device%d@%d:%s", ack.deviceId,ack.cmdSn,this.name()));
            switch(this){
            case ERROR:
                if(!Strings.isNullOrEmpty(ack.errorMessage)){
                    buffer.append(":").append(ack.errorMessage);
                }
                break;
            case OK:
            default:
                break;
            }
            return buffer.toString();
        }
    }
    public Ack() {
    }
    /** 返回设备命令序列号 */
    public long getCmdSn() {
        return cmdSn;
    }
    public Ack<T> setCmdSn(long cmdSn) {
        this.cmdSn = cmdSn;
        return this;
    }
    /** 返回执行设备命令的设备ID */
    public int getDeviceId() {
        return deviceId;
    }

    public Ack<T> setDeviceId(int deviceId) {
        this.deviceId = deviceId;
        return this;
    }
    /** 返回设备命令执行结果对象 */
    public T getValue() {
        return value;
    }
    public Ack<T> setValue(T value) {
        this.value = value;
        return this;
    }
    /** 返回设备命令执行状态 */
    public Status getStatus() {
        return status;
    }
    public Ack<T> setStatus(Status status) {
        this.status = status;
        return this;
    }
    /** 返回设备命令执行错误信息 */
    public String getErrorMessage() {
        return errorMessage;
    }
    public Ack<T> setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
}
