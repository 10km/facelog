#parse( "header.include.vm" )
#parse( "macros.include.vm" )
#parse( "commands.definition.vm" )
## 只在thrift_client,thrifty_client时生成
#if(!$codewriter.getPropertyExplodedAsList("template.folder.include").contains("thrift_client")   && 
 	  !$codewriter.getPropertyExplodedAsList("template.folder.include").contains("thrifty_client")  && 
 	  !$codewriter.getPropertyExplodedAsList("custom.template.include").contains("cmd.java.vm"))
#set($codewriter.saveCurrentFile = false)
#stop
#end
#set ( $javaClassName = 'Cmd' )
$codewriter.setCurrentJavaFilename($extensionPkg, "${javaClassName}.java")

package $extensionPkg;

import java.lang.reflect.Type;
import java.net.URL;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.util.TypeUtils;
import com.google.common.collect.ImmutableMap;
import com.google.common.reflect.TypeToken;

/** 
 * 设备命令定义 
 * @author guyadong
 */
public enum Cmd{
    #join($commands.entrySet() '/** $e.value["desc"] */
    $e.key' ',
    ');
    
    /**
     * 对{@code adapter}执行当前设备命令
     * @param adapter 命令执行对象
     * @param parameters
     * @return 包含命令执行结果的命令响应对象
     */
    @SuppressWarnings("serial")
    public Ack<?> run(CommandAdapter adapter,Map<String,? extends Object> parameters){
        if(null == parameters){
            parameters = ImmutableMap.of();
        }
        switch(this){
#foreach($entry in $commands.entrySet())
#set($key = $entry.key)
#set($value = $entry.value)
#set($params = $value['params'].entrySet())
#if($entry.value['return']=='void')
#set($returnParamType ='Void')
#else
#set($returnParamType =$entry.value['return'])
#end
        case $key:{
                Ack<$returnParamType> ack = new Ack<$returnParamType>().setStatus(Ack.Status.OK);
#define($callCmd)adapter.${key}(#join($params '
                            cast(parameters.get("$e.key"),new TypeToken<${e.value[0]}>(){})' ','))#end
                try{
#if($entry.value['return']=='void')
                    $callCmd;
#else
                    $returnParamType res = $callCmd;
                    // 填入返回值
                    ack.setValue(res);
#end
                }catch(CommandAdapter.UnsupportCmdException e){
                    // 该命令设备端未实现
                    ack.setStatus(Ack.Status.UNSUPPORTED);
                }catch(CommandAdapter.DeviceCmdException e){
                    // 填入异常状态,设置错误信息
                    ack.setStatus(Ack.Status.ERROR).setErrorMessage(e.getMessage());
                }                
                return ack;
            }
#end
        default:
            // dead code 不会执行到这里
            throw new IllegalArgumentException();
        }
    }
    /**
     * 将{@code value}转为{@code typeToken}指定的类型
     * @param <T> 目标参数类型
     * @param value
     * @param typeToken
     * @return
     * @see ${esc.hash}cast(Object, Type)
     */
    public static final <T> T cast(Object value,TypeToken<T> typeToken){
        return cast(value,typeToken.getType());
    }
    /**
     * 将{@code value}转为{@code type}指定的类型
     * @param <T> 目标参数类型
     * @param value
     * @param type
     * @return
     * @see TypeUtils${esc.hash}cast(Object, Type, ParserConfig)
     */
    @SuppressWarnings("unchecked")
    public static final <T> T cast(Object value,Type type){
        return (T)TypeUtils.cast(value,type,ParserConfig.getGlobalInstance());
    }
    /**
     * 将{@code value}转为{@code clazz}指定的类型
     * @param <T> 目标参数类型
     * @param value
     * @param clazz
     * @return
     * @see TypeUtils${esc.hash}cast(Object, Class, ParserConfig)
     */
    public static final <T> T cast(Object value,Class<T> clazz){
        return TypeUtils.cast(value,clazz,ParserConfig.getGlobalInstance());
    }
}
