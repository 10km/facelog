#if($isAsync)
#set ($portRet = '.get()')
#else
#set ($portRet = '')
#end
    ///////////////// CLIENT EXTENSIVE CONVENIENCE TOOLS /////////////
    
    /**
     * 根据设备ID返回设备所属的设备组ID的{@code Function}实例,
     * 设备ID无效则返回{@code null}
     */
    public final com.google.common.base.Function<Integer,Integer> deviceGroupIdGetter = 
        new com.google.common.base.Function<Integer,Integer>(){
        @Override
        public Integer apply(Integer input) {
            try{
                DeviceBean device = getDevice(input)$!{portRet};
                return null == device ? null : device.getGroupId();
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }   
        }};
    /**
     * 根据设备ID返回一个获取设备组ID的{@code Supplier}实例
     * @param deviceId
     * @return 对应的groupId,如果{@code deviceId}无效则返回{@code null}
     * @see ${esc.hash}deviceGroupIdGetter
     * @throws ServiceRuntimeException
     */
    public com.google.common.base.Supplier<Integer> getDeviceGroupIdSupplier(final int deviceId){
        return new com.google.common.base.Supplier<Integer>(){
            @Override
            public Integer get() {
                return deviceGroupIdGetter.apply(deviceId);
            }        
        };
    }
    /**
     * 根据人员ID返回人员所属的所有组ID的{@code Function}实例
     * 如果人员ID无效则返回空表
     */
    public final com.google.common.base.Function<Integer,List<Integer>> personGroupBelonsGetter = 
        new com.google.common.base.Function<Integer,List<Integer>>(){
        @Override
        public List<Integer> apply(Integer personId) {
            try{
                return getPersonGroupsBelongs(personId)$!{portRet};
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }   
        }};
    /**
     * 根据人员ID返回一个获取所属组ID列表的{@code Supplier}实例
     * @param personId
     * @return 人员组ID列表,如果{@code personId}无效则返回空表
     * @see ${esc.hash}personGroupBelonsGetter
     * @throws ServiceRuntimeException
     */
    public com.google.common.base.Supplier<List<Integer>> getPersonGroupBelonsSupplier(final int personId){
        return new com.google.common.base.Supplier<List<Integer>>(){
            @Override
            public List<Integer> get() {
                return personGroupBelonsGetter.apply(personId);
            }        
        };
    }
    /**
     * (管理端)创建{@link CmdManager}实例
     * @param poolLazy REDIS 连接池对象
     * @param token 访问令牌(person Token or root Token)
     * @return
     * @throws ServiceRuntimeException
     */
    public CmdManager makeCmdManager(
            gu.simplemq.redis.JedisPoolLazy poolLazy,
            net.gdface.facelog.client.thrift.Token token){
        try{
            checkArgument(checkNotNull(token).getType() == net.gdface.facelog.client.thrift.TokenType.PERSON 
                || token.getType() == net.gdface.facelog.client.thrift.TokenType.ROOT,"person or root token required");
            
            return new CmdManager(
                    checkNotNull(poolLazy),
                    getRedisParameters(token)$!{portRet});
        }catch(RuntimeException e){
            throw e;
        }catch(Exception e){
            throw new RuntimeException(e);
        }
    }
    /**
     * (管理端)创建{@link CmdManager}实例
     * 使用默认REDIS连接池,参见 {@link gu.simplemq.redis.JedisPoolLazy${esc.hash}getDefaultInstance()}
     * @param token 访问令牌(person Token or root Token)
     * @return
     * @throws ServiceRuntimeException
     * @see ${esc.hash}makeCmdManager(gu.simplemq.redis.JedisPoolLazy, net.gdface.facelog.client.thrift.Token)
     */
    public CmdManager makeCmdManager(
            net.gdface.facelog.client.thrift.Token token){
        return makeCmdManager(gu.simplemq.redis.JedisPoolLazy.getDefaultInstance(),token);
    }
    /**
     * (设备端)创建设备命令分发器<br>
     * @param poolLazy
     * @param token 设备令牌
     * @return
     */
    public CmdDispatcher makeCmdDispatcher(
            gu.simplemq.redis.JedisPoolLazy poolLazy,
            net.gdface.facelog.client.thrift.Token token){
        try{
            checkArgument(checkNotNull(token).getType() == net.gdface.facelog.client.thrift.TokenType.DEVICE,"device token required");
            CommandAdapterContainer container = new CommandAdapterContainer();
            int deviceId = token.getId();
            CmdDispatcher cmdDispatcher = new CmdDispatcher(deviceId,this.getDeviceGroupIdSupplier(deviceId)).setCmdAdapter(container);
            cmdDispatcher.register(poolLazy, this.getRedisParameters(token)$!{portRet}.get(net.gdface.facelog.client.thrift.MQParam.CMD_CHANNEL));
            return cmdDispatcher;
        }catch(RuntimeException e){
            throw e;
        }catch(Exception e){
            throw new RuntimeException(e);
        }
    }
    /**
     * (设备端)创建设备命令分发器<br>
     * 使用默认REDIS连接池,参见 {@link gu.simplemq.redis.JedisPoolLazy${esc.hash}getDefaultInstance()}
     * @param token 设备令牌
     * @return
     * @see ${esc.hash}makeCmdDispatcher(JedisPoolLazy, net.gdface.facelog.client.thrift.Token)
     */
    public CmdDispatcher makeCmdDispatcher(
            net.gdface.facelog.client.thrift.Token token){
        return makeCmdDispatcher(gu.simplemq.redis.JedisPoolLazy.getDefaultInstance(),token);
    }
    /**
     * 返回一个申请命令响应通道的{@code Supplier}实例
     * @param token 访问令牌
     * @return
     */
    public com.google.common.base.Supplier<String> 
    getAckChannelSupplier(final net.gdface.facelog.client.thrift.Token token){
        return new com.google.common.base.Supplier<String>(){
            @Override
            public String get() {
                try{
                    return applyAckChannel(token)$!{portRet};
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
        }; 
    }
    /**
     * 返回一个申请命令序号的{@code Supplier}实例
     * @param token
     * @return 访问令牌
     */
    public com.google.common.base.Supplier<Long> 
    getCmdSnSupplier(final net.gdface.facelog.client.thrift.Token token){
        return new com.google.common.base.Supplier<Long>(){
            @Override
            public Long get() {
                try{
                    return applyCmdSn(token)$!{portRet};
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
        }; 
    }