// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: cache.java.vm
// ______________________________________________________
package net.gdface.facelog.db.mysql;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import net.gdface.facelog.db.BaseTableLoadCaching;
import net.gdface.facelog.db.PersonBean;

/**
 * cache manager for PersonBean base {@link com.google.common.cache.LoadingCache}<br>
 * primary key (fl_person.id) is key
 * @author guyadong
 *
 */
public class PersonCache extends BaseTableLoadCaching<Integer, PersonBean> {
    private final PersonManager manager = PersonManager.getInstance();
    
    private final BaseTableLoadCaching<String, PersonBean> imageMd5Cacher;
    private final BaseTableLoadCaching<String, PersonBean> mobilePhoneCacher;
    private final BaseTableLoadCaching<String, PersonBean> papersNumCacher;
    /** constructor<br>
     * @see BaseTableLoadCaching#BaseTableLoadCaching(UpdateStrategy ,long , long , TimeUnit )
     */
    public PersonCache(UpdateStrategy updateStrategy,long maximumSize, long duration, TimeUnit unit) {
        super(updateStrategy,maximumSize, duration, unit);
        manager.bindForeignKeyListenerForDeleteRule();

        imageMd5Cacher = new BaseTableLoadCaching<String, PersonBean>(updateStrategy, maximumSize, duration, unit){
            @Override
            public void registerListener() {
                manager.registerListener(this.tableListener);
            }
            @Override
            public void unregisterListener() {
                manager.unregisterListener(this.tableListener);
            }
            @Override
            protected String returnKey(PersonBean bean) {
                if(null == bean){
                    return null;
                }
                String key = bean.getImageMd5();
                if(key == null){
                    bean = PersonCache.this.getBeanIfPresent(bean.getId());
                    return null == bean ? null : bean.getImageMd5();
                }
                return key;
            }
            @Override
            protected PersonBean loadfromDatabase(String key) throws Exception {
                PersonBean bean = manager.loadByIndexImageMd5Checked(key);
                addToOtherCache(bean,this);
                return bean;
            }};

        mobilePhoneCacher = new BaseTableLoadCaching<String, PersonBean>(updateStrategy, maximumSize, duration, unit){
            @Override
            public void registerListener() {
                manager.registerListener(this.tableListener);
            }
            @Override
            public void unregisterListener() {
                manager.unregisterListener(this.tableListener);
            }
            @Override
            protected String returnKey(PersonBean bean) {
                if(null == bean){
                    return null;
                }
                String key = bean.getMobilePhone();
                if(key == null){
                    bean = PersonCache.this.getBeanIfPresent(bean.getId());
                    return null == bean ? null : bean.getMobilePhone();
                }
                return key;
            }
            @Override
            protected PersonBean loadfromDatabase(String key) throws Exception {
                PersonBean bean = manager.loadByIndexMobilePhoneChecked(key);
                addToOtherCache(bean,this);
                return bean;
            }};

        papersNumCacher = new BaseTableLoadCaching<String, PersonBean>(updateStrategy, maximumSize, duration, unit){
            @Override
            public void registerListener() {
                manager.registerListener(this.tableListener);
            }
            @Override
            public void unregisterListener() {
                manager.unregisterListener(this.tableListener);
            }
            @Override
            protected String returnKey(PersonBean bean) {
                if(null == bean){
                    return null;
                }
                String key = bean.getPapersNum();
                if(key == null){
                    bean = PersonCache.this.getBeanIfPresent(bean.getId());
                    return null == bean ? null : bean.getPapersNum();
                }
                return key;
            }
            @Override
            protected PersonBean loadfromDatabase(String key) throws Exception {
                PersonBean bean = manager.loadByIndexPapersNumChecked(key);
                addToOtherCache(bean,this);
                return bean;
            }};
    }
    /**
     * add bean to all other cacher
     * @param bean
     * @param exclude
     */
    private void addToOtherCache(PersonBean bean,BaseTableLoadCaching<?,?> exclude){
        if(exclude != this){
            this.getCacheMap().putIfAbsent(bean.getId(),bean);
        }
        if(exclude != imageMd5Cacher){
            String key = bean.getImageMd5();
            if(key != null){
                imageMd5Cacher.getCacheMap().putIfAbsent(key,bean);
            }
        }
        if(exclude != mobilePhoneCacher){
            String key = bean.getMobilePhone();
            if(key != null){
                mobilePhoneCacher.getCacheMap().putIfAbsent(key,bean);
            }
        }
        if(exclude != papersNumCacher){
            String key = bean.getPapersNum();
            if(key != null){
                papersNumCacher.getCacheMap().putIfAbsent(key,bean);
            }
        }
    }    
    public PersonCache(long maximumSize, long duration, TimeUnit unit) {
        this(DEFAULT_STRATEGY,maximumSize,duration,unit);
    }
    public PersonCache(long maximumSize, long durationMinutes) {
        this(maximumSize, durationMinutes, DEFAULT_TIME_UNIT);
    }

    public PersonCache(long maximumSize) {
        this(maximumSize,DEFAULT_DURATION,DEFAULT_TIME_UNIT);
    }
    public PersonCache() {
        this(DEFAULT_CACHE_MAXIMUMSIZE,DEFAULT_DURATION,DEFAULT_TIME_UNIT);
    }
    
    @Override
    public void registerListener() {        
        
        imageMd5Cacher.registerListener();
        mobilePhoneCacher.registerListener();
        papersNumCacher.registerListener();
        manager.registerListener(tableListener);
    }
    @Override
    public void unregisterListener() {
        manager.unregisterListener(tableListener);
        
        imageMd5Cacher.unregisterListener();
        mobilePhoneCacher.unregisterListener();
        papersNumCacher.unregisterListener();
    }
    @Override
    protected Integer returnKey(PersonBean bean) {
        return null == bean ? null : bean.getId();
    }
    @Override
    protected PersonBean loadfromDatabase(Integer key)throws Exception {
        PersonBean bean = manager.loadByPrimaryKeyChecked(key);
        addToOtherCache(bean,this);
        return bean;
    }
    @Override
    public void update(PersonBean bean){
        super.update(bean);
        
        imageMd5Cacher.update(bean);
        mobilePhoneCacher.update(bean);
        papersNumCacher.update(bean);
    }
    @Override
    public void remove(PersonBean bean){
        super.remove(bean);
        
        imageMd5Cacher.remove(bean);
        mobilePhoneCacher.remove(bean);
        papersNumCacher.remove(bean);
    }
    public PersonBean getBeanById(Integer id) throws ExecutionException{
        return getBean(id);
    }
    public PersonBean getBeanByIdUnchecked(Integer id){
        return getBeanUnchecked(id);
    }
    public PersonBean getBeanByImageMd5(String imageMd5)  throws ExecutionException{
        return imageMd5Cacher.getBean(imageMd5);
    }
    public PersonBean getBeanByImageMd5Unchecked(String imageMd5){
        return imageMd5Cacher.getBeanUnchecked(imageMd5);
    }
    public PersonBean getBeanByMobilePhone(String mobilePhone)  throws ExecutionException{
        return mobilePhoneCacher.getBean(mobilePhone);
    }
    public PersonBean getBeanByMobilePhoneUnchecked(String mobilePhone){
        return mobilePhoneCacher.getBeanUnchecked(mobilePhone);
    }
    public PersonBean getBeanByPapersNum(String papersNum)  throws ExecutionException{
        return papersNumCacher.getBean(papersNum);
    }
    public PersonBean getBeanByPapersNumUnchecked(String papersNum){
        return papersNumCacher.getBeanUnchecked(papersNum);
    }
}