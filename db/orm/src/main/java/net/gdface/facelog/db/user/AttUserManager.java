// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package net.gdface.facelog.db.user;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;

import net.gdface.facelog.db.Manager;
import net.gdface.facelog.db.exception.DAOException;
import net.gdface.facelog.db.exception.DataAccessException;
import net.gdface.facelog.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the att_user table.
 * @author sql2java
 */
public class AttUserManager 
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the grayimage field.
     */
    public static final int ID_GRAYIMAGE = 0;

    /**
     * Identify the colorimage field.
     */
    public static final int ID_COLORIMAGE = 1;

    /**
     * Identify the permission field.
     */
    public static final int ID_PERMISSION = 2;

    /**
     * Identify the updatetime field.
     */
    public static final int ID_UPDATETIME = 3;

    /**
     * Identify the graylen field.
     */
    public static final int ID_GRAYLEN = 4;

    /**
     * Identify the colorlen field.
     */
    public static final int ID_COLORLEN = 5;

    /**
     * Identify the isonjob field.
     */
    public static final int ID_ISONJOB = 6;

    /**
     * Identify the userno field.
     */
    public static final int ID_USERNO = 7;

    /**
     * Identify the company field.
     */
    public static final int ID_COMPANY = 8;

    /**
     * Identify the id field.
     */
    public static final int ID_ID = 9;

    /**
     * Contains all the full fields of the att_user table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "att_user.grayimage"
        ,"att_user.colorimage"
        ,"att_user.permission"
        ,"att_user.updatetime"
        ,"att_user.graylen"
        ,"att_user.colorlen"
        ,"att_user.isonjob"
        ,"att_user.userno"
        ,"att_user.company"
        ,"att_user.id"
    };

    /**
     * Contains all the fields of the att_user table.
     */
    public static final String[] FIELD_NAMES =
    {
        "grayimage"
        ,"colorimage"
        ,"permission"
        ,"updatetime"
        ,"graylen"
        ,"colorlen"
        ,"isonjob"
        ,"userno"
        ,"company"
        ,"id"
    };

    /**
     * Field that contains the comma separated fields of the att_user table.
     */
    public static final String ALL_FULL_FIELDS = "att_user.grayimage"
                            + ",att_user.colorimage"
                            + ",att_user.permission"
                            + ",att_user.updatetime"
                            + ",att_user.graylen"
                            + ",att_user.colorlen"
                            + ",att_user.isonjob"
                            + ",att_user.userno"
                            + ",att_user.company"
                            + ",att_user.id";

    /**
     * Field that contains the comma separated fields of the att_user table.
     */
    public static final String ALL_FIELDS = "grayimage"
                            + ",colorimage"
                            + ",permission"
                            + ",updatetime"
                            + ",graylen"
                            + ",colorlen"
                            + ",isonjob"
                            + ",userno"
                            + ",company"
                            + ",id";

    private static AttUserManager singleton = new AttUserManager();

    /**
     * Get the AttUserManager singleton.
     *
     * @return AttUserManager
     */
    public static AttUserManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new AttUserBean instance.
     *
     * @return the new AttUserBean
     */
    public AttUserBean createAttUserBean()
    {
        return new AttUserBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a AttUserBean from the att_user using its key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique AttUserBean
     * @throws DAOException
     */
    //1
    public AttUserBean loadByPrimaryKey(Integer id) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + ALL_FIELDS + " FROM att_user WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            List<AttUserBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (pReturn.size() == 0) {
                throw new ObjectRetrievalException();
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer id) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM att_user WHERE id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from att_user.
     *
     * @return an array of AttUserManager bean
     * @throws DAOException
     */
    //5
    public AttUserBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }

    /**
     * Loads all the rows from att_user.
     *
     * @return a list of AttUserManager bean
     * @throws DAOException
     */
    //5
    public List<AttUserBean> loadAllAsList() throws DAOException
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from att_user, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of AttUserManager bean
     * @throws DAOException
     */
    //6
    public AttUserBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    /**
     * Loads the given number of rows from att_user, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of AttUserManager bean
     * @throws DAOException
     */
    //6
    public List<AttUserBean> loadAllAsList(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of AttUserBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting AttUserBean table
     * @throws DAOException
     */
    //7
    public AttUserBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }
    /**
     * Retrieves a list of AttUserBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting AttUserBean table
     * @throws DAOException
     */
    //7
    public List<AttUserBean> loadByWhereAsList(String where) throws DAOException
    {
        return this.loadByWhereAsList(where, null);
    }

    /**
     * Retrieves an array of AttUserBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting AttUserBean table
     * @throws DAOException
     */
    //8
    public AttUserBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of AttUserBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting AttUserBean table
     * @throws DAOException
     */
    //8
    public List<AttUserBean> loadByWhereAsList(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of AttUserBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting AttUserBean table
     * @throws DAOException
     */
    //9
    public AttUserBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return (AttUserBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new AttUserBean[0]);
    }

    /**
     * Retrieves a list of AttUserBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting AttUserBean table
     * @throws DAOException
     */
    //9
    public List<AttUserBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM att_user ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM att_user ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        // System.out.println("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSetAsList(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes all rows from att_user table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }


    /**
     * Deletes rows from the att_user table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM att_user " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the AttUserBean bean into the database.
     *
     * @param bean the AttUserBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public AttUserBean save(AttUserBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the AttUserBean bean into the database.
     *
     * @param bean the AttUserBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public AttUserBean insert(AttUserBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into att_user (");

            if (bean.isGrayimageModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("grayimage");
                _dirtyCount++;
            }

            if (bean.isColorimageModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("colorimage");
                _dirtyCount++;
            }

            if (bean.isPermissionModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("permission");
                _dirtyCount++;
            }

            if (bean.isUpdatetimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("updatetime");
                _dirtyCount++;
            }

            if (bean.isGraylenModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("graylen");
                _dirtyCount++;
            }

            if (bean.isColorlenModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("colorlen");
                _dirtyCount++;
            }

            if (bean.isIsonjobModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("isonjob");
                _dirtyCount++;
            }

            if (bean.isUsernoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("userno");
                _dirtyCount++;
            }

            if (bean.isCompanyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("company");
                _dirtyCount++;
            }

            if (bean.isIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.isIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the AttUserBean bean record in the database according to the changes.
     *
     * @param bean the AttUserBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public AttUserBean update(AttUserBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE att_user SET ");
            boolean useComma=false;

            if (bean.isGrayimageModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("grayimage=?");
            }

            if (bean.isColorimageModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("colorimage=?");
            }

            if (bean.isPermissionModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("permission=?");
            }

            if (bean.isUpdatetimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("updatetime=?");
            }

            if (bean.isGraylenModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("graylen=?");
            }

            if (bean.isColorlenModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("colorlen=?");
            }

            if (bean.isIsonjobModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("isonjob=?");
            }

            if (bean.isUsernoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("userno=?");
            }

            if (bean.isCompanyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("company=?");
            }

            if (bean.isIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("id=?");
            }
            sql.append(" WHERE ");
            sql.append("id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of AttUserBean beans into the database.
     *
     * @param beans the AttUserBean bean table to be saved
     * @return the saved AttUserBean array.
     * @throws DAOException
     */
    //15
    public AttUserBean[] save(AttUserBean[] beans) throws DAOException
    {
        for (AttUserBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a list of AttUserBean beans into the database.
     *
     * @param beans the AttUserBean bean table to be saved
     * @return the saved AttUserBean array.
     * @throws DAOException
     */
    //15
    public List<AttUserBean> save(List<AttUserBean> beans) throws DAOException
    {
        for (AttUserBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Insert an array of AttUserBean beans into the database.
     *
     * @param beans the AttUserBean bean table to be inserted
     * @return the saved AttUserBean array.
     * @throws DAOException
     */
    //16
    public AttUserBean[] insert(AttUserBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Insert a list of AttUserBean beans into the database.
     *
     * @param beans the AttUserBean bean table to be inserted
     * @return the saved AttUserBean array.
     * @throws DAOException
     */
    //16
    public List<AttUserBean> insert(List<AttUserBean> beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of AttUserBean beans into the database.
     *
     * @param beans the AttUserBean bean table to be inserted
     * @return the saved AttUserBean array.
     * @throws DAOException
     */
    //17
    public AttUserBean[] update(AttUserBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates a list of AttUserBean beans into the database.
     *
     * @param beans the AttUserBean bean table to be inserted
     * @return the saved AttUserBean array.
     * @throws DAOException
     */
    //17
    public List<AttUserBean> update(List<AttUserBean> beans) throws DAOException
    {
        return this.save(beans);
    }
    

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique AttUserBean bean from a template one giving a c
     *
     * @param bean the AttUserBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public AttUserBean loadUniqueUsingTemplate(AttUserBean bean) throws DAOException
    {
         AttUserBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of AttUserBean from a template one.
     *
     * @param bean the AttUserBean template to look for
     * @return all the AttUserBean matching the template
     * @throws DAOException
     */
    //19
    public AttUserBean[] loadUsingTemplate(AttUserBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads a list of AttUserBean from a template one.
     *
     * @param bean the AttUserBean template to look for
     * @return all the AttUserBean matching the template
     * @throws DAOException
     */
    //19
    public List<AttUserBean> loadUsingTemplateAsList(AttUserBean bean) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of AttUserBean from a template one, given the start row and number of rows.
     *
     * @param bean the AttUserBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the AttUserBean matching the template
     * @throws DAOException
     */
    //20
    public AttUserBean[] loadUsingTemplate(AttUserBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads a list of AttUserBean from a template one, given the start row and number of rows.
     *
     * @param bean the AttUserBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the AttUserBean matching the template
     * @throws DAOException
     */
    //20
    public List<AttUserBean> loadUsingTemplateAsList(AttUserBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of AttUserBean from a template one, given the start row and number of rows.
     *
     * @param bean the AttUserBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the AttUserBean matching the template
     * @throws DAOException
     */
    //20
    public AttUserBean[] loadUsingTemplate(AttUserBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
    	return (AttUserBean[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new AttUserBean[0]);
    }

    /**
     * Loads a list of AttUserBean from a template one, given the start row and number of rows.
     *
     * @param bean the AttUserBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the AttUserBean matching the template
     * @throws DAOException
     */
    //20
    public List<AttUserBean> loadUsingTemplateAsList(AttUserBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM att_user ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... loading all");
            }
            // System.out.println("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatementAsList(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a AttUserBean template.
     *
     * @param bean the AttUserBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(AttUserBean bean) throws DAOException
    {
        if (bean.isIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM att_user ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table att_user.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table att_user with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM att_user " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table att_user with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific AttUserBean bean
     *
     * @param bean the AttUserBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(AttUserBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific AttUserBean bean , given the start row and number of rows.
     *
     * @param bean the AttUserBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(AttUserBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific AttUserBean bean given the start row and number of rows and the search type
     *
     * @param bean the AttUserBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(AttUserBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM att_user");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuilder sqlWhere, AttUserBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isGrayimageModified()) {
                _dirtyCount ++;
                if (bean.getGrayimage() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("grayimage IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("grayimage = ?");
                }
            }
            if (bean.isColorimageModified()) {
                _dirtyCount ++;
                if (bean.getColorimage() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("colorimage IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("colorimage = ?");
                }
            }
            if (bean.isPermissionModified()) {
                _dirtyCount ++;
                if (bean.getPermission() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("permission IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("permission = ?");
                }
            }
            if (bean.isUpdatetimeModified()) {
                _dirtyCount ++;
                if (bean.getUpdatetime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("updatetime IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("updatetime ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isGraylenModified()) {
                _dirtyCount ++;
                if (bean.getGraylen() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("graylen IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("graylen = ?");
                }
            }
            if (bean.isColorlenModified()) {
                _dirtyCount ++;
                if (bean.getColorlen() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("colorlen IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("colorlen = ?");
                }
            }
            if (bean.isIsonjobModified()) {
                _dirtyCount ++;
                if (bean.getIsonjob() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("isonjob IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("isonjob = ?");
                }
            }
            if (bean.isUsernoModified()) {
                _dirtyCount ++;
                if (bean.getUserno() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("userno IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("userno ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isCompanyModified()) {
                _dirtyCount ++;
                if (bean.getCompany() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("company IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("company ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isIdModified()) {
                _dirtyCount ++;
                if (bean.getId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, AttUserBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isGrayimageModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getGrayimage() + "]");
                if (bean.getGrayimage() == null) { ps.setNull(++_dirtyCount, Types.LONGVARBINARY); } else { ps.setBytes(++_dirtyCount, bean.getGrayimage()); }
            }
            if (bean.isColorimageModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getColorimage() + "]");
                if (bean.getColorimage() == null) { ps.setNull(++_dirtyCount, Types.LONGVARBINARY); } else { ps.setBytes(++_dirtyCount, bean.getColorimage()); }
            }
            if (bean.isPermissionModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPermission() + "]");
                if (bean.getPermission() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getPermission()); }
            }
            if (bean.isUpdatetimeModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUpdatetime() + "]");
                        if (bean.getUpdatetime() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getUpdatetime()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getUpdatetime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getUpdatetime() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUpdatetime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getUpdatetime());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getUpdatetime() + "]");
                        if (bean.getUpdatetime() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getUpdatetime() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isGraylenModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getGraylen() + "]");
                if (bean.getGraylen() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getGraylen()); }
            }
            if (bean.isColorlenModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getColorlen() + "]");
                if (bean.getColorlen() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getColorlen()); }
            }
            if (bean.isIsonjobModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getIsonjob() + "]");
                if (bean.getIsonjob() == null) { ps.setNull(++_dirtyCount, Types.TINYINT); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getIsonjob()); }
            }
            if (bean.isUsernoModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUserno() + "]");
                        if (bean.getUserno() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getUserno()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getUserno() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getUserno() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUserno() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getUserno());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getUserno() + "]");
                        if (bean.getUserno() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getUserno() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isCompanyModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCompany() + "]");
                        if (bean.getCompany() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCompany()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCompany() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCompany() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCompany() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getCompany());
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCompany() + "]");
                        if (bean.getCompany() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCompany() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getId() + "]");
                if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of AttUserBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting AttUserBean table
     * @throws DAOException
     */
    //28
    public AttUserBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
    	return (AttUserBean[])this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new AttUserBean[0]);
    }

    /**
     * decode a resultset in a list of AttUserBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting AttUserBean table
     * @throws DAOException
     */
    //28
    public List<AttUserBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List<AttUserBean> v = new ArrayList<AttUserBean>();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return v;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the att_user on a AttUserBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting AttUserBean bean
     * @throws DAOException
     */
    //29
    public AttUserBean decodeRow(ResultSet rs) throws DAOException
    {
        AttUserBean bean = this.createAttUserBean();
        try
        {
            bean.setGrayimage(rs.getBytes(1));
            bean.setColorimage(rs.getBytes(2));
            bean.setPermission(Manager.getInteger(rs, 3));
            bean.setUpdatetime(rs.getString(4));
            bean.setGraylen(Manager.getInteger(rs, 5));
            bean.setColorlen(Manager.getInteger(rs, 6));
            bean.setIsonjob(Manager.getInteger(rs, 7));
            bean.setUserno(rs.getString(8));
            bean.setCompany(rs.getString(9));
            bean.setId(Manager.getInteger(rs, 10));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the att_user table on a AttUserBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting AttUserBean bean
     * @throws DAOException
     */
    //30
    public AttUserBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        AttUserBean bean = this.createAttUserBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_GRAYIMAGE:
                        ++pos;
                        bean.setGrayimage(rs.getBytes(pos));
                        break;
                    case ID_COLORIMAGE:
                        ++pos;
                        bean.setColorimage(rs.getBytes(pos));
                        break;
                    case ID_PERMISSION:
                        ++pos;
                        bean.setPermission(Manager.getInteger(rs, pos));
                        break;
                    case ID_UPDATETIME:
                        ++pos;
                        bean.setUpdatetime(rs.getString(pos));
                        break;
                    case ID_GRAYLEN:
                        ++pos;
                        bean.setGraylen(Manager.getInteger(rs, pos));
                        break;
                    case ID_COLORLEN:
                        ++pos;
                        bean.setColorlen(Manager.getInteger(rs, pos));
                        break;
                    case ID_ISONJOB:
                        ++pos;
                        bean.setIsonjob(Manager.getInteger(rs, pos));
                        break;
                    case ID_USERNO:
                        ++pos;
                        bean.setUserno(rs.getString(pos));
                        break;
                    case ID_COMPANY:
                        ++pos;
                        bean.setCompany(rs.getString(pos));
                        break;
                    case ID_ID:
                        ++pos;
                        bean.setId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the att_user on a AttUserBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting AttUserBean bean
     * @throws DAOException
     */
    //31
    public AttUserBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        AttUserBean bean = this.createAttUserBean();
        try
        {
            bean.setGrayimage(rs.getBytes("grayimage"));
            bean.setColorimage(rs.getBytes("colorimage"));
            bean.setPermission(Manager.getInteger(rs, "permission"));
            bean.setUpdatetime(rs.getString("updatetime"));
            bean.setGraylen(Manager.getInteger(rs, "graylen"));
            bean.setColorlen(Manager.getInteger(rs, "colorlen"));
            bean.setIsonjob(Manager.getInteger(rs, "isonjob"));
            bean.setUserno(rs.getString("userno"));
            bean.setCompany(rs.getString("company"));
            bean.setId(Manager.getInteger(rs, "id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of AttUserBean
     * @throws DAOException
     */
    //32
    public AttUserBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of AttUserBean
     * @throws DAOException
     */
    //32
    public List<AttUserBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of AttUserBean
     * @throws DAOException
     */
    //33
    public AttUserBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return (AttUserBean[])this.loadByPreparedStatementAsList(ps, fieldList).toArray(new AttUserBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of AttUserBean
     * @throws DAOException
     */
    //33
    public List<AttUserBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    {		        
        ResultSet rs =  null;
		List<AttUserBean> v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new ArrayList<AttUserBean>();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return v;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of AttUserBean
     * @throws DAOException
     */
    //34
    public AttUserBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of AttUserBean
     * @throws DAOException
     */
    //34
    public List<AttUserBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSetAsList(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private AttUserListener listener = null;

    /**
     * Registers a unique AttUserListener listener.
     */
    //35
    public void registerListener(AttUserListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the AttUserBean bean.
     *
     * @param bean the AttUserBean bean to be saved
     */
    //36
    private void beforeInsert(AttUserBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the AttUserBean bean.
     *
     * @param bean the AttUserBean bean to be saved
     */
    //37
    private void afterInsert(AttUserBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the AttUserBean bean.
     *
     * @param bean the AttUserBean bean to be updated
     */
    //38
    private void beforeUpdate(AttUserBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the AttUserBean bean.
     *
     * @param bean the AttUserBean bean to be updated
     */
    //39
    private void afterUpdate(AttUserBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the AttUserBean bean.
     *
     * @param bean the AttUserBean bean to be deleted
     */
    private void beforeDelete(AttUserBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the AttUserBean bean.
     *
     * @param bean the AttUserBean bean to be deleted
     */
    private void afterDelete(AttUserBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
