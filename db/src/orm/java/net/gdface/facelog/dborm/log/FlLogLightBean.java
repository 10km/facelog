// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.log;
import java.io.Serializable;
import net.gdface.facelog.dborm.Constant;
import net.gdface.facelog.dborm.FullBean;
import net.gdface.facelog.dborm.CompareToBuilder;
import net.gdface.facelog.dborm.EqualsBuilder;
import net.gdface.facelog.dborm.HashCodeBuilder;
/**
 * FlLogLightBean is a mapping of fl_log_light Table.
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: VIEW </li>
 * </ul>
 * @author sql2java
*/
public class FlLogLightBean
    implements Serializable,FullBean<FlLogLightBean>,Comparable<FlLogLightBean>,Constant
{
	private static final long serialVersionUID = -8629124492169570652L;
    /** comments:日志id */
    private Integer id;

    /** comments:用户识别码 */
    private Integer personId;

    /** comments:姓名 */
    private String name;

    /** comments:证件类型,0:未知,1:身份证,2:护照,3:台胞证,4:港澳通行证,5:军官证,6:外国人居留证,7:员工卡,8:其他 */
    private Integer papersType;

    /** comments:证件号码 */
    private String papersNum;

    /** comments:验证时间(可能由前端设备提供时间) */
    private java.util.Date verifyTime;

    /** columns modified flag */
    private long modified = 0L;
    /** columns initialized flag */
    private long initialized = 0L;
    private boolean _isNew = true;
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void setNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * @return the modified status of columns
     */
    public long getModified(){
        return modified;
    }

    /**
     * @param modified the modified status bit to be assigned to {@link #modified}
     */
    public void setModified(long modified){
        this.modified = modified;
    }
    /**
     * @return the initialized status of columns
     */
    public long getInitialized(){
        return initialized;
    }

    /**
     * @param initialized the initialized status bit to be assigned to {@link #initialized}
     */
    public void setInitialized(long initialized){
        this.initialized = initialized;
    }
    public FlLogLightBean(){
        super();
    }
    /**
     * create a FlLogLightBean from a instance
     */
    FlLogLightBean(FlLogLightBean bean){
        super();
        copy(bean);
    }
    /**
     * Getter method for id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_log_light.id</li>
     * <li>comments: 日志id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of id
     */
    public Integer getId(){
        return id;
    }
    /**
     * Setter method for id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(Integer newVal)
    {
        if ((newVal != null && id != null && (newVal.compareTo(id) == 0)) ||
            (newVal == null && id == null && isIdInitialized())) {
            return;
        }
        id = newVal;

        modified |= FL_LOG_LIGHT_ID_ID_MASK;
        initialized |= FL_LOG_LIGHT_ID_ID_MASK;
    }

    /**
     * Setter method for id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(int newVal)
    {
        setId(new Integer(newVal));
    }

    /**
     * Determines if the id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdModified()
    {
        return 0L != (modified & FL_LOG_LIGHT_ID_ID_MASK);
    }

    /**
     * Determines if the id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdInitialized()
    {
        return 0L != (initialized & FL_LOG_LIGHT_ID_ID_MASK);
    }
    /**
     * Getter method for personId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_log_light.person_id</li>
     * <li>comments: 用户识别码</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of personId
     */
    public Integer getPersonId(){
        return personId;
    }
    /**
     * Setter method for personId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to personId
     */
    public void setPersonId(Integer newVal)
    {
        if ((newVal != null && personId != null && (newVal.compareTo(personId) == 0)) ||
            (newVal == null && personId == null && isPersonIdInitialized())) {
            return;
        }
        personId = newVal;

        modified |= FL_LOG_LIGHT_ID_PERSON_ID_MASK;
        initialized |= FL_LOG_LIGHT_ID_PERSON_ID_MASK;
    }

    /**
     * Setter method for personId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to personId
     */
    public void setPersonId(int newVal)
    {
        setPersonId(new Integer(newVal));
    }

    /**
     * Determines if the personId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPersonIdModified()
    {
        return 0L != (modified & FL_LOG_LIGHT_ID_PERSON_ID_MASK);
    }

    /**
     * Determines if the personId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPersonIdInitialized()
    {
        return 0L != (initialized & FL_LOG_LIGHT_ID_PERSON_ID_MASK);
    }
    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_log_light.name</li>
     * <li>comments: 姓名</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of name
     */
    public String getName(){
        return name;
    }
    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal)
    {
        if ((newVal != null && name != null && (newVal.compareTo(name) == 0)) ||
            (newVal == null && name == null && isNameInitialized())) {
            return;
        }
        name = newVal;

        modified |= FL_LOG_LIGHT_ID_NAME_MASK;
        initialized |= FL_LOG_LIGHT_ID_NAME_MASK;
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified()
    {
        return 0L != (modified & FL_LOG_LIGHT_ID_NAME_MASK);
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized()
    {
        return 0L != (initialized & FL_LOG_LIGHT_ID_NAME_MASK);
    }
    /**
     * Getter method for papersType.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_log_light.papers_type</li>
     * <li>comments: 证件类型,0:未知,1:身份证,2:护照,3:台胞证,4:港澳通行证,5:军官证,6:外国人居留证,7:员工卡,8:其他</li>
     * <li>column size: 3</li>
     * <li>jdbc type returned by the driver: Types.TINYINT</li>
     * </ul>
     *
     * @return the value of papersType
     */
    public Integer getPapersType(){
        return papersType;
    }
    /**
     * Setter method for papersType.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to papersType
     */
    public void setPapersType(Integer newVal)
    {
        if ((newVal != null && papersType != null && (newVal.compareTo(papersType) == 0)) ||
            (newVal == null && papersType == null && isPapersTypeInitialized())) {
            return;
        }
        papersType = newVal;

        modified |= FL_LOG_LIGHT_ID_PAPERS_TYPE_MASK;
        initialized |= FL_LOG_LIGHT_ID_PAPERS_TYPE_MASK;
    }

    /**
     * Setter method for papersType.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to papersType
     */
    public void setPapersType(int newVal)
    {
        setPapersType(new Integer(newVal));
    }

    /**
     * Determines if the papersType has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPapersTypeModified()
    {
        return 0L != (modified & FL_LOG_LIGHT_ID_PAPERS_TYPE_MASK);
    }

    /**
     * Determines if the papersType has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPapersTypeInitialized()
    {
        return 0L != (initialized & FL_LOG_LIGHT_ID_PAPERS_TYPE_MASK);
    }
    /**
     * Getter method for papersNum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_log_light.papers_num</li>
     * <li>comments: 证件号码</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of papersNum
     */
    public String getPapersNum(){
        return papersNum;
    }
    /**
     * Setter method for papersNum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to papersNum
     */
    public void setPapersNum(String newVal)
    {
        if ((newVal != null && papersNum != null && (newVal.compareTo(papersNum) == 0)) ||
            (newVal == null && papersNum == null && isPapersNumInitialized())) {
            return;
        }
        papersNum = newVal;

        modified |= FL_LOG_LIGHT_ID_PAPERS_NUM_MASK;
        initialized |= FL_LOG_LIGHT_ID_PAPERS_NUM_MASK;
    }

    /**
     * Determines if the papersNum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPapersNumModified()
    {
        return 0L != (modified & FL_LOG_LIGHT_ID_PAPERS_NUM_MASK);
    }

    /**
     * Determines if the papersNum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPapersNumInitialized()
    {
        return 0L != (initialized & FL_LOG_LIGHT_ID_PAPERS_NUM_MASK);
    }
    /**
     * Getter method for verifyTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_log_light.verify_time</li>
     * <li>comments: 验证时间(可能由前端设备提供时间)</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of verifyTime
     */
    public java.util.Date getVerifyTime(){
        return verifyTime;
    }
    /**
     * Setter method for verifyTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to verifyTime
     */
    public void setVerifyTime(java.util.Date newVal)
    {
        if ((newVal != null && verifyTime != null && (newVal.compareTo(verifyTime) == 0)) ||
            (newVal == null && verifyTime == null && isVerifyTimeInitialized())) {
            return;
        }
        verifyTime = newVal;

        modified |= FL_LOG_LIGHT_ID_VERIFY_TIME_MASK;
        initialized |= FL_LOG_LIGHT_ID_VERIFY_TIME_MASK;
    }

    /**
     * Setter method for verifyTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to verifyTime
     */
    public void setVerifyTime(long newVal)
    {
        setVerifyTime(new java.util.Date(newVal));
    }

    /**
     * Determines if the verifyTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVerifyTimeModified()
    {
        return 0L != (modified & FL_LOG_LIGHT_ID_VERIFY_TIME_MASK);
    }

    /**
     * Determines if the verifyTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVerifyTimeInitialized()
    {
        return 0L != (initialized & FL_LOG_LIGHT_ID_VERIFY_TIME_MASK);
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return 0 != modified;
    }
  
    /**
     * Determines if the {@code column} has been modified.
     * @param columnID
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(int columnID){
        switch ( columnID ){
        case FL_LOG_LIGHT_ID_ID:
            return isIdModified();
        case FL_LOG_LIGHT_ID_PERSON_ID:
            return isPersonIdModified();
        case FL_LOG_LIGHT_ID_NAME:
            return isNameModified();
        case FL_LOG_LIGHT_ID_PAPERS_TYPE:
            return isPapersTypeModified();
        case FL_LOG_LIGHT_ID_PAPERS_NUM:
            return isPapersNumModified();
        case FL_LOG_LIGHT_ID_VERIFY_TIME:
            return isVerifyTimeModified();
        }
        return false;
    }
    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param columnID
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(int columnID){
        switch(columnID) {
        case FL_LOG_LIGHT_ID_ID:
            return isIdInitialized();
        case FL_LOG_LIGHT_ID_PERSON_ID:
            return isPersonIdInitialized();
        case FL_LOG_LIGHT_ID_NAME:
            return isNameInitialized();
        case FL_LOG_LIGHT_ID_PAPERS_TYPE:
            return isPapersTypeInitialized();
        case FL_LOG_LIGHT_ID_PAPERS_NUM:
            return isPapersNumInitialized();
        case FL_LOG_LIGHT_ID_VERIFY_TIME:
            return isVerifyTimeInitialized();
        }
        return false;
    }
    /**
     * Determines if the {@code column} has been modified.
     * @param column
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(String column){
        int index = FL_LOG_LIGHT_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_LOG_LIGHT_JAVA_FIELDS_LIST.indexOf(column);
        return isModified(index);
    }

    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param column
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(String column){
        int index = FL_LOG_LIGHT_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_LOG_LIGHT_JAVA_FIELDS_LIST.indexOf(column);
        return isInitialized(index);
    }
    
    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        modified = 0L;
    }

    @Override
    public boolean equals(Object object)
    {
        if (!(object instanceof FlLogLightBean)) {
            return false;
        }

        FlLogLightBean obj = (FlLogLightBean) object;
        return new EqualsBuilder()
            .append(getId(), obj.getId())
            .append(getPersonId(), obj.getPersonId())
            .append(getName(), obj.getName())
            .append(getPapersType(), obj.getPapersType())
            .append(getPapersNum(), obj.getPapersNum())
            .append(getVerifyTime(), obj.getVerifyTime())
            .isEquals();
    }

    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(-82280557, -700257973)
            .append(getId())
            .append(getPersonId())
            .append(getName())
            .append(getPapersType())
            .append(getPapersNum())
            .append(getVerifyTime())
            .toHashCode();
    }

    @Override
    public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(Integer.toHexString(this.hashCode())).append("[\n")
            .append("\tid=").append(getId()).append("\n")
            .append("\tperson_id=").append(getPersonId()).append("\n")
            .append("\tname=").append(getName()).append("\n")
            .append("\tpapers_type=").append(getPapersType()).append("\n")
            .append("\tpapers_num=").append(getPapersNum()).append("\n")
            .append("\tverify_time=").append(getVerifyTime()).append("\n")
            .append("]\n")
            .toString();
    }

    @Override
    public int compareTo(FlLogLightBean object){
        return new CompareToBuilder()
            .append(getId(), object.getId())
            .append(getPersonId(), object.getPersonId())
            .append(getName(), object.getName())
            .append(getPapersType(), object.getPapersType())
            .append(getPapersNum(), object.getPapersNum())
            .append(getVerifyTime(), object.getVerifyTime())
            .toComparison();
    }
    /**
    * Copies property of the passed bean into the current bean.<br>
    * if bean.isNew() is true, call {@link #copyIfNotNull(GfCodeBeanBase)}
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copy(FlLogLightBean bean)
    {
        if(bean.isNew()){
            copyIfNotNull(bean);
        }else{        
            isNew(bean.isNew());
            setId(bean.getId());
            setPersonId(bean.getPersonId());
            setName(bean.getName());
            setPapersType(bean.getPapersType());
            setPapersNum(bean.getPapersNum());
            setVerifyTime(bean.getVerifyTime());
        }
    }
    /**
    * Copies property of the passed bean into the current bean if property not null.
    *
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copyIfNotNull(FlLogLightBean bean)
    {
        isNew(bean.isNew());
        if(bean.getId()!=null)
            setId(bean.getId());
        if(bean.getPersonId()!=null)
            setPersonId(bean.getPersonId());
        if(bean.getName()!=null)
            setName(bean.getName());
        if(bean.getPapersType()!=null)
            setPapersType(bean.getPapersType());
        if(bean.getPapersNum()!=null)
            setPapersNum(bean.getPapersNum());
        if(bean.getVerifyTime()!=null)
            setVerifyTime(bean.getVerifyTime());
    }

    /**
    * set all field to null
    *
    * @author guyadong
    */
    public FlLogLightBean clean()
    {
        isNew(true);
        setId(null);
        setPersonId(null);
        setName(null);
        setPapersType(null);
        setPapersNum(null);
        setVerifyTime(null);
        return this;
    }
    
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column id list to copy into the current bean
     */
    public void copy(FlLogLightBean bean, int... fieldList)
    {
        if (null == fieldList || 0 == fieldList.length)
            copy(bean);
        else
            for (int i = 0; i < fieldList.length; i++) {
                setValue(fieldList[i], bean.getValue(fieldList[i]));
            }
    }
        
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column name list to copy into the current bean
     */
    public void copy(FlLogLightBean bean, String... fieldList)
    {
        if (null == fieldList || 0 == fieldList.length)
            copy(bean);
        else
            for (int i = 0; i < fieldList.length; i++) {
                setValue(fieldList[i].trim(), bean.getValue(fieldList[i].trim()));
            }
    }

    /**
     * return a object representation of the given column id
     */
    @SuppressWarnings("unchecked")
    public <T>T getValue(int columnID)
    {
        switch( columnID ){
        case FL_LOG_LIGHT_ID_ID: 
            return (T)getId();        
        case FL_LOG_LIGHT_ID_PERSON_ID: 
            return (T)getPersonId();        
        case FL_LOG_LIGHT_ID_NAME: 
            return (T)getName();        
        case FL_LOG_LIGHT_ID_PAPERS_TYPE: 
            return (T)getPapersType();        
        case FL_LOG_LIGHT_ID_PAPERS_NUM: 
            return (T)getPapersNum();        
        case FL_LOG_LIGHT_ID_VERIFY_TIME: 
            return (T)getVerifyTime();        
        }
        return null;
    }

    /**
     * set a value representation of the given column id
     */
    public <T> void setValue(int columnID,T value)
    {
        switch( columnID ) {
        case FL_LOG_LIGHT_ID_ID:        
            setId((Integer)value);
        case FL_LOG_LIGHT_ID_PERSON_ID:        
            setPersonId((Integer)value);
        case FL_LOG_LIGHT_ID_NAME:        
            setName((String)value);
        case FL_LOG_LIGHT_ID_PAPERS_TYPE:        
            setPapersType((Integer)value);
        case FL_LOG_LIGHT_ID_PAPERS_NUM:        
            setPapersNum((String)value);
        case FL_LOG_LIGHT_ID_VERIFY_TIME:        
            setVerifyTime((java.util.Date)value);
        }
    }
    
    /**
     * return a object representation of the given field
     */
    public <T>T getValue(String column)
    {
        int index = FL_LOG_LIGHT_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_LOG_LIGHT_JAVA_FIELDS_LIST.indexOf(column);
        return getValue(index);
    }

    /**
     * set a value representation of the given field
     */
    public <T>void setValue(String column,T value)
    {
        int index = FL_LOG_LIGHT_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_LOG_LIGHT_JAVA_FIELDS_LIST.indexOf(column);
        setValue(index,value);
    }
}
