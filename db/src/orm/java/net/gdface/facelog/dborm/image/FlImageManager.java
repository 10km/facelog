// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.image;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import net.gdface.facelog.dborm.Constant;
import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.face.FlFaceBean;
import net.gdface.facelog.dborm.face.FlFaceManager;
import net.gdface.facelog.dborm.person.FlPersonBean;
import net.gdface.facelog.dborm.person.FlPersonManager;
import net.gdface.facelog.dborm.device.FlDeviceBean;
import net.gdface.facelog.dborm.device.FlDeviceManager;

/**
 * Handles database calls (save, load, count, etc...) for the fl_image table.
 * @author sql2java
 */
public class FlImageManager extends TableManager.Adapter<FlImageBean>
{
    /**
     * Tablename.
     */
    public static final String TABLE_NAME="fl_image";

   /**
     * Contains all the primarykey fields of the fl_image table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "md5"
    };

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    public String getFields() {
        return FL_IMAGE_FIELDS;
    }
    
    public String getFullFields() {
        return FL_IMAGE_FULL_FIELDS;
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }

    private static FlImageManager singleton = new FlImageManager();
    protected FlImageManager(){}
    /**
     * Get the FlImageManager singleton.
     *
     * @return FlImageManager
     */
    public static FlImageManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlImageBean instance.
     *
     * @return the new FlImageBean
     */
    public FlImageBean createBean()
    {
        return new FlImageBean();
    }
    
    @Override
    protected Class<FlImageBean> _beanType(){
        return FlImageBean.class;
    }
    
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link FlImageBean} from the fl_image using primary key fields.
     *
     * @param md5 String - PK# 1
     * @return a unique FlImageBean or {@code null} if not found or have null argument
     * @throws DAOException
     */
    //1
    @SuppressWarnings("unused")
    public FlImageBean loadByPrimaryKey(String md5) throws DAOException
    {
        if(null == md5){
            return null;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + FL_IMAGE_FIELDS + " FROM fl_image WHERE md5=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (md5 == null) { ps.setNull(1, Types.CHAR); } else { ps.setString(1, md5); }
            List<FlImageBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (0 == pReturn.size()) {
                return null;
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //1.2
    @Override
    public FlImageBean loadByPrimaryKey(FlImageBean bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey( bean.getMd5());
    }
    
    /**
     * Loads a {@link FlImageBean} from the fl_image using primary key fields.
     * @param keys primary keys value:<br> 
     * @return a unique {@link FlImageBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(String md5)}
     */
    //1.3
    @Override
    public FlImageBean loadByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof String))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
        return loadByPrimaryKey((String)keys[0]);
    }
    /**
     * Returns true if this fl_image contains row with primary key fields.
     * @param md5 String - PK# 1
     * @throws DAOException
     */
    //1.4
    public boolean existsPrimaryKey(String md5) throws DAOException
    {
        if(null == md5){
            return false;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try{
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_image WHERE md5=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (md5 == null) { ps.setNull(1, Types.CHAR); } else { ps.setString(1, md5); }
            return 1 == this.countByPreparedStatement(ps);
        }catch(SQLException e){
            throw new ObjectRetrievalException(e);
        }finally{
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
    /**
     * Return true if this fl_image contains row with primary key fields.
     * @param bean  
     * @throws DAOException
     * @return false if primary kes has null
     * @see #countUsingTemplate(FlImageBean)
     */
    //1.6
    @Override
    public boolean existsByPrimaryKey(FlImageBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getMd5())
            return false;
        long modified = bean.getModified();
        try{
            bean.resetModifiedExceptPrimaryKeys();
            return 1 == countUsingTemplate(bean);
        }finally{
            bean.setModified(modified);
        }
    }
    //1.7
    @Override
    public FlImageBean checkDuplicate(FlImageBean bean) throws DAOException{
        if(!existsByPrimaryKey(bean))
            throw new ObjectRetrievalException("Duplicate entry ("+ bean.getMd5() +") for key 'PRIMARY'");
        return bean;
    }
    /**
     * Check duplicated row by primary keys,if row exists throw {@link ObjectRetrievalException}
     * @param md5 String
     * @throws DAOException
     * @see #existsPrimaryKey(String md5)
     */
    //1.4.1
    public String checkDuplicate(String md5) throws DAOException
    {
        if(existsPrimaryKey(md5))
            throw new ObjectRetrievalException("Duplicate entry '"+ md5 +"' for key 'PRIMARY'");
        return md5;
    }    
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     * 
     * @param md5 String - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #delete(FlImageBean)}
     */
    //2
    public int deleteByPrimaryKey(String md5) throws DAOException
    {
        FlImageBean bean=createBean();
        bean.setMd5(md5);
        return this.delete(bean);
    }

    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
     * @throws DAOException
     */
    //2
    @Override
    public int delete(FlImageBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getMd5()){
            return 0;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            this.listenerContainer.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_image WHERE md5=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getMd5() == null) { ps.setNull(1, Types.CHAR); } else { ps.setString(1, bean.getMd5()); }
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.listenerContainer.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     * @return the number of deleted rows
     * @see {@link #delete(FlImageBean)}
     */   
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        FlImageBean bean=createBean();   
        if(null!= keys[0] && !(keys[0] instanceof String))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
        bean.setMd5((String)keys[0]);
        return delete(bean);
    }
    
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] importedBeanTypes = new Class<?>[]{FlFaceBean.class,FlPersonBean.class};

    /**
     * @see #getImportedBeansAsList(FlImageBean,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> T[] getImportedBeans(FlImageBean bean, int ikIndex) throws DAOException {
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(importedBeanTypes[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_IMAGE_IK_FL_FACE_IMAGE_MD5} -> {@link FlFaceBean}</li>
     *     <li> {@link Constant#FL_IMAGE_IK_FL_PERSON_IMAGE_MD5} -> {@link FlPersonBean}</li>
     * </ul>
     * @param bean the {@link FlImageBean} object to use
     * @param ikIndex valid values: {@link Constant#FL_IMAGE_IK_FL_FACE_IMAGE_MD5},{@link Constant#FL_IMAGE_IK_FL_PERSON_IMAGE_MD5}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> List<T> getImportedBeansAsList(FlImageBean bean,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_IMAGE_IK_FL_FACE_IMAGE_MD5:
            return (List<T>)this.getFaceBeansByImageMd5AsList(bean);
        case FL_IMAGE_IK_FL_PERSON_IMAGE_MD5:
            return (List<T>)this.getPersonBeansByImageMd5AsList(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlImageBean,int)}
     * @param bean the {@link FlImageBean} object to use
     * @param importedBeans the FlPersonBean array to associate to the {@link FlImageBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlImageBean,int)}
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> T[] setImportedBeans(FlImageBean bean,T[] importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_IMAGE_IK_FL_FACE_IMAGE_MD5:
            return (T[])setFaceBeansByImageMd5(bean,(FlFaceBean[])importedBeans);
        case FL_IMAGE_IK_FL_PERSON_IMAGE_MD5:
            return (T[])setPersonBeansByImageMd5(bean,(FlPersonBean[])importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlImageBean,int)}
     * @param bean the {@link FlImageBean} object to use
     * @param importedBeans the <T> object to associate to the {@link FlImageBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlImageBean,int)}

     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>,C extends java.util.Collection<T>> C setImportedBeans(FlImageBean bean,C importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_IMAGE_IK_FL_FACE_IMAGE_MD5:
            return (C)setFaceBeansByImageMd5(bean,(java.util.Collection<FlFaceBean>)importedBeans);
        case FL_IMAGE_IK_FL_PERSON_IMAGE_MD5:
            return (C)setPersonBeansByImageMd5(bean,(java.util.Collection<FlPersonBean>)importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
 
    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FlFaceBean} object from the fl_face.image_md5 field.<BR>
     * FK_NAME : fl_face_ibfk_1 
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlFaceBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlFaceBean[] getFaceBeansByImageMd5(FlImageBean bean) throws DAOException
    {
        return getFaceBeansByImageMd5AsList(bean).toArray(new FlFaceBean[0]);
    }
    /**
     * Retrieves the {@link FlFaceBean} object from the fl_face.image_md5 field.<BR>
     * FK_NAME : fl_face_ibfk_1 
     * @param md5 String - PK# 1
     * @return the associated {@link FlFaceBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FlFaceBean[] getFaceBeansByImageMd5(String imageMd5) throws DAOException
    {
        FlImageBean bean = createBean();
        bean.setMd5(imageMd5);
        return getFaceBeansByImageMd5(bean);
    }
    /**
     * Retrieves the {@link FlFaceBean} object from fl_face.image_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlFaceBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlFaceBean> getFaceBeansByImageMd5AsList(FlImageBean bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<FlFaceBean>();
        FlFaceBean other = FlFaceManager.getInstance().createBean();
        other.setImageMd5(bean.getMd5());
        return FlFaceManager.getInstance().loadUsingTemplateAsList(other);
    }
    /**
     * Retrieves the {@link FlFaceBean} object from fl_face.image_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param md5 String - PK# 1
     * @return the associated {@link FlFaceBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public List<FlFaceBean> getFaceBeansByImageMd5AsList(String imageMd5) throws DAOException
    {
         FlImageBean bean = createBean();
        bean.setMd5(imageMd5);
        return getFaceBeansByImageMd5AsList(bean);
    }
    /**
     * set  the {@link FlFaceBean} object array associate to FlImageBean by the fl_face.image_md5 field.<BR>
     * FK_NAME : fl_face_ibfk_1 
     * @param bean the referenced {@link FlImageBean}
     * @param importedBeans imported beans from fl_face
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlFaceManager#setReferencedByImageMd5(FlFaceBean, FlImageBean)
     */
    //3.3 SET IMPORTED
    public FlFaceBean[] setFaceBeansByImageMd5(FlImageBean bean , FlFaceBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlFaceBean importBean : importedBeans ){
                FlFaceManager.getInstance().setReferencedByImageMd5(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlFaceBean} object collection associate to FlImageBean by the fl_face.image_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param bean the referenced {@link FlImageBean} 
     * @param importedBeans imported beans from fl_face 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlFaceManager#setReferencedByImageMd5(FlFaceBean, FlImageBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlFaceBean>> C setFaceBeansByImageMd5(FlImageBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlFaceBean importBean : importedBeans ){
                FlFaceManager.getInstance().setReferencedByImageMd5(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Retrieves the {@link FlPersonBean} object from the fl_person.image_md5 field.<BR>
     * FK_NAME : fl_person_ibfk_1 
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlPersonBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlPersonBean[] getPersonBeansByImageMd5(FlImageBean bean) throws DAOException
    {
        return getPersonBeansByImageMd5AsList(bean).toArray(new FlPersonBean[0]);
    }
    /**
     * Retrieves the {@link FlPersonBean} object from the fl_person.image_md5 field.<BR>
     * FK_NAME : fl_person_ibfk_1 
     * @param md5 String - PK# 1
     * @return the associated {@link FlPersonBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FlPersonBean[] getPersonBeansByImageMd5(String imageMd5) throws DAOException
    {
        FlImageBean bean = createBean();
        bean.setMd5(imageMd5);
        return getPersonBeansByImageMd5(bean);
    }
    /**
     * Retrieves the {@link FlPersonBean} object from fl_person.image_md5 field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlPersonBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlPersonBean> getPersonBeansByImageMd5AsList(FlImageBean bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<FlPersonBean>();
        FlPersonBean other = FlPersonManager.getInstance().createBean();
        other.setImageMd5(bean.getMd5());
        return FlPersonManager.getInstance().loadUsingTemplateAsList(other);
    }
    /**
     * Retrieves the {@link FlPersonBean} object from fl_person.image_md5 field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param md5 String - PK# 1
     * @return the associated {@link FlPersonBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public List<FlPersonBean> getPersonBeansByImageMd5AsList(String imageMd5) throws DAOException
    {
         FlImageBean bean = createBean();
        bean.setMd5(imageMd5);
        return getPersonBeansByImageMd5AsList(bean);
    }
    /**
     * set  the {@link FlPersonBean} object array associate to FlImageBean by the fl_person.image_md5 field.<BR>
     * FK_NAME : fl_person_ibfk_1 
     * @param bean the referenced {@link FlImageBean}
     * @param importedBeans imported beans from fl_person
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlPersonManager#setReferencedByImageMd5(FlPersonBean, FlImageBean)
     */
    //3.3 SET IMPORTED
    public FlPersonBean[] setPersonBeansByImageMd5(FlImageBean bean , FlPersonBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlPersonBean importBean : importedBeans ){
                FlPersonManager.getInstance().setReferencedByImageMd5(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlPersonBean} object collection associate to FlImageBean by the fl_person.image_md5 field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param bean the referenced {@link FlImageBean} 
     * @param importedBeans imported beans from fl_person 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlPersonManager#setReferencedByImageMd5(FlPersonBean, FlImageBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlPersonBean>> C setPersonBeansByImageMd5(FlImageBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlPersonBean importBean : importedBeans ){
                FlPersonManager.getInstance().setReferencedByImageMd5(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Save the FlImageBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlImageBean} bean to be saved
     * @param refDeviceByDeviceId the {@link FlDeviceBean} bean referenced by {@link FlImageBean} 
     * @param impFaceByImageMd5 the {@link FlFaceBean} beans refer to {@link FlImageBean} 
     * @param impPersonByImageMd5 the {@link FlPersonBean} beans refer to {@link FlImageBean} 
     * @return the inserted or updated {@link FlImageBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public FlImageBean save(FlImageBean bean
        , FlDeviceBean refDeviceByDeviceId 
        , FlFaceBean[] impFaceByImageMd5 , FlPersonBean[] impPersonByImageMd5 ) throws DAOException
    {
        if(null == bean) return null;
        if(null != refDeviceByDeviceId)
            this.setReferencedByDeviceId(bean,refDeviceByDeviceId);
        bean = this.save( bean );
        this.setFaceBeansByImageMd5(bean,impFaceByImageMd5);
        FlFaceManager.getInstance().save( impFaceByImageMd5 );
        this.setPersonBeansByImageMd5(bean,impPersonByImageMd5);
        FlPersonManager.getInstance().save( impPersonByImageMd5 );
        return bean;
    } 

    /**
     * Transaction version for sync save
     * @see {@link #save(FlImageBean , FlDeviceBean , FlFaceBean[] , FlPersonBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public FlImageBean saveAsTransaction(final FlImageBean bean
        ,final FlDeviceBean refDeviceByDeviceId 
        ,final FlFaceBean[] impFaceByImageMd5 ,final FlPersonBean[] impPersonByImageMd5 ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlImageBean>(){
            @Override
            public FlImageBean call() throws Exception {
                return save(bean , refDeviceByDeviceId , impFaceByImageMd5 , impPersonByImageMd5 );
            }});
    }
    /**
     * Save the FlImageBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlImageBean} bean to be saved
     * @param refDeviceByDeviceId the {@link FlDeviceBean} bean referenced by {@link FlImageBean} 
     * @param impFaceByImageMd5 the {@link FlFaceBean} bean refer to {@link FlImageBean} 
     * @param impPersonByImageMd5 the {@link FlPersonBean} bean refer to {@link FlImageBean} 
     * @return the inserted or updated {@link FlImageBean} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public FlImageBean save(FlImageBean bean
        , FlDeviceBean refDeviceByDeviceId 
        , java.util.Collection<FlFaceBean> impFaceByImageMd5 , java.util.Collection<FlPersonBean> impPersonByImageMd5 ) throws DAOException
    {
        if(null == bean) return null;
        this.setReferencedByDeviceId(bean,refDeviceByDeviceId);
        bean = this.save( bean );
        this.setFaceBeansByImageMd5(bean,impFaceByImageMd5);
        FlFaceManager.getInstance().save( impFaceByImageMd5 );
        this.setPersonBeansByImageMd5(bean,impPersonByImageMd5);
        FlPersonManager.getInstance().save( impPersonByImageMd5 );
        return bean;
    }

    /**
     * Transaction version for sync save
     * @see {@link #save(FlImageBean , FlDeviceBean , java.util.Collection , java.util.Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public FlImageBean saveAsTransaction(final FlImageBean bean
        ,final FlDeviceBean refDeviceByDeviceId 
        ,final  java.util.Collection<FlFaceBean> impFaceByImageMd5 ,final  java.util.Collection<FlPersonBean> impPersonByImageMd5 ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlImageBean>(){
            @Override
            public FlImageBean call() throws Exception {
                return save(bean , refDeviceByDeviceId , impFaceByImageMd5 , impPersonByImageMd5 );
            }});
    }
    /**
     * Save the FlImageBean bean and referenced beans and imported beans (array) into the database.
     *
     * @param bean the {@link FlImageBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlImageBean , FlDeviceBean , FlFaceBean[] , FlPersonBean[] )}
     * @return the inserted or updated {@link FlImageBean} bean
     * @throws DAOException
     */
    //3.9 SYNC SAVE 
    @Override
    public FlImageBean save(FlImageBean bean,Object ...args) throws DAOException
    {
        if(args.length > 3)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 3");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlDeviceBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:FlDeviceBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof FlFaceBean[])){
            throw new IllegalArgumentException("invalid type for the No.2 dynamic argument,expected type:FlFaceBean[]");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof FlPersonBean[])){
            throw new IllegalArgumentException("invalid type for the No.3 dynamic argument,expected type:FlPersonBean[]");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlDeviceBean)args[0],(args.length < 2 || null == args[1])?null:(FlFaceBean[])args[1],(args.length < 3 || null == args[2])?null:(FlPersonBean[])args[2]);
    } 

    /**
     * Save the FlImageBean bean and referenced beans and imported beans (collection) into the database.
     *
     * @param bean the {@link FlImageBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlImageBean , FlDeviceBean , java.util.Collection , java.util.Collection )}
     * @return the inserted or updated {@link FlImageBean} bean
     * @throws DAOException
     */
    //3.10 SYNC SAVE 
    @SuppressWarnings("unchecked")
    @Override
    public FlImageBean saveCollection(FlImageBean bean,Object ...args) throws DAOException
    {
        if(args.length > 3)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 3");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlDeviceBean)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:FlDeviceBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:java.util.Collection<FlFaceBean>");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:java.util.Collection<FlPersonBean>");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlDeviceBean)args[0],(args.length < 2 || null == args[1])?null:(java.util.Collection<FlFaceBean>)args[1],(args.length < 3 || null == args[2])?null:(java.util.Collection<FlPersonBean>)args[2]);
    } 
    //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_IMAGE_FK_DEVICE_ID} -> {@link FlDeviceBean}</li>
     * </ul>
     * @param bean the {@link FlImageBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link Constant#FL_IMAGE_FK_DEVICE_ID}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> T getReferencedBean(FlImageBean bean,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_IMAGE_FK_DEVICE_ID:
            return  (T)this.getReferencedByDeviceId(bean);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    
    /**
     * Associates the {@link FlImageBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean(FlImageBean,int)}
     * @param bean the {@link FlImageBean} object to use
     * @param beanToSet the <T> object to associate to the {@link FlImageBean}
     * @param fkIndex valid values: see also {@link #getReferencedBean(FlImageBean,int)}
     * @return always beanToSet saved
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> T setReferencedBean(FlImageBean bean,T beanToSet,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_IMAGE_FK_DEVICE_ID:
            return  (T)this.setReferencedByDeviceId(bean, (FlDeviceBean)beanToSet);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the {@link FlDeviceBean} object referenced by {@link FlImageBean#getDeviceId}() field.<br>
     * FK_NAME : fl_image_ibfk_1
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlDeviceBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //5.1 GET REFERENCED VALUE
    public FlDeviceBean getReferencedByDeviceId(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        bean.setReferencedByDeviceId(FlDeviceManager.getInstance().loadByPrimaryKey(bean.getDeviceId())); 
        return bean.getReferencedByDeviceId();
    }

    /**
     * Associates the {@link FlImageBean} object to the {@link FlDeviceBean} object by {@link FlImageBean#getDeviceId}() field.
     *
     * @param bean the {@link FlImageBean} object to use
     * @param beanToSet the {@link FlDeviceBean} object to associate to the {@link FlImageBean} .
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlDeviceBean setReferencedByDeviceId(FlImageBean bean, FlDeviceBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlDeviceManager.getInstance().save(beanToSet);
            bean.setReferencedByDeviceId(beanToSet);
            if( null == beanToSet){
                bean.setDeviceId(null);
            }else{
                bean.setDeviceId(beanToSet.getId());
            }
        }
        return beanToSet;
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Deletes rows from the fl_image table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clauses.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    @Override
    public int deleteByWhere(String where) throws DAOException
    {
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action = new DeleteBeanAction(); 
            this.loadByWhere(where,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_image " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    public FlImageBean insert(FlImageBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.listenerContainer.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_image (");

            if (bean.checkMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("md5");
                _dirtyCount++;
            }

            if (bean.checkFormatModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("format");
                _dirtyCount++;
            }

            if (bean.checkWidthModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("width");
                _dirtyCount++;
            }

            if (bean.checkHeightModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("height");
                _dirtyCount++;
            }

            if (bean.checkDepthModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("depth");
                _dirtyCount++;
            }

            if (bean.checkFaceNumModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_num");
                _dirtyCount++;
            }

            if (bean.checkThumbMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("thumb_md5");
                _dirtyCount++;
            }

            if (bean.checkDeviceIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("device_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.listenerContainer.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //14
    @Override
    public FlImageBean update(FlImageBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.listenerContainer.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_image SET ");
            boolean useComma=false;

            if (bean.checkMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("md5=?");
            }

            if (bean.checkFormatModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("format=?");
            }

            if (bean.checkWidthModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("width=?");
            }

            if (bean.checkHeightModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("height=?");
            }

            if (bean.checkDepthModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("depth=?");
            }

            if (bean.checkFaceNumModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_num=?");
            }

            if (bean.checkThumbMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("thumb_md5=?");
            }

            if (bean.checkDeviceIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("device_id=?");
            }
            sql.append(" WHERE ");
            sql.append("md5=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.listenerContainer.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public FlImageBean loadUniqueUsingTemplate(FlImageBean bean) throws DAOException
    {
         FlImageBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    //20-5
    @Override
    public int loadUsingTemplate(FlImageBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<FlImageBean> action) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSelectSql(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(FlImageBean bean) throws DAOException
    {
        if(bean.checkMd5Initialized() && null != bean.getMd5()){
            return this.deleteByPrimaryKey(bean.getMd5());
        }
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action=new DeleteBeanAction(); 
            this.loadUsingTemplate(bean,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_image ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________


    /**
     * Retrieves an array of FlImageBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return an array of FlImageBean
     * @throws DAOException
     */
    public FlImageBean[] loadByIndexDeviceId(Integer deviceId) throws DAOException
    {
        return (FlImageBean[])this.loadByIndexDeviceIdAsList(deviceId).toArray(new FlImageBean[0]);
    }
    
    /**
     * Retrieves a list of FlImageBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return a list of FlImageBean
     * @throws DAOException
     */
    public List<FlImageBean> loadByIndexDeviceIdAsList(Integer deviceId) throws DAOException
    {
        FlImageBean bean = this.createBean();
        bean.setDeviceId(deviceId);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndexDeviceId(Integer deviceId) throws DAOException
    {
        FlImageBean bean = this.createBean();
        bean.setDeviceId(deviceId);
        return deleteUsingTemplate(bean);
    }
    
    
    /**
     * Retrieves a list of FlImageBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_IMAGE_INDEX_DEVICE_ID}
     * @param keys key values of index
     * @return a list of FlImageBean
     * @throws DAOException
     */
    public List<FlImageBean> loadByIndexAsList(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
        case FL_IMAGE_INDEX_DEVICE_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'device_id' column number");
            if(null != keys[0] && !(keys[0] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            return this.loadByIndexDeviceIdAsList((Integer)keys[0]);        
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_IMAGE_INDEX_DEVICE_ID}
     * @param keys key values of index
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
        case FL_IMAGE_INDEX_DEVICE_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'device_id' column number");
            if(null != keys[0] && !(keys[0] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            return this.deleteByIndexDeviceId((Integer)keys[0]);
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }        
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    //25
    @Override
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_image " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_image with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlImageBean bean given the search type
     *
     * @param bean the FlImageBean template to look for
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlImageBean bean, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_image");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clauses constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlImageBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.checkMd5Modified()) {
                _dirtyCount ++;
                if (bean.getMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkFormatModified()) {
                _dirtyCount ++;
                if (bean.getFormat() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("format IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("format ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkWidthModified()) {
                _dirtyCount ++;
                if (bean.getWidth() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("width IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("width = ?");
                }
            }
            if (bean.checkHeightModified()) {
                _dirtyCount ++;
                if (bean.getHeight() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("height IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("height = ?");
                }
            }
            if (bean.checkDepthModified()) {
                _dirtyCount ++;
                if (bean.getDepth() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("depth IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("depth = ?");
                }
            }
            if (bean.checkFaceNumModified()) {
                _dirtyCount ++;
                if (bean.getFaceNum() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_num IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_num = ?");
                }
            }
            if (bean.checkThumbMd5Modified()) {
                _dirtyCount ++;
                if (bean.getThumbMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("thumb_md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("thumb_md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkDeviceIdModified()) {
                _dirtyCount ++;
                if (bean.getDeviceId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("device_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("device_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlImageBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.checkMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMd5() + "]");
                        if (bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMd5() + "%]");
                        if ( bean.getMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMd5() + "]");
                        if ( bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMd5() + "%]");
                        if (bean.getMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkFormatModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFormat() + "]");
                        if (bean.getFormat() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getFormat()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFormat() + "%]");
                        if ( bean.getFormat()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getFormat() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFormat() + "]");
                        if ( bean.getFormat() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getFormat()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFormat() + "%]");
                        if (bean.getFormat()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getFormat() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkWidthModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getWidth() + "]");
                if (bean.getWidth() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getWidth()); }
            }
            if (bean.checkHeightModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getHeight() + "]");
                if (bean.getHeight() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getHeight()); }
            }
            if (bean.checkDepthModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getDepth() + "]");
                if (bean.getDepth() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getDepth()); }
            }
            if (bean.checkFaceNumModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceNum() + "]");
                if (bean.getFaceNum() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceNum()); }
            }
            if (bean.checkThumbMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getThumbMd5() + "]");
                        if (bean.getThumbMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getThumbMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getThumbMd5() + "%]");
                        if ( bean.getThumbMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getThumbMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getThumbMd5() + "]");
                        if ( bean.getThumbMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getThumbMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getThumbMd5() + "%]");
                        if (bean.getThumbMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getThumbMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkDeviceIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getDeviceId() + "]");
                if (bean.getDeviceId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getDeviceId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlImageBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //28
    public FlImageBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlImageBean[0]);
    }

    /**
     * decode a resultset in a list of FlImageBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //28-1
    public List<FlImageBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action<FlImageBean> action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_image on a FlImageBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlImageBean bean
     * @throws DAOException
     */
    //29
    public FlImageBean decodeRow(ResultSet rs,FlImageBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setMd5(rs.getString(1));
            bean.setFormat(rs.getString(2));
            bean.setWidth(Manager.getInteger(rs, 3));
            bean.setHeight(Manager.getInteger(rs, 4));
            bean.setDepth(Manager.getInteger(rs, 5));
            bean.setFaceNum(Manager.getInteger(rs, 6));
            bean.setThumbMd5(rs.getString(7));
            bean.setDeviceId(Manager.getInteger(rs, 8));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_image table on a FlImageBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlImageBean bean
     * @throws DAOException
     */
    //30
    public FlImageBean decodeRow(ResultSet rs, int[] fieldList,FlImageBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case FL_IMAGE_ID_MD5:
                        ++pos;
                        bean.setMd5(rs.getString(pos));
                        break;
                    case FL_IMAGE_ID_FORMAT:
                        ++pos;
                        bean.setFormat(rs.getString(pos));
                        break;
                    case FL_IMAGE_ID_WIDTH:
                        ++pos;
                        bean.setWidth(Manager.getInteger(rs, pos));
                        break;
                    case FL_IMAGE_ID_HEIGHT:
                        ++pos;
                        bean.setHeight(Manager.getInteger(rs, pos));
                        break;
                    case FL_IMAGE_ID_DEPTH:
                        ++pos;
                        bean.setDepth(Manager.getInteger(rs, pos));
                        break;
                    case FL_IMAGE_ID_FACE_NUM:
                        ++pos;
                        bean.setFaceNum(Manager.getInteger(rs, pos));
                        break;
                    case FL_IMAGE_ID_THUMB_MD5:
                        ++pos;
                        bean.setThumbMd5(rs.getString(pos));
                        break;
                    case FL_IMAGE_ID_DEVICE_ID:
                        ++pos;
                        bean.setDeviceId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_image on a FlImageBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlImageBean bean
     * @throws DAOException
     */
    //31
    public FlImageBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlImageBean bean = this.createBean();
        try
        {
            bean.setMd5(rs.getString("md5"));
            bean.setFormat(rs.getString("format"));
            bean.setWidth(Manager.getInteger(rs, "width"));
            bean.setHeight(Manager.getInteger(rs, "height"));
            bean.setDepth(Manager.getInteger(rs, "depth"));
            bean.setFaceNum(Manager.getInteger(rs, "face_num"));
            bean.setThumbMd5(rs.getString("thumb_md5"));
            bean.setDeviceId(Manager.getInteger(rs, "device_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //32
    public FlImageBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //32
    public List<FlImageBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //33
    public FlImageBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlImageBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //33
    public List<FlImageBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //34
    public FlImageBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlImageBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //34-1
    public List<FlImageBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action<FlImageBean> action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    class ListenerContainer implements TableListener<FlImageBean> {
        private final Set<TableListener<FlImageBean>> listeners = new TreeSet<TableListener<FlImageBean>>();
        public ListenerContainer() {
        }
    
        @Override
        public void beforeInsert(FlImageBean bean) throws DAOException {
            for(TableListener<FlImageBean> listener:listeners){
                listener.beforeInsert(bean);
            }
        }
    
        @Override
        public void afterInsert(FlImageBean bean) throws DAOException {
            for(TableListener<FlImageBean> listener:listeners){
                listener.afterInsert(bean);
            }
        }
    
        @Override
        public void beforeUpdate(FlImageBean bean) throws DAOException {
            for(TableListener<FlImageBean> listener:listeners){
                listener.beforeUpdate(bean);
            }
        }
    
        @Override
        public void afterUpdate(FlImageBean bean) throws DAOException {
            for(TableListener<FlImageBean> listener:listeners){
                listener.afterUpdate(bean);
            }
        }
    
        @Override
        public void beforeDelete(FlImageBean bean) throws DAOException {
            for(TableListener<FlImageBean> listener:listeners){
                listener.beforeDelete(bean);
            }
        }
    
        @Override
        public void afterDelete(FlImageBean bean) throws DAOException {
            for(TableListener<FlImageBean> listener:listeners){
                listener.afterDelete(bean);
            }
        }
    
        public boolean isEmpty() {
            return listeners.isEmpty();
        }
    
        public boolean contains(TableListener<FlImageBean> o) {
            return listeners.contains(o);
        }
    
        public synchronized boolean add(TableListener<FlImageBean> e) {
            if(null == e)
                throw new NullPointerException();
            return listeners.add(e);
        }
    
        public synchronized boolean remove(TableListener<FlImageBean> o) {
            return null == o? false : listeners.remove(o);
        }
    
        public synchronized void clear() {
            listeners.clear();
        }    
    }
    private final ListenerContainer listenerContainer = new ListenerContainer();

    //35
    @Override
    public void registerListener(TableListener<FlImageBean> listener)
    {
        this.listenerContainer.add(listener);
    }

    /**
     * remove listener.
     */
    //36
    @Override
    public void unregisterListener(TableListener<FlImageBean> listener)
    {
        this.listenerContainer.remove(listener);
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    //43
    @Override
    public boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    @Override    
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<FlImageBean> action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
   
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    class DeleteBeanAction extends Action.Adapter<FlImageBean>{
        private final AtomicInteger count=new AtomicInteger(0);
        @Override
        public void call(FlImageBean bean) throws DAOException {
                FlImageManager.this.delete(bean);
                count.incrementAndGet();
        }
        int getCount(){
            return count.get();
        }
    }
    /**
     * return a primary key list from {@link FlImageBean} array
     * @param array
     */
    //45
    public List<String> toPrimaryKeyList(FlImageBean... array){        
        if(null == array)return new java.util.ArrayList<String>();
        java.util.ArrayList<String> list = new java.util.ArrayList<String>(array.length);
        for(FlImageBean bean:array){
            list.add(null == bean ? null : bean.getMd5());
        }
        return list;
    }
    /**
     * return a primary key list from {@link FlImageBean} collection
     * @param array
     */
    //46
    public List<String> toPrimaryKeyList(java.util.Collection<FlImageBean> collection){        
        if(null == collection)return new java.util.ArrayList<String>();
        java.util.ArrayList<String> list = new java.util.ArrayList<String>(collection.size());
        for(FlImageBean bean:collection){
            list.add(null == bean ? null : bean.getMd5());
        }
        return list;
    }
}
