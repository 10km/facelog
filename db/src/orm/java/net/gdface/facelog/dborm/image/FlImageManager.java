// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.image;
import java.lang.ref.SoftReference;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.Collection;
import java.util.concurrent.Callable;
import java.util.LinkedList;

import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.face.FlFaceBean;
import net.gdface.facelog.dborm.face.FlFaceManager;
import net.gdface.facelog.dborm.person.FlPersonBean;
import net.gdface.facelog.dborm.person.FlPersonManager;
import net.gdface.facelog.dborm.device.FlDeviceBean;
import net.gdface.facelog.dborm.device.FlDeviceManager;
import net.gdface.facelog.dborm.image.FlStoreBean;
import net.gdface.facelog.dborm.image.FlStoreManager;

/**
 * Handles database calls (save, load, count, etc...) for the fl_image table.
 * @author sql2java
 */
public class FlImageManager implements TableManager<FlImageBeanBase,FlImageBean>
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the md5 field.
     */
    public static final int ID_MD5 = 0;

    /**
     * Identify the format field.
     */
    public static final int ID_FORMAT = 1;

    /**
     * Identify the width field.
     */
    public static final int ID_WIDTH = 2;

    /**
     * Identify the height field.
     */
    public static final int ID_HEIGHT = 3;

    /**
     * Identify the depth field.
     */
    public static final int ID_DEPTH = 4;

    /**
     * Identify the face_num field.
     */
    public static final int ID_FACE_NUM = 5;

    /**
     * Identify the thumb_md5 field.
     */
    public static final int ID_THUMB_MD5 = 6;

    /**
     * Identify the device_id field.
     */
    public static final int ID_DEVICE_ID = 7;

    /**
     * Tablename.
     */
		public static final String TABLE_NAME="fl_image";
    /**
     * Contains all the full fields of the fl_image table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
        "fl_image.md5"
        ,"fl_image.format"
        ,"fl_image.width"
        ,"fl_image.height"
        ,"fl_image.depth"
        ,"fl_image.face_num"
        ,"fl_image.thumb_md5"
        ,"fl_image.device_id"
    };

    /**
     * Contains all the fields of the fl_image table.
     */
    public static final String[] FIELD_NAMES =
    {
        "md5"
        ,"format"
        ,"width"
        ,"height"
        ,"depth"
        ,"face_num"
        ,"thumb_md5"
        ,"device_id"
    };
   /**
     * Contains all the primarykey fields of the fl_image table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "md5"
    };
    /**
     * Field that contains the comma separated fields of the fl_image table.
     */
    public static final String ALL_FULL_FIELDS = "fl_image.md5"
                            + ",fl_image.format"
                            + ",fl_image.width"
                            + ",fl_image.height"
                            + ",fl_image.depth"
                            + ",fl_image.face_num"
                            + ",fl_image.thumb_md5"
                            + ",fl_image.device_id";

    /**
     * Field that contains the comma separated fields of the fl_image table.
     */
    public static final String ALL_FIELDS = "md5"
                            + ",format"
                            + ",width"
                            + ",height"
                            + ",depth"
                            + ",face_num"
                            + ",thumb_md5"
                            + ",device_id";

    public static interface Action{
          void call(FlImageBean bean);
          FlImageBean getBean();
     }

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }
	
    private static FlImageManager singleton = new FlImageManager();

    /**
     * Get the FlImageManager singleton.
     *
     * @return FlImageManager
     */
    public static FlImageManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlImageBean instance.
     *
     * @return the new FlImageBean
     */
    public FlImageBean createBean()
    {
        return new FlImageBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link FlImageBean} from the fl_image using primary key fields.
     *
     * @param md5 String - PK# 1
     * @return a unique FlImageBean or {@code null} if not found
     * @throws DAOException
     */
    //1
    public FlImageBean loadByPrimaryKey(String md5) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + ALL_FIELDS + " FROM fl_image WHERE md5=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (md5 == null) { ps.setNull(1, Types.CHAR); } else { ps.setString(1, md5); }
            List<FlImageBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (0 == pReturn.size()) {
                return null;
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Loads a {@link FlImageBean} from the fl_image using primary key fields of {@code bean}.
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link FlImageBean} with primary key fields
     * @return a unique {@link FlImageBean} or {@code null} if not found
     * @throws DAOException
     * @see {@link #loadByPrimaryKey(String md5)}
     */
    //1.2
    public FlImageBean loadByPrimaryKey(FlImageBeanBase bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey( bean.getMd5());
    }
    /**
     * Returns true if this fl_image contains row with primary key fields.
     * @author guyadong
     * @param md5 String - PK# 1
     * @throws DAOException
     * @see #loadByPrimaryKey(String md5)
     */
    //1.3
    public boolean existsPrimaryKey(String md5) throws DAOException
    {
        return null!=loadByPrimaryKey(md5 );
    }

    /**
     * Returns true if this fl_image contains row specified by primary key fields of {@link FlImageBean}.<br>
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link FlImageBean} with primary key fields
     * @return 
     * @throws DAOException
     * @see {@link #loadByPrimaryKey(FlImageBeanBase bean)}
     */
    //1.4
    @Override
    public boolean existsPrimaryKey(FlImageBeanBase bean) throws DAOException
    {
        return null!=loadByPrimaryKey(bean);
    }
    
    /**
     * Delete row according to its primary keys.
     *
     * @param md5 String - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(String md5) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            FlImageBean bean=createBean();
            bean.setMd5(md5);
            this.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_image WHERE md5=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (md5 == null) { ps.setNull(1, Types.CHAR); } else { ps.setString(1, md5); }
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
    /**
     * Delete row according to Primary Key fileds of the parameter{@code bean},
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the FlImageBean with primary key fields
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #deleteByPrimaryKey(String md5)}
     */
    //2.1
    public int deleteByPrimaryKey(FlImageBeanBase bean) throws DAOException
    {
        return bean==null?0:deleteByPrimaryKey( bean.getMd5());
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Object[]> IMPORT_METHODS=new java.util.HashMap<String,Object[]>(){
        private static final long serialVersionUID = 1L;
    {        
    put("impFlFacebyImgMd5",new Object[]{"getFlFaceBeansByImgMd5","setFlFaceBeansByImgMd5",FlFaceBean[].class});
    put("impFlPersonbyPhotoId",new Object[]{"getFlPersonBeansByPhotoId","setFlPersonBeansByPhotoId",FlPersonBean[].class});
    }} ;
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlFacebyImgMd5 -> FlFaceBean</li>
     *     <li> impFlPersonbyPhotoId -> FlPersonBean</li>
     * </ul>
     * @param bean the {@link FlImageBean} object to use
     * @param fkName valid values: impFlFacebyImgMd5,impFlPersonbyPhotoId
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T[] getImportedBeans(FlImageBean bean,String fkName)throws DAOException{
        Object[] params = IMPORT_METHODS.get(fkName);
        if(null == params)
            throw new IllegalArgumentException("invalid fkName: " + fkName);
        try {
            return (T[]) this.getClass().getMethod((String)params[0],bean.getClass()).invoke(this,bean);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlFacebyImgMd5 -> FlFaceBean</li>
     *     <li> impFlPersonbyPhotoId -> FlPersonBean</li>
     * </ul>
     * @param bean the {@link FlImageBean} object to use
     * @param fkName valid values: impFlFacebyImgMd5,impFlPersonbyPhotoId
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> List<T> getImportedBeansAsList(FlImageBean bean,String fkName)throws DAOException{
        Object[] params = IMPORT_METHODS.get(fkName);
        if(null==params)
            throw new IllegalArgumentException("invalid fkName " + fkName);
        try {
            return (List<T>) this.getClass().getMethod((String)params[0]+"AsList",bean.getClass()).invoke(this,bean);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> impFlFacebyImgMd5 -> FlFaceBean</li>
     *     <li> impFlPersonbyPhotoId -> FlPersonBean</li>
     * </ul>
     * @param bean the {@link FlImageBean} object to use
     * @param importedBeans the FlPersonBean array to associate to the {@link FlImageBean}
     * @param fkName valid values: impFlFacebyImgMd5,impFlPersonbyPhotoId
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T[] setImportedBeans(FlImageBean bean,T[] importedBeans,String fkName)throws DAOException{
        Object[] params = IMPORT_METHODS.get(fkName);
        if(null==params)
            throw new IllegalArgumentException("invalid fkName " + fkName);
        if(null==bean || null==importedBeans)
            throw new NullPointerException();
        Class<?> resultClass = (Class<?>)params[2];
        if(!resultClass.isAssignableFrom(importedBeans.getClass()) ){
            throw new IllegalArgumentException("the argument 'importedBeans' be invalid type,expect type:" + resultClass.getName());
        }
        try {            
            return (T[]) this.getClass().getMethod((String)params[1],bean.getClass(),resultClass).invoke(this,bean,importedBeans);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T>
     * <ul>
     *     <li> impFlFacebyImgMd5 -> FlFaceBean Collection</li>
     *     <li> impFlPersonbyPhotoId -> FlPersonBean Collection</li>
     * </ul>
     * @param bean the {@link FlImageBean} object to use
     * @param importedBeans the <T> object to associate to the {@link FlImageBean}
     * @param fkName valid values: impFlFacebyImgMd5,impFlPersonbyPhotoId
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <C extends Collection<?>> C setImportedBeans(FlImageBean bean,C importedBeans,String fkName)throws DAOException{
        Object[] params = IMPORT_METHODS.get(fkName);
        if(null==params)
            throw new IllegalArgumentException("invalid fkName " + fkName);
        if(null==bean || null==importedBeans)
            throw new NullPointerException();
        try {            
            return (C) this.getClass().getMethod((String)params[1],bean.getClass(),Object.class).invoke(this,bean,importedBeans);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FlFaceBean} object from the fl_face.img_md5 field.<BR>
     * FK_NAME : fl_face_ibfk_1 
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlFaceBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlFaceBean[] getFlFaceBeansByImgMd5(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlFaceBean other = FlFaceManager.getInstance().createBean();
        other.setImgMd5(bean.getMd5());
        return FlFaceManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Retrieves the {@link FlFaceBean} object from fl_face.img_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlFaceBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlFaceBean> getFlFaceBeansByImgMd5AsList(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlFaceBean other = FlFaceManager.getInstance().createBean();
        other.setImgMd5(bean.getMd5());
        return FlFaceManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * set  the {@link FlFaceBean} object array associate to FlImageBean by the fl_face.img_md5 field.<BR>
     * FK_NAME : fl_face_ibfk_1 
     * @param bean the referenced {@link FlImageBean}
     * @param importedBeans imported beans from fl_face
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlFaceManager#setReferencedByImgMd5(FlFaceBean, FlImageBean)
     */
    //3.3 SET IMPORTED
    public FlFaceBean[] setFlFaceBeansByImgMd5(FlImageBean bean , FlFaceBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlFaceBean importBean : importedBeans ){
                FlFaceManager.getInstance().setReferencedByImgMd5(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlFaceBean} object collection associate to FlImageBean by the fl_face.img_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param bean the referenced {@link FlImageBean} 
     * @param importedBeans imported beans from fl_face 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlFaceManager#setReferencedByImgMd5(FlFaceBean, FlImageBean)
     */
    //3.4 SET IMPORTED
    public <C extends Collection<FlFaceBean>> C setFlFaceBeansByImgMd5(FlImageBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlFaceBean importBean : importedBeans ){
                FlFaceManager.getInstance().setReferencedByImgMd5(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Retrieves the {@link FlPersonBean} object from the fl_person.photo_id field.<BR>
     * FK_NAME : fl_person_ibfk_1 
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlPersonBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlPersonBean[] getFlPersonBeansByPhotoId(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlPersonBean other = FlPersonManager.getInstance().createBean();
        other.setPhotoId(bean.getMd5());
        return FlPersonManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Retrieves the {@link FlPersonBean} object from fl_person.photo_id field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlPersonBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlPersonBean> getFlPersonBeansByPhotoIdAsList(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlPersonBean other = FlPersonManager.getInstance().createBean();
        other.setPhotoId(bean.getMd5());
        return FlPersonManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * set  the {@link FlPersonBean} object array associate to FlImageBean by the fl_person.photo_id field.<BR>
     * FK_NAME : fl_person_ibfk_1 
     * @param bean the referenced {@link FlImageBean}
     * @param importedBeans imported beans from fl_person
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlPersonManager#setReferencedByPhotoId(FlPersonBean, FlImageBean)
     */
    //3.3 SET IMPORTED
    public FlPersonBean[] setFlPersonBeansByPhotoId(FlImageBean bean , FlPersonBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlPersonBean importBean : importedBeans ){
                FlPersonManager.getInstance().setReferencedByPhotoId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlPersonBean} object collection associate to FlImageBean by the fl_person.photo_id field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param bean the referenced {@link FlImageBean} 
     * @param importedBeans imported beans from fl_person 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlPersonManager#setReferencedByPhotoId(FlPersonBean, FlImageBean)
     */
    //3.4 SET IMPORTED
    public <C extends Collection<FlPersonBean>> C setFlPersonBeansByPhotoId(FlImageBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlPersonBean importBean : importedBeans ){
                FlPersonManager.getInstance().setReferencedByPhotoId(importBean , bean);
            }
        }
        return importedBeans;
    }



    /**
     * Save the FlImageBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlImageBean} bean to be saved
     * @param refFlDevicebyDeviceId the {@link FlDeviceBean} bean referenced by {@link FlImageBean} 
     * @param refFlStorebyMd5 the {@link FlStoreBean} bean referenced by {@link FlImageBean} 
     * @param refFlStorebyThumbMd5 the {@link FlStoreBean} bean referenced by {@link FlImageBean} 
     * @param impFlFacebyImgMd5 the {@link FlFaceBean} bean refer to {@link FlImageBean} 
     * @param impFlPersonbyPhotoId the {@link FlPersonBean} bean refer to {@link FlImageBean} 
     * @return the inserted or updated {@link FlImageBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public FlImageBean save(FlImageBean bean
        , FlDeviceBean refFlDevicebyDeviceId , FlStoreBean refFlStorebyMd5 , FlStoreBean refFlStorebyThumbMd5 
        , FlFaceBean[] impFlFacebyImgMd5 , FlPersonBean[] impFlPersonbyPhotoId ) throws DAOException
    {
        if(null == bean) return null;
        if( null != refFlDevicebyDeviceId) {
            refFlDevicebyDeviceId = FlDeviceManager.getInstance().save( refFlDevicebyDeviceId );
            bean.setDeviceId(refFlDevicebyDeviceId.getId()); 
            bean.setReferencedByDeviceId(refFlDevicebyDeviceId);
        }
        if( null != refFlStorebyMd5) {
            refFlStorebyMd5 = FlStoreManager.getInstance().save( refFlStorebyMd5 );
            bean.setMd5(refFlStorebyMd5.getMd5()); 
            bean.setReferencedByMd5(refFlStorebyMd5);
        }
        if( null != refFlStorebyThumbMd5) {
            refFlStorebyThumbMd5 = FlStoreManager.getInstance().save( refFlStorebyThumbMd5 );
            bean.setThumbMd5(refFlStorebyThumbMd5.getMd5()); 
            bean.setReferencedByThumbMd5(refFlStorebyThumbMd5);
        }
        bean = this.save( bean );
        if( null != impFlFacebyImgMd5) {
            for ( FlFaceBean imp : impFlFacebyImgMd5 ){
                imp.setImgMd5(bean.getMd5()); 
                imp.setReferencedByImgMd5(bean);
                FlFaceManager.getInstance().save( imp );
            }
        }
        if( null != impFlPersonbyPhotoId) {
            for ( FlPersonBean imp : impFlPersonbyPhotoId ){
                imp.setPhotoId(bean.getMd5()); 
                imp.setReferencedByPhotoId(bean);
                FlPersonManager.getInstance().save( imp );
            }
        }
        return bean;
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(FlImageBean , FlDeviceBean , FlStoreBean , FlStoreBean , FlFaceBean[] , FlPersonBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public FlImageBean saveAsTransaction(final FlImageBean bean
        ,final FlDeviceBean refFlDevicebyDeviceId ,final FlStoreBean refFlStorebyMd5 ,final FlStoreBean refFlStorebyThumbMd5 
        ,final FlFaceBean[] impFlFacebyImgMd5 ,final FlPersonBean[] impFlPersonbyPhotoId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlImageBean>(){
            @Override
            public FlImageBean call() throws Exception {
                return save(bean , refFlDevicebyDeviceId , refFlStorebyMd5 , refFlStorebyThumbMd5 , impFlFacebyImgMd5 , impFlPersonbyPhotoId );
            }});
    }
    /**
     * Save the FlImageBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlImageBean} bean to be saved
     * @param refFlDevicebyDeviceId the {@link FlDeviceBean} bean referenced by {@link FlImageBean} 
     * @param refFlStorebyMd5 the {@link FlStoreBean} bean referenced by {@link FlImageBean} 
     * @param refFlStorebyThumbMd5 the {@link FlStoreBean} bean referenced by {@link FlImageBean} 
     * @param impFlFacebyImgMd5 the {@link FlFaceBean} bean refer to {@link FlImageBean} 
     * @param impFlPersonbyPhotoId the {@link FlPersonBean} bean refer to {@link FlImageBean} 
     * @return the inserted or updated {@link FlImageBean} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public FlImageBean save(FlImageBean bean
        , FlDeviceBean refFlDevicebyDeviceId , FlStoreBean refFlStorebyMd5 , FlStoreBean refFlStorebyThumbMd5 
        , Collection<FlFaceBean> impFlFacebyImgMd5 , Collection<FlPersonBean> impFlPersonbyPhotoId ) throws DAOException
    {
        if(null == bean) return null;
        this.setReferencedByDeviceId(bean,refFlDevicebyDeviceId);
        this.setReferencedByMd5(bean,refFlStorebyMd5);
        this.setReferencedByThumbMd5(bean,refFlStorebyThumbMd5);
        bean = this.save( bean );
        this.setFlFaceBeansByImgMd5(bean,impFlFacebyImgMd5);
        FlFaceManager.getInstance().save( impFlFacebyImgMd5 );
        this.setFlPersonBeansByPhotoId(bean,impFlPersonbyPhotoId);
        FlPersonManager.getInstance().save( impFlPersonbyPhotoId );
        return bean;
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save(FlImageBean , FlDeviceBean , FlStoreBean , FlStoreBean , Collection , Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public FlImageBean saveAsTransaction(final FlImageBean bean
        ,final FlDeviceBean refFlDevicebyDeviceId ,final FlStoreBean refFlStorebyMd5 ,final FlStoreBean refFlStorebyThumbMd5 
        ,final  Collection<FlFaceBean> impFlFacebyImgMd5 ,final  Collection<FlPersonBean> impFlPersonbyPhotoId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlImageBean>(){
            @Override
            public FlImageBean call() throws Exception {
                return save(bean , refFlDevicebyDeviceId , refFlStorebyMd5 , refFlStorebyThumbMd5 , impFlFacebyImgMd5 , impFlPersonbyPhotoId );
            }});
    }
      //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Object[]> REF_METHODS=new java.util.HashMap<String,Object[]>(){
        private static final long serialVersionUID = 1L;
    {        
    put("refFlDevicebyDeviceId",new Object[]{"getReferencedByDeviceId","setReferencedByDeviceId",FlDeviceBean.class});
    put("refFlStorebyMd5",new Object[]{"getReferencedByMd5","setReferencedByMd5",FlStoreBean.class});
    put("refFlStorebyThumbMd5",new Object[]{"getReferencedByThumbMd5","setReferencedByThumbMd5",FlStoreBean.class});
    }} ;
    /**
     * Retrieves the bean object referenced by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> refFlDevicebyDeviceId -> FlDeviceBean</li>
     *     <li> refFlStorebyMd5 -> FlStoreBean</li>
     *     <li> refFlStorebyThumbMd5 -> FlStoreBean</li>
     * </ul>
     * @param bean the {@link FlImageBean} object to use
     * @param fkName valid values: refFlDevicebyDeviceId,refFlStorebyMd5,refFlStorebyThumbMd5
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T getReferencedBean(FlImageBean bean,String fkName)throws DAOException{
        Object[] params = REF_METHODS.get(fkName);
        if(null==params)
            throw new IllegalArgumentException("invalid fkName " + fkName);
        try {
            return (T) this.getClass().getMethod((String)params[0],bean.getClass()).invoke(this,bean);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
    /**
     * Associates the {@link FlImageBean} object to the bean object by fkName field.<br>
     * 
     * @param <T>
     * <ul>
     *     <li> refFlDevicebyDeviceId -> FlDeviceBean</li>
     *     <li> refFlStorebyMd5 -> FlStoreBean</li>
     *     <li> refFlStorebyThumbMd5 -> FlStoreBean</li>
     * </ul>
     * @param bean the {@link FlImageBean} object to use
     * @param beanToSet the <T> object to associate to the {@link FlImageBean}
     * @param fkName valid values: refFlDevicebyDeviceId,refFlStorebyMd5,refFlStorebyThumbMd5
     * @return always beanToSet saved
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T setReferencedBean(FlImageBean bean,T beanToSet,String fkName)throws DAOException{
        Object[] params = REF_METHODS.get(fkName);
        if(null==params)
            throw new IllegalArgumentException("invalid fkName " + fkName);
        Class<?> resultClass = (Class<?>)params[2];
        if(null != beanToSet && !resultClass.isAssignableFrom(beanToSet.getClass()) ){
            throw new IllegalArgumentException("the argument 'beanToSet' be invalid type,expect type:" + resultClass.getName());
        }
        try {            
            return (T) this.getClass().getMethod((String)params[1],bean.getClass(),resultClass).invoke(this,bean,beanToSet);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the {@link FlDeviceBean} object referenced by {@link FlImageBean#getDeviceId}() field.<br>
     * FK_NAME : fl_image_ibfk_3
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlDeviceBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public FlDeviceBean getReferencedByDeviceId(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlDeviceBean other = FlDeviceManager.getInstance().createBean();
        other.setId(bean.getDeviceId()); 
        bean.setReferencedByDeviceId(FlDeviceManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getReferencedByDeviceId();
    }

    /**
     * Associates the {@link FlImageBean} object to the {@link FlDeviceBean} object by {@link FlImageBean#getDeviceId}() field.
     *
     * @param bean the {@link FlImageBean} object to use
     * @param beanToSet the {@link FlDeviceBean} object to associate to the {@link FlImageBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlDeviceBean setReferencedByDeviceId(FlImageBean bean, FlDeviceBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlDeviceManager.getInstance().save(beanToSet);
            bean.setReferencedByDeviceId(beanToSet);
            if( null == beanToSet){
                bean.setDeviceId(null);
            }else{
                bean.setDeviceId(beanToSet.getId());
            }
        }
        return beanToSet;
    }

    /**
     * Retrieves the {@link FlStoreBean} object referenced by {@link FlImageBean#getMd5}() field.<br>
     * FK_NAME : fl_image_ibfk_1
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlStoreBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public FlStoreBean getReferencedByMd5(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlStoreBean other = FlStoreManager.getInstance().createBean();
        other.setMd5(bean.getMd5()); 
        bean.setReferencedByMd5(FlStoreManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getReferencedByMd5();
    }

    /**
     * Associates the {@link FlImageBean} object to the {@link FlStoreBean} object by {@link FlImageBean#getMd5}() field.
     *
     * @param bean the {@link FlImageBean} object to use
     * @param beanToSet the {@link FlStoreBean} object to associate to the {@link FlImageBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlStoreBean setReferencedByMd5(FlImageBean bean, FlStoreBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlStoreManager.getInstance().save(beanToSet);
            bean.setReferencedByMd5(beanToSet);
            if( null == beanToSet){
                bean.setMd5(null);
            }else{
                bean.setMd5(beanToSet.getMd5());
            }
        }
        return beanToSet;
    }

    /**
     * Retrieves the {@link FlStoreBean} object referenced by {@link FlImageBean#getThumbMd5}() field.<br>
     * FK_NAME : fl_image_ibfk_2
     * @param bean the {@link FlImageBean}
     * @return the associated {@link FlStoreBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public FlStoreBean getReferencedByThumbMd5(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlStoreBean other = FlStoreManager.getInstance().createBean();
        other.setMd5(bean.getThumbMd5()); 
        bean.setReferencedByThumbMd5(FlStoreManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getReferencedByThumbMd5();
    }

    /**
     * Associates the {@link FlImageBean} object to the {@link FlStoreBean} object by {@link FlImageBean#getThumbMd5}() field.
     *
     * @param bean the {@link FlImageBean} object to use
     * @param beanToSet the {@link FlStoreBean} object to associate to the {@link FlImageBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlStoreBean setReferencedByThumbMd5(FlImageBean bean, FlStoreBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlStoreManager.getInstance().save(beanToSet);
            bean.setReferencedByThumbMd5(beanToSet);
            if( null == beanToSet){
                bean.setThumbMd5(null);
            }else{
                bean.setThumbMd5(beanToSet.getMd5());
            }
        }
        return beanToSet;
    }

    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from fl_image.
     *
     * @return an array of FlImageManager bean
     * @throws DAOException
     */
    //5
    public FlImageBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }
    /**
     * Loads each row from fl_image and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //5-1
    public int loadAll(Action action) throws DAOException
    {
        return this.loadUsingTemplate(null,action);
    }
    /**
     * Loads all the rows from fl_image.
     *
     * @return a list of FlImageManager bean
     * @throws DAOException
     */
    //5-2
    public List<FlImageBean> loadAllAsList() throws DAOException
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from fl_image, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of FlImageManager bean
     * @throws DAOException
     */
    //6
    public FlImageBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }
    /**
     *  Loads the given number of rows from fl_image, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //6-1
    public int loadAll(int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows,action);
    }
    /**
     * Loads the given number of rows from fl_image, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlImageManager bean
     * @throws DAOException
     */
    //6-2
    public List<FlImageBean> loadAllAsList(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of FlImageBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //7
    public FlImageBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, (int[])null);
    }
    /**
     * Retrieves a list of FlImageBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //7
    public List<FlImageBean> loadByWhereAsList(String where) throws DAOException
    {
        return this.loadByWhereAsList(where, null);
    }
    /**
     * Retrieves each row of FlImageBean given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //7-1
    public int loadByWhere(String where,Action action) throws DAOException
    {
        return this.loadByWhere(where, null,action);
    }
    /**
     * Retrieves an array of FlImageBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //8
    public FlImageBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of FlImageBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //8
    public List<FlImageBean> loadByWhereAsList(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }
    /**
     * Retrieves each row of FlImageBean given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //8-1
    public int loadByWhere(String where, int[] fieldList,Action action) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1,action);
    }

    /**
     * Retrieves an array of FlImageBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //9
    public FlImageBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return (FlImageBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new FlImageBean[0]);
    }
    /**
     * Retrieves each row of  FlImageBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //9-1
    public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
    }

    /**
     * Retrieves a list of FlImageBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //9-2
    public List<FlImageBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByWhereForAction(where,fieldList,startRow,numRows,action);              
        return action.getList();
    }
    /**
     * Retrieves each row of FlImageBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //9-3
    public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        String sql=createSqlString(fieldList, where);
        // System.out.println("loadByWhere: " + sql);
        return this.loadBySqlForAction(sql, null, fieldList, startRow, numRows, action);
    }

    /**
     * Deletes all rows from fl_image table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }

    /**
     * Deletes rows from the fl_image table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_image " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the {@link FlImageBean} bean into the database.
     *
     * @param bean the {@link FlImageBean} bean to be saved
     * @return the inserted or updated bean,or null if bean is null
     * @throws DAOException
     */
    //12
    public FlImageBean save(FlImageBean bean) throws DAOException
    {
        if(null == bean)return null;
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the {@link FlImageBean} bean into the database.
     * 
     * @param bean the {@link FlImageBean} bean to be saved
     * @return the inserted bean or null if bean is null
     * @throws DAOException
     */
    //13
    public FlImageBean insert(FlImageBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_image (");

            if (bean.isMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("md5");
                _dirtyCount++;
            }

            if (bean.isFormatModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("format");
                _dirtyCount++;
            }

            if (bean.isWidthModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("width");
                _dirtyCount++;
            }

            if (bean.isHeightModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("height");
                _dirtyCount++;
            }

            if (bean.isDepthModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("depth");
                _dirtyCount++;
            }

            if (bean.isFaceNumModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_num");
                _dirtyCount++;
            }

            if (bean.isThumbMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("thumb_md5");
                _dirtyCount++;
            }

            if (bean.isDeviceIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("device_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the {@link FlImageBean} bean record in the database according to the changes.
     *
     * @param bean the {@link FlImageBean} bean to be updated
     * @return the updated bean or null if bean is null
     * @throws DAOException
     */
    //14
    public FlImageBean update(FlImageBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_image SET ");
            boolean useComma=false;

            if (bean.isMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("md5=?");
            }

            if (bean.isFormatModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("format=?");
            }

            if (bean.isWidthModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("width=?");
            }

            if (bean.isHeightModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("height=?");
            }

            if (bean.isDepthModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("depth=?");
            }

            if (bean.isFaceNumModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_num=?");
            }

            if (bean.isThumbMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("thumb_md5=?");
            }

            if (bean.isDeviceIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("device_id=?");
            }
            sql.append(" WHERE ");
            sql.append("md5=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of {@link FlImageBean} bean into the database.
     *
     * @param beans the {@link FlImageBean} bean table to be saved
     * @return the saved {@link FlImageBean} beans or null if beans is null.
     * @throws DAOException
     */
    //15
    public FlImageBean[] save(FlImageBean[] beans) throws DAOException
    {
        if(null != beans){
            for (FlImageBean bean : beans) 
            {
                this.save(bean);
            }
        }
        return beans;
    }

    /**
     * Saves a collection of {@link FlImageBean} beans into the database.
     *
     * @param beans the {@link FlImageBean} bean table to be saved
     * @return the saved {@link FlImageBean} beans or null if beans is null.
     * @throws DAOException
     */
    //15-2
    public <C extends Collection<FlImageBean>>C save(C beans) throws DAOException
    {
        if(null != beans){
            for (FlImageBean bean : beans) 
            {
                this.save(bean);
            }
        }
        return beans;
    }
    /**
     * Saves an array of {@link FlImageBean} bean into the database as transaction.
     *
     * @param beans the {@link FlImageBean} bean table to be saved
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     * @see #save(FlImageBean[])
     */
    //15-3
    public FlImageBean[] saveAsTransaction(final FlImageBean[] beans) throws DAOException {
        return Manager.getInstance().runAsTransaction(new Callable<FlImageBean[]>(){
            @Override
            public FlImageBean[] call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Saves a collection of {@link FlImageBean} bean into the database as transaction.
     *
     * @param beans the {@link FlImageBean} bean table to be saved
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     * @see #save(List)
     */
    //15-4
    public <C extends Collection<FlImageBean>> C saveAsTransaction(final C beans) throws DAOException {
        return Manager.getInstance().runAsTransaction(new Callable<C>(){
            @Override
            public C call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Insert an array of {@link FlImageBean} bean into the database.
     *
     * @param beans the {@link FlImageBean} bean table to be inserted
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     */
    //16
    public FlImageBean[] insert(FlImageBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Insert a collection of {@link FlImageBean} bean into the database.
     *
     * @param beans the {@link FlImageBean} bean table to be inserted
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     */
    //16-2
    public <C extends Collection<FlImageBean>> C insert(C beans) throws DAOException
    {
        return this.save(beans);
    }
    
    /**
     * Insert an array of {@link FlImageBean} beans into the database as transaction.
     *
     * @param beans the {@link {@link FlImageBean}} bean table to be inserted
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     * @see #saveAsTransaction(FlImageBean[])
     */
    //16-3
    public FlImageBean[] insertAsTransaction(FlImageBean[] beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Insert a collection of {@link FlImageBean} bean into the database as transaction.
     *
     * @param beans the {@link FlImageBean} bean table to be inserted
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     * @see #saveAsTransaction(List)
     */
    //16-4
    public <C extends Collection<FlImageBean>> C insertAsTransaction(C beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }


    /**
     * Update an array of {@link FlImageBean} bean into the database.
     *
     * @param beans the {@link FlImageBean} bean table to be inserted
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     */
    //17
    public FlImageBean[] update(FlImageBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Update a collection of {@link FlImageBean} bean into the database.
     *
     * @param beans the {@link FlImageBean} beans table to be inserted
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     */
    //17-2
    public <C extends Collection<FlImageBean>> C update(C beans) throws DAOException
    {
        return this.save(beans);
    }
    
    /**
     * Update an array of {@link FlImageBean} bean into the database as transaction.
     *
     * @param beans the {@link FlImageBean} beans table to be inserted
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     * @see #saveAsTransaction(FlImageBean[])
     */
    //17-3
    public FlImageBean[] updateAsTransaction(FlImageBean[] beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Update a collection of {@link FlImageBean} bean into the database as transaction.
     *
     * @param beans the {@link FlImageBean} beans table to be inserted
     * @return the saved {@link FlImageBean} beans.
     * @throws DAOException
     * @see #saveAsTransaction(List)
     */
    //17-4
    public <C extends Collection<FlImageBean>> C updateAsTransaction(C beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }
    
    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique FlImageBean bean from a template one giving a c
     *
     * @param bean the FlImageBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public FlImageBean loadUniqueUsingTemplate(FlImageBeanBase bean) throws DAOException
    {
         FlImageBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of FlImageBean from a template one.
     *
     * @param bean the FlImageBean template to look for
     * @return all the FlImageBean matching the template
     * @throws DAOException
     */
    //19
    public FlImageBean[] loadUsingTemplate(FlImageBeanBase bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the FlImageBean template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //19-1
    public int loadUsingTemplate(FlImageBeanBase bean,Action action) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1,action);
    }

    /**
     * Loads a list of FlImageBean from a template one.
     *
     * @param bean the FlImageBean template to look for
     * @return all the FlImageBean matching the template
     * @throws DAOException
     */
    //19-2
    public List<FlImageBean> loadUsingTemplateAsList(FlImageBeanBase bean) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of FlImageBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlImageBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the FlImageBean matching the template
     * @throws DAOException
     */
    //20
    public FlImageBean[] loadUsingTemplate(FlImageBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the FlImageBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //20-1
    public int loadUsingTemplate(FlImageBeanBase bean, int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
    }
    /**
     * Loads a list of FlImageBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlImageBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the FlImageBean matching the template
     * @throws DAOException
     */
    //20-2
    public List<FlImageBean> loadUsingTemplateAsList(FlImageBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of FlImageBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlImageBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the FlImageBean matching the template
     * @throws DAOException
     */
    //20-3
    public FlImageBean[] loadUsingTemplate(FlImageBeanBase bean, int startRow, int numRows, int searchType) throws DAOException
    {
    	return (FlImageBean[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new FlImageBean[0]);
    }

    /**
     * Loads a list of FlImageBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlImageBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the FlImageBean matching the template
     * @throws DAOException
     */
    //20-4
    public List<FlImageBean> loadUsingTemplateAsList(FlImageBeanBase beanBase, int startRow, int numRows, int searchType) throws DAOException
    {
        ListAction action = new ListAction();
        loadUsingTemplate(beanBase,null,startRow,numRows,searchType, action);
        return (List<FlImageBean>) action.getList();
        
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the FlImageBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //20-5
    public int loadUsingTemplate(FlImageBeanBase beanBase, int[] fieldList, int startRow, int numRows,int searchType, Action action) throws DAOException
    {
        FlImageBean bean=FlImageBeanBase.toFullBean(beanBase);
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSqlString(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
    /**
     * Deletes rows using a FlImageBean template.
     *
     * @param bean the FlImageBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(FlImageBeanBase beanBase) throws DAOException
    {
        FlImageBean bean=FlImageBeanBase.toFullBean(beanBase);
        if (bean.isMd5Initialized()) {
            return this.deleteByPrimaryKey(bean.getMd5());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_image ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            if(_rows>0)
                this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

     /**
     * Retrieves an array of FlImageBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return an array of FlImageBean
     * @throws DAOException
     */
    public FlImageBean[] loadBydevice_id(Integer deviceId) throws DAOException
    {
        return (FlImageBean[])this.loadBydevice_idAsList(deviceId).toArray(new FlImageBean[0]);
    }
    
    /**
     * Retrieves a list of FlImageBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return a list of FlImageBean
     * @throws DAOException
     */
    public List<FlImageBean> loadBydevice_idAsList(Integer deviceId) throws DAOException
    {
        FlImageBean bean = this.createBean();
        bean.setDeviceId(deviceId);
        return loadUsingTemplateAsList(bean);
    }
     /**
     * Deletes rows using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBydevice_id(Integer deviceId) throws DAOException
    {
        FlImageBean bean = this.createBean();
        bean.setDeviceId(deviceId);
        return deleteUsingTemplate(bean);
    }
    
     /**
     * Retrieves an array of FlImageBean using the thumb_md5 index.
     *
     * @param thumbMd5 the thumb_md5 column's value filter.
     * @return an array of FlImageBean
     * @throws DAOException
     */
    public FlImageBean[] loadBythumb_md5(String thumbMd5) throws DAOException
    {
        return (FlImageBean[])this.loadBythumb_md5AsList(thumbMd5).toArray(new FlImageBean[0]);
    }
    
    /**
     * Retrieves a list of FlImageBean using the thumb_md5 index.
     *
     * @param thumbMd5 the thumb_md5 column's value filter.
     * @return a list of FlImageBean
     * @throws DAOException
     */
    public List<FlImageBean> loadBythumb_md5AsList(String thumbMd5) throws DAOException
    {
        FlImageBean bean = this.createBean();
        bean.setThumbMd5(thumbMd5);
        return loadUsingTemplateAsList(bean);
    }
     /**
     * Deletes rows using the thumb_md5 index.
     *
     * @param thumbMd5 the thumb_md5 column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBythumb_md5(String thumbMd5) throws DAOException
    {
        FlImageBean bean = this.createBean();
        bean.setThumbMd5(thumbMd5);
        return deleteUsingTemplate(bean);
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table fl_image.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table fl_image with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_image " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_image with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlImageBean bean
     *
     * @param bean the FlImageBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(FlImageBeanBase bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific FlImageBean bean , given the start row and number of rows.
     *
     * @param bean the FlImageBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlImageBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific FlImageBean bean given the start row and number of rows and the search type
     *
     * @param bean the FlImageBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlImageBeanBase beanBase, int startRow, int numRows, int searchType) throws DAOException
    {
        FlImageBean bean=FlImageBeanBase.toFullBean(beanBase);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_image");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlImageBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isMd5Modified()) {
                _dirtyCount ++;
                if (bean.getMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isFormatModified()) {
                _dirtyCount ++;
                if (bean.getFormat() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("format IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("format ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isWidthModified()) {
                _dirtyCount ++;
                if (bean.getWidth() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("width IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("width = ?");
                }
            }
            if (bean.isHeightModified()) {
                _dirtyCount ++;
                if (bean.getHeight() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("height IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("height = ?");
                }
            }
            if (bean.isDepthModified()) {
                _dirtyCount ++;
                if (bean.getDepth() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("depth IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("depth = ?");
                }
            }
            if (bean.isFaceNumModified()) {
                _dirtyCount ++;
                if (bean.getFaceNum() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_num IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_num = ?");
                }
            }
            if (bean.isThumbMd5Modified()) {
                _dirtyCount ++;
                if (bean.getThumbMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("thumb_md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("thumb_md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isDeviceIdModified()) {
                _dirtyCount ++;
                if (bean.getDeviceId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("device_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("device_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlImageBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMd5() + "]");
                        if (bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMd5() + "%]");
                        if ( bean.getMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMd5() + "]");
                        if ( bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMd5() + "%]");
                        if (bean.getMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isFormatModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFormat() + "]");
                        if (bean.getFormat() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getFormat()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFormat() + "%]");
                        if ( bean.getFormat()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getFormat() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFormat() + "]");
                        if ( bean.getFormat() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getFormat()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFormat() + "%]");
                        if (bean.getFormat()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getFormat() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isWidthModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getWidth() + "]");
                if (bean.getWidth() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getWidth()); }
            }
            if (bean.isHeightModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getHeight() + "]");
                if (bean.getHeight() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getHeight()); }
            }
            if (bean.isDepthModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getDepth() + "]");
                if (bean.getDepth() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getDepth()); }
            }
            if (bean.isFaceNumModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceNum() + "]");
                if (bean.getFaceNum() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceNum()); }
            }
            if (bean.isThumbMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getThumbMd5() + "]");
                        if (bean.getThumbMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getThumbMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getThumbMd5() + "%]");
                        if ( bean.getThumbMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getThumbMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getThumbMd5() + "]");
                        if ( bean.getThumbMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getThumbMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getThumbMd5() + "%]");
                        if (bean.getThumbMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getThumbMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isDeviceIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getDeviceId() + "]");
                if (bean.getDeviceId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getDeviceId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlImageBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //28
    public FlImageBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
    	return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlImageBean[0]);
    }

    /**
     * decode a resultset in a list of FlImageBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlImageBean table
     * @throws DAOException
     */
    //28-1
    public List<FlImageBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_image on a FlImageBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlImageBean bean
     * @throws DAOException
     */
    //29
    public FlImageBean decodeRow(ResultSet rs,FlImageBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setMd5(rs.getString(1));
            bean.setFormat(rs.getString(2));
            bean.setWidth(Manager.getInteger(rs, 3));
            bean.setHeight(Manager.getInteger(rs, 4));
            bean.setDepth(Manager.getInteger(rs, 5));
            bean.setFaceNum(Manager.getInteger(rs, 6));
            bean.setThumbMd5(rs.getString(7));
            bean.setDeviceId(Manager.getInteger(rs, 8));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_image table on a FlImageBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlImageBean bean
     * @throws DAOException
     */
    //30
    public FlImageBean decodeRow(ResultSet rs, int[] fieldList,FlImageBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_MD5:
                        ++pos;
                        bean.setMd5(rs.getString(pos));
                        break;
                    case ID_FORMAT:
                        ++pos;
                        bean.setFormat(rs.getString(pos));
                        break;
                    case ID_WIDTH:
                        ++pos;
                        bean.setWidth(Manager.getInteger(rs, pos));
                        break;
                    case ID_HEIGHT:
                        ++pos;
                        bean.setHeight(Manager.getInteger(rs, pos));
                        break;
                    case ID_DEPTH:
                        ++pos;
                        bean.setDepth(Manager.getInteger(rs, pos));
                        break;
                    case ID_FACE_NUM:
                        ++pos;
                        bean.setFaceNum(Manager.getInteger(rs, pos));
                        break;
                    case ID_THUMB_MD5:
                        ++pos;
                        bean.setThumbMd5(rs.getString(pos));
                        break;
                    case ID_DEVICE_ID:
                        ++pos;
                        bean.setDeviceId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_image on a FlImageBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlImageBean bean
     * @throws DAOException
     */
    //31
    public FlImageBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlImageBean bean = this.createBean();
        try
        {
            bean.setMd5(rs.getString("md5"));
            bean.setFormat(rs.getString("format"));
            bean.setWidth(Manager.getInteger(rs, "width"));
            bean.setHeight(Manager.getInteger(rs, "height"));
            bean.setDepth(Manager.getInteger(rs, "depth"));
            bean.setFaceNum(Manager.getInteger(rs, "face_num"));
            bean.setThumbMd5(rs.getString("thumb_md5"));
            bean.setDeviceId(Manager.getInteger(rs, "device_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //32
    public FlImageBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //32
    public List<FlImageBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //33
    public FlImageBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlImageBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //33
    public List<FlImageBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //34
    public FlImageBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlImageBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException
     */
    //34-1
    public List<FlImageBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private TableListener<FlImageBean> listener = null;

    /**
     * Registers a unique FlImageListener listener.
     */
    //35
    public void registerListener(TableListener<FlImageBean> listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the FlImageBean bean.
     *
     * @param bean the FlImageBean bean to be saved
     */
    //36
    private void beforeInsert(FlImageBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the FlImageBean bean.
     *
     * @param bean the FlImageBean bean to be saved
     */
    //37
    private void afterInsert(FlImageBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the FlImageBean bean.
     *
     * @param bean the FlImageBean bean to be updated
     */
    //38
    private void beforeUpdate(FlImageBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the FlImageBean bean.
     *
     * @param bean the FlImageBean bean to be updated
     */
    //39
    private void afterUpdate(FlImageBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the FlImageBean bean.
     *
     * @param bean the FlImageBean bean to be deleted
     */
    private void beforeDelete(FlImageBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the FlImageBean bean.
     *
     * @param bean the FlImageBean bean to be deleted
     */
    private void afterDelete(FlImageBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     * @author guyadong
     */
    //43
    public static boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of FlImageBean
     * @throws DAOException 
     */
    public FlImageBean[] loadBySql(String sql, Object[] argList, int[] fieldList) throws DAOException {
        return loadBySqlAsList(sql, argList, fieldList).toArray(new FlImageBean[0]);
    }
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of FlImageBean
     * @throws DAOException
     */
    public List<FlImageBean> loadBySqlAsList(String sql, Object[] argList, int[] fieldList) throws DAOException{
        ListAction action = new ListAction();
        loadBySqlForAction(sql,argList,fieldList,1,-1,action);
        return action.getList();
    }
    /**
     * Load each the elements using a SQL statement specifying a list of fields to be retrieved and dealt by action.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    private int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
    private String createSqlString(int[] fieldList,String where){
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS);
        } else{
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; ++i){
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }            
        }
        sql.append(" FROM fl_image ");
        if(null!=where)
            sql.append(where);
        return sql.toString();
    }
    
    class ListAction implements Action {
        final List<FlImageBean> list;
        protected ListAction(List<FlImageBean> list) {
            if(null==list)
                throw new IllegalArgumentException("list must not be null");
            this.list = list;
        }

        protected ListAction() {
            list=new LinkedList<FlImageBean>();
        }

        public List<FlImageBean> getList() {
            return list;
        }

        @Override
        public void call(FlImageBean bean) {
            list.add(bean);
        }

        @Override
        public FlImageBean getBean() {
            return null;
        }
    }
    public static abstract class NoListAction implements Action {
        SoftReference<FlImageBean> sf=new SoftReference<FlImageBean>(new FlImageBean());
        @Override
        public final FlImageBean getBean() {
            FlImageBean bean = sf.get();
            if(null==bean){
                sf=new SoftReference<FlImageBean>(bean=new FlImageBean());
            }
            return bean.clean();
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    @Override
    public void runAsTransaction(final Runnable fun) throws DAOException{
        Manager.getInstance().runAsTransaction(fun);
    }

}
