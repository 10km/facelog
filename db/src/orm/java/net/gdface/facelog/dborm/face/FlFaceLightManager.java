// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.face;
import java.lang.ref.SoftReference;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.ArrayList;

import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the fl_face_light table.
 * @author sql2java
 */
public class FlFaceLightManager implements TableManager<FlFaceLightBeanBase,FlFaceLightBean>
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the create_time field.
     */
    public static final int ID_CREATE_TIME = 0;

    /**
     * Identify the ext_info field.
     */
    public static final int ID_EXT_INFO = 1;

    /**
     * Identify the angle_roll field.
     */
    public static final int ID_ANGLE_ROLL = 2;

    /**
     * Identify the angle_pitch field.
     */
    public static final int ID_ANGLE_PITCH = 3;

    /**
     * Identify the angle_yaw field.
     */
    public static final int ID_ANGLE_YAW = 4;

    /**
     * Identify the nose_y field.
     */
    public static final int ID_NOSE_Y = 5;

    /**
     * Identify the nose_x field.
     */
    public static final int ID_NOSE_X = 6;

    /**
     * Identify the mouth_y field.
     */
    public static final int ID_MOUTH_Y = 7;

    /**
     * Identify the mouth_x field.
     */
    public static final int ID_MOUTH_X = 8;

    /**
     * Identify the eye_righty field.
     */
    public static final int ID_EYE_RIGHTY = 9;

    /**
     * Identify the eye_rightx field.
     */
    public static final int ID_EYE_RIGHTX = 10;

    /**
     * Identify the eye_lefty field.
     */
    public static final int ID_EYE_LEFTY = 11;

    /**
     * Identify the eye_leftx field.
     */
    public static final int ID_EYE_LEFTX = 12;

    /**
     * Identify the face_height field.
     */
    public static final int ID_FACE_HEIGHT = 13;

    /**
     * Identify the face_width field.
     */
    public static final int ID_FACE_WIDTH = 14;

    /**
     * Identify the face_top field.
     */
    public static final int ID_FACE_TOP = 15;

    /**
     * Identify the face_left field.
     */
    public static final int ID_FACE_LEFT = 16;

    /**
     * Identify the img_md5 field.
     */
    public static final int ID_IMG_MD5 = 17;

    /**
     * Identify the person_id field.
     */
    public static final int ID_PERSON_ID = 18;

    /**
     * Identify the md5 field.
     */
    public static final int ID_MD5 = 19;

    /**
     * Tablename.
     */
		public static final String TABLE_NAME="fl_face_light";
    /**
     * Contains all the full fields of the fl_face_light table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
        "fl_face_light.create_time"
        ,"fl_face_light.ext_info"
        ,"fl_face_light.angle_roll"
        ,"fl_face_light.angle_pitch"
        ,"fl_face_light.angle_yaw"
        ,"fl_face_light.nose_y"
        ,"fl_face_light.nose_x"
        ,"fl_face_light.mouth_y"
        ,"fl_face_light.mouth_x"
        ,"fl_face_light.eye_righty"
        ,"fl_face_light.eye_rightx"
        ,"fl_face_light.eye_lefty"
        ,"fl_face_light.eye_leftx"
        ,"fl_face_light.face_height"
        ,"fl_face_light.face_width"
        ,"fl_face_light.face_top"
        ,"fl_face_light.face_left"
        ,"fl_face_light.img_md5"
        ,"fl_face_light.person_id"
        ,"fl_face_light.md5"
    };

    /**
     * Contains all the fields of the fl_face_light table.
     */
    public static final String[] FIELD_NAMES =
    {
        "create_time"
        ,"ext_info"
        ,"angle_roll"
        ,"angle_pitch"
        ,"angle_yaw"
        ,"nose_y"
        ,"nose_x"
        ,"mouth_y"
        ,"mouth_x"
        ,"eye_righty"
        ,"eye_rightx"
        ,"eye_lefty"
        ,"eye_leftx"
        ,"face_height"
        ,"face_width"
        ,"face_top"
        ,"face_left"
        ,"img_md5"
        ,"person_id"
        ,"md5"
    };
   /**
     * Contains all the primarykey fields of the fl_face_light table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
    };
    /**
     * Field that contains the comma separated fields of the fl_face_light table.
     */
    public static final String ALL_FULL_FIELDS = "fl_face_light.create_time"
                            + ",fl_face_light.ext_info"
                            + ",fl_face_light.angle_roll"
                            + ",fl_face_light.angle_pitch"
                            + ",fl_face_light.angle_yaw"
                            + ",fl_face_light.nose_y"
                            + ",fl_face_light.nose_x"
                            + ",fl_face_light.mouth_y"
                            + ",fl_face_light.mouth_x"
                            + ",fl_face_light.eye_righty"
                            + ",fl_face_light.eye_rightx"
                            + ",fl_face_light.eye_lefty"
                            + ",fl_face_light.eye_leftx"
                            + ",fl_face_light.face_height"
                            + ",fl_face_light.face_width"
                            + ",fl_face_light.face_top"
                            + ",fl_face_light.face_left"
                            + ",fl_face_light.img_md5"
                            + ",fl_face_light.person_id"
                            + ",fl_face_light.md5";

    /**
     * Field that contains the comma separated fields of the fl_face_light table.
     */
    public static final String ALL_FIELDS = "create_time"
                            + ",ext_info"
                            + ",angle_roll"
                            + ",angle_pitch"
                            + ",angle_yaw"
                            + ",nose_y"
                            + ",nose_x"
                            + ",mouth_y"
                            + ",mouth_x"
                            + ",eye_righty"
                            + ",eye_rightx"
                            + ",eye_lefty"
                            + ",eye_leftx"
                            + ",face_height"
                            + ",face_width"
                            + ",face_top"
                            + ",face_left"
                            + ",img_md5"
                            + ",person_id"
                            + ",md5";

    public static interface Action{
          void call(FlFaceLightBean bean);
          FlFaceLightBean getBean();
     }

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }
	
    private static FlFaceLightManager singleton = new FlFaceLightManager();

    /**
     * Get the FlFaceLightManager singleton.
     *
     * @return FlFaceLightManager
     */
    public static FlFaceLightManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlFaceLightBean instance.
     *
     * @return the new FlFaceLightBean
     */
    public FlFaceLightBean createBean()
    {
        return new FlFaceLightBean();
    }

    public FlFaceLightBean loadByPrimaryKey(FlFaceLightBeanBase bean) throws DAOException
    {
        throw new UnsupportedOperationException();
    }
    public int deleteByPrimaryKey(FlFaceLightBeanBase bean) throws DAOException
    {
        throw new UnsupportedOperationException();
    }




    public <T> T getReferencedBean(FlFaceLightBean bean,String fkName)throws DAOException{
        throw new UnsupportedOperationException();
    }
    public <T> T setReferencedBean(FlFaceLightBean bean,T beanToSet,String fkName)throws DAOException{
        throw new UnsupportedOperationException();
    }
     

    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from fl_face_light.
     *
     * @return an array of FlFaceLightManager bean
     * @throws DAOException
     */
    //5
    public FlFaceLightBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }
    /**
     * Loads each row from fl_face_light and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //5-1
    public int loadAll(Action action) throws DAOException
    {
        return this.loadUsingTemplate(null,action);
    }
    /**
     * Loads all the rows from fl_face_light.
     *
     * @return a list of FlFaceLightManager bean
     * @throws DAOException
     */
    //5-2
    public List<FlFaceLightBean> loadAllAsList() throws DAOException
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from fl_face_light, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of FlFaceLightManager bean
     * @throws DAOException
     */
    //6
    public FlFaceLightBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }
    /**
     *  Loads the given number of rows from fl_face_light, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //6-1
    public int loadAll(int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows,action);
    }
    /**
     * Loads the given number of rows from fl_face_light, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlFaceLightManager bean
     * @throws DAOException
     */
    //6-2
    public List<FlFaceLightBean> loadAllAsList(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of FlFaceLightBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting FlFaceLightBean table
     * @throws DAOException
     */
    //7
    public FlFaceLightBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, (int[])null);
    }
    /**
     * Retrieves a list of FlFaceLightBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting FlFaceLightBean table
     * @throws DAOException
     */
    //7
    public List<FlFaceLightBean> loadByWhereAsList(String where) throws DAOException
    {
        return this.loadByWhereAsList(where, null);
    }
    /**
     * Retrieves each row of FlFaceLightBean given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //7-1
    public int loadByWhere(String where,Action action) throws DAOException
    {
        return this.loadByWhere(where, null,action);
    }
    /**
     * Retrieves an array of FlFaceLightBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting FlFaceLightBean table
     * @throws DAOException
     */
    //8
    public FlFaceLightBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of FlFaceLightBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting FlFaceLightBean table
     * @throws DAOException
     */
    //8
    public List<FlFaceLightBean> loadByWhereAsList(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }
    /**
     * Retrieves each row of FlFaceLightBean given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //8-1
    public int loadByWhere(String where, int[] fieldList,Action action) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1,action);
    }

    /**
     * Retrieves an array of FlFaceLightBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlFaceLightBean table
     * @throws DAOException
     */
    //9
    public FlFaceLightBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return (FlFaceLightBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new FlFaceLightBean[0]);
    }
    /**
     * Retrieves each row of  FlFaceLightBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //9-1
    public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
    }

    /**
     * Retrieves a list of FlFaceLightBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlFaceLightBean table
     * @throws DAOException
     */
    //9-2
    public List<FlFaceLightBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByWhereForAction(where,fieldList,startRow,numRows,action);              
        return action.getList();
    }
    /**
     * Retrieves each row of FlFaceLightBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //9-3
    public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        String sql=createSqlString(fieldList, where);
        // System.out.println("loadByWhere: " + sql);
        return this.loadBySqlForAction(sql, null, fieldList, startRow, numRows, action);
    }

    /**
     * Deletes all rows from fl_face_light table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }


    /**
     * Deletes rows from the fl_face_light table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_face_light " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the FlFaceLightBean bean into the database.
     *
     * @param bean the FlFaceLightBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public FlFaceLightBean save(FlFaceLightBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the FlFaceLightBean bean into the database.
     *
     * @param bean the FlFaceLightBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public FlFaceLightBean insert(FlFaceLightBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_face_light (");

            if (bean.isCreateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("create_time");
                _dirtyCount++;
            }

            if (bean.isExtInfoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("ext_info");
                _dirtyCount++;
            }

            if (bean.isAngleRollModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("angle_roll");
                _dirtyCount++;
            }

            if (bean.isAnglePitchModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("angle_pitch");
                _dirtyCount++;
            }

            if (bean.isAngleYawModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("angle_yaw");
                _dirtyCount++;
            }

            if (bean.isNoseYModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("nose_y");
                _dirtyCount++;
            }

            if (bean.isNoseXModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("nose_x");
                _dirtyCount++;
            }

            if (bean.isMouthYModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mouth_y");
                _dirtyCount++;
            }

            if (bean.isMouthXModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mouth_x");
                _dirtyCount++;
            }

            if (bean.isEyeRightyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("eye_righty");
                _dirtyCount++;
            }

            if (bean.isEyeRightxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("eye_rightx");
                _dirtyCount++;
            }

            if (bean.isEyeLeftyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("eye_lefty");
                _dirtyCount++;
            }

            if (bean.isEyeLeftxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("eye_leftx");
                _dirtyCount++;
            }

            if (bean.isFaceHeightModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_height");
                _dirtyCount++;
            }

            if (bean.isFaceWidthModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_width");
                _dirtyCount++;
            }

            if (bean.isFaceTopModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_top");
                _dirtyCount++;
            }

            if (bean.isFaceLeftModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_left");
                _dirtyCount++;
            }

            if (bean.isImgMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("img_md5");
                _dirtyCount++;
            }

            if (bean.isPersonIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("person_id");
                _dirtyCount++;
            }

            if (bean.isMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("md5");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the FlFaceLightBean bean record in the database according to the changes.
     *
     * @param bean the FlFaceLightBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public FlFaceLightBean update(FlFaceLightBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_face_light SET ");
            boolean useComma=false;

            if (bean.isCreateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("create_time=?");
            }

            if (bean.isExtInfoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("ext_info=?");
            }

            if (bean.isAngleRollModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("angle_roll=?");
            }

            if (bean.isAnglePitchModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("angle_pitch=?");
            }

            if (bean.isAngleYawModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("angle_yaw=?");
            }

            if (bean.isNoseYModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("nose_y=?");
            }

            if (bean.isNoseXModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("nose_x=?");
            }

            if (bean.isMouthYModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mouth_y=?");
            }

            if (bean.isMouthXModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mouth_x=?");
            }

            if (bean.isEyeRightyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("eye_righty=?");
            }

            if (bean.isEyeRightxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("eye_rightx=?");
            }

            if (bean.isEyeLeftyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("eye_lefty=?");
            }

            if (bean.isEyeLeftxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("eye_leftx=?");
            }

            if (bean.isFaceHeightModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_height=?");
            }

            if (bean.isFaceWidthModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_width=?");
            }

            if (bean.isFaceTopModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_top=?");
            }

            if (bean.isFaceLeftModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_left=?");
            }

            if (bean.isImgMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("img_md5=?");
            }

            if (bean.isPersonIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("person_id=?");
            }

            if (bean.isMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("md5=?");
            }
            sql.append("");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of FlFaceLightBean beans into the database.
     *
     * @param beans the FlFaceLightBean bean table to be saved
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     */
    //15
    public FlFaceLightBean[] save(FlFaceLightBean[] beans) throws DAOException
    {
        for (FlFaceLightBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a list of FlFaceLightBean beans into the database.
     *
     * @param beans the FlFaceLightBean bean table to be saved
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     */
    //15-2
    public List<FlFaceLightBean> save(List<FlFaceLightBean> beans) throws DAOException
    {
        for (FlFaceLightBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }
    /**
     * Saves an array of FlFaceLightBean beans as transaction into the database.
     *
     * @param beans the FlFaceLightBean bean table to be saved
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     * @see #save(FlFaceLightBean[])
     */
    //15-3
    public FlFaceLightBean[] saveAsTransaction(final FlFaceLightBean[] beans) throws DAOException {
        return Manager.getInstance().runAsTransaction(new Callable<FlFaceLightBean[]>(){
            @Override
            public FlFaceLightBean[] call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Saves a list of FlFaceLightBean beans as transaction into the database.
     *
     * @param beans the FlFaceLightBean bean table to be saved
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     * @see #save(List)
     */
    //15-4
    public List<FlFaceLightBean> saveAsTransaction(final List<FlFaceLightBean> beans) throws DAOException {
        return Manager.getInstance().runAsTransaction(new Callable<List<FlFaceLightBean>>(){
            @Override
            public List<FlFaceLightBean> call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Insert an array of FlFaceLightBean beans into the database.
     *
     * @param beans the FlFaceLightBean bean table to be inserted
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     */
    //16
    public FlFaceLightBean[] insert(FlFaceLightBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Insert a list of FlFaceLightBean beans into the database.
     *
     * @param beans the FlFaceLightBean bean table to be inserted
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     */
    //16-2
    public List<FlFaceLightBean> insert(List<FlFaceLightBean> beans) throws DAOException
    {
        return this.save(beans);
    }
    
    /**
     * Insert an array of FlFaceLightBean beans as transaction into the database.
     *
     * @param beans the FlFaceLightBean bean table to be inserted
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     * @see #saveAsTransaction(FlFaceLightBean[])
     */
    //16-3
    public FlFaceLightBean[] insertAsTransaction(FlFaceLightBean[] beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Insert a list of FlFaceLightBean beans as transaction into the database.
     *
     * @param beans the FlFaceLightBean bean table to be inserted
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     * @see #saveAsTransaction(List)
     */
    //16-4
    public List<FlFaceLightBean> insertAsTransaction(List<FlFaceLightBean> beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }


    /**
     * Updates an array of FlFaceLightBean beans into the database.
     *
     * @param beans the FlFaceLightBean bean table to be inserted
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     */
    //17
    public FlFaceLightBean[] update(FlFaceLightBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates a list of FlFaceLightBean beans into the database.
     *
     * @param beans the FlFaceLightBean bean table to be inserted
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     */
    //17-2
    public List<FlFaceLightBean> update(List<FlFaceLightBean> beans) throws DAOException
    {
        return this.save(beans);
    }
    
    /**
     * Updates an array of FlFaceLightBean beans as transaction into the database.
     *
     * @param beans the FlFaceLightBean bean table to be inserted
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     * @see #saveAsTransaction(FlFaceLightBean[])
     */
    //17-3
    public FlFaceLightBean[] updateAsTransaction(FlFaceLightBean[] beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Updates a list of FlFaceLightBean beans as transaction into the database.
     *
     * @param beans the FlFaceLightBean bean table to be inserted
     * @return the saved FlFaceLightBean array.
     * @throws DAOException
     * @see #saveAsTransaction(List)
     */
    //17-4
    public List<FlFaceLightBean> updateAsTransaction(List<FlFaceLightBean> beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }
    
    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique FlFaceLightBean bean from a template one giving a c
     *
     * @param bean the FlFaceLightBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public FlFaceLightBean loadUniqueUsingTemplate(FlFaceLightBeanBase bean) throws DAOException
    {
         FlFaceLightBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of FlFaceLightBean from a template one.
     *
     * @param bean the FlFaceLightBean template to look for
     * @return all the FlFaceLightBean matching the template
     * @throws DAOException
     */
    //19
    public FlFaceLightBean[] loadUsingTemplate(FlFaceLightBeanBase bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the FlFaceLightBean template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //19-1
    public int loadUsingTemplate(FlFaceLightBeanBase bean,Action action) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1,action);
    }

    /**
     * Loads a list of FlFaceLightBean from a template one.
     *
     * @param bean the FlFaceLightBean template to look for
     * @return all the FlFaceLightBean matching the template
     * @throws DAOException
     */
    //19-2
    public List<FlFaceLightBean> loadUsingTemplateAsList(FlFaceLightBeanBase bean) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of FlFaceLightBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlFaceLightBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the FlFaceLightBean matching the template
     * @throws DAOException
     */
    //20
    public FlFaceLightBean[] loadUsingTemplate(FlFaceLightBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the FlFaceLightBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //20-1
    public int loadUsingTemplate(FlFaceLightBeanBase bean, int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
    }
    /**
     * Loads a list of FlFaceLightBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlFaceLightBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the FlFaceLightBean matching the template
     * @throws DAOException
     */
    //20-2
    public List<FlFaceLightBean> loadUsingTemplateAsList(FlFaceLightBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of FlFaceLightBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlFaceLightBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the FlFaceLightBean matching the template
     * @throws DAOException
     */
    //20-3
    public FlFaceLightBean[] loadUsingTemplate(FlFaceLightBeanBase bean, int startRow, int numRows, int searchType) throws DAOException
    {
    	return (FlFaceLightBean[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new FlFaceLightBean[0]);
    }

    /**
     * Loads a list of FlFaceLightBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlFaceLightBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the FlFaceLightBean matching the template
     * @throws DAOException
     */
    //20-4
    public List<FlFaceLightBean> loadUsingTemplateAsList(FlFaceLightBeanBase beanBase, int startRow, int numRows, int searchType) throws DAOException
    {
        ListAction action = new ListAction();
        loadUsingTemplate(beanBase,null,startRow,numRows,searchType, action);
        return (List<FlFaceLightBean>) action.getList();
        
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the FlFaceLightBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //20-5
    public int loadUsingTemplate(FlFaceLightBeanBase beanBase, int[] fieldList, int startRow, int numRows,int searchType, Action action) throws DAOException
    {
        FlFaceLightBean bean=FlFaceLightBeanBase.toFullBean(beanBase);
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSqlString(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
    /**
     * Deletes rows using a FlFaceLightBean template.
     *
     * @param bean the FlFaceLightBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(FlFaceLightBeanBase beanBase) throws DAOException
    {
        FlFaceLightBean bean=FlFaceLightBeanBase.toFullBean(beanBase);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_face_light ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            if(_rows>0)
                this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table fl_face_light.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table fl_face_light with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_face_light " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_face_light with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlFaceLightBean bean
     *
     * @param bean the FlFaceLightBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(FlFaceLightBeanBase bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific FlFaceLightBean bean , given the start row and number of rows.
     *
     * @param bean the FlFaceLightBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlFaceLightBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific FlFaceLightBean bean given the start row and number of rows and the search type
     *
     * @param bean the FlFaceLightBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlFaceLightBeanBase beanBase, int startRow, int numRows, int searchType) throws DAOException
    {
        FlFaceLightBean bean=FlFaceLightBeanBase.toFullBean(beanBase);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_face_light");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlFaceLightBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isCreateTimeModified()) {
                _dirtyCount ++;
                if (bean.getCreateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time = ?");
                }
            }
            if (bean.isExtInfoModified()) {
                _dirtyCount ++;
                if (bean.getExtInfo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("ext_info IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("ext_info = ?");
                }
            }
            if (bean.isAngleRollModified()) {
                _dirtyCount ++;
                if (bean.getAngleRoll() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_roll IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_roll = ?");
                }
            }
            if (bean.isAnglePitchModified()) {
                _dirtyCount ++;
                if (bean.getAnglePitch() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_pitch IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_pitch = ?");
                }
            }
            if (bean.isAngleYawModified()) {
                _dirtyCount ++;
                if (bean.getAngleYaw() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_yaw IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_yaw = ?");
                }
            }
            if (bean.isNoseYModified()) {
                _dirtyCount ++;
                if (bean.getNoseY() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("nose_y IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("nose_y = ?");
                }
            }
            if (bean.isNoseXModified()) {
                _dirtyCount ++;
                if (bean.getNoseX() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("nose_x IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("nose_x = ?");
                }
            }
            if (bean.isMouthYModified()) {
                _dirtyCount ++;
                if (bean.getMouthY() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mouth_y IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mouth_y = ?");
                }
            }
            if (bean.isMouthXModified()) {
                _dirtyCount ++;
                if (bean.getMouthX() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mouth_x IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mouth_x = ?");
                }
            }
            if (bean.isEyeRightyModified()) {
                _dirtyCount ++;
                if (bean.getEyeRighty() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_righty IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_righty = ?");
                }
            }
            if (bean.isEyeRightxModified()) {
                _dirtyCount ++;
                if (bean.getEyeRightx() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_rightx IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_rightx = ?");
                }
            }
            if (bean.isEyeLeftyModified()) {
                _dirtyCount ++;
                if (bean.getEyeLefty() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_lefty IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_lefty = ?");
                }
            }
            if (bean.isEyeLeftxModified()) {
                _dirtyCount ++;
                if (bean.getEyeLeftx() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_leftx IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_leftx = ?");
                }
            }
            if (bean.isFaceHeightModified()) {
                _dirtyCount ++;
                if (bean.getFaceHeight() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_height IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_height = ?");
                }
            }
            if (bean.isFaceWidthModified()) {
                _dirtyCount ++;
                if (bean.getFaceWidth() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_width IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_width = ?");
                }
            }
            if (bean.isFaceTopModified()) {
                _dirtyCount ++;
                if (bean.getFaceTop() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_top IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_top = ?");
                }
            }
            if (bean.isFaceLeftModified()) {
                _dirtyCount ++;
                if (bean.getFaceLeft() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_left IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_left = ?");
                }
            }
            if (bean.isImgMd5Modified()) {
                _dirtyCount ++;
                if (bean.getImgMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("img_md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("img_md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isPersonIdModified()) {
                _dirtyCount ++;
                if (bean.getPersonId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("person_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("person_id = ?");
                }
            }
            if (bean.isMd5Modified()) {
                _dirtyCount ++;
                if (bean.getMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("md5 ").append(sqlEqualsOperation).append("?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlFaceLightBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isCreateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCreateTime() + "]");
                if (bean.getCreateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getCreateTime().getTime())); }
            }
            if (bean.isExtInfoModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getExtInfo() + "]");
                if (bean.getExtInfo() == null) { ps.setNull(++_dirtyCount, Types.LONGVARBINARY); } else { ps.setBytes(++_dirtyCount, bean.getExtInfo()); }
            }
            if (bean.isAngleRollModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getAngleRoll() + "]");
                if (bean.getAngleRoll() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getAngleRoll()); }
            }
            if (bean.isAnglePitchModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getAnglePitch() + "]");
                if (bean.getAnglePitch() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getAnglePitch()); }
            }
            if (bean.isAngleYawModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getAngleYaw() + "]");
                if (bean.getAngleYaw() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getAngleYaw()); }
            }
            if (bean.isNoseYModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getNoseY() + "]");
                if (bean.getNoseY() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getNoseY()); }
            }
            if (bean.isNoseXModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getNoseX() + "]");
                if (bean.getNoseX() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getNoseX()); }
            }
            if (bean.isMouthYModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMouthY() + "]");
                if (bean.getMouthY() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMouthY()); }
            }
            if (bean.isMouthXModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMouthX() + "]");
                if (bean.getMouthX() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMouthX()); }
            }
            if (bean.isEyeRightyModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEyeRighty() + "]");
                if (bean.getEyeRighty() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getEyeRighty()); }
            }
            if (bean.isEyeRightxModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEyeRightx() + "]");
                if (bean.getEyeRightx() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getEyeRightx()); }
            }
            if (bean.isEyeLeftyModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEyeLefty() + "]");
                if (bean.getEyeLefty() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getEyeLefty()); }
            }
            if (bean.isEyeLeftxModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEyeLeftx() + "]");
                if (bean.getEyeLeftx() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getEyeLeftx()); }
            }
            if (bean.isFaceHeightModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceHeight() + "]");
                if (bean.getFaceHeight() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceHeight()); }
            }
            if (bean.isFaceWidthModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceWidth() + "]");
                if (bean.getFaceWidth() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceWidth()); }
            }
            if (bean.isFaceTopModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceTop() + "]");
                if (bean.getFaceTop() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceTop()); }
            }
            if (bean.isFaceLeftModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceLeft() + "]");
                if (bean.getFaceLeft() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceLeft()); }
            }
            if (bean.isImgMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getImgMd5() + "]");
                        if (bean.getImgMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getImgMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getImgMd5() + "%]");
                        if ( bean.getImgMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getImgMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getImgMd5() + "]");
                        if ( bean.getImgMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getImgMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getImgMd5() + "%]");
                        if (bean.getImgMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getImgMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isPersonIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPersonId() + "]");
                if (bean.getPersonId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getPersonId()); }
            }
            if (bean.isMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMd5() + "]");
                        if (bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMd5() + "%]");
                        if ( bean.getMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMd5() + "]");
                        if ( bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMd5() + "%]");
                        if (bean.getMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlFaceLightBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlFaceLightBean table
     * @throws DAOException
     */
    //28
    public FlFaceLightBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
    	return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlFaceLightBean[0]);
    }

    /**
     * decode a resultset in a list of FlFaceLightBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlFaceLightBean table
     * @throws DAOException
     */
    //28-1
    public List<FlFaceLightBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_face_light on a FlFaceLightBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlFaceLightBean bean
     * @throws DAOException
     */
    //29
    public FlFaceLightBean decodeRow(ResultSet rs,FlFaceLightBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setCreateTime(rs.getTimestamp(1));
            bean.setExtInfo(rs.getBytes(2));
            bean.setAngleRoll(Manager.getInteger(rs, 3));
            bean.setAnglePitch(Manager.getInteger(rs, 4));
            bean.setAngleYaw(Manager.getInteger(rs, 5));
            bean.setNoseY(Manager.getInteger(rs, 6));
            bean.setNoseX(Manager.getInteger(rs, 7));
            bean.setMouthY(Manager.getInteger(rs, 8));
            bean.setMouthX(Manager.getInteger(rs, 9));
            bean.setEyeRighty(Manager.getInteger(rs, 10));
            bean.setEyeRightx(Manager.getInteger(rs, 11));
            bean.setEyeLefty(Manager.getInteger(rs, 12));
            bean.setEyeLeftx(Manager.getInteger(rs, 13));
            bean.setFaceHeight(Manager.getInteger(rs, 14));
            bean.setFaceWidth(Manager.getInteger(rs, 15));
            bean.setFaceTop(Manager.getInteger(rs, 16));
            bean.setFaceLeft(Manager.getInteger(rs, 17));
            bean.setImgMd5(rs.getString(18));
            bean.setPersonId(Manager.getInteger(rs, 19));
            bean.setMd5(rs.getString(20));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_face_light table on a FlFaceLightBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlFaceLightBean bean
     * @throws DAOException
     */
    //30
    public FlFaceLightBean decodeRow(ResultSet rs, int[] fieldList,FlFaceLightBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_CREATE_TIME:
                        ++pos;
                        bean.setCreateTime(rs.getTimestamp(pos));
                        break;
                    case ID_EXT_INFO:
                        ++pos;
                        bean.setExtInfo(rs.getBytes(pos));
                        break;
                    case ID_ANGLE_ROLL:
                        ++pos;
                        bean.setAngleRoll(Manager.getInteger(rs, pos));
                        break;
                    case ID_ANGLE_PITCH:
                        ++pos;
                        bean.setAnglePitch(Manager.getInteger(rs, pos));
                        break;
                    case ID_ANGLE_YAW:
                        ++pos;
                        bean.setAngleYaw(Manager.getInteger(rs, pos));
                        break;
                    case ID_NOSE_Y:
                        ++pos;
                        bean.setNoseY(Manager.getInteger(rs, pos));
                        break;
                    case ID_NOSE_X:
                        ++pos;
                        bean.setNoseX(Manager.getInteger(rs, pos));
                        break;
                    case ID_MOUTH_Y:
                        ++pos;
                        bean.setMouthY(Manager.getInteger(rs, pos));
                        break;
                    case ID_MOUTH_X:
                        ++pos;
                        bean.setMouthX(Manager.getInteger(rs, pos));
                        break;
                    case ID_EYE_RIGHTY:
                        ++pos;
                        bean.setEyeRighty(Manager.getInteger(rs, pos));
                        break;
                    case ID_EYE_RIGHTX:
                        ++pos;
                        bean.setEyeRightx(Manager.getInteger(rs, pos));
                        break;
                    case ID_EYE_LEFTY:
                        ++pos;
                        bean.setEyeLefty(Manager.getInteger(rs, pos));
                        break;
                    case ID_EYE_LEFTX:
                        ++pos;
                        bean.setEyeLeftx(Manager.getInteger(rs, pos));
                        break;
                    case ID_FACE_HEIGHT:
                        ++pos;
                        bean.setFaceHeight(Manager.getInteger(rs, pos));
                        break;
                    case ID_FACE_WIDTH:
                        ++pos;
                        bean.setFaceWidth(Manager.getInteger(rs, pos));
                        break;
                    case ID_FACE_TOP:
                        ++pos;
                        bean.setFaceTop(Manager.getInteger(rs, pos));
                        break;
                    case ID_FACE_LEFT:
                        ++pos;
                        bean.setFaceLeft(Manager.getInteger(rs, pos));
                        break;
                    case ID_IMG_MD5:
                        ++pos;
                        bean.setImgMd5(rs.getString(pos));
                        break;
                    case ID_PERSON_ID:
                        ++pos;
                        bean.setPersonId(Manager.getInteger(rs, pos));
                        break;
                    case ID_MD5:
                        ++pos;
                        bean.setMd5(rs.getString(pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_face_light on a FlFaceLightBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlFaceLightBean bean
     * @throws DAOException
     */
    //31
    public FlFaceLightBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlFaceLightBean bean = this.createBean();
        try
        {
            bean.setCreateTime(rs.getTimestamp("create_time"));
            bean.setExtInfo(rs.getBytes("ext_info"));
            bean.setAngleRoll(Manager.getInteger(rs, "angle_roll"));
            bean.setAnglePitch(Manager.getInteger(rs, "angle_pitch"));
            bean.setAngleYaw(Manager.getInteger(rs, "angle_yaw"));
            bean.setNoseY(Manager.getInteger(rs, "nose_y"));
            bean.setNoseX(Manager.getInteger(rs, "nose_x"));
            bean.setMouthY(Manager.getInteger(rs, "mouth_y"));
            bean.setMouthX(Manager.getInteger(rs, "mouth_x"));
            bean.setEyeRighty(Manager.getInteger(rs, "eye_righty"));
            bean.setEyeRightx(Manager.getInteger(rs, "eye_rightx"));
            bean.setEyeLefty(Manager.getInteger(rs, "eye_lefty"));
            bean.setEyeLeftx(Manager.getInteger(rs, "eye_leftx"));
            bean.setFaceHeight(Manager.getInteger(rs, "face_height"));
            bean.setFaceWidth(Manager.getInteger(rs, "face_width"));
            bean.setFaceTop(Manager.getInteger(rs, "face_top"));
            bean.setFaceLeft(Manager.getInteger(rs, "face_left"));
            bean.setImgMd5(rs.getString("img_md5"));
            bean.setPersonId(Manager.getInteger(rs, "person_id"));
            bean.setMd5(rs.getString("md5"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlFaceLightBean
     * @throws DAOException
     */
    //32
    public FlFaceLightBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlFaceLightBean
     * @throws DAOException
     */
    //32
    public List<FlFaceLightBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceLightBean
     * @throws DAOException
     */
    //33
    public FlFaceLightBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlFaceLightBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceLightBean
     * @throws DAOException
     */
    //33
    public List<FlFaceLightBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceLightBean
     * @throws DAOException
     */
    //34
    public FlFaceLightBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlFaceLightBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceLightBean
     * @throws DAOException
     */
    //34-1
    public List<FlFaceLightBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private FlFaceLightListener listener = null;

    /**
     * Registers a unique FlFaceLightListener listener.
     */
    //35
    public void registerListener(TableListener listener)
    {
        this.listener = (FlFaceLightListener)listener;
    }

    /**
     * Before the save of the FlFaceLightBean bean.
     *
     * @param bean the FlFaceLightBean bean to be saved
     */
    //36
    private void beforeInsert(FlFaceLightBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the FlFaceLightBean bean.
     *
     * @param bean the FlFaceLightBean bean to be saved
     */
    //37
    private void afterInsert(FlFaceLightBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the FlFaceLightBean bean.
     *
     * @param bean the FlFaceLightBean bean to be updated
     */
    //38
    private void beforeUpdate(FlFaceLightBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the FlFaceLightBean bean.
     *
     * @param bean the FlFaceLightBean bean to be updated
     */
    //39
    private void afterUpdate(FlFaceLightBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the FlFaceLightBean bean.
     *
     * @param bean the FlFaceLightBean bean to be deleted
     */
    private void beforeDelete(FlFaceLightBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the FlFaceLightBean bean.
     *
     * @param bean the FlFaceLightBean bean to be deleted
     */
    private void afterDelete(FlFaceLightBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     * @author guyadong
     */
    //43
    public static boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceLightBean
     * @throws DAOException 
     */
    public FlFaceLightBean[] loadBySql(String sql, Object[] argList, int[] fieldList) throws DAOException {
        return loadBySqlAsList(sql, argList, fieldList).toArray(new FlFaceLightBean[0]);
    }
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of FlFaceLightBean
     * @throws DAOException
     */
    public List<FlFaceLightBean> loadBySqlAsList(String sql, Object[] argList, int[] fieldList) throws DAOException{
        ListAction action = new ListAction();
        loadBySqlForAction(sql,argList,fieldList,1,-1,action);
        return action.getList();
    }
    /**
     * Load each the elements using a SQL statement specifying a list of fields to be retrieved and dealt by action.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    private int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
    private String createSqlString(int[] fieldList,String where){
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS);
        } else{
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; ++i){
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }            
        }
        sql.append(" FROM fl_face_light ");
        if(null!=where)
            sql.append(where);
        return sql.toString();
    }
    
    class ListAction implements Action {
        final List<FlFaceLightBean> list;
        protected ListAction(List<FlFaceLightBean> list) {
            if(null==list)
                throw new IllegalArgumentException("list must not be null");
            this.list = list;
        }

        protected ListAction() {
            list=new ArrayList<FlFaceLightBean>();
        }

        public List<FlFaceLightBean> getList() {
            return list;
        }

        @Override
        public void call(FlFaceLightBean bean) {
            list.add(bean);
        }

        @Override
        public FlFaceLightBean getBean() {
            return null;
        }
    }
    public static abstract class NoListAction implements Action {
        SoftReference<FlFaceLightBean> sf=new SoftReference<FlFaceLightBean>(new FlFaceLightBean());
        @Override
        public final FlFaceLightBean getBean() {
            FlFaceLightBean bean = sf.get();
            if(null==bean){
                sf=new SoftReference<FlFaceLightBean>(bean=new FlFaceLightBean());
            }
            return bean.clean();
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    @Override
    public void runAsTransaction(final Runnable fun) throws DAOException{
        Manager.getInstance().runAsTransaction(fun);
    }

}
