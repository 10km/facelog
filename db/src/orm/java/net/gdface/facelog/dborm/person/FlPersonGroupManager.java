// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.java.vm
// ______________________________________________________
package net.gdface.facelog.dborm.person;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import net.gdface.facelog.dborm.Constant;
import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.DataRetrievalException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the fl_person_group table.<br>
 * Remarks: 用户组信息<br>
 * @author sql2java
 */
public class FlPersonGroupManager extends TableManager.Adapter<FlPersonGroupBean>
{
    /**
     * Tablename.
     */
    public static final String TABLE_NAME="fl_person_group";

   /**
     * Contains all the primarykey fields of the fl_person_group table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    public String getFields() {
        return FL_PERSON_GROUP_FIELDS;
    }
    
    public String getFullFields() {
        return FL_PERSON_GROUP_FULL_FIELDS;
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }

    private static FlPersonGroupManager singleton = new FlPersonGroupManager();
    protected FlPersonGroupManager(){}
    /**
     * Get the FlPersonGroupManager singleton.
     *
     * @return FlPersonGroupManager
     */
    public static FlPersonGroupManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlPersonGroupBean instance.
     *
     * @return the new FlPersonGroupBean
     */
    public FlPersonGroupBean createBean()
    {
        return new FlPersonGroupBean();
    }
    
    @Override
    protected Class<FlPersonGroupBean> _beanType(){
        return FlPersonGroupBean.class;
    }
    
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link FlPersonGroupBean} from the fl_person_group using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlPersonGroupBean or {@code null} if not found or have null argument
     * @throws DAOException
     */
    //1
    public FlPersonGroupBean loadByPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return null;
        }
        try{
            return loadByPrimaryKeyChecked(id);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    
    /**
     * Loads a {@link FlPersonGroupBean} from the fl_person_group using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlPersonGroupBean
     * @throws ObjectRetrievalException if not found
     * @throws DAOException
     */
    //1.1
    @SuppressWarnings("unused")
    public FlPersonGroupBean loadByPrimaryKeyChecked(Integer id) throws DAOException
    {
        if(null == id){
            throw new NullPointerException();
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + FL_PERSON_GROUP_FIELDS + " FROM fl_person_group WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            List<FlPersonGroupBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (1 == pReturn.size()) {
                return pReturn.get(0);
            } else {
                throw new ObjectRetrievalException();
            }
        }
        catch(ObjectRetrievalException e)
        {
            throw e;
        }
        catch(SQLException e)
        {
            throw new DataRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //1.2
    @Override
    public FlPersonGroupBean loadByPrimaryKey(FlPersonGroupBean bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey(bean.getId());
    }
    
    //1.2.2
    @Override
    public FlPersonGroupBean loadByPrimaryKeyChecked(FlPersonGroupBean bean) throws DAOException
    {
        if(null == bean)
            throw new NullPointerException();
        return loadByPrimaryKeyChecked(bean.getId());
    }
    
    /**
     * Loads a {@link FlPersonGroupBean} from the fl_person_group using primary key fields.
     * @param keys primary keys value:<br> 
     * @return a unique {@link FlPersonGroupBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    //1.3
    @Override
    public FlPersonGroupBean loadByPrimaryKey(Object ...keys) throws DAOException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        
        if(null == keys[0])return null;
        return loadByPrimaryKey((Integer)keys[0]);
    }
    //1.3.2
    @Override
    public FlPersonGroupBean loadByPrimaryKeyChecked(Object ...keys) throws DAOException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        return loadByPrimaryKeyChecked((Integer)keys[0]);
    }
    /**
     * Returns true if this fl_person_group contains row with primary key fields.
     * @param id Integer - PK# 1
     * @throws DAOException
     */
    //1.4
    @SuppressWarnings("unused")
    public boolean existsPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return false;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try{
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_person_group WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            return 1 == this.countByPreparedStatement(ps);
        }catch(SQLException e){
            throw new ObjectRetrievalException(e);
        }finally{
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
    /**
     * Return true if this fl_person_group contains row with primary key fields.
     * @param bean  
     * @throws DAOException
     * @return false if primary kes has null
     * @see #countUsingTemplate(FlPersonGroupBean)
     */
    //1.6
    @Override
    public boolean existsByPrimaryKey(FlPersonGroupBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getId())
            return false;
        long modified = bean.getModified();
        try{
            bean.resetModifiedExceptPrimaryKeys();
            return 1 == countUsingTemplate(bean);
        }finally{
            bean.setModified(modified);
        }
    }
    //1.7
    @Override
    public FlPersonGroupBean checkDuplicate(FlPersonGroupBean bean) throws DAOException{
        if(!existsByPrimaryKey(bean))
            throw new ObjectRetrievalException("Duplicate entry ("+ bean.getId() +") for key 'PRIMARY'");
        return bean;
    }
    /**
     * Check duplicated row by primary keys,if row exists throw {@link ObjectRetrievalException}
     * @param id Integer
     * @throws DAOException
     * @see #existsPrimaryKey(Integer id)
     */
    //1.4.1
    public Integer checkDuplicate(Integer id) throws DAOException
    {
        if(existsPrimaryKey(id))
            throw new ObjectRetrievalException("Duplicate entry '"+ id +"' for key 'PRIMARY'");
        return id;
    }    
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     * 
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #delete(FlPersonGroupBean)}
     */
    //2
    public int deleteByPrimaryKey(Integer id) throws DAOException
    {
        FlPersonGroupBean bean=createBean();
        bean.setId(id);
        return this.delete(bean);
    }

    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
     * @throws DAOException
     */
    //2
    @Override
    public int delete(FlPersonGroupBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getId()){
            return 0;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            this.listenerContainer.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_person_group WHERE id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getId()); }
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.listenerContainer.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     * @return the number of deleted rows
     * @see {@link #delete(FlPersonGroupBean)}
     */   
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys) throws DAOException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        FlPersonGroupBean bean = createBean();   
        
        if(null != keys[0] && !(keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        bean.setId((Integer)keys[0]);
        return delete(bean);
    }
    
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] importedBeanTypes = new Class<?>[]{FlJunctionPersonGroupBean.class,FlPersonGroupBean.class};

    /**
     * @see #getImportedBeansAsList(FlPersonGroupBean,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T[] getImportedBeans(FlPersonGroupBean bean, int ikIndex) throws DAOException {
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(importedBeanTypes[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID} -> {@link FlJunctionPersonGroupBean}</li>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT} -> {@link FlPersonGroupBean}</li>
     * </ul>
     * @param bean the {@link FlPersonGroupBean} object to use
     * @param ikIndex valid values: {@link Constant#FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID},{@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> List<T> getImportedBeansAsList(FlPersonGroupBean bean,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID:
            return (List<T>)this.getJunctionPersonGroupBeansByGroupIdAsList(bean);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT:
            return (List<T>)this.getPersonGroupBeansByParentAsList(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlPersonGroupBean,int)}
     * @param bean the {@link FlPersonGroupBean} object to use
     * @param importedBeans the FlPersonGroupBean array to associate to the {@link FlPersonGroupBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlPersonGroupBean,int)}
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T[] setImportedBeans(FlPersonGroupBean bean,T[] importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID:
            return (T[])setJunctionPersonGroupBeansByGroupId(bean,(FlJunctionPersonGroupBean[])importedBeans);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT:
            return (T[])setPersonGroupBeansByParent(bean,(FlPersonGroupBean[])importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlPersonGroupBean,int)}
     * @param bean the {@link FlPersonGroupBean} object to use
     * @param importedBeans the <T> object to associate to the {@link FlPersonGroupBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlPersonGroupBean,int)}

     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>,C extends java.util.Collection<T>> C setImportedBeans(FlPersonGroupBean bean,C importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID:
            return (C)setJunctionPersonGroupBeansByGroupId(bean,(java.util.Collection<FlJunctionPersonGroupBean>)importedBeans);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT:
            return (C)setPersonGroupBeansByParent(bean,(java.util.Collection<FlPersonGroupBean>)importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
 
    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FlJunctionPersonGroupBean} object from the fl_junction_person_group.group_id field.<BR>
     * FK_NAME : fl_junction_person_group_ibfk_2 
     * @param bean the {@link FlPersonGroupBean}
     * @return the associated {@link FlJunctionPersonGroupBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlJunctionPersonGroupBean[] getJunctionPersonGroupBeansByGroupId(FlPersonGroupBean bean) throws DAOException
    {
        return getJunctionPersonGroupBeansByGroupIdAsList(bean).toArray(new FlJunctionPersonGroupBean[0]);
    }
    /**
     * Retrieves the {@link FlJunctionPersonGroupBean} object from the fl_junction_person_group.group_id field.<BR>
     * FK_NAME : fl_junction_person_group_ibfk_2 
     * @param id Integer - PK# 1
     * @return the associated {@link FlJunctionPersonGroupBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FlJunctionPersonGroupBean[] getJunctionPersonGroupBeansByGroupId(Integer persongroupId) throws DAOException
    {
        FlPersonGroupBean bean = createBean();
        bean.setId(persongroupId);
        return getJunctionPersonGroupBeansByGroupId(bean);
    }
    /**
     * Retrieves the {@link FlJunctionPersonGroupBean} object from fl_junction_person_group.group_id field.<BR>
     * FK_NAME:fl_junction_person_group_ibfk_2
     * @param bean the {@link FlPersonGroupBean}
     * @return the associated {@link FlJunctionPersonGroupBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlJunctionPersonGroupBean> getJunctionPersonGroupBeansByGroupIdAsList(FlPersonGroupBean bean) throws DAOException
    {
        return getJunctionPersonGroupBeansByGroupIdAsList(bean,1,-1);
    }
    /**
     * Retrieves the {@link FlJunctionPersonGroupBean} object from fl_junction_person_group.group_id field.<BR>
     * FK_NAME:fl_junction_person_group_ibfk_2
     * @param id Integer - PK# 1
     * @return the associated {@link FlJunctionPersonGroupBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public List<FlJunctionPersonGroupBean> getJunctionPersonGroupBeansByGroupIdAsList(Integer persongroupId) throws DAOException
    {
         FlPersonGroupBean bean = createBean();
        bean.setId(persongroupId);
        return getJunctionPersonGroupBeansByGroupIdAsList(bean);
    }
    /**
     * Retrieves the {@link FlJunctionPersonGroupBean} object from fl_junction_person_group.group_id field, 
     * given the start row and number of rows.<BR>
     * FK_NAME:fl_junction_person_group_ibfk_2
     * @param bean the {@link FlPersonGroupBean}
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the associated {@link FlJunctionPersonGroupBean} beans 
     * @throws DAOException
     */
    //3.2.4 GET IMPORTED
    public List<FlJunctionPersonGroupBean> getJunctionPersonGroupBeansByGroupIdAsList(FlPersonGroupBean bean,int startRow, int numRows) throws DAOException
    {
        if(null == bean)
            return new java.util.ArrayList<FlJunctionPersonGroupBean>();
        FlJunctionPersonGroupBean other = new FlJunctionPersonGroupBean();
        other.setGroupId(bean.getId());
        return FlJunctionPersonGroupManager.getInstance().loadUsingTemplateAsList(other,startRow,numRows);
    }
    /**
     * set  the {@link FlJunctionPersonGroupBean} object array associate to FlPersonGroupBean by the fl_junction_person_group.group_id field.<BR>
     * FK_NAME : fl_junction_person_group_ibfk_2 
     * @param bean the referenced {@link FlPersonGroupBean}
     * @param importedBeans imported beans from fl_junction_person_group
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlJunctionPersonGroupManager#setReferencedByGroupId(FlJunctionPersonGroupBean, FlPersonGroupBean)
     */
    //3.3 SET IMPORTED
    public FlJunctionPersonGroupBean[] setJunctionPersonGroupBeansByGroupId(FlPersonGroupBean bean , FlJunctionPersonGroupBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlJunctionPersonGroupBean importBean : importedBeans ){
                FlJunctionPersonGroupManager.getInstance().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlJunctionPersonGroupBean} object collection associate to FlPersonGroupBean by the fl_junction_person_group.group_id field.<BR>
     * FK_NAME:fl_junction_person_group_ibfk_2
     * @param bean the referenced {@link FlPersonGroupBean} 
     * @param importedBeans imported beans from fl_junction_person_group 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlJunctionPersonGroupManager#setReferencedByGroupId(FlJunctionPersonGroupBean, FlPersonGroupBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlJunctionPersonGroupBean>> C setJunctionPersonGroupBeansByGroupId(FlPersonGroupBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlJunctionPersonGroupBean importBean : importedBeans ){
                FlJunctionPersonGroupManager.getInstance().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Retrieves the {@link FlPersonGroupBean} object from the fl_person_group.parent field.<BR>
     * FK_NAME : fl_person_group_ibfk_1 
     * @param bean the {@link FlPersonGroupBean}
     * @return the associated {@link FlPersonGroupBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlPersonGroupBean[] getPersonGroupBeansByParent(FlPersonGroupBean bean) throws DAOException
    {
        return getPersonGroupBeansByParentAsList(bean).toArray(new FlPersonGroupBean[0]);
    }
    /**
     * Retrieves the {@link FlPersonGroupBean} object from the fl_person_group.parent field.<BR>
     * FK_NAME : fl_person_group_ibfk_1 
     * @param id Integer - PK# 1
     * @return the associated {@link FlPersonGroupBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FlPersonGroupBean[] getPersonGroupBeansByParent(Integer persongroupId) throws DAOException
    {
        FlPersonGroupBean bean = createBean();
        bean.setId(persongroupId);
        return getPersonGroupBeansByParent(bean);
    }
    /**
     * Retrieves the {@link FlPersonGroupBean} object from fl_person_group.parent field.<BR>
     * FK_NAME:fl_person_group_ibfk_1
     * @param bean the {@link FlPersonGroupBean}
     * @return the associated {@link FlPersonGroupBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlPersonGroupBean> getPersonGroupBeansByParentAsList(FlPersonGroupBean bean) throws DAOException
    {
        return getPersonGroupBeansByParentAsList(bean,1,-1);
    }
    /**
     * Retrieves the {@link FlPersonGroupBean} object from fl_person_group.parent field.<BR>
     * FK_NAME:fl_person_group_ibfk_1
     * @param id Integer - PK# 1
     * @return the associated {@link FlPersonGroupBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public List<FlPersonGroupBean> getPersonGroupBeansByParentAsList(Integer persongroupId) throws DAOException
    {
         FlPersonGroupBean bean = createBean();
        bean.setId(persongroupId);
        return getPersonGroupBeansByParentAsList(bean);
    }
    /**
     * Retrieves the {@link FlPersonGroupBean} object from fl_person_group.parent field, 
     * given the start row and number of rows.<BR>
     * FK_NAME:fl_person_group_ibfk_1
     * @param bean the {@link FlPersonGroupBean}
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the associated {@link FlPersonGroupBean} beans 
     * @throws DAOException
     */
    //3.2.4 GET IMPORTED
    public List<FlPersonGroupBean> getPersonGroupBeansByParentAsList(FlPersonGroupBean bean,int startRow, int numRows) throws DAOException
    {
        if(null == bean)
            return new java.util.ArrayList<FlPersonGroupBean>();
        FlPersonGroupBean other = new FlPersonGroupBean();
        other.setParent(bean.getId());
        return FlPersonGroupManager.getInstance().loadUsingTemplateAsList(other,startRow,numRows);
    }
    /**
     * set  the {@link FlPersonGroupBean} object array associate to FlPersonGroupBean by the fl_person_group.parent field.<BR>
     * FK_NAME : fl_person_group_ibfk_1 
     * @param bean the referenced {@link FlPersonGroupBean}
     * @param importedBeans imported beans from fl_person_group
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlPersonGroupManager#setReferencedByParent(FlPersonGroupBean, FlPersonGroupBean)
     */
    //3.3 SET IMPORTED
    public FlPersonGroupBean[] setPersonGroupBeansByParent(FlPersonGroupBean bean , FlPersonGroupBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlPersonGroupBean importBean : importedBeans ){
                FlPersonGroupManager.getInstance().setReferencedByParent(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlPersonGroupBean} object collection associate to FlPersonGroupBean by the fl_person_group.parent field.<BR>
     * FK_NAME:fl_person_group_ibfk_1
     * @param bean the referenced {@link FlPersonGroupBean} 
     * @param importedBeans imported beans from fl_person_group 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlPersonGroupManager#setReferencedByParent(FlPersonGroupBean, FlPersonGroupBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlPersonGroupBean>> C setPersonGroupBeansByParent(FlPersonGroupBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlPersonGroupBean importBean : importedBeans ){
                FlPersonGroupManager.getInstance().setReferencedByParent(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Save the FlPersonGroupBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlPersonGroupBean} bean to be saved
     * @param refPersongroupByParent the {@link FlPersonGroupBean} bean referenced by {@link FlPersonGroupBean} 
     * @param impJunctionpersongroupByGroupId the {@link FlJunctionPersonGroupBean} beans refer to {@link FlPersonGroupBean} 
     * @param impPersongroupByParent the {@link FlPersonGroupBean} beans refer to {@link FlPersonGroupBean} 
     * @return the inserted or updated {@link FlPersonGroupBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public FlPersonGroupBean save(FlPersonGroupBean bean
        , FlPersonGroupBean refPersongroupByParent 
        , FlJunctionPersonGroupBean[] impJunctionpersongroupByGroupId , FlPersonGroupBean[] impPersongroupByParent ) throws DAOException
    {
        if(null == bean) return null;
        if(null != refPersongroupByParent)
            this.setReferencedByParent(bean,refPersongroupByParent);
        bean = this.save( bean );
        this.setJunctionPersonGroupBeansByGroupId(bean,impJunctionpersongroupByGroupId);
        FlJunctionPersonGroupManager.getInstance().save( impJunctionpersongroupByGroupId );
        this.setPersonGroupBeansByParent(bean,impPersongroupByParent);
        FlPersonGroupManager.getInstance().save( impPersongroupByParent );
        return bean;
    } 

    /**
     * Transaction version for sync save
     * @see {@link #save(FlPersonGroupBean , FlPersonGroupBean , FlJunctionPersonGroupBean[] , FlPersonGroupBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public FlPersonGroupBean saveAsTransaction(final FlPersonGroupBean bean
        ,final FlPersonGroupBean refPersongroupByParent 
        ,final FlJunctionPersonGroupBean[] impJunctionpersongroupByGroupId ,final FlPersonGroupBean[] impPersongroupByParent ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlPersonGroupBean>(){
            @Override
            public FlPersonGroupBean call() throws Exception {
                return save(bean , refPersongroupByParent , impJunctionpersongroupByGroupId , impPersongroupByParent );
            }});
    }
    /**
     * Save the FlPersonGroupBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlPersonGroupBean} bean to be saved
     * @param refPersongroupByParent the {@link FlPersonGroupBean} bean referenced by {@link FlPersonGroupBean} 
     * @param impJunctionpersongroupByGroupId the {@link FlJunctionPersonGroupBean} bean refer to {@link FlPersonGroupBean} 
     * @param impPersongroupByParent the {@link FlPersonGroupBean} bean refer to {@link FlPersonGroupBean} 
     * @return the inserted or updated {@link FlPersonGroupBean} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public FlPersonGroupBean save(FlPersonGroupBean bean
        , FlPersonGroupBean refPersongroupByParent 
        , java.util.Collection<FlJunctionPersonGroupBean> impJunctionpersongroupByGroupId , java.util.Collection<FlPersonGroupBean> impPersongroupByParent ) throws DAOException
    {
        if(null == bean) return null;
        this.setReferencedByParent(bean,refPersongroupByParent);
        bean = this.save( bean );
        this.setJunctionPersonGroupBeansByGroupId(bean,impJunctionpersongroupByGroupId);
        FlJunctionPersonGroupManager.getInstance().save( impJunctionpersongroupByGroupId );
        this.setPersonGroupBeansByParent(bean,impPersongroupByParent);
        FlPersonGroupManager.getInstance().save( impPersongroupByParent );
        return bean;
    }

    /**
     * Transaction version for sync save
     * @see {@link #save(FlPersonGroupBean , FlPersonGroupBean , java.util.Collection , java.util.Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public FlPersonGroupBean saveAsTransaction(final FlPersonGroupBean bean
        ,final FlPersonGroupBean refPersongroupByParent 
        ,final  java.util.Collection<FlJunctionPersonGroupBean> impJunctionpersongroupByGroupId ,final  java.util.Collection<FlPersonGroupBean> impPersongroupByParent ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlPersonGroupBean>(){
            @Override
            public FlPersonGroupBean call() throws Exception {
                return save(bean , refPersongroupByParent , impJunctionpersongroupByGroupId , impPersongroupByParent );
            }});
    }
    /**
     * Save the FlPersonGroupBean bean and referenced beans and imported beans (array) into the database.
     *
     * @param bean the {@link FlPersonGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlPersonGroupBean , FlPersonGroupBean , FlJunctionPersonGroupBean[] , FlPersonGroupBean[] )}
     * @return the inserted or updated {@link FlPersonGroupBean} bean
     * @throws DAOException
     */
    //3.9 SYNC SAVE 
    @Override
    public FlPersonGroupBean save(FlPersonGroupBean bean,Object ...args) throws DAOException
    {
        if(null == args)
            save(bean);
        if(args.length > 3)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 3");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlPersonGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:FlPersonGroupBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof FlJunctionPersonGroupBean[])){
            throw new IllegalArgumentException("invalid type for the No.2 dynamic argument,expected type:FlJunctionPersonGroupBean[]");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof FlPersonGroupBean[])){
            throw new IllegalArgumentException("invalid type for the No.3 dynamic argument,expected type:FlPersonGroupBean[]");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlPersonGroupBean)args[0],(args.length < 2 || null == args[1])?null:(FlJunctionPersonGroupBean[])args[1],(args.length < 3 || null == args[2])?null:(FlPersonGroupBean[])args[2]);
    } 

    /**
     * Save the FlPersonGroupBean bean and referenced beans and imported beans (collection) into the database.
     *
     * @param bean the {@link FlPersonGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlPersonGroupBean , FlPersonGroupBean , java.util.Collection , java.util.Collection )}
     * @return the inserted or updated {@link FlPersonGroupBean} bean
     * @throws DAOException
     */
    //3.10 SYNC SAVE 
    @SuppressWarnings("unchecked")
    @Override
    public FlPersonGroupBean saveCollection(FlPersonGroupBean bean,Object ...args) throws DAOException
    {
        if(null == args)
            save(bean);
        if(args.length > 3)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 3");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlPersonGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:FlPersonGroupBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:java.util.Collection<FlJunctionPersonGroupBean>");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:java.util.Collection<FlPersonGroupBean>");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlPersonGroupBean)args[0],(args.length < 2 || null == args[1])?null:(java.util.Collection<FlJunctionPersonGroupBean>)args[1],(args.length < 3 || null == args[2])?null:(java.util.Collection<FlPersonGroupBean>)args[2]);
    } 
    //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_FK_PARENT} -> {@link FlPersonGroupBean}</li>
     * </ul>
     * @param bean the {@link FlPersonGroupBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link Constant#FL_PERSON_GROUP_FK_PARENT}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T getReferencedBean(FlPersonGroupBean bean,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_PERSON_GROUP_FK_PARENT:
            return  (T)this.getReferencedByParent(bean);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    
    /**
     * Associates the {@link FlPersonGroupBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean(FlPersonGroupBean,int)}
     * @param bean the {@link FlPersonGroupBean} object to use
     * @param beanToSet the <T> object to associate to the {@link FlPersonGroupBean}
     * @param fkIndex valid values: see also {@link #getReferencedBean(FlPersonGroupBean,int)}
     * @return always beanToSet saved
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T setReferencedBean(FlPersonGroupBean bean,T beanToSet,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_PERSON_GROUP_FK_PARENT:
            return  (T)this.setReferencedByParent(bean, (FlPersonGroupBean)beanToSet);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the {@link FlPersonGroupBean} object referenced by {@link FlPersonGroupBean#getParent}() field.<br>
     * FK_NAME : fl_person_group_ibfk_1
     * @param bean the {@link FlPersonGroupBean}
     * @return the associated {@link FlPersonGroupBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //5.1 GET REFERENCED VALUE
    public FlPersonGroupBean getReferencedByParent(FlPersonGroupBean bean) throws DAOException
    {
        if(null == bean)return null;
        bean.setReferencedByParent(FlPersonGroupManager.getInstance().loadByPrimaryKey(bean.getParent())); 
        return bean.getReferencedByParent();
    }

    /**
     * Associates the {@link FlPersonGroupBean} object to the {@link FlPersonGroupBean} object by {@link FlPersonGroupBean#getParent}() field.
     *
     * @param bean the {@link FlPersonGroupBean} object to use
     * @param beanToSet the {@link FlPersonGroupBean} object to associate to the {@link FlPersonGroupBean} .
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlPersonGroupBean setReferencedByParent(FlPersonGroupBean bean, FlPersonGroupBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlPersonGroupManager.getInstance().save(beanToSet);
            bean.setReferencedByParent(beanToSet);
            if( null == beanToSet){
                bean.setParent(null);
            }else{
                bean.setParent(beanToSet.getId());
            }
        }
        return beanToSet;
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Deletes rows from the fl_person_group table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clauses.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    @Override
    public int deleteByWhere(String where) throws DAOException
    {
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action = new DeleteBeanAction(); 
            this.loadByWhere(where,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_person_group " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    public FlPersonGroupBean insert(FlPersonGroupBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.listenerContainer.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_person_group (");

            if (bean.checkIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("id");
                _dirtyCount++;
            }

            if (bean.checkNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("name");
                _dirtyCount++;
            }

            if (bean.checkParentModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("parent");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.checkIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.listenerContainer.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //14
    @Override
    public FlPersonGroupBean update(FlPersonGroupBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.listenerContainer.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_person_group SET ");
            boolean useComma=false;

            if (bean.checkIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("id=?");
            }

            if (bean.checkNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("name=?");
            }

            if (bean.checkParentModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("parent=?");
            }
            sql.append(" WHERE ");
            sql.append("id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.listenerContainer.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public FlPersonGroupBean loadUniqueUsingTemplate(FlPersonGroupBean bean) throws DAOException
    {
         List<FlPersonGroupBean> beans = this.loadUsingTemplateAsList(bean);
         switch(beans.size()){
         case 0:
             return null;
         case 1:
             return beans.get(0);
         default:
             throw new ObjectRetrievalException("More than one element !!");
         }
    }
    //18-1
    @Override
    public FlPersonGroupBean loadUniqueUsingTemplateChecked(FlPersonGroupBean bean) throws DAOException
    {
         List<FlPersonGroupBean> beans = this.loadUsingTemplateAsList(bean);
         switch(beans.size()){
         case 0:
             throw new ObjectRetrievalException("Not found element !!");
         case 1:
             return beans.get(0);
         default:
             throw new ObjectRetrievalException("More than one element !!");
         }
    }
    //20-5
    @Override
    public int loadUsingTemplate(FlPersonGroupBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<FlPersonGroupBean> action) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSelectSql(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(FlPersonGroupBean bean) throws DAOException
    {
        if(bean.checkIdInitialized() && null != bean.getId()){
            return this.deleteByPrimaryKey(bean.getId());
        }
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action=new DeleteBeanAction(); 
            this.loadUsingTemplate(bean,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_person_group ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________


    /**
     * Retrieves an array of FlPersonGroupBean using the parent index.
     *
     * @param parent the parent column's value filter.
     * @return an array of FlPersonGroupBean
     * @throws DAOException
     */
    public FlPersonGroupBean[] loadByIndexParent(Integer parent) throws DAOException
    {
        return (FlPersonGroupBean[])this.loadByIndexParentAsList(parent).toArray(new FlPersonGroupBean[0]);
    }
    
    /**
     * Retrieves a list of FlPersonGroupBean using the parent index.
     *
     * @param parent the parent column's value filter.
     * @return a list of FlPersonGroupBean
     * @throws DAOException
     */
    public List<FlPersonGroupBean> loadByIndexParentAsList(Integer parent) throws DAOException
    {
        FlPersonGroupBean bean = this.createBean();
        bean.setParent(parent);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the parent index.
     *
     * @param parent the parent column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndexParent(Integer parent) throws DAOException
    {
        FlPersonGroupBean bean = this.createBean();
        bean.setParent(parent);
        return deleteUsingTemplate(bean);
    }
    
    
    /**
     * Retrieves a list of FlPersonGroupBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_PERSON_GROUP_INDEX_PARENT}
     * @param keys key values of index
     * @return a list of FlPersonGroupBean
     * @throws DAOException
     */
    public List<FlPersonGroupBean> loadByIndexAsList(int keyIndex,Object ...keys)throws DAOException
    {
        if(null == keys)
            throw new NullPointerException();
        switch(keyIndex){
        case FL_PERSON_GROUP_INDEX_PARENT:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'parent' column number");
            
            if(null != keys[0] && !(keys[0] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");

            return this.loadByIndexParentAsList((Integer)keys[0]);        
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_PERSON_GROUP_INDEX_PARENT}
     * @param keys key values of index
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        if(null == keys)
            throw new NullPointerException();
        switch(keyIndex){
        case FL_PERSON_GROUP_INDEX_PARENT:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'parent' column number");
            
            if(null != keys[0] && !(keys[0] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            return this.deleteByIndexParent((Integer)keys[0]);
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }        
    }

    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
    /**
     * @see #loadViaJunctionPersonGroupAsList(FlPersonGroupBean,int,int)
     */
    //22 MANY TO MANY
    public List<FlPersonGroupBean> loadViaJunctionPersonGroupAsList(FlPersonBean bean) throws DAOException
    {
         return this.loadViaJunctionPersonGroupAsList(bean, 1, -1);
    }

    /**
     * Retrieves an list of FlPersonGroupBean using the junction table FlJunctionPersonGroup, given a FlPersonBean, 
     * specifying the start row and the number of rows.
     *
     * @param bean the FlPersonBean bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlPersonGroupBean
     * @throws DAOException
     */
    //23 MANY TO MANY
    public List<FlPersonGroupBean> loadViaJunctionPersonGroupAsList(FlPersonBean bean, int startRow, int numRows) throws DAOException
    {
        if(null == bean || null == bean.getId())
            return java.util.Arrays.<FlPersonGroupBean>asList();
        Connection c = null;
        PreparedStatement ps = null;
        String sql = " SELECT " + FL_PERSON_GROUP_FULL_FIELDS
                        + " FROM fl_junction_person_group, fl_person_group"
                        + " WHERE "
                        + "     fl_junction_person_group.person_id=?"
                        + " AND fl_junction_person_group.group_id=fl_person_group.id";
        try
        {
            c = this.getConnection();
            ps = c.prepareStatement(sql,
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getId()); }
            return loadByPreparedStatementAsList(ps, null, startRow, numRows);
        }
        catch (SQLException e)
        {
            throw new DAOException(e.getMessage(), e);
        }
        finally
        {
           this.getManager().close(ps);
           this.freeConnection(c);
           sql = null;
        }
    }
    /**
     * add junction between {@link FlPersonGroupBean} and {@link FlPersonBean} if junction not exists
     * @param bean
     * @param linked
     * @throws DAOException
     */
    //23.2 MANY TO MANY
    public void addJunction(FlPersonGroupBean bean,FlPersonBean linked) throws DAOException{
        if(null == bean || null == bean.getId())
            return ;
        if(null == linked || null ==bean.getId())
            return ;
        if(!FlJunctionPersonGroupManager.getInstance().existsPrimaryKey(linked.getId(),bean.getId())){
            FlJunctionPersonGroupBean junction = new FlJunctionPersonGroupBean();
            junction.setPersonId(linked.getId());
            junction.setGroupId(bean.getId());
            FlJunctionPersonGroupManager.getInstance().save(junction);
        }
    }
    /**
     * remove junction between {@link FlPersonGroupBean} and {@link FlPersonBean}
     * @param bean
     * @param linked
     * @throws DAOException
     */
    //23.3 MANY TO MANY
    public int deleteJunction(FlPersonGroupBean bean,FlPersonBean linked) throws DAOException{
        if(null == bean || null == bean.getId())
            return 0;
        if(null == linked || null ==bean.getId())
            return 0;
        return FlJunctionPersonGroupManager.getInstance().deleteByPrimaryKey(linked.getId(),bean.getId());
    }
    /** @see #addJunction(FlPersonGroupBean,FlPersonBean) */
    //23.4 MANY TO MANY
    public void addJunction(FlPersonGroupBean bean,FlPersonBean... linkedBeans) throws DAOException{
        if(null == linkedBeans)return;
        for(FlPersonBean linked:linkedBeans){
            addJunction(bean,linked);
        }
    }
    /** @see #addJunction(FlPersonGroupBean,FlPersonBean) */
    //23.5 MANY TO MANY
    public void addJunction(FlPersonGroupBean bean,java.util.Collection<FlPersonBean> linkedBeans) throws DAOException{
        if(null == linkedBeans)return;
        for(FlPersonBean linked:linkedBeans){
            addJunction(bean,linked);
        }
    }
    /** @see #deleteJunction(FlPersonGroupBean,FlPersonBean) */
    //23.6 MANY TO MANY
    public int deleteJunction(FlPersonGroupBean bean,FlPersonBean... linkedBeans) throws DAOException{
        if(null == linkedBeans)return 0;
        int count = 0;
        for(FlPersonBean linked:linkedBeans){
            count += deleteJunction(bean,linked);
        }
        return count;
    }
    /** @see #deleteJunction(FlPersonGroupBean,FlPersonBean) */
    //23.7 MANY TO MANY
    public int deleteJunction(FlPersonGroupBean bean,java.util.Collection<FlPersonBean> linkedBeans) throws DAOException{
        if(null == linkedBeans)return 0;
        int count = 0;
        for(FlPersonBean linked:linkedBeans){
            count += deleteJunction(bean,linked);
        }
        return count;
    }

    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    //25
    @Override
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_person_group " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_person_group with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlPersonGroupBean bean given the search type
     *
     * @param bean the FlPersonGroupBean template to look for
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlPersonGroupBean bean, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_person_group");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clauses constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlPersonGroupBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.checkIdModified()) {
                _dirtyCount ++;
                if (bean.getId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id = ?");
                }
            }
            if (bean.checkNameModified()) {
                _dirtyCount ++;
                if (bean.getName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkParentModified()) {
                _dirtyCount ++;
                if (bean.getParent() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("parent IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("parent = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlPersonGroupBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.checkIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getId() + "]");
                if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            }
            if (bean.checkNameModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getName() + "]");
                        if (bean.getName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getName()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getName() + "%]");
                        if ( bean.getName()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getName() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getName() + "]");
                        if ( bean.getName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getName()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getName() + "%]");
                        if (bean.getName()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkParentModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getParent() + "]");
                if (bean.getParent() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getParent()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlPersonGroupBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlPersonGroupBean table
     * @throws DAOException
     */
    //28
    public FlPersonGroupBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlPersonGroupBean[0]);
    }

    /**
     * decode a resultset in a list of FlPersonGroupBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlPersonGroupBean table
     * @throws DAOException
     */
    //28-1
    public List<FlPersonGroupBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action<FlPersonGroupBean> action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_person_group on a FlPersonGroupBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlPersonGroupBean bean
     * @throws DAOException
     */
    //29
    public FlPersonGroupBean decodeRow(ResultSet rs,FlPersonGroupBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, 1));
            bean.setName(rs.getString(2));
            bean.setParent(Manager.getInteger(rs, 3));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_person_group table on a FlPersonGroupBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlPersonGroupBean bean
     * @throws DAOException
     */
    //30
    public FlPersonGroupBean decodeRow(ResultSet rs, int[] fieldList,FlPersonGroupBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case FL_PERSON_GROUP_ID_ID:
                        ++pos;
                        bean.setId(Manager.getInteger(rs, pos));
                        break;
                    case FL_PERSON_GROUP_ID_NAME:
                        ++pos;
                        bean.setName(rs.getString(pos));
                        break;
                    case FL_PERSON_GROUP_ID_PARENT:
                        ++pos;
                        bean.setParent(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_person_group on a FlPersonGroupBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlPersonGroupBean bean
     * @throws DAOException
     */
    //31
    public FlPersonGroupBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlPersonGroupBean bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, "id"));
            bean.setName(rs.getString("name"));
            bean.setParent(Manager.getInteger(rs, "parent"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlPersonGroupBean
     * @throws DAOException
     */
    //32
    public FlPersonGroupBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlPersonGroupBean
     * @throws DAOException
     */
    //32
    public List<FlPersonGroupBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlPersonGroupBean
     * @throws DAOException
     */
    //33
    public FlPersonGroupBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlPersonGroupBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlPersonGroupBean
     * @throws DAOException
     */
    //33
    public List<FlPersonGroupBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlPersonGroupBean
     * @throws DAOException
     */
    //34
    public FlPersonGroupBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlPersonGroupBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlPersonGroupBean
     * @throws DAOException
     */
    //34-1
    public List<FlPersonGroupBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action<FlPersonGroupBean> action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    private final TableListener.ListenerContainer<FlPersonGroupBean> listenerContainer = new TableListener.ListenerContainer<FlPersonGroupBean>();
    //35
    @Override
    public TableListener<FlPersonGroupBean> registerListener(TableListener<FlPersonGroupBean> listener)
    {
        this.listenerContainer.add(listener);
        return listener;
    }

    /**
     * remove listener.
     */
    //36
    @Override
    public void unregisterListener(TableListener<FlPersonGroupBean> listener)
    {
        this.listenerContainer.remove(listener);
    }

    //37
    @Override
    public void fire(TableListener.Event event, FlPersonGroupBean bean) throws DAOException{
        if(null == event)
            throw new NullPointerException();
        event.fire(listenerContainer, bean);
    }
    
    //37-1
    @Override
    public void fire(int event, FlPersonGroupBean bean) throws DAOException{
        try{
            fire(TableListener.Event.values()[event],bean);
        }catch(ArrayIndexOutOfBoundsException e){
            throw new IllegalArgumentException("invalid event id " + event);
        }
    }

    /** foreign key listener for DEELTE RULE : SET_NULL */
    private final net.gdface.facelog.dborm.ForeignKeyListener<FlPersonGroupBean,FlPersonGroupBean> foreignKeyListenerByParent = 
            new net.gdface.facelog.dborm.ForeignKeyListener<FlPersonGroupBean,FlPersonGroupBean>(){
                @SuppressWarnings("unchecked")
                @Override
                protected List<FlPersonGroupBean> getImportedBeans(FlPersonGroupBean bean) throws DAOException {
                    return listenerContainer.isEmpty() 
                            ? java.util.Collections.EMPTY_LIST
                            : FlPersonGroupManager.getInstance().getPersonGroupBeansByParentAsList(bean);
                }
                @Override
                protected void onRemove(List<FlPersonGroupBean> effectBeans) throws DAOException {
                    for(FlPersonGroupBean bean:effectBeans){
                        bean.setParent(null);
                        Event.UPDATE.fire(listenerContainer, bean);
                    }
                }};

    /**
     * bind foreign key listener to foreign table: <br>
     * DELETE RULE : SET_NULL {@code fl_person_group(parent)-> fl_person_group(id)} <br>
     */
    //37-2
    public void bindForeignKeyListenerForDeleteRule(){
        FlPersonGroupManager.getInstance().registerListener(foreignKeyListenerByParent);
        
    }
    /**
     * unbind foreign key listener from all of foreign tables <br>
     * @see #bindForeignKeyListenerForDeleteRule()
     */
    //37-3
    public void unbindForeignKeyListenerForDeleteRule(){
        FlPersonGroupManager.getInstance().unregisterListener(foreignKeyListenerByParent);
        
    }
    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    //43
    @Override
    public boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    @Override    
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<FlPersonGroupBean> action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
   
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    class DeleteBeanAction extends Action.Adapter<FlPersonGroupBean>{
        private final AtomicInteger count=new AtomicInteger(0);
        @Override
        public void call(FlPersonGroupBean bean) throws DAOException {
                FlPersonGroupManager.this.delete(bean);
                count.incrementAndGet();
        }
        int getCount(){
            return count.get();
        }
    }
    /**
     * return a primary key list from {@link FlPersonGroupBean} array
     * @param array
     */
    //45
    public List<Integer> toPrimaryKeyList(FlPersonGroupBean... array){        
        if(null == array)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(array.length);
        for(FlPersonGroupBean bean:array){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
    /**
     * return a primary key list from {@link FlPersonGroupBean} collection
     * @param array
     */
    //46
    public List<Integer> toPrimaryKeyList(java.util.Collection<FlPersonGroupBean> collection){        
        if(null == collection)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(collection.size());
        for(FlPersonGroupBean bean:collection){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
}
