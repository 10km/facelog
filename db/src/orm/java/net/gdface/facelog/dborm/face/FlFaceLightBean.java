// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.face;
import java.io.Serializable;
import net.gdface.facelog.dborm.Constant;
import net.gdface.facelog.dborm.FullBean;
import net.gdface.facelog.dborm.CompareToBuilder;
import net.gdface.facelog.dborm.EqualsBuilder;
import net.gdface.facelog.dborm.HashCodeBuilder;
/**
 * FlFaceLightBean is a mapping of fl_face_light Table.
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: VIEW </li>
 * </ul>
 * @author sql2java
*/
public class FlFaceLightBean
    implements Serializable,FullBean<FlFaceLightBean>,Comparable<FlFaceLightBean>,Constant
{
	private static final long serialVersionUID = 2582913704190734659L;
    /** comments:主键,特征数据md5校验码 */
    private String md5;

    /** comments:外键,所属用户id */
    private Integer personId;

    /** comments:外键,所属图像id */
    private String imgMd5;

    private Integer faceLeft;

    private Integer faceTop;

    private Integer faceWidth;

    private Integer faceHeight;

    private Integer eyeLeftx;

    private Integer eyeLefty;

    private Integer eyeRightx;

    private Integer eyeRighty;

    private Integer mouthX;

    private Integer mouthY;

    private Integer noseX;

    private Integer noseY;

    private Integer angleYaw;

    private Integer anglePitch;

    private Integer angleRoll;

    /** comments:扩展字段,保存人脸检测基本信息之外的其他数据,内容由SDK负责解析 */
    private byte[] extInfo;

    private java.util.Date createTime;

    /** columns modified flag */
    private long modified = 0L;
    /** columns initialized flag */
    private long initialized = 0L;
    private boolean _isNew = true;
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void setNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * @return the modified status of columns
     */
    public long getModified(){
        return modified;
    }

    /**
     * @param modified the modified status bit to be assigned to {@link #modified}
     */
    public void setModified(long modified){
        this.modified = modified;
    }
    /**
     * @return the initialized status of columns
     */
    public long getInitialized(){
        return initialized;
    }

    /**
     * @param initialized the initialized status bit to be assigned to {@link #initialized}
     */
    public void setInitialized(long initialized){
        this.initialized = initialized;
    }
    public FlFaceLightBean(){
        super();
    }
    /**
     * create a FlFaceLightBean from a instance
     */
    FlFaceLightBean(FlFaceLightBean bean){
        super();
        copy(bean);
    }
    /**
     * Getter method for md5.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.md5</li>
     * <li>comments: 主键,特征数据md5校验码</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of md5
     */
    public String getMd5(){
        return md5;
    }
    /**
     * Setter method for md5.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to md5
     */
    public void setMd5(String newVal)
    {
        if ((newVal != null && md5 != null && (newVal.compareTo(md5) == 0)) ||
            (newVal == null && md5 == null && isMd5Initialized())) {
            return;
        }
        md5 = newVal;

        modified |= FL_FACE_LIGHT_ID_MD5_MASK;
        initialized |= FL_FACE_LIGHT_ID_MD5_MASK;
    }

    /**
     * Determines if the md5 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMd5Modified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_MD5_MASK);
    }

    /**
     * Determines if the md5 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMd5Initialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_MD5_MASK);
    }
    /**
     * Getter method for personId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.person_id</li>
     * <li>comments: 外键,所属用户id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of personId
     */
    public Integer getPersonId(){
        return personId;
    }
    /**
     * Setter method for personId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to personId
     */
    public void setPersonId(Integer newVal)
    {
        if ((newVal != null && personId != null && (newVal.compareTo(personId) == 0)) ||
            (newVal == null && personId == null && isPersonIdInitialized())) {
            return;
        }
        personId = newVal;

        modified |= FL_FACE_LIGHT_ID_PERSON_ID_MASK;
        initialized |= FL_FACE_LIGHT_ID_PERSON_ID_MASK;
    }

    /**
     * Setter method for personId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to personId
     */
    public void setPersonId(int newVal)
    {
        setPersonId(new Integer(newVal));
    }

    /**
     * Determines if the personId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPersonIdModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_PERSON_ID_MASK);
    }

    /**
     * Determines if the personId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPersonIdInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_PERSON_ID_MASK);
    }
    /**
     * Getter method for imgMd5.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.img_md5</li>
     * <li>comments: 外键,所属图像id</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of imgMd5
     */
    public String getImgMd5(){
        return imgMd5;
    }
    /**
     * Setter method for imgMd5.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to imgMd5
     */
    public void setImgMd5(String newVal)
    {
        if ((newVal != null && imgMd5 != null && (newVal.compareTo(imgMd5) == 0)) ||
            (newVal == null && imgMd5 == null && isImgMd5Initialized())) {
            return;
        }
        imgMd5 = newVal;

        modified |= FL_FACE_LIGHT_ID_IMG_MD5_MASK;
        initialized |= FL_FACE_LIGHT_ID_IMG_MD5_MASK;
    }

    /**
     * Determines if the imgMd5 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isImgMd5Modified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_IMG_MD5_MASK);
    }

    /**
     * Determines if the imgMd5 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isImgMd5Initialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_IMG_MD5_MASK);
    }
    /**
     * Getter method for faceLeft.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.face_left</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceLeft
     */
    public Integer getFaceLeft(){
        return faceLeft;
    }
    /**
     * Setter method for faceLeft.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceLeft
     */
    public void setFaceLeft(Integer newVal)
    {
        if ((newVal != null && faceLeft != null && (newVal.compareTo(faceLeft) == 0)) ||
            (newVal == null && faceLeft == null && isFaceLeftInitialized())) {
            return;
        }
        faceLeft = newVal;

        modified |= FL_FACE_LIGHT_ID_FACE_LEFT_MASK;
        initialized |= FL_FACE_LIGHT_ID_FACE_LEFT_MASK;
    }

    /**
     * Setter method for faceLeft.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceLeft
     */
    public void setFaceLeft(int newVal)
    {
        setFaceLeft(new Integer(newVal));
    }

    /**
     * Determines if the faceLeft has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaceLeftModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_FACE_LEFT_MASK);
    }

    /**
     * Determines if the faceLeft has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaceLeftInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_FACE_LEFT_MASK);
    }
    /**
     * Getter method for faceTop.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.face_top</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceTop
     */
    public Integer getFaceTop(){
        return faceTop;
    }
    /**
     * Setter method for faceTop.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceTop
     */
    public void setFaceTop(Integer newVal)
    {
        if ((newVal != null && faceTop != null && (newVal.compareTo(faceTop) == 0)) ||
            (newVal == null && faceTop == null && isFaceTopInitialized())) {
            return;
        }
        faceTop = newVal;

        modified |= FL_FACE_LIGHT_ID_FACE_TOP_MASK;
        initialized |= FL_FACE_LIGHT_ID_FACE_TOP_MASK;
    }

    /**
     * Setter method for faceTop.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceTop
     */
    public void setFaceTop(int newVal)
    {
        setFaceTop(new Integer(newVal));
    }

    /**
     * Determines if the faceTop has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaceTopModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_FACE_TOP_MASK);
    }

    /**
     * Determines if the faceTop has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaceTopInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_FACE_TOP_MASK);
    }
    /**
     * Getter method for faceWidth.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.face_width</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceWidth
     */
    public Integer getFaceWidth(){
        return faceWidth;
    }
    /**
     * Setter method for faceWidth.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceWidth
     */
    public void setFaceWidth(Integer newVal)
    {
        if ((newVal != null && faceWidth != null && (newVal.compareTo(faceWidth) == 0)) ||
            (newVal == null && faceWidth == null && isFaceWidthInitialized())) {
            return;
        }
        faceWidth = newVal;

        modified |= FL_FACE_LIGHT_ID_FACE_WIDTH_MASK;
        initialized |= FL_FACE_LIGHT_ID_FACE_WIDTH_MASK;
    }

    /**
     * Setter method for faceWidth.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceWidth
     */
    public void setFaceWidth(int newVal)
    {
        setFaceWidth(new Integer(newVal));
    }

    /**
     * Determines if the faceWidth has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaceWidthModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_FACE_WIDTH_MASK);
    }

    /**
     * Determines if the faceWidth has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaceWidthInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_FACE_WIDTH_MASK);
    }
    /**
     * Getter method for faceHeight.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.face_height</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceHeight
     */
    public Integer getFaceHeight(){
        return faceHeight;
    }
    /**
     * Setter method for faceHeight.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceHeight
     */
    public void setFaceHeight(Integer newVal)
    {
        if ((newVal != null && faceHeight != null && (newVal.compareTo(faceHeight) == 0)) ||
            (newVal == null && faceHeight == null && isFaceHeightInitialized())) {
            return;
        }
        faceHeight = newVal;

        modified |= FL_FACE_LIGHT_ID_FACE_HEIGHT_MASK;
        initialized |= FL_FACE_LIGHT_ID_FACE_HEIGHT_MASK;
    }

    /**
     * Setter method for faceHeight.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceHeight
     */
    public void setFaceHeight(int newVal)
    {
        setFaceHeight(new Integer(newVal));
    }

    /**
     * Determines if the faceHeight has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaceHeightModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_FACE_HEIGHT_MASK);
    }

    /**
     * Determines if the faceHeight has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaceHeightInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_FACE_HEIGHT_MASK);
    }
    /**
     * Getter method for eyeLeftx.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.eye_leftx</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeLeftx
     */
    public Integer getEyeLeftx(){
        return eyeLeftx;
    }
    /**
     * Setter method for eyeLeftx.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to eyeLeftx
     */
    public void setEyeLeftx(Integer newVal)
    {
        if ((newVal != null && eyeLeftx != null && (newVal.compareTo(eyeLeftx) == 0)) ||
            (newVal == null && eyeLeftx == null && isEyeLeftxInitialized())) {
            return;
        }
        eyeLeftx = newVal;

        modified |= FL_FACE_LIGHT_ID_EYE_LEFTX_MASK;
        initialized |= FL_FACE_LIGHT_ID_EYE_LEFTX_MASK;
    }

    /**
     * Setter method for eyeLeftx.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeLeftx
     */
    public void setEyeLeftx(int newVal)
    {
        setEyeLeftx(new Integer(newVal));
    }

    /**
     * Determines if the eyeLeftx has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEyeLeftxModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_EYE_LEFTX_MASK);
    }

    /**
     * Determines if the eyeLeftx has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEyeLeftxInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_EYE_LEFTX_MASK);
    }
    /**
     * Getter method for eyeLefty.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.eye_lefty</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeLefty
     */
    public Integer getEyeLefty(){
        return eyeLefty;
    }
    /**
     * Setter method for eyeLefty.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to eyeLefty
     */
    public void setEyeLefty(Integer newVal)
    {
        if ((newVal != null && eyeLefty != null && (newVal.compareTo(eyeLefty) == 0)) ||
            (newVal == null && eyeLefty == null && isEyeLeftyInitialized())) {
            return;
        }
        eyeLefty = newVal;

        modified |= FL_FACE_LIGHT_ID_EYE_LEFTY_MASK;
        initialized |= FL_FACE_LIGHT_ID_EYE_LEFTY_MASK;
    }

    /**
     * Setter method for eyeLefty.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeLefty
     */
    public void setEyeLefty(int newVal)
    {
        setEyeLefty(new Integer(newVal));
    }

    /**
     * Determines if the eyeLefty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEyeLeftyModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_EYE_LEFTY_MASK);
    }

    /**
     * Determines if the eyeLefty has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEyeLeftyInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_EYE_LEFTY_MASK);
    }
    /**
     * Getter method for eyeRightx.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.eye_rightx</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeRightx
     */
    public Integer getEyeRightx(){
        return eyeRightx;
    }
    /**
     * Setter method for eyeRightx.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to eyeRightx
     */
    public void setEyeRightx(Integer newVal)
    {
        if ((newVal != null && eyeRightx != null && (newVal.compareTo(eyeRightx) == 0)) ||
            (newVal == null && eyeRightx == null && isEyeRightxInitialized())) {
            return;
        }
        eyeRightx = newVal;

        modified |= FL_FACE_LIGHT_ID_EYE_RIGHTX_MASK;
        initialized |= FL_FACE_LIGHT_ID_EYE_RIGHTX_MASK;
    }

    /**
     * Setter method for eyeRightx.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeRightx
     */
    public void setEyeRightx(int newVal)
    {
        setEyeRightx(new Integer(newVal));
    }

    /**
     * Determines if the eyeRightx has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEyeRightxModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_EYE_RIGHTX_MASK);
    }

    /**
     * Determines if the eyeRightx has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEyeRightxInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_EYE_RIGHTX_MASK);
    }
    /**
     * Getter method for eyeRighty.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.eye_righty</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeRighty
     */
    public Integer getEyeRighty(){
        return eyeRighty;
    }
    /**
     * Setter method for eyeRighty.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to eyeRighty
     */
    public void setEyeRighty(Integer newVal)
    {
        if ((newVal != null && eyeRighty != null && (newVal.compareTo(eyeRighty) == 0)) ||
            (newVal == null && eyeRighty == null && isEyeRightyInitialized())) {
            return;
        }
        eyeRighty = newVal;

        modified |= FL_FACE_LIGHT_ID_EYE_RIGHTY_MASK;
        initialized |= FL_FACE_LIGHT_ID_EYE_RIGHTY_MASK;
    }

    /**
     * Setter method for eyeRighty.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeRighty
     */
    public void setEyeRighty(int newVal)
    {
        setEyeRighty(new Integer(newVal));
    }

    /**
     * Determines if the eyeRighty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEyeRightyModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_EYE_RIGHTY_MASK);
    }

    /**
     * Determines if the eyeRighty has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEyeRightyInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_EYE_RIGHTY_MASK);
    }
    /**
     * Getter method for mouthX.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.mouth_x</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mouthX
     */
    public Integer getMouthX(){
        return mouthX;
    }
    /**
     * Setter method for mouthX.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mouthX
     */
    public void setMouthX(Integer newVal)
    {
        if ((newVal != null && mouthX != null && (newVal.compareTo(mouthX) == 0)) ||
            (newVal == null && mouthX == null && isMouthXInitialized())) {
            return;
        }
        mouthX = newVal;

        modified |= FL_FACE_LIGHT_ID_MOUTH_X_MASK;
        initialized |= FL_FACE_LIGHT_ID_MOUTH_X_MASK;
    }

    /**
     * Setter method for mouthX.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mouthX
     */
    public void setMouthX(int newVal)
    {
        setMouthX(new Integer(newVal));
    }

    /**
     * Determines if the mouthX has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMouthXModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_MOUTH_X_MASK);
    }

    /**
     * Determines if the mouthX has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMouthXInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_MOUTH_X_MASK);
    }
    /**
     * Getter method for mouthY.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.mouth_y</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mouthY
     */
    public Integer getMouthY(){
        return mouthY;
    }
    /**
     * Setter method for mouthY.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mouthY
     */
    public void setMouthY(Integer newVal)
    {
        if ((newVal != null && mouthY != null && (newVal.compareTo(mouthY) == 0)) ||
            (newVal == null && mouthY == null && isMouthYInitialized())) {
            return;
        }
        mouthY = newVal;

        modified |= FL_FACE_LIGHT_ID_MOUTH_Y_MASK;
        initialized |= FL_FACE_LIGHT_ID_MOUTH_Y_MASK;
    }

    /**
     * Setter method for mouthY.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mouthY
     */
    public void setMouthY(int newVal)
    {
        setMouthY(new Integer(newVal));
    }

    /**
     * Determines if the mouthY has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMouthYModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_MOUTH_Y_MASK);
    }

    /**
     * Determines if the mouthY has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMouthYInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_MOUTH_Y_MASK);
    }
    /**
     * Getter method for noseX.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.nose_x</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of noseX
     */
    public Integer getNoseX(){
        return noseX;
    }
    /**
     * Setter method for noseX.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to noseX
     */
    public void setNoseX(Integer newVal)
    {
        if ((newVal != null && noseX != null && (newVal.compareTo(noseX) == 0)) ||
            (newVal == null && noseX == null && isNoseXInitialized())) {
            return;
        }
        noseX = newVal;

        modified |= FL_FACE_LIGHT_ID_NOSE_X_MASK;
        initialized |= FL_FACE_LIGHT_ID_NOSE_X_MASK;
    }

    /**
     * Setter method for noseX.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to noseX
     */
    public void setNoseX(int newVal)
    {
        setNoseX(new Integer(newVal));
    }

    /**
     * Determines if the noseX has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoseXModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_NOSE_X_MASK);
    }

    /**
     * Determines if the noseX has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoseXInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_NOSE_X_MASK);
    }
    /**
     * Getter method for noseY.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.nose_y</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of noseY
     */
    public Integer getNoseY(){
        return noseY;
    }
    /**
     * Setter method for noseY.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to noseY
     */
    public void setNoseY(Integer newVal)
    {
        if ((newVal != null && noseY != null && (newVal.compareTo(noseY) == 0)) ||
            (newVal == null && noseY == null && isNoseYInitialized())) {
            return;
        }
        noseY = newVal;

        modified |= FL_FACE_LIGHT_ID_NOSE_Y_MASK;
        initialized |= FL_FACE_LIGHT_ID_NOSE_Y_MASK;
    }

    /**
     * Setter method for noseY.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to noseY
     */
    public void setNoseY(int newVal)
    {
        setNoseY(new Integer(newVal));
    }

    /**
     * Determines if the noseY has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoseYModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_NOSE_Y_MASK);
    }

    /**
     * Determines if the noseY has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoseYInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_NOSE_Y_MASK);
    }
    /**
     * Getter method for angleYaw.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.angle_yaw</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of angleYaw
     */
    public Integer getAngleYaw(){
        return angleYaw;
    }
    /**
     * Setter method for angleYaw.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to angleYaw
     */
    public void setAngleYaw(Integer newVal)
    {
        if ((newVal != null && angleYaw != null && (newVal.compareTo(angleYaw) == 0)) ||
            (newVal == null && angleYaw == null && isAngleYawInitialized())) {
            return;
        }
        angleYaw = newVal;

        modified |= FL_FACE_LIGHT_ID_ANGLE_YAW_MASK;
        initialized |= FL_FACE_LIGHT_ID_ANGLE_YAW_MASK;
    }

    /**
     * Setter method for angleYaw.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to angleYaw
     */
    public void setAngleYaw(int newVal)
    {
        setAngleYaw(new Integer(newVal));
    }

    /**
     * Determines if the angleYaw has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAngleYawModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_ANGLE_YAW_MASK);
    }

    /**
     * Determines if the angleYaw has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAngleYawInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_ANGLE_YAW_MASK);
    }
    /**
     * Getter method for anglePitch.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.angle_pitch</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of anglePitch
     */
    public Integer getAnglePitch(){
        return anglePitch;
    }
    /**
     * Setter method for anglePitch.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to anglePitch
     */
    public void setAnglePitch(Integer newVal)
    {
        if ((newVal != null && anglePitch != null && (newVal.compareTo(anglePitch) == 0)) ||
            (newVal == null && anglePitch == null && isAnglePitchInitialized())) {
            return;
        }
        anglePitch = newVal;

        modified |= FL_FACE_LIGHT_ID_ANGLE_PITCH_MASK;
        initialized |= FL_FACE_LIGHT_ID_ANGLE_PITCH_MASK;
    }

    /**
     * Setter method for anglePitch.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to anglePitch
     */
    public void setAnglePitch(int newVal)
    {
        setAnglePitch(new Integer(newVal));
    }

    /**
     * Determines if the anglePitch has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAnglePitchModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_ANGLE_PITCH_MASK);
    }

    /**
     * Determines if the anglePitch has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAnglePitchInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_ANGLE_PITCH_MASK);
    }
    /**
     * Getter method for angleRoll.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.angle_roll</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of angleRoll
     */
    public Integer getAngleRoll(){
        return angleRoll;
    }
    /**
     * Setter method for angleRoll.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to angleRoll
     */
    public void setAngleRoll(Integer newVal)
    {
        if ((newVal != null && angleRoll != null && (newVal.compareTo(angleRoll) == 0)) ||
            (newVal == null && angleRoll == null && isAngleRollInitialized())) {
            return;
        }
        angleRoll = newVal;

        modified |= FL_FACE_LIGHT_ID_ANGLE_ROLL_MASK;
        initialized |= FL_FACE_LIGHT_ID_ANGLE_ROLL_MASK;
    }

    /**
     * Setter method for angleRoll.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to angleRoll
     */
    public void setAngleRoll(int newVal)
    {
        setAngleRoll(new Integer(newVal));
    }

    /**
     * Determines if the angleRoll has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAngleRollModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_ANGLE_ROLL_MASK);
    }

    /**
     * Determines if the angleRoll has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAngleRollInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_ANGLE_ROLL_MASK);
    }
    /**
     * Getter method for extInfo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.ext_info</li>
     * <li>comments: 扩展字段,保存人脸检测基本信息之外的其他数据,内容由SDK负责解析</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of extInfo
     */
    public byte[] getExtInfo(){
        return extInfo;
    }
    /**
     * Setter method for extInfo.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to extInfo
     */
    public void setExtInfo(byte[] newVal)
    {
        extInfo = newVal;

        modified |= FL_FACE_LIGHT_ID_EXT_INFO_MASK;
        initialized |= FL_FACE_LIGHT_ID_EXT_INFO_MASK;
    }

    /**
     * Determines if the extInfo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExtInfoModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_EXT_INFO_MASK);
    }

    /**
     * Determines if the extInfo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExtInfoInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_EXT_INFO_MASK);
    }
    /**
     * Getter method for createTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face_light.create_time</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of createTime
     */
    public java.util.Date getCreateTime(){
        return createTime;
    }
    /**
     * Setter method for createTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(java.util.Date newVal)
    {
        if ((newVal != null && createTime != null && (newVal.compareTo(createTime) == 0)) ||
            (newVal == null && createTime == null && isCreateTimeInitialized())) {
            return;
        }
        createTime = newVal;

        modified |= FL_FACE_LIGHT_ID_CREATE_TIME_MASK;
        initialized |= FL_FACE_LIGHT_ID_CREATE_TIME_MASK;
    }

    /**
     * Setter method for createTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(long newVal)
    {
        setCreateTime(new java.util.Date(newVal));
    }

    /**
     * Determines if the createTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreateTimeModified()
    {
        return 0L != (modified & FL_FACE_LIGHT_ID_CREATE_TIME_MASK);
    }

    /**
     * Determines if the createTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreateTimeInitialized()
    {
        return 0L != (initialized & FL_FACE_LIGHT_ID_CREATE_TIME_MASK);
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return 0 != modified;
    }
  
    /**
     * Determines if the {@code column} has been modified.
     * @param columnID
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(int columnID){
        switch ( columnID ){
        case FL_FACE_LIGHT_ID_MD5:
            return isMd5Modified();
        case FL_FACE_LIGHT_ID_PERSON_ID:
            return isPersonIdModified();
        case FL_FACE_LIGHT_ID_IMG_MD5:
            return isImgMd5Modified();
        case FL_FACE_LIGHT_ID_FACE_LEFT:
            return isFaceLeftModified();
        case FL_FACE_LIGHT_ID_FACE_TOP:
            return isFaceTopModified();
        case FL_FACE_LIGHT_ID_FACE_WIDTH:
            return isFaceWidthModified();
        case FL_FACE_LIGHT_ID_FACE_HEIGHT:
            return isFaceHeightModified();
        case FL_FACE_LIGHT_ID_EYE_LEFTX:
            return isEyeLeftxModified();
        case FL_FACE_LIGHT_ID_EYE_LEFTY:
            return isEyeLeftyModified();
        case FL_FACE_LIGHT_ID_EYE_RIGHTX:
            return isEyeRightxModified();
        case FL_FACE_LIGHT_ID_EYE_RIGHTY:
            return isEyeRightyModified();
        case FL_FACE_LIGHT_ID_MOUTH_X:
            return isMouthXModified();
        case FL_FACE_LIGHT_ID_MOUTH_Y:
            return isMouthYModified();
        case FL_FACE_LIGHT_ID_NOSE_X:
            return isNoseXModified();
        case FL_FACE_LIGHT_ID_NOSE_Y:
            return isNoseYModified();
        case FL_FACE_LIGHT_ID_ANGLE_YAW:
            return isAngleYawModified();
        case FL_FACE_LIGHT_ID_ANGLE_PITCH:
            return isAnglePitchModified();
        case FL_FACE_LIGHT_ID_ANGLE_ROLL:
            return isAngleRollModified();
        case FL_FACE_LIGHT_ID_EXT_INFO:
            return isExtInfoModified();
        case FL_FACE_LIGHT_ID_CREATE_TIME:
            return isCreateTimeModified();
        }
        return false;
    }
    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param columnID
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(int columnID){
        switch(columnID) {
        case FL_FACE_LIGHT_ID_MD5:
            return isMd5Initialized();
        case FL_FACE_LIGHT_ID_PERSON_ID:
            return isPersonIdInitialized();
        case FL_FACE_LIGHT_ID_IMG_MD5:
            return isImgMd5Initialized();
        case FL_FACE_LIGHT_ID_FACE_LEFT:
            return isFaceLeftInitialized();
        case FL_FACE_LIGHT_ID_FACE_TOP:
            return isFaceTopInitialized();
        case FL_FACE_LIGHT_ID_FACE_WIDTH:
            return isFaceWidthInitialized();
        case FL_FACE_LIGHT_ID_FACE_HEIGHT:
            return isFaceHeightInitialized();
        case FL_FACE_LIGHT_ID_EYE_LEFTX:
            return isEyeLeftxInitialized();
        case FL_FACE_LIGHT_ID_EYE_LEFTY:
            return isEyeLeftyInitialized();
        case FL_FACE_LIGHT_ID_EYE_RIGHTX:
            return isEyeRightxInitialized();
        case FL_FACE_LIGHT_ID_EYE_RIGHTY:
            return isEyeRightyInitialized();
        case FL_FACE_LIGHT_ID_MOUTH_X:
            return isMouthXInitialized();
        case FL_FACE_LIGHT_ID_MOUTH_Y:
            return isMouthYInitialized();
        case FL_FACE_LIGHT_ID_NOSE_X:
            return isNoseXInitialized();
        case FL_FACE_LIGHT_ID_NOSE_Y:
            return isNoseYInitialized();
        case FL_FACE_LIGHT_ID_ANGLE_YAW:
            return isAngleYawInitialized();
        case FL_FACE_LIGHT_ID_ANGLE_PITCH:
            return isAnglePitchInitialized();
        case FL_FACE_LIGHT_ID_ANGLE_ROLL:
            return isAngleRollInitialized();
        case FL_FACE_LIGHT_ID_EXT_INFO:
            return isExtInfoInitialized();
        case FL_FACE_LIGHT_ID_CREATE_TIME:
            return isCreateTimeInitialized();
        }
        return false;
    }
    /**
     * Determines if the {@code column} has been modified.
     * @param column
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(String column){
        int index = FL_FACE_LIGHT_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_FACE_LIGHT_JAVA_FIELDS_LIST.indexOf(column);
        return isModified(index);
    }

    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param column
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(String column){
        int index = FL_FACE_LIGHT_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_FACE_LIGHT_JAVA_FIELDS_LIST.indexOf(column);
        return isInitialized(index);
    }
    
    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        modified = 0L;
    }

    @Override
    public boolean equals(Object object)
    {
        if (!(object instanceof FlFaceLightBean)) {
            return false;
        }

        FlFaceLightBean obj = (FlFaceLightBean) object;
        return new EqualsBuilder()
            .append(getMd5(), obj.getMd5())
            .append(getPersonId(), obj.getPersonId())
            .append(getImgMd5(), obj.getImgMd5())
            .append(getFaceLeft(), obj.getFaceLeft())
            .append(getFaceTop(), obj.getFaceTop())
            .append(getFaceWidth(), obj.getFaceWidth())
            .append(getFaceHeight(), obj.getFaceHeight())
            .append(getEyeLeftx(), obj.getEyeLeftx())
            .append(getEyeLefty(), obj.getEyeLefty())
            .append(getEyeRightx(), obj.getEyeRightx())
            .append(getEyeRighty(), obj.getEyeRighty())
            .append(getMouthX(), obj.getMouthX())
            .append(getMouthY(), obj.getMouthY())
            .append(getNoseX(), obj.getNoseX())
            .append(getNoseY(), obj.getNoseY())
            .append(getAngleYaw(), obj.getAngleYaw())
            .append(getAnglePitch(), obj.getAnglePitch())
            .append(getAngleRoll(), obj.getAngleRoll())
            .append(getExtInfo(), obj.getExtInfo())
            .append(getCreateTime(), obj.getCreateTime())
            .isEquals();
    }

    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(-82280557, -700257973)
            .append(getMd5())
            .append(getPersonId())
            .append(getImgMd5())
            .append(getFaceLeft())
            .append(getFaceTop())
            .append(getFaceWidth())
            .append(getFaceHeight())
            .append(getEyeLeftx())
            .append(getEyeLefty())
            .append(getEyeRightx())
            .append(getEyeRighty())
            .append(getMouthX())
            .append(getMouthY())
            .append(getNoseX())
            .append(getNoseY())
            .append(getAngleYaw())
            .append(getAnglePitch())
            .append(getAngleRoll())
            .append(getExtInfo())
            .append(getCreateTime())
            .toHashCode();
    }

    @Override
    public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(Integer.toHexString(this.hashCode())).append("[\n")
            .append("\tmd5=").append(getMd5()).append("\n")
            .append("\tperson_id=").append(getPersonId()).append("\n")
            .append("\timg_md5=").append(getImgMd5()).append("\n")
            .append("\tface_left=").append(getFaceLeft()).append("\n")
            .append("\tface_top=").append(getFaceTop()).append("\n")
            .append("\tface_width=").append(getFaceWidth()).append("\n")
            .append("\tface_height=").append(getFaceHeight()).append("\n")
            .append("\teye_leftx=").append(getEyeLeftx()).append("\n")
            .append("\teye_lefty=").append(getEyeLefty()).append("\n")
            .append("\teye_rightx=").append(getEyeRightx()).append("\n")
            .append("\teye_righty=").append(getEyeRighty()).append("\n")
            .append("\tmouth_x=").append(getMouthX()).append("\n")
            .append("\tmouth_y=").append(getMouthY()).append("\n")
            .append("\tnose_x=").append(getNoseX()).append("\n")
            .append("\tnose_y=").append(getNoseY()).append("\n")
            .append("\tangle_yaw=").append(getAngleYaw()).append("\n")
            .append("\tangle_pitch=").append(getAnglePitch()).append("\n")
            .append("\tangle_roll=").append(getAngleRoll()).append("\n")
            .append("\text_info=").append(getExtInfo().length).append(" bytes\n")
            .append("\tcreate_time=").append(getCreateTime()).append("\n")
            .append("]\n")
            .toString();
    }

    @Override
    public int compareTo(FlFaceLightBean object){
        return new CompareToBuilder()
            .append(getMd5(), object.getMd5())
            .append(getPersonId(), object.getPersonId())
            .append(getImgMd5(), object.getImgMd5())
            .append(getFaceLeft(), object.getFaceLeft())
            .append(getFaceTop(), object.getFaceTop())
            .append(getFaceWidth(), object.getFaceWidth())
            .append(getFaceHeight(), object.getFaceHeight())
            .append(getEyeLeftx(), object.getEyeLeftx())
            .append(getEyeLefty(), object.getEyeLefty())
            .append(getEyeRightx(), object.getEyeRightx())
            .append(getEyeRighty(), object.getEyeRighty())
            .append(getMouthX(), object.getMouthX())
            .append(getMouthY(), object.getMouthY())
            .append(getNoseX(), object.getNoseX())
            .append(getNoseY(), object.getNoseY())
            .append(getAngleYaw(), object.getAngleYaw())
            .append(getAnglePitch(), object.getAnglePitch())
            .append(getAngleRoll(), object.getAngleRoll())
            .append(getExtInfo(), object.getExtInfo())
            .append(getCreateTime(), object.getCreateTime())
            .toComparison();
    }
    /**
    * Copies property of the passed bean into the current bean.<br>
    * if bean.isNew() is true, call {@link #copyIfNotNull(GfCodeBeanBase)}
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copy(FlFaceLightBean bean)
    {
        if(bean.isNew()){
            copyIfNotNull(bean);
        }else{        
            isNew(bean.isNew());
            setMd5(bean.getMd5());
            setPersonId(bean.getPersonId());
            setImgMd5(bean.getImgMd5());
            setFaceLeft(bean.getFaceLeft());
            setFaceTop(bean.getFaceTop());
            setFaceWidth(bean.getFaceWidth());
            setFaceHeight(bean.getFaceHeight());
            setEyeLeftx(bean.getEyeLeftx());
            setEyeLefty(bean.getEyeLefty());
            setEyeRightx(bean.getEyeRightx());
            setEyeRighty(bean.getEyeRighty());
            setMouthX(bean.getMouthX());
            setMouthY(bean.getMouthY());
            setNoseX(bean.getNoseX());
            setNoseY(bean.getNoseY());
            setAngleYaw(bean.getAngleYaw());
            setAnglePitch(bean.getAnglePitch());
            setAngleRoll(bean.getAngleRoll());
            setExtInfo(bean.getExtInfo());
            setCreateTime(bean.getCreateTime());
        }
    }
    /**
    * Copies property of the passed bean into the current bean if property not null.
    *
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copyIfNotNull(FlFaceLightBean bean)
    {
        isNew(bean.isNew());
        if(bean.getMd5()!=null)
            setMd5(bean.getMd5());
        if(bean.getPersonId()!=null)
            setPersonId(bean.getPersonId());
        if(bean.getImgMd5()!=null)
            setImgMd5(bean.getImgMd5());
        if(bean.getFaceLeft()!=null)
            setFaceLeft(bean.getFaceLeft());
        if(bean.getFaceTop()!=null)
            setFaceTop(bean.getFaceTop());
        if(bean.getFaceWidth()!=null)
            setFaceWidth(bean.getFaceWidth());
        if(bean.getFaceHeight()!=null)
            setFaceHeight(bean.getFaceHeight());
        if(bean.getEyeLeftx()!=null)
            setEyeLeftx(bean.getEyeLeftx());
        if(bean.getEyeLefty()!=null)
            setEyeLefty(bean.getEyeLefty());
        if(bean.getEyeRightx()!=null)
            setEyeRightx(bean.getEyeRightx());
        if(bean.getEyeRighty()!=null)
            setEyeRighty(bean.getEyeRighty());
        if(bean.getMouthX()!=null)
            setMouthX(bean.getMouthX());
        if(bean.getMouthY()!=null)
            setMouthY(bean.getMouthY());
        if(bean.getNoseX()!=null)
            setNoseX(bean.getNoseX());
        if(bean.getNoseY()!=null)
            setNoseY(bean.getNoseY());
        if(bean.getAngleYaw()!=null)
            setAngleYaw(bean.getAngleYaw());
        if(bean.getAnglePitch()!=null)
            setAnglePitch(bean.getAnglePitch());
        if(bean.getAngleRoll()!=null)
            setAngleRoll(bean.getAngleRoll());
        if(bean.getExtInfo()!=null)
            setExtInfo(bean.getExtInfo());
        if(bean.getCreateTime()!=null)
            setCreateTime(bean.getCreateTime());
    }

    /**
    * set all field to null
    *
    * @author guyadong
    */
    public FlFaceLightBean clean()
    {
        isNew(true);
        setMd5(null);
        setPersonId(null);
        setImgMd5(null);
        setFaceLeft(null);
        setFaceTop(null);
        setFaceWidth(null);
        setFaceHeight(null);
        setEyeLeftx(null);
        setEyeLefty(null);
        setEyeRightx(null);
        setEyeRighty(null);
        setMouthX(null);
        setMouthY(null);
        setNoseX(null);
        setNoseY(null);
        setAngleYaw(null);
        setAnglePitch(null);
        setAngleRoll(null);
        setExtInfo(null);
        setCreateTime(null);
        return this;
    }
    
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column id list to copy into the current bean
     */
    public void copy(FlFaceLightBean bean, int... fieldList)
    {
        if (null == fieldList || 0 == fieldList.length)
            copy(bean);
        else
            for (int i = 0; i < fieldList.length; i++) {
                setValue(fieldList[i], bean.getValue(fieldList[i]));
            }
    }
        
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column name list to copy into the current bean
     */
    public void copy(FlFaceLightBean bean, String... fieldList)
    {
        if (null == fieldList || 0 == fieldList.length)
            copy(bean);
        else
            for (int i = 0; i < fieldList.length; i++) {
                setValue(fieldList[i].trim(), bean.getValue(fieldList[i].trim()));
            }
    }

    /**
     * return a object representation of the given column id
     */
    @SuppressWarnings("unchecked")
    public <T>T getValue(int columnID)
    {
        switch( columnID ){
        case FL_FACE_LIGHT_ID_MD5: 
            return (T)getMd5();        
        case FL_FACE_LIGHT_ID_PERSON_ID: 
            return (T)getPersonId();        
        case FL_FACE_LIGHT_ID_IMG_MD5: 
            return (T)getImgMd5();        
        case FL_FACE_LIGHT_ID_FACE_LEFT: 
            return (T)getFaceLeft();        
        case FL_FACE_LIGHT_ID_FACE_TOP: 
            return (T)getFaceTop();        
        case FL_FACE_LIGHT_ID_FACE_WIDTH: 
            return (T)getFaceWidth();        
        case FL_FACE_LIGHT_ID_FACE_HEIGHT: 
            return (T)getFaceHeight();        
        case FL_FACE_LIGHT_ID_EYE_LEFTX: 
            return (T)getEyeLeftx();        
        case FL_FACE_LIGHT_ID_EYE_LEFTY: 
            return (T)getEyeLefty();        
        case FL_FACE_LIGHT_ID_EYE_RIGHTX: 
            return (T)getEyeRightx();        
        case FL_FACE_LIGHT_ID_EYE_RIGHTY: 
            return (T)getEyeRighty();        
        case FL_FACE_LIGHT_ID_MOUTH_X: 
            return (T)getMouthX();        
        case FL_FACE_LIGHT_ID_MOUTH_Y: 
            return (T)getMouthY();        
        case FL_FACE_LIGHT_ID_NOSE_X: 
            return (T)getNoseX();        
        case FL_FACE_LIGHT_ID_NOSE_Y: 
            return (T)getNoseY();        
        case FL_FACE_LIGHT_ID_ANGLE_YAW: 
            return (T)getAngleYaw();        
        case FL_FACE_LIGHT_ID_ANGLE_PITCH: 
            return (T)getAnglePitch();        
        case FL_FACE_LIGHT_ID_ANGLE_ROLL: 
            return (T)getAngleRoll();        
        case FL_FACE_LIGHT_ID_EXT_INFO: 
            return (T)getExtInfo();        
        case FL_FACE_LIGHT_ID_CREATE_TIME: 
            return (T)getCreateTime();        
        }
        return null;
    }

    /**
     * set a value representation of the given column id
     */
    public <T> void setValue(int columnID,T value)
    {
        switch( columnID ) {
        case FL_FACE_LIGHT_ID_MD5:        
            setMd5((String)value);
        case FL_FACE_LIGHT_ID_PERSON_ID:        
            setPersonId((Integer)value);
        case FL_FACE_LIGHT_ID_IMG_MD5:        
            setImgMd5((String)value);
        case FL_FACE_LIGHT_ID_FACE_LEFT:        
            setFaceLeft((Integer)value);
        case FL_FACE_LIGHT_ID_FACE_TOP:        
            setFaceTop((Integer)value);
        case FL_FACE_LIGHT_ID_FACE_WIDTH:        
            setFaceWidth((Integer)value);
        case FL_FACE_LIGHT_ID_FACE_HEIGHT:        
            setFaceHeight((Integer)value);
        case FL_FACE_LIGHT_ID_EYE_LEFTX:        
            setEyeLeftx((Integer)value);
        case FL_FACE_LIGHT_ID_EYE_LEFTY:        
            setEyeLefty((Integer)value);
        case FL_FACE_LIGHT_ID_EYE_RIGHTX:        
            setEyeRightx((Integer)value);
        case FL_FACE_LIGHT_ID_EYE_RIGHTY:        
            setEyeRighty((Integer)value);
        case FL_FACE_LIGHT_ID_MOUTH_X:        
            setMouthX((Integer)value);
        case FL_FACE_LIGHT_ID_MOUTH_Y:        
            setMouthY((Integer)value);
        case FL_FACE_LIGHT_ID_NOSE_X:        
            setNoseX((Integer)value);
        case FL_FACE_LIGHT_ID_NOSE_Y:        
            setNoseY((Integer)value);
        case FL_FACE_LIGHT_ID_ANGLE_YAW:        
            setAngleYaw((Integer)value);
        case FL_FACE_LIGHT_ID_ANGLE_PITCH:        
            setAnglePitch((Integer)value);
        case FL_FACE_LIGHT_ID_ANGLE_ROLL:        
            setAngleRoll((Integer)value);
        case FL_FACE_LIGHT_ID_EXT_INFO:        
            setExtInfo((byte[])value);
        case FL_FACE_LIGHT_ID_CREATE_TIME:        
            setCreateTime((java.util.Date)value);
        }
    }
    
    /**
     * return a object representation of the given field
     */
    public <T>T getValue(String column)
    {
        int index = FL_FACE_LIGHT_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_FACE_LIGHT_JAVA_FIELDS_LIST.indexOf(column);
        return getValue(index);
    }

    /**
     * set a value representation of the given field
     */
    public <T>void setValue(String column,T value)
    {
        int index = FL_FACE_LIGHT_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_FACE_LIGHT_JAVA_FIELDS_LIST.indexOf(column);
        setValue(index,value);
    }
}
