// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package net.gdface.facelog.dborm.face;
import net.gdface.facelog.dborm.BaseBean;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import net.gdface.facelog.dborm.CompareToBuilder;
import net.gdface.facelog.dborm.EqualsBuilder;
import net.gdface.facelog.dborm.HashCodeBuilder;

/**
 * FlFeatureBean is a mapping of fl_feature Table.
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: VIEW </li>
 * </ul>
 * @author guyadong
*/
public class FlFeatureBeanBase
    implements Serializable,BaseBean<FlFeatureBeanBase>
{
	private static final long serialVersionUID = -1343679229835976550L;
	
    protected java.util.Date createTime;

    protected byte[] feature;

    protected String imgMd5;

    protected Integer personId;

    protected String md5;

    private boolean _isNew = true;
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void setNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Prefered methods to create a FlFeatureBeanBase is via the createFlFeatureBean method in FlFeatureManager or
     * via the factory class FlFeatureFactory create method
     */
    public FlFeatureBeanBase(){
    }
    /**
     * create a FlFeatureBeanBase from a instance
     */
    public FlFeatureBeanBase(FlFeatureBeanBase bean){
        this.copy(bean);
    }
    /**
     * Getter method for createTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_feature.create_time</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of createTime
     */
    public java.util.Date getCreateTime(){
        return createTime;
    }
    /**
     * Setter method for createTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(java.util.Date newVal){    
        createTime = newVal;
    }

    /**
     * Setter method for createTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(long newVal){
        setCreateTime(new java.util.Date(newVal));
    }


    /**
     * Getter method for feature.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_feature.feature</li>
     * <li>comments: 二进制特征数据</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of feature
     */
    public byte[] getFeature(){
        return feature;
    }
    /**
     * Setter method for feature.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to feature
     */
    public void setFeature(byte[] newVal){    
        feature = newVal;
    }



    /**
     * Getter method for imgMd5.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_feature.img_md5</li>
     * <li>comments: 外键,所属图像id</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of imgMd5
     */
    public String getImgMd5(){
        return imgMd5;
    }
    /**
     * Setter method for imgMd5.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to imgMd5
     */
    public void setImgMd5(String newVal){    
        imgMd5 = newVal;
    }



    /**
     * Getter method for personId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_feature.person_id</li>
     * <li>comments: 外键,所属用户id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of personId
     */
    public Integer getPersonId(){
        return personId;
    }
    /**
     * Setter method for personId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to personId
     */
    public void setPersonId(Integer newVal){    
        personId = newVal;
    }

    /**
     * Setter method for personId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to personId
     */
    public void setPersonId(int newVal){
        setPersonId(new Integer(newVal));
    }


    /**
     * Getter method for md5.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_feature.md5</li>
     * <li>comments: 主键,特征数据md5校验码</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of md5
     */
    public String getMd5(){
        return md5;
    }
    /**
     * Setter method for md5.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to md5
     */
    public void setMd5(String newVal){    
        md5 = newVal;
    }



    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof FlFeatureBean)) {
            return false;
        }

        FlFeatureBean obj = (FlFeatureBean) object;
        return new EqualsBuilder()
            .append(getCreateTime(), obj.getCreateTime())
            .append(getFeature(), obj.getFeature())
            .append(getImgMd5(), obj.getImgMd5())
            .append(getPersonId(), obj.getPersonId())
            .append(getMd5(), obj.getMd5())
            .isEquals();
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode()
    {
        return new HashCodeBuilder(-82280557, -700257973)
            .append(getCreateTime())
            .append(getFeature())
            .append(getImgMd5())
            .append(getPersonId())
            .append(getMd5())
            .toHashCode();
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(Integer.toHexString(this.hashCode())).append("[\n")
            .append("\tcreate_time=").append(getCreateTime()).append("\n")
            .append("\tfeature=").append(getFeature()).append("\n")
            .append("\timg_md5=").append(getImgMd5()).append("\n")
            .append("\tperson_id=").append(getPersonId()).append("\n")
            .append("\tmd5=").append(getMd5()).append("\n")
            .append("]\n")
            .toString();
    }


    public int compareTo(Object object){
        FlFeatureBean obj = (FlFeatureBean) object;
        return new CompareToBuilder()
            .append(getCreateTime(), obj.getCreateTime())
            .append(getFeature(), obj.getFeature())
            .append(getImgMd5(), obj.getImgMd5())
            .append(getPersonId(), obj.getPersonId())
            .append(getMd5(), obj.getMd5())
            .toComparison();
    }
    /**
    * Copies proterty of the passed bean into the current bean.<br>
    * if bean.isNew() is true, call {@link #copyIfNotNull(GfCodeBeanBase)}
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copy(FlFeatureBeanBase bean)
    {
        if(bean.isNew()){
            copyIfNotNull(bean);
        }else{        
            isNew(bean.isNew());
            setCreateTime(bean.getCreateTime());
            setFeature(bean.getFeature());
            setImgMd5(bean.getImgMd5());
            setPersonId(bean.getPersonId());
            setMd5(bean.getMd5());
        }
    }
    /**
    * Copies proterty of the passed bean into the current bean if property not null.
    *
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copyIfNotNull(FlFeatureBeanBase bean)
    {
        isNew(bean.isNew());
        if(bean.getCreateTime()!=null)
            setCreateTime(bean.getCreateTime());
        if(bean.getFeature()!=null)
            setFeature(bean.getFeature());
        if(bean.getImgMd5()!=null)
            setImgMd5(bean.getImgMd5());
        if(bean.getPersonId()!=null)
            setPersonId(bean.getPersonId());
        if(bean.getMd5()!=null)
            setMd5(bean.getMd5());
    }

    /**
    * set all field to null
    *
    * @author guyadong
    */
    public FlFeatureBeanBase clean()
    {
        isNew(true);
        setCreateTime(null);
        setFeature(null);
        setImgMd5(null);
        setPersonId(null);
        setMd5(null);
        return this;
    }
    
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column name list to copy into the current bean
     */
    public void copy(FlFeatureBeanBase bean, String[] fieldList)
    {
        if (null == fieldList)
            copy(bean);
        else
            for (int i = 0; i < fieldList.length; i++) {
                setObject(fieldList[i].trim(), bean.getObject(fieldList[i].trim()));
            }
    }
    /**
     * create new FlFeatureBean form {@code bean} if not instanceof FlFeatureBean<br>
     * 
    * @param bean
    * @return null if bean is null
    * @see #toFullBean()
    * @author guyadong
    */
    public final static FlFeatureBean toFullBean(FlFeatureBeanBase bean)
    {
        return null==bean?null:(bean.toFullBean());
    }
    /**
    * @param bases
    * @return
    * @see #toFullBean(FlFeatureBeanBase)
    * @author guyadong
    */
    public static FlFeatureBean[] toFullBean(FlFeatureBeanBase[] bases){
        FlFeatureBean[] b = new FlFeatureBean[bases.length];
        for(int i=0;i<b.length;i++){
            b[i]=toFullBean(bases[i]);
        }
        return b;
    }
    /**
     * create new FlFeatureBean form {@code bean} if not instanceof FlFeatureBean<br>
     * 
    * @param bean
    * @return null if bean is null
    * @author guyadong
    */
    @SuppressWarnings("unchecked")
    public FlFeatureBean toFullBean()
    {
        return this instanceof FlFeatureBean?(FlFeatureBean)this:new FlFeatureBean(this);
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> readDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("create_time", getCreateTime() == null ? "" : getCreateTime().toString());
        dictionnary.put("feature", getFeature() == null ? "" : getFeature().toString());
        dictionnary.put("img_md5", getImgMd5() == null ? "" : getImgMd5().toString());
        dictionnary.put("person_id", getPersonId() == null ? "" : getPersonId().toString());
        dictionnary.put("md5", getMd5() == null ? "" : getMd5().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map<String,String> readPkDictionnary()
    {
        return readDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("create_time".equalsIgnoreCase(column) || "createTime".equalsIgnoreCase(column)) {
            return getCreateTime() == null ? "" : getCreateTime().toString();
        } else if ("feature".equalsIgnoreCase(column) || "feature".equalsIgnoreCase(column)) {
            return getFeature() == null ? "" : getFeature().toString();
        } else if ("img_md5".equalsIgnoreCase(column) || "imgMd5".equalsIgnoreCase(column)) {
            return getImgMd5() == null ? "" : getImgMd5().toString();
        } else if ("person_id".equalsIgnoreCase(column) || "personId".equalsIgnoreCase(column)) {
            return getPersonId() == null ? "" : getPersonId().toString();
        } else if ("md5".equalsIgnoreCase(column) || "md5".equalsIgnoreCase(column)) {
            return getMd5() == null ? "" : getMd5().toString();
        }
        return "";
    }

    /**
     * return a object representation of the given field
     */
    @SuppressWarnings("unchecked")
    public <T>T getObject(String column)
    {
        if (null == column || "".equals(column)) {
            return null;
        } else if ("create_time".equalsIgnoreCase(column) || "createTime".equalsIgnoreCase(column)) {
            return getCreateTime() == null ? null : (T)getCreateTime();
        } else if ("feature".equalsIgnoreCase(column) || "feature".equalsIgnoreCase(column)) {
            return getFeature() == null ? null : (T)getFeature();
        } else if ("img_md5".equalsIgnoreCase(column) || "imgMd5".equalsIgnoreCase(column)) {
            return getImgMd5() == null ? null : (T)getImgMd5();
        } else if ("person_id".equalsIgnoreCase(column) || "personId".equalsIgnoreCase(column)) {
            return getPersonId() == null ? null : (T)getPersonId();
        } else if ("md5".equalsIgnoreCase(column) || "md5".equalsIgnoreCase(column)) {
            return getMd5() == null ? null : (T)getMd5();
        }
        return null;
    }

    /**
     * set a value representation of the given field
     */
    public <T>void setObject(String column,T object)
    {
        if (null == column || "".equals(column)) {
            return ;
        } else if ("create_time".equalsIgnoreCase(column) || "createTime".equalsIgnoreCase(column)) {
            setCreateTime((java.util.Date)object);
        } else if ("feature".equalsIgnoreCase(column) || "feature".equalsIgnoreCase(column)) {
            setFeature((byte[])object);
        } else if ("img_md5".equalsIgnoreCase(column) || "imgMd5".equalsIgnoreCase(column)) {
            setImgMd5((String)object);
        } else if ("person_id".equalsIgnoreCase(column) || "personId".equalsIgnoreCase(column)) {
            setPersonId((Integer)object);
        } else if ("md5".equalsIgnoreCase(column) || "md5".equalsIgnoreCase(column)) {
            setMd5((String)object);
        }
    }
}
