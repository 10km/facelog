// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package net.gdface.facelog.dborm.image;
import net.gdface.facelog.dborm.BaseBean;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import net.gdface.facelog.dborm.device.FlDeviceBean;
import net.gdface.facelog.dborm.image.FlStoreBean;
import net.gdface.facelog.dborm.CompareToBuilder;
import net.gdface.facelog.dborm.EqualsBuilder;
import net.gdface.facelog.dborm.HashCodeBuilder;

/**
 * FlImageBean is a mapping of fl_image Table.
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: 图像存储表,用于存储系统中所有用到的图像数据 </li>
 * </ul>
 * @author guyadong
*/
public class FlImageBeanBase
    implements Serializable,BaseBean<FlImageBeanBase>
{
	private static final long serialVersionUID = -7493695467700260531L;
	
    protected Integer deviceId;

    protected String thumbMd5;

    protected Integer faceNum;

    protected Integer depth;

    protected Integer height;

    protected Integer width;

    protected String format;

    protected String md5;

    private boolean _isNew = true;
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void setNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Prefered methods to create a FlImageBeanBase is via the createFlImageBean method in FlImageManager or
     * via the factory class FlImageFactory create method
     */
    public FlImageBeanBase(){
    }
    /**
     * create a FlImageBeanBase from a instance
     */
    public FlImageBeanBase(FlImageBeanBase bean){
        this.copy(bean);
    }
    /**
     * Getter method for deviceId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_image.device_id</li>
     * <li> foreign key: fl_device.id</li>
     * <li>comments: 外键,图像来源设备</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of deviceId
     */
    public Integer getDeviceId(){
        return deviceId;
    }
    /**
     * Setter method for deviceId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deviceId
     */
    public void setDeviceId(Integer newVal){    
        deviceId = newVal;
    }

    /**
     * Setter method for deviceId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deviceId
     */
    public void setDeviceId(int newVal){
        setDeviceId(new Integer(newVal));
    }


    /**
     * Getter method for thumbMd5.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_image.thumb_md5</li>
     * <li> foreign key: fl_store.md5</li>
     * <li>comments: 外键,缩略图md5,图像数据存储在fl_imae_store(md5)</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of thumbMd5
     */
    public String getThumbMd5(){
        return thumbMd5;
    }
    /**
     * Setter method for thumbMd5.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to thumbMd5
     */
    public void setThumbMd5(String newVal){    
        thumbMd5 = newVal;
    }



    /**
     * Getter method for faceNum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_image.face_num</li>
     * <li>comments: 图像中的人脸数目</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceNum
     */
    public Integer getFaceNum(){
        return faceNum;
    }
    /**
     * Setter method for faceNum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceNum
     */
    public void setFaceNum(Integer newVal){    
        faceNum = newVal;
    }

    /**
     * Setter method for faceNum.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceNum
     */
    public void setFaceNum(int newVal){
        setFaceNum(new Integer(newVal));
    }


    /**
     * Getter method for depth.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_image.depth</li>
     * <li>comments: 通道数</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of depth
     */
    public Integer getDepth(){
        return depth;
    }
    /**
     * Setter method for depth.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to depth
     */
    public void setDepth(Integer newVal){    
        depth = newVal;
    }

    /**
     * Setter method for depth.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to depth
     */
    public void setDepth(int newVal){
        setDepth(new Integer(newVal));
    }


    /**
     * Getter method for height.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_image.height</li>
     * <li>comments: 图像高度</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of height
     */
    public Integer getHeight(){
        return height;
    }
    /**
     * Setter method for height.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to height
     */
    public void setHeight(Integer newVal){    
        height = newVal;
    }

    /**
     * Setter method for height.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to height
     */
    public void setHeight(int newVal){
        setHeight(new Integer(newVal));
    }


    /**
     * Getter method for width.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_image.width</li>
     * <li>comments: 图像宽度</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of width
     */
    public Integer getWidth(){
        return width;
    }
    /**
     * Setter method for width.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to width
     */
    public void setWidth(Integer newVal){    
        width = newVal;
    }

    /**
     * Setter method for width.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to width
     */
    public void setWidth(int newVal){
        setWidth(new Integer(newVal));
    }


    /**
     * Getter method for format.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_image.format</li>
     * <li>comments: 图像格式</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of format
     */
    public String getFormat(){
        return format;
    }
    /**
     * Setter method for format.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to format
     */
    public void setFormat(String newVal){    
        format = newVal;
    }



    /**
     * Getter method for md5.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_image.md5</li>
     * <li> foreign key: fl_store.md5</li>
     * <li> imported key: fl_face.img_md5</li>
     * <li> imported key: fl_person.photo_id</li>
     * <li>comments: 主键,图像md5检验码,同时也是外键fl_store(md5)</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of md5
     */
    public String getMd5(){
        return md5;
    }
    /**
     * Setter method for md5.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to md5
     */
    public void setMd5(String newVal){    
        md5 = newVal;
    }



    /** The FlDevice referenced by this bean. */
    private FlDeviceBean referencedFlDevice;
    /** Getter method for FlDeviceBean. */
    public FlDeviceBean getFlDeviceBean() {
        return this.referencedFlDevice;
    }
    /** Setter method for FlDeviceBean. */
    public void setFlDeviceBean(FlDeviceBean reference) {
        this.referencedFlDevice = reference;
    }    
    /** The FlStore referenced by this bean. */
    private FlStoreBean referencedFlStore;
    /** Getter method for FlStoreBean. */
    public FlStoreBean getFlStoreBean() {
        return this.referencedFlStore;
    }
    /** Setter method for FlStoreBean. */
    public void setFlStoreBean(FlStoreBean reference) {
        this.referencedFlStore = reference;
    }    
    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof FlImageBean)) {
            return false;
        }

        FlImageBean obj = (FlImageBean) object;
        return new EqualsBuilder()
            .append(getDeviceId(), obj.getDeviceId())
            .append(getThumbMd5(), obj.getThumbMd5())
            .append(getFaceNum(), obj.getFaceNum())
            .append(getDepth(), obj.getDepth())
            .append(getHeight(), obj.getHeight())
            .append(getWidth(), obj.getWidth())
            .append(getFormat(), obj.getFormat())
            .append(getMd5(), obj.getMd5())
            .isEquals();
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode()
    {
        return new HashCodeBuilder(-82280557, -700257973)
            .append(getDeviceId())
            .append(getThumbMd5())
            .append(getFaceNum())
            .append(getDepth())
            .append(getHeight())
            .append(getWidth())
            .append(getFormat())
            .append(getMd5())
            .toHashCode();
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(Integer.toHexString(this.hashCode())).append("[\n")
            .append("\tdevice_id=").append(getDeviceId()).append("\n")
            .append("\tthumb_md5=").append(getThumbMd5()).append("\n")
            .append("\tface_num=").append(getFaceNum()).append("\n")
            .append("\tdepth=").append(getDepth()).append("\n")
            .append("\theight=").append(getHeight()).append("\n")
            .append("\twidth=").append(getWidth()).append("\n")
            .append("\tformat=").append(getFormat()).append("\n")
            .append("\tmd5=").append(getMd5()).append("\n")
            .append("]\n")
            .toString();
    }


    public int compareTo(Object object){
        FlImageBean obj = (FlImageBean) object;
        return new CompareToBuilder()
            .append(getDeviceId(), obj.getDeviceId())
            .append(getThumbMd5(), obj.getThumbMd5())
            .append(getFaceNum(), obj.getFaceNum())
            .append(getDepth(), obj.getDepth())
            .append(getHeight(), obj.getHeight())
            .append(getWidth(), obj.getWidth())
            .append(getFormat(), obj.getFormat())
            .append(getMd5(), obj.getMd5())
            .toComparison();
    }
    /**
    * Copies proterty of the passed bean into the current bean.<br>
    * if bean.isNew() is true, call {@link #copyIfNotNull(GfCodeBeanBase)}
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copy(FlImageBeanBase bean)
    {
        if(bean.isNew()){
            copyIfNotNull(bean);
        }else{        
            isNew(bean.isNew());
            setDeviceId(bean.getDeviceId());
            setThumbMd5(bean.getThumbMd5());
            setFaceNum(bean.getFaceNum());
            setDepth(bean.getDepth());
            setHeight(bean.getHeight());
            setWidth(bean.getWidth());
            setFormat(bean.getFormat());
            setMd5(bean.getMd5());
        }
    }
    /**
    * Copies proterty of the passed bean into the current bean if property not null.
    *
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copyIfNotNull(FlImageBeanBase bean)
    {
        isNew(bean.isNew());
        if(bean.getDeviceId()!=null)
            setDeviceId(bean.getDeviceId());
        if(bean.getThumbMd5()!=null)
            setThumbMd5(bean.getThumbMd5());
        if(bean.getFaceNum()!=null)
            setFaceNum(bean.getFaceNum());
        if(bean.getDepth()!=null)
            setDepth(bean.getDepth());
        if(bean.getHeight()!=null)
            setHeight(bean.getHeight());
        if(bean.getWidth()!=null)
            setWidth(bean.getWidth());
        if(bean.getFormat()!=null)
            setFormat(bean.getFormat());
        if(bean.getMd5()!=null)
            setMd5(bean.getMd5());
    }

    /**
    * set all field to null
    *
    * @author guyadong
    */
    public FlImageBeanBase clean()
    {
        isNew(true);
        setDeviceId(null);
        setThumbMd5(null);
        setFaceNum(null);
        setDepth(null);
        setHeight(null);
        setWidth(null);
        setFormat(null);
        setMd5(null);
        return this;
    }
    
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column name list to copy into the current bean
     */
    public void copy(FlImageBeanBase bean, String[] fieldList)
    {
        if (null == fieldList)
            copy(bean);
        else
            for (int i = 0; i < fieldList.length; i++) {
                setObject(fieldList[i].trim(), bean.getObject(fieldList[i].trim()));
            }
    }
    /**
     * create new FlImageBean form {@code bean} if not instanceof FlImageBean<br>
     * 
    * @param bean
    * @return null if bean is null
    * @see #toFullBean()
    * @author guyadong
    */
    public final static FlImageBean toFullBean(FlImageBeanBase bean)
    {
        return null==bean?null:(bean.toFullBean());
    }
    /**
    * @param bases
    * @return
    * @see #toFullBean(FlImageBeanBase)
    * @author guyadong
    */
    public static FlImageBean[] toFullBean(FlImageBeanBase[] bases){
        FlImageBean[] b = new FlImageBean[bases.length];
        for(int i=0;i<b.length;i++){
            b[i]=toFullBean(bases[i]);
        }
        return b;
    }
    /**
     * create new FlImageBean form {@code bean} if not instanceof FlImageBean<br>
     * 
    * @param bean
    * @return null if bean is null
    * @author guyadong
    */
    @SuppressWarnings("unchecked")
    public FlImageBean toFullBean()
    {
        return this instanceof FlImageBean?(FlImageBean)this:new FlImageBean(this);
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> readDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("device_id", getDeviceId() == null ? "" : getDeviceId().toString());
        dictionnary.put("thumb_md5", getThumbMd5() == null ? "" : getThumbMd5().toString());
        dictionnary.put("face_num", getFaceNum() == null ? "" : getFaceNum().toString());
        dictionnary.put("depth", getDepth() == null ? "" : getDepth().toString());
        dictionnary.put("height", getHeight() == null ? "" : getHeight().toString());
        dictionnary.put("width", getWidth() == null ? "" : getWidth().toString());
        dictionnary.put("format", getFormat() == null ? "" : getFormat().toString());
        dictionnary.put("md5", getMd5() == null ? "" : getMd5().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> readPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("md5", getMd5() == null ? "" : getMd5().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("device_id".equalsIgnoreCase(column) || "deviceId".equalsIgnoreCase(column)) {
            return getDeviceId() == null ? "" : getDeviceId().toString();
        } else if ("thumb_md5".equalsIgnoreCase(column) || "thumbMd5".equalsIgnoreCase(column)) {
            return getThumbMd5() == null ? "" : getThumbMd5().toString();
        } else if ("face_num".equalsIgnoreCase(column) || "faceNum".equalsIgnoreCase(column)) {
            return getFaceNum() == null ? "" : getFaceNum().toString();
        } else if ("depth".equalsIgnoreCase(column) || "depth".equalsIgnoreCase(column)) {
            return getDepth() == null ? "" : getDepth().toString();
        } else if ("height".equalsIgnoreCase(column) || "height".equalsIgnoreCase(column)) {
            return getHeight() == null ? "" : getHeight().toString();
        } else if ("width".equalsIgnoreCase(column) || "width".equalsIgnoreCase(column)) {
            return getWidth() == null ? "" : getWidth().toString();
        } else if ("format".equalsIgnoreCase(column) || "format".equalsIgnoreCase(column)) {
            return getFormat() == null ? "" : getFormat().toString();
        } else if ("md5".equalsIgnoreCase(column) || "md5".equalsIgnoreCase(column)) {
            return getMd5() == null ? "" : getMd5().toString();
        }
        return "";
    }

    /**
     * return a object representation of the given field
     */
    @SuppressWarnings("unchecked")
    public <T>T getObject(String column)
    {
        if (null == column || "".equals(column)) {
            return null;
        } else if ("device_id".equalsIgnoreCase(column) || "deviceId".equalsIgnoreCase(column)) {
            return getDeviceId() == null ? null : (T)getDeviceId();
        } else if ("thumb_md5".equalsIgnoreCase(column) || "thumbMd5".equalsIgnoreCase(column)) {
            return getThumbMd5() == null ? null : (T)getThumbMd5();
        } else if ("face_num".equalsIgnoreCase(column) || "faceNum".equalsIgnoreCase(column)) {
            return getFaceNum() == null ? null : (T)getFaceNum();
        } else if ("depth".equalsIgnoreCase(column) || "depth".equalsIgnoreCase(column)) {
            return getDepth() == null ? null : (T)getDepth();
        } else if ("height".equalsIgnoreCase(column) || "height".equalsIgnoreCase(column)) {
            return getHeight() == null ? null : (T)getHeight();
        } else if ("width".equalsIgnoreCase(column) || "width".equalsIgnoreCase(column)) {
            return getWidth() == null ? null : (T)getWidth();
        } else if ("format".equalsIgnoreCase(column) || "format".equalsIgnoreCase(column)) {
            return getFormat() == null ? null : (T)getFormat();
        } else if ("md5".equalsIgnoreCase(column) || "md5".equalsIgnoreCase(column)) {
            return getMd5() == null ? null : (T)getMd5();
        }
        return null;
    }

    /**
     * set a value representation of the given field
     */
    public <T>void setObject(String column,T object)
    {
        if (null == column || "".equals(column)) {
            return ;
        } else if ("device_id".equalsIgnoreCase(column) || "deviceId".equalsIgnoreCase(column)) {
            setDeviceId((Integer)object);
        } else if ("thumb_md5".equalsIgnoreCase(column) || "thumbMd5".equalsIgnoreCase(column)) {
            setThumbMd5((String)object);
        } else if ("face_num".equalsIgnoreCase(column) || "faceNum".equalsIgnoreCase(column)) {
            setFaceNum((Integer)object);
        } else if ("depth".equalsIgnoreCase(column) || "depth".equalsIgnoreCase(column)) {
            setDepth((Integer)object);
        } else if ("height".equalsIgnoreCase(column) || "height".equalsIgnoreCase(column)) {
            setHeight((Integer)object);
        } else if ("width".equalsIgnoreCase(column) || "width".equalsIgnoreCase(column)) {
            setWidth((Integer)object);
        } else if ("format".equalsIgnoreCase(column) || "format".equalsIgnoreCase(column)) {
            setFormat((String)object);
        } else if ("md5".equalsIgnoreCase(column) || "md5".equalsIgnoreCase(column)) {
            setMd5((String)object);
        }
    }
}
