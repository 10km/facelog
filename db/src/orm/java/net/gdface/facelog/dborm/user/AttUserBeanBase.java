// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package net.gdface.facelog.dborm.user;
import net.gdface.facelog.dborm.BaseBean;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import net.gdface.facelog.dborm.CompareToBuilder;
import net.gdface.facelog.dborm.EqualsBuilder;
import net.gdface.facelog.dborm.HashCodeBuilder;

/**
 * AttUserBean is a mapping of att_user Table.
 * @author guyadong
*/
public class AttUserBeanBase
    implements Serializable,BaseBean<AttUserBeanBase>
{
	private static final long serialVersionUID = -6211342541007709224L;
	
    protected byte[] grayimage;

    protected byte[] colorimage;

    protected Integer permission;

    protected String updatetime;

    protected Integer graylen;

    protected Integer colorlen;

    protected Integer isonjob;

    protected String userno;

    protected String company;

    protected Integer id;

    private boolean _isNew = true;
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void setNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Prefered methods to create a AttUserBeanBase is via the createAttUserBean method in AttUserManager or
     * via the factory class AttUserFactory create method
     */
    public AttUserBeanBase(){
    }
    /**
     * create a AttUserBeanBase from a instance
     */
    public AttUserBeanBase(AttUserBeanBase bean){
        this.copy(bean);
    }
    /**
     * Getter method for grayimage.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.grayimage</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of grayimage
     */
    public byte[] getGrayimage(){
        return grayimage;
    }
    /**
     * Setter method for grayimage.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to grayimage
     */
    public void setGrayimage(byte[] newVal){    
        grayimage = newVal;
    }



    /**
     * Getter method for colorimage.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.colorimage</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of colorimage
     */
    public byte[] getColorimage(){
        return colorimage;
    }
    /**
     * Setter method for colorimage.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to colorimage
     */
    public void setColorimage(byte[] newVal){    
        colorimage = newVal;
    }



    /**
     * Getter method for permission.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.permission</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of permission
     */
    public Integer getPermission(){
        return permission;
    }
    /**
     * Setter method for permission.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to permission
     */
    public void setPermission(Integer newVal){    
        permission = newVal;
    }

    /**
     * Setter method for permission.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to permission
     */
    public void setPermission(int newVal){
        setPermission(new Integer(newVal));
    }


    /**
     * Getter method for updatetime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.updatetime</li>
     * <li>column size: 38</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of updatetime
     */
    public String getUpdatetime(){
        return updatetime;
    }
    /**
     * Setter method for updatetime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to updatetime
     */
    public void setUpdatetime(String newVal){    
        updatetime = newVal;
    }



    /**
     * Getter method for graylen.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.graylen</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of graylen
     */
    public Integer getGraylen(){
        return graylen;
    }
    /**
     * Setter method for graylen.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to graylen
     */
    public void setGraylen(Integer newVal){    
        graylen = newVal;
    }

    /**
     * Setter method for graylen.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to graylen
     */
    public void setGraylen(int newVal){
        setGraylen(new Integer(newVal));
    }


    /**
     * Getter method for colorlen.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.colorlen</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of colorlen
     */
    public Integer getColorlen(){
        return colorlen;
    }
    /**
     * Setter method for colorlen.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to colorlen
     */
    public void setColorlen(Integer newVal){    
        colorlen = newVal;
    }

    /**
     * Setter method for colorlen.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to colorlen
     */
    public void setColorlen(int newVal){
        setColorlen(new Integer(newVal));
    }


    /**
     * Getter method for isonjob.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.isonjob</li>
     * <li>column size: 3</li>
     * <li>jdbc type returned by the driver: Types.TINYINT</li>
     * </ul>
     *
     * @return the value of isonjob
     */
    public Integer getIsonjob(){
        return isonjob;
    }
    /**
     * Setter method for isonjob.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to isonjob
     */
    public void setIsonjob(Integer newVal){    
        isonjob = newVal;
    }

    /**
     * Setter method for isonjob.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to isonjob
     */
    public void setIsonjob(int newVal){
        setIsonjob(new Integer(newVal));
    }


    /**
     * Getter method for userno.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.userno</li>
     * <li>column size: 20</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of userno
     */
    public String getUserno(){
        return userno;
    }
    /**
     * Setter method for userno.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to userno
     */
    public void setUserno(String newVal){    
        userno = newVal;
    }



    /**
     * Getter method for company.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.company</li>
     * <li>column size: 30</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of company
     */
    public String getCompany(){
        return company;
    }
    /**
     * Setter method for company.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to company
     */
    public void setCompany(String newVal){    
        company = newVal;
    }



    /**
     * Getter method for id.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of id
     */
    public Integer getId(){
        return id;
    }
    /**
     * Setter method for id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(Integer newVal){    
        id = newVal;
    }

    /**
     * Setter method for id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(int newVal){
        setId(new Integer(newVal));
    }


    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof AttUserBean)) {
            return false;
        }

        AttUserBean obj = (AttUserBean) object;
        return new EqualsBuilder()
            .append(getGrayimage(), obj.getGrayimage())
            .append(getColorimage(), obj.getColorimage())
            .append(getPermission(), obj.getPermission())
            .append(getUpdatetime(), obj.getUpdatetime())
            .append(getGraylen(), obj.getGraylen())
            .append(getColorlen(), obj.getColorlen())
            .append(getIsonjob(), obj.getIsonjob())
            .append(getUserno(), obj.getUserno())
            .append(getCompany(), obj.getCompany())
            .append(getId(), obj.getId())
            .isEquals();
    }

    /**
     * @see java.lang.Object#hashCode()
     */
    public int hashCode()
    {
        return new HashCodeBuilder(-82280557, -700257973)
            .append(getGrayimage())
            .append(getColorimage())
            .append(getPermission())
            .append(getUpdatetime())
            .append(getGraylen())
            .append(getColorlen())
            .append(getIsonjob())
            .append(getUserno())
            .append(getCompany())
            .append(getId())
            .toHashCode();
    }

    /**
     * @see java.lang.Object#toString()
     */
    public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(Integer.toHexString(this.hashCode())).append("[\n")
            .append("\tgrayimage=").append(getGrayimage()).append("\n")
            .append("\tcolorimage=").append(getColorimage()).append("\n")
            .append("\tpermission=").append(getPermission()).append("\n")
            .append("\tupdatetime=").append(getUpdatetime()).append("\n")
            .append("\tgraylen=").append(getGraylen()).append("\n")
            .append("\tcolorlen=").append(getColorlen()).append("\n")
            .append("\tisonjob=").append(getIsonjob()).append("\n")
            .append("\tuserno=").append(getUserno()).append("\n")
            .append("\tcompany=").append(getCompany()).append("\n")
            .append("\tid=").append(getId()).append("\n")
            .append("]\n")
            .toString();
    }


    public int compareTo(Object object){
        AttUserBean obj = (AttUserBean) object;
        return new CompareToBuilder()
            .append(getGrayimage(), obj.getGrayimage())
            .append(getColorimage(), obj.getColorimage())
            .append(getPermission(), obj.getPermission())
            .append(getUpdatetime(), obj.getUpdatetime())
            .append(getGraylen(), obj.getGraylen())
            .append(getColorlen(), obj.getColorlen())
            .append(getIsonjob(), obj.getIsonjob())
            .append(getUserno(), obj.getUserno())
            .append(getCompany(), obj.getCompany())
            .append(getId(), obj.getId())
            .toComparison();
    }
    /**
    * Copies proterty of the passed bean into the current bean.<br>
    * if bean.isNew() is true, call {@link #copyIfNotNull(GfCodeBeanBase)}
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copy(AttUserBeanBase bean)
    {
        if(bean.isNew()){
            copyIfNotNull(bean);
        }else{        
            isNew(bean.isNew());
            setGrayimage(bean.getGrayimage());
            setColorimage(bean.getColorimage());
            setPermission(bean.getPermission());
            setUpdatetime(bean.getUpdatetime());
            setGraylen(bean.getGraylen());
            setColorlen(bean.getColorlen());
            setIsonjob(bean.getIsonjob());
            setUserno(bean.getUserno());
            setCompany(bean.getCompany());
            setId(bean.getId());
        }
    }
    /**
    * Copies proterty of the passed bean into the current bean if property not null.
    *
    * @param bean the bean to copy into the current bean
    * @author guyadong
    */
    public void copyIfNotNull(AttUserBeanBase bean)
    {
        isNew(bean.isNew());
        if(bean.getGrayimage()!=null)
            setGrayimage(bean.getGrayimage());
        if(bean.getColorimage()!=null)
            setColorimage(bean.getColorimage());
        if(bean.getPermission()!=null)
            setPermission(bean.getPermission());
        if(bean.getUpdatetime()!=null)
            setUpdatetime(bean.getUpdatetime());
        if(bean.getGraylen()!=null)
            setGraylen(bean.getGraylen());
        if(bean.getColorlen()!=null)
            setColorlen(bean.getColorlen());
        if(bean.getIsonjob()!=null)
            setIsonjob(bean.getIsonjob());
        if(bean.getUserno()!=null)
            setUserno(bean.getUserno());
        if(bean.getCompany()!=null)
            setCompany(bean.getCompany());
        if(bean.getId()!=null)
            setId(bean.getId());
    }

    /**
    * set all field to null
    *
    * @author guyadong
    */
    public AttUserBeanBase clean()
    {
        isNew(true);
        setGrayimage(null);
        setColorimage(null);
        setPermission(null);
        setUpdatetime(null);
        setGraylen(null);
        setColorlen(null);
        setIsonjob(null);
        setUserno(null);
        setCompany(null);
        setId(null);
        return this;
    }
    
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column name list to copy into the current bean
     */
    public void copy(AttUserBeanBase bean, String[] fieldList)
    {
        if (null == fieldList)
            copy(bean);
        else
            for (int i = 0; i < fieldList.length; i++) {
                setObject(fieldList[i].trim(), bean.getObject(fieldList[i].trim()));
            }
    }
    /**
     * create new AttUserBean form {@code bean} if not instanceof AttUserBean<br>
     * 
    * @param bean
    * @return null if bean is null
    * @see #toFullBean()
    * @author guyadong
    */
    public final static AttUserBean toFullBean(AttUserBeanBase bean)
    {
        return null==bean?null:(bean.toFullBean());
    }
    /**
    * @param bases
    * @return
    * @see #toFullBean(AttUserBeanBase)
    * @author guyadong
    */
    public static AttUserBean[] toFullBean(AttUserBeanBase[] bases){
        AttUserBean[] b = new AttUserBean[bases.length];
        for(int i=0;i<b.length;i++){
            b[i]=toFullBean(bases[i]);
        }
        return b;
    }
    /**
     * create new AttUserBean form {@code bean} if not instanceof AttUserBean<br>
     * 
    * @param bean
    * @return null if bean is null
    * @author guyadong
    */
    @SuppressWarnings("unchecked")
    public AttUserBean toFullBean()
    {
        return this instanceof AttUserBean?(AttUserBean)this:new AttUserBean(this);
    }

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> readDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("grayimage", getGrayimage() == null ? "" : getGrayimage().toString());
        dictionnary.put("colorimage", getColorimage() == null ? "" : getColorimage().toString());
        dictionnary.put("permission", getPermission() == null ? "" : getPermission().toString());
        dictionnary.put("updatetime", getUpdatetime() == null ? "" : getUpdatetime().toString());
        dictionnary.put("graylen", getGraylen() == null ? "" : getGraylen().toString());
        dictionnary.put("colorlen", getColorlen() == null ? "" : getColorlen().toString());
        dictionnary.put("isonjob", getIsonjob() == null ? "" : getIsonjob().toString());
        dictionnary.put("userno", getUserno() == null ? "" : getUserno().toString());
        dictionnary.put("company", getCompany() == null ? "" : getCompany().toString());
        dictionnary.put("id", getId() == null ? "" : getId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> readPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("id", getId() == null ? "" : getId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("grayimage".equalsIgnoreCase(column) || "grayimage".equalsIgnoreCase(column)) {
            return getGrayimage() == null ? "" : getGrayimage().toString();
        } else if ("colorimage".equalsIgnoreCase(column) || "colorimage".equalsIgnoreCase(column)) {
            return getColorimage() == null ? "" : getColorimage().toString();
        } else if ("permission".equalsIgnoreCase(column) || "permission".equalsIgnoreCase(column)) {
            return getPermission() == null ? "" : getPermission().toString();
        } else if ("updatetime".equalsIgnoreCase(column) || "updatetime".equalsIgnoreCase(column)) {
            return getUpdatetime() == null ? "" : getUpdatetime().toString();
        } else if ("graylen".equalsIgnoreCase(column) || "graylen".equalsIgnoreCase(column)) {
            return getGraylen() == null ? "" : getGraylen().toString();
        } else if ("colorlen".equalsIgnoreCase(column) || "colorlen".equalsIgnoreCase(column)) {
            return getColorlen() == null ? "" : getColorlen().toString();
        } else if ("isonjob".equalsIgnoreCase(column) || "isonjob".equalsIgnoreCase(column)) {
            return getIsonjob() == null ? "" : getIsonjob().toString();
        } else if ("userno".equalsIgnoreCase(column) || "userno".equalsIgnoreCase(column)) {
            return getUserno() == null ? "" : getUserno().toString();
        } else if ("company".equalsIgnoreCase(column) || "company".equalsIgnoreCase(column)) {
            return getCompany() == null ? "" : getCompany().toString();
        } else if ("id".equalsIgnoreCase(column) || "id".equalsIgnoreCase(column)) {
            return getId() == null ? "" : getId().toString();
        }
        return "";
    }

    /**
     * return a object representation of the given field
     */
    @SuppressWarnings("unchecked")
    public <T>T getObject(String column)
    {
        if (null == column || "".equals(column)) {
            return null;
        } else if ("grayimage".equalsIgnoreCase(column) || "grayimage".equalsIgnoreCase(column)) {
            return getGrayimage() == null ? null : (T)getGrayimage();
        } else if ("colorimage".equalsIgnoreCase(column) || "colorimage".equalsIgnoreCase(column)) {
            return getColorimage() == null ? null : (T)getColorimage();
        } else if ("permission".equalsIgnoreCase(column) || "permission".equalsIgnoreCase(column)) {
            return getPermission() == null ? null : (T)getPermission();
        } else if ("updatetime".equalsIgnoreCase(column) || "updatetime".equalsIgnoreCase(column)) {
            return getUpdatetime() == null ? null : (T)getUpdatetime();
        } else if ("graylen".equalsIgnoreCase(column) || "graylen".equalsIgnoreCase(column)) {
            return getGraylen() == null ? null : (T)getGraylen();
        } else if ("colorlen".equalsIgnoreCase(column) || "colorlen".equalsIgnoreCase(column)) {
            return getColorlen() == null ? null : (T)getColorlen();
        } else if ("isonjob".equalsIgnoreCase(column) || "isonjob".equalsIgnoreCase(column)) {
            return getIsonjob() == null ? null : (T)getIsonjob();
        } else if ("userno".equalsIgnoreCase(column) || "userno".equalsIgnoreCase(column)) {
            return getUserno() == null ? null : (T)getUserno();
        } else if ("company".equalsIgnoreCase(column) || "company".equalsIgnoreCase(column)) {
            return getCompany() == null ? null : (T)getCompany();
        } else if ("id".equalsIgnoreCase(column) || "id".equalsIgnoreCase(column)) {
            return getId() == null ? null : (T)getId();
        }
        return null;
    }

    /**
     * set a value representation of the given field
     */
    public <T>void setObject(String column,T object)
    {
        if (null == column || "".equals(column)) {
            return ;
        } else if ("grayimage".equalsIgnoreCase(column) || "grayimage".equalsIgnoreCase(column)) {
            setGrayimage((byte[])object);
        } else if ("colorimage".equalsIgnoreCase(column) || "colorimage".equalsIgnoreCase(column)) {
            setColorimage((byte[])object);
        } else if ("permission".equalsIgnoreCase(column) || "permission".equalsIgnoreCase(column)) {
            setPermission((Integer)object);
        } else if ("updatetime".equalsIgnoreCase(column) || "updatetime".equalsIgnoreCase(column)) {
            setUpdatetime((String)object);
        } else if ("graylen".equalsIgnoreCase(column) || "graylen".equalsIgnoreCase(column)) {
            setGraylen((Integer)object);
        } else if ("colorlen".equalsIgnoreCase(column) || "colorlen".equalsIgnoreCase(column)) {
            setColorlen((Integer)object);
        } else if ("isonjob".equalsIgnoreCase(column) || "isonjob".equalsIgnoreCase(column)) {
            setIsonjob((Integer)object);
        } else if ("userno".equalsIgnoreCase(column) || "userno".equalsIgnoreCase(column)) {
            setUserno((String)object);
        } else if ("company".equalsIgnoreCase(column) || "company".equalsIgnoreCase(column)) {
            setCompany((String)object);
        } else if ("id".equalsIgnoreCase(column) || "id".equalsIgnoreCase(column)) {
            setId((Integer)object);
        }
    }
}
