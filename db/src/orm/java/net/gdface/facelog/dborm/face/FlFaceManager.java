// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.face;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import net.gdface.facelog.dborm.Constant;
import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.log.FlLogBean;
import net.gdface.facelog.dborm.log.FlLogManager;
import net.gdface.facelog.dborm.face.FlFeatureBean;
import net.gdface.facelog.dborm.face.FlFeatureManager;
import net.gdface.facelog.dborm.image.FlImageBean;
import net.gdface.facelog.dborm.image.FlImageManager;

/**
 * Handles database calls (save, load, count, etc...) for the fl_face table.
 * @author sql2java
 */
public class FlFaceManager extends TableManager.Adapter<FlFaceBean>
{
    /**
     * Tablename.
     */
    public static final String TABLE_NAME="fl_face";

   /**
     * Contains all the primarykey fields of the fl_face table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    public String getFields() {
        return FL_FACE_FIELDS;
    }
    
    public String getFullFields() {
        return FL_FACE_FULL_FIELDS;
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }

    private static FlFaceManager singleton = new FlFaceManager();
    protected FlFaceManager(){}
    /**
     * Get the FlFaceManager singleton.
     *
     * @return FlFaceManager
     */
    public static FlFaceManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlFaceBean instance.
     *
     * @return the new FlFaceBean
     */
    public FlFaceBean createBean()
    {
        return new FlFaceBean();
    }
    
    @Override
    protected Class<FlFaceBean> _beanType(){
        return FlFaceBean.class;
    }
    
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link FlFaceBean} from the fl_face using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlFaceBean or {@code null} if not found or have null argument
     * @throws DAOException
     */
    //1
    @SuppressWarnings("unused")
    public FlFaceBean loadByPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return null;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + FL_FACE_FIELDS + " FROM fl_face WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            List<FlFaceBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (0 == pReturn.size()) {
                return null;
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //1.2
    @Override
    public FlFaceBean loadByPrimaryKey(FlFaceBean bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey( bean.getId());
    }
    
    /**
     * Loads a {@link FlFaceBean} from the fl_face using primary key fields.
     * @param keys primary keys value:<br> 
     * @return a unique {@link FlFaceBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    //1.3
    @Override
    public FlFaceBean loadByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        return loadByPrimaryKey((Integer)keys[0]);
    }
    /**
     * Returns true if this fl_face contains row with primary key fields.
     * @param id Integer - PK# 1
     * @throws DAOException
     */
    //1.4
    public boolean existsPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return false;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try{
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_face WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            return 1 == this.countByPreparedStatement(ps);
        }catch(SQLException e){
            throw new ObjectRetrievalException(e);
        }finally{
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
    /**
     * Return true if this fl_face contains row with primary key fields.
     * @param bean  
     * @throws DAOException
     * @return false if primary kes has null
     * @see #countUsingTemplate(FlFaceBean)
     */
    //1.6
    @Override
    public boolean existsByPrimaryKey(FlFaceBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getId())
            return false;
        long modified = bean.getModified();
        try{
            bean.resetModifiedExceptPrimaryKeys();
            return 1 == countUsingTemplate(bean);
        }finally{
            bean.setModified(modified);
        }
    }
    //1.7
    @Override
    public FlFaceBean checkDuplicate(FlFaceBean bean) throws DAOException{
        if(!existsByPrimaryKey(bean))
            throw new ObjectRetrievalException("Duplicate entry ("+ bean.getId() +") for key 'PRIMARY'");
        return bean;
    }
    /**
     * Check duplicated row by primary keys,if row exists throw {@link ObjectRetrievalException}
     * @param id Integer
     * @throws DAOException
     * @see #existsPrimaryKey(Integer id)
     */
    //1.4.1
    public Integer checkDuplicate(Integer id) throws DAOException
    {
        if(existsPrimaryKey(id))
            throw new ObjectRetrievalException("Duplicate entry '"+ id +"' for key 'PRIMARY'");
        return id;
    }    
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     * 
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #delete(FlFaceBean)}
     */
    //2
    public int deleteByPrimaryKey(Integer id) throws DAOException
    {
        FlFaceBean bean=createBean();
        bean.setId(id);
        return this.delete(bean);
    }

    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
     * @throws DAOException
     */
    //2
    @Override
    public int delete(FlFaceBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getId()){
            return 0;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            this.listenerContainer.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_face WHERE id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getId()); }
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.listenerContainer.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     * @return the number of deleted rows
     * @see {@link #delete(FlFaceBean)}
     */   
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        FlFaceBean bean=createBean();   
        if(null!= keys[0] && !(keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        bean.setId((Integer)keys[0]);
        return delete(bean);
    }
    
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] importedBeanTypes = new Class<?>[]{FlLogBean.class};

    /**
     * @see #getImportedBeansAsList(FlFaceBean,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> T[] getImportedBeans(FlFaceBean bean, int ikIndex) throws DAOException {
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(importedBeanTypes[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_FACE_IK_FL_LOG_COMPARE_FACE} -> {@link FlLogBean}</li>
     * </ul>
     * @param bean the {@link FlFaceBean} object to use
     * @param ikIndex valid values: {@link Constant#FL_FACE_IK_FL_LOG_COMPARE_FACE}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> List<T> getImportedBeansAsList(FlFaceBean bean,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_FACE_IK_FL_LOG_COMPARE_FACE:
            return (List<T>)this.getLogBeansByCompareFaceAsList(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlFaceBean,int)}
     * @param bean the {@link FlFaceBean} object to use
     * @param importedBeans the FlLogBean array to associate to the {@link FlFaceBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlFaceBean,int)}
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> T[] setImportedBeans(FlFaceBean bean,T[] importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_FACE_IK_FL_LOG_COMPARE_FACE:
            return (T[])setLogBeansByCompareFace(bean,(FlLogBean[])importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlFaceBean,int)}
     * @param bean the {@link FlFaceBean} object to use
     * @param importedBeans the <T> object to associate to the {@link FlFaceBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlFaceBean,int)}

     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>,C extends java.util.Collection<T>> C setImportedBeans(FlFaceBean bean,C importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_FACE_IK_FL_LOG_COMPARE_FACE:
            return (C)setLogBeansByCompareFace(bean,(java.util.Collection<FlLogBean>)importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
 
    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FlLogBean} object from the fl_log.compare_face field.<BR>
     * FK_NAME : fl_log_ibfk_4 
     * @param bean the {@link FlFaceBean}
     * @return the associated {@link FlLogBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlLogBean[] getLogBeansByCompareFace(FlFaceBean bean) throws DAOException
    {
        return getLogBeansByCompareFaceAsList(bean).toArray(new FlLogBean[0]);
    }
    /**
     * Retrieves the {@link FlLogBean} object from the fl_log.compare_face field.<BR>
     * FK_NAME : fl_log_ibfk_4 
     * @param id Integer - PK# 1
     * @return the associated {@link FlLogBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FlLogBean[] getLogBeansByCompareFace(Integer faceId) throws DAOException
    {
        FlFaceBean bean = createBean();
        bean.setId(faceId);
        return getLogBeansByCompareFace(bean);
    }
    /**
     * Retrieves the {@link FlLogBean} object from fl_log.compare_face field.<BR>
     * FK_NAME:fl_log_ibfk_4
     * @param bean the {@link FlFaceBean}
     * @return the associated {@link FlLogBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlLogBean> getLogBeansByCompareFaceAsList(FlFaceBean bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<FlLogBean>();
        FlLogBean other = FlLogManager.getInstance().createBean();
        other.setCompareFace(bean.getId());
        return FlLogManager.getInstance().loadUsingTemplateAsList(other);
    }
    /**
     * Retrieves the {@link FlLogBean} object from fl_log.compare_face field.<BR>
     * FK_NAME:fl_log_ibfk_4
     * @param id Integer - PK# 1
     * @return the associated {@link FlLogBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public List<FlLogBean> getLogBeansByCompareFaceAsList(Integer faceId) throws DAOException
    {
         FlFaceBean bean = createBean();
        bean.setId(faceId);
        return getLogBeansByCompareFaceAsList(bean);
    }
    /**
     * set  the {@link FlLogBean} object array associate to FlFaceBean by the fl_log.compare_face field.<BR>
     * FK_NAME : fl_log_ibfk_4 
     * @param bean the referenced {@link FlFaceBean}
     * @param importedBeans imported beans from fl_log
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlLogManager#setReferencedByCompareFace(FlLogBean, FlFaceBean)
     */
    //3.3 SET IMPORTED
    public FlLogBean[] setLogBeansByCompareFace(FlFaceBean bean , FlLogBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlLogBean importBean : importedBeans ){
                FlLogManager.getInstance().setReferencedByCompareFace(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlLogBean} object collection associate to FlFaceBean by the fl_log.compare_face field.<BR>
     * FK_NAME:fl_log_ibfk_4
     * @param bean the referenced {@link FlFaceBean} 
     * @param importedBeans imported beans from fl_log 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlLogManager#setReferencedByCompareFace(FlLogBean, FlFaceBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlLogBean>> C setLogBeansByCompareFace(FlFaceBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlLogBean importBean : importedBeans ){
                FlLogManager.getInstance().setReferencedByCompareFace(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Save the FlFaceBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlFaceBean} bean to be saved
     * @param refFeatureByFeatureMd5 the {@link FlFeatureBean} bean referenced by {@link FlFaceBean} 
     * @param refImageByImageMd5 the {@link FlImageBean} bean referenced by {@link FlFaceBean} 
     * @param impLogByCompareFace the {@link FlLogBean} beans refer to {@link FlFaceBean} 
     * @return the inserted or updated {@link FlFaceBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public FlFaceBean save(FlFaceBean bean
        , FlFeatureBean refFeatureByFeatureMd5 , FlImageBean refImageByImageMd5 
        , FlLogBean[] impLogByCompareFace ) throws DAOException
    {
        if(null == bean) return null;
        if(null != refFeatureByFeatureMd5)
            this.setReferencedByFeatureMd5(bean,refFeatureByFeatureMd5);
        if(null != refImageByImageMd5)
            this.setReferencedByImageMd5(bean,refImageByImageMd5);
        bean = this.save( bean );
        this.setLogBeansByCompareFace(bean,impLogByCompareFace);
        FlLogManager.getInstance().save( impLogByCompareFace );
        return bean;
    } 

    /**
     * Transaction version for sync save
     * @see {@link #save(FlFaceBean , FlFeatureBean , FlImageBean , FlLogBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public FlFaceBean saveAsTransaction(final FlFaceBean bean
        ,final FlFeatureBean refFeatureByFeatureMd5 ,final FlImageBean refImageByImageMd5 
        ,final FlLogBean[] impLogByCompareFace ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlFaceBean>(){
            @Override
            public FlFaceBean call() throws Exception {
                return save(bean , refFeatureByFeatureMd5 , refImageByImageMd5 , impLogByCompareFace );
            }});
    }
    /**
     * Save the FlFaceBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlFaceBean} bean to be saved
     * @param refFeatureByFeatureMd5 the {@link FlFeatureBean} bean referenced by {@link FlFaceBean} 
     * @param refImageByImageMd5 the {@link FlImageBean} bean referenced by {@link FlFaceBean} 
     * @param impLogByCompareFace the {@link FlLogBean} bean refer to {@link FlFaceBean} 
     * @return the inserted or updated {@link FlFaceBean} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public FlFaceBean save(FlFaceBean bean
        , FlFeatureBean refFeatureByFeatureMd5 , FlImageBean refImageByImageMd5 
        , java.util.Collection<FlLogBean> impLogByCompareFace ) throws DAOException
    {
        if(null == bean) return null;
        this.setReferencedByFeatureMd5(bean,refFeatureByFeatureMd5);
        this.setReferencedByImageMd5(bean,refImageByImageMd5);
        bean = this.save( bean );
        this.setLogBeansByCompareFace(bean,impLogByCompareFace);
        FlLogManager.getInstance().save( impLogByCompareFace );
        return bean;
    }

    /**
     * Transaction version for sync save
     * @see {@link #save(FlFaceBean , FlFeatureBean , FlImageBean , java.util.Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public FlFaceBean saveAsTransaction(final FlFaceBean bean
        ,final FlFeatureBean refFeatureByFeatureMd5 ,final FlImageBean refImageByImageMd5 
        ,final  java.util.Collection<FlLogBean> impLogByCompareFace ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlFaceBean>(){
            @Override
            public FlFaceBean call() throws Exception {
                return save(bean , refFeatureByFeatureMd5 , refImageByImageMd5 , impLogByCompareFace );
            }});
    }
    /**
     * Save the FlFaceBean bean and referenced beans and imported beans (array) into the database.
     *
     * @param bean the {@link FlFaceBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlFaceBean , FlFeatureBean , FlImageBean , FlLogBean[] )}
     * @return the inserted or updated {@link FlFaceBean} bean
     * @throws DAOException
     */
    //3.9 SYNC SAVE 
    @Override
    public FlFaceBean save(FlFaceBean bean,Object ...args) throws DAOException
    {
        if(args.length > 3)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 3");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlFeatureBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:FlFeatureBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof FlImageBean)){
            throw new IllegalArgumentException("invalid type for the No.2 dynamic argument,expected type:FlImageBean");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof FlLogBean[])){
            throw new IllegalArgumentException("invalid type for the No.3 dynamic argument,expected type:FlLogBean[]");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlFeatureBean)args[0],(args.length < 2 || null == args[1])?null:(FlImageBean)args[1],(args.length < 3 || null == args[2])?null:(FlLogBean[])args[2]);
    } 

    /**
     * Save the FlFaceBean bean and referenced beans and imported beans (collection) into the database.
     *
     * @param bean the {@link FlFaceBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlFaceBean , FlFeatureBean , FlImageBean , java.util.Collection )}
     * @return the inserted or updated {@link FlFaceBean} bean
     * @throws DAOException
     */
    //3.10 SYNC SAVE 
    @SuppressWarnings("unchecked")
    @Override
    public FlFaceBean saveCollection(FlFaceBean bean,Object ...args) throws DAOException
    {
        if(args.length > 3)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 3");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlFeatureBean)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:FlFeatureBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof FlImageBean)){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:FlImageBean");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:java.util.Collection<FlLogBean>");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlFeatureBean)args[0],(args.length < 2 || null == args[1])?null:(FlImageBean)args[1],(args.length < 3 || null == args[2])?null:(java.util.Collection<FlLogBean>)args[2]);
    } 
    //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_FACE_FK_FEATURE_MD5} -> {@link FlFeatureBean}</li>
     *     <li> {@link Constant#FL_FACE_FK_IMAGE_MD5} -> {@link FlImageBean}</li>
     * </ul>
     * @param bean the {@link FlFaceBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link Constant#FL_FACE_FK_FEATURE_MD5},{@link Constant#FL_FACE_FK_IMAGE_MD5}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> T getReferencedBean(FlFaceBean bean,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_FACE_FK_FEATURE_MD5:
            return  (T)this.getReferencedByFeatureMd5(bean);
        case FL_FACE_FK_IMAGE_MD5:
            return  (T)this.getReferencedByImageMd5(bean);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    
    /**
     * Associates the {@link FlFaceBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean(FlFaceBean,int)}
     * @param bean the {@link FlFaceBean} object to use
     * @param beanToSet the <T> object to associate to the {@link FlFaceBean}
     * @param fkIndex valid values: see also {@link #getReferencedBean(FlFaceBean,int)}
     * @return always beanToSet saved
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<?>> T setReferencedBean(FlFaceBean bean,T beanToSet,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_FACE_FK_FEATURE_MD5:
            return  (T)this.setReferencedByFeatureMd5(bean, (FlFeatureBean)beanToSet);
        case FL_FACE_FK_IMAGE_MD5:
            return  (T)this.setReferencedByImageMd5(bean, (FlImageBean)beanToSet);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the {@link FlFeatureBean} object referenced by {@link FlFaceBean#getFeatureMd5}() field.<br>
     * FK_NAME : fl_face_ibfk_2
     * @param bean the {@link FlFaceBean}
     * @return the associated {@link FlFeatureBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //5.1 GET REFERENCED VALUE
    public FlFeatureBean getReferencedByFeatureMd5(FlFaceBean bean) throws DAOException
    {
        if(null == bean)return null;
        bean.setReferencedByFeatureMd5(FlFeatureManager.getInstance().loadByPrimaryKey(bean.getFeatureMd5())); 
        return bean.getReferencedByFeatureMd5();
    }

    /**
     * Associates the {@link FlFaceBean} object to the {@link FlFeatureBean} object by {@link FlFaceBean#getFeatureMd5}() field.
     *
     * @param bean the {@link FlFaceBean} object to use
     * @param beanToSet the {@link FlFeatureBean} object to associate to the {@link FlFaceBean} .
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlFeatureBean setReferencedByFeatureMd5(FlFaceBean bean, FlFeatureBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlFeatureManager.getInstance().save(beanToSet);
            bean.setReferencedByFeatureMd5(beanToSet);
            if( null == beanToSet){
                bean.setFeatureMd5(null);
            }else{
                bean.setFeatureMd5(beanToSet.getMd5());
            }
        }
        return beanToSet;
    }

    /**
     * Retrieves the {@link FlImageBean} object referenced by {@link FlFaceBean#getImageMd5}() field.<br>
     * FK_NAME : fl_face_ibfk_1
     * @param bean the {@link FlFaceBean}
     * @return the associated {@link FlImageBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //5.1 GET REFERENCED VALUE
    public FlImageBean getReferencedByImageMd5(FlFaceBean bean) throws DAOException
    {
        if(null == bean)return null;
        bean.setReferencedByImageMd5(FlImageManager.getInstance().loadByPrimaryKey(bean.getImageMd5())); 
        return bean.getReferencedByImageMd5();
    }

    /**
     * Associates the {@link FlFaceBean} object to the {@link FlImageBean} object by {@link FlFaceBean#getImageMd5}() field.
     *
     * @param bean the {@link FlFaceBean} object to use
     * @param beanToSet the {@link FlImageBean} object to associate to the {@link FlFaceBean} (NOT NULL).
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlImageBean setReferencedByImageMd5(FlFaceBean bean, FlImageBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlImageManager.getInstance().save(beanToSet);
            bean.setReferencedByImageMd5(beanToSet);
            if( null == beanToSet){
               // foreign key ( image_md5 ) is not nullable , nothing to do
            }else{
                bean.setImageMd5(beanToSet.getMd5());
            }
        }
        return beanToSet;
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Deletes rows from the fl_face table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clauses.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    @Override
    public int deleteByWhere(String where) throws DAOException
    {
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action = new DeleteBeanAction(); 
            this.loadByWhere(where,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_face " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    public FlFaceBean insert(FlFaceBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.listenerContainer.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_face (");

            if (bean.checkIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("id");
                _dirtyCount++;
            }

            if (bean.checkImageMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("image_md5");
                _dirtyCount++;
            }

            if (bean.checkFaceLeftModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_left");
                _dirtyCount++;
            }

            if (bean.checkFaceTopModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_top");
                _dirtyCount++;
            }

            if (bean.checkFaceWidthModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_width");
                _dirtyCount++;
            }

            if (bean.checkFaceHeightModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_height");
                _dirtyCount++;
            }

            if (bean.checkEyeLeftxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("eye_leftx");
                _dirtyCount++;
            }

            if (bean.checkEyeLeftyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("eye_lefty");
                _dirtyCount++;
            }

            if (bean.checkEyeRightxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("eye_rightx");
                _dirtyCount++;
            }

            if (bean.checkEyeRightyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("eye_righty");
                _dirtyCount++;
            }

            if (bean.checkMouthXModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mouth_x");
                _dirtyCount++;
            }

            if (bean.checkMouthYModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mouth_y");
                _dirtyCount++;
            }

            if (bean.checkNoseXModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("nose_x");
                _dirtyCount++;
            }

            if (bean.checkNoseYModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("nose_y");
                _dirtyCount++;
            }

            if (bean.checkAngleYawModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("angle_yaw");
                _dirtyCount++;
            }

            if (bean.checkAnglePitchModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("angle_pitch");
                _dirtyCount++;
            }

            if (bean.checkAngleRollModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("angle_roll");
                _dirtyCount++;
            }

            if (bean.checkExtInfoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("ext_info");
                _dirtyCount++;
            }

            if (bean.checkFeatureMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("feature_md5");
                _dirtyCount++;
            }

            if (bean.checkCreateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("create_time");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.checkIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.listenerContainer.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //14
    @Override
    public FlFaceBean update(FlFaceBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.listenerContainer.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_face SET ");
            boolean useComma=false;

            if (bean.checkIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("id=?");
            }

            if (bean.checkImageMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("image_md5=?");
            }

            if (bean.checkFaceLeftModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_left=?");
            }

            if (bean.checkFaceTopModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_top=?");
            }

            if (bean.checkFaceWidthModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_width=?");
            }

            if (bean.checkFaceHeightModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_height=?");
            }

            if (bean.checkEyeLeftxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("eye_leftx=?");
            }

            if (bean.checkEyeLeftyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("eye_lefty=?");
            }

            if (bean.checkEyeRightxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("eye_rightx=?");
            }

            if (bean.checkEyeRightyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("eye_righty=?");
            }

            if (bean.checkMouthXModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mouth_x=?");
            }

            if (bean.checkMouthYModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mouth_y=?");
            }

            if (bean.checkNoseXModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("nose_x=?");
            }

            if (bean.checkNoseYModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("nose_y=?");
            }

            if (bean.checkAngleYawModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("angle_yaw=?");
            }

            if (bean.checkAnglePitchModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("angle_pitch=?");
            }

            if (bean.checkAngleRollModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("angle_roll=?");
            }

            if (bean.checkExtInfoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("ext_info=?");
            }

            if (bean.checkFeatureMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("feature_md5=?");
            }

            if (bean.checkCreateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("create_time=?");
            }
            sql.append(" WHERE ");
            sql.append("id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.listenerContainer.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public FlFaceBean loadUniqueUsingTemplate(FlFaceBean bean) throws DAOException
    {
         FlFaceBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    //20-5
    @Override
    public int loadUsingTemplate(FlFaceBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<FlFaceBean> action) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSelectSql(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(FlFaceBean bean) throws DAOException
    {
        if(bean.checkIdInitialized() && null != bean.getId()){
            return this.deleteByPrimaryKey(bean.getId());
        }
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action=new DeleteBeanAction(); 
            this.loadUsingTemplate(bean,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_face ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________


    /**
     * Retrieves an array of FlFaceBean using the feature_md5 index.
     *
     * @param featureMd5 the feature_md5 column's value filter.
     * @return an array of FlFaceBean
     * @throws DAOException
     */
    public FlFaceBean[] loadByIndexFeatureMd5(String featureMd5) throws DAOException
    {
        return (FlFaceBean[])this.loadByIndexFeatureMd5AsList(featureMd5).toArray(new FlFaceBean[0]);
    }
    
    /**
     * Retrieves a list of FlFaceBean using the feature_md5 index.
     *
     * @param featureMd5 the feature_md5 column's value filter.
     * @return a list of FlFaceBean
     * @throws DAOException
     */
    public List<FlFaceBean> loadByIndexFeatureMd5AsList(String featureMd5) throws DAOException
    {
        FlFaceBean bean = this.createBean();
        bean.setFeatureMd5(featureMd5);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the feature_md5 index.
     *
     * @param featureMd5 the feature_md5 column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndexFeatureMd5(String featureMd5) throws DAOException
    {
        FlFaceBean bean = this.createBean();
        bean.setFeatureMd5(featureMd5);
        return deleteUsingTemplate(bean);
    }
    

    /**
     * Retrieves an array of FlFaceBean using the image_md5 index.
     *
     * @param imageMd5 the image_md5 column's value filter.
     * @return an array of FlFaceBean
     * @throws DAOException
     */
    public FlFaceBean[] loadByIndexImageMd5(String imageMd5) throws DAOException
    {
        return (FlFaceBean[])this.loadByIndexImageMd5AsList(imageMd5).toArray(new FlFaceBean[0]);
    }
    
    /**
     * Retrieves a list of FlFaceBean using the image_md5 index.
     *
     * @param imageMd5 the image_md5 column's value filter.
     * @return a list of FlFaceBean
     * @throws DAOException
     */
    public List<FlFaceBean> loadByIndexImageMd5AsList(String imageMd5) throws DAOException
    {
        FlFaceBean bean = this.createBean();
        bean.setImageMd5(imageMd5);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the image_md5 index.
     *
     * @param imageMd5 the image_md5 column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndexImageMd5(String imageMd5) throws DAOException
    {
        FlFaceBean bean = this.createBean();
        bean.setImageMd5(imageMd5);
        return deleteUsingTemplate(bean);
    }
    
    
    /**
     * Retrieves a list of FlFaceBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_FACE_INDEX_FEATURE_MD5},{@link Constant#FL_FACE_INDEX_IMAGE_MD5}
     * @param keys key values of index
     * @return a list of FlFaceBean
     * @throws DAOException
     */
    public List<FlFaceBean> loadByIndexAsList(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
        case FL_FACE_INDEX_FEATURE_MD5:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'feature_md5' column number");
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.loadByIndexFeatureMd5AsList((String)keys[0]);        
        }
        case FL_FACE_INDEX_IMAGE_MD5:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'image_md5' column number");
            if(null != keys[1] && !(keys[1] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.loadByIndexImageMd5AsList((String)keys[0]);        
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_FACE_INDEX_FEATURE_MD5},{@link Constant#FL_FACE_INDEX_IMAGE_MD5}
     * @param keys key values of index
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
        case FL_FACE_INDEX_FEATURE_MD5:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'feature_md5' column number");
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByIndexFeatureMd5((String)keys[0]);
        }
        case FL_FACE_INDEX_IMAGE_MD5:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'image_md5' column number");
            if(null != keys[1] && !(keys[1] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByIndexImageMd5((String)keys[0]);
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }        
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    //25
    @Override
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_face " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_face with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlFaceBean bean given the search type
     *
     * @param bean the FlFaceBean template to look for
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlFaceBean bean, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_face");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clauses constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlFaceBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.checkIdModified()) {
                _dirtyCount ++;
                if (bean.getId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id = ?");
                }
            }
            if (bean.checkImageMd5Modified()) {
                _dirtyCount ++;
                if (bean.getImageMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("image_md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("image_md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkFaceLeftModified()) {
                _dirtyCount ++;
                if (bean.getFaceLeft() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_left IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_left = ?");
                }
            }
            if (bean.checkFaceTopModified()) {
                _dirtyCount ++;
                if (bean.getFaceTop() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_top IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_top = ?");
                }
            }
            if (bean.checkFaceWidthModified()) {
                _dirtyCount ++;
                if (bean.getFaceWidth() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_width IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_width = ?");
                }
            }
            if (bean.checkFaceHeightModified()) {
                _dirtyCount ++;
                if (bean.getFaceHeight() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_height IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_height = ?");
                }
            }
            if (bean.checkEyeLeftxModified()) {
                _dirtyCount ++;
                if (bean.getEyeLeftx() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_leftx IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_leftx = ?");
                }
            }
            if (bean.checkEyeLeftyModified()) {
                _dirtyCount ++;
                if (bean.getEyeLefty() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_lefty IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_lefty = ?");
                }
            }
            if (bean.checkEyeRightxModified()) {
                _dirtyCount ++;
                if (bean.getEyeRightx() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_rightx IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_rightx = ?");
                }
            }
            if (bean.checkEyeRightyModified()) {
                _dirtyCount ++;
                if (bean.getEyeRighty() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_righty IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("eye_righty = ?");
                }
            }
            if (bean.checkMouthXModified()) {
                _dirtyCount ++;
                if (bean.getMouthX() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mouth_x IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mouth_x = ?");
                }
            }
            if (bean.checkMouthYModified()) {
                _dirtyCount ++;
                if (bean.getMouthY() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mouth_y IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mouth_y = ?");
                }
            }
            if (bean.checkNoseXModified()) {
                _dirtyCount ++;
                if (bean.getNoseX() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("nose_x IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("nose_x = ?");
                }
            }
            if (bean.checkNoseYModified()) {
                _dirtyCount ++;
                if (bean.getNoseY() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("nose_y IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("nose_y = ?");
                }
            }
            if (bean.checkAngleYawModified()) {
                _dirtyCount ++;
                if (bean.getAngleYaw() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_yaw IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_yaw = ?");
                }
            }
            if (bean.checkAnglePitchModified()) {
                _dirtyCount ++;
                if (bean.getAnglePitch() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_pitch IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_pitch = ?");
                }
            }
            if (bean.checkAngleRollModified()) {
                _dirtyCount ++;
                if (bean.getAngleRoll() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_roll IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("angle_roll = ?");
                }
            }
            if (bean.checkExtInfoModified()) {
                _dirtyCount ++;
                if (bean.getExtInfo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("ext_info IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("ext_info = ?");
                }
            }
            if (bean.checkFeatureMd5Modified()) {
                _dirtyCount ++;
                if (bean.getFeatureMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("feature_md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("feature_md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkCreateTimeModified()) {
                _dirtyCount ++;
                if (bean.getCreateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlFaceBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.checkIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getId() + "]");
                if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            }
            if (bean.checkImageMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getImageMd5() + "]");
                        if (bean.getImageMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getImageMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getImageMd5() + "%]");
                        if ( bean.getImageMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getImageMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getImageMd5() + "]");
                        if ( bean.getImageMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getImageMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getImageMd5() + "%]");
                        if (bean.getImageMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getImageMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkFaceLeftModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceLeft() + "]");
                if (bean.getFaceLeft() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceLeft()); }
            }
            if (bean.checkFaceTopModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceTop() + "]");
                if (bean.getFaceTop() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceTop()); }
            }
            if (bean.checkFaceWidthModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceWidth() + "]");
                if (bean.getFaceWidth() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceWidth()); }
            }
            if (bean.checkFaceHeightModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceHeight() + "]");
                if (bean.getFaceHeight() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFaceHeight()); }
            }
            if (bean.checkEyeLeftxModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEyeLeftx() + "]");
                if (bean.getEyeLeftx() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getEyeLeftx()); }
            }
            if (bean.checkEyeLeftyModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEyeLefty() + "]");
                if (bean.getEyeLefty() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getEyeLefty()); }
            }
            if (bean.checkEyeRightxModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEyeRightx() + "]");
                if (bean.getEyeRightx() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getEyeRightx()); }
            }
            if (bean.checkEyeRightyModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEyeRighty() + "]");
                if (bean.getEyeRighty() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getEyeRighty()); }
            }
            if (bean.checkMouthXModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMouthX() + "]");
                if (bean.getMouthX() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMouthX()); }
            }
            if (bean.checkMouthYModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMouthY() + "]");
                if (bean.getMouthY() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getMouthY()); }
            }
            if (bean.checkNoseXModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getNoseX() + "]");
                if (bean.getNoseX() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getNoseX()); }
            }
            if (bean.checkNoseYModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getNoseY() + "]");
                if (bean.getNoseY() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getNoseY()); }
            }
            if (bean.checkAngleYawModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getAngleYaw() + "]");
                if (bean.getAngleYaw() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getAngleYaw()); }
            }
            if (bean.checkAnglePitchModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getAnglePitch() + "]");
                if (bean.getAnglePitch() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getAnglePitch()); }
            }
            if (bean.checkAngleRollModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getAngleRoll() + "]");
                if (bean.getAngleRoll() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getAngleRoll()); }
            }
            if (bean.checkExtInfoModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getExtInfo() + "]");
                if (bean.getExtInfo() == null) { ps.setNull(++_dirtyCount, Types.LONGVARBINARY); } else { Manager.setBytes(Types.LONGVARBINARY,ps, ++_dirtyCount, bean.getExtInfo()); }
            }
            if (bean.checkFeatureMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFeatureMd5() + "]");
                        if (bean.getFeatureMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getFeatureMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFeatureMd5() + "%]");
                        if ( bean.getFeatureMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getFeatureMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFeatureMd5() + "]");
                        if ( bean.getFeatureMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getFeatureMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFeatureMd5() + "%]");
                        if (bean.getFeatureMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getFeatureMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkCreateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCreateTime() + "]");
                if (bean.getCreateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getCreateTime().getTime())); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlFaceBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlFaceBean table
     * @throws DAOException
     */
    //28
    public FlFaceBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlFaceBean[0]);
    }

    /**
     * decode a resultset in a list of FlFaceBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlFaceBean table
     * @throws DAOException
     */
    //28-1
    public List<FlFaceBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action<FlFaceBean> action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_face on a FlFaceBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlFaceBean bean
     * @throws DAOException
     */
    //29
    public FlFaceBean decodeRow(ResultSet rs,FlFaceBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, 1));
            bean.setImageMd5(rs.getString(2));
            bean.setFaceLeft(Manager.getInteger(rs, 3));
            bean.setFaceTop(Manager.getInteger(rs, 4));
            bean.setFaceWidth(Manager.getInteger(rs, 5));
            bean.setFaceHeight(Manager.getInteger(rs, 6));
            bean.setEyeLeftx(Manager.getInteger(rs, 7));
            bean.setEyeLefty(Manager.getInteger(rs, 8));
            bean.setEyeRightx(Manager.getInteger(rs, 9));
            bean.setEyeRighty(Manager.getInteger(rs, 10));
            bean.setMouthX(Manager.getInteger(rs, 11));
            bean.setMouthY(Manager.getInteger(rs, 12));
            bean.setNoseX(Manager.getInteger(rs, 13));
            bean.setNoseY(Manager.getInteger(rs, 14));
            bean.setAngleYaw(Manager.getInteger(rs, 15));
            bean.setAnglePitch(Manager.getInteger(rs, 16));
            bean.setAngleRoll(Manager.getInteger(rs, 17));
            bean.setExtInfo(Manager.getBytes(rs, 18));
            bean.setFeatureMd5(rs.getString(19));
            bean.setCreateTime(rs.getTimestamp(20));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_face table on a FlFaceBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlFaceBean bean
     * @throws DAOException
     */
    //30
    public FlFaceBean decodeRow(ResultSet rs, int[] fieldList,FlFaceBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case FL_FACE_ID_ID:
                        ++pos;
                        bean.setId(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_IMAGE_MD5:
                        ++pos;
                        bean.setImageMd5(rs.getString(pos));
                        break;
                    case FL_FACE_ID_FACE_LEFT:
                        ++pos;
                        bean.setFaceLeft(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_FACE_TOP:
                        ++pos;
                        bean.setFaceTop(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_FACE_WIDTH:
                        ++pos;
                        bean.setFaceWidth(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_FACE_HEIGHT:
                        ++pos;
                        bean.setFaceHeight(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_EYE_LEFTX:
                        ++pos;
                        bean.setEyeLeftx(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_EYE_LEFTY:
                        ++pos;
                        bean.setEyeLefty(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_EYE_RIGHTX:
                        ++pos;
                        bean.setEyeRightx(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_EYE_RIGHTY:
                        ++pos;
                        bean.setEyeRighty(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_MOUTH_X:
                        ++pos;
                        bean.setMouthX(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_MOUTH_Y:
                        ++pos;
                        bean.setMouthY(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_NOSE_X:
                        ++pos;
                        bean.setNoseX(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_NOSE_Y:
                        ++pos;
                        bean.setNoseY(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_ANGLE_YAW:
                        ++pos;
                        bean.setAngleYaw(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_ANGLE_PITCH:
                        ++pos;
                        bean.setAnglePitch(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_ANGLE_ROLL:
                        ++pos;
                        bean.setAngleRoll(Manager.getInteger(rs, pos));
                        break;
                    case FL_FACE_ID_EXT_INFO:
                        ++pos;
                        bean.setExtInfo(Manager.getBytes(rs, pos));
                        break;
                    case FL_FACE_ID_FEATURE_MD5:
                        ++pos;
                        bean.setFeatureMd5(rs.getString(pos));
                        break;
                    case FL_FACE_ID_CREATE_TIME:
                        ++pos;
                        bean.setCreateTime(rs.getTimestamp(pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_face on a FlFaceBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlFaceBean bean
     * @throws DAOException
     */
    //31
    public FlFaceBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlFaceBean bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, "id"));
            bean.setImageMd5(rs.getString("image_md5"));
            bean.setFaceLeft(Manager.getInteger(rs, "face_left"));
            bean.setFaceTop(Manager.getInteger(rs, "face_top"));
            bean.setFaceWidth(Manager.getInteger(rs, "face_width"));
            bean.setFaceHeight(Manager.getInteger(rs, "face_height"));
            bean.setEyeLeftx(Manager.getInteger(rs, "eye_leftx"));
            bean.setEyeLefty(Manager.getInteger(rs, "eye_lefty"));
            bean.setEyeRightx(Manager.getInteger(rs, "eye_rightx"));
            bean.setEyeRighty(Manager.getInteger(rs, "eye_righty"));
            bean.setMouthX(Manager.getInteger(rs, "mouth_x"));
            bean.setMouthY(Manager.getInteger(rs, "mouth_y"));
            bean.setNoseX(Manager.getInteger(rs, "nose_x"));
            bean.setNoseY(Manager.getInteger(rs, "nose_y"));
            bean.setAngleYaw(Manager.getInteger(rs, "angle_yaw"));
            bean.setAnglePitch(Manager.getInteger(rs, "angle_pitch"));
            bean.setAngleRoll(Manager.getInteger(rs, "angle_roll"));
            bean.setExtInfo(Manager.getBytes(rs, "ext_info"));
            bean.setFeatureMd5(rs.getString("feature_md5"));
            bean.setCreateTime(rs.getTimestamp("create_time"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlFaceBean
     * @throws DAOException
     */
    //32
    public FlFaceBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlFaceBean
     * @throws DAOException
     */
    //32
    public List<FlFaceBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceBean
     * @throws DAOException
     */
    //33
    public FlFaceBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlFaceBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceBean
     * @throws DAOException
     */
    //33
    public List<FlFaceBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceBean
     * @throws DAOException
     */
    //34
    public FlFaceBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlFaceBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlFaceBean
     * @throws DAOException
     */
    //34-1
    public List<FlFaceBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action<FlFaceBean> action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    class ListenerContainer implements TableListener<FlFaceBean> {
        private final Set<TableListener<FlFaceBean>> listeners = new TreeSet<TableListener<FlFaceBean>>();
        public ListenerContainer() {
        }
    
        @Override
        public void beforeInsert(FlFaceBean bean) throws DAOException {
            for(TableListener<FlFaceBean> listener:listeners){
                listener.beforeInsert(bean);
            }
        }
    
        @Override
        public void afterInsert(FlFaceBean bean) throws DAOException {
            for(TableListener<FlFaceBean> listener:listeners){
                listener.afterInsert(bean);
            }
        }
    
        @Override
        public void beforeUpdate(FlFaceBean bean) throws DAOException {
            for(TableListener<FlFaceBean> listener:listeners){
                listener.beforeUpdate(bean);
            }
        }
    
        @Override
        public void afterUpdate(FlFaceBean bean) throws DAOException {
            for(TableListener<FlFaceBean> listener:listeners){
                listener.afterUpdate(bean);
            }
        }
    
        @Override
        public void beforeDelete(FlFaceBean bean) throws DAOException {
            for(TableListener<FlFaceBean> listener:listeners){
                listener.beforeDelete(bean);
            }
        }
    
        @Override
        public void afterDelete(FlFaceBean bean) throws DAOException {
            for(TableListener<FlFaceBean> listener:listeners){
                listener.afterDelete(bean);
            }
        }
    
        public boolean isEmpty() {
            return listeners.isEmpty();
        }
    
        public boolean contains(TableListener<FlFaceBean> o) {
            return listeners.contains(o);
        }
    
        public synchronized boolean add(TableListener<FlFaceBean> e) {
            if(null == e)
                throw new NullPointerException();
            return listeners.add(e);
        }
    
        public synchronized boolean remove(TableListener<FlFaceBean> o) {
            return null == o? false : listeners.remove(o);
        }
    
        public synchronized void clear() {
            listeners.clear();
        }    
    }
    private final ListenerContainer listenerContainer = new ListenerContainer();

    //35
    @Override
    public void registerListener(TableListener<FlFaceBean> listener)
    {
        this.listenerContainer.add(listener);
    }

    /**
     * remove listener.
     */
    //36
    @Override
    public void unregisterListener(TableListener<FlFaceBean> listener)
    {
        this.listenerContainer.remove(listener);
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    //43
    @Override
    public boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    @Override    
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<FlFaceBean> action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
   
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    class DeleteBeanAction extends Action.Adapter<FlFaceBean>{
        private final AtomicInteger count=new AtomicInteger(0);
        @Override
        public void call(FlFaceBean bean) throws DAOException {
                FlFaceManager.this.delete(bean);
                count.incrementAndGet();
        }
        int getCount(){
            return count.get();
        }
    }
    /**
     * return a primary key list from {@link FlFaceBean} array
     * @param array
     */
    //45
    public List<Integer> toPrimaryKeyList(FlFaceBean... array){        
        if(null == array)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(array.length);
        for(FlFaceBean bean:array){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
    /**
     * return a primary key list from {@link FlFaceBean} collection
     * @param array
     */
    //46
    public List<Integer> toPrimaryKeyList(java.util.Collection<FlFaceBean> collection){        
        if(null == collection)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(collection.size());
        for(FlFaceBean bean:collection){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
}
