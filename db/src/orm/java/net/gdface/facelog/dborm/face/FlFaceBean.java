// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.face;

import net.gdface.facelog.dborm.FullBean;

/**
 * FlFaceBean is a mapping of fl_face Table.
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: 人脸检测信息数据表,用于保存检测到的人脸的所有信息(特征数据除外) </li>
 * </ul>
 * @author sql2java
*/
public class FlFaceBean
    extends FlFaceBeanBase
    implements FullBean<FlFaceBeanBase>
{
	private static final long serialVersionUID = -8342684639958440642L;
	
    private boolean createTimeIsModified = false;
    private boolean createTimeIsInitialized = false;

    private boolean featureIsModified = false;
    private boolean featureIsInitialized = false;

    private boolean extInfoIsModified = false;
    private boolean extInfoIsInitialized = false;

    private boolean angleRollIsModified = false;
    private boolean angleRollIsInitialized = false;

    private boolean anglePitchIsModified = false;
    private boolean anglePitchIsInitialized = false;

    private boolean angleYawIsModified = false;
    private boolean angleYawIsInitialized = false;

    private boolean noseYIsModified = false;
    private boolean noseYIsInitialized = false;

    private boolean noseXIsModified = false;
    private boolean noseXIsInitialized = false;

    private boolean mouthYIsModified = false;
    private boolean mouthYIsInitialized = false;

    private boolean mouthXIsModified = false;
    private boolean mouthXIsInitialized = false;

    private boolean eyeRightyIsModified = false;
    private boolean eyeRightyIsInitialized = false;

    private boolean eyeRightxIsModified = false;
    private boolean eyeRightxIsInitialized = false;

    private boolean eyeLeftyIsModified = false;
    private boolean eyeLeftyIsInitialized = false;

    private boolean eyeLeftxIsModified = false;
    private boolean eyeLeftxIsInitialized = false;

    private boolean faceHeightIsModified = false;
    private boolean faceHeightIsInitialized = false;

    private boolean faceWidthIsModified = false;
    private boolean faceWidthIsInitialized = false;

    private boolean faceTopIsModified = false;
    private boolean faceTopIsInitialized = false;

    private boolean faceLeftIsModified = false;
    private boolean faceLeftIsInitialized = false;

    private boolean imgMd5IsModified = false;
    private boolean imgMd5IsInitialized = false;

    private boolean personIdIsModified = false;
    private boolean personIdIsInitialized = false;

    private boolean md5IsModified = false;
    private boolean md5IsInitialized = false;



    /**
     * Prefered methods to create a FlFaceBean is via the createFlFaceBean method in FlFaceManager or
     * via the factory class FlFaceFactory create method
     * 为了能在webservice中传递对象，此处从protected改为public
     */
    public FlFaceBean(){
        super();
    }
    /**
     * create a FlFaceBean from a instance
     */
    FlFaceBean(FlFaceBeanBase bean){
        super();
        copy(bean);
    }
    /**
     * Getter method for createTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.create_time</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of createTime
     */
    public java.util.Date getCreateTime(){
        return createTime;
    }
    /**
     * Setter method for createTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(java.util.Date newVal)
    {
        if ((newVal != null && createTime != null && (newVal.compareTo(createTime) == 0)) ||
            (newVal == null && createTime == null && createTimeIsInitialized)) {
            return;
        }
        super.setCreateTime(newVal);
        createTimeIsModified = true;
        createTimeIsInitialized = true;
    }

    /**
     * Setter method for createTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(long newVal)
    {
        setCreateTime(new java.util.Date(newVal));
    }

    /**
     * Determines if the createTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreateTimeModified()
    {
        return createTimeIsModified;
    }

    /**
     * Determines if the createTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreateTimeInitialized()
    {
        return createTimeIsInitialized;
    }

    /**
     * Getter method for feature.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.feature</li>
     * <li>comments: 二进制特征数据</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of feature
     */
    public byte[] getFeature(){
        return feature;
    }
    /**
     * Setter method for feature.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to feature
     */
    public void setFeature(byte[] newVal)
    {
        super.setFeature(newVal);
        featureIsModified = true;
        featureIsInitialized = true;
    }

    /**
     * Determines if the feature has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFeatureModified()
    {
        return featureIsModified;
    }

    /**
     * Determines if the feature has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFeatureInitialized()
    {
        return featureIsInitialized;
    }

    /**
     * Getter method for extInfo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.ext_info</li>
     * <li>comments: 扩展字段,保存人脸检测基本信息之外的其他数据,内容由SDK负责解析</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of extInfo
     */
    public byte[] getExtInfo(){
        return extInfo;
    }
    /**
     * Setter method for extInfo.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to extInfo
     */
    public void setExtInfo(byte[] newVal)
    {
        super.setExtInfo(newVal);
        extInfoIsModified = true;
        extInfoIsInitialized = true;
    }

    /**
     * Determines if the extInfo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExtInfoModified()
    {
        return extInfoIsModified;
    }

    /**
     * Determines if the extInfo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExtInfoInitialized()
    {
        return extInfoIsInitialized;
    }

    /**
     * Getter method for angleRoll.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.angle_roll</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of angleRoll
     */
    public Integer getAngleRoll(){
        return angleRoll;
    }
    /**
     * Setter method for angleRoll.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to angleRoll
     */
    public void setAngleRoll(Integer newVal)
    {
        if ((newVal != null && angleRoll != null && (newVal.compareTo(angleRoll) == 0)) ||
            (newVal == null && angleRoll == null && angleRollIsInitialized)) {
            return;
        }
        super.setAngleRoll(newVal);
        angleRollIsModified = true;
        angleRollIsInitialized = true;
    }

    /**
     * Setter method for angleRoll.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to angleRoll
     */
    public void setAngleRoll(int newVal)
    {
        setAngleRoll(new Integer(newVal));
    }

    /**
     * Determines if the angleRoll has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAngleRollModified()
    {
        return angleRollIsModified;
    }

    /**
     * Determines if the angleRoll has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAngleRollInitialized()
    {
        return angleRollIsInitialized;
    }

    /**
     * Getter method for anglePitch.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.angle_pitch</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of anglePitch
     */
    public Integer getAnglePitch(){
        return anglePitch;
    }
    /**
     * Setter method for anglePitch.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to anglePitch
     */
    public void setAnglePitch(Integer newVal)
    {
        if ((newVal != null && anglePitch != null && (newVal.compareTo(anglePitch) == 0)) ||
            (newVal == null && anglePitch == null && anglePitchIsInitialized)) {
            return;
        }
        super.setAnglePitch(newVal);
        anglePitchIsModified = true;
        anglePitchIsInitialized = true;
    }

    /**
     * Setter method for anglePitch.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to anglePitch
     */
    public void setAnglePitch(int newVal)
    {
        setAnglePitch(new Integer(newVal));
    }

    /**
     * Determines if the anglePitch has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAnglePitchModified()
    {
        return anglePitchIsModified;
    }

    /**
     * Determines if the anglePitch has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAnglePitchInitialized()
    {
        return anglePitchIsInitialized;
    }

    /**
     * Getter method for angleYaw.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.angle_yaw</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of angleYaw
     */
    public Integer getAngleYaw(){
        return angleYaw;
    }
    /**
     * Setter method for angleYaw.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to angleYaw
     */
    public void setAngleYaw(Integer newVal)
    {
        if ((newVal != null && angleYaw != null && (newVal.compareTo(angleYaw) == 0)) ||
            (newVal == null && angleYaw == null && angleYawIsInitialized)) {
            return;
        }
        super.setAngleYaw(newVal);
        angleYawIsModified = true;
        angleYawIsInitialized = true;
    }

    /**
     * Setter method for angleYaw.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to angleYaw
     */
    public void setAngleYaw(int newVal)
    {
        setAngleYaw(new Integer(newVal));
    }

    /**
     * Determines if the angleYaw has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAngleYawModified()
    {
        return angleYawIsModified;
    }

    /**
     * Determines if the angleYaw has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAngleYawInitialized()
    {
        return angleYawIsInitialized;
    }

    /**
     * Getter method for noseY.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.nose_y</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of noseY
     */
    public Integer getNoseY(){
        return noseY;
    }
    /**
     * Setter method for noseY.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to noseY
     */
    public void setNoseY(Integer newVal)
    {
        if ((newVal != null && noseY != null && (newVal.compareTo(noseY) == 0)) ||
            (newVal == null && noseY == null && noseYIsInitialized)) {
            return;
        }
        super.setNoseY(newVal);
        noseYIsModified = true;
        noseYIsInitialized = true;
    }

    /**
     * Setter method for noseY.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to noseY
     */
    public void setNoseY(int newVal)
    {
        setNoseY(new Integer(newVal));
    }

    /**
     * Determines if the noseY has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoseYModified()
    {
        return noseYIsModified;
    }

    /**
     * Determines if the noseY has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoseYInitialized()
    {
        return noseYIsInitialized;
    }

    /**
     * Getter method for noseX.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.nose_x</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of noseX
     */
    public Integer getNoseX(){
        return noseX;
    }
    /**
     * Setter method for noseX.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to noseX
     */
    public void setNoseX(Integer newVal)
    {
        if ((newVal != null && noseX != null && (newVal.compareTo(noseX) == 0)) ||
            (newVal == null && noseX == null && noseXIsInitialized)) {
            return;
        }
        super.setNoseX(newVal);
        noseXIsModified = true;
        noseXIsInitialized = true;
    }

    /**
     * Setter method for noseX.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to noseX
     */
    public void setNoseX(int newVal)
    {
        setNoseX(new Integer(newVal));
    }

    /**
     * Determines if the noseX has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoseXModified()
    {
        return noseXIsModified;
    }

    /**
     * Determines if the noseX has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoseXInitialized()
    {
        return noseXIsInitialized;
    }

    /**
     * Getter method for mouthY.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.mouth_y</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mouthY
     */
    public Integer getMouthY(){
        return mouthY;
    }
    /**
     * Setter method for mouthY.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mouthY
     */
    public void setMouthY(Integer newVal)
    {
        if ((newVal != null && mouthY != null && (newVal.compareTo(mouthY) == 0)) ||
            (newVal == null && mouthY == null && mouthYIsInitialized)) {
            return;
        }
        super.setMouthY(newVal);
        mouthYIsModified = true;
        mouthYIsInitialized = true;
    }

    /**
     * Setter method for mouthY.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mouthY
     */
    public void setMouthY(int newVal)
    {
        setMouthY(new Integer(newVal));
    }

    /**
     * Determines if the mouthY has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMouthYModified()
    {
        return mouthYIsModified;
    }

    /**
     * Determines if the mouthY has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMouthYInitialized()
    {
        return mouthYIsInitialized;
    }

    /**
     * Getter method for mouthX.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.mouth_x</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mouthX
     */
    public Integer getMouthX(){
        return mouthX;
    }
    /**
     * Setter method for mouthX.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mouthX
     */
    public void setMouthX(Integer newVal)
    {
        if ((newVal != null && mouthX != null && (newVal.compareTo(mouthX) == 0)) ||
            (newVal == null && mouthX == null && mouthXIsInitialized)) {
            return;
        }
        super.setMouthX(newVal);
        mouthXIsModified = true;
        mouthXIsInitialized = true;
    }

    /**
     * Setter method for mouthX.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mouthX
     */
    public void setMouthX(int newVal)
    {
        setMouthX(new Integer(newVal));
    }

    /**
     * Determines if the mouthX has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMouthXModified()
    {
        return mouthXIsModified;
    }

    /**
     * Determines if the mouthX has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMouthXInitialized()
    {
        return mouthXIsInitialized;
    }

    /**
     * Getter method for eyeRighty.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.eye_righty</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeRighty
     */
    public Integer getEyeRighty(){
        return eyeRighty;
    }
    /**
     * Setter method for eyeRighty.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to eyeRighty
     */
    public void setEyeRighty(Integer newVal)
    {
        if ((newVal != null && eyeRighty != null && (newVal.compareTo(eyeRighty) == 0)) ||
            (newVal == null && eyeRighty == null && eyeRightyIsInitialized)) {
            return;
        }
        super.setEyeRighty(newVal);
        eyeRightyIsModified = true;
        eyeRightyIsInitialized = true;
    }

    /**
     * Setter method for eyeRighty.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeRighty
     */
    public void setEyeRighty(int newVal)
    {
        setEyeRighty(new Integer(newVal));
    }

    /**
     * Determines if the eyeRighty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEyeRightyModified()
    {
        return eyeRightyIsModified;
    }

    /**
     * Determines if the eyeRighty has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEyeRightyInitialized()
    {
        return eyeRightyIsInitialized;
    }

    /**
     * Getter method for eyeRightx.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.eye_rightx</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeRightx
     */
    public Integer getEyeRightx(){
        return eyeRightx;
    }
    /**
     * Setter method for eyeRightx.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to eyeRightx
     */
    public void setEyeRightx(Integer newVal)
    {
        if ((newVal != null && eyeRightx != null && (newVal.compareTo(eyeRightx) == 0)) ||
            (newVal == null && eyeRightx == null && eyeRightxIsInitialized)) {
            return;
        }
        super.setEyeRightx(newVal);
        eyeRightxIsModified = true;
        eyeRightxIsInitialized = true;
    }

    /**
     * Setter method for eyeRightx.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeRightx
     */
    public void setEyeRightx(int newVal)
    {
        setEyeRightx(new Integer(newVal));
    }

    /**
     * Determines if the eyeRightx has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEyeRightxModified()
    {
        return eyeRightxIsModified;
    }

    /**
     * Determines if the eyeRightx has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEyeRightxInitialized()
    {
        return eyeRightxIsInitialized;
    }

    /**
     * Getter method for eyeLefty.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.eye_lefty</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeLefty
     */
    public Integer getEyeLefty(){
        return eyeLefty;
    }
    /**
     * Setter method for eyeLefty.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to eyeLefty
     */
    public void setEyeLefty(Integer newVal)
    {
        if ((newVal != null && eyeLefty != null && (newVal.compareTo(eyeLefty) == 0)) ||
            (newVal == null && eyeLefty == null && eyeLeftyIsInitialized)) {
            return;
        }
        super.setEyeLefty(newVal);
        eyeLeftyIsModified = true;
        eyeLeftyIsInitialized = true;
    }

    /**
     * Setter method for eyeLefty.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeLefty
     */
    public void setEyeLefty(int newVal)
    {
        setEyeLefty(new Integer(newVal));
    }

    /**
     * Determines if the eyeLefty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEyeLeftyModified()
    {
        return eyeLeftyIsModified;
    }

    /**
     * Determines if the eyeLefty has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEyeLeftyInitialized()
    {
        return eyeLeftyIsInitialized;
    }

    /**
     * Getter method for eyeLeftx.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.eye_leftx</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeLeftx
     */
    public Integer getEyeLeftx(){
        return eyeLeftx;
    }
    /**
     * Setter method for eyeLeftx.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to eyeLeftx
     */
    public void setEyeLeftx(Integer newVal)
    {
        if ((newVal != null && eyeLeftx != null && (newVal.compareTo(eyeLeftx) == 0)) ||
            (newVal == null && eyeLeftx == null && eyeLeftxIsInitialized)) {
            return;
        }
        super.setEyeLeftx(newVal);
        eyeLeftxIsModified = true;
        eyeLeftxIsInitialized = true;
    }

    /**
     * Setter method for eyeLeftx.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeLeftx
     */
    public void setEyeLeftx(int newVal)
    {
        setEyeLeftx(new Integer(newVal));
    }

    /**
     * Determines if the eyeLeftx has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEyeLeftxModified()
    {
        return eyeLeftxIsModified;
    }

    /**
     * Determines if the eyeLeftx has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEyeLeftxInitialized()
    {
        return eyeLeftxIsInitialized;
    }

    /**
     * Getter method for faceHeight.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.face_height</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceHeight
     */
    public Integer getFaceHeight(){
        return faceHeight;
    }
    /**
     * Setter method for faceHeight.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceHeight
     */
    public void setFaceHeight(Integer newVal)
    {
        if ((newVal != null && faceHeight != null && (newVal.compareTo(faceHeight) == 0)) ||
            (newVal == null && faceHeight == null && faceHeightIsInitialized)) {
            return;
        }
        super.setFaceHeight(newVal);
        faceHeightIsModified = true;
        faceHeightIsInitialized = true;
    }

    /**
     * Setter method for faceHeight.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceHeight
     */
    public void setFaceHeight(int newVal)
    {
        setFaceHeight(new Integer(newVal));
    }

    /**
     * Determines if the faceHeight has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaceHeightModified()
    {
        return faceHeightIsModified;
    }

    /**
     * Determines if the faceHeight has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaceHeightInitialized()
    {
        return faceHeightIsInitialized;
    }

    /**
     * Getter method for faceWidth.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.face_width</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceWidth
     */
    public Integer getFaceWidth(){
        return faceWidth;
    }
    /**
     * Setter method for faceWidth.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceWidth
     */
    public void setFaceWidth(Integer newVal)
    {
        if ((newVal != null && faceWidth != null && (newVal.compareTo(faceWidth) == 0)) ||
            (newVal == null && faceWidth == null && faceWidthIsInitialized)) {
            return;
        }
        super.setFaceWidth(newVal);
        faceWidthIsModified = true;
        faceWidthIsInitialized = true;
    }

    /**
     * Setter method for faceWidth.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceWidth
     */
    public void setFaceWidth(int newVal)
    {
        setFaceWidth(new Integer(newVal));
    }

    /**
     * Determines if the faceWidth has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaceWidthModified()
    {
        return faceWidthIsModified;
    }

    /**
     * Determines if the faceWidth has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaceWidthInitialized()
    {
        return faceWidthIsInitialized;
    }

    /**
     * Getter method for faceTop.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.face_top</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceTop
     */
    public Integer getFaceTop(){
        return faceTop;
    }
    /**
     * Setter method for faceTop.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceTop
     */
    public void setFaceTop(Integer newVal)
    {
        if ((newVal != null && faceTop != null && (newVal.compareTo(faceTop) == 0)) ||
            (newVal == null && faceTop == null && faceTopIsInitialized)) {
            return;
        }
        super.setFaceTop(newVal);
        faceTopIsModified = true;
        faceTopIsInitialized = true;
    }

    /**
     * Setter method for faceTop.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceTop
     */
    public void setFaceTop(int newVal)
    {
        setFaceTop(new Integer(newVal));
    }

    /**
     * Determines if the faceTop has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaceTopModified()
    {
        return faceTopIsModified;
    }

    /**
     * Determines if the faceTop has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaceTopInitialized()
    {
        return faceTopIsInitialized;
    }

    /**
     * Getter method for faceLeft.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.face_left</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceLeft
     */
    public Integer getFaceLeft(){
        return faceLeft;
    }
    /**
     * Setter method for faceLeft.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to faceLeft
     */
    public void setFaceLeft(Integer newVal)
    {
        if ((newVal != null && faceLeft != null && (newVal.compareTo(faceLeft) == 0)) ||
            (newVal == null && faceLeft == null && faceLeftIsInitialized)) {
            return;
        }
        super.setFaceLeft(newVal);
        faceLeftIsModified = true;
        faceLeftIsInitialized = true;
    }

    /**
     * Setter method for faceLeft.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceLeft
     */
    public void setFaceLeft(int newVal)
    {
        setFaceLeft(new Integer(newVal));
    }

    /**
     * Determines if the faceLeft has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFaceLeftModified()
    {
        return faceLeftIsModified;
    }

    /**
     * Determines if the faceLeft has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFaceLeftInitialized()
    {
        return faceLeftIsInitialized;
    }

    /**
     * Getter method for imgMd5.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.img_md5</li>
     * <li> foreign key: fl_image.md5</li>
     * <li>comments: 外键,所属图像id</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of imgMd5
     */
    public String getImgMd5(){
        return imgMd5;
    }
    /**
     * Setter method for imgMd5.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to imgMd5
     */
    public void setImgMd5(String newVal)
    {
        if ((newVal != null && imgMd5 != null && (newVal.compareTo(imgMd5) == 0)) ||
            (newVal == null && imgMd5 == null && imgMd5IsInitialized)) {
            return;
        }
        super.setImgMd5(newVal);
        imgMd5IsModified = true;
        imgMd5IsInitialized = true;
    }

    /**
     * Determines if the imgMd5 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isImgMd5Modified()
    {
        return imgMd5IsModified;
    }

    /**
     * Determines if the imgMd5 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isImgMd5Initialized()
    {
        return imgMd5IsInitialized;
    }

    /**
     * Getter method for personId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.person_id</li>
     * <li> foreign key: fl_person.id</li>
     * <li>comments: 外键,所属用户id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of personId
     */
    public Integer getPersonId(){
        return personId;
    }
    /**
     * Setter method for personId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to personId
     */
    public void setPersonId(Integer newVal)
    {
        if ((newVal != null && personId != null && (newVal.compareTo(personId) == 0)) ||
            (newVal == null && personId == null && personIdIsInitialized)) {
            return;
        }
        super.setPersonId(newVal);
        personIdIsModified = true;
        personIdIsInitialized = true;
    }

    /**
     * Setter method for personId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to personId
     */
    public void setPersonId(int newVal)
    {
        setPersonId(new Integer(newVal));
    }

    /**
     * Determines if the personId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPersonIdModified()
    {
        return personIdIsModified;
    }

    /**
     * Determines if the personId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPersonIdInitialized()
    {
        return personIdIsInitialized;
    }

    /**
     * Getter method for md5.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.md5</li>
     * <li> imported key: fl_log.compare_face</li>
     * <li> imported key: fl_log.verify_face</li>
     * <li>comments: 主键,特征数据md5校验码</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of md5
     */
    public String getMd5(){
        return md5;
    }
    /**
     * Setter method for md5.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to md5
     */
    public void setMd5(String newVal)
    {
        if ((newVal != null && md5 != null && (newVal.compareTo(md5) == 0)) ||
            (newVal == null && md5 == null && md5IsInitialized)) {
            return;
        }
        super.setMd5(newVal);
        md5IsModified = true;
        md5IsInitialized = true;
    }

    /**
     * Determines if the md5 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMd5Modified()
    {
        return md5IsModified;
    }

    /**
     * Determines if the md5 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMd5Initialized()
    {
        return md5IsInitialized;
    }



    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return createTimeIsModified 		|| featureIsModified  		|| extInfoIsModified  		|| angleRollIsModified  		|| anglePitchIsModified  		|| angleYawIsModified  		|| noseYIsModified  		|| noseXIsModified  		|| mouthYIsModified  		|| mouthXIsModified  		|| eyeRightyIsModified  		|| eyeRightxIsModified  		|| eyeLeftyIsModified  		|| eyeLeftxIsModified  		|| faceHeightIsModified  		|| faceWidthIsModified  		|| faceTopIsModified  		|| faceLeftIsModified  		|| imgMd5IsModified  		|| personIdIsModified  		|| md5IsModified  ;
    }
    
    /**
     * Determines if the {@code column} has been modified.
     * @param column
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(String column){
        if (null == column || "".equals(column)) {
            return false;
        } else if ("create_time".equalsIgnoreCase(column) || "createTime".equalsIgnoreCase(column)) {
            return isCreateTimeModified();
        } else if ("feature".equalsIgnoreCase(column) || "feature".equalsIgnoreCase(column)) {
            return isFeatureModified();
        } else if ("ext_info".equalsIgnoreCase(column) || "extInfo".equalsIgnoreCase(column)) {
            return isExtInfoModified();
        } else if ("angle_roll".equalsIgnoreCase(column) || "angleRoll".equalsIgnoreCase(column)) {
            return isAngleRollModified();
        } else if ("angle_pitch".equalsIgnoreCase(column) || "anglePitch".equalsIgnoreCase(column)) {
            return isAnglePitchModified();
        } else if ("angle_yaw".equalsIgnoreCase(column) || "angleYaw".equalsIgnoreCase(column)) {
            return isAngleYawModified();
        } else if ("nose_y".equalsIgnoreCase(column) || "noseY".equalsIgnoreCase(column)) {
            return isNoseYModified();
        } else if ("nose_x".equalsIgnoreCase(column) || "noseX".equalsIgnoreCase(column)) {
            return isNoseXModified();
        } else if ("mouth_y".equalsIgnoreCase(column) || "mouthY".equalsIgnoreCase(column)) {
            return isMouthYModified();
        } else if ("mouth_x".equalsIgnoreCase(column) || "mouthX".equalsIgnoreCase(column)) {
            return isMouthXModified();
        } else if ("eye_righty".equalsIgnoreCase(column) || "eyeRighty".equalsIgnoreCase(column)) {
            return isEyeRightyModified();
        } else if ("eye_rightx".equalsIgnoreCase(column) || "eyeRightx".equalsIgnoreCase(column)) {
            return isEyeRightxModified();
        } else if ("eye_lefty".equalsIgnoreCase(column) || "eyeLefty".equalsIgnoreCase(column)) {
            return isEyeLeftyModified();
        } else if ("eye_leftx".equalsIgnoreCase(column) || "eyeLeftx".equalsIgnoreCase(column)) {
            return isEyeLeftxModified();
        } else if ("face_height".equalsIgnoreCase(column) || "faceHeight".equalsIgnoreCase(column)) {
            return isFaceHeightModified();
        } else if ("face_width".equalsIgnoreCase(column) || "faceWidth".equalsIgnoreCase(column)) {
            return isFaceWidthModified();
        } else if ("face_top".equalsIgnoreCase(column) || "faceTop".equalsIgnoreCase(column)) {
            return isFaceTopModified();
        } else if ("face_left".equalsIgnoreCase(column) || "faceLeft".equalsIgnoreCase(column)) {
            return isFaceLeftModified();
        } else if ("img_md5".equalsIgnoreCase(column) || "imgMd5".equalsIgnoreCase(column)) {
            return isImgMd5Modified();
        } else if ("person_id".equalsIgnoreCase(column) || "personId".equalsIgnoreCase(column)) {
            return isPersonIdModified();
        } else if ("md5".equalsIgnoreCase(column) || "md5".equalsIgnoreCase(column)) {
            return isMd5Modified();
        }
        return false;		
    }

    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param column
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(String column){
        if (null == column || "".equals(column)) {
            return false;
        } else if ("create_time".equalsIgnoreCase(column) || "createTime".equalsIgnoreCase(column)) {
            return isCreateTimeInitialized();
        } else if ("feature".equalsIgnoreCase(column) || "feature".equalsIgnoreCase(column)) {
            return isFeatureInitialized();
        } else if ("ext_info".equalsIgnoreCase(column) || "extInfo".equalsIgnoreCase(column)) {
            return isExtInfoInitialized();
        } else if ("angle_roll".equalsIgnoreCase(column) || "angleRoll".equalsIgnoreCase(column)) {
            return isAngleRollInitialized();
        } else if ("angle_pitch".equalsIgnoreCase(column) || "anglePitch".equalsIgnoreCase(column)) {
            return isAnglePitchInitialized();
        } else if ("angle_yaw".equalsIgnoreCase(column) || "angleYaw".equalsIgnoreCase(column)) {
            return isAngleYawInitialized();
        } else if ("nose_y".equalsIgnoreCase(column) || "noseY".equalsIgnoreCase(column)) {
            return isNoseYInitialized();
        } else if ("nose_x".equalsIgnoreCase(column) || "noseX".equalsIgnoreCase(column)) {
            return isNoseXInitialized();
        } else if ("mouth_y".equalsIgnoreCase(column) || "mouthY".equalsIgnoreCase(column)) {
            return isMouthYInitialized();
        } else if ("mouth_x".equalsIgnoreCase(column) || "mouthX".equalsIgnoreCase(column)) {
            return isMouthXInitialized();
        } else if ("eye_righty".equalsIgnoreCase(column) || "eyeRighty".equalsIgnoreCase(column)) {
            return isEyeRightyInitialized();
        } else if ("eye_rightx".equalsIgnoreCase(column) || "eyeRightx".equalsIgnoreCase(column)) {
            return isEyeRightxInitialized();
        } else if ("eye_lefty".equalsIgnoreCase(column) || "eyeLefty".equalsIgnoreCase(column)) {
            return isEyeLeftyInitialized();
        } else if ("eye_leftx".equalsIgnoreCase(column) || "eyeLeftx".equalsIgnoreCase(column)) {
            return isEyeLeftxInitialized();
        } else if ("face_height".equalsIgnoreCase(column) || "faceHeight".equalsIgnoreCase(column)) {
            return isFaceHeightInitialized();
        } else if ("face_width".equalsIgnoreCase(column) || "faceWidth".equalsIgnoreCase(column)) {
            return isFaceWidthInitialized();
        } else if ("face_top".equalsIgnoreCase(column) || "faceTop".equalsIgnoreCase(column)) {
            return isFaceTopInitialized();
        } else if ("face_left".equalsIgnoreCase(column) || "faceLeft".equalsIgnoreCase(column)) {
            return isFaceLeftInitialized();
        } else if ("img_md5".equalsIgnoreCase(column) || "imgMd5".equalsIgnoreCase(column)) {
            return isImgMd5Initialized();
        } else if ("person_id".equalsIgnoreCase(column) || "personId".equalsIgnoreCase(column)) {
            return isPersonIdInitialized();
        } else if ("md5".equalsIgnoreCase(column) || "md5".equalsIgnoreCase(column)) {
            return isMd5Initialized();
        }
        return false;		
    }
    
    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        createTimeIsModified = false;
        featureIsModified = false;
        extInfoIsModified = false;
        angleRollIsModified = false;
        anglePitchIsModified = false;
        angleYawIsModified = false;
        noseYIsModified = false;
        noseXIsModified = false;
        mouthYIsModified = false;
        mouthXIsModified = false;
        eyeRightyIsModified = false;
        eyeRightxIsModified = false;
        eyeLeftyIsModified = false;
        eyeLeftxIsModified = false;
        faceHeightIsModified = false;
        faceWidthIsModified = false;
        faceTopIsModified = false;
        faceLeftIsModified = false;
        imgMd5IsModified = false;
        personIdIsModified = false;
        md5IsModified = false;
    }

    /**
     * set all field to null and reset all modification status
     * @see #resetIsModified() 
     */
    public FlFaceBean clean()
    {
        super.clean();
        resetIsModified();
        return this;
    }

}
