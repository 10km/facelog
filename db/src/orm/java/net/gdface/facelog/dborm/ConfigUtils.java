// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package net.gdface.facelog.dborm;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;

public class ConfigUtils {
	/**
	 * ¨¦????????¨¨?????????????????properties??????,???¨¨??¨¦????????:<br>
	 * 1.¨¨¡ã???¡§{@link ClassLoader#getResource(String)}????????¡§{@code clazz}?????¡§????????????,???????¡è¡À¨¨?????????????????<br>
	 * 2.??????class??¡§jar??????,????¡ã?¨¨??¨¨???????¡§jar?????¡§??????../confFolder/propFile,tomcat?????????WEB-INF/confFolder/propFile<br>
	 * 3.???????????????¨¦??envVar???????????????envVar??????????????????¨¨?????propFile<br>
	 * 4.user.dir?????????confFolder/propFile???¨¨??¨¦?????<br>
	 * ???¨¦?????¨¦????????¨¦?????¨¨????????¨¦???????????<br>
	 * @param propFile ¨¨?????¨¨?????properties?????????,???{@code null}????????????????????? {@link IllegalArgumentException}
	 * @param confFolder popFile?????¡§???????¡è?,{@code null}????????¡§¨¦??¨¨?¡è???'conf'
	 * @param envVar ?????????¨¦????? ??¡§?????????propFile??????,??????{@code null}
	 * @param clazz ??¡§???¨¨?¡¤??? {@link ClassLoader}????¡À?,???null????????¡§????¡À????class
	 * @param showProp ???¨¨???????????????¡è??????????
	 * @return ¨¨????????¨¨????????{@link Properties}???¨¨¡À?
	 */
	public static Properties loadAllProperties(String propFile, String confFolder, String envVar, Class<?> clazz, boolean showProp) {
		if(null==propFile||propFile.isEmpty())
			throw new IllegalArgumentException("the argument 'propFile' must not be null or empty");
		if (null == confFolder)
			confFolder = "conf";
		if (null == clazz)
			clazz = ConfigUtils.class;
		final String fileSeparator = System.getProperty("file.separator");
		String prop_path = confFolder.concat(System.getProperty("file.separator")).concat(propFile);
		Properties props = new Properties();
		Set<File> loaded_files = new HashSet<File>();
		try {
			// ??¡§jar????????????¨¦??¨¨?¡è¨¦???????????
			URL url = clazz.getClassLoader().getResource(prop_path.replace(fileSeparator, "/"));
			if(null==url)
				throw new ExceptionInInitializerError(String.format("not found default properties %s", prop_path));
			loadProperties(url, props);
		} catch (Exception e) {
			// ¨¦??¨¨?¡è¨¦????????¨¦?????¨¨??????????????????????????
			throw new ExceptionInInitializerError(String.format("fail to load default properties(???¨¨??¨¦??¨¨?¡è¨¦????????????¡è¡À¨¨??) %s cause by %s", prop_path,
					e.getMessage()));
		}
		try {
			// ???¨¨?? jar????????¡§?????? ../conf/cassdk.properties
			URL class_location = clazz.getProtectionDomain().getCodeSource().getLocation();
			if (class_location.toString().endsWith(".jar")) {
				// jar????????¡§??????????????????,tomcat?????????WEB-INF
				File jar_parent = new File(class_location.getPath()).getParentFile().getParentFile();
				if (null != jar_parent) {
					File conf_file = new File(jar_parent, prop_path);
					if (conf_file.isFile()) {
						loadProperties(conf_file.toURI().toURL(), props);
						loaded_files.add(conf_file);
					}
				}
			}
		} catch (Exception e) {
		}
		try {
			// ¨¦??¨¨???????????¨¦????????properties??????
			if (envVar != null && !envVar.isEmpty()) {
				String cf = System.getProperty(envVar);
				if (null != cf&&!cf.isEmpty()) {
					File env_file = new File(cf, propFile);
					if (!loaded_files.contains(env_file)) {
						loadProperties(env_file.toURI().toURL(), props);
						loaded_files.add(env_file);
					}
				} else
					log("not defined environment variable '%s'", envVar);
			}
		} catch (Exception e) {
		}
		try {
			// ??¡§??????¨¨¡¤?????????????¨¦???????????
			File propInUserDir = new File(System.getProperty("user.dir"), prop_path);
			if (propInUserDir.isFile() && !loaded_files.contains(propInUserDir)) {
				loadProperties(propInUserDir.toURI().toURL(), props);
				loaded_files.add(propInUserDir);
			}
		} catch (Exception e) {
		}

		// ¨¨????????????????¡ã???
		if(showProp)
			props.list(System.out);
		return props;
	}

	/**
	 * configure with the parameters given in the given url
	 * 
	 * @param url
	 *            the resource filename to be used
	 * @param props
	 *            dest properties to add
	 * @throws IOException
	 */
	private static void loadProperties(URL url, Properties props) throws IOException {
		if (null != url) {
			InputStream is = null;
			try {
				props.load(is = url.openStream());
				log("Load properties from %s", url.toString());
			} finally {
				if (is != null)
					is.close();
			}			
		}
	}
	private static void log(String format, Object ... args){
		System.out.printf("[%s:%d]%s\n", 
				ConfigUtils.class.getSimpleName(),
				Thread.currentThread() .getStackTrace()[2].getLineNumber(),
				String.format(format, args));
	}
}
