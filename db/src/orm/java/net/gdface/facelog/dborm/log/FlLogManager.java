// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.log;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.device.FlDeviceBean;
import net.gdface.facelog.dborm.device.FlDeviceManager;
import net.gdface.facelog.dborm.face.FlFaceBean;
import net.gdface.facelog.dborm.face.FlFaceManager;
import net.gdface.facelog.dborm.person.FlPersonBean;
import net.gdface.facelog.dborm.person.FlPersonManager;

/**
 * Handles database calls (save, load, count, etc...) for the fl_log table.
 * @author sql2java
 */
public class FlLogManager extends TableManager.Adapter<FlLogBean>
{
    /**
     * Tablename.
     */
    public static final String TABLE_NAME="fl_log";

   /**
     * Contains all the primarykey fields of the fl_log table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    public String getFieldNames() {
        return FL_LOG_ALL_FIELDS;
    }
    
    public String[] getFullFieldNames() {
        return FL_LOG_FULL_FIELD_NAMES;
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }

    private static FlLogManager singleton = new FlLogManager();

    /**
     * Get the FlLogManager singleton.
     *
     * @return FlLogManager
     */
    public static FlLogManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlLogBean instance.
     *
     * @return the new FlLogBean
     */
    public FlLogBean createBean()
    {
        return new FlLogBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link FlLogBean} from the fl_log using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlLogBean or {@code null} if not found or have null argument
     * @throws DAOException
     */
    //1
    @SuppressWarnings("unused")
    public FlLogBean loadByPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return null;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + FL_LOG_ALL_FIELDS + " FROM fl_log WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            List<FlLogBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (0 == pReturn.size()) {
                return null;
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //1.2
    @Override
    public FlLogBean loadByPrimaryKey(FlLogBean bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey( bean.getId());
    }
    
    /**
     * Loads a {@link FlLogBean} from the fl_log using primary key fields.
     * when you don't know which is primary key of table,you can use the method.
     * @param keys primary keys value:<br> 
     *             PK# 1:Integer     
     * @return a unique {@link FlLogBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    //1.3
    public FlLogBean loadByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        return loadByPrimaryKey((Integer)keys[0]);
    }
    
    /**
     * Returns true if this fl_log contains row with primary key fields.
     * @param id Integer - PK# 1
     * @throws DAOException
     * @see #loadByPrimaryKey(Integer id)
     */
    //1.3
    public boolean existsPrimaryKey(Integer id) throws DAOException
    {
        return null!=loadByPrimaryKey(id );
    }
    
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     * 
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #delete(FlLogBean)}
     */
    //2
    public int deleteByPrimaryKey(Integer id) throws DAOException
    {
        FlLogBean bean=createBean();
        bean.setId(id);
        return this.delete(bean);
    }

    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
     * @throws DAOException
     */
    //2
    @Override
    public int delete(FlLogBean bean) throws DAOException
    {
        if(null == bean) return 0;
        if(null == bean.getId()){
            throw new IllegalArgumentException("primary keys must no be null ");
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            this.listenerContainer.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_log WHERE id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getId()); }
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.listenerContainer.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     *             PK# 1:Integer     
     * @return the number of deleted rows
     * @see {@link #delete(FlLogBean)}
     */   
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        FlLogBean bean=createBean();   
        if(null!= keys[0] && !(keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        bean.setId((Integer)keys[0]);
        return delete(bean);
    }
    
 
 

    /**
     * Save the FlLogBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlLogBean} bean to be saved
     * @param refFlDevicebyDeviceId the {@link FlDeviceBean} bean referenced by {@link FlLogBean} 
     * @param refFlFacebyVerifyFace the {@link FlFaceBean} bean referenced by {@link FlLogBean} 
     * @param refFlFacebyCompareFace the {@link FlFaceBean} bean referenced by {@link FlLogBean} 
     * @param refFlPersonbyPersonId the {@link FlPersonBean} bean referenced by {@link FlLogBean} 
         * @return the inserted or updated {@link FlLogBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public FlLogBean save(FlLogBean bean
        , FlDeviceBean refFlDevicebyDeviceId , FlFaceBean refFlFacebyVerifyFace , FlFaceBean refFlFacebyCompareFace , FlPersonBean refFlPersonbyPersonId 
        ) throws DAOException
    {
        if(null == bean) return null;
        if( null != refFlDevicebyDeviceId) {
            refFlDevicebyDeviceId = FlDeviceManager.getInstance().save( refFlDevicebyDeviceId );
            bean.setDeviceId(refFlDevicebyDeviceId.getId()); 
            bean.setReferencedByDeviceId(refFlDevicebyDeviceId);
        }
        if( null != refFlFacebyVerifyFace) {
            refFlFacebyVerifyFace = FlFaceManager.getInstance().save( refFlFacebyVerifyFace );
            bean.setVerifyFace(refFlFacebyVerifyFace.getMd5()); 
            bean.setReferencedByVerifyFace(refFlFacebyVerifyFace);
        }
        if( null != refFlFacebyCompareFace) {
            refFlFacebyCompareFace = FlFaceManager.getInstance().save( refFlFacebyCompareFace );
            bean.setCompareFace(refFlFacebyCompareFace.getMd5()); 
            bean.setReferencedByCompareFace(refFlFacebyCompareFace);
        }
        if( null != refFlPersonbyPersonId) {
            refFlPersonbyPersonId = FlPersonManager.getInstance().save( refFlPersonbyPersonId );
            bean.setPersonId(refFlPersonbyPersonId.getId()); 
            bean.setReferencedByPersonId(refFlPersonbyPersonId);
        }
        bean = this.save( bean );
        return bean;
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(FlLogBean , FlDeviceBean , FlFaceBean , FlFaceBean , FlPersonBean )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public FlLogBean saveAsTransaction(final FlLogBean bean
        ,final FlDeviceBean refFlDevicebyDeviceId ,final FlFaceBean refFlFacebyVerifyFace ,final FlFaceBean refFlFacebyCompareFace ,final FlPersonBean refFlPersonbyPersonId 
        ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlLogBean>(){
            @Override
            public FlLogBean call() throws Exception {
                return save(bean , refFlDevicebyDeviceId , refFlFacebyVerifyFace , refFlFacebyCompareFace , refFlPersonbyPersonId );
            }});
    }
      //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_LOG_FK_DEVICE_ID} -> {@link FlDeviceBean}</li>
     *     <li> {@link TableManager#FL_LOG_FK_VERIFY_FACE} -> {@link FlFaceBean}</li>
     *     <li> {@link TableManager#FL_LOG_FK_COMPARE_FACE} -> {@link FlFaceBean}</li>
     *     <li> {@link TableManager#FL_LOG_FK_PERSON_ID} -> {@link FlPersonBean}</li>
     * </ul>
     * @param bean the {@link FlLogBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link TableManager#FL_LOG_FK_DEVICE_ID},{@link TableManager#FL_LOG_FK_VERIFY_FACE},{@link TableManager#FL_LOG_FK_COMPARE_FACE},{@link TableManager#FL_LOG_FK_PERSON_ID}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T getReferencedBean(FlLogBean bean,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_LOG_FK_DEVICE_ID:
            return  (T)this.getReferencedByDeviceId(bean);
        case FL_LOG_FK_VERIFY_FACE:
            return  (T)this.getReferencedByVerifyFace(bean);
        case FL_LOG_FK_COMPARE_FACE:
            return  (T)this.getReferencedByCompareFace(bean);
        case FL_LOG_FK_PERSON_ID:
            return  (T)this.getReferencedByPersonId(bean);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    
    /**
     * Associates the {@link FlLogBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean(FlLogBean,int)}
     * @param bean the {@link FlLogBean} object to use
     * @param beanToSet the <T> object to associate to the {@link FlLogBean}
     * @param fkIndex valid values: see also {@link #getReferencedBean(FlLogBean,int)}
     * @return always beanToSet saved
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T setReferencedBean(FlLogBean bean,T beanToSet,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_LOG_FK_DEVICE_ID:
            return  (T)this.setReferencedByDeviceId(bean, (FlDeviceBean)beanToSet);
        case FL_LOG_FK_VERIFY_FACE:
            return  (T)this.setReferencedByVerifyFace(bean, (FlFaceBean)beanToSet);
        case FL_LOG_FK_COMPARE_FACE:
            return  (T)this.setReferencedByCompareFace(bean, (FlFaceBean)beanToSet);
        case FL_LOG_FK_PERSON_ID:
            return  (T)this.setReferencedByPersonId(bean, (FlPersonBean)beanToSet);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the {@link FlDeviceBean} object referenced by {@link FlLogBean#getDeviceId}() field.<br>
     * FK_NAME : fl_log_ibfk_2
     * @param bean the {@link FlLogBean}
     * @return the associated {@link FlDeviceBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public FlDeviceBean getReferencedByDeviceId(FlLogBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlDeviceBean other = FlDeviceManager.getInstance().createBean();
        other.setId(bean.getDeviceId()); 
        bean.setReferencedByDeviceId(FlDeviceManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getReferencedByDeviceId();
    }

    /**
     * Associates the {@link FlLogBean} object to the {@link FlDeviceBean} object by {@link FlLogBean#getDeviceId}() field.
     *
     * @param bean the {@link FlLogBean} object to use
     * @param beanToSet the {@link FlDeviceBean} object to associate to the {@link FlLogBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlDeviceBean setReferencedByDeviceId(FlLogBean bean, FlDeviceBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlDeviceManager.getInstance().save(beanToSet);
            bean.setReferencedByDeviceId(beanToSet);
            if( null == beanToSet){
                bean.setDeviceId(null);
            }else{
                bean.setDeviceId(beanToSet.getId());
            }
        }
        return beanToSet;
    }

    /**
     * Retrieves the {@link FlFaceBean} object referenced by {@link FlLogBean#getVerifyFace}() field.<br>
     * FK_NAME : fl_log_ibfk_3
     * @param bean the {@link FlLogBean}
     * @return the associated {@link FlFaceBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public FlFaceBean getReferencedByVerifyFace(FlLogBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlFaceBean other = FlFaceManager.getInstance().createBean();
        other.setMd5(bean.getVerifyFace()); 
        bean.setReferencedByVerifyFace(FlFaceManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getReferencedByVerifyFace();
    }

    /**
     * Associates the {@link FlLogBean} object to the {@link FlFaceBean} object by {@link FlLogBean#getVerifyFace}() field.
     *
     * @param bean the {@link FlLogBean} object to use
     * @param beanToSet the {@link FlFaceBean} object to associate to the {@link FlLogBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlFaceBean setReferencedByVerifyFace(FlLogBean bean, FlFaceBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlFaceManager.getInstance().save(beanToSet);
            bean.setReferencedByVerifyFace(beanToSet);
            if( null == beanToSet){
                bean.setVerifyFace(null);
            }else{
                bean.setVerifyFace(beanToSet.getMd5());
            }
        }
        return beanToSet;
    }

    /**
     * Retrieves the {@link FlFaceBean} object referenced by {@link FlLogBean#getCompareFace}() field.<br>
     * FK_NAME : fl_log_ibfk_4
     * @param bean the {@link FlLogBean}
     * @return the associated {@link FlFaceBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public FlFaceBean getReferencedByCompareFace(FlLogBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlFaceBean other = FlFaceManager.getInstance().createBean();
        other.setMd5(bean.getCompareFace()); 
        bean.setReferencedByCompareFace(FlFaceManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getReferencedByCompareFace();
    }

    /**
     * Associates the {@link FlLogBean} object to the {@link FlFaceBean} object by {@link FlLogBean#getCompareFace}() field.
     *
     * @param bean the {@link FlLogBean} object to use
     * @param beanToSet the {@link FlFaceBean} object to associate to the {@link FlLogBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlFaceBean setReferencedByCompareFace(FlLogBean bean, FlFaceBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlFaceManager.getInstance().save(beanToSet);
            bean.setReferencedByCompareFace(beanToSet);
            if( null == beanToSet){
                bean.setCompareFace(null);
            }else{
                bean.setCompareFace(beanToSet.getMd5());
            }
        }
        return beanToSet;
    }

    /**
     * Retrieves the {@link FlPersonBean} object referenced by {@link FlLogBean#getPersonId}() field.<br>
     * FK_NAME : fl_log_ibfk_1
     * @param bean the {@link FlLogBean}
     * @return the associated {@link FlPersonBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public FlPersonBean getReferencedByPersonId(FlLogBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlPersonBean other = FlPersonManager.getInstance().createBean();
        other.setId(bean.getPersonId()); 
        bean.setReferencedByPersonId(FlPersonManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getReferencedByPersonId();
    }

    /**
     * Associates the {@link FlLogBean} object to the {@link FlPersonBean} object by {@link FlLogBean#getPersonId}() field.
     *
     * @param bean the {@link FlLogBean} object to use
     * @param beanToSet the {@link FlPersonBean} object to associate to the {@link FlLogBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlPersonBean setReferencedByPersonId(FlLogBean bean, FlPersonBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlPersonManager.getInstance().save(beanToSet);
            bean.setReferencedByPersonId(beanToSet);
            if( null == beanToSet){
                bean.setPersonId(null);
            }else{
                bean.setPersonId(beanToSet.getId());
            }
        }
        return beanToSet;
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Deletes rows from the fl_log table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clauses.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    @Override
    public int deleteByWhere(String where) throws DAOException
    {
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action = new DeleteBeanAction(); 
            this.loadByWhere(where,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_log " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    public FlLogBean insert(FlLogBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.listenerContainer.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_log (");

            if (bean.isIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("id");
                _dirtyCount++;
            }

            if (bean.isPersonIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("person_id");
                _dirtyCount++;
            }

            if (bean.isDeviceIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("device_id");
                _dirtyCount++;
            }

            if (bean.isVerifyFaceModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("verify_face");
                _dirtyCount++;
            }

            if (bean.isCompareFaceModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("compare_face");
                _dirtyCount++;
            }

            if (bean.isSimilartyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("similarty");
                _dirtyCount++;
            }

            if (bean.isVerifyTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("verify_time");
                _dirtyCount++;
            }

            if (bean.isCreateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("create_time");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.isIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.listenerContainer.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //14
    @Override
    public FlLogBean update(FlLogBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.listenerContainer.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_log SET ");
            boolean useComma=false;

            if (bean.isIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("id=?");
            }

            if (bean.isPersonIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("person_id=?");
            }

            if (bean.isDeviceIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("device_id=?");
            }

            if (bean.isVerifyFaceModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("verify_face=?");
            }

            if (bean.isCompareFaceModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("compare_face=?");
            }

            if (bean.isSimilartyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("similarty=?");
            }

            if (bean.isVerifyTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("verify_time=?");
            }

            if (bean.isCreateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("create_time=?");
            }
            sql.append(" WHERE ");
            sql.append("id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.listenerContainer.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public FlLogBean loadUniqueUsingTemplate(FlLogBean bean) throws DAOException
    {
         FlLogBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    //20-5
    @Override
    public int loadUsingTemplate(FlLogBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<FlLogBean> action) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSelectSql(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(FlLogBean bean) throws DAOException
    {
        if(bean.isIdInitialized() && null != bean.getId()){
            return this.deleteByPrimaryKey(bean.getId());
        }
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action=new DeleteBeanAction(); 
            this.loadUsingTemplate(bean,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_log ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an array of FlLogBean using the compare_face index.
     *
     * @param compareFace the compare_face column's value filter.
     * @return an array of FlLogBean
     * @throws DAOException
     */
    public FlLogBean[] loadByindexCompareFace(String compareFace) throws DAOException
    {
        return (FlLogBean[])this.loadByindexCompareFaceAsList(compareFace).toArray(new FlLogBean[0]);
    }
    
    /**
     * Retrieves a list of FlLogBean using the compare_face index.
     *
     * @param compareFace the compare_face column's value filter.
     * @return a list of FlLogBean
     * @throws DAOException
     */
    public List<FlLogBean> loadByindexCompareFaceAsList(String compareFace) throws DAOException
    {
        FlLogBean bean = this.createBean();
        bean.setCompareFace(compareFace);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the compare_face index.
     *
     * @param compareFace the compare_face column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByindexCompareFace(String compareFace) throws DAOException
    {
        FlLogBean bean = this.createBean();
        bean.setCompareFace(compareFace);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of FlLogBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return an array of FlLogBean
     * @throws DAOException
     */
    public FlLogBean[] loadByindexDeviceId(Integer deviceId) throws DAOException
    {
        return (FlLogBean[])this.loadByindexDeviceIdAsList(deviceId).toArray(new FlLogBean[0]);
    }
    
    /**
     * Retrieves a list of FlLogBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return a list of FlLogBean
     * @throws DAOException
     */
    public List<FlLogBean> loadByindexDeviceIdAsList(Integer deviceId) throws DAOException
    {
        FlLogBean bean = this.createBean();
        bean.setDeviceId(deviceId);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByindexDeviceId(Integer deviceId) throws DAOException
    {
        FlLogBean bean = this.createBean();
        bean.setDeviceId(deviceId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of FlLogBean using the person_id index.
     *
     * @param personId the person_id column's value filter.
     * @return an array of FlLogBean
     * @throws DAOException
     */
    public FlLogBean[] loadByindexPersonId(Integer personId) throws DAOException
    {
        return (FlLogBean[])this.loadByindexPersonIdAsList(personId).toArray(new FlLogBean[0]);
    }
    
    /**
     * Retrieves a list of FlLogBean using the person_id index.
     *
     * @param personId the person_id column's value filter.
     * @return a list of FlLogBean
     * @throws DAOException
     */
    public List<FlLogBean> loadByindexPersonIdAsList(Integer personId) throws DAOException
    {
        FlLogBean bean = this.createBean();
        bean.setPersonId(personId);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the person_id index.
     *
     * @param personId the person_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByindexPersonId(Integer personId) throws DAOException
    {
        FlLogBean bean = this.createBean();
        bean.setPersonId(personId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of FlLogBean using the verify_face index.
     *
     * @param verifyFace the verify_face column's value filter.
     * @return an array of FlLogBean
     * @throws DAOException
     */
    public FlLogBean[] loadByindexVerifyFace(String verifyFace) throws DAOException
    {
        return (FlLogBean[])this.loadByindexVerifyFaceAsList(verifyFace).toArray(new FlLogBean[0]);
    }
    
    /**
     * Retrieves a list of FlLogBean using the verify_face index.
     *
     * @param verifyFace the verify_face column's value filter.
     * @return a list of FlLogBean
     * @throws DAOException
     */
    public List<FlLogBean> loadByindexVerifyFaceAsList(String verifyFace) throws DAOException
    {
        FlLogBean bean = this.createBean();
        bean.setVerifyFace(verifyFace);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the verify_face index.
     *
     * @param verifyFace the verify_face column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByindexVerifyFace(String verifyFace) throws DAOException
    {
        FlLogBean bean = this.createBean();
        bean.setVerifyFace(verifyFace);
        return deleteUsingTemplate(bean);
    }
    
    
    /**
     * Retrieves a list of FlLogBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link TableManager#FL_LOG_INDEX_COMPARE_FACE},{@link TableManager#FL_LOG_INDEX_DEVICE_ID},{@link TableManager#FL_LOG_INDEX_PERSON_ID},{@link TableManager#FL_LOG_INDEX_VERIFY_FACE}
     * @param keys key values of index
     * @return a list of FlLogBean
     * @throws DAOException
     */
    public List<FlLogBean> loadByIndexAsList(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
        case FL_LOG_INDEX_COMPARE_FACE:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'compare_face' column number");
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.loadByindexCompareFaceAsList((String)keys[0]);        
        }
        case FL_LOG_INDEX_DEVICE_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'device_id' column number");
            if(null != keys[1] && !(keys[1] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            return this.loadByindexDeviceIdAsList((Integer)keys[0]);        
        }
        case FL_LOG_INDEX_PERSON_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'person_id' column number");
            if(null != keys[2] && !(keys[2] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            return this.loadByindexPersonIdAsList((Integer)keys[0]);        
        }
        case FL_LOG_INDEX_VERIFY_FACE:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'verify_face' column number");
            if(null != keys[3] && !(keys[3] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.loadByindexVerifyFaceAsList((String)keys[0]);        
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link TableManager#FL_LOG_INDEX_COMPARE_FACE},{@link TableManager#FL_LOG_INDEX_DEVICE_ID},{@link TableManager#FL_LOG_INDEX_PERSON_ID},{@link TableManager#FL_LOG_INDEX_VERIFY_FACE}
     * @param keys key values of index
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
        case FL_LOG_INDEX_COMPARE_FACE:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'compare_face' column number");
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByindexCompareFace((String)keys[0]);
        }
        case FL_LOG_INDEX_DEVICE_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'device_id' column number");
            if(null != keys[1] && !(keys[1] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            return this.deleteByindexDeviceId((Integer)keys[0]);
        }
        case FL_LOG_INDEX_PERSON_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'person_id' column number");
            if(null != keys[2] && !(keys[2] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            return this.deleteByindexPersonId((Integer)keys[0]);
        }
        case FL_LOG_INDEX_VERIFY_FACE:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'verify_face' column number");
            if(null != keys[3] && !(keys[3] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByindexVerifyFace((String)keys[0]);
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }        
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    //25
    @Override
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_log " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_log with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlLogBean bean given the search type
     *
     * @param bean the FlLogBean template to look for
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlLogBean bean, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_log");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clauses constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlLogBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isIdModified()) {
                _dirtyCount ++;
                if (bean.getId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id = ?");
                }
            }
            if (bean.isPersonIdModified()) {
                _dirtyCount ++;
                if (bean.getPersonId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("person_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("person_id = ?");
                }
            }
            if (bean.isDeviceIdModified()) {
                _dirtyCount ++;
                if (bean.getDeviceId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("device_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("device_id = ?");
                }
            }
            if (bean.isVerifyFaceModified()) {
                _dirtyCount ++;
                if (bean.getVerifyFace() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("verify_face IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("verify_face ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isCompareFaceModified()) {
                _dirtyCount ++;
                if (bean.getCompareFace() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("compare_face IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("compare_face ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isSimilartyModified()) {
                _dirtyCount ++;
                if (bean.getSimilarty() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("similarty IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("similarty = ?");
                }
            }
            if (bean.isVerifyTimeModified()) {
                _dirtyCount ++;
                if (bean.getVerifyTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("verify_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("verify_time = ?");
                }
            }
            if (bean.isCreateTimeModified()) {
                _dirtyCount ++;
                if (bean.getCreateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlLogBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getId() + "]");
                if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            }
            if (bean.isPersonIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPersonId() + "]");
                if (bean.getPersonId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getPersonId()); }
            }
            if (bean.isDeviceIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getDeviceId() + "]");
                if (bean.getDeviceId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getDeviceId()); }
            }
            if (bean.isVerifyFaceModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getVerifyFace() + "]");
                        if (bean.getVerifyFace() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getVerifyFace()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getVerifyFace() + "%]");
                        if ( bean.getVerifyFace()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getVerifyFace() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getVerifyFace() + "]");
                        if ( bean.getVerifyFace() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getVerifyFace()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getVerifyFace() + "%]");
                        if (bean.getVerifyFace()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getVerifyFace() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isCompareFaceModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCompareFace() + "]");
                        if (bean.getCompareFace() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCompareFace()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCompareFace() + "%]");
                        if ( bean.getCompareFace()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getCompareFace() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getCompareFace() + "]");
                        if ( bean.getCompareFace() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getCompareFace()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCompareFace() + "%]");
                        if (bean.getCompareFace()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getCompareFace() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isSimilartyModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getSimilarty() + "]");
                if (bean.getSimilarty() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getSimilarty()); }
            }
            if (bean.isVerifyTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getVerifyTime() + "]");
                if (bean.getVerifyTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getVerifyTime().getTime())); }
            }
            if (bean.isCreateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCreateTime() + "]");
                if (bean.getCreateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getCreateTime().getTime())); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlLogBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlLogBean table
     * @throws DAOException
     */
    //28
    public FlLogBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlLogBean[0]);
    }

    /**
     * decode a resultset in a list of FlLogBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlLogBean table
     * @throws DAOException
     */
    //28-1
    public List<FlLogBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action<FlLogBean> action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_log on a FlLogBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlLogBean bean
     * @throws DAOException
     */
    //29
    public FlLogBean decodeRow(ResultSet rs,FlLogBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, 1));
            bean.setPersonId(Manager.getInteger(rs, 2));
            bean.setDeviceId(Manager.getInteger(rs, 3));
            bean.setVerifyFace(rs.getString(4));
            bean.setCompareFace(rs.getString(5));
            bean.setSimilarty(Manager.getDouble(rs, 6));
            bean.setVerifyTime(rs.getTimestamp(7));
            bean.setCreateTime(rs.getTimestamp(8));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_log table on a FlLogBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlLogBean bean
     * @throws DAOException
     */
    //30
    public FlLogBean decodeRow(ResultSet rs, int[] fieldList,FlLogBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case FL_LOG_ID_ID:
                        ++pos;
                        bean.setId(Manager.getInteger(rs, pos));
                        break;
                    case FL_LOG_ID_PERSON_ID:
                        ++pos;
                        bean.setPersonId(Manager.getInteger(rs, pos));
                        break;
                    case FL_LOG_ID_DEVICE_ID:
                        ++pos;
                        bean.setDeviceId(Manager.getInteger(rs, pos));
                        break;
                    case FL_LOG_ID_VERIFY_FACE:
                        ++pos;
                        bean.setVerifyFace(rs.getString(pos));
                        break;
                    case FL_LOG_ID_COMPARE_FACE:
                        ++pos;
                        bean.setCompareFace(rs.getString(pos));
                        break;
                    case FL_LOG_ID_SIMILARTY:
                        ++pos;
                        bean.setSimilarty(Manager.getDouble(rs, pos));
                        break;
                    case FL_LOG_ID_VERIFY_TIME:
                        ++pos;
                        bean.setVerifyTime(rs.getTimestamp(pos));
                        break;
                    case FL_LOG_ID_CREATE_TIME:
                        ++pos;
                        bean.setCreateTime(rs.getTimestamp(pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_log on a FlLogBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlLogBean bean
     * @throws DAOException
     */
    //31
    public FlLogBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlLogBean bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, "id"));
            bean.setPersonId(Manager.getInteger(rs, "person_id"));
            bean.setDeviceId(Manager.getInteger(rs, "device_id"));
            bean.setVerifyFace(rs.getString("verify_face"));
            bean.setCompareFace(rs.getString("compare_face"));
            bean.setSimilarty(Manager.getDouble(rs, "similarty"));
            bean.setVerifyTime(rs.getTimestamp("verify_time"));
            bean.setCreateTime(rs.getTimestamp("create_time"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlLogBean
     * @throws DAOException
     */
    //32
    public FlLogBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlLogBean
     * @throws DAOException
     */
    //32
    public List<FlLogBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlLogBean
     * @throws DAOException
     */
    //33
    public FlLogBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlLogBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlLogBean
     * @throws DAOException
     */
    //33
    public List<FlLogBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlLogBean
     * @throws DAOException
     */
    //34
    public FlLogBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlLogBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlLogBean
     * @throws DAOException
     */
    //34-1
    public List<FlLogBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action<FlLogBean> action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    class ListenerContainer implements TableListener<FlLogBean> {
        private final Set<TableListener<FlLogBean>> listeners = new TreeSet<TableListener<FlLogBean>>();
        public ListenerContainer() {
        }
    
        @Override
        public void beforeInsert(FlLogBean bean) throws DAOException {
            for(TableListener<FlLogBean> listener:listeners){
                listener.beforeInsert(bean);
            }
        }
    
        @Override
        public void afterInsert(FlLogBean bean) throws DAOException {
            for(TableListener<FlLogBean> listener:listeners){
                listener.afterInsert(bean);
            }
        }
    
        @Override
        public void beforeUpdate(FlLogBean bean) throws DAOException {
            for(TableListener<FlLogBean> listener:listeners){
                listener.beforeUpdate(bean);
            }
        }
    
        @Override
        public void afterUpdate(FlLogBean bean) throws DAOException {
            for(TableListener<FlLogBean> listener:listeners){
                listener.afterUpdate(bean);
            }
        }
    
        @Override
        public void beforeDelete(FlLogBean bean) throws DAOException {
            for(TableListener<FlLogBean> listener:listeners){
                listener.beforeDelete(bean);
            }
        }
    
        @Override
        public void afterDelete(FlLogBean bean) throws DAOException {
            for(TableListener<FlLogBean> listener:listeners){
                listener.afterDelete(bean);
            }
        }
    
        public boolean isEmpty() {
            return listeners.isEmpty();
        }
    
        public boolean contains(TableListener<FlLogBean> o) {
            return listeners.contains(o);
        }
    
        public synchronized boolean add(TableListener<FlLogBean> e) {
            if(null == e)
                throw new NullPointerException();
            return listeners.add(e);
        }
    
        public synchronized boolean remove(TableListener<FlLogBean> o) {
            return null == o? false : listeners.remove(o);
        }
    
        public synchronized void clear() {
            listeners.clear();
        }    
    }
    private final ListenerContainer listenerContainer = new ListenerContainer();

    //35
    @Override
    public void registerListener(TableListener<FlLogBean> listener)
    {
        this.listenerContainer.add(listener);
    }

    /**
     * remove listener.
     */
    //36
    @Override
    public void unregisterListener(TableListener<FlLogBean> listener)
    {
        this.listenerContainer.remove(listener);
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    //43
    @Override
    public boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    @Override    
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<FlLogBean> action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
   
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    @Override
    public void runAsTransaction(final Runnable fun) throws DAOException{
        Manager.getInstance().runAsTransaction(fun);
    }
    
    class DeleteBeanAction extends Action.Adapter<FlLogBean>{
        private final AtomicInteger count=new AtomicInteger(0);
        @Override
        public void call(FlLogBean bean) throws DAOException {
                FlLogManager.this.delete(bean);
                count.incrementAndGet();
        }
        int getCount(){
            return count.get();
        }
    }
}
