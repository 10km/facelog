// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package net.gdface.facelog.dborm.device;

import net.gdface.facelog.dborm.FullBean;

/**
 * FlDeviceBean is a mapping of fl_device Table.
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: 前端设备基本信息 </li>
 * </ul>
 * @author sql2java
*/
public class FlDeviceBean
    extends FlDeviceBeanBase
    implements FullBean<FlDeviceBeanBase>
{
	private static final long serialVersionUID = 4350702608712315194L;
	
    private boolean updateTimeIsModified = false;
    private boolean updateTimeIsInitialized = false;

    private boolean createTimeIsModified = false;
    private boolean createTimeIsInitialized = false;

    private boolean versionIsModified = false;
    private boolean versionIsInitialized = false;

    private boolean groupIdIsModified = false;
    private boolean groupIdIsInitialized = false;

    private boolean onlineIsModified = false;
    private boolean onlineIsInitialized = false;

    private boolean nameIsModified = false;
    private boolean nameIsInitialized = false;

    private boolean idIsModified = false;
    private boolean idIsInitialized = false;



    /**
     * Prefered methods to create a FlDeviceBean is via the createFlDeviceBean method in FlDeviceManager or
     * via the factory class FlDeviceFactory create method
     * 为了能在webservice中传递对象，此处从protected改为public
     */
    public FlDeviceBean(){
        super();
    }
    /**
     * create a FlDeviceBean from a instance
     */
    FlDeviceBean(FlDeviceBeanBase bean){
        super();
        copy(bean);
    }
    /**
     * Getter method for updateTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_device.update_time</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of updateTime
     */
    public java.util.Date getUpdateTime(){
        return updateTime;
    }
    /**
     * Setter method for updateTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to updateTime
     */
    public void setUpdateTime(java.util.Date newVal)
    {
        if ((newVal != null && updateTime != null && (newVal.compareTo(updateTime) == 0)) ||
            (newVal == null && updateTime == null && updateTimeIsInitialized)) {
            return;
        }
        super.setUpdateTime(newVal);
        updateTimeIsModified = true;
        updateTimeIsInitialized = true;
    }

    /**
     * Setter method for updateTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to updateTime
     */
    public void setUpdateTime(long newVal)
    {
        setUpdateTime(new java.util.Date(newVal));
    }

    /**
     * Determines if the updateTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUpdateTimeModified()
    {
        return updateTimeIsModified;
    }

    /**
     * Determines if the updateTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUpdateTimeInitialized()
    {
        return updateTimeIsInitialized;
    }

    /**
     * Getter method for createTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_device.create_time</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of createTime
     */
    public java.util.Date getCreateTime(){
        return createTime;
    }
    /**
     * Setter method for createTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(java.util.Date newVal)
    {
        if ((newVal != null && createTime != null && (newVal.compareTo(createTime) == 0)) ||
            (newVal == null && createTime == null && createTimeIsInitialized)) {
            return;
        }
        super.setCreateTime(newVal);
        createTimeIsModified = true;
        createTimeIsInitialized = true;
    }

    /**
     * Setter method for createTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(long newVal)
    {
        setCreateTime(new java.util.Date(newVal));
    }

    /**
     * Determines if the createTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreateTimeModified()
    {
        return createTimeIsModified;
    }

    /**
     * Determines if the createTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreateTimeInitialized()
    {
        return createTimeIsInitialized;
    }

    /**
     * Getter method for version.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_device.version</li>
     * <li>comments: 设备版本号</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of version
     */
    public String getVersion(){
        return version;
    }
    /**
     * Setter method for version.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to version
     */
    public void setVersion(String newVal)
    {
        if ((newVal != null && version != null && (newVal.compareTo(version) == 0)) ||
            (newVal == null && version == null && versionIsInitialized)) {
            return;
        }
        super.setVersion(newVal);
        versionIsModified = true;
        versionIsInitialized = true;
    }

    /**
     * Determines if the version has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVersionModified()
    {
        return versionIsModified;
    }

    /**
     * Determines if the version has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVersionInitialized()
    {
        return versionIsInitialized;
    }

    /**
     * Getter method for groupId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_device.group_id</li>
     * <li>comments: 设备所属组id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of groupId
     */
    public Integer getGroupId(){
        return groupId;
    }
    /**
     * Setter method for groupId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to groupId
     */
    public void setGroupId(Integer newVal)
    {
        if ((newVal != null && groupId != null && (newVal.compareTo(groupId) == 0)) ||
            (newVal == null && groupId == null && groupIdIsInitialized)) {
            return;
        }
        super.setGroupId(newVal);
        groupIdIsModified = true;
        groupIdIsInitialized = true;
    }

    /**
     * Setter method for groupId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to groupId
     */
    public void setGroupId(int newVal)
    {
        setGroupId(new Integer(newVal));
    }

    /**
     * Determines if the groupId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGroupIdModified()
    {
        return groupIdIsModified;
    }

    /**
     * Determines if the groupId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGroupIdInitialized()
    {
        return groupIdIsInitialized;
    }

    /**
     * Getter method for online.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_device.online</li>
     * <li>comments: 设备是否在线标记</li>
     * <li>column size: 1</li>
     * <li>jdbc type returned by the driver: Types.BIT</li>
     * </ul>
     *
     * @return the value of online
     */
    public Boolean getOnline(){
        return online;
    }
    /**
     * Setter method for online.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to online
     */
    public void setOnline(Boolean newVal)
    {
        if ((newVal != null && online != null && (newVal.compareTo(online) == 0)) ||
            (newVal == null && online == null && onlineIsInitialized)) {
            return;
        }
        super.setOnline(newVal);
        onlineIsModified = true;
        onlineIsInitialized = true;
    }

    /**
     * Setter method for online.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to online
     */
    public void setOnline(boolean newVal)
    {
        setOnline(new Boolean(newVal));
    }

    /**
     * Determines if the online has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOnlineModified()
    {
        return onlineIsModified;
    }

    /**
     * Determines if the online has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOnlineInitialized()
    {
        return onlineIsInitialized;
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_device.name</li>
     * <li>comments: 设备名称</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of name
     */
    public String getName(){
        return name;
    }
    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal)
    {
        if ((newVal != null && name != null && (newVal.compareTo(name) == 0)) ||
            (newVal == null && name == null && nameIsInitialized)) {
            return;
        }
        super.setName(newVal);
        nameIsModified = true;
        nameIsInitialized = true;
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified()
    {
        return nameIsModified;
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized()
    {
        return nameIsInitialized;
    }

    /**
     * Getter method for id.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_device.id</li>
     * <li> imported key: fl_image.device_id</li>
     * <li> imported key: fl_log.device_id</li>
     * <li>comments: 设备id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of id
     */
    public Integer getId(){
        return id;
    }
    /**
     * Setter method for id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(Integer newVal)
    {
        if ((newVal != null && id != null && (newVal.compareTo(id) == 0)) ||
            (newVal == null && id == null && idIsInitialized)) {
            return;
        }
        super.setId(newVal);
        idIsModified = true;
        idIsInitialized = true;
    }

    /**
     * Setter method for id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(int newVal)
    {
        setId(new Integer(newVal));
    }

    /**
     * Determines if the id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdModified()
    {
        return idIsModified;
    }

    /**
     * Determines if the id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdInitialized()
    {
        return idIsInitialized;
    }



    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return updateTimeIsModified 		|| createTimeIsModified  		|| versionIsModified  		|| groupIdIsModified  		|| onlineIsModified  		|| nameIsModified  		|| idIsModified  ;
    }
    
    /**
     * Determines if the {@code column} has been modified.
     * @param column
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(String column){
        if (null == column || "".equals(column)) {
            return false;
        } else if ("update_time".equalsIgnoreCase(column) || "updateTime".equalsIgnoreCase(column)) {
            return isUpdateTimeModified();
        } else if ("create_time".equalsIgnoreCase(column) || "createTime".equalsIgnoreCase(column)) {
            return isCreateTimeModified();
        } else if ("version".equalsIgnoreCase(column) || "version".equalsIgnoreCase(column)) {
            return isVersionModified();
        } else if ("group_id".equalsIgnoreCase(column) || "groupId".equalsIgnoreCase(column)) {
            return isGroupIdModified();
        } else if ("online".equalsIgnoreCase(column) || "online".equalsIgnoreCase(column)) {
            return isOnlineModified();
        } else if ("name".equalsIgnoreCase(column) || "name".equalsIgnoreCase(column)) {
            return isNameModified();
        } else if ("id".equalsIgnoreCase(column) || "id".equalsIgnoreCase(column)) {
            return isIdModified();
        }
        return false;		
    }

    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param column
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(String column){
        if (null == column || "".equals(column)) {
            return false;
        } else if ("update_time".equalsIgnoreCase(column) || "updateTime".equalsIgnoreCase(column)) {
            return isUpdateTimeInitialized();
        } else if ("create_time".equalsIgnoreCase(column) || "createTime".equalsIgnoreCase(column)) {
            return isCreateTimeInitialized();
        } else if ("version".equalsIgnoreCase(column) || "version".equalsIgnoreCase(column)) {
            return isVersionInitialized();
        } else if ("group_id".equalsIgnoreCase(column) || "groupId".equalsIgnoreCase(column)) {
            return isGroupIdInitialized();
        } else if ("online".equalsIgnoreCase(column) || "online".equalsIgnoreCase(column)) {
            return isOnlineInitialized();
        } else if ("name".equalsIgnoreCase(column) || "name".equalsIgnoreCase(column)) {
            return isNameInitialized();
        } else if ("id".equalsIgnoreCase(column) || "id".equalsIgnoreCase(column)) {
            return isIdInitialized();
        }
        return false;		
    }
    
    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        updateTimeIsModified = false;
        createTimeIsModified = false;
        versionIsModified = false;
        groupIdIsModified = false;
        onlineIsModified = false;
        nameIsModified = false;
        idIsModified = false;
    }

    /**
     * set all field to null and reset all modification status
     * @see #resetIsModified() 
     */
    public FlDeviceBean clean()
    {
        super.clean();
        resetIsModified();
        return this;
    }

}
