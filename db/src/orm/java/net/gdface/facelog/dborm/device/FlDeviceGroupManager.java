// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.java.vm
// ______________________________________________________
package net.gdface.facelog.dborm.device;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import net.gdface.facelog.dborm.Constant;
import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.DataRetrievalException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.permit.FlPermitBean;
import net.gdface.facelog.dborm.permit.FlPermitManager;
import net.gdface.facelog.dborm.person.FlPersonGroupBean;
import net.gdface.facelog.dborm.person.FlPersonGroupManager;

/**
 * Handles database calls (save, load, count, etc...) for the fl_device_group table.<br>
 * Remarks: 设备组信息<br>
 * @author sql2java
 */
public class FlDeviceGroupManager extends TableManager.BaseAdapter<FlDeviceGroupBean>
{
    /**
     * Tablename.
     */
    public static final String TABLE_NAME="fl_device_group";

   /**
     * Contains all the primarykey fields of the fl_device_group table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };

    @Override
    public String getTableName() {
        return TABLE_NAME;
    }
    
    @Override
    public String getFields() {
        return FL_DEVICE_GROUP_FIELDS;
    }
    
    @Override
    public String getFullFields() {
        return FL_DEVICE_GROUP_FULL_FIELDS;
    }

    @Override
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }

    private static FlDeviceGroupManager singleton = new FlDeviceGroupManager();
    protected FlDeviceGroupManager(){}
    /**
     * Get the FlDeviceGroupManager singleton.
     *
     * @return FlDeviceGroupManager
     */
    public static FlDeviceGroupManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlDeviceGroupBean instance.
     *
     * @return the new FlDeviceGroupBean
     */
    public FlDeviceGroupBean createBean()
    {
        return new FlDeviceGroupBean();
    }
    
    @Override
    protected Class<FlDeviceGroupBean> beanType(){
        return FlDeviceGroupBean.class;
    }
    
    protected FlDeviceManager instanceOfFlDeviceManager(){
        return FlDeviceManager.getInstance();
    }
    protected FlPermitManager instanceOfFlPermitManager(){
        return FlPermitManager.getInstance();
    }
    protected FlPersonGroupManager instanceOfFlPersonGroupManager(){
        return FlPersonGroupManager.getInstance();
    }
    protected FlDeviceGroupManager instanceOfFlDeviceGroupManager(){
        return this;
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1
    /**
     * Loads a {@link FlDeviceGroupBean} from the fl_device_group using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlDeviceGroupBean or {@code null} if not found or have null argument
     * @throws DAOException
     */
    public FlDeviceGroupBean loadByPrimaryKey(Integer id) throws DAOException
    {
        try{
            return loadByPrimaryKeyChecked(id);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    
    //1.1
    /**
     * Loads a {@link FlDeviceGroupBean} from the fl_device_group using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlDeviceGroupBean
     * @throws ObjectRetrievalException if not found
     * @throws DAOException
     */
    @SuppressWarnings("unused")
    public FlDeviceGroupBean loadByPrimaryKeyChecked(Integer id) throws DAOException
    {
        if(null == id){
            throw new ObjectRetrievalException(new NullPointerException());
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + FL_DEVICE_GROUP_FIELDS + " FROM fl_device_group WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            List<FlDeviceGroupBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (1 == pReturn.size()) {
                return pReturn.get(0);
            } else {
                throw new ObjectRetrievalException();
            }
        }
        catch(ObjectRetrievalException e)
        {
            throw e;
        }
        catch(SQLException e)
        {
            throw new DataRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //1.2
    
    @Override
    public FlDeviceGroupBean loadByPrimaryKey(FlDeviceGroupBean bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey(bean.getId());
    }
    
    //1.2.2
    
    @Override
    public FlDeviceGroupBean loadByPrimaryKeyChecked(FlDeviceGroupBean bean) throws DAOException
    {
        if(null == bean){
            throw new NullPointerException();
        }
        return loadByPrimaryKeyChecked(bean.getId());
    }
    
    //1.3
    /**
     * Loads a {@link FlDeviceGroupBean} from the fl_device_group using primary key fields.
     * @param keys primary keys value:<br> 
     * @return a unique {@link FlDeviceGroupBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    @Override
    public FlDeviceGroupBean loadByPrimaryKey(Object ...keys) throws DAOException{
        if(null == keys){
            throw new NullPointerException();
        }
        if(keys.length != 1){
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        }
        
        if(null == keys[0]){
            return null;
        }
        return loadByPrimaryKey((Integer)keys[0]);
    }
    //1.3.2

    @Override
    public FlDeviceGroupBean loadByPrimaryKeyChecked(Object ...keys) throws DAOException{
        if(null == keys){
            throw new NullPointerException();
        }
        if(keys.length != 1){
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        }
        
        if(! (keys[0] instanceof Integer)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        }
        return loadByPrimaryKeyChecked((Integer)keys[0]);
    }
    //1.4
    /**
     * Returns true if this fl_device_group contains row with primary key fields.
     * @param id Integer - PK# 1
     * @throws DAOException
     */
    @SuppressWarnings("unused")
    public boolean existsPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return false;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try{
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_device_group WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            return 1 == this.countByPreparedStatement(ps);
        }catch(SQLException e){
            throw new ObjectRetrievalException(e);
        }finally{
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
    //1.6
    /**
     * Return true if this fl_device_group contains row with primary key fields.
     * @param bean  
     * @throws DAOException
     * @return false if primary kes has null
     * @see #countUsingTemplate(FlDeviceGroupBean)
     */
    @Override
    public boolean existsByPrimaryKey(FlDeviceGroupBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getId()){
            return false;
        }
        long modified = bean.getModified();
        try{
            bean.resetModifiedExceptPrimaryKeys();
            return 1 == countUsingTemplate(bean);
        }finally{
            bean.setModified(modified);
        }
    }
    //1.7

    @Override
    public FlDeviceGroupBean checkDuplicate(FlDeviceGroupBean bean) throws DAOException{
        if(!existsByPrimaryKey(bean)){
            throw new ObjectRetrievalException("Duplicate entry ("+ bean.getId() +") for key 'PRIMARY'");
        }
        return bean;
    }
    //1.4.1
    /**
     * Check duplicated row by primary keys,if row exists throw {@link ObjectRetrievalException}
     * @param id Integer
     * @throws DAOException
     * @see #existsPrimaryKey(Integer id)
     */
    public Integer checkDuplicate(Integer id) throws DAOException
    {
        if(existsPrimaryKey(id)){
            throw new ObjectRetrievalException("Duplicate entry '"+ id +"' for key 'PRIMARY'");
        }
        return id;
    }    
    //2
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     * 
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #delete(FlDeviceGroupBean)}
     */
    public int deleteByPrimaryKey(Integer id) throws DAOException
    {
        FlDeviceGroupBean bean=createBean();
        bean.setId(id);
        return this.delete(bean);
    }

    //2.2
    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
     * @throws DAOException
     */
    @Override
    public int delete(FlDeviceGroupBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getId()){
            return 0;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            // listener callback
            this.listenerContainer.beforeDelete(bean);
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_device_group WHERE id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getId()); }
            int rows=ps.executeUpdate();
            if(rows>0){
                // listener callback
                this.listenerContainer.afterDelete(bean);
            }
            return rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //2.1
    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     * @return the number of deleted rows
     * @see {@link #delete(FlDeviceGroupBean)}
     */   
    @Override
    public int deleteByPrimaryKey(Object ...keys) throws DAOException{
        if(null == keys){
            throw new NullPointerException();
        }
        if(keys.length != 1){
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        }
        FlDeviceGroupBean bean = createBean();   
        
        if(null != keys[0] && !(keys[0] instanceof Integer)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        }
        bean.setId((Integer)keys[0]);
        return delete(bean);
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] IMPORTED_BEAN_TYPES = new Class<?>[]{FlDeviceBean.class,FlDeviceGroupBean.class,FlPermitBean.class};

    /**
     * @see #getImportedBeansAsList(FlDeviceGroupBean,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T[] getImportedBeans(FlDeviceGroupBean bean, int ikIndex) throws DAOException {
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(IMPORTED_BEAN_TYPES[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID} -> {@link FlDeviceBean}</li>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT} -> {@link FlDeviceGroupBean}</li>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID} -> {@link FlPermitBean}</li>
     * </ul>
     * @param bean the {@link FlDeviceGroupBean} object to use
     * @param ikIndex valid values: {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID},{@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT},{@link Constant#FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> List<T> getImportedBeansAsList(FlDeviceGroupBean bean,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID:
            return (List<T>)this.getDeviceBeansByGroupIdAsList(bean);
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT:
            return (List<T>)this.getDeviceGroupBeansByParentAsList(bean);
        case FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID:
            return (List<T>)this.getPermitBeansByDeviceGroupIdAsList(bean);
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
    
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlDeviceGroupBean,int)}
     * @param bean the {@link FlDeviceGroupBean} object to use
     * @param importedBeans the FlPermitBean array to associate to the {@link FlDeviceGroupBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlDeviceGroupBean,int)}
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T[] setImportedBeans(FlDeviceGroupBean bean,T[] importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID:
            return (T[])setDeviceBeansByGroupId(bean,(FlDeviceBean[])importedBeans);
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT:
            return (T[])setDeviceGroupBeansByParent(bean,(FlDeviceGroupBean[])importedBeans);
        case FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID:
            return (T[])setPermitBeansByDeviceGroupId(bean,(FlPermitBean[])importedBeans);
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlDeviceGroupBean,int)}
     * @param bean the {@link FlDeviceGroupBean} object to use
     * @param importedBeans the <T> object to associate to the {@link FlDeviceGroupBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlDeviceGroupBean,int)}

     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>,C extends java.util.Collection<T>> C setImportedBeans(FlDeviceGroupBean bean,C importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID:
            return (C)setDeviceBeansByGroupId(bean,(java.util.Collection<FlDeviceBean>)importedBeans);
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT:
            return (C)setDeviceGroupBeansByParent(bean,(java.util.Collection<FlDeviceGroupBean>)importedBeans);
        case FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID:
            return (C)setPermitBeansByDeviceGroupId(bean,(java.util.Collection<FlPermitBean>)importedBeans);
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
 
    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    //3.1 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceBean} object from the fl_device.group_id field.<BR>
     * FK_NAME : fl_device_ibfk_1 
     * @param bean the {@link FlDeviceGroupBean}
     * @return the associated {@link FlDeviceBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    public FlDeviceBean[] getDeviceBeansByGroupId(FlDeviceGroupBean bean) throws DAOException
    {
        return getDeviceBeansByGroupIdAsList(bean).toArray(new FlDeviceBean[0]);
    }
    //3.1.2 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceBean} object from the fl_device.group_id field.<BR>
     * FK_NAME : fl_device_ibfk_1 
     * @param id Integer - PK# 1
     * @return the associated {@link FlDeviceBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    public FlDeviceBean[] getDeviceBeansByGroupId(Integer idOfDeviceGroup) throws DAOException
    {
        FlDeviceGroupBean bean = createBean();
        bean.setId(idOfDeviceGroup);
        return getDeviceBeansByGroupId(bean);
    }
    //3.2 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceBean} object from fl_device.group_id field.<BR>
     * FK_NAME:fl_device_ibfk_1
     * @param bean the {@link FlDeviceGroupBean}
     * @return the associated {@link FlDeviceBean} beans 
     * @throws DAOException
     */
    public List<FlDeviceBean> getDeviceBeansByGroupIdAsList(FlDeviceGroupBean bean) throws DAOException
    {
        return getDeviceBeansByGroupIdAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceBean} object from fl_device.group_id field.<BR>
     * FK_NAME:fl_device_ibfk_1
     * @param id Integer - PK# 1
     * @return the associated {@link FlDeviceBean} beans 
     * @throws DAOException
     */
    public List<FlDeviceBean> getDeviceBeansByGroupIdAsList(Integer idOfDeviceGroup) throws DAOException
    {
         FlDeviceGroupBean bean = createBean();
        bean.setId(idOfDeviceGroup);
        return getDeviceBeansByGroupIdAsList(bean);
    }
    //3.2.4 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceBean} object from fl_device.group_id field, 
     * given the start row and number of rows.<BR>
     * FK_NAME:fl_device_ibfk_1
     * @param bean the {@link FlDeviceGroupBean}
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the associated {@link FlDeviceBean} beans 
     * @throws DAOException
     */
    public List<FlDeviceBean> getDeviceBeansByGroupIdAsList(FlDeviceGroupBean bean,int startRow, int numRows) throws DAOException
    {
        if(null == bean){
            return new java.util.ArrayList<FlDeviceBean>();
        }
        FlDeviceBean other = new FlDeviceBean();
        other.setGroupId(bean.getId());
        return instanceOfFlDeviceManager().loadUsingTemplateAsList(other,startRow,numRows);
    }
    //3.3 SET IMPORTED
    /**
     * set  the {@link FlDeviceBean} object array associate to FlDeviceGroupBean by the fl_device.group_id field.<BR>
     * FK_NAME : fl_device_ibfk_1 
     * @param bean the referenced {@link FlDeviceGroupBean}
     * @param importedBeans imported beans from fl_device
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlDeviceManager#setReferencedByGroupId(FlDeviceBean, FlDeviceGroupBean)
     */
    public FlDeviceBean[] setDeviceBeansByGroupId(FlDeviceGroupBean bean , FlDeviceBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlDeviceBean importBean : importedBeans ){
                instanceOfFlDeviceManager().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED
    /**
     * set  the {@link FlDeviceBean} object collection associate to FlDeviceGroupBean by the fl_device.group_id field.<BR>
     * FK_NAME:fl_device_ibfk_1
     * @param bean the referenced {@link FlDeviceGroupBean} 
     * @param importedBeans imported beans from fl_device 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlDeviceManager#setReferencedByGroupId(FlDeviceBean, FlDeviceGroupBean)
     */
    public <C extends java.util.Collection<FlDeviceBean>> C setDeviceBeansByGroupId(FlDeviceGroupBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlDeviceBean importBean : importedBeans ){
                instanceOfFlDeviceManager().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.1 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceGroupBean} object from the fl_device_group.parent field.<BR>
     * FK_NAME : fl_device_group_ibfk_1 
     * @param bean the {@link FlDeviceGroupBean}
     * @return the associated {@link FlDeviceGroupBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    public FlDeviceGroupBean[] getDeviceGroupBeansByParent(FlDeviceGroupBean bean) throws DAOException
    {
        return getDeviceGroupBeansByParentAsList(bean).toArray(new FlDeviceGroupBean[0]);
    }
    //3.1.2 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceGroupBean} object from the fl_device_group.parent field.<BR>
     * FK_NAME : fl_device_group_ibfk_1 
     * @param id Integer - PK# 1
     * @return the associated {@link FlDeviceGroupBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    public FlDeviceGroupBean[] getDeviceGroupBeansByParent(Integer idOfDeviceGroup) throws DAOException
    {
        FlDeviceGroupBean bean = createBean();
        bean.setId(idOfDeviceGroup);
        return getDeviceGroupBeansByParent(bean);
    }
    //3.2 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceGroupBean} object from fl_device_group.parent field.<BR>
     * FK_NAME:fl_device_group_ibfk_1
     * @param bean the {@link FlDeviceGroupBean}
     * @return the associated {@link FlDeviceGroupBean} beans 
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> getDeviceGroupBeansByParentAsList(FlDeviceGroupBean bean) throws DAOException
    {
        return getDeviceGroupBeansByParentAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceGroupBean} object from fl_device_group.parent field.<BR>
     * FK_NAME:fl_device_group_ibfk_1
     * @param id Integer - PK# 1
     * @return the associated {@link FlDeviceGroupBean} beans 
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> getDeviceGroupBeansByParentAsList(Integer idOfDeviceGroup) throws DAOException
    {
         FlDeviceGroupBean bean = createBean();
        bean.setId(idOfDeviceGroup);
        return getDeviceGroupBeansByParentAsList(bean);
    }
    //3.2.4 GET IMPORTED
    /**
     * Retrieves the {@link FlDeviceGroupBean} object from fl_device_group.parent field, 
     * given the start row and number of rows.<BR>
     * FK_NAME:fl_device_group_ibfk_1
     * @param bean the {@link FlDeviceGroupBean}
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the associated {@link FlDeviceGroupBean} beans 
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> getDeviceGroupBeansByParentAsList(FlDeviceGroupBean bean,int startRow, int numRows) throws DAOException
    {
        if(null == bean){
            return new java.util.ArrayList<FlDeviceGroupBean>();
        }
        FlDeviceGroupBean other = new FlDeviceGroupBean();
        other.setParent(bean.getId());
        return instanceOfFlDeviceGroupManager().loadUsingTemplateAsList(other,startRow,numRows);
    }
    //3.3 SET IMPORTED
    /**
     * set  the {@link FlDeviceGroupBean} object array associate to FlDeviceGroupBean by the fl_device_group.parent field.<BR>
     * FK_NAME : fl_device_group_ibfk_1 
     * @param bean the referenced {@link FlDeviceGroupBean}
     * @param importedBeans imported beans from fl_device_group
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlDeviceGroupManager#setReferencedByParent(FlDeviceGroupBean, FlDeviceGroupBean)
     */
    public FlDeviceGroupBean[] setDeviceGroupBeansByParent(FlDeviceGroupBean bean , FlDeviceGroupBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlDeviceGroupBean importBean : importedBeans ){
                instanceOfFlDeviceGroupManager().setReferencedByParent(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED
    /**
     * set  the {@link FlDeviceGroupBean} object collection associate to FlDeviceGroupBean by the fl_device_group.parent field.<BR>
     * FK_NAME:fl_device_group_ibfk_1
     * @param bean the referenced {@link FlDeviceGroupBean} 
     * @param importedBeans imported beans from fl_device_group 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlDeviceGroupManager#setReferencedByParent(FlDeviceGroupBean, FlDeviceGroupBean)
     */
    public <C extends java.util.Collection<FlDeviceGroupBean>> C setDeviceGroupBeansByParent(FlDeviceGroupBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlDeviceGroupBean importBean : importedBeans ){
                instanceOfFlDeviceGroupManager().setReferencedByParent(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.1 GET IMPORTED
    /**
     * Retrieves the {@link FlPermitBean} object from the fl_permit.device_group_id field.<BR>
     * FK_NAME : fl_permit_ibfk_1 
     * @param bean the {@link FlDeviceGroupBean}
     * @return the associated {@link FlPermitBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    public FlPermitBean[] getPermitBeansByDeviceGroupId(FlDeviceGroupBean bean) throws DAOException
    {
        return getPermitBeansByDeviceGroupIdAsList(bean).toArray(new FlPermitBean[0]);
    }
    //3.1.2 GET IMPORTED
    /**
     * Retrieves the {@link FlPermitBean} object from the fl_permit.device_group_id field.<BR>
     * FK_NAME : fl_permit_ibfk_1 
     * @param id Integer - PK# 1
     * @return the associated {@link FlPermitBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    public FlPermitBean[] getPermitBeansByDeviceGroupId(Integer idOfDeviceGroup) throws DAOException
    {
        FlDeviceGroupBean bean = createBean();
        bean.setId(idOfDeviceGroup);
        return getPermitBeansByDeviceGroupId(bean);
    }
    //3.2 GET IMPORTED
    /**
     * Retrieves the {@link FlPermitBean} object from fl_permit.device_group_id field.<BR>
     * FK_NAME:fl_permit_ibfk_1
     * @param bean the {@link FlDeviceGroupBean}
     * @return the associated {@link FlPermitBean} beans 
     * @throws DAOException
     */
    public List<FlPermitBean> getPermitBeansByDeviceGroupIdAsList(FlDeviceGroupBean bean) throws DAOException
    {
        return getPermitBeansByDeviceGroupIdAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED
    /**
     * Retrieves the {@link FlPermitBean} object from fl_permit.device_group_id field.<BR>
     * FK_NAME:fl_permit_ibfk_1
     * @param id Integer - PK# 1
     * @return the associated {@link FlPermitBean} beans 
     * @throws DAOException
     */
    public List<FlPermitBean> getPermitBeansByDeviceGroupIdAsList(Integer idOfDeviceGroup) throws DAOException
    {
         FlDeviceGroupBean bean = createBean();
        bean.setId(idOfDeviceGroup);
        return getPermitBeansByDeviceGroupIdAsList(bean);
    }
    //3.2.4 GET IMPORTED
    /**
     * Retrieves the {@link FlPermitBean} object from fl_permit.device_group_id field, 
     * given the start row and number of rows.<BR>
     * FK_NAME:fl_permit_ibfk_1
     * @param bean the {@link FlDeviceGroupBean}
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the associated {@link FlPermitBean} beans 
     * @throws DAOException
     */
    public List<FlPermitBean> getPermitBeansByDeviceGroupIdAsList(FlDeviceGroupBean bean,int startRow, int numRows) throws DAOException
    {
        if(null == bean){
            return new java.util.ArrayList<FlPermitBean>();
        }
        FlPermitBean other = new FlPermitBean();
        other.setDeviceGroupId(bean.getId());
        return instanceOfFlPermitManager().loadUsingTemplateAsList(other,startRow,numRows);
    }
    //3.3 SET IMPORTED
    /**
     * set  the {@link FlPermitBean} object array associate to FlDeviceGroupBean by the fl_permit.device_group_id field.<BR>
     * FK_NAME : fl_permit_ibfk_1 
     * @param bean the referenced {@link FlDeviceGroupBean}
     * @param importedBeans imported beans from fl_permit
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlPermitManager#setReferencedByDeviceGroupId(FlPermitBean, FlDeviceGroupBean)
     */
    public FlPermitBean[] setPermitBeansByDeviceGroupId(FlDeviceGroupBean bean , FlPermitBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlPermitBean importBean : importedBeans ){
                instanceOfFlPermitManager().setReferencedByDeviceGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED
    /**
     * set  the {@link FlPermitBean} object collection associate to FlDeviceGroupBean by the fl_permit.device_group_id field.<BR>
     * FK_NAME:fl_permit_ibfk_1
     * @param bean the referenced {@link FlDeviceGroupBean} 
     * @param importedBeans imported beans from fl_permit 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlPermitManager#setReferencedByDeviceGroupId(FlPermitBean, FlDeviceGroupBean)
     */
    public <C extends java.util.Collection<FlPermitBean>> C setPermitBeansByDeviceGroupId(FlDeviceGroupBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlPermitBean importBean : importedBeans ){
                instanceOfFlPermitManager().setReferencedByDeviceGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.5 SYNC SAVE 
    /**
     * Save the FlDeviceGroupBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlDeviceGroupBean} bean to be saved
     * @param refDevicegroupByParent the {@link FlDeviceGroupBean} bean referenced by {@link FlDeviceGroupBean} 
     * @param impDeviceByGroupId the {@link FlDeviceBean} beans refer to {@link FlDeviceGroupBean} 
     * @param impDevicegroupByParent the {@link FlDeviceGroupBean} beans refer to {@link FlDeviceGroupBean} 
     * @param impPermitByDeviceGroupId the {@link FlPermitBean} beans refer to {@link FlDeviceGroupBean} 
     * @return the inserted or updated {@link FlDeviceGroupBean} bean
     * @throws DAOException
     */
    public FlDeviceGroupBean save(FlDeviceGroupBean bean
        , FlDeviceGroupBean refDevicegroupByParent 
        , FlDeviceBean[] impDeviceByGroupId , FlDeviceGroupBean[] impDevicegroupByParent , FlPermitBean[] impPermitByDeviceGroupId ) throws DAOException
    {
        if(null == bean) {
            return null;
        }
        if(null != refDevicegroupByParent){
            this.setReferencedByParent(bean,refDevicegroupByParent);
        }
        bean = this.save( bean );
        this.setDeviceBeansByGroupId(bean,impDeviceByGroupId);
        instanceOfFlDeviceManager().save( impDeviceByGroupId );
        this.setDeviceGroupBeansByParent(bean,impDevicegroupByParent);
        instanceOfFlDeviceGroupManager().save( impDevicegroupByParent );
        this.setPermitBeansByDeviceGroupId(bean,impPermitByDeviceGroupId);
        instanceOfFlPermitManager().save( impPermitByDeviceGroupId );
        return bean;
    } 

    //3.6 SYNC SAVE AS TRANSACTION
    /**
     * Transaction version for sync save
     * @see {@link #save(FlDeviceGroupBean , FlDeviceGroupBean , FlDeviceBean[] , FlDeviceGroupBean[] , FlPermitBean[] )}
     */
    public FlDeviceGroupBean saveAsTransaction(final FlDeviceGroupBean bean
        ,final FlDeviceGroupBean refDevicegroupByParent 
        ,final FlDeviceBean[] impDeviceByGroupId ,final FlDeviceGroupBean[] impDevicegroupByParent ,final FlPermitBean[] impPermitByDeviceGroupId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlDeviceGroupBean>(){
            @Override
            public FlDeviceGroupBean call() throws Exception {
                return save(bean , refDevicegroupByParent , impDeviceByGroupId , impDevicegroupByParent , impPermitByDeviceGroupId );
            }});
    }
    //3.7 SYNC SAVE 
    /**
     * Save the FlDeviceGroupBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlDeviceGroupBean} bean to be saved
     * @param refDevicegroupByParent the {@link FlDeviceGroupBean} bean referenced by {@link FlDeviceGroupBean} 
     * @param impDeviceByGroupId the {@link FlDeviceBean} bean refer to {@link FlDeviceGroupBean} 
     * @param impDevicegroupByParent the {@link FlDeviceGroupBean} bean refer to {@link FlDeviceGroupBean} 
     * @param impPermitByDeviceGroupId the {@link FlPermitBean} bean refer to {@link FlDeviceGroupBean} 
     * @return the inserted or updated {@link FlDeviceGroupBean} bean
     * @throws DAOException
     */
    public FlDeviceGroupBean save(FlDeviceGroupBean bean
        , FlDeviceGroupBean refDevicegroupByParent 
        , java.util.Collection<FlDeviceBean> impDeviceByGroupId , java.util.Collection<FlDeviceGroupBean> impDevicegroupByParent , java.util.Collection<FlPermitBean> impPermitByDeviceGroupId ) throws DAOException
    {
        if(null == bean) {
            return null;
        }
        this.setReferencedByParent(bean,refDevicegroupByParent);
        bean = this.save( bean );
        this.setDeviceBeansByGroupId(bean,impDeviceByGroupId);
        instanceOfFlDeviceManager().save( impDeviceByGroupId );
        this.setDeviceGroupBeansByParent(bean,impDevicegroupByParent);
        instanceOfFlDeviceGroupManager().save( impDevicegroupByParent );
        this.setPermitBeansByDeviceGroupId(bean,impPermitByDeviceGroupId);
        instanceOfFlPermitManager().save( impPermitByDeviceGroupId );
        return bean;
    }

    //3.8 SYNC SAVE AS TRANSACTION
    /**
     * Transaction version for sync save
     * @see {@link #save(FlDeviceGroupBean , FlDeviceGroupBean , java.util.Collection , java.util.Collection , java.util.Collection )}
     */
    public FlDeviceGroupBean saveAsTransaction(final FlDeviceGroupBean bean
        ,final FlDeviceGroupBean refDevicegroupByParent 
        ,final  java.util.Collection<FlDeviceBean> impDeviceByGroupId ,final  java.util.Collection<FlDeviceGroupBean> impDevicegroupByParent ,final  java.util.Collection<FlPermitBean> impPermitByDeviceGroupId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlDeviceGroupBean>(){
            @Override
            public FlDeviceGroupBean call() throws Exception {
                return save(bean , refDevicegroupByParent , impDeviceByGroupId , impDevicegroupByParent , impPermitByDeviceGroupId );
            }});
    }
    //3.9 SYNC SAVE 
    /**
     * Save the FlDeviceGroupBean bean and referenced beans and imported beans (array) into the database.
     *
     * @param bean the {@link FlDeviceGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlDeviceGroupBean , FlDeviceGroupBean , FlDeviceBean[] , FlDeviceGroupBean[] , FlPermitBean[] )}
     * @return the inserted or updated {@link FlDeviceGroupBean} bean
     * @throws DAOException
     */
    @Override
    public FlDeviceGroupBean save(FlDeviceGroupBean bean,Object ...args) throws DAOException
    {
        if(null == args){
            return save(bean);
        }
        if(args.length > 4){
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 4");
        }
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlDeviceGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:FlDeviceGroupBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof FlDeviceBean[])){
            throw new IllegalArgumentException("invalid type for the No.2 dynamic argument,expected type:FlDeviceBean[]");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof FlDeviceGroupBean[])){
            throw new IllegalArgumentException("invalid type for the No.3 dynamic argument,expected type:FlDeviceGroupBean[]");
        }
        if( args.length > 3 && null != args[3] && !(args[3] instanceof FlPermitBean[])){
            throw new IllegalArgumentException("invalid type for the No.4 dynamic argument,expected type:FlPermitBean[]");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlDeviceGroupBean)args[0],(args.length < 2 || null == args[1])?null:(FlDeviceBean[])args[1],(args.length < 3 || null == args[2])?null:(FlDeviceGroupBean[])args[2],(args.length < 4 || null == args[3])?null:(FlPermitBean[])args[3]);
    } 

    //3.10 SYNC SAVE 
    /**
     * Save the FlDeviceGroupBean bean and referenced beans and imported beans (collection) into the database.
     *
     * @param bean the {@link FlDeviceGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlDeviceGroupBean , FlDeviceGroupBean , java.util.Collection , java.util.Collection , java.util.Collection )}
     * @return the inserted or updated {@link FlDeviceGroupBean} bean
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public FlDeviceGroupBean saveCollection(FlDeviceGroupBean bean,Object ...args) throws DAOException
    {
        if(null == args){
            return save(bean);
        }
        if(args.length > 4){
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 4");
        }
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlDeviceGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:FlDeviceGroupBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:java.util.Collection<FlDeviceBean>");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:java.util.Collection<FlDeviceGroupBean>");
        }
        if( args.length > 3 && null != args[3] && !(args[3] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.4 argument,expected type:java.util.Collection<FlPermitBean>");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlDeviceGroupBean)args[0],(args.length < 2 || null == args[1])?null:(java.util.Collection<FlDeviceBean>)args[1],(args.length < 3 || null == args[2])?null:(java.util.Collection<FlDeviceGroupBean>)args[2],(args.length < 4 || null == args[3])?null:(java.util.Collection<FlPermitBean>)args[3]);
    } 
    //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_DEVICE_GROUP_FK_PARENT} -> {@link FlDeviceGroupBean}</li>
     * </ul>
     * @param bean the {@link FlDeviceGroupBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link Constant#FL_DEVICE_GROUP_FK_PARENT}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T getReferencedBean(FlDeviceGroupBean bean,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_DEVICE_GROUP_FK_PARENT:
            return  (T)this.getReferencedByParent(bean);
        default:
            throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
        }
    }
    
    /**
     * Associates the {@link FlDeviceGroupBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean(FlDeviceGroupBean,int)}
     * @param bean the {@link FlDeviceGroupBean} object to use
     * @param beanToSet the <T> object to associate to the {@link FlDeviceGroupBean}
     * @param fkIndex valid values: see also {@link #getReferencedBean(FlDeviceGroupBean,int)}
     * @return always beanToSet saved
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T setReferencedBean(FlDeviceGroupBean bean,T beanToSet,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_DEVICE_GROUP_FK_PARENT:
            return  (T)this.setReferencedByParent(bean, (FlDeviceGroupBean)beanToSet);
        default:
            throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
        }
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    //5.1 GET REFERENCED VALUE
    /**
     * Retrieves the {@link FlDeviceGroupBean} object referenced by {@link FlDeviceGroupBean#getParent}() field.<br>
     * FK_NAME : fl_device_group_ibfk_1
     * @param bean the {@link FlDeviceGroupBean}
     * @return the associated {@link FlDeviceGroupBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    public FlDeviceGroupBean getReferencedByParent(FlDeviceGroupBean bean) throws DAOException
    {
        if(null == bean){
            return null;
        }
        bean.setReferencedByParent(instanceOfFlDeviceGroupManager().loadByPrimaryKey(bean.getParent())); 
        return bean.getReferencedByParent();
    }

    //5.2 SET REFERENCED 
    /**
     * Associates the {@link FlDeviceGroupBean} object to the {@link FlDeviceGroupBean} object by {@link FlDeviceGroupBean#getParent}() field.
     *
     * @param bean the {@link FlDeviceGroupBean} object to use
     * @param beanToSet the {@link FlDeviceGroupBean} object to associate to the {@link FlDeviceGroupBean} .
     * @return always beanToSet saved
     * @throws Exception
     */
    public FlDeviceGroupBean setReferencedByParent(FlDeviceGroupBean bean, FlDeviceGroupBean beanToSet) throws DAOException
    {
        if(null != bean){
            instanceOfFlDeviceGroupManager().save(beanToSet);
            bean.setReferencedByParent(beanToSet);
            if( null == beanToSet){
                bean.setParent(null);
            }else{
                bean.setParent(beanToSet.getId());
            }
        }
        return beanToSet;
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    //11
    /**
     * Deletes rows from the fl_device_group table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clauses.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    @Override
    public int deleteByWhere(String where) throws DAOException
    {
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action = new DeleteBeanAction(); 
            this.loadByWhere(where,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_device_group " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13

    @Override
    public FlDeviceGroupBean insert(FlDeviceGroupBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; 
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            // listener callback
            this.listenerContainer.beforeInsert(bean);
            int dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_device_group (");

            if (bean.checkIdModified()) {
                if (dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("id");
                dirtyCount++;
            }

            if (bean.checkNameModified()) {
                if (dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("name");
                dirtyCount++;
            }

            if (bean.checkLeafModified()) {
                if (dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("leaf");
                dirtyCount++;
            }

            if (bean.checkParentModified()) {
                if (dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("parent");
                dirtyCount++;
            }

            sql.append(") values (");
            if(dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT,true);

            ps.executeUpdate();

            if (!bean.checkIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            // listener callback
            this.listenerContainer.afterInsert(bean);
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //14

    @Override
    public FlDeviceGroupBean update(FlDeviceGroupBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean;
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            // listener callback
            this.listenerContainer.beforeUpdate(bean); 
            sql = new StringBuilder("UPDATE fl_device_group SET ");
            boolean useComma=false;

            if (bean.checkIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("id=?");
            }

            if (bean.checkNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("name=?");
            }

            if (bean.checkLeafModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("leaf=?");
            }

            if (bean.checkParentModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("parent=?");
            }
            sql.append(" WHERE ");
            sql.append("id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT,true);

            if (dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getId() == null) { ps.setNull(++dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++dirtyCount, bean.getId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            // listener callback
            this.listenerContainer.afterUpdate(bean); 

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18

    @Override
    public FlDeviceGroupBean loadUniqueUsingTemplate(FlDeviceGroupBean bean) throws DAOException
    {
         List<FlDeviceGroupBean> beans = this.loadUsingTemplateAsList(bean);
         switch(beans.size()){
         case 0:
             return null;
         case 1:
             return beans.get(0);
         default:
             throw new ObjectRetrievalException("More than one element !!");
         }
    }
    //18-1

    @Override
    public FlDeviceGroupBean loadUniqueUsingTemplateChecked(FlDeviceGroupBean bean) throws DAOException
    {
         List<FlDeviceGroupBean> beans = this.loadUsingTemplateAsList(bean);
         switch(beans.size()){
         case 0:
             throw new ObjectRetrievalException("Not found element !!");
         case 1:
             return beans.get(0);
         default:
             throw new ObjectRetrievalException("More than one element !!");
         }
    }
    //20-5

    @Override
    public int loadUsingTemplate(FlDeviceGroupBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<FlDeviceGroupBean> action) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSelectSql(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType,false);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }

    //21

    @Override
    public int deleteUsingTemplate(FlDeviceGroupBean bean) throws DAOException
    {
        if(bean.checkIdInitialized() && null != bean.getId()){
            return this.deleteByPrimaryKey(bean.getId());
        }
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action=new DeleteBeanAction(); 
            this.loadUsingTemplate(bean,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_device_group ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT, false);

            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________


    /**
     * Retrieves an array of FlDeviceGroupBean using the parent index.
     *
     * @param parent the parent column's value filter.
     * @return an array of FlDeviceGroupBean
     * @throws DAOException
     */
    public FlDeviceGroupBean[] loadByIndexParent(Integer parent) throws DAOException
    {
        return (FlDeviceGroupBean[])this.loadByIndexParentAsList(parent).toArray(new FlDeviceGroupBean[0]);
    }
    
    /**
     * Retrieves a list of FlDeviceGroupBean using the parent index.
     *
     * @param parent the parent column's value filter.
     * @return a list of FlDeviceGroupBean
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> loadByIndexParentAsList(Integer parent) throws DAOException
    {
        FlDeviceGroupBean bean = this.createBean();
        bean.setParent(parent);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the parent index.
     *
     * @param parent the parent column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndexParent(Integer parent) throws DAOException
    {
        FlDeviceGroupBean bean = this.createBean();
        bean.setParent(parent);
        return deleteUsingTemplate(bean);
    }
    
    
    /**
     * Retrieves a list of FlDeviceGroupBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_DEVICE_GROUP_INDEX_PARENT}
     * @param keys key values of index
     * @return a list of FlDeviceGroupBean
     * @throws DAOException
     */
    @Override
    public List<FlDeviceGroupBean> loadByIndexAsList(int keyIndex,Object ...keys)throws DAOException
    {
        if(null == keys){
            throw new NullPointerException();
        }
        switch(keyIndex){
        case FL_DEVICE_GROUP_INDEX_PARENT:{
            if(keys.length != 1){
                throw new IllegalArgumentException("argument number mismatch with index 'parent' column number");
            }
            
            if(null != keys[0] && !(keys[0] instanceof Integer)){
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            }
            return this.loadByIndexParentAsList((Integer)keys[0]);        
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_DEVICE_GROUP_INDEX_PARENT}
     * @param keys key values of index
     * @return the number of deleted objects
     * @throws DAOException
     */
    @Override
    public int deleteByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        if(null == keys){
            throw new NullPointerException();
        }
        switch(keyIndex){
        case FL_DEVICE_GROUP_INDEX_PARENT:{
            if(keys.length != 1){
                throw new IllegalArgumentException("argument number mismatch with index 'parent' column number");
            }
            
            if(null != keys[0] && !(keys[0] instanceof Integer)){
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            }
            return this.deleteByIndexParent((Integer)keys[0]);
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }        
    }

    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
    //22 MANY TO MANY
    /**
     * @see #loadViaPermitAsList(FlDeviceGroupBean,int,int)
     */
    public List<FlDeviceGroupBean> loadViaPermitAsList(FlPersonGroupBean bean) throws DAOException
    {
         return this.loadViaPermitAsList(bean, 1, -1);
    }

    //23 MANY TO MANY
    /**
     * Retrieves an list of FlDeviceGroupBean using the junction table FlPermit, given a FlPersonGroupBean, 
     * specifying the start row and the number of rows.
     *
     * @param bean the FlPersonGroupBean bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlDeviceGroupBean
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> loadViaPermitAsList(FlPersonGroupBean bean, int startRow, int numRows) throws DAOException
    {
        if(null == bean || null == bean.getId()){
            return java.util.Arrays.<FlDeviceGroupBean>asList();
        }
        Connection c = null;
        PreparedStatement ps = null;
        String sql = " SELECT " + FL_DEVICE_GROUP_FULL_FIELDS
                        + " FROM fl_permit, fl_device_group"
                        + " WHERE "
                        + "     fl_permit.person_group_id=?"
                        + " AND fl_permit.device_group_id=fl_device_group.id";
        try
        {
            c = this.getConnection();
            ps = c.prepareStatement(sql,
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getId()); }
            return loadByPreparedStatementAsList(ps, null, startRow, numRows);
        }
        catch (SQLException e)
        {
            throw new DAOException(e.getMessage(), e);
        }
        finally
        {
           this.getManager().close(ps);
           this.freeConnection(c);
           sql = null;
        }
    }
    //23.2 MANY TO MANY
    /**
     * add junction between {@link FlDeviceGroupBean} and {@link FlPersonGroupBean} if junction not exists
     * @param bean
     * @param linked
     * @throws DAOException
     */
    public void addJunction(FlDeviceGroupBean bean,FlPersonGroupBean linked) throws DAOException{
        if(null == bean || null == bean.getId()){
            return ;
        }
        if(null == linked || null ==bean.getId()){
            return ;
        }
        if(!instanceOfFlPermitManager().existsPrimaryKey(bean.getId(),linked.getId())){
            FlPermitBean junction = new FlPermitBean();
            junction.setDeviceGroupId(bean.getId());
            junction.setPersonGroupId(linked.getId());
            instanceOfFlPermitManager().save(junction);
        }
    }
    //23.3 MANY TO MANY
    /**
     * remove junction between {@link FlDeviceGroupBean} and {@link FlPersonGroupBean}
     * @param bean
     * @param linked
     * @throws DAOException
     */
    public int deleteJunction(FlDeviceGroupBean bean,FlPersonGroupBean linked) throws DAOException{
        if(null == bean || null == bean.getId()){
            return 0;
        }
        if(null == linked || null ==bean.getId()){
            return 0;
        }
        return instanceOfFlPermitManager().deleteByPrimaryKey(bean.getId(),linked.getId());
    }
    //23.4 MANY TO MANY
    /** @see #addJunction(FlDeviceGroupBean,FlPersonGroupBean) */
    public void addJunction(FlDeviceGroupBean bean,FlPersonGroupBean... linkedBeans) throws DAOException{
        if(null != linkedBeans){
            for(FlPersonGroupBean linked:linkedBeans){
                addJunction(bean,linked);
            }
        }
    }
    //23.5 MANY TO MANY
    /** @see #addJunction(FlDeviceGroupBean,FlPersonGroupBean) */
    public void addJunction(FlDeviceGroupBean bean,java.util.Collection<FlPersonGroupBean> linkedBeans) throws DAOException{
        if(null != linkedBeans){
            for(FlPersonGroupBean linked:linkedBeans){
                addJunction(bean,linked);
            }
        }
    }
    //23.6 MANY TO MANY
    /** @see #deleteJunction(FlDeviceGroupBean,FlPersonGroupBean) */
    public int deleteJunction(FlDeviceGroupBean bean,FlPersonGroupBean... linkedBeans) throws DAOException{
        int count = 0;
        if(null != linkedBeans){
            for(FlPersonGroupBean linked:linkedBeans){
                count += deleteJunction(bean,linked);
            }
        }
        return count;
    }
    //23.7 MANY TO MANY
    /** @see #deleteJunction(FlDeviceGroupBean,FlPersonGroupBean) */
    public int deleteJunction(FlDeviceGroupBean bean,java.util.Collection<FlPersonGroupBean> linkedBeans) throws DAOException{
        int count = 0;
        if(null != linkedBeans){
            for(FlPersonGroupBean linked:linkedBeans){
                count += deleteJunction(bean,linked);
            }
        }
        return count;
    }

    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    //25

    @Override
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_device_group " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    //26
    /**
     * Retrieves the number of rows of the table fl_device_group with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    //20
    /**
     * count the number of elements of a specific FlDeviceGroupBean bean given the search type
     *
     * @param bean the FlDeviceGroupBean template to look for
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    @Override
    public int countUsingTemplate(FlDeviceGroupBean bean, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_device_group");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType,false);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    /**
     * fills the given StringBuilder with the sql where clauses constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlDeviceGroupBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int dirtyCount = 0;
        String sqlEqualsOperation = searchType == SEARCH_EXACT ? "=" : " like ";
        try
        {
            if (bean.checkIdModified()) {
                dirtyCount ++;
                if (bean.getId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id = ?");
                }
            }
            if (bean.checkNameModified()) {
                dirtyCount ++;
                if (bean.getName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkLeafModified()) {
                dirtyCount ++;
                if (bean.getLeaf() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("leaf IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("leaf = ?");
                }
            }
            if (bean.checkParentModified()) {
                dirtyCount ++;
                if (bean.getParent() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("parent IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("parent = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlDeviceGroupBean bean, int searchType,boolean fillNull) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int dirtyCount = 0;
        try
        {
            if (bean.checkIdModified()) {
                // System.out.println("Setting for " + dirtyCount + " [" + bean.getId() + "]");
                if (bean.getId() == null) {if(fillNull){ ps.setNull(++dirtyCount, Types.INTEGER);} } else { Manager.setInteger(ps, ++dirtyCount, bean.getId()); }
            }
            if (bean.checkNameModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + dirtyCount + " [" + bean.getName() + "]");
                        if (bean.getName() == null) {if(fillNull){ ps.setNull(++dirtyCount, Types.VARCHAR);} } else { ps.setString(++dirtyCount, bean.getName()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + dirtyCount + " [%" + bean.getName() + "%]");
                        if ( bean.getName()  == null) {if(fillNull){ ps.setNull(++dirtyCount, Types.VARCHAR);} } else { ps.setString(++dirtyCount, "%" + bean.getName() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + dirtyCount + " [%" + bean.getName() + "]");
                        if ( bean.getName() == null) {if(fillNull){ ps.setNull(++dirtyCount, Types.VARCHAR);} } else { ps.setString(++dirtyCount, "%" + bean.getName()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + dirtyCount + " [" + bean.getName() + "%]");
                        if (bean.getName()  == null) {if(fillNull){ ps.setNull(++dirtyCount, Types.VARCHAR);} } else { ps.setString(++dirtyCount, bean.getName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkLeafModified()) {
                // System.out.println("Setting for " + dirtyCount + " [" + bean.getLeaf() + "]");
                if (bean.getLeaf() == null) {if(fillNull){ ps.setNull(++dirtyCount, Types.TINYINT);} } else { Manager.setInteger(ps, ++dirtyCount, bean.getLeaf()); }
            }
            if (bean.checkParentModified()) {
                // System.out.println("Setting for " + dirtyCount + " [" + bean.getParent() + "]");
                if (bean.getParent() == null) {if(fillNull){ ps.setNull(++dirtyCount, Types.INTEGER);} } else { Manager.setInteger(ps, ++dirtyCount, bean.getParent()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    //28
    /**
     * decode a resultset in an array of FlDeviceGroupBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlDeviceGroupBean table
     * @throws DAOException
     */
    public FlDeviceGroupBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlDeviceGroupBean[0]);
    }

    //28-1
    /**
     * decode a resultset in a list of FlDeviceGroupBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlDeviceGroupBean table
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    //28-2
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action<FlDeviceGroupBean> action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 ){
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                }
                if( null==action || null==rs ){
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");
                }
                for(;startRow > 1 && rs.next();){
                    --startRow;
                    //skip to last of startRow
                }
                if (fieldList == null) {
                    if(numRows<0){
                        for(;rs.next();++count){
                            action.call(decodeRow(rs, action.getBean()));
                        }
                    }else{
                        for(;rs.next() && count<numRows;++count){
                            action.call(decodeRow(rs, action.getBean()));
                        }
                    }
                }else {
                    if(numRows<0){
                        for(;rs.next();++count){
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                        }
                    }else{
                        for(;rs.next() && count<numRows;++count){
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                        }
                    }
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    //29
    /**
     * Transforms a ResultSet iterating on the fl_device_group on a FlDeviceGroupBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlDeviceGroupBean bean
     * @throws DAOException
     */
    public FlDeviceGroupBean decodeRow(ResultSet rs,FlDeviceGroupBean bean) throws DAOException
    {
        if(null==bean){
            bean = this.createBean();
        }
        try
        {
            bean.setId(Manager.getInteger(rs, 1));
            bean.setName(rs.getString(2));
            bean.setLeaf(Manager.getInteger(rs, 3));
            bean.setParent(Manager.getInteger(rs, 4));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //30
    /**
     * Transforms a ResultSet iterating on the fl_device_group table on a FlDeviceGroupBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlDeviceGroupBean bean
     * @throws DAOException
     */
    public FlDeviceGroupBean decodeRow(ResultSet rs, int[] fieldList,FlDeviceGroupBean bean) throws DAOException
    {
        if(null==bean){
            bean = this.createBean();
        }
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case FL_DEVICE_GROUP_ID_ID:
                        ++pos;
                        bean.setId(Manager.getInteger(rs, pos));
                        break;
                    case FL_DEVICE_GROUP_ID_NAME:
                        ++pos;
                        bean.setName(rs.getString(pos));
                        break;
                    case FL_DEVICE_GROUP_ID_LEAF:
                        ++pos;
                        bean.setLeaf(Manager.getInteger(rs, pos));
                        break;
                    case FL_DEVICE_GROUP_ID_PARENT:
                        ++pos;
                        bean.setParent(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //31
    /**
     * Transforms a ResultSet iterating on the fl_device_group on a FlDeviceGroupBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlDeviceGroupBean bean
     * @throws DAOException
     */
    public FlDeviceGroupBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlDeviceGroupBean bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, "id"));
            bean.setName(rs.getString("name"));
            bean.setLeaf(Manager.getInteger(rs, "leaf"));
            bean.setParent(Manager.getInteger(rs, "parent"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    //32
    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlDeviceGroupBean
     * @throws DAOException
     */
    public FlDeviceGroupBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    //32
    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlDeviceGroupBean
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    //33
    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceGroupBean
     * @throws DAOException
     */
    public FlDeviceGroupBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlDeviceGroupBean[0]);
    }

    //33
    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceGroupBean
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    //34
    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceGroupBean
     * @throws DAOException
     */
    public FlDeviceGroupBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlDeviceGroupBean[0]);
    }

    //34-1
    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceGroupBean
     * @throws DAOException
     */
    public List<FlDeviceGroupBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    //34-2
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action<FlDeviceGroupBean> action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    private final TableListener.ListenerContainer<FlDeviceGroupBean> listenerContainer = new TableListener.ListenerContainer<FlDeviceGroupBean>();

    //35

    @Override
    public TableListener<FlDeviceGroupBean> registerListener(TableListener<FlDeviceGroupBean> listener)
    {
        this.listenerContainer.add(listener);
        return listener;
    }

    //36
    /**
     * remove listener.
     */
    @Override
    public void unregisterListener(TableListener<FlDeviceGroupBean> listener)
    {
        this.listenerContainer.remove(listener);
    }

    //37

    @Override
    public void fire(TableListener.Event event, FlDeviceGroupBean bean) throws DAOException{
        if(null == event){
            throw new NullPointerException();
        }
        event.fire(listenerContainer, bean);
    }
    
    //37-1

    @Override
    public void fire(int event, FlDeviceGroupBean bean) throws DAOException{
        try{
            fire(TableListener.Event.values()[event],bean);
        }catch(ArrayIndexOutOfBoundsException e){
            throw new IllegalArgumentException("invalid event id " + event);
        }
    }

    /** foreign key listener for DEELTE RULE : SET_NULL */
    private final net.gdface.facelog.dborm.BaseForeignKeyListener<FlDeviceGroupBean,FlDeviceGroupBean> foreignKeyListenerByParent = 
            new net.gdface.facelog.dborm.BaseForeignKeyListener<FlDeviceGroupBean,FlDeviceGroupBean>(){
                @Override
                protected List<FlDeviceGroupBean> getImportedBeans(FlDeviceGroupBean bean) throws DAOException {
                    return listenerContainer.isEmpty() 
                            ? java.util.Collections.<FlDeviceGroupBean>emptyList()
                            : instanceOfFlDeviceGroupManager().getDeviceGroupBeansByParentAsList(bean);
                }
                @Override
                protected void onRemove(List<FlDeviceGroupBean> effectBeans) throws DAOException {
                    for(FlDeviceGroupBean bean:effectBeans){
                        bean.setParent(null);
                        Event.UPDATE.fire(listenerContainer, bean);
                    }
                }};

    //37-2
    /**
     * bind foreign key listener to foreign table: <br>
     * DELETE RULE : SET_NULL {@code fl_device_group(parent)-> fl_device_group(id)} <br>
     */
    public void bindForeignKeyListenerForDeleteRule(){
        instanceOfFlDeviceGroupManager().registerListener(foreignKeyListenerByParent);
        
    }
    //37-3
    /**
     * unbind foreign key listener from all of foreign tables <br>
     * @see #bindForeignKeyListenerForDeleteRule()
     */
    public void unbindForeignKeyListenerForDeleteRule(){
        instanceOfFlDeviceGroupManager().unregisterListener(foreignKeyListenerByParent);
        
    }
    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //40
    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    //41
    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    private void freeConnection(Connection c)
    {
        // back to pool
        this.getManager().releaseConnection(c);
    }

    //42
    /**
     * Gets the connection.
     */
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    //43

    @Override
    public boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES){
            if(c.equalsIgnoreCase(column)){
                return true;
            }
        }
        return false;
    }
    
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else {
                        ps.setObject(i + 1, argList[i]);
                    }
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    @Override    

    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<FlDeviceGroupBean> action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
   
    @Override

    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    class DeleteBeanAction extends Action.BaseAdapter<FlDeviceGroupBean>{
        private final AtomicInteger count=new AtomicInteger(0);
        @Override
        public void call(FlDeviceGroupBean bean) throws DAOException {
                FlDeviceGroupManager.this.delete(bean);
                count.incrementAndGet();
        }
        int getCount(){
            return count.get();
        }
    }
    //45
    /**
     * return a primary key list from {@link FlDeviceGroupBean} array
     * @param array
     */
    public List<Integer> toPrimaryKeyList(FlDeviceGroupBean... array){        
        if(null == array){
            return new java.util.ArrayList<Integer>();
        }
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(array.length);
        for(FlDeviceGroupBean bean:array){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
    //46
    /**
     * return a primary key list from {@link FlDeviceGroupBean} collection
     * @param array
     */
    public List<Integer> toPrimaryKeyList(java.util.Collection<FlDeviceGroupBean> collection){        
        if(null == collection){
            return new java.util.ArrayList<Integer>();
        }
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(collection.size());
        for(FlDeviceGroupBean bean:collection){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }

    //_____________________________________________________________________
    //
    // SELF-REFERENCE
    //_____________________________________________________________________
    //47
    /**
     * return bean list ( include {@code bean}) by the self-reference field : {@code fl_device_group(parent) }<br>
     * first element is top bean
     * @param id PK# 1 
     * @return  empty list if input primary key is {@code null}<br>
     *         first element equal last if self-reference field is cycle
     * @throws DAOException
     */
    public java.util.List<FlDeviceGroupBean> listOfParent(Integer id) throws DAOException{
        FlDeviceGroupBean parent = (null == id)
            ? null
            : new FlDeviceGroupBean(id);
        java.util.List<FlDeviceGroupBean> list;
        for(list = new java.util.ArrayList<FlDeviceGroupBean>();null != parent;list.add(parent)){
            parent = loadByPrimaryKey(parent.getParent());
            if(equal(id,parent.getId())){
                // cycle reference
                list.add(parent);
                break;
            }
        }
        java.util.Collections.reverse(list);
        return list;
    }
    //48
    /**
     * see also {@link #listOfParent(Integer)}
     */
    public java.util.List<FlDeviceGroupBean> listOfParent(FlDeviceGroupBean bean) throws DAOException{
        return null == bean
                ? java.util.Collections.<FlDeviceGroupBean>emptyList()
                : listOfParent(bean.getId());
    }
    //49
    /**
     * get level count on the self-reference field : {@code fl_device_group(parent) }
     * @param id PK# 1 
     * @return  0 if input primary key is {@code null}<br>
     *         -1 if self-reference field is cycle
     * @throws DAOException
     */
    public int levelOfParent(Integer id) throws DAOException{
        FlDeviceGroupBean parent = (null == id)
            ? null
            : new FlDeviceGroupBean(id);
        int count;
        for(count = 0;null != parent;++count){
            parent = loadByPrimaryKey(parent.getParent());
            if(null != parent  && equal(id,parent.getId())){
                return -1;
            }
        }
        return count;
    }
    //50
    /**
     * see also {@link #levelOfParent(Integer)}
     */
    public int levelOfParent(FlDeviceGroupBean bean) throws DAOException{
        return null == bean
                ? 0
                : levelOfParent(bean.getId());
    }
    //51
    /**
     * test whether the self-reference field is cycle : {@code fl_device_group(parent) }
     * @param id PK# 1 
     * @throws DAOException
     * @see #levelOfParent(FlDeviceGroupBean)
     */
    public boolean isCycleOnParent(Integer id) throws DAOException{
        return levelOfParent(id) < 0;
    }
    //52
    /**
     * test whether the self-reference field is cycle : {@code fl_device_group(parent) }
     * @param bean
     * @throws DAOException
     * @see #levelOfParent(FlDeviceGroupBean)
     */
    public boolean isCycleOnParent(FlDeviceGroupBean bean) throws DAOException{
        return levelOfParent(bean) < 0;
    }
    //53
    /**
     * return top bean that with {@code null} self-reference field  : {@code fl_device_group(parent) }
     * @param id PK# 1 
     * @return top bean
     * @throws NullPointerException if input primary key is {@code null}
     * @throws IllegalStateException if self-reference field is cycle
     * @throws DAOException
     */
    public FlDeviceGroupBean topOfParent(Integer id) throws DAOException{
        if(null == id){
            throw new NullPointerException();
        }
        FlDeviceGroupBean parent = new FlDeviceGroupBean(id);
        for(;null != parent.getParent();){
            parent = loadByPrimaryKey(parent.getParent());
            if(equal(id,parent.getId())){
                throw new IllegalStateException("cycle on field: " + "parent");
            }
        }
        return parent;
    }
    //54
    /**
     * see also {@link #topOfParent(Integer)}
     */
    public FlDeviceGroupBean topOfParent(FlDeviceGroupBean bean) throws DAOException{
        if(null == bean){
            throw new NullPointerException();
        }
        return topOfParent(bean.getId());
    }
    //55
    /**
     * Ensures the self-reference field is not cycle : {@code fl_device_group(parent) }
     * @param id PK# 1
     * @return always {@code id}
     * @throws IllegalStateException if self-reference field is cycle 
     * @throws DAOException
     * @see #isCycleOnParent(Integer)
     */
    public Integer checkCycleOfParent(Integer id) throws DAOException{
        if(isCycleOnParent(id)){
            throw new IllegalStateException("cycle on field: " + "parent");
        }
        return id;
    }
    //56
    /**
     * Ensures the self-reference field is not cycle : {@code fl_device_group(parent) }<br>
     * @param bean
     * @return always {@code bean}
     * @throws IllegalStateException if self-reference field is cycle
     * @throws DAOException
     * @see #isCycleOnParent(FlDeviceGroupBean)
     */
    public FlDeviceGroupBean checkCycleOfParent(FlDeviceGroupBean bean) throws DAOException{
        if(isCycleOnParent(bean)){
            throw new IllegalStateException("cycle on field: " + "parent");
        }
        return bean;
    }
}
