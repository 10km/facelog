// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.person;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.face.FlFaceBean;
import net.gdface.facelog.dborm.face.FlFaceManager;
import net.gdface.facelog.dborm.log.FlLogBean;
import net.gdface.facelog.dborm.log.FlLogManager;
import net.gdface.facelog.dborm.image.FlImageBean;
import net.gdface.facelog.dborm.image.FlImageManager;

/**
 * Handles database calls (save, load, count, etc...) for the fl_person table.
 * @author sql2java
 */
public class FlPersonManager extends TableManager.Adapter<FlPersonBean>
{

    /**
     * Identify the id field.
     */
    public static final int ID_ID = 0;

    /**
     * Identify the group_id field.
     */
    public static final int ID_GROUP_ID = 1;

    /**
     * Identify the name field.
     */
    public static final int ID_NAME = 2;

    /**
     * Identify the sex field.
     */
    public static final int ID_SEX = 3;

    /**
     * Identify the birthdate field.
     */
    public static final int ID_BIRTHDATE = 4;

    /**
     * Identify the papers_type field.
     */
    public static final int ID_PAPERS_TYPE = 5;

    /**
     * Identify the papers_num field.
     */
    public static final int ID_PAPERS_NUM = 6;

    /**
     * Identify the photo_id field.
     */
    public static final int ID_PHOTO_ID = 7;

    /**
     * Identify the face_md5 field.
     */
    public static final int ID_FACE_MD5 = 8;

    /**
     * Identify the expiry_date field.
     */
    public static final int ID_EXPIRY_DATE = 9;

    /**
     * Identify the create_time field.
     */
    public static final int ID_CREATE_TIME = 10;

    /**
     * Identify the update_time field.
     */
    public static final int ID_UPDATE_TIME = 11;

    /**
     * Tablename.
     */
    public static final String TABLE_NAME="fl_person";
    /**
     * Contains all the full fields of the fl_person table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
        "fl_person.id"
        ,"fl_person.group_id"
        ,"fl_person.name"
        ,"fl_person.sex"
        ,"fl_person.birthdate"
        ,"fl_person.papers_type"
        ,"fl_person.papers_num"
        ,"fl_person.photo_id"
        ,"fl_person.face_md5"
        ,"fl_person.expiry_date"
        ,"fl_person.create_time"
        ,"fl_person.update_time"
    };

    /**
     * Contains all the fields of the fl_person table.
     */
    public static final String[] FIELD_NAMES =
    {
        "id"
        ,"group_id"
        ,"name"
        ,"sex"
        ,"birthdate"
        ,"papers_type"
        ,"papers_num"
        ,"photo_id"
        ,"face_md5"
        ,"expiry_date"
        ,"create_time"
        ,"update_time"
    };
   /**
     * Contains all the primarykey fields of the fl_person table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };
    /**
     * Field that contains the comma separated fields of the fl_person table.
     */
    public static final String ALL_FULL_FIELDS = "fl_person.id"
                            + ",fl_person.group_id"
                            + ",fl_person.name"
                            + ",fl_person.sex"
                            + ",fl_person.birthdate"
                            + ",fl_person.papers_type"
                            + ",fl_person.papers_num"
                            + ",fl_person.photo_id"
                            + ",fl_person.face_md5"
                            + ",fl_person.expiry_date"
                            + ",fl_person.create_time"
                            + ",fl_person.update_time";

    /**
     * Field that contains the comma separated fields of the fl_person table.
     */
    public static final String ALL_FIELDS = "id"
                            + ",group_id"
                            + ",name"
                            + ",sex"
                            + ",birthdate"
                            + ",papers_type"
                            + ",papers_num"
                            + ",photo_id"
                            + ",face_md5"
                            + ",expiry_date"
                            + ",create_time"
                            + ",update_time";
    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    public String getFieldNamesAsString() {
        return ALL_FIELDS;
    }
    
    public String[] getFullFieldNames() {
        return FULL_FIELD_NAMES;
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }

    private static FlPersonManager singleton = new FlPersonManager();

    /**
     * Get the FlPersonManager singleton.
     *
     * @return FlPersonManager
     */
    public static FlPersonManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlPersonBean instance.
     *
     * @return the new FlPersonBean
     */
    public FlPersonBean createBean()
    {
        return new FlPersonBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link FlPersonBean} from the fl_person using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlPersonBean or {@code null} if not found or have null argument
     * @throws DAOException
     */
    //1
    @SuppressWarnings("unused")
    public FlPersonBean loadByPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return null;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + ALL_FIELDS + " FROM fl_person WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            List<FlPersonBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (0 == pReturn.size()) {
                return null;
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //1.2
    @Override
    public FlPersonBean loadByPrimaryKey(FlPersonBean bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey( bean.getId());
    }
    
    /**
     * Loads a {@link FlPersonBean} from the fl_person using primary key fields.
     * when you don't know which is primary key of table,you can use the method.
     * @param keys primary keys value:<br> 
     *             PK# 1:Integer     
     * @return a unique {@link FlPersonBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    //1.3
    public FlPersonBean loadByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        return loadByPrimaryKey((Integer)keys[0]);
    }
    
    /**
     * Returns true if this fl_person contains row with primary key fields.
     * @param id Integer - PK# 1
     * @throws DAOException
     * @see #loadByPrimaryKey(Integer id)
     */
    //1.3
    public boolean existsPrimaryKey(Integer id) throws DAOException
    {
        return null!=loadByPrimaryKey(id );
    }
    
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     * 
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #delete(FlPersonBean)}
     */
    //2
    public int deleteByPrimaryKey(Integer id) throws DAOException
    {
        FlPersonBean bean=createBean();
        bean.setId(id);
        return this.delete(bean);
    }

    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
     * @throws DAOException
     */
    //2
    @Override
    public int delete(FlPersonBean bean) throws DAOException
    {
        if(null == bean) return 0;
        if(null == bean.getId()){
            throw new IllegalArgumentException("primary keys must no be null ");
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            this.listenerContainer.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_person WHERE id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getId()); }
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.listenerContainer.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     *             PK# 1:Integer     
     * @return the number of deleted rows
     * @see {@link #delete(FlPersonBean)}
     */   
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys) throws DAOException{
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        FlPersonBean bean=createBean();   
        if(null!= keys[0] && !(keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        bean.setId((Integer)keys[0]);
        return delete(bean);
    }
    
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_PERSON_IK_FL_FACE_PERSON_ID} -> {@link FlFaceBean}</li>
     *     <li> {@link TableManager#FL_PERSON_IK_FL_LOG_PERSON_ID} -> {@link FlLogBean}</li>
     * </ul>
     * @param bean the {@link FlPersonBean} object to use
     * @param ikIndex valid values: {@link TableManager#FL_PERSON_IK_FL_FACE_PERSON_ID},{@link TableManager#FL_PERSON_IK_FL_LOG_PERSON_ID}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T[] getImportedBeans(FlPersonBean bean,int ikIndex)throws DAOException{
        return getImportedBeansAsList(bean,ikIndex).toArray((T[])new Object[0]);
    }
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_PERSON_IK_FL_FACE_PERSON_ID} -> {@link FlFaceBean}</li>
     *     <li> {@link TableManager#FL_PERSON_IK_FL_LOG_PERSON_ID} -> {@link FlLogBean}</li>
     * </ul>
     * @param bean the {@link FlPersonBean} object to use
     * @param ikIndex valid values: {@link TableManager#FL_PERSON_IK_FL_FACE_PERSON_ID},{@link TableManager#FL_PERSON_IK_FL_LOG_PERSON_ID}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> List<T> getImportedBeansAsList(FlPersonBean bean,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_PERSON_IK_FL_FACE_PERSON_ID:
            return (List<T>)this.getFlFaceBeansByPersonIdAsList(bean);
        case FL_PERSON_IK_FL_LOG_PERSON_ID:
            return (List<T>)this.getFlLogBeansByPersonIdAsList(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> {@link TableManager#FL_PERSON_IK_FL_FACE_PERSON_ID} -> {@link FlFaceBean}</li>
     *     <li> {@link TableManager#FL_PERSON_IK_FL_LOG_PERSON_ID} -> {@link FlLogBean}</li>
     * </ul>
     * @param bean the {@link FlPersonBean} object to use
     * @param importedBeans the FlLogBean array to associate to the {@link FlPersonBean}
     * @param ikIndex valid values: {@link TableManager#FL_PERSON_IK_FL_FACE_PERSON_ID},{@link TableManager#FL_PERSON_IK_FL_LOG_PERSON_ID}
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T[] setImportedBeans(FlPersonBean bean,T[] importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_PERSON_IK_FL_FACE_PERSON_ID:
            return (T[])setFlFaceBeansByPersonId(bean,(FlFaceBean[])importedBeans);
        case FL_PERSON_IK_FL_LOG_PERSON_ID:
            return (T[])setFlLogBeansByPersonId(bean,(FlLogBean[])importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_PERSON_IK_FL_FACE_PERSON_ID} -> {@link FlFaceBean}</li>
     *     <li> {@link TableManager#FL_PERSON_IK_FL_LOG_PERSON_ID} -> {@link FlLogBean}</li>
     * </ul>
     * @param bean the {@link FlPersonBean} object to use
     * @param importedBeans the <T> object to associate to the {@link FlPersonBean}
     * @param ikIndex valid values: {@link TableManager#FL_PERSON_IK_FL_FACE_PERSON_ID},{@link TableManager#FL_PERSON_IK_FL_LOG_PERSON_ID}
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T,C extends java.util.Collection<T>> C setImportedBeans(FlPersonBean bean,C importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_PERSON_IK_FL_FACE_PERSON_ID:
            return (C)setFlFaceBeansByPersonId(bean,(java.util.Collection<FlFaceBean>)importedBeans);
        case FL_PERSON_IK_FL_LOG_PERSON_ID:
            return (C)setFlLogBeansByPersonId(bean,(java.util.Collection<FlLogBean>)importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FlFaceBean} object from the fl_face.person_id field.<BR>
     * FK_NAME : fl_face_ibfk_2 
     * @param bean the {@link FlPersonBean}
     * @return the associated {@link FlFaceBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlFaceBean[] getFlFaceBeansByPersonId(FlPersonBean bean) throws DAOException
    {
        return getFlFaceBeansByPersonIdAsList(bean).toArray(new FlFaceBean[0]);
    }

    /**
     * Retrieves the {@link FlFaceBean} object from fl_face.person_id field.<BR>
     * FK_NAME:fl_face_ibfk_2
     * @param bean the {@link FlPersonBean}
     * @return the associated {@link FlFaceBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlFaceBean> getFlFaceBeansByPersonIdAsList(FlPersonBean bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<FlFaceBean>();
        FlFaceBean other = FlFaceManager.getInstance().createBean();
        other.setPersonId(bean.getId());
        return FlFaceManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * set  the {@link FlFaceBean} object array associate to FlPersonBean by the fl_face.person_id field.<BR>
     * FK_NAME : fl_face_ibfk_2 
     * @param bean the referenced {@link FlPersonBean}
     * @param importedBeans imported beans from fl_face
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlFaceManager#setReferencedByPersonId(FlFaceBean, FlPersonBean)
     */
    //3.3 SET IMPORTED
    public FlFaceBean[] setFlFaceBeansByPersonId(FlPersonBean bean , FlFaceBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlFaceBean importBean : importedBeans ){
                FlFaceManager.getInstance().setReferencedByPersonId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlFaceBean} object collection associate to FlPersonBean by the fl_face.person_id field.<BR>
     * FK_NAME:fl_face_ibfk_2
     * @param bean the referenced {@link FlPersonBean} 
     * @param importedBeans imported beans from fl_face 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlFaceManager#setReferencedByPersonId(FlFaceBean, FlPersonBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlFaceBean>> C setFlFaceBeansByPersonId(FlPersonBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlFaceBean importBean : importedBeans ){
                FlFaceManager.getInstance().setReferencedByPersonId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Retrieves the {@link FlLogBean} object from the fl_log.person_id field.<BR>
     * FK_NAME : fl_log_ibfk_1 
     * @param bean the {@link FlPersonBean}
     * @return the associated {@link FlLogBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlLogBean[] getFlLogBeansByPersonId(FlPersonBean bean) throws DAOException
    {
        return getFlLogBeansByPersonIdAsList(bean).toArray(new FlLogBean[0]);
    }

    /**
     * Retrieves the {@link FlLogBean} object from fl_log.person_id field.<BR>
     * FK_NAME:fl_log_ibfk_1
     * @param bean the {@link FlPersonBean}
     * @return the associated {@link FlLogBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlLogBean> getFlLogBeansByPersonIdAsList(FlPersonBean bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<FlLogBean>();
        FlLogBean other = FlLogManager.getInstance().createBean();
        other.setPersonId(bean.getId());
        return FlLogManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * set  the {@link FlLogBean} object array associate to FlPersonBean by the fl_log.person_id field.<BR>
     * FK_NAME : fl_log_ibfk_1 
     * @param bean the referenced {@link FlPersonBean}
     * @param importedBeans imported beans from fl_log
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlLogManager#setReferencedByPersonId(FlLogBean, FlPersonBean)
     */
    //3.3 SET IMPORTED
    public FlLogBean[] setFlLogBeansByPersonId(FlPersonBean bean , FlLogBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlLogBean importBean : importedBeans ){
                FlLogManager.getInstance().setReferencedByPersonId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlLogBean} object collection associate to FlPersonBean by the fl_log.person_id field.<BR>
     * FK_NAME:fl_log_ibfk_1
     * @param bean the referenced {@link FlPersonBean} 
     * @param importedBeans imported beans from fl_log 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlLogManager#setReferencedByPersonId(FlLogBean, FlPersonBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlLogBean>> C setFlLogBeansByPersonId(FlPersonBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlLogBean importBean : importedBeans ){
                FlLogManager.getInstance().setReferencedByPersonId(importBean , bean);
            }
        }
        return importedBeans;
    }



    /**
     * Save the FlPersonBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlPersonBean} bean to be saved
     * @param refFlImagebyPhotoId the {@link FlImageBean} bean referenced by {@link FlPersonBean} 
     * @param impFlFacebyPersonId the {@link FlFaceBean} bean refer to {@link FlPersonBean} 
     * @param impFlLogbyPersonId the {@link FlLogBean} bean refer to {@link FlPersonBean} 
     * @return the inserted or updated {@link FlPersonBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public FlPersonBean save(FlPersonBean bean
        , FlImageBean refFlImagebyPhotoId 
        , FlFaceBean[] impFlFacebyPersonId , FlLogBean[] impFlLogbyPersonId ) throws DAOException
    {
        if(null == bean) return null;
        if( null != refFlImagebyPhotoId) {
            refFlImagebyPhotoId = FlImageManager.getInstance().save( refFlImagebyPhotoId );
            bean.setPhotoId(refFlImagebyPhotoId.getMd5()); 
            bean.setReferencedByPhotoId(refFlImagebyPhotoId);
        }
        bean = this.save( bean );
        if( null != impFlFacebyPersonId) {
            for ( FlFaceBean imp : impFlFacebyPersonId ){
                imp.setPersonId(bean.getId()); 
                imp.setReferencedByPersonId(bean);
                FlFaceManager.getInstance().save( imp );
            }
        }
        if( null != impFlLogbyPersonId) {
            for ( FlLogBean imp : impFlLogbyPersonId ){
                imp.setPersonId(bean.getId()); 
                imp.setReferencedByPersonId(bean);
                FlLogManager.getInstance().save( imp );
            }
        }
        return bean;
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(FlPersonBean , FlImageBean , FlFaceBean[] , FlLogBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public FlPersonBean saveAsTransaction(final FlPersonBean bean
        ,final FlImageBean refFlImagebyPhotoId 
        ,final FlFaceBean[] impFlFacebyPersonId ,final FlLogBean[] impFlLogbyPersonId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlPersonBean>(){
            @Override
            public FlPersonBean call() throws Exception {
                return save(bean , refFlImagebyPhotoId , impFlFacebyPersonId , impFlLogbyPersonId );
            }});
    }
    /**
     * Save the FlPersonBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlPersonBean} bean to be saved
     * @param refFlImagebyPhotoId the {@link FlImageBean} bean referenced by {@link FlPersonBean} 
     * @param impFlFacebyPersonId the {@link FlFaceBean} bean refer to {@link FlPersonBean} 
     * @param impFlLogbyPersonId the {@link FlLogBean} bean refer to {@link FlPersonBean} 
     * @return the inserted or updated {@link FlPersonBean} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public FlPersonBean save(FlPersonBean bean
        , FlImageBean refFlImagebyPhotoId 
        , java.util.Collection<FlFaceBean> impFlFacebyPersonId , java.util.Collection<FlLogBean> impFlLogbyPersonId ) throws DAOException
    {
        if(null == bean) return null;
        this.setReferencedByPhotoId(bean,refFlImagebyPhotoId);
        bean = this.save( bean );
        this.setFlFaceBeansByPersonId(bean,impFlFacebyPersonId);
        FlFaceManager.getInstance().save( impFlFacebyPersonId );
        this.setFlLogBeansByPersonId(bean,impFlLogbyPersonId);
        FlLogManager.getInstance().save( impFlLogbyPersonId );
        return bean;
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save(FlPersonBean , FlImageBean , java.util.Collection , java.util.Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public FlPersonBean saveAsTransaction(final FlPersonBean bean
        ,final FlImageBean refFlImagebyPhotoId 
        ,final  java.util.Collection<FlFaceBean> impFlFacebyPersonId ,final  java.util.Collection<FlLogBean> impFlLogbyPersonId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlPersonBean>(){
            @Override
            public FlPersonBean call() throws Exception {
                return save(bean , refFlImagebyPhotoId , impFlFacebyPersonId , impFlLogbyPersonId );
            }});
    }
      //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_PERSON_FK_PHOTO_ID} -> {@link FlImageBean}</li>
     * </ul>
     * @param bean the {@link FlPersonBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link TableManager#FL_PERSON_FK_PHOTO_ID}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T getReferencedBean(FlPersonBean bean,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_PERSON_FK_PHOTO_ID:
            return  (T)this.getReferencedByPhotoId(bean);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    
    /**
     * Associates the {@link FlPersonBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_PERSON_FK_PHOTO_ID} -> {@link FlImageBean}</li>
     * </ul>
     * @param bean the {@link FlPersonBean} object to use
     * @param beanToSet the <T> object to associate to the {@link FlPersonBean}
     * @param fkIndex valid values: <br>
     *        {@link TableManager#FL_PERSON_FK_PHOTO_ID}
     * @return always beanToSet saved
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T setReferencedBean(FlPersonBean bean,T beanToSet,int fkIndex)throws DAOException{
        switch(fkIndex){
        case FL_PERSON_FK_PHOTO_ID:
            return  (T)this.setReferencedByPhotoId(bean, (FlImageBean)beanToSet);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the {@link FlImageBean} object referenced by {@link FlPersonBean#getPhotoId}() field.<br>
     * FK_NAME : fl_person_ibfk_1
     * @param bean the {@link FlPersonBean}
     * @return the associated {@link FlImageBean} bean or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET REFERENCED VALUE
    public FlImageBean getReferencedByPhotoId(FlPersonBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlImageBean other = FlImageManager.getInstance().createBean();
        other.setMd5(bean.getPhotoId()); 
        bean.setReferencedByPhotoId(FlImageManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getReferencedByPhotoId();
    }

    /**
     * Associates the {@link FlPersonBean} object to the {@link FlImageBean} object by {@link FlPersonBean#getPhotoId}() field.
     *
     * @param bean the {@link FlPersonBean} object to use
     * @param beanToSet the {@link FlImageBean} object to associate to the {@link FlPersonBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FlImageBean setReferencedByPhotoId(FlPersonBean bean, FlImageBean beanToSet) throws DAOException
    {
        if(null != bean){
            FlImageManager.getInstance().save(beanToSet);
            bean.setReferencedByPhotoId(beanToSet);
            if( null == beanToSet){
                bean.setPhotoId(null);
            }else{
                bean.setPhotoId(beanToSet.getMd5());
            }
        }
        return beanToSet;
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Deletes rows from the fl_person table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clauses.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    @Override
    public int deleteByWhere(String where) throws DAOException
    {
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action = new DeleteBeanAction(); 
            this.loadByWhere(where,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_person " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    public FlPersonBean insert(FlPersonBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.listenerContainer.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_person (");

            if (bean.isIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("id");
                _dirtyCount++;
            }

            if (bean.isGroupIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("group_id");
                _dirtyCount++;
            }

            if (bean.isNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("name");
                _dirtyCount++;
            }

            if (bean.isSexModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("sex");
                _dirtyCount++;
            }

            if (bean.isBirthdateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("birthdate");
                _dirtyCount++;
            }

            if (bean.isPapersTypeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("papers_type");
                _dirtyCount++;
            }

            if (bean.isPapersNumModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("papers_num");
                _dirtyCount++;
            }

            if (bean.isPhotoIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("photo_id");
                _dirtyCount++;
            }

            if (bean.isFaceMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("face_md5");
                _dirtyCount++;
            }

            if (bean.isExpiryDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("expiry_date");
                _dirtyCount++;
            }

            if (bean.isCreateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("create_time");
                _dirtyCount++;
            }

            if (bean.isUpdateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("update_time");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.isIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.listenerContainer.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //14
    @Override
    public FlPersonBean update(FlPersonBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.listenerContainer.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_person SET ");
            boolean useComma=false;

            if (bean.isIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("id=?");
            }

            if (bean.isGroupIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("group_id=?");
            }

            if (bean.isNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("name=?");
            }

            if (bean.isSexModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("sex=?");
            }

            if (bean.isBirthdateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("birthdate=?");
            }

            if (bean.isPapersTypeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("papers_type=?");
            }

            if (bean.isPapersNumModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("papers_num=?");
            }

            if (bean.isPhotoIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("photo_id=?");
            }

            if (bean.isFaceMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("face_md5=?");
            }

            if (bean.isExpiryDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("expiry_date=?");
            }

            if (bean.isCreateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("create_time=?");
            }

            if (bean.isUpdateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("update_time=?");
            }
            sql.append(" WHERE ");
            sql.append("id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.listenerContainer.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public FlPersonBean loadUniqueUsingTemplate(FlPersonBean bean) throws DAOException
    {
         FlPersonBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    //20-5
    @Override
    public int loadUsingTemplate(FlPersonBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<FlPersonBean> action) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSelectSql(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(FlPersonBean bean) throws DAOException
    {
        if(bean.isIdInitialized() && null != bean.getId()){
            return this.deleteByPrimaryKey(bean.getId());
        }
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action=new DeleteBeanAction(); 
            this.loadUsingTemplate(bean,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_person ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an unique FlPersonBean using the face_md5 index.
     *
     * @param faceMd5 the face_md5 column's value filter. must not be null
     * @return a list of FlPersonBean
     * @throws DAOException
     */
    public FlPersonBean loadByindexFaceMd5(String faceMd5) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        if( null == faceMd5)
            throw new IllegalArgumentException("the key 'faceMd5'  must not be null");
        bean.setFaceMd5(faceMd5);
        return loadUniqueUsingTemplate(bean);
    }
    /**
     * Deletes rows using the face_md5 index.
     *
     * @param faceMd5 the face_md5 column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByindexFaceMd5(String faceMd5) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        bean.setFaceMd5(faceMd5);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an unique FlPersonBean using the papers_num index.
     *
     * @param papersNum the papers_num column's value filter. must not be null
     * @return a list of FlPersonBean
     * @throws DAOException
     */
    public FlPersonBean loadByindexPapersNum(String papersNum) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        if( null == papersNum)
            throw new IllegalArgumentException("the key 'papersNum'  must not be null");
        bean.setPapersNum(papersNum);
        return loadUniqueUsingTemplate(bean);
    }
    /**
     * Deletes rows using the papers_num index.
     *
     * @param papersNum the papers_num column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByindexPapersNum(String papersNum) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        bean.setPapersNum(papersNum);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an unique FlPersonBean using the photo_id index.
     *
     * @param photoId the photo_id column's value filter. must not be null
     * @return a list of FlPersonBean
     * @throws DAOException
     */
    public FlPersonBean loadByindexPhotoId(String photoId) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        if( null == photoId)
            throw new IllegalArgumentException("the key 'photoId'  must not be null");
        bean.setPhotoId(photoId);
        return loadUniqueUsingTemplate(bean);
    }
    /**
     * Deletes rows using the photo_id index.
     *
     * @param photoId the photo_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByindexPhotoId(String photoId) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        bean.setPhotoId(photoId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of FlPersonBean using the expiry_date index.
     *
     * @param expiryDate the expiry_date column's value filter.
     * @return an array of FlPersonBean
     * @throws DAOException
     */
    public FlPersonBean[] loadByindexExpiryDate(java.util.Date expiryDate) throws DAOException
    {
        return (FlPersonBean[])this.loadByindexExpiryDateAsList(expiryDate).toArray(new FlPersonBean[0]);
    }
    
    /**
     * Retrieves a list of FlPersonBean using the expiry_date index.
     *
     * @param expiryDate the expiry_date column's value filter.
     * @return a list of FlPersonBean
     * @throws DAOException
     */
    public List<FlPersonBean> loadByindexExpiryDateAsList(java.util.Date expiryDate) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        bean.setExpiryDate(expiryDate);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the expiry_date index.
     *
     * @param expiryDate the expiry_date column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByindexExpiryDate(java.util.Date expiryDate) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        bean.setExpiryDate(expiryDate);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves a array of FlPersonBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link TableManager#FL_PERSON_INDEX_FACE_MD5},{@link TableManager#FL_PERSON_INDEX_PAPERS_NUM},{@link TableManager#FL_PERSON_INDEX_PHOTO_ID},{@link TableManager#FL_PERSON_INDEX_EXPIRY_DATE}
     * @param keys key values of index
     * @return
     * @throws DAOException
     * @see #loadByIndexAsList(int ,Object ...)
     */
    public FlPersonBean[] loadByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        return this.loadByIndexAsList(keyIndex,keys).toArray(new FlPersonBean[0]);
    }
    
    /**
     * Retrieves a list of FlPersonBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link TableManager#FL_PERSON_INDEX_FACE_MD5},{@link TableManager#FL_PERSON_INDEX_PAPERS_NUM},{@link TableManager#FL_PERSON_INDEX_PHOTO_ID},{@link TableManager#FL_PERSON_INDEX_EXPIRY_DATE}
     * @param keys key values of index
     * @return a list of FlPersonBean
     * @throws DAOException
     */
    public List<FlPersonBean> loadByIndexAsList(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
        case FL_PERSON_INDEX_FACE_MD5:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'face_md5' column number");
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            FlPersonBean bean= this.loadByindexFaceMd5((String)keys[0]);
            List<FlPersonBean> result = new java.util.ArrayList<FlPersonBean>();
            if(null != bean)
                result.add(bean);
            return result;
        }
        case FL_PERSON_INDEX_PAPERS_NUM:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'papers_num' column number");
            if(null != keys[1] && !(keys[1] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            FlPersonBean bean= this.loadByindexPapersNum((String)keys[0]);
            List<FlPersonBean> result = new java.util.ArrayList<FlPersonBean>();
            if(null != bean)
                result.add(bean);
            return result;
        }
        case FL_PERSON_INDEX_PHOTO_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'photo_id' column number");
            if(null != keys[2] && !(keys[2] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            FlPersonBean bean= this.loadByindexPhotoId((String)keys[0]);
            List<FlPersonBean> result = new java.util.ArrayList<FlPersonBean>();
            if(null != bean)
                result.add(bean);
            return result;
        }
        case FL_PERSON_INDEX_EXPIRY_DATE:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'expiry_date' column number");
            if(null != keys[3] && !(keys[3] instanceof java.util.Date))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:java.util.Date");
            return this.loadByindexExpiryDateAsList((java.util.Date)keys[0]);        
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link TableManager#FL_PERSON_INDEX_FACE_MD5},{@link TableManager#FL_PERSON_INDEX_PAPERS_NUM},{@link TableManager#FL_PERSON_INDEX_PHOTO_ID},{@link TableManager#FL_PERSON_INDEX_EXPIRY_DATE}
     * @param keys key values of index
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        switch(keyIndex){
        case FL_PERSON_INDEX_FACE_MD5:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'face_md5' column number");
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByindexFaceMd5((String)keys[0]);
        }
        case FL_PERSON_INDEX_PAPERS_NUM:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'papers_num' column number");
            if(null != keys[1] && !(keys[1] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByindexPapersNum((String)keys[0]);
        }
        case FL_PERSON_INDEX_PHOTO_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'photo_id' column number");
            if(null != keys[2] && !(keys[2] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByindexPhotoId((String)keys[0]);
        }
        case FL_PERSON_INDEX_EXPIRY_DATE:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'expiry_date' column number");
            if(null != keys[3] && !(keys[3] instanceof java.util.Date))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:java.util.Date");
            return this.deleteByindexExpiryDate((java.util.Date)keys[0]);
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }        
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    //25
    @Override
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_person " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_person with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlPersonBean bean given the search type
     *
     * @param bean the FlPersonBean template to look for
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlPersonBean bean, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_person");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clauses constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlPersonBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isIdModified()) {
                _dirtyCount ++;
                if (bean.getId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id = ?");
                }
            }
            if (bean.isGroupIdModified()) {
                _dirtyCount ++;
                if (bean.getGroupId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("group_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("group_id = ?");
                }
            }
            if (bean.isNameModified()) {
                _dirtyCount ++;
                if (bean.getName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isSexModified()) {
                _dirtyCount ++;
                if (bean.getSex() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("sex IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("sex = ?");
                }
            }
            if (bean.isBirthdateModified()) {
                _dirtyCount ++;
                if (bean.getBirthdate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("birthdate IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("birthdate = ?");
                }
            }
            if (bean.isPapersTypeModified()) {
                _dirtyCount ++;
                if (bean.getPapersType() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("papers_type IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("papers_type = ?");
                }
            }
            if (bean.isPapersNumModified()) {
                _dirtyCount ++;
                if (bean.getPapersNum() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("papers_num IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("papers_num ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isPhotoIdModified()) {
                _dirtyCount ++;
                if (bean.getPhotoId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("photo_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("photo_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isFaceMd5Modified()) {
                _dirtyCount ++;
                if (bean.getFaceMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("face_md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isExpiryDateModified()) {
                _dirtyCount ++;
                if (bean.getExpiryDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("expiry_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("expiry_date = ?");
                }
            }
            if (bean.isCreateTimeModified()) {
                _dirtyCount ++;
                if (bean.getCreateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time = ?");
                }
            }
            if (bean.isUpdateTimeModified()) {
                _dirtyCount ++;
                if (bean.getUpdateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("update_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("update_time = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlPersonBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getId() + "]");
                if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            }
            if (bean.isGroupIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getGroupId() + "]");
                if (bean.getGroupId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getGroupId()); }
            }
            if (bean.isNameModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getName() + "]");
                        if (bean.getName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getName()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getName() + "%]");
                        if ( bean.getName()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getName() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getName() + "]");
                        if ( bean.getName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getName()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getName() + "%]");
                        if (bean.getName()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isSexModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getSex() + "]");
                if (bean.getSex() == null) { ps.setNull(++_dirtyCount, Types.TINYINT); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getSex()); }
            }
            if (bean.isBirthdateModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getBirthdate() + "]");
                if (bean.getBirthdate() == null) { ps.setNull(++_dirtyCount, Types.DATE); } else { ps.setDate(++_dirtyCount, new java.sql.Date(bean.getBirthdate().getTime())); }
            }
            if (bean.isPapersTypeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPapersType() + "]");
                if (bean.getPapersType() == null) { ps.setNull(++_dirtyCount, Types.TINYINT); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getPapersType()); }
            }
            if (bean.isPapersNumModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPapersNum() + "]");
                        if (bean.getPapersNum() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getPapersNum()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getPapersNum() + "%]");
                        if ( bean.getPapersNum()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getPapersNum() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getPapersNum() + "]");
                        if ( bean.getPapersNum() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getPapersNum()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPapersNum() + "%]");
                        if (bean.getPapersNum()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getPapersNum() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isPhotoIdModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPhotoId() + "]");
                        if (bean.getPhotoId() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getPhotoId()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getPhotoId() + "%]");
                        if ( bean.getPhotoId()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getPhotoId() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getPhotoId() + "]");
                        if ( bean.getPhotoId() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getPhotoId()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getPhotoId() + "%]");
                        if (bean.getPhotoId()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getPhotoId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isFaceMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceMd5() + "]");
                        if (bean.getFaceMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getFaceMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFaceMd5() + "%]");
                        if ( bean.getFaceMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getFaceMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getFaceMd5() + "]");
                        if ( bean.getFaceMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getFaceMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getFaceMd5() + "%]");
                        if (bean.getFaceMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getFaceMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isExpiryDateModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getExpiryDate() + "]");
                if (bean.getExpiryDate() == null) { ps.setNull(++_dirtyCount, Types.DATE); } else { ps.setDate(++_dirtyCount, new java.sql.Date(bean.getExpiryDate().getTime())); }
            }
            if (bean.isCreateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCreateTime() + "]");
                if (bean.getCreateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getCreateTime().getTime())); }
            }
            if (bean.isUpdateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUpdateTime() + "]");
                if (bean.getUpdateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getUpdateTime().getTime())); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlPersonBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlPersonBean table
     * @throws DAOException
     */
    //28
    public FlPersonBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlPersonBean[0]);
    }

    /**
     * decode a resultset in a list of FlPersonBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlPersonBean table
     * @throws DAOException
     */
    //28-1
    public List<FlPersonBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action<FlPersonBean> action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_person on a FlPersonBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlPersonBean bean
     * @throws DAOException
     */
    //29
    public FlPersonBean decodeRow(ResultSet rs,FlPersonBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, 1));
            bean.setGroupId(Manager.getInteger(rs, 2));
            bean.setName(rs.getString(3));
            bean.setSex(Manager.getInteger(rs, 4));
            bean.setBirthdate(rs.getDate(5));
            bean.setPapersType(Manager.getInteger(rs, 6));
            bean.setPapersNum(rs.getString(7));
            bean.setPhotoId(rs.getString(8));
            bean.setFaceMd5(rs.getString(9));
            bean.setExpiryDate(rs.getDate(10));
            bean.setCreateTime(rs.getTimestamp(11));
            bean.setUpdateTime(rs.getTimestamp(12));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_person table on a FlPersonBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlPersonBean bean
     * @throws DAOException
     */
    //30
    public FlPersonBean decodeRow(ResultSet rs, int[] fieldList,FlPersonBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_ID:
                        ++pos;
                        bean.setId(Manager.getInteger(rs, pos));
                        break;
                    case ID_GROUP_ID:
                        ++pos;
                        bean.setGroupId(Manager.getInteger(rs, pos));
                        break;
                    case ID_NAME:
                        ++pos;
                        bean.setName(rs.getString(pos));
                        break;
                    case ID_SEX:
                        ++pos;
                        bean.setSex(Manager.getInteger(rs, pos));
                        break;
                    case ID_BIRTHDATE:
                        ++pos;
                        bean.setBirthdate(rs.getDate(pos));
                        break;
                    case ID_PAPERS_TYPE:
                        ++pos;
                        bean.setPapersType(Manager.getInteger(rs, pos));
                        break;
                    case ID_PAPERS_NUM:
                        ++pos;
                        bean.setPapersNum(rs.getString(pos));
                        break;
                    case ID_PHOTO_ID:
                        ++pos;
                        bean.setPhotoId(rs.getString(pos));
                        break;
                    case ID_FACE_MD5:
                        ++pos;
                        bean.setFaceMd5(rs.getString(pos));
                        break;
                    case ID_EXPIRY_DATE:
                        ++pos;
                        bean.setExpiryDate(rs.getDate(pos));
                        break;
                    case ID_CREATE_TIME:
                        ++pos;
                        bean.setCreateTime(rs.getTimestamp(pos));
                        break;
                    case ID_UPDATE_TIME:
                        ++pos;
                        bean.setUpdateTime(rs.getTimestamp(pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_person on a FlPersonBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlPersonBean bean
     * @throws DAOException
     */
    //31
    public FlPersonBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlPersonBean bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, "id"));
            bean.setGroupId(Manager.getInteger(rs, "group_id"));
            bean.setName(rs.getString("name"));
            bean.setSex(Manager.getInteger(rs, "sex"));
            bean.setBirthdate(rs.getDate("birthdate"));
            bean.setPapersType(Manager.getInteger(rs, "papers_type"));
            bean.setPapersNum(rs.getString("papers_num"));
            bean.setPhotoId(rs.getString("photo_id"));
            bean.setFaceMd5(rs.getString("face_md5"));
            bean.setExpiryDate(rs.getDate("expiry_date"));
            bean.setCreateTime(rs.getTimestamp("create_time"));
            bean.setUpdateTime(rs.getTimestamp("update_time"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlPersonBean
     * @throws DAOException
     */
    //32
    public FlPersonBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlPersonBean
     * @throws DAOException
     */
    //32
    public List<FlPersonBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlPersonBean
     * @throws DAOException
     */
    //33
    public FlPersonBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlPersonBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlPersonBean
     * @throws DAOException
     */
    //33
    public List<FlPersonBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlPersonBean
     * @throws DAOException
     */
    //34
    public FlPersonBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlPersonBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlPersonBean
     * @throws DAOException
     */
    //34-1
    public List<FlPersonBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action<FlPersonBean> action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    class ListenerContainer implements TableListener<FlPersonBean> {
        private final Set<TableListener<FlPersonBean>> listeners = new TreeSet<TableListener<FlPersonBean>>();
        public ListenerContainer() {
        }
    
        @Override
        public void beforeInsert(FlPersonBean bean) throws DAOException {
            for(TableListener<FlPersonBean> listener:listeners){
                listener.beforeInsert(bean);
            }
        }
    
        @Override
        public void afterInsert(FlPersonBean bean) throws DAOException {
            for(TableListener<FlPersonBean> listener:listeners){
                listener.afterInsert(bean);
            }
        }
    
        @Override
        public void beforeUpdate(FlPersonBean bean) throws DAOException {
            for(TableListener<FlPersonBean> listener:listeners){
                listener.beforeUpdate(bean);
            }
        }
    
        @Override
        public void afterUpdate(FlPersonBean bean) throws DAOException {
            for(TableListener<FlPersonBean> listener:listeners){
                listener.afterUpdate(bean);
            }
        }
    
        @Override
        public void beforeDelete(FlPersonBean bean) throws DAOException {
            for(TableListener<FlPersonBean> listener:listeners){
                listener.beforeDelete(bean);
            }
        }
    
        @Override
        public void afterDelete(FlPersonBean bean) throws DAOException {
            for(TableListener<FlPersonBean> listener:listeners){
                listener.afterDelete(bean);
            }
        }
    
        public boolean isEmpty() {
            return listeners.isEmpty();
        }
    
        public boolean contains(TableListener<FlPersonBean> o) {
            return listeners.contains(o);
        }
    
        public synchronized boolean add(TableListener<FlPersonBean> e) {
            if(null == e)
                throw new NullPointerException();
            return listeners.add(e);
        }
    
        public synchronized boolean remove(TableListener<FlPersonBean> o) {
            return null == o? false : listeners.remove(o);
        }
    
        public synchronized void clear() {
            listeners.clear();
        }    
    }
    private final ListenerContainer listenerContainer = new ListenerContainer();

    //35
    @Override
    public void registerListener(TableListener<FlPersonBean> listener)
    {
        this.listenerContainer.add(listener);
    }

    /**
     * remove listener.
     */
    //36
    @Override
    public void unregisterListener(TableListener<FlPersonBean> listener)
    {
        this.listenerContainer.remove(listener);
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    //43
    @Override
    public boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    @Override    
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<FlPersonBean> action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
   
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    @Override
    public void runAsTransaction(final Runnable fun) throws DAOException{
        Manager.getInstance().runAsTransaction(fun);
    }
    
    class DeleteBeanAction extends Action.Adapter<FlPersonBean>{
        private final AtomicInteger count=new AtomicInteger(0);
        @Override
        public void call(FlPersonBean bean) throws DAOException {
                FlPersonManager.this.delete(bean);
                count.incrementAndGet();
        }
        int getCount(){
            return count.get();
        }
    }
}
