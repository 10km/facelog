// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package net.gdface.facelog.dborm.user;

import net.gdface.facelog.dborm.FullBean;

/**
 * AttUserBean is a mapping of att_user Table.
 * @author sql2java
*/
public class AttUserBean
    extends AttUserBeanBase
    implements FullBean<AttUserBeanBase>
{
	private static final long serialVersionUID = 5939682475938786157L;
	
    private boolean grayimageIsModified = false;
    private boolean grayimageIsInitialized = false;

    private boolean colorimageIsModified = false;
    private boolean colorimageIsInitialized = false;

    private boolean permissionIsModified = false;
    private boolean permissionIsInitialized = false;

    private boolean updatetimeIsModified = false;
    private boolean updatetimeIsInitialized = false;

    private boolean graylenIsModified = false;
    private boolean graylenIsInitialized = false;

    private boolean colorlenIsModified = false;
    private boolean colorlenIsInitialized = false;

    private boolean isonjobIsModified = false;
    private boolean isonjobIsInitialized = false;

    private boolean usernoIsModified = false;
    private boolean usernoIsInitialized = false;

    private boolean companyIsModified = false;
    private boolean companyIsInitialized = false;

    private boolean idIsModified = false;
    private boolean idIsInitialized = false;



    /**
     * Prefered methods to create a AttUserBean is via the createAttUserBean method in AttUserManager or
     * via the factory class AttUserFactory create method
     * 为了能在webservice中传递对象，此处从protected改为public
     */
    public AttUserBean(){
        super();
    }
    /**
     * create a AttUserBean from a instance
     */
    AttUserBean(AttUserBeanBase bean){
        super();
        copy(bean);
    }
    /**
     * Getter method for grayimage.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.grayimage</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of grayimage
     */
    public byte[] getGrayimage(){
        return grayimage;
    }
    /**
     * Setter method for grayimage.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to grayimage
     */
    public void setGrayimage(byte[] newVal)
    {
        super.setGrayimage(newVal);
        grayimageIsModified = true;
        grayimageIsInitialized = true;
    }

    /**
     * Determines if the grayimage has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGrayimageModified()
    {
        return grayimageIsModified;
    }

    /**
     * Determines if the grayimage has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGrayimageInitialized()
    {
        return grayimageIsInitialized;
    }

    /**
     * Getter method for colorimage.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.colorimage</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of colorimage
     */
    public byte[] getColorimage(){
        return colorimage;
    }
    /**
     * Setter method for colorimage.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to colorimage
     */
    public void setColorimage(byte[] newVal)
    {
        super.setColorimage(newVal);
        colorimageIsModified = true;
        colorimageIsInitialized = true;
    }

    /**
     * Determines if the colorimage has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isColorimageModified()
    {
        return colorimageIsModified;
    }

    /**
     * Determines if the colorimage has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isColorimageInitialized()
    {
        return colorimageIsInitialized;
    }

    /**
     * Getter method for permission.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.permission</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of permission
     */
    public Integer getPermission(){
        return permission;
    }
    /**
     * Setter method for permission.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to permission
     */
    public void setPermission(Integer newVal)
    {
        if ((newVal != null && permission != null && (newVal.compareTo(permission) == 0)) ||
            (newVal == null && permission == null && permissionIsInitialized)) {
            return;
        }
        super.setPermission(newVal);
        permissionIsModified = true;
        permissionIsInitialized = true;
    }

    /**
     * Setter method for permission.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to permission
     */
    public void setPermission(int newVal)
    {
        setPermission(new Integer(newVal));
    }

    /**
     * Determines if the permission has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPermissionModified()
    {
        return permissionIsModified;
    }

    /**
     * Determines if the permission has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPermissionInitialized()
    {
        return permissionIsInitialized;
    }

    /**
     * Getter method for updatetime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.updatetime</li>
     * <li>column size: 38</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of updatetime
     */
    public String getUpdatetime(){
        return updatetime;
    }
    /**
     * Setter method for updatetime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to updatetime
     */
    public void setUpdatetime(String newVal)
    {
        if ((newVal != null && updatetime != null && (newVal.compareTo(updatetime) == 0)) ||
            (newVal == null && updatetime == null && updatetimeIsInitialized)) {
            return;
        }
        super.setUpdatetime(newVal);
        updatetimeIsModified = true;
        updatetimeIsInitialized = true;
    }

    /**
     * Determines if the updatetime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUpdatetimeModified()
    {
        return updatetimeIsModified;
    }

    /**
     * Determines if the updatetime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUpdatetimeInitialized()
    {
        return updatetimeIsInitialized;
    }

    /**
     * Getter method for graylen.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.graylen</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of graylen
     */
    public Integer getGraylen(){
        return graylen;
    }
    /**
     * Setter method for graylen.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to graylen
     */
    public void setGraylen(Integer newVal)
    {
        if ((newVal != null && graylen != null && (newVal.compareTo(graylen) == 0)) ||
            (newVal == null && graylen == null && graylenIsInitialized)) {
            return;
        }
        super.setGraylen(newVal);
        graylenIsModified = true;
        graylenIsInitialized = true;
    }

    /**
     * Setter method for graylen.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to graylen
     */
    public void setGraylen(int newVal)
    {
        setGraylen(new Integer(newVal));
    }

    /**
     * Determines if the graylen has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGraylenModified()
    {
        return graylenIsModified;
    }

    /**
     * Determines if the graylen has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGraylenInitialized()
    {
        return graylenIsInitialized;
    }

    /**
     * Getter method for colorlen.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.colorlen</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of colorlen
     */
    public Integer getColorlen(){
        return colorlen;
    }
    /**
     * Setter method for colorlen.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to colorlen
     */
    public void setColorlen(Integer newVal)
    {
        if ((newVal != null && colorlen != null && (newVal.compareTo(colorlen) == 0)) ||
            (newVal == null && colorlen == null && colorlenIsInitialized)) {
            return;
        }
        super.setColorlen(newVal);
        colorlenIsModified = true;
        colorlenIsInitialized = true;
    }

    /**
     * Setter method for colorlen.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to colorlen
     */
    public void setColorlen(int newVal)
    {
        setColorlen(new Integer(newVal));
    }

    /**
     * Determines if the colorlen has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isColorlenModified()
    {
        return colorlenIsModified;
    }

    /**
     * Determines if the colorlen has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isColorlenInitialized()
    {
        return colorlenIsInitialized;
    }

    /**
     * Getter method for isonjob.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.isonjob</li>
     * <li>column size: 3</li>
     * <li>jdbc type returned by the driver: Types.TINYINT</li>
     * </ul>
     *
     * @return the value of isonjob
     */
    public Integer getIsonjob(){
        return isonjob;
    }
    /**
     * Setter method for isonjob.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to isonjob
     */
    public void setIsonjob(Integer newVal)
    {
        if ((newVal != null && isonjob != null && (newVal.compareTo(isonjob) == 0)) ||
            (newVal == null && isonjob == null && isonjobIsInitialized)) {
            return;
        }
        super.setIsonjob(newVal);
        isonjobIsModified = true;
        isonjobIsInitialized = true;
    }

    /**
     * Setter method for isonjob.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to isonjob
     */
    public void setIsonjob(int newVal)
    {
        setIsonjob(new Integer(newVal));
    }

    /**
     * Determines if the isonjob has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIsonjobModified()
    {
        return isonjobIsModified;
    }

    /**
     * Determines if the isonjob has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIsonjobInitialized()
    {
        return isonjobIsInitialized;
    }

    /**
     * Getter method for userno.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.userno</li>
     * <li>column size: 20</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of userno
     */
    public String getUserno(){
        return userno;
    }
    /**
     * Setter method for userno.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to userno
     */
    public void setUserno(String newVal)
    {
        if ((newVal != null && userno != null && (newVal.compareTo(userno) == 0)) ||
            (newVal == null && userno == null && usernoIsInitialized)) {
            return;
        }
        super.setUserno(newVal);
        usernoIsModified = true;
        usernoIsInitialized = true;
    }

    /**
     * Determines if the userno has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUsernoModified()
    {
        return usernoIsModified;
    }

    /**
     * Determines if the userno has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUsernoInitialized()
    {
        return usernoIsInitialized;
    }

    /**
     * Getter method for company.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.company</li>
     * <li>column size: 30</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of company
     */
    public String getCompany(){
        return company;
    }
    /**
     * Setter method for company.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to company
     */
    public void setCompany(String newVal)
    {
        if ((newVal != null && company != null && (newVal.compareTo(company) == 0)) ||
            (newVal == null && company == null && companyIsInitialized)) {
            return;
        }
        super.setCompany(newVal);
        companyIsModified = true;
        companyIsInitialized = true;
    }

    /**
     * Determines if the company has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyModified()
    {
        return companyIsModified;
    }

    /**
     * Determines if the company has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyInitialized()
    {
        return companyIsInitialized;
    }

    /**
     * Getter method for id.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: att_user.id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of id
     */
    public Integer getId(){
        return id;
    }
    /**
     * Setter method for id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(Integer newVal)
    {
        if ((newVal != null && id != null && (newVal.compareTo(id) == 0)) ||
            (newVal == null && id == null && idIsInitialized)) {
            return;
        }
        super.setId(newVal);
        idIsModified = true;
        idIsInitialized = true;
    }

    /**
     * Setter method for id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(int newVal)
    {
        setId(new Integer(newVal));
    }

    /**
     * Determines if the id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdModified()
    {
        return idIsModified;
    }

    /**
     * Determines if the id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdInitialized()
    {
        return idIsInitialized;
    }



    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return grayimageIsModified 		|| colorimageIsModified  		|| permissionIsModified  		|| updatetimeIsModified  		|| graylenIsModified  		|| colorlenIsModified  		|| isonjobIsModified  		|| usernoIsModified  		|| companyIsModified  		|| idIsModified  ;
    }
    
    /**
     * Determines if the {@code column} has been modified.
     * @param column
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(String column){
        if (null == column || "".equals(column)) {
            return false;
        } else if ("grayimage".equalsIgnoreCase(column) || "grayimage".equalsIgnoreCase(column)) {
            return isGrayimageModified();
        } else if ("colorimage".equalsIgnoreCase(column) || "colorimage".equalsIgnoreCase(column)) {
            return isColorimageModified();
        } else if ("permission".equalsIgnoreCase(column) || "permission".equalsIgnoreCase(column)) {
            return isPermissionModified();
        } else if ("updatetime".equalsIgnoreCase(column) || "updatetime".equalsIgnoreCase(column)) {
            return isUpdatetimeModified();
        } else if ("graylen".equalsIgnoreCase(column) || "graylen".equalsIgnoreCase(column)) {
            return isGraylenModified();
        } else if ("colorlen".equalsIgnoreCase(column) || "colorlen".equalsIgnoreCase(column)) {
            return isColorlenModified();
        } else if ("isonjob".equalsIgnoreCase(column) || "isonjob".equalsIgnoreCase(column)) {
            return isIsonjobModified();
        } else if ("userno".equalsIgnoreCase(column) || "userno".equalsIgnoreCase(column)) {
            return isUsernoModified();
        } else if ("company".equalsIgnoreCase(column) || "company".equalsIgnoreCase(column)) {
            return isCompanyModified();
        } else if ("id".equalsIgnoreCase(column) || "id".equalsIgnoreCase(column)) {
            return isIdModified();
        }
        return false;		
    }

    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param column
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(String column){
        if (null == column || "".equals(column)) {
            return false;
        } else if ("grayimage".equalsIgnoreCase(column) || "grayimage".equalsIgnoreCase(column)) {
            return isGrayimageInitialized();
        } else if ("colorimage".equalsIgnoreCase(column) || "colorimage".equalsIgnoreCase(column)) {
            return isColorimageInitialized();
        } else if ("permission".equalsIgnoreCase(column) || "permission".equalsIgnoreCase(column)) {
            return isPermissionInitialized();
        } else if ("updatetime".equalsIgnoreCase(column) || "updatetime".equalsIgnoreCase(column)) {
            return isUpdatetimeInitialized();
        } else if ("graylen".equalsIgnoreCase(column) || "graylen".equalsIgnoreCase(column)) {
            return isGraylenInitialized();
        } else if ("colorlen".equalsIgnoreCase(column) || "colorlen".equalsIgnoreCase(column)) {
            return isColorlenInitialized();
        } else if ("isonjob".equalsIgnoreCase(column) || "isonjob".equalsIgnoreCase(column)) {
            return isIsonjobInitialized();
        } else if ("userno".equalsIgnoreCase(column) || "userno".equalsIgnoreCase(column)) {
            return isUsernoInitialized();
        } else if ("company".equalsIgnoreCase(column) || "company".equalsIgnoreCase(column)) {
            return isCompanyInitialized();
        } else if ("id".equalsIgnoreCase(column) || "id".equalsIgnoreCase(column)) {
            return isIdInitialized();
        }
        return false;		
    }
    
    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        grayimageIsModified = false;
        colorimageIsModified = false;
        permissionIsModified = false;
        updatetimeIsModified = false;
        graylenIsModified = false;
        colorlenIsModified = false;
        isonjobIsModified = false;
        usernoIsModified = false;
        companyIsModified = false;
        idIsModified = false;
    }

    /**
     * set all field to null and reset all modification status
     * @see #resetIsModified() 
     */
    public AttUserBean clean()
    {
        super.clean();
        resetIsModified();
        return this;
    }

}
