// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.dborm.device;
import java.lang.ref.SoftReference;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.Collection;
import java.util.concurrent.Callable;
import java.util.ArrayList;

import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.image.FlImageBean;
import net.gdface.facelog.dborm.image.FlImageManager;
import net.gdface.facelog.dborm.log.FlLogBean;
import net.gdface.facelog.dborm.log.FlLogManager;

/**
 * Handles database calls (save, load, count, etc...) for the fl_device table.
 * @author sql2java
 */
public class FlDeviceManager implements TableManager<FlDeviceBeanBase,FlDeviceBean>
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the id field.
     */
    public static final int ID_ID = 0;

    /**
     * Identify the name field.
     */
    public static final int ID_NAME = 1;

    /**
     * Identify the online field.
     */
    public static final int ID_ONLINE = 2;

    /**
     * Identify the group_id field.
     */
    public static final int ID_GROUP_ID = 3;

    /**
     * Identify the version field.
     */
    public static final int ID_VERSION = 4;

    /**
     * Identify the create_time field.
     */
    public static final int ID_CREATE_TIME = 5;

    /**
     * Identify the update_time field.
     */
    public static final int ID_UPDATE_TIME = 6;

    /**
     * Tablename.
     */
		public static final String TABLE_NAME="fl_device";
    /**
     * Contains all the full fields of the fl_device table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
        "fl_device.id"
        ,"fl_device.name"
        ,"fl_device.online"
        ,"fl_device.group_id"
        ,"fl_device.version"
        ,"fl_device.create_time"
        ,"fl_device.update_time"
    };

    /**
     * Contains all the fields of the fl_device table.
     */
    public static final String[] FIELD_NAMES =
    {
        "id"
        ,"name"
        ,"online"
        ,"group_id"
        ,"version"
        ,"create_time"
        ,"update_time"
    };
   /**
     * Contains all the primarykey fields of the fl_device table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };
    /**
     * Field that contains the comma separated fields of the fl_device table.
     */
    public static final String ALL_FULL_FIELDS = "fl_device.id"
                            + ",fl_device.name"
                            + ",fl_device.online"
                            + ",fl_device.group_id"
                            + ",fl_device.version"
                            + ",fl_device.create_time"
                            + ",fl_device.update_time";

    /**
     * Field that contains the comma separated fields of the fl_device table.
     */
    public static final String ALL_FIELDS = "id"
                            + ",name"
                            + ",online"
                            + ",group_id"
                            + ",version"
                            + ",create_time"
                            + ",update_time";

    public static interface Action{
          void call(FlDeviceBean bean);
          FlDeviceBean getBean();
     }

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }
	
    private static FlDeviceManager singleton = new FlDeviceManager();

    /**
     * Get the FlDeviceManager singleton.
     *
     * @return FlDeviceManager
     */
    public static FlDeviceManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlDeviceBean instance.
     *
     * @return the new FlDeviceBean
     */
    public FlDeviceBean createBean()
    {
        return new FlDeviceBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link FlDeviceBean} from the fl_device using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlDeviceBean or {@code null} if not found
     * @throws DAOException
     */
    //1
    public FlDeviceBean loadByPrimaryKey(Integer id) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + ALL_FIELDS + " FROM fl_device WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            List<FlDeviceBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (0 == pReturn.size()) {
                return null;
            } else {
                return pReturn.get(0);
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Loads a {@link FlDeviceBean} from the fl_device using primary key fields of {@code bean}.
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link FlDeviceBean} with primary key fields
     * @return a unique {@link FlDeviceBean} or {@code null} if not found
     * @throws DAOException
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    //1.2
    public FlDeviceBean loadByPrimaryKey(FlDeviceBeanBase bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey( bean.getId());
    }
    /**
     * Returns true if this fl_device contains row with primary key fields.
     * @author guyadong
     * @param id Integer - PK# 1
     * @throws DAOException
     * @see #loadByPrimaryKey(Integer id)
     */
    //1.3
    public boolean existsPrimaryKey(Integer id) throws DAOException
    {
        return null!=loadByPrimaryKey(id );
    }

    /**
     * Returns true if this fl_device contains row specified by primary key fields of {@link FlDeviceBean}.<br>
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link FlDeviceBean} with primary key fields
     * @return 
     * @throws DAOException
     * @see {@link #loadByPrimaryKey(FlDeviceBeanBase bean)}
     */
    //1.4
    @Override
    public boolean existsPrimaryKey(FlDeviceBeanBase bean) throws DAOException
    {
        return null!=loadByPrimaryKey(bean);
    }
    
    /**
     * Delete row according to its primary keys.
     *
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer id) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            FlDeviceBean bean=createBean();
            bean.setId(id);
            this.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_device WHERE id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
    /**
     * Delete row according to Primary Key fileds of the parameter{@code bean},
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the FlDeviceBean with primary key fields
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #deleteByPrimaryKey(Integer id)}
     */
    //2.1
    public int deleteByPrimaryKey(FlDeviceBeanBase bean) throws DAOException
    {
        return bean==null?0:deleteByPrimaryKey( bean.getId());
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Object[]> IMPORT_METHODS=new java.util.HashMap<String,Object[]>(){
        private static final long serialVersionUID = 1L;
    {        
    put("impFlImagebyDeviceId",new Object[]{"getFlImageBeansByDeviceId","setFlImageBeansByDeviceId",FlImageBean[].class});
    put("impFlLogbyDeviceId",new Object[]{"getFlLogBeansByDeviceId","setFlLogBeansByDeviceId",FlLogBean[].class});
    }} ;
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyDeviceId -> FlImageBean</li>
     *     <li> impFlLogbyDeviceId -> FlLogBean</li>
     * </ul>
     * @param bean the {@link FlDeviceBean} object to use
     * @param fkName valid values: impFlImagebyDeviceId,impFlLogbyDeviceId
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T[] getImportedBeans(FlDeviceBean bean,String fkName)throws DAOException{
        Object[] params = IMPORT_METHODS.get(fkName);
        if(null == params)
            throw new IllegalArgumentException("invalid fkName: " + fkName);
        try {
            return (T[]) this.getClass().getMethod((String)params[0],bean.getClass()).invoke(this,bean);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyDeviceId -> FlImageBean</li>
     *     <li> impFlLogbyDeviceId -> FlLogBean</li>
     * </ul>
     * @param bean the {@link FlDeviceBean} object to use
     * @param fkName valid values: impFlImagebyDeviceId,impFlLogbyDeviceId
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> List<T> getImportedBeansAsList(FlDeviceBean bean,String fkName)throws DAOException{
        Object[] params = IMPORT_METHODS.get(fkName);
        if(null==params)
            throw new IllegalArgumentException("invalid fkName " + fkName);
        try {
            return (List<T>) this.getClass().getMethod((String)params[0]+"AsList",bean.getClass()).invoke(this,bean);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> impFlImagebyDeviceId -> FlImageBean</li>
     *     <li> impFlLogbyDeviceId -> FlLogBean</li>
     * </ul>
     * @param bean the {@link FlDeviceBean} object to use
     * @param importedBeans the FlLogBean array to associate to the {@link FlDeviceBean}
     * @param fkName valid values: impFlImagebyDeviceId,impFlLogbyDeviceId
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T> T[] setImportedBeans(FlDeviceBean bean,T[] importedBeans,String fkName)throws DAOException{
        Object[] params = IMPORT_METHODS.get(fkName);
        if(null==params)
            throw new IllegalArgumentException("invalid fkName " + fkName);
        if(null==bean || null==importedBeans)
            throw new NullPointerException();
        Class<?> resultClass = (Class<?>)params[2];
        if(!resultClass.isAssignableFrom(importedBeans.getClass()) ){
            throw new IllegalArgumentException("the argument 'importedBeans' be invalid type,expect type:" + resultClass.getName());
        }
        try {            
            return (T[]) this.getClass().getMethod((String)params[1],bean.getClass(),resultClass).invoke(this,bean,importedBeans);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyDeviceId -> FlImageBean Collection</li>
     *     <li> impFlLogbyDeviceId -> FlLogBean Collection</li>
     * </ul>
     * @param bean the {@link FlDeviceBean} object to use
     * @param importedBeans the <T> object to associate to the {@link FlDeviceBean}
     * @param fkName valid values: impFlImagebyDeviceId,impFlLogbyDeviceId
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <C extends Collection<?>> C setImportedBeans(FlDeviceBean bean,C importedBeans,String fkName)throws DAOException{
        Object[] params = IMPORT_METHODS.get(fkName);
        if(null==params)
            throw new IllegalArgumentException("invalid fkName " + fkName);
        if(null==bean || null==importedBeans)
            throw new NullPointerException();
        try {            
            return (C) this.getClass().getMethod((String)params[1],bean.getClass(),Object.class).invoke(this,bean,importedBeans);
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {    
            throw new RuntimeException(e);
        } catch (java.lang.reflect.InvocationTargetException e) {
            try{
                throw e.getCause();
            }catch(DAOException e1){
                throw e1;
            }catch(RuntimeException e1){
                throw e1;
            }catch (Throwable e1) {
                throw new RuntimeException(e1);
            } 
        }
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FlImageBean} object from the fl_image.device_id field.<BR>
     * FK_NAME : fl_image_ibfk_3 
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlImageBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlImageBean[] getFlImageBeansByDeviceId(FlDeviceBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlImageBean other = FlImageManager.getInstance().createBean();
        other.setDeviceId(bean.getId());
        return FlImageManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Retrieves the {@link FlImageBean} object from fl_image.device_id field.<BR>
     * FK_NAME:fl_image_ibfk_3
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlImageBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlImageBean> getFlImageBeansByDeviceIdAsList(FlDeviceBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlImageBean other = FlImageManager.getInstance().createBean();
        other.setDeviceId(bean.getId());
        return FlImageManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * set  the {@link FlImageBean} object array associate to FlDeviceBean by the fl_image.device_id field.<BR>
     * FK_NAME : fl_image_ibfk_3 
     * @param bean the referenced {@link FlDeviceBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlImageManager#setReferencedByDeviceId(FlImageBean, FlDeviceBean)
     */
    //3.3 SET IMPORTED
    public FlImageBean[] setFlImageBeansByDeviceId(FlDeviceBean bean , FlImageBean[] importedBeans) throws DAOException
    {
        if(null != bean && null != importedBeans){
            for( FlImageBean importBean : importedBeans ){
                FlImageManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlImageBean} object collection associate to FlDeviceBean by the fl_image.device_id field.<BR>
     * FK_NAME:fl_image_ibfk_3
     * @param bean the referenced {@link FlDeviceBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlImageManager#setReferencedByDeviceId(FlImageBean, FlDeviceBean)
     */
    //3.4 SET IMPORTED
    public <T extends Collection<FlImageBean>> T setFlImageBeansByDeviceId(FlDeviceBean bean , T importedBeans) throws DAOException
    {
        if(null != bean && null != importedBeans){
            for( FlImageBean importBean : importedBeans ){
                FlImageManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Retrieves the {@link FlLogBean} object from the fl_log.device_id field.<BR>
     * FK_NAME : fl_log_ibfk_2 
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlLogBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlLogBean[] getFlLogBeansByDeviceId(FlDeviceBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlLogBean other = FlLogManager.getInstance().createBean();
        other.setDeviceId(bean.getId());
        return FlLogManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Retrieves the {@link FlLogBean} object from fl_log.device_id field.<BR>
     * FK_NAME:fl_log_ibfk_2
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlLogBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlLogBean> getFlLogBeansByDeviceIdAsList(FlDeviceBean bean) throws DAOException
    {
        if(null == bean)return null;
        FlLogBean other = FlLogManager.getInstance().createBean();
        other.setDeviceId(bean.getId());
        return FlLogManager.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * set  the {@link FlLogBean} object array associate to FlDeviceBean by the fl_log.device_id field.<BR>
     * FK_NAME : fl_log_ibfk_2 
     * @param bean the referenced {@link FlDeviceBean}
     * @param importedBeans imported beans from fl_log
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlLogManager#setReferencedByDeviceId(FlLogBean, FlDeviceBean)
     */
    //3.3 SET IMPORTED
    public FlLogBean[] setFlLogBeansByDeviceId(FlDeviceBean bean , FlLogBean[] importedBeans) throws DAOException
    {
        if(null != bean && null != importedBeans){
            for( FlLogBean importBean : importedBeans ){
                FlLogManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlLogBean} object collection associate to FlDeviceBean by the fl_log.device_id field.<BR>
     * FK_NAME:fl_log_ibfk_2
     * @param bean the referenced {@link FlDeviceBean} 
     * @param importedBeans imported beans from fl_log 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlLogManager#setReferencedByDeviceId(FlLogBean, FlDeviceBean)
     */
    //3.4 SET IMPORTED
    public <T extends Collection<FlLogBean>> T setFlLogBeansByDeviceId(FlDeviceBean bean , T importedBeans) throws DAOException
    {
        if(null != bean && null != importedBeans){
            for( FlLogBean importBean : importedBeans ){
                FlLogManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }



    /**
     * Save the FlDeviceBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlDeviceBean} bean to be saved
         * @param impFlImagebyDeviceId the {@link FlImageBean} bean refer to {@link FlDeviceBean} 
     * @param impFlLogbyDeviceId the {@link FlLogBean} bean refer to {@link FlDeviceBean} 
     * @return the inserted or updated {@link FlDeviceBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public FlDeviceBean save(FlDeviceBean bean
        
        , FlImageBean[] impFlImagebyDeviceId , FlLogBean[] impFlLogbyDeviceId ) throws DAOException
    {
        if(null == bean) return null;
        bean = this.save( bean );
        if( null != impFlImagebyDeviceId) {
            for ( FlImageBean imp : impFlImagebyDeviceId ){
                imp.setDeviceId(bean.getId()); 
                imp.setReferencedByDeviceId(bean);
                FlImageManager.getInstance().save( imp );
            }
        }
        if( null != impFlLogbyDeviceId) {
            for ( FlLogBean imp : impFlLogbyDeviceId ){
                imp.setDeviceId(bean.getId()); 
                imp.setReferencedByDeviceId(bean);
                FlLogManager.getInstance().save( imp );
            }
        }
        return bean;
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(FlDeviceBean , FlImageBean[] , FlLogBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public FlDeviceBean saveAsTransaction(final FlDeviceBean bean
        
        ,final FlImageBean[] impFlImagebyDeviceId ,final FlLogBean[] impFlLogbyDeviceId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlDeviceBean>(){
            @Override
            public FlDeviceBean call() throws Exception {
                return save(bean , impFlImagebyDeviceId , impFlLogbyDeviceId );
            }});
    }
    /**
     * Save the FlDeviceBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlDeviceBean} bean to be saved
         * @param impFlImagebyDeviceId the {@link FlImageBean} bean refer to {@link FlDeviceBean} 
     * @param impFlLogbyDeviceId the {@link FlLogBean} bean refer to {@link FlDeviceBean} 
     * @return the inserted or updated {@link FlDeviceBean} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public FlDeviceBean save(FlDeviceBean bean
        
        , Collection<FlImageBean> impFlImagebyDeviceId , Collection<FlLogBean> impFlLogbyDeviceId ) throws DAOException
    {
        if(null == bean) return null;
        bean = this.save( bean );
        if( null != impFlImagebyDeviceId) {
            for ( FlImageBean imp : impFlImagebyDeviceId ){
                imp.setDeviceId(bean.getId()); 
                imp.setReferencedByDeviceId(bean);
                FlImageManager.getInstance().save( imp );
            }
        }
        if( null != impFlLogbyDeviceId) {
            for ( FlLogBean imp : impFlLogbyDeviceId ){
                imp.setDeviceId(bean.getId()); 
                imp.setReferencedByDeviceId(bean);
                FlLogManager.getInstance().save( imp );
            }
        }
        return bean;
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save(FlDeviceBean , Collection , Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public FlDeviceBean saveAsTransaction(final FlDeviceBean bean
        
        ,final  Collection<FlImageBean> impFlImagebyDeviceId ,final  Collection<FlLogBean> impFlLogbyDeviceId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlDeviceBean>(){
            @Override
            public FlDeviceBean call() throws Exception {
                return save(bean , impFlImagebyDeviceId , impFlLogbyDeviceId );
            }});
    }
  
    @Override
    public <T> T getReferencedBean(FlDeviceBean bean,String fkName)throws DAOException{
        throw new UnsupportedOperationException();
    }
    @Override
    public <T> T setReferencedBean(FlDeviceBean bean,T beanToSet,String fkName)throws DAOException{
        throw new UnsupportedOperationException();
    }
     

    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from fl_device.
     *
     * @return an array of FlDeviceManager bean
     * @throws DAOException
     */
    //5
    public FlDeviceBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }
    /**
     * Loads each row from fl_device and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //5-1
    public int loadAll(Action action) throws DAOException
    {
        return this.loadUsingTemplate(null,action);
    }
    /**
     * Loads all the rows from fl_device.
     *
     * @return a list of FlDeviceManager bean
     * @throws DAOException
     */
    //5-2
    public List<FlDeviceBean> loadAllAsList() throws DAOException
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from fl_device, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of FlDeviceManager bean
     * @throws DAOException
     */
    //6
    public FlDeviceBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }
    /**
     *  Loads the given number of rows from fl_device, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //6-1
    public int loadAll(int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows,action);
    }
    /**
     * Loads the given number of rows from fl_device, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlDeviceManager bean
     * @throws DAOException
     */
    //6-2
    public List<FlDeviceBean> loadAllAsList(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of FlDeviceBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //7
    public FlDeviceBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, (int[])null);
    }
    /**
     * Retrieves a list of FlDeviceBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //7
    public List<FlDeviceBean> loadByWhereAsList(String where) throws DAOException
    {
        return this.loadByWhereAsList(where, null);
    }
    /**
     * Retrieves each row of FlDeviceBean given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //7-1
    public int loadByWhere(String where,Action action) throws DAOException
    {
        return this.loadByWhere(where, null,action);
    }
    /**
     * Retrieves an array of FlDeviceBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //8
    public FlDeviceBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of FlDeviceBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //8
    public List<FlDeviceBean> loadByWhereAsList(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }
    /**
     * Retrieves each row of FlDeviceBean given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //8-1
    public int loadByWhere(String where, int[] fieldList,Action action) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1,action);
    }

    /**
     * Retrieves an array of FlDeviceBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //9
    public FlDeviceBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return (FlDeviceBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new FlDeviceBean[0]);
    }
    /**
     * Retrieves each row of  FlDeviceBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //9-1
    public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
    }

    /**
     * Retrieves a list of FlDeviceBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //9-2
    public List<FlDeviceBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByWhereForAction(where,fieldList,startRow,numRows,action);              
        return action.getList();
    }
    /**
     * Retrieves each row of FlDeviceBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //9-3
    public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        String sql=createSqlString(fieldList, where);
        // System.out.println("loadByWhere: " + sql);
        return this.loadBySqlForAction(sql, null, fieldList, startRow, numRows, action);
    }

    /**
     * Deletes all rows from fl_device table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }

    /**
     * Deletes rows from the fl_device table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_device " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the FlDeviceBean bean into the database.
     *
     * @param bean the FlDeviceBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public FlDeviceBean save(FlDeviceBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the FlDeviceBean bean into the database.
     *
     * @param bean the FlDeviceBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public FlDeviceBean insert(FlDeviceBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_device (");

            if (bean.isIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("id");
                _dirtyCount++;
            }

            if (bean.isNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("name");
                _dirtyCount++;
            }

            if (bean.isOnlineModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("online");
                _dirtyCount++;
            }

            if (bean.isGroupIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("group_id");
                _dirtyCount++;
            }

            if (bean.isVersionModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("version");
                _dirtyCount++;
            }

            if (bean.isCreateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("create_time");
                _dirtyCount++;
            }

            if (bean.isUpdateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("update_time");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.isIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the FlDeviceBean bean record in the database according to the changes.
     *
     * @param bean the FlDeviceBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public FlDeviceBean update(FlDeviceBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_device SET ");
            boolean useComma=false;

            if (bean.isIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("id=?");
            }

            if (bean.isNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("name=?");
            }

            if (bean.isOnlineModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("online=?");
            }

            if (bean.isGroupIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("group_id=?");
            }

            if (bean.isVersionModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("version=?");
            }

            if (bean.isCreateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("create_time=?");
            }

            if (bean.isUpdateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("update_time=?");
            }
            sql.append(" WHERE ");
            sql.append("id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of FlDeviceBean beans into the database.
     *
     * @param beans the FlDeviceBean bean table to be saved
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     */
    //15
    public FlDeviceBean[] save(FlDeviceBean[] beans) throws DAOException
    {
        for (FlDeviceBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a collection of FlDeviceBean beans into the database.
     *
     * @param beans the FlDeviceBean bean table to be saved
     * @return the saved FlDeviceBean collection.
     * @throws DAOException
     */
    //15-2
    public <T extends Collection<FlDeviceBean>>T save(T beans) throws DAOException
    {
        for (FlDeviceBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }
    /**
     * Saves an array of FlDeviceBean beans as transaction into the database.
     *
     * @param beans the FlDeviceBean bean table to be saved
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     * @see #save(FlDeviceBean[])
     */
    //15-3
    public FlDeviceBean[] saveAsTransaction(final FlDeviceBean[] beans) throws DAOException {
        return Manager.getInstance().runAsTransaction(new Callable<FlDeviceBean[]>(){
            @Override
            public FlDeviceBean[] call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Saves a list of FlDeviceBean beans as transaction into the database.
     *
     * @param beans the FlDeviceBean bean table to be saved
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     * @see #save(List)
     */
    //15-4
    public <T extends Collection<FlDeviceBean>> T saveAsTransaction(final T beans) throws DAOException {
        return Manager.getInstance().runAsTransaction(new Callable<T>(){
            @Override
            public T call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Insert an array of FlDeviceBean beans into the database.
     *
     * @param beans the FlDeviceBean bean table to be inserted
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     */
    //16
    public FlDeviceBean[] insert(FlDeviceBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Insert a list of FlDeviceBean beans into the database.
     *
     * @param beans the FlDeviceBean bean table to be inserted
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     */
    //16-2
    public <T extends Collection<FlDeviceBean>> T insert(T beans) throws DAOException
    {
        return this.save(beans);
    }
    
    /**
     * Insert an array of FlDeviceBean beans as transaction into the database.
     *
     * @param beans the FlDeviceBean bean table to be inserted
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     * @see #saveAsTransaction(FlDeviceBean[])
     */
    //16-3
    public FlDeviceBean[] insertAsTransaction(FlDeviceBean[] beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Insert a list of FlDeviceBean beans as transaction into the database.
     *
     * @param beans the FlDeviceBean bean table to be inserted
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     * @see #saveAsTransaction(List)
     */
    //16-4
    public <T extends Collection<FlDeviceBean>> T insertAsTransaction(T beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }


    /**
     * Updates an array of FlDeviceBean beans into the database.
     *
     * @param beans the FlDeviceBean bean table to be inserted
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     */
    //17
    public FlDeviceBean[] update(FlDeviceBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates a list of FlDeviceBean beans into the database.
     *
     * @param beans the FlDeviceBean bean table to be inserted
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     */
    //17-2
    public <T extends Collection<FlDeviceBean>> T update(T beans) throws DAOException
    {
        return this.save(beans);
    }
    
    /**
     * Updates an array of FlDeviceBean beans as transaction into the database.
     *
     * @param beans the FlDeviceBean bean table to be inserted
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     * @see #saveAsTransaction(FlDeviceBean[])
     */
    //17-3
    public FlDeviceBean[] updateAsTransaction(FlDeviceBean[] beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Updates a list of FlDeviceBean beans as transaction into the database.
     *
     * @param beans the FlDeviceBean bean table to be inserted
     * @return the saved FlDeviceBean array.
     * @throws DAOException
     * @see #saveAsTransaction(List)
     */
    //17-4
    public <T extends Collection<FlDeviceBean>> T updateAsTransaction(T beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }
    
    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique FlDeviceBean bean from a template one giving a c
     *
     * @param bean the FlDeviceBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public FlDeviceBean loadUniqueUsingTemplate(FlDeviceBeanBase bean) throws DAOException
    {
         FlDeviceBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of FlDeviceBean from a template one.
     *
     * @param bean the FlDeviceBean template to look for
     * @return all the FlDeviceBean matching the template
     * @throws DAOException
     */
    //19
    public FlDeviceBean[] loadUsingTemplate(FlDeviceBeanBase bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the FlDeviceBean template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //19-1
    public int loadUsingTemplate(FlDeviceBeanBase bean,Action action) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1,action);
    }

    /**
     * Loads a list of FlDeviceBean from a template one.
     *
     * @param bean the FlDeviceBean template to look for
     * @return all the FlDeviceBean matching the template
     * @throws DAOException
     */
    //19-2
    public List<FlDeviceBean> loadUsingTemplateAsList(FlDeviceBeanBase bean) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of FlDeviceBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlDeviceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the FlDeviceBean matching the template
     * @throws DAOException
     */
    //20
    public FlDeviceBean[] loadUsingTemplate(FlDeviceBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the FlDeviceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //20-1
    public int loadUsingTemplate(FlDeviceBeanBase bean, int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
    }
    /**
     * Loads a list of FlDeviceBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlDeviceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the FlDeviceBean matching the template
     * @throws DAOException
     */
    //20-2
    public List<FlDeviceBean> loadUsingTemplateAsList(FlDeviceBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of FlDeviceBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlDeviceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the FlDeviceBean matching the template
     * @throws DAOException
     */
    //20-3
    public FlDeviceBean[] loadUsingTemplate(FlDeviceBeanBase bean, int startRow, int numRows, int searchType) throws DAOException
    {
    	return (FlDeviceBean[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new FlDeviceBean[0]);
    }

    /**
     * Loads a list of FlDeviceBean from a template one, given the start row and number of rows.
     *
     * @param bean the FlDeviceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the FlDeviceBean matching the template
     * @throws DAOException
     */
    //20-4
    public List<FlDeviceBean> loadUsingTemplateAsList(FlDeviceBeanBase beanBase, int startRow, int numRows, int searchType) throws DAOException
    {
        ListAction action = new ListAction();
        loadUsingTemplate(beanBase,null,startRow,numRows,searchType, action);
        return (List<FlDeviceBean>) action.getList();
        
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the FlDeviceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //20-5
    public int loadUsingTemplate(FlDeviceBeanBase beanBase, int[] fieldList, int startRow, int numRows,int searchType, Action action) throws DAOException
    {
        FlDeviceBean bean=FlDeviceBeanBase.toFullBean(beanBase);
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSqlString(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
    /**
     * Deletes rows using a FlDeviceBean template.
     *
     * @param bean the FlDeviceBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(FlDeviceBeanBase beanBase) throws DAOException
    {
        FlDeviceBean bean=FlDeviceBeanBase.toFullBean(beanBase);
        if (bean.isIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_device ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            if(_rows>0)
                this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table fl_device.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table fl_device with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_device " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_device with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlDeviceBean bean
     *
     * @param bean the FlDeviceBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(FlDeviceBeanBase bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific FlDeviceBean bean , given the start row and number of rows.
     *
     * @param bean the FlDeviceBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlDeviceBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific FlDeviceBean bean given the start row and number of rows and the search type
     *
     * @param bean the FlDeviceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlDeviceBeanBase beanBase, int startRow, int numRows, int searchType) throws DAOException
    {
        FlDeviceBean bean=FlDeviceBeanBase.toFullBean(beanBase);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_device");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlDeviceBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isIdModified()) {
                _dirtyCount ++;
                if (bean.getId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id = ?");
                }
            }
            if (bean.isNameModified()) {
                _dirtyCount ++;
                if (bean.getName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isOnlineModified()) {
                _dirtyCount ++;
                if (bean.getOnline() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("online IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("online = ?");
                }
            }
            if (bean.isGroupIdModified()) {
                _dirtyCount ++;
                if (bean.getGroupId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("group_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("group_id = ?");
                }
            }
            if (bean.isVersionModified()) {
                _dirtyCount ++;
                if (bean.getVersion() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("version IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("version ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isCreateTimeModified()) {
                _dirtyCount ++;
                if (bean.getCreateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time = ?");
                }
            }
            if (bean.isUpdateTimeModified()) {
                _dirtyCount ++;
                if (bean.getUpdateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("update_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("update_time = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlDeviceBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getId() + "]");
                if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            }
            if (bean.isNameModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getName() + "]");
                        if (bean.getName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getName()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getName() + "%]");
                        if ( bean.getName()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getName() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getName() + "]");
                        if ( bean.getName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getName()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getName() + "%]");
                        if (bean.getName()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isOnlineModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getOnline() + "]");
                if (bean.getOnline() == null) { ps.setNull(++_dirtyCount, Types.BIT); } else { Manager.setBoolean(ps, ++_dirtyCount, bean.getOnline()); }
            }
            if (bean.isGroupIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getGroupId() + "]");
                if (bean.getGroupId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getGroupId()); }
            }
            if (bean.isVersionModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getVersion() + "]");
                        if (bean.getVersion() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getVersion()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getVersion() + "%]");
                        if ( bean.getVersion()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getVersion() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getVersion() + "]");
                        if ( bean.getVersion() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getVersion()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getVersion() + "%]");
                        if (bean.getVersion()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getVersion() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isCreateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCreateTime() + "]");
                if (bean.getCreateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getCreateTime().getTime())); }
            }
            if (bean.isUpdateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUpdateTime() + "]");
                if (bean.getUpdateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getUpdateTime().getTime())); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlDeviceBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //28
    public FlDeviceBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
    	return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlDeviceBean[0]);
    }

    /**
     * decode a resultset in a list of FlDeviceBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //28-1
    public List<FlDeviceBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_device on a FlDeviceBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlDeviceBean bean
     * @throws DAOException
     */
    //29
    public FlDeviceBean decodeRow(ResultSet rs,FlDeviceBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, 1));
            bean.setName(rs.getString(2));
            bean.setOnline(Manager.getBoolean(rs, 3));
            bean.setGroupId(Manager.getInteger(rs, 4));
            bean.setVersion(rs.getString(5));
            bean.setCreateTime(rs.getTimestamp(6));
            bean.setUpdateTime(rs.getTimestamp(7));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_device table on a FlDeviceBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlDeviceBean bean
     * @throws DAOException
     */
    //30
    public FlDeviceBean decodeRow(ResultSet rs, int[] fieldList,FlDeviceBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_ID:
                        ++pos;
                        bean.setId(Manager.getInteger(rs, pos));
                        break;
                    case ID_NAME:
                        ++pos;
                        bean.setName(rs.getString(pos));
                        break;
                    case ID_ONLINE:
                        ++pos;
                        bean.setOnline(Manager.getBoolean(rs, pos));
                        break;
                    case ID_GROUP_ID:
                        ++pos;
                        bean.setGroupId(Manager.getInteger(rs, pos));
                        break;
                    case ID_VERSION:
                        ++pos;
                        bean.setVersion(rs.getString(pos));
                        break;
                    case ID_CREATE_TIME:
                        ++pos;
                        bean.setCreateTime(rs.getTimestamp(pos));
                        break;
                    case ID_UPDATE_TIME:
                        ++pos;
                        bean.setUpdateTime(rs.getTimestamp(pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_device on a FlDeviceBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlDeviceBean bean
     * @throws DAOException
     */
    //31
    public FlDeviceBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlDeviceBean bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, "id"));
            bean.setName(rs.getString("name"));
            bean.setOnline(Manager.getBoolean(rs, "online"));
            bean.setGroupId(Manager.getInteger(rs, "group_id"));
            bean.setVersion(rs.getString("version"));
            bean.setCreateTime(rs.getTimestamp("create_time"));
            bean.setUpdateTime(rs.getTimestamp("update_time"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //32
    public FlDeviceBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //32
    public List<FlDeviceBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //33
    public FlDeviceBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlDeviceBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //33
    public List<FlDeviceBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //34
    public FlDeviceBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlDeviceBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //34-1
    public List<FlDeviceBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private FlDeviceListener listener = null;

    /**
     * Registers a unique FlDeviceListener listener.
     */
    //35
    public void registerListener(TableListener listener)
    {
        this.listener = (FlDeviceListener)listener;
    }

    /**
     * Before the save of the FlDeviceBean bean.
     *
     * @param bean the FlDeviceBean bean to be saved
     */
    //36
    private void beforeInsert(FlDeviceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the FlDeviceBean bean.
     *
     * @param bean the FlDeviceBean bean to be saved
     */
    //37
    private void afterInsert(FlDeviceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the FlDeviceBean bean.
     *
     * @param bean the FlDeviceBean bean to be updated
     */
    //38
    private void beforeUpdate(FlDeviceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the FlDeviceBean bean.
     *
     * @param bean the FlDeviceBean bean to be updated
     */
    //39
    private void afterUpdate(FlDeviceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the FlDeviceBean bean.
     *
     * @param bean the FlDeviceBean bean to be deleted
     */
    private void beforeDelete(FlDeviceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the FlDeviceBean bean.
     *
     * @param bean the FlDeviceBean bean to be deleted
     */
    private void afterDelete(FlDeviceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     * @author guyadong
     */
    //43
    public static boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException 
     */
    public FlDeviceBean[] loadBySql(String sql, Object[] argList, int[] fieldList) throws DAOException {
        return loadBySqlAsList(sql, argList, fieldList).toArray(new FlDeviceBean[0]);
    }
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of FlDeviceBean
     * @throws DAOException
     */
    public List<FlDeviceBean> loadBySqlAsList(String sql, Object[] argList, int[] fieldList) throws DAOException{
        ListAction action = new ListAction();
        loadBySqlForAction(sql,argList,fieldList,1,-1,action);
        return action.getList();
    }
    /**
     * Load each the elements using a SQL statement specifying a list of fields to be retrieved and dealt by action.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    private int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
    private String createSqlString(int[] fieldList,String where){
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS);
        } else{
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; ++i){
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }            
        }
        sql.append(" FROM fl_device ");
        if(null!=where)
            sql.append(where);
        return sql.toString();
    }
    
    class ListAction implements Action {
        final List<FlDeviceBean> list;
        protected ListAction(List<FlDeviceBean> list) {
            if(null==list)
                throw new IllegalArgumentException("list must not be null");
            this.list = list;
        }

        protected ListAction() {
            list=new ArrayList<FlDeviceBean>();
        }

        public List<FlDeviceBean> getList() {
            return list;
        }

        @Override
        public void call(FlDeviceBean bean) {
            list.add(bean);
        }

        @Override
        public FlDeviceBean getBean() {
            return null;
        }
    }
    public static abstract class NoListAction implements Action {
        SoftReference<FlDeviceBean> sf=new SoftReference<FlDeviceBean>(new FlDeviceBean());
        @Override
        public final FlDeviceBean getBean() {
            FlDeviceBean bean = sf.get();
            if(null==bean){
                sf=new SoftReference<FlDeviceBean>(bean=new FlDeviceBean());
            }
            return bean.clean();
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    @Override
    public void runAsTransaction(final Runnable fun) throws DAOException{
        Manager.getInstance().runAsTransaction(fun);
    }

}
