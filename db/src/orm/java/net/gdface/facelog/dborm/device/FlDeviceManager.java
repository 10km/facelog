// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.java.vm
// ______________________________________________________
package net.gdface.facelog.dborm.device;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;

import net.gdface.facelog.dborm.Constant;
import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;
import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.DataRetrievalException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.image.FlImageBean;
import net.gdface.facelog.dborm.image.FlImageManager;
import net.gdface.facelog.dborm.device.FlJunctionDeviceGroupBean;
import net.gdface.facelog.dborm.device.FlJunctionDeviceGroupManager;
import net.gdface.facelog.dborm.log.FlLogBean;
import net.gdface.facelog.dborm.log.FlLogManager;

/**
 * Handles database calls (save, load, count, etc...) for the fl_device table.<br>
 * Remarks: 前端设备基本信息<br>
 * @author sql2java
 */
public class FlDeviceManager extends TableManager.Adapter<FlDeviceBean>
{
    /**
     * Tablename.
     */
    public static final String TABLE_NAME="fl_device";

   /**
     * Contains all the primarykey fields of the fl_device table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    public String getFields() {
        return FL_DEVICE_FIELDS;
    }
    
    public String getFullFields() {
        return FL_DEVICE_FULL_FIELDS;
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }

    private static FlDeviceManager singleton = new FlDeviceManager();
    protected FlDeviceManager(){}
    /**
     * Get the FlDeviceManager singleton.
     *
     * @return FlDeviceManager
     */
    public static FlDeviceManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new FlDeviceBean instance.
     *
     * @return the new FlDeviceBean
     */
    public FlDeviceBean createBean()
    {
        return new FlDeviceBean();
    }
    
    @Override
    protected Class<FlDeviceBean> _beanType(){
        return FlDeviceBean.class;
    }
    
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link FlDeviceBean} from the fl_device using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlDeviceBean or {@code null} if not found or have null argument
     * @throws DAOException
     */
    //1
    public FlDeviceBean loadByPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return null;
        }
        try{
            return loadByPrimaryKeyChecked(id);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    
    /**
     * Loads a {@link FlDeviceBean} from the fl_device using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique FlDeviceBean
     * @throws ObjectRetrievalException if not found
     * @throws DAOException
     */
    //1.1
    @SuppressWarnings("unused")
    public FlDeviceBean loadByPrimaryKeyChecked(Integer id) throws DAOException
    {
        if(null == id){
            throw new NullPointerException();
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT " + FL_DEVICE_FIELDS + " FROM fl_device WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            List<FlDeviceBean> pReturn = this.loadByPreparedStatementAsList(ps);
            if (1 == pReturn.size()) {
                return pReturn.get(0);
            } else {
                throw new ObjectRetrievalException();
            }
        }
        catch(ObjectRetrievalException e)
        {
            throw e;
        }
        catch(SQLException e)
        {
            throw new DataRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //1.2
    @Override
    public FlDeviceBean loadByPrimaryKey(FlDeviceBean bean) throws DAOException
    {
        return bean==null?null:loadByPrimaryKey(bean.getId());
    }
    
    //1.2.2
    @Override
    public FlDeviceBean loadByPrimaryKeyChecked(FlDeviceBean bean) throws DAOException
    {
        if(null == bean)
            throw new NullPointerException();
        return loadByPrimaryKeyChecked(bean.getId());
    }
    
    /**
     * Loads a {@link FlDeviceBean} from the fl_device using primary key fields.
     * @param keys primary keys value:<br> 
     * @return a unique {@link FlDeviceBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    //1.3
    @Override
    public FlDeviceBean loadByPrimaryKey(Object ...keys) throws DAOException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        
        if(null == keys[0])return null;
        return loadByPrimaryKey((Integer)keys[0]);
    }
    //1.3.2
    @Override
    public FlDeviceBean loadByPrimaryKeyChecked(Object ...keys) throws DAOException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        return loadByPrimaryKeyChecked((Integer)keys[0]);
    }
    /**
     * Returns true if this fl_device contains row with primary key fields.
     * @param id Integer - PK# 1
     * @throws DAOException
     */
    //1.4
    @SuppressWarnings("unused")
    public boolean existsPrimaryKey(Integer id) throws DAOException
    {
        if(null == id){
            return false;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try{
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_device WHERE id=?");
            // System.out.println("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (id == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, id); }
            return 1 == this.countByPreparedStatement(ps);
        }catch(SQLException e){
            throw new ObjectRetrievalException(e);
        }finally{
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
    /**
     * Return true if this fl_device contains row with primary key fields.
     * @param bean  
     * @throws DAOException
     * @return false if primary kes has null
     * @see #countUsingTemplate(FlDeviceBean)
     */
    //1.6
    @Override
    public boolean existsByPrimaryKey(FlDeviceBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getId())
            return false;
        long modified = bean.getModified();
        try{
            bean.resetModifiedExceptPrimaryKeys();
            return 1 == countUsingTemplate(bean);
        }finally{
            bean.setModified(modified);
        }
    }
    //1.7
    @Override
    public FlDeviceBean checkDuplicate(FlDeviceBean bean) throws DAOException{
        if(!existsByPrimaryKey(bean))
            throw new ObjectRetrievalException("Duplicate entry ("+ bean.getId() +") for key 'PRIMARY'");
        return bean;
    }
    /**
     * Check duplicated row by primary keys,if row exists throw {@link ObjectRetrievalException}
     * @param id Integer
     * @throws DAOException
     * @see #existsPrimaryKey(Integer id)
     */
    //1.4.1
    public Integer checkDuplicate(Integer id) throws DAOException
    {
        if(existsPrimaryKey(id))
            throw new ObjectRetrievalException("Duplicate entry '"+ id +"' for key 'PRIMARY'");
        return id;
    }    
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     * 
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     * @see {@link #delete(FlDeviceBean)}
     */
    //2
    public int deleteByPrimaryKey(Integer id) throws DAOException
    {
        FlDeviceBean bean=createBean();
        bean.setId(id);
        return this.delete(bean);
    }

    /**
     * Delete row according to primary keys of bean.<br>
     * 
     * @param bean will be deleted ,all keys must not be null
     * @return the number of deleted rows,0 returned if bean is null
     * @throws DAOException
     */
    //2
    @Override
    public int delete(FlDeviceBean bean) throws DAOException
    {
        if(null == bean  || null == bean.getId()){
            return 0;
        }
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            this.listenerContainer.beforeDelete(bean); // listener callback
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_device WHERE id=?");
            // System.out.println("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (bean.getId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getId()); }
            int _rows=ps.executeUpdate();
            if(_rows>0)
                this.listenerContainer.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     * @return the number of deleted rows
     * @see {@link #delete(FlDeviceBean)}
     */   
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys) throws DAOException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        FlDeviceBean bean = createBean();   
        
        if(null != keys[0] && !(keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        bean.setId((Integer)keys[0]);
        return delete(bean);
    }
    
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] importedBeanTypes = new Class<?>[]{FlImageBean.class,FlJunctionDeviceGroupBean.class,FlLogBean.class};

    /**
     * @see #getImportedBeansAsList(FlDeviceBean,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T[] getImportedBeans(FlDeviceBean bean, int ikIndex) throws DAOException {
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(importedBeanTypes[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_DEVICE_IK_FL_IMAGE_DEVICE_ID} -> {@link FlImageBean}</li>
     *     <li> {@link Constant#FL_DEVICE_IK_FL_JUNCTION_DEVICE_GROUP_DEVICE_ID} -> {@link FlJunctionDeviceGroupBean}</li>
     *     <li> {@link Constant#FL_DEVICE_IK_FL_LOG_DEVICE_ID} -> {@link FlLogBean}</li>
     * </ul>
     * @param bean the {@link FlDeviceBean} object to use
     * @param ikIndex valid values: {@link Constant#FL_DEVICE_IK_FL_IMAGE_DEVICE_ID},{@link Constant#FL_DEVICE_IK_FL_JUNCTION_DEVICE_GROUP_DEVICE_ID},{@link Constant#FL_DEVICE_IK_FL_LOG_DEVICE_ID}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> List<T> getImportedBeansAsList(FlDeviceBean bean,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_DEVICE_IK_FL_IMAGE_DEVICE_ID:
            return (List<T>)this.getImageBeansByDeviceIdAsList(bean);
        case FL_DEVICE_IK_FL_JUNCTION_DEVICE_GROUP_DEVICE_ID:
            return (List<T>)this.getJunctionDeviceGroupBeansByDeviceIdAsList(bean);
        case FL_DEVICE_IK_FL_LOG_DEVICE_ID:
            return (List<T>)this.getLogBeansByDeviceIdAsList(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlDeviceBean,int)}
     * @param bean the {@link FlDeviceBean} object to use
     * @param importedBeans the FlLogBean array to associate to the {@link FlDeviceBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlDeviceBean,int)}
     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>> T[] setImportedBeans(FlDeviceBean bean,T[] importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_DEVICE_IK_FL_IMAGE_DEVICE_ID:
            return (T[])setImageBeansByDeviceId(bean,(FlImageBean[])importedBeans);
        case FL_DEVICE_IK_FL_JUNCTION_DEVICE_GROUP_DEVICE_ID:
            return (T[])setJunctionDeviceGroupBeansByDeviceId(bean,(FlJunctionDeviceGroupBean[])importedBeans);
        case FL_DEVICE_IK_FL_LOG_DEVICE_ID:
            return (T[])setLogBeansByDeviceId(bean,(FlLogBean[])importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T> see also {@link #getImportedBeansAsList(FlDeviceBean,int)}
     * @param bean the {@link FlDeviceBean} object to use
     * @param importedBeans the <T> object to associate to the {@link FlDeviceBean}
     * @param ikIndex valid values: see also {@link #getImportedBeansAsList(FlDeviceBean,int)}

     * @return importedBeans always
     * @throws DAOException
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.dborm.BaseBean<T>,C extends java.util.Collection<T>> C setImportedBeans(FlDeviceBean bean,C importedBeans,int ikIndex)throws DAOException{
        switch(ikIndex){
        case FL_DEVICE_IK_FL_IMAGE_DEVICE_ID:
            return (C)setImageBeansByDeviceId(bean,(java.util.Collection<FlImageBean>)importedBeans);
        case FL_DEVICE_IK_FL_JUNCTION_DEVICE_GROUP_DEVICE_ID:
            return (C)setJunctionDeviceGroupBeansByDeviceId(bean,(java.util.Collection<FlJunctionDeviceGroupBean>)importedBeans);
        case FL_DEVICE_IK_FL_LOG_DEVICE_ID:
            return (C)setLogBeansByDeviceId(bean,(java.util.Collection<FlLogBean>)importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
 
    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FlImageBean} object from the fl_image.device_id field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlImageBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlImageBean[] getImageBeansByDeviceId(FlDeviceBean bean) throws DAOException
    {
        return getImageBeansByDeviceIdAsList(bean).toArray(new FlImageBean[0]);
    }
    /**
     * Retrieves the {@link FlImageBean} object from the fl_image.device_id field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param id Integer - PK# 1
     * @return the associated {@link FlImageBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FlImageBean[] getImageBeansByDeviceId(Integer deviceId) throws DAOException
    {
        FlDeviceBean bean = createBean();
        bean.setId(deviceId);
        return getImageBeansByDeviceId(bean);
    }
    /**
     * Retrieves the {@link FlImageBean} object from fl_image.device_id field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlImageBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlImageBean> getImageBeansByDeviceIdAsList(FlDeviceBean bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<FlImageBean>();
        FlImageBean other = FlImageManager.getInstance().createBean();
        other.setDeviceId(bean.getId());
        return FlImageManager.getInstance().loadUsingTemplateAsList(other);
    }
    /**
     * Retrieves the {@link FlImageBean} object from fl_image.device_id field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param id Integer - PK# 1
     * @return the associated {@link FlImageBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public List<FlImageBean> getImageBeansByDeviceIdAsList(Integer deviceId) throws DAOException
    {
         FlDeviceBean bean = createBean();
        bean.setId(deviceId);
        return getImageBeansByDeviceIdAsList(bean);
    }
    /**
     * set  the {@link FlImageBean} object array associate to FlDeviceBean by the fl_image.device_id field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param bean the referenced {@link FlDeviceBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlImageManager#setReferencedByDeviceId(FlImageBean, FlDeviceBean)
     */
    //3.3 SET IMPORTED
    public FlImageBean[] setImageBeansByDeviceId(FlDeviceBean bean , FlImageBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlImageBean importBean : importedBeans ){
                FlImageManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlImageBean} object collection associate to FlDeviceBean by the fl_image.device_id field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param bean the referenced {@link FlDeviceBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlImageManager#setReferencedByDeviceId(FlImageBean, FlDeviceBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlImageBean>> C setImageBeansByDeviceId(FlDeviceBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlImageBean importBean : importedBeans ){
                FlImageManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Retrieves the {@link FlJunctionDeviceGroupBean} object from the fl_junction_device_group.device_id field.<BR>
     * FK_NAME : fl_junction_device_group_ibfk_1 
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlJunctionDeviceGroupBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlJunctionDeviceGroupBean[] getJunctionDeviceGroupBeansByDeviceId(FlDeviceBean bean) throws DAOException
    {
        return getJunctionDeviceGroupBeansByDeviceIdAsList(bean).toArray(new FlJunctionDeviceGroupBean[0]);
    }
    /**
     * Retrieves the {@link FlJunctionDeviceGroupBean} object from the fl_junction_device_group.device_id field.<BR>
     * FK_NAME : fl_junction_device_group_ibfk_1 
     * @param id Integer - PK# 1
     * @return the associated {@link FlJunctionDeviceGroupBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FlJunctionDeviceGroupBean[] getJunctionDeviceGroupBeansByDeviceId(Integer deviceId) throws DAOException
    {
        FlDeviceBean bean = createBean();
        bean.setId(deviceId);
        return getJunctionDeviceGroupBeansByDeviceId(bean);
    }
    /**
     * Retrieves the {@link FlJunctionDeviceGroupBean} object from fl_junction_device_group.device_id field.<BR>
     * FK_NAME:fl_junction_device_group_ibfk_1
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlJunctionDeviceGroupBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlJunctionDeviceGroupBean> getJunctionDeviceGroupBeansByDeviceIdAsList(FlDeviceBean bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<FlJunctionDeviceGroupBean>();
        FlJunctionDeviceGroupBean other = FlJunctionDeviceGroupManager.getInstance().createBean();
        other.setDeviceId(bean.getId());
        return FlJunctionDeviceGroupManager.getInstance().loadUsingTemplateAsList(other);
    }
    /**
     * Retrieves the {@link FlJunctionDeviceGroupBean} object from fl_junction_device_group.device_id field.<BR>
     * FK_NAME:fl_junction_device_group_ibfk_1
     * @param id Integer - PK# 1
     * @return the associated {@link FlJunctionDeviceGroupBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public List<FlJunctionDeviceGroupBean> getJunctionDeviceGroupBeansByDeviceIdAsList(Integer deviceId) throws DAOException
    {
         FlDeviceBean bean = createBean();
        bean.setId(deviceId);
        return getJunctionDeviceGroupBeansByDeviceIdAsList(bean);
    }
    /**
     * set  the {@link FlJunctionDeviceGroupBean} object array associate to FlDeviceBean by the fl_junction_device_group.device_id field.<BR>
     * FK_NAME : fl_junction_device_group_ibfk_1 
     * @param bean the referenced {@link FlDeviceBean}
     * @param importedBeans imported beans from fl_junction_device_group
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlJunctionDeviceGroupManager#setReferencedByDeviceId(FlJunctionDeviceGroupBean, FlDeviceBean)
     */
    //3.3 SET IMPORTED
    public FlJunctionDeviceGroupBean[] setJunctionDeviceGroupBeansByDeviceId(FlDeviceBean bean , FlJunctionDeviceGroupBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlJunctionDeviceGroupBean importBean : importedBeans ){
                FlJunctionDeviceGroupManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlJunctionDeviceGroupBean} object collection associate to FlDeviceBean by the fl_junction_device_group.device_id field.<BR>
     * FK_NAME:fl_junction_device_group_ibfk_1
     * @param bean the referenced {@link FlDeviceBean} 
     * @param importedBeans imported beans from fl_junction_device_group 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlJunctionDeviceGroupManager#setReferencedByDeviceId(FlJunctionDeviceGroupBean, FlDeviceBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlJunctionDeviceGroupBean>> C setJunctionDeviceGroupBeansByDeviceId(FlDeviceBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlJunctionDeviceGroupBean importBean : importedBeans ){
                FlJunctionDeviceGroupManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Retrieves the {@link FlLogBean} object from the fl_log.device_id field.<BR>
     * FK_NAME : fl_log_ibfk_2 
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlLogBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public FlLogBean[] getLogBeansByDeviceId(FlDeviceBean bean) throws DAOException
    {
        return getLogBeansByDeviceIdAsList(bean).toArray(new FlLogBean[0]);
    }
    /**
     * Retrieves the {@link FlLogBean} object from the fl_log.device_id field.<BR>
     * FK_NAME : fl_log_ibfk_2 
     * @param id Integer - PK# 1
     * @return the associated {@link FlLogBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FlLogBean[] getLogBeansByDeviceId(Integer deviceId) throws DAOException
    {
        FlDeviceBean bean = createBean();
        bean.setId(deviceId);
        return getLogBeansByDeviceId(bean);
    }
    /**
     * Retrieves the {@link FlLogBean} object from fl_log.device_id field.<BR>
     * FK_NAME:fl_log_ibfk_2
     * @param bean the {@link FlDeviceBean}
     * @return the associated {@link FlLogBean} beans 
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<FlLogBean> getLogBeansByDeviceIdAsList(FlDeviceBean bean) throws DAOException
    {
        if(null == bean)return new java.util.ArrayList<FlLogBean>();
        FlLogBean other = FlLogManager.getInstance().createBean();
        other.setDeviceId(bean.getId());
        return FlLogManager.getInstance().loadUsingTemplateAsList(other);
    }
    /**
     * Retrieves the {@link FlLogBean} object from fl_log.device_id field.<BR>
     * FK_NAME:fl_log_ibfk_2
     * @param id Integer - PK# 1
     * @return the associated {@link FlLogBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public List<FlLogBean> getLogBeansByDeviceIdAsList(Integer deviceId) throws DAOException
    {
         FlDeviceBean bean = createBean();
        bean.setId(deviceId);
        return getLogBeansByDeviceIdAsList(bean);
    }
    /**
     * set  the {@link FlLogBean} object array associate to FlDeviceBean by the fl_log.device_id field.<BR>
     * FK_NAME : fl_log_ibfk_2 
     * @param bean the referenced {@link FlDeviceBean}
     * @param importedBeans imported beans from fl_log
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlLogManager#setReferencedByDeviceId(FlLogBean, FlDeviceBean)
     */
    //3.3 SET IMPORTED
    public FlLogBean[] setLogBeansByDeviceId(FlDeviceBean bean , FlLogBean[] importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlLogBean importBean : importedBeans ){
                FlLogManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * set  the {@link FlLogBean} object collection associate to FlDeviceBean by the fl_log.device_id field.<BR>
     * FK_NAME:fl_log_ibfk_2
     * @param bean the referenced {@link FlDeviceBean} 
     * @param importedBeans imported beans from fl_log 
     * @return importedBeans always
     * @throws DAOException
     * @see {@link FlLogManager#setReferencedByDeviceId(FlLogBean, FlDeviceBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FlLogBean>> C setLogBeansByDeviceId(FlDeviceBean bean , C importedBeans) throws DAOException
    {
        if(null != importedBeans){
            for( FlLogBean importBean : importedBeans ){
                FlLogManager.getInstance().setReferencedByDeviceId(importBean , bean);
            }
        }
        return importedBeans;
    }

    /**
     * Save the FlDeviceBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlDeviceBean} bean to be saved
         * @param impImageByDeviceId the {@link FlImageBean} beans refer to {@link FlDeviceBean} 
     * @param impJunctiondevicegroupByDeviceId the {@link FlJunctionDeviceGroupBean} beans refer to {@link FlDeviceBean} 
     * @param impLogByDeviceId the {@link FlLogBean} beans refer to {@link FlDeviceBean} 
     * @return the inserted or updated {@link FlDeviceBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public FlDeviceBean save(FlDeviceBean bean
        
        , FlImageBean[] impImageByDeviceId , FlJunctionDeviceGroupBean[] impJunctiondevicegroupByDeviceId , FlLogBean[] impLogByDeviceId ) throws DAOException
    {
        if(null == bean) return null;
        bean = this.save( bean );
        this.setImageBeansByDeviceId(bean,impImageByDeviceId);
        FlImageManager.getInstance().save( impImageByDeviceId );
        this.setJunctionDeviceGroupBeansByDeviceId(bean,impJunctiondevicegroupByDeviceId);
        FlJunctionDeviceGroupManager.getInstance().save( impJunctiondevicegroupByDeviceId );
        this.setLogBeansByDeviceId(bean,impLogByDeviceId);
        FlLogManager.getInstance().save( impLogByDeviceId );
        return bean;
    } 

    /**
     * Transaction version for sync save
     * @see {@link #save(FlDeviceBean , FlImageBean[] , FlJunctionDeviceGroupBean[] , FlLogBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public FlDeviceBean saveAsTransaction(final FlDeviceBean bean
        
        ,final FlImageBean[] impImageByDeviceId ,final FlJunctionDeviceGroupBean[] impJunctiondevicegroupByDeviceId ,final FlLogBean[] impLogByDeviceId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlDeviceBean>(){
            @Override
            public FlDeviceBean call() throws Exception {
                return save(bean , impImageByDeviceId , impJunctiondevicegroupByDeviceId , impLogByDeviceId );
            }});
    }
    /**
     * Save the FlDeviceBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link FlDeviceBean} bean to be saved
         * @param impImageByDeviceId the {@link FlImageBean} bean refer to {@link FlDeviceBean} 
     * @param impJunctiondevicegroupByDeviceId the {@link FlJunctionDeviceGroupBean} bean refer to {@link FlDeviceBean} 
     * @param impLogByDeviceId the {@link FlLogBean} bean refer to {@link FlDeviceBean} 
     * @return the inserted or updated {@link FlDeviceBean} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public FlDeviceBean save(FlDeviceBean bean
        
        , java.util.Collection<FlImageBean> impImageByDeviceId , java.util.Collection<FlJunctionDeviceGroupBean> impJunctiondevicegroupByDeviceId , java.util.Collection<FlLogBean> impLogByDeviceId ) throws DAOException
    {
        if(null == bean) return null;
        bean = this.save( bean );
        this.setImageBeansByDeviceId(bean,impImageByDeviceId);
        FlImageManager.getInstance().save( impImageByDeviceId );
        this.setJunctionDeviceGroupBeansByDeviceId(bean,impJunctiondevicegroupByDeviceId);
        FlJunctionDeviceGroupManager.getInstance().save( impJunctiondevicegroupByDeviceId );
        this.setLogBeansByDeviceId(bean,impLogByDeviceId);
        FlLogManager.getInstance().save( impLogByDeviceId );
        return bean;
    }

    /**
     * Transaction version for sync save
     * @see {@link #save(FlDeviceBean , java.util.Collection , java.util.Collection , java.util.Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public FlDeviceBean saveAsTransaction(final FlDeviceBean bean
        
        ,final  java.util.Collection<FlImageBean> impImageByDeviceId ,final  java.util.Collection<FlJunctionDeviceGroupBean> impJunctiondevicegroupByDeviceId ,final  java.util.Collection<FlLogBean> impLogByDeviceId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<FlDeviceBean>(){
            @Override
            public FlDeviceBean call() throws Exception {
                return save(bean , impImageByDeviceId , impJunctiondevicegroupByDeviceId , impLogByDeviceId );
            }});
    }
    /**
     * Save the FlDeviceBean bean and referenced beans and imported beans (array) into the database.
     *
     * @param bean the {@link FlDeviceBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlDeviceBean , FlImageBean[] , FlJunctionDeviceGroupBean[] , FlLogBean[] )}
     * @return the inserted or updated {@link FlDeviceBean} bean
     * @throws DAOException
     */
    //3.9 SYNC SAVE 
    @Override
    public FlDeviceBean save(FlDeviceBean bean,Object ...args) throws DAOException
    {
        if(null == args)
            save(bean);
        if(args.length > 3)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 3");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof FlImageBean[])){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:FlImageBean[]");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof FlJunctionDeviceGroupBean[])){
            throw new IllegalArgumentException("invalid type for the No.2 dynamic argument,expected type:FlJunctionDeviceGroupBean[]");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof FlLogBean[])){
            throw new IllegalArgumentException("invalid type for the No.3 dynamic argument,expected type:FlLogBean[]");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(FlImageBean[])args[0],(args.length < 2 || null == args[1])?null:(FlJunctionDeviceGroupBean[])args[1],(args.length < 3 || null == args[2])?null:(FlLogBean[])args[2]);
    } 

    /**
     * Save the FlDeviceBean bean and referenced beans and imported beans (collection) into the database.
     *
     * @param bean the {@link FlDeviceBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(FlDeviceBean , java.util.Collection , java.util.Collection , java.util.Collection )}
     * @return the inserted or updated {@link FlDeviceBean} bean
     * @throws DAOException
     */
    //3.10 SYNC SAVE 
    @SuppressWarnings("unchecked")
    @Override
    public FlDeviceBean saveCollection(FlDeviceBean bean,Object ...args) throws DAOException
    {
        if(null == args)
            save(bean);
        if(args.length > 3)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 3");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:java.util.Collection<FlImageBean>");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:java.util.Collection<FlJunctionDeviceGroupBean>");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:java.util.Collection<FlLogBean>");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(java.util.Collection<FlImageBean>)args[0],(args.length < 2 || null == args[1])?null:(java.util.Collection<FlJunctionDeviceGroupBean>)args[1],(args.length < 3 || null == args[2])?null:(java.util.Collection<FlLogBean>)args[2]);
    } 
     

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Deletes rows from the fl_device table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clauses.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    @Override
    public int deleteByWhere(String where) throws DAOException
    {
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action = new DeleteBeanAction(); 
            this.loadByWhere(where,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_device " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    public FlDeviceBean insert(FlDeviceBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.listenerContainer.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_device (");

            if (bean.checkIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("id");
                _dirtyCount++;
            }

            if (bean.checkNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("name");
                _dirtyCount++;
            }

            if (bean.checkGroupIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("group_id");
                _dirtyCount++;
            }

            if (bean.checkVersionModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("version");
                _dirtyCount++;
            }

            if (bean.checkSerialNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("serial_no");
                _dirtyCount++;
            }

            if (bean.checkMacModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("mac");
                _dirtyCount++;
            }

            if (bean.checkCreateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("create_time");
                _dirtyCount++;
            }

            if (bean.checkUpdateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("update_time");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            if (!bean.checkIdModified())
            {
                PreparedStatement ps2 = null;
                ResultSet rs = null;
                try {
                    ps2 = c.prepareStatement("SELECT last_insert_id()");
                    rs = ps2.executeQuery();
                    if(rs.next()) {
                        bean.setId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                } finally {
                    this.getManager().close(ps2, rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.listenerContainer.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //14
    @Override
    public FlDeviceBean update(FlDeviceBean bean) throws DAOException
    {
        // mini checks
        if (null == bean || !bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.listenerContainer.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_device SET ");
            boolean useComma=false;

            if (bean.checkIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("id=?");
            }

            if (bean.checkNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("name=?");
            }

            if (bean.checkGroupIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("group_id=?");
            }

            if (bean.checkVersionModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("version=?");
            }

            if (bean.checkSerialNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("serial_no=?");
            }

            if (bean.checkMacModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("mac=?");
            }

            if (bean.checkCreateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("create_time=?");
            }

            if (bean.checkUpdateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("update_time=?");
            }
            sql.append(" WHERE ");
            sql.append("id=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.listenerContainer.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public FlDeviceBean loadUniqueUsingTemplate(FlDeviceBean bean) throws DAOException
    {
         List<FlDeviceBean> beans = this.loadUsingTemplateAsList(bean);
         switch(beans.size()){
         case 0:
             return null;
         case 1:
             return beans.get(0);
         default:
             throw new ObjectRetrievalException("More than one element !!");
         }
    }
    //18-1
    @Override
    public FlDeviceBean loadUniqueUsingTemplateChecked(FlDeviceBean bean) throws DAOException
    {
         List<FlDeviceBean> beans = this.loadUsingTemplateAsList(bean);
         switch(beans.size()){
         case 0:
             throw new ObjectRetrievalException("Not found element !!");
         case 1:
             return beans.get(0);
         default:
             throw new ObjectRetrievalException("More than one element !!");
         }
    }
    //20-5
    @Override
    public int loadUsingTemplate(FlDeviceBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<FlDeviceBean> action) throws DAOException
    {
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSelectSql(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(FlDeviceBean bean) throws DAOException
    {
        if(bean.checkIdInitialized() && null != bean.getId()){
            return this.deleteByPrimaryKey(bean.getId());
        }
        if( !this.listenerContainer.isEmpty()){
            final DeleteBeanAction action=new DeleteBeanAction(); 
            this.loadUsingTemplate(bean,action);
            return action.getCount();
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_device ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________


    /**
     * Retrieves an unique FlDeviceBean using the mac index.
     * 
     * @param mac the mac column's value filter
     * @return an FlDeviceBean,otherwise null if not found or exists null in input arguments
     * @throws DAOException
     */
    public FlDeviceBean loadByIndexMac(String mac) throws DAOException
    {
        if(null == mac)
            return null;
        try{
            return loadByIndexMacChecked(mac);
        }catch(ObjectRetrievalException e){
            return null;
        }
    }
    /**
     * Retrieves an unique FlDeviceBean using the mac index.
     * 
     * @param mac the mac column's value filter. must not be null
     * @return an FlDeviceBean
     * @throws NullPointerException exists null in input arguments
     * @throws ObjectRetrievalException if not found
     * @throws DAOException
     */
    public FlDeviceBean loadByIndexMacChecked(String mac) throws DAOException
    {
        FlDeviceBean bean = new FlDeviceBean();
        if(null == mac)
            throw new NullPointerException();
        
        bean.setMac(mac);
        
        return loadUniqueUsingTemplateChecked(bean);
    }
    /**
     * Retrieves an unique FlDeviceBean for each mac index.
     *
     * @param indexs index array
     * @return an list of FlDeviceBean
     * @throws DAOException
     */
    public java.util.List<FlDeviceBean> loadByIndexMac(String... indexs)throws DAOException
    {
        if(null == indexs)return new java.util.ArrayList<FlDeviceBean>();
        java.util.ArrayList<FlDeviceBean> list = new java.util.ArrayList<FlDeviceBean>(indexs.length);
        for(int i = 0 ;i< indexs.length;++i){
            list.add(loadByIndexMac(indexs[i]));
        }
        return list;
    }
    /**
     * Retrieves an unique FlDeviceBean for each mac index.
     *
     * @param indexs index array
     * @return an list of FlDeviceBean
     * @throws DAOException
     */
    public java.util.List<FlDeviceBean> loadByIndexMac(java.util.Collection<String> indexs)throws DAOException
    {
        if(null == indexs )return new java.util.ArrayList<FlDeviceBean>();
        java.util.ArrayList<FlDeviceBean> list = new java.util.ArrayList<FlDeviceBean>(indexs.size());
        if(indexs instanceof java.util.List){
            for(String key: indexs){
                list.add(loadByIndexMac(key));
            }
        }else{
            FlDeviceBean bean;
            for(String key: indexs){
                if(null != (bean = loadByIndexMac(key)))
                    list.add(bean);
            }
        }
        return list;
    }
    /**
     * Deletes rows for each mac index.
     *
     * @param indexs index array
     * @return the number of deleted rows
     * @throws DAOException
     */
    public int deleteByIndexMac(String... indexs)throws DAOException
    {
        if(null == indexs)return 0;
        int count = 0;
        for(String index : indexs){
            count += deleteByIndexMac(index);
        }
        return count;
    }
    /**
     * Deletes rows for each mac index.
     *
     * @param indexs index collection
     * @return the number of deleted rows
     * @throws DAOException
     */
    public int deleteByIndexMac(java.util.Collection<String> indexs)throws DAOException
    {
        if(null == indexs)return 0;
        int count = 0;
        for(String index : indexs){
            count += deleteByIndexMac(index);
        }
        return count;
    }
    /**
     * Deletes rows using the mac index.
     *
     * @param mac the mac column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndexMac(String mac) throws DAOException
    {
        FlDeviceBean bean = this.createBean();
        bean.setMac(mac);
        return deleteUsingTemplate(bean);
    }
    

    /**
     * Retrieves an unique FlDeviceBean using the serial_no index.
     * 
     * @param serialNo the serial_no column's value filter
     * @return an FlDeviceBean,otherwise null if not found or exists null in input arguments
     * @throws DAOException
     */
    public FlDeviceBean loadByIndexSerialNo(String serialNo) throws DAOException
    {
        if(null == serialNo)
            return null;
        try{
            return loadByIndexSerialNoChecked(serialNo);
        }catch(ObjectRetrievalException e){
            return null;
        }
    }
    /**
     * Retrieves an unique FlDeviceBean using the serial_no index.
     * 
     * @param serialNo the serial_no column's value filter. must not be null
     * @return an FlDeviceBean
     * @throws NullPointerException exists null in input arguments
     * @throws ObjectRetrievalException if not found
     * @throws DAOException
     */
    public FlDeviceBean loadByIndexSerialNoChecked(String serialNo) throws DAOException
    {
        FlDeviceBean bean = new FlDeviceBean();
        if(null == serialNo)
            throw new NullPointerException();
        
        bean.setSerialNo(serialNo);
        
        return loadUniqueUsingTemplateChecked(bean);
    }
    /**
     * Retrieves an unique FlDeviceBean for each serial_no index.
     *
     * @param indexs index array
     * @return an list of FlDeviceBean
     * @throws DAOException
     */
    public java.util.List<FlDeviceBean> loadByIndexSerialNo(String... indexs)throws DAOException
    {
        if(null == indexs)return new java.util.ArrayList<FlDeviceBean>();
        java.util.ArrayList<FlDeviceBean> list = new java.util.ArrayList<FlDeviceBean>(indexs.length);
        for(int i = 0 ;i< indexs.length;++i){
            list.add(loadByIndexSerialNo(indexs[i]));
        }
        return list;
    }
    /**
     * Retrieves an unique FlDeviceBean for each serial_no index.
     *
     * @param indexs index array
     * @return an list of FlDeviceBean
     * @throws DAOException
     */
    public java.util.List<FlDeviceBean> loadByIndexSerialNo(java.util.Collection<String> indexs)throws DAOException
    {
        if(null == indexs )return new java.util.ArrayList<FlDeviceBean>();
        java.util.ArrayList<FlDeviceBean> list = new java.util.ArrayList<FlDeviceBean>(indexs.size());
        if(indexs instanceof java.util.List){
            for(String key: indexs){
                list.add(loadByIndexSerialNo(key));
            }
        }else{
            FlDeviceBean bean;
            for(String key: indexs){
                if(null != (bean = loadByIndexSerialNo(key)))
                    list.add(bean);
            }
        }
        return list;
    }
    /**
     * Deletes rows for each serial_no index.
     *
     * @param indexs index array
     * @return the number of deleted rows
     * @throws DAOException
     */
    public int deleteByIndexSerialNo(String... indexs)throws DAOException
    {
        if(null == indexs)return 0;
        int count = 0;
        for(String index : indexs){
            count += deleteByIndexSerialNo(index);
        }
        return count;
    }
    /**
     * Deletes rows for each serial_no index.
     *
     * @param indexs index collection
     * @return the number of deleted rows
     * @throws DAOException
     */
    public int deleteByIndexSerialNo(java.util.Collection<String> indexs)throws DAOException
    {
        if(null == indexs)return 0;
        int count = 0;
        for(String index : indexs){
            count += deleteByIndexSerialNo(index);
        }
        return count;
    }
    /**
     * Deletes rows using the serial_no index.
     *
     * @param serialNo the serial_no column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndexSerialNo(String serialNo) throws DAOException
    {
        FlDeviceBean bean = this.createBean();
        bean.setSerialNo(serialNo);
        return deleteUsingTemplate(bean);
    }
    

    /**
     * Retrieves an array of FlDeviceBean using the group_id index.
     *
     * @param groupId the group_id column's value filter.
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    public FlDeviceBean[] loadByIndexGroupId(Integer groupId) throws DAOException
    {
        return (FlDeviceBean[])this.loadByIndexGroupIdAsList(groupId).toArray(new FlDeviceBean[0]);
    }
    
    /**
     * Retrieves a list of FlDeviceBean using the group_id index.
     *
     * @param groupId the group_id column's value filter.
     * @return a list of FlDeviceBean
     * @throws DAOException
     */
    public List<FlDeviceBean> loadByIndexGroupIdAsList(Integer groupId) throws DAOException
    {
        FlDeviceBean bean = this.createBean();
        bean.setGroupId(groupId);
        return loadUsingTemplateAsList(bean);
    }
    /**
     * Deletes rows using the group_id index.
     *
     * @param groupId the group_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndexGroupId(Integer groupId) throws DAOException
    {
        FlDeviceBean bean = this.createBean();
        bean.setGroupId(groupId);
        return deleteUsingTemplate(bean);
    }
    
    
    /**
     * Retrieves a list of FlDeviceBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_DEVICE_INDEX_MAC},{@link Constant#FL_DEVICE_INDEX_SERIAL_NO},{@link Constant#FL_DEVICE_INDEX_GROUP_ID}
     * @param keys key values of index
     * @return a list of FlDeviceBean
     * @throws DAOException
     */
    public List<FlDeviceBean> loadByIndexAsList(int keyIndex,Object ...keys)throws DAOException
    {
        if(null == keys)
            throw new NullPointerException();
        switch(keyIndex){
        case FL_DEVICE_INDEX_MAC:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'mac' column number");
            
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");

            FlDeviceBean bean= this.loadByIndexMac((String)keys[0]);
            return null == bean ? new java.util.ArrayList<FlDeviceBean>() : java.util.Arrays.asList(bean);
        }
        case FL_DEVICE_INDEX_SERIAL_NO:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'serial_no' column number");
            
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");

            FlDeviceBean bean= this.loadByIndexSerialNo((String)keys[0]);
            return null == bean ? new java.util.ArrayList<FlDeviceBean>() : java.util.Arrays.asList(bean);
        }
        case FL_DEVICE_INDEX_GROUP_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'group_id' column number");
            
            if(null != keys[0] && !(keys[0] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");

            return this.loadByIndexGroupIdAsList((Integer)keys[0]);        
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_DEVICE_INDEX_MAC},{@link Constant#FL_DEVICE_INDEX_SERIAL_NO},{@link Constant#FL_DEVICE_INDEX_GROUP_ID}
     * @param keys key values of index
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteByIndex(int keyIndex,Object ...keys)throws DAOException
    {
        if(null == keys)
            throw new NullPointerException();
        switch(keyIndex){
        case FL_DEVICE_INDEX_MAC:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'mac' column number");
            
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByIndexMac((String)keys[0]);
        }
        case FL_DEVICE_INDEX_SERIAL_NO:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'serial_no' column number");
            
            if(null != keys[0] && !(keys[0] instanceof String))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
            return this.deleteByIndexSerialNo((String)keys[0]);
        }
        case FL_DEVICE_INDEX_GROUP_ID:{
            if(keys.length != 1)
                throw new IllegalArgumentException("argument number mismatch with index 'group_id' column number");
            
            if(null != keys[0] && !(keys[0] instanceof Integer))
                throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            return this.deleteByIndexGroupId((Integer)keys[0]);
        }
        default:
            throw new IllegalArgumentException(String.format("invalid keyIndex %d", keyIndex));
        }        
    }

// rTables: fl_junction_device_group
// getForeignKeyFor: device_id

    
    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
    /**
     * Retrieves an array of FlDeviceBean using the relation table FlJunctionDeviceGroup given a FlDeviceBean object.
     *
     * @param bean the FlDeviceBean bean to be used
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //22 MANY TO MANY
    public FlDeviceBean[] loadFlDeviceViaFlJunctionDeviceGroup(FlDeviceBean bean) throws DAOException
    {
         return this.loadFlDeviceViaFlJunctionDeviceGroup(bean, 1, -1);
    }

    /**
     * Retrieves an array of FlDeviceBean using the relation table FlJunctionDeviceGroup given a FlDeviceBean object, specifying the start row and the number of rows.
     *
     * @param bean the FlDeviceBean bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //23 MANY TO MANY
    public FlDeviceBean[] loadFlDeviceViaFlJunctionDeviceGroup(FlDeviceBean bean, int startRow, int numRows) throws DAOException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String sql = " SELECT " + FL_DEVICE_ALL_FIELDS
                         + " FROM fl_device fl_deviceL, fl_junction_device_group fl_junction_device_groupR"
                         + " WHERE "
                         + "     fl_junction_device_groupR.id = ?"
                         + " AND fl_junction_device_groupR.id = fl_deviceL.device_id";
         try
         {
             c = this.getConnection();
             ps = c.prepareStatement(sql,
                                     ResultSet.TYPE_SCROLL_INSENSITIVE,
                                     ResultSet.CONCUR_READ_ONLY);
             if (bean.getDeviceId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getDeviceId()); }
             return FlDeviceManager.getInstance().loadByPreparedStatement(ps, null, startRow, numRows);
         }
         catch (SQLException e)
         {
             throw new DAOException(e.getMessage(), e);
         }
         finally
         {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
         }
    }

    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    //25
    @Override
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_device " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_device with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific FlDeviceBean bean given the search type
     *
     * @param bean the FlDeviceBean template to look for
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(FlDeviceBean bean, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_device");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clauses constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     */
    protected int fillWhere(StringBuilder sqlWhere, FlDeviceBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.checkIdModified()) {
                _dirtyCount ++;
                if (bean.getId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("id = ?");
                }
            }
            if (bean.checkNameModified()) {
                _dirtyCount ++;
                if (bean.getName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkGroupIdModified()) {
                _dirtyCount ++;
                if (bean.getGroupId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("group_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("group_id = ?");
                }
            }
            if (bean.checkVersionModified()) {
                _dirtyCount ++;
                if (bean.getVersion() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("version IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("version ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkSerialNoModified()) {
                _dirtyCount ++;
                if (bean.getSerialNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("serial_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("serial_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkMacModified()) {
                _dirtyCount ++;
                if (bean.getMac() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mac IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("mac ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.checkCreateTimeModified()) {
                _dirtyCount ++;
                if (bean.getCreateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("create_time = ?");
                }
            }
            if (bean.checkUpdateTimeModified()) {
                _dirtyCount ++;
                if (bean.getUpdateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("update_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("update_time = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clauses
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clauses returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, FlDeviceBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.checkIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getId() + "]");
                if (bean.getId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getId()); }
            }
            if (bean.checkNameModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getName() + "]");
                        if (bean.getName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getName()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getName() + "%]");
                        if ( bean.getName()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getName() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getName() + "]");
                        if ( bean.getName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getName()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getName() + "%]");
                        if (bean.getName()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkGroupIdModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getGroupId() + "]");
                if (bean.getGroupId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getGroupId()); }
            }
            if (bean.checkVersionModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getVersion() + "]");
                        if (bean.getVersion() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getVersion()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getVersion() + "%]");
                        if ( bean.getVersion()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getVersion() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getVersion() + "]");
                        if ( bean.getVersion() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getVersion()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getVersion() + "%]");
                        if (bean.getVersion()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getVersion() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkSerialNoModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getSerialNo() + "]");
                        if (bean.getSerialNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getSerialNo()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getSerialNo() + "%]");
                        if ( bean.getSerialNo()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getSerialNo() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getSerialNo() + "]");
                        if ( bean.getSerialNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getSerialNo()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getSerialNo() + "%]");
                        if (bean.getSerialNo()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getSerialNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkMacModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMac() + "]");
                        if (bean.getMac() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMac()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMac() + "%]");
                        if ( bean.getMac()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMac() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMac() + "]");
                        if ( bean.getMac() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMac()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMac() + "%]");
                        if (bean.getMac()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMac() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.checkCreateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getCreateTime() + "]");
                if (bean.getCreateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getCreateTime().getTime())); }
            }
            if (bean.checkUpdateTimeModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getUpdateTime() + "]");
                if (bean.getUpdateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, new java.sql.Timestamp(bean.getUpdateTime().getTime())); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of FlDeviceBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //28
    public FlDeviceBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new FlDeviceBean[0]);
    }

    /**
     * decode a resultset in a list of FlDeviceBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting FlDeviceBean table
     * @throws DAOException
     */
    //28-1
    public List<FlDeviceBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action<FlDeviceBean> action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_device on a FlDeviceBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlDeviceBean bean
     * @throws DAOException
     */
    //29
    public FlDeviceBean decodeRow(ResultSet rs,FlDeviceBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, 1));
            bean.setName(rs.getString(2));
            bean.setGroupId(Manager.getInteger(rs, 3));
            bean.setVersion(rs.getString(4));
            bean.setSerialNo(rs.getString(5));
            bean.setMac(rs.getString(6));
            bean.setCreateTime(rs.getTimestamp(7));
            bean.setUpdateTime(rs.getTimestamp(8));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_device table on a FlDeviceBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting FlDeviceBean bean
     * @throws DAOException
     */
    //30
    public FlDeviceBean decodeRow(ResultSet rs, int[] fieldList,FlDeviceBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case FL_DEVICE_ID_ID:
                        ++pos;
                        bean.setId(Manager.getInteger(rs, pos));
                        break;
                    case FL_DEVICE_ID_NAME:
                        ++pos;
                        bean.setName(rs.getString(pos));
                        break;
                    case FL_DEVICE_ID_GROUP_ID:
                        ++pos;
                        bean.setGroupId(Manager.getInteger(rs, pos));
                        break;
                    case FL_DEVICE_ID_VERSION:
                        ++pos;
                        bean.setVersion(rs.getString(pos));
                        break;
                    case FL_DEVICE_ID_SERIAL_NO:
                        ++pos;
                        bean.setSerialNo(rs.getString(pos));
                        break;
                    case FL_DEVICE_ID_MAC:
                        ++pos;
                        bean.setMac(rs.getString(pos));
                        break;
                    case FL_DEVICE_ID_CREATE_TIME:
                        ++pos;
                        bean.setCreateTime(rs.getTimestamp(pos));
                        break;
                    case FL_DEVICE_ID_UPDATE_TIME:
                        ++pos;
                        bean.setUpdateTime(rs.getTimestamp(pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_device on a FlDeviceBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting FlDeviceBean bean
     * @throws DAOException
     */
    //31
    public FlDeviceBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        FlDeviceBean bean = this.createBean();
        try
        {
            bean.setId(Manager.getInteger(rs, "id"));
            bean.setName(rs.getString("name"));
            bean.setGroupId(Manager.getInteger(rs, "group_id"));
            bean.setVersion(rs.getString("version"));
            bean.setSerialNo(rs.getString("serial_no"));
            bean.setMac(rs.getString("mac"));
            bean.setCreateTime(rs.getTimestamp("create_time"));
            bean.setUpdateTime(rs.getTimestamp("update_time"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //32
    public FlDeviceBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //32
    public List<FlDeviceBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //33
    public FlDeviceBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new FlDeviceBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //33
    public List<FlDeviceBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //34
    public FlDeviceBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new FlDeviceBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of FlDeviceBean
     * @throws DAOException
     */
    //34-1
    public List<FlDeviceBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action<FlDeviceBean> action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    private final TableListener.ListenerContainer<FlDeviceBean> listenerContainer = new TableListener.ListenerContainer<FlDeviceBean>();
    //35
    @Override
    public TableListener<FlDeviceBean> registerListener(TableListener<FlDeviceBean> listener)
    {
        this.listenerContainer.add(listener);
        return listener;
    }

    /**
     * remove listener.
     */
    //36
    @Override
    public void unregisterListener(TableListener<FlDeviceBean> listener)
    {
        this.listenerContainer.remove(listener);
    }

    //37
    @Override
    public void fire(TableListener.Event event, FlDeviceBean bean) throws DAOException{
        if(null == event)
            throw new NullPointerException();
        event.fire(listenerContainer, bean);
    }
    
    //37-1
    @Override
    public void fire(int event, FlDeviceBean bean) throws DAOException{
        try{
            fire(TableListener.Event.values()[event],bean);
        }catch(ArrayIndexOutOfBoundsException e){
            throw new IllegalArgumentException("invalid event id " + event);
        }
    }

    /**
     * bind foreign key listener to foreign table: <br>
     */
    //37-2
    public void bindForeignKeyListenerForDeleteRule(){
        
    }
    /**
     * unbind foreign key listener from all of foreign tables <br>
     * @see #bindForeignKeyListenerForDeleteRule()
     */
    //37-3
    public void unbindForeignKeyListenerForDeleteRule(){
        
    }
    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }

    //43
    @Override
    public boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    @Override    
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<FlDeviceBean> action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
   
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    class DeleteBeanAction extends Action.Adapter<FlDeviceBean>{
        private final AtomicInteger count=new AtomicInteger(0);
        @Override
        public void call(FlDeviceBean bean) throws DAOException {
                FlDeviceManager.this.delete(bean);
                count.incrementAndGet();
        }
        int getCount(){
            return count.get();
        }
    }
    /**
     * return a primary key list from {@link FlDeviceBean} array
     * @param array
     */
    //45
    public List<Integer> toPrimaryKeyList(FlDeviceBean... array){        
        if(null == array)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(array.length);
        for(FlDeviceBean bean:array){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
    /**
     * return a primary key list from {@link FlDeviceBean} collection
     * @param array
     */
    //46
    public List<Integer> toPrimaryKeyList(java.util.Collection<FlDeviceBean> collection){        
        if(null == collection)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(collection.size());
        for(FlDeviceBean bean:collection){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
}
