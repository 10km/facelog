// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.mysql;

import java.util.concurrent.TimeUnit;
import net.gdface.facelog.db.BaseBean;
import net.gdface.facelog.db.ITableCache;
import net.gdface.facelog.db.TableLoadCaching;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.StoreBean;

/**
 * all cache implemention class for table 
 * @author guyadong
 *
 */
public abstract class Cache<K ,B extends BaseBean<B>> implements ITableCache<K, B> {
    /**
     * cache manager for DeviceBean base {@link com.google.common.cache.LoadingCache}<br>
     * primary key (fl_device.id) is key
     * @author guyadong
     *
     */
    public static class DeviceCache extends TableLoadCaching<Integer, DeviceBean> {
        DeviceManager manager = DeviceManager.getInstance();
        public DeviceCache() {
            super();
        }

        public DeviceCache(long maximumSize, long duration, TimeUnit unit) {
            super(maximumSize, duration, unit);
        }

        public DeviceCache(long maximumSize, long durationMinutes) {
            super(maximumSize, durationMinutes);
        }

        public DeviceCache(long maximumSize) {
            super(maximumSize);
        }

        @Override
        public void registerListener() {
            manager.registerListener(tableListener);
        }
    
        @Override
        public void unregisterListener() {
            manager.unregisterListener(tableListener);        
        }
    
        @Override
        protected Integer returnKey(DeviceBean bean) {
            return bean.getId();
        }
    
        @Override
        protected DeviceBean loadfromDatabase(Integer key) {
            return manager.loadByPrimaryKey(key);
        }
    
    }
    /**
     * cache manager for FaceBean base {@link com.google.common.cache.LoadingCache}<br>
     * primary key (fl_face.id) is key
     * @author guyadong
     *
     */
    public static class FaceCache extends TableLoadCaching<Integer, FaceBean> {
        FaceManager manager = FaceManager.getInstance();
        public FaceCache() {
            super();
        }

        public FaceCache(long maximumSize, long duration, TimeUnit unit) {
            super(maximumSize, duration, unit);
        }

        public FaceCache(long maximumSize, long durationMinutes) {
            super(maximumSize, durationMinutes);
        }

        public FaceCache(long maximumSize) {
            super(maximumSize);
        }

        @Override
        public void registerListener() {
            manager.registerListener(tableListener);
        }
    
        @Override
        public void unregisterListener() {
            manager.unregisterListener(tableListener);        
        }
    
        @Override
        protected Integer returnKey(FaceBean bean) {
            return bean.getId();
        }
    
        @Override
        protected FaceBean loadfromDatabase(Integer key) {
            return manager.loadByPrimaryKey(key);
        }
    
    }
    /**
     * cache manager for FeatureBean base {@link com.google.common.cache.LoadingCache}<br>
     * primary key (fl_feature.md5) is key
     * @author guyadong
     *
     */
    public static class FeatureCache extends TableLoadCaching<String, FeatureBean> {
        FeatureManager manager = FeatureManager.getInstance();
        public FeatureCache() {
            super();
        }

        public FeatureCache(long maximumSize, long duration, TimeUnit unit) {
            super(maximumSize, duration, unit);
        }

        public FeatureCache(long maximumSize, long durationMinutes) {
            super(maximumSize, durationMinutes);
        }

        public FeatureCache(long maximumSize) {
            super(maximumSize);
        }

        @Override
        public void registerListener() {
            manager.registerListener(tableListener);
        }
    
        @Override
        public void unregisterListener() {
            manager.unregisterListener(tableListener);        
        }
    
        @Override
        protected String returnKey(FeatureBean bean) {
            return bean.getMd5();
        }
    
        @Override
        protected FeatureBean loadfromDatabase(String key) {
            return manager.loadByPrimaryKey(key);
        }
    
    }
    /**
     * cache manager for ImageBean base {@link com.google.common.cache.LoadingCache}<br>
     * primary key (fl_image.md5) is key
     * @author guyadong
     *
     */
    public static class ImageCache extends TableLoadCaching<String, ImageBean> {
        ImageManager manager = ImageManager.getInstance();
        public ImageCache() {
            super();
        }

        public ImageCache(long maximumSize, long duration, TimeUnit unit) {
            super(maximumSize, duration, unit);
        }

        public ImageCache(long maximumSize, long durationMinutes) {
            super(maximumSize, durationMinutes);
        }

        public ImageCache(long maximumSize) {
            super(maximumSize);
        }

        @Override
        public void registerListener() {
            manager.registerListener(tableListener);
        }
    
        @Override
        public void unregisterListener() {
            manager.unregisterListener(tableListener);        
        }
    
        @Override
        protected String returnKey(ImageBean bean) {
            return bean.getMd5();
        }
    
        @Override
        protected ImageBean loadfromDatabase(String key) {
            return manager.loadByPrimaryKey(key);
        }
    
    }
    /**
     * cache manager for LogBean base {@link com.google.common.cache.LoadingCache}<br>
     * primary key (fl_log.id) is key
     * @author guyadong
     *
     */
    public static class LogCache extends TableLoadCaching<Integer, LogBean> {
        LogManager manager = LogManager.getInstance();
        public LogCache() {
            super();
        }

        public LogCache(long maximumSize, long duration, TimeUnit unit) {
            super(maximumSize, duration, unit);
        }

        public LogCache(long maximumSize, long durationMinutes) {
            super(maximumSize, durationMinutes);
        }

        public LogCache(long maximumSize) {
            super(maximumSize);
        }

        @Override
        public void registerListener() {
            manager.registerListener(tableListener);
        }
    
        @Override
        public void unregisterListener() {
            manager.unregisterListener(tableListener);        
        }
    
        @Override
        protected Integer returnKey(LogBean bean) {
            return bean.getId();
        }
    
        @Override
        protected LogBean loadfromDatabase(Integer key) {
            return manager.loadByPrimaryKey(key);
        }
    
    }
    /**
     * cache manager for PersonBean base {@link com.google.common.cache.LoadingCache}<br>
     * primary key (fl_person.id) is key
     * @author guyadong
     *
     */
    public static class PersonCache extends TableLoadCaching<Integer, PersonBean> {
        PersonManager manager = PersonManager.getInstance();
        public PersonCache() {
            super();
        }

        public PersonCache(long maximumSize, long duration, TimeUnit unit) {
            super(maximumSize, duration, unit);
        }

        public PersonCache(long maximumSize, long durationMinutes) {
            super(maximumSize, durationMinutes);
        }

        public PersonCache(long maximumSize) {
            super(maximumSize);
        }

        @Override
        public void registerListener() {
            manager.registerListener(tableListener);
        }
    
        @Override
        public void unregisterListener() {
            manager.unregisterListener(tableListener);        
        }
    
        @Override
        protected Integer returnKey(PersonBean bean) {
            return bean.getId();
        }
    
        @Override
        protected PersonBean loadfromDatabase(Integer key) {
            return manager.loadByPrimaryKey(key);
        }
    
    }
    /**
     * cache manager for StoreBean base {@link com.google.common.cache.LoadingCache}<br>
     * primary key (fl_store.md5) is key
     * @author guyadong
     *
     */
    public static class StoreCache extends TableLoadCaching<String, StoreBean> {
        StoreManager manager = StoreManager.getInstance();
        public StoreCache() {
            super();
        }

        public StoreCache(long maximumSize, long duration, TimeUnit unit) {
            super(maximumSize, duration, unit);
        }

        public StoreCache(long maximumSize, long durationMinutes) {
            super(maximumSize, durationMinutes);
        }

        public StoreCache(long maximumSize) {
            super(maximumSize);
        }

        @Override
        public void registerListener() {
            manager.registerListener(tableListener);
        }
    
        @Override
        public void unregisterListener() {
            manager.unregisterListener(tableListener);        
        }
    
        @Override
        protected String returnKey(StoreBean bean) {
            return bean.getMd5();
        }
    
        @Override
        protected StoreBean loadfromDatabase(String key) {
            return manager.loadByPrimaryKey(key);
        }
    
    }
    // Table fl_log_light haven't primary key
}
