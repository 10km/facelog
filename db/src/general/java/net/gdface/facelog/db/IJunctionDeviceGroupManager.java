// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.interface.java.vm
// ______________________________________________________
package net.gdface.facelog.db;
import net.gdface.facelog.db.exception.ObjectRetrievalException;
import net.gdface.facelog.db.exception.WrapDAOException;

/**
 * Interface to handle database calls (save, load, count, etc...) for the fl_junction_device_group table.<br>
 * Remarks: 设备组信息关联表
 * @author guyadong
 */
public interface IJunctionDeviceGroupManager extends TableManager<JunctionDeviceGroupBean>
{  
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link JunctionDeviceGroupBean} from the fl_junction_device_group using primary key fields.
     *
     * @param deviceId Integer - PK# 1
     * @param groupId Integer - PK# 2
     * @return a unique JunctionDeviceGroupBean or {@code null} if not found
     */
    //1
    public JunctionDeviceGroupBean loadByPrimaryKey(Integer deviceId,Integer groupId);

    /**
     * Loads a {@link JunctionDeviceGroupBean} from the fl_junction_device_group using primary key fields.
     *
     * @param deviceId Integer - PK# 1
     * @param groupId Integer - PK# 2
     * @return a unique JunctionDeviceGroupBean
     * @throws ObjectRetrievalException if not found
     */
    //1.1
    public JunctionDeviceGroupBean loadByPrimaryKeyChecked(Integer deviceId,Integer groupId) throws ObjectRetrievalException;
    
    /**
     * Returns true if this fl_junction_device_group contains row with primary key fields.
     * @param deviceId Integer - PK# 1
     * @param groupId Integer - PK# 2
     * @see #loadByPrimaryKey($keys)
     */
    //1.4
    public boolean existsPrimaryKey(Integer deviceId,Integer groupId);
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     *
     * @param deviceId Integer - PK# 1
     * @param groupId Integer - PK# 2
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(Integer deviceId,Integer groupId);
    /**
     * Delete beans.<br>
     *
     * @param beans JunctionDeviceGroupBean collection wille be deleted
     * @return the number of deleted rows
     */
    //2.4
    public int delete(JunctionDeviceGroupBean... beans);
    /**
     * Delete beans.<br>
     *
     * @param beans JunctionDeviceGroupBean collection wille be deleted
     * @return the number of deleted rows
     */
    //2.5
    public int delete(java.util.Collection<JunctionDeviceGroupBean> beans);
 
    /**
     * Save the JunctionDeviceGroupBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link JunctionDeviceGroupBean} bean to be saved
     * @param refDeviceByDeviceId the {@link DeviceBean} bean referenced by {@link JunctionDeviceGroupBean} 
     * @param refDevicegroupByGroupId the {@link DeviceGroupBean} bean referenced by {@link JunctionDeviceGroupBean} 
         * @return the inserted or updated {@link JunctionDeviceGroupBean} bean
     */
    //3.5 SYNC SAVE 
    public JunctionDeviceGroupBean save(JunctionDeviceGroupBean bean
        , DeviceBean refDeviceByDeviceId , DeviceGroupBean refDevicegroupByGroupId 
        );
    /**
     * Transaction version for sync save
     * @see {@link #save(JunctionDeviceGroupBean , DeviceBean , DeviceGroupBean )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public JunctionDeviceGroupBean saveAsTransaction(final JunctionDeviceGroupBean bean
        ,final DeviceBean refDeviceByDeviceId ,final DeviceGroupBean refDevicegroupByGroupId 
        );
      //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link DeviceBean} object referenced by {@link JunctionDeviceGroupBean#getDeviceId}() field.<br>
     * FK_NAME : fl_junction_device_group_ibfk_1
     * @param bean the {@link JunctionDeviceGroupBean}
     * @return the associated {@link DeviceBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //5.1 GET REFERENCED VALUE
    public DeviceBean getReferencedByDeviceId(JunctionDeviceGroupBean bean);

    /**
     * Associates the {@link JunctionDeviceGroupBean} object to the {@link DeviceBean} object by {@link JunctionDeviceGroupBean#getDeviceId}() field.
     *
     * @param bean the {@link JunctionDeviceGroupBean} object to use
     * @param beanToSet the {@link DeviceBean} object to associate to the {@link JunctionDeviceGroupBean}
     * @return always beanToSet saved
     * @throws WrapDAOException
     */
    //5.2 SET REFERENCED 
    public DeviceBean setReferencedByDeviceId(JunctionDeviceGroupBean bean, DeviceBean beanToSet);
    /**
     * Retrieves the {@link DeviceGroupBean} object referenced by {@link JunctionDeviceGroupBean#getGroupId}() field.<br>
     * FK_NAME : fl_junction_device_group_ibfk_2
     * @param bean the {@link JunctionDeviceGroupBean}
     * @return the associated {@link DeviceGroupBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //5.1 GET REFERENCED VALUE
    public DeviceGroupBean getReferencedByGroupId(JunctionDeviceGroupBean bean);

    /**
     * Associates the {@link JunctionDeviceGroupBean} object to the {@link DeviceGroupBean} object by {@link JunctionDeviceGroupBean#getGroupId}() field.
     *
     * @param bean the {@link JunctionDeviceGroupBean} object to use
     * @param beanToSet the {@link DeviceGroupBean} object to associate to the {@link JunctionDeviceGroupBean}
     * @return always beanToSet saved
     * @throws WrapDAOException
     */
    //5.2 SET REFERENCED 
    public DeviceGroupBean setReferencedByGroupId(JunctionDeviceGroupBean bean, DeviceGroupBean beanToSet);

}
