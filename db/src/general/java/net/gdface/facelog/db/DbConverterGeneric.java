// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;

import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.LogLightBean;
/**
 * generic type converter of {@link IDbConverter} implementation<br>
 * usage:<pre>new DbConverterGeneric&lt;Model1,Model2,Model3,Model4,Model5,Model6,Model7&gt;(){};</pre>
 * @author guyadong
 *
 * @param <N_DEVICE> native type for fl_device
 * @param <N_FACE> native type for fl_face
 * @param <N_IMAGE> native type for fl_image
 * @param <N_LOG> native type for fl_log
 * @param <N_PERSON> native type for fl_person
 * @param <N_STORE> native type for fl_store
 * @param <N_LOGLIGHT> native type for fl_log_light
 *
 */
public abstract class DbConverterGeneric<N_DEVICE,N_FACE,N_IMAGE,N_LOG,N_PERSON,N_STORE,N_LOGLIGHT> 
    implements IDbConverter<N_DEVICE,N_FACE,N_IMAGE,N_LOG,N_PERSON,N_STORE,N_LOGLIGHT> {
    private final IBeanConverter<DeviceBean,N_DEVICE> converterDeviceBean;
    private final IBeanConverter<FaceBean,N_FACE> converterFaceBean;
    private final IBeanConverter<ImageBean,N_IMAGE> converterImageBean;
    private final IBeanConverter<LogBean,N_LOG> converterLogBean;
    private final IBeanConverter<PersonBean,N_PERSON> converterPersonBean;
    private final IBeanConverter<StoreBean,N_STORE> converterStoreBean;
    private final IBeanConverter<LogLightBean,N_LOGLIGHT> converterLogLightBean;
    private static Class<?> getRawClass(Type type){
        if(type instanceof Class<?>){
            return (Class<?>) type;
        } else if(type instanceof ParameterizedType){
            return getRawClass(((ParameterizedType) type).getRawType());
        } else{
            throw new IllegalArgumentException("invalid type");
        }
    }
    @SuppressWarnings("unchecked")
    public DbConverterGeneric(){
        Type[] typeArguments = ((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments();
        this.converterDeviceBean = new BeanConverterUtils.DeviceBeanConverter<N_DEVICE>(DeviceBean.class,
            (Class<N_DEVICE>)getRawClass(typeArguments[0]));            
        this.converterFaceBean = new BeanConverterUtils.FaceBeanConverter<N_FACE>(FaceBean.class,
            (Class<N_FACE>)getRawClass(typeArguments[1]));            
        this.converterImageBean = new BeanConverterUtils.ImageBeanConverter<N_IMAGE>(ImageBean.class,
            (Class<N_IMAGE>)getRawClass(typeArguments[2]));            
        this.converterLogBean = new BeanConverterUtils.LogBeanConverter<N_LOG>(LogBean.class,
            (Class<N_LOG>)getRawClass(typeArguments[3]));            
        this.converterPersonBean = new BeanConverterUtils.PersonBeanConverter<N_PERSON>(PersonBean.class,
            (Class<N_PERSON>)getRawClass(typeArguments[4]));            
        this.converterStoreBean = new BeanConverterUtils.StoreBeanConverter<N_STORE>(StoreBean.class,
            (Class<N_STORE>)getRawClass(typeArguments[5]));            
        this.converterLogLightBean = new BeanConverterUtils.LogLightBeanConverter<N_LOGLIGHT>(LogLightBean.class,
            (Class<N_LOGLIGHT>)getRawClass(typeArguments[6]));            
    }
    @Override
    public <L,R>IBeanConverter<L,R>getBeanConverter(Class<L> lClass,Class<R> rClass){
        throw new UnsupportedOperationException();
    }
    
    @Override
    public <L,R>void setBeanConverter(Class<L> lClass,Class<R> rClass,IBeanConverter<L,R>converter){
        throw new UnsupportedOperationException();
    }

    @Override
    public IBeanConverter<DeviceBean, N_DEVICE> getDeviceBeanConverter() {
        return converterDeviceBean;
    }
    @Override
    public IBeanConverter<FaceBean, N_FACE> getFaceBeanConverter() {
        return converterFaceBean;
    }
    @Override
    public IBeanConverter<ImageBean, N_IMAGE> getImageBeanConverter() {
        return converterImageBean;
    }
    @Override
    public IBeanConverter<LogBean, N_LOG> getLogBeanConverter() {
        return converterLogBean;
    }
    @Override
    public IBeanConverter<PersonBean, N_PERSON> getPersonBeanConverter() {
        return converterPersonBean;
    }
    @Override
    public IBeanConverter<StoreBean, N_STORE> getStoreBeanConverter() {
        return converterStoreBean;
    }
    @Override
    public IBeanConverter<LogLightBean, N_LOGLIGHT> getLogLightBeanConverter() {
        return converterLogLightBean;
    }
}
