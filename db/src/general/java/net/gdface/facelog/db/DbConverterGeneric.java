// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.Hashtable;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;

import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.FaceLightBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.LogLightBean;
/**
 * generic type converter of {@link IDbConverter} implemention<br>
 * @author guyadong
 *
 */
public abstract class DbConverterGeneric<N_DEVICE,N_FACE,N_IMAGE,N_LOG,N_PERSON,N_STORE,N_FACELIGHT,N_FEATURE,N_LOGLIGHT> 
    implements IDbConverter<N_DEVICE,N_FACE,N_IMAGE,N_LOG,N_PERSON,N_STORE,N_FACELIGHT,N_FEATURE,N_LOGLIGHT> {
    private final IBeanConverter<DeviceBean,N_DEVICE> converterDeviceBean;
    private final IBeanConverter<FaceBean,N_FACE> converterFaceBean;
    private final IBeanConverter<ImageBean,N_IMAGE> converterImageBean;
    private final IBeanConverter<LogBean,N_LOG> converterLogBean;
    private final IBeanConverter<PersonBean,N_PERSON> converterPersonBean;
    private final IBeanConverter<StoreBean,N_STORE> converterStoreBean;
    private final IBeanConverter<FaceLightBean,N_FACELIGHT> converterFaceLightBean;
    private final IBeanConverter<FeatureBean,N_FEATURE> converterFeatureBean;
    private final IBeanConverter<LogLightBean,N_LOGLIGHT> converterLogLightBean;
    private static Class<?> getRawClass(Type type){
        if(type instanceof Class<?>){
            return (Class<?>) type;
        } else if(type instanceof ParameterizedType){
            return getRawClass(((ParameterizedType) type).getRawType());
        } else{
            throw new IllegalArgumentException("invalid type");
        }
    }
    @SuppressWarnings("unchecked")
    public DbConverterGeneric(){
        Type superClass = getClass().getGenericSuperclass();
        Class<?> rawClass;
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[0]);
        this.converterDeviceBean            = new IBeanConverter.AbstractHandle<DeviceBean,N_DEVICE>(DeviceBean.class,
            (Class<N_DEVICE>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getId",rightType.getMethod("getId"));
                    setters.put("getId",rightType.getMethod("setId",Integer.class));
                    checkers.put("checkIdInitialized",rightType.getMethod("checkIdInitialized"));
                    getters.put("getName",rightType.getMethod("getName"));
                    setters.put("getName",rightType.getMethod("setName",String.class));
                    checkers.put("checkNameInitialized",rightType.getMethod("checkNameInitialized"));
                    getters.put("getOnline",rightType.getMethod("getOnline"));
                    setters.put("getOnline",rightType.getMethod("setOnline",Boolean.class));
                    checkers.put("checkOnlineInitialized",rightType.getMethod("checkOnlineInitialized"));
                    getters.put("getGroupId",rightType.getMethod("getGroupId"));
                    setters.put("getGroupId",rightType.getMethod("setGroupId",Integer.class));
                    checkers.put("checkGroupIdInitialized",rightType.getMethod("checkGroupIdInitialized"));
                    getters.put("getVersion",rightType.getMethod("getVersion"));
                    setters.put("getVersion",rightType.getMethod("setVersion",String.class));
                    checkers.put("checkVersionInitialized",rightType.getMethod("checkVersionInitialized"));
                    getters.put("getCreateTime",rightType.getMethod("getCreateTime"));
                    setters.put("getCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                    checkers.put("checkCreateTimeInitialized",rightType.getMethod("checkCreateTimeInitialized"));
                    getters.put("getUpdateTime",rightType.getMethod("getUpdateTime"));
                    setters.put("getUpdateTime",rightType.getMethod("setUpdateTime",java.util.Date.class));
                    checkers.put("checkUpdateTimeInitialized",rightType.getMethod("checkUpdateTimeInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(DeviceBean left, N_DEVICE right) {
                try{
                    if((boolean)checkers.get("checkIdInitialized").invoke(right))
                        left.setId((Integer)getters.get("getId").invoke(right));
                    if((boolean)checkers.get("checkNameInitialized").invoke(right))
                        left.setName((String)getters.get("getName").invoke(right));
                    if((boolean)checkers.get("checkOnlineInitialized").invoke(right))
                        left.setOnline((Boolean)getters.get("getOnline").invoke(right));
                    if((boolean)checkers.get("checkGroupIdInitialized").invoke(right))
                        left.setGroupId((Integer)getters.get("getGroupId").invoke(right));
                    if((boolean)checkers.get("checkVersionInitialized").invoke(right))
                        left.setVersion((String)getters.get("getVersion").invoke(right));
                    if((boolean)checkers.get("checkCreateTimeInitialized").invoke(right))
                        left.setCreateTime((java.util.Date)getters.get("getCreateTime").invoke(right));
                    if((boolean)checkers.get("checkUpdateTimeInitialized").invoke(right))
                        left.setUpdateTime((java.util.Date)getters.get("getUpdateTime").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(DeviceBean left, N_DEVICE right) {
                try{
                 if(left.checkIdInitialized() )
                    setters.get("setId").invoke(right,left.getId());
                if(left.checkNameInitialized() )
                    setters.get("setName").invoke(right,left.getName());
                if(left.checkOnlineInitialized() )
                    setters.get("setOnline").invoke(right,left.getOnline());
                if(left.checkGroupIdInitialized() )
                    setters.get("setGroupId").invoke(right,left.getGroupId());
                if(left.checkVersionInitialized() )
                    setters.get("setVersion").invoke(right,left.getVersion());
// IGNORE field fl_device.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(left.checkCreateTimeInitialized() )
//                     setters.get("setCreateTime").invoke(right,left.getCreateTime());
// IGNORE field fl_device.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(left.checkUpdateTimeInitialized() )
//                     setters.get("setUpdateTime").invoke(right,left.getUpdateTime());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[1]);
        this.converterFaceBean            = new IBeanConverter.AbstractHandle<FaceBean,N_FACE>(FaceBean.class,
            (Class<N_FACE>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getMd5",rightType.getMethod("getMd5"));
                    setters.put("getMd5",rightType.getMethod("setMd5",String.class));
                    checkers.put("checkMd5Initialized",rightType.getMethod("checkMd5Initialized"));
                    getters.put("getPersonId",rightType.getMethod("getPersonId"));
                    setters.put("getPersonId",rightType.getMethod("setPersonId",Integer.class));
                    checkers.put("checkPersonIdInitialized",rightType.getMethod("checkPersonIdInitialized"));
                    getters.put("getImgMd5",rightType.getMethod("getImgMd5"));
                    setters.put("getImgMd5",rightType.getMethod("setImgMd5",String.class));
                    checkers.put("checkImgMd5Initialized",rightType.getMethod("checkImgMd5Initialized"));
                    getters.put("getFaceLeft",rightType.getMethod("getFaceLeft"));
                    setters.put("getFaceLeft",rightType.getMethod("setFaceLeft",Integer.class));
                    checkers.put("checkFaceLeftInitialized",rightType.getMethod("checkFaceLeftInitialized"));
                    getters.put("getFaceTop",rightType.getMethod("getFaceTop"));
                    setters.put("getFaceTop",rightType.getMethod("setFaceTop",Integer.class));
                    checkers.put("checkFaceTopInitialized",rightType.getMethod("checkFaceTopInitialized"));
                    getters.put("getFaceWidth",rightType.getMethod("getFaceWidth"));
                    setters.put("getFaceWidth",rightType.getMethod("setFaceWidth",Integer.class));
                    checkers.put("checkFaceWidthInitialized",rightType.getMethod("checkFaceWidthInitialized"));
                    getters.put("getFaceHeight",rightType.getMethod("getFaceHeight"));
                    setters.put("getFaceHeight",rightType.getMethod("setFaceHeight",Integer.class));
                    checkers.put("checkFaceHeightInitialized",rightType.getMethod("checkFaceHeightInitialized"));
                    getters.put("getEyeLeftx",rightType.getMethod("getEyeLeftx"));
                    setters.put("getEyeLeftx",rightType.getMethod("setEyeLeftx",Integer.class));
                    checkers.put("checkEyeLeftxInitialized",rightType.getMethod("checkEyeLeftxInitialized"));
                    getters.put("getEyeLefty",rightType.getMethod("getEyeLefty"));
                    setters.put("getEyeLefty",rightType.getMethod("setEyeLefty",Integer.class));
                    checkers.put("checkEyeLeftyInitialized",rightType.getMethod("checkEyeLeftyInitialized"));
                    getters.put("getEyeRightx",rightType.getMethod("getEyeRightx"));
                    setters.put("getEyeRightx",rightType.getMethod("setEyeRightx",Integer.class));
                    checkers.put("checkEyeRightxInitialized",rightType.getMethod("checkEyeRightxInitialized"));
                    getters.put("getEyeRighty",rightType.getMethod("getEyeRighty"));
                    setters.put("getEyeRighty",rightType.getMethod("setEyeRighty",Integer.class));
                    checkers.put("checkEyeRightyInitialized",rightType.getMethod("checkEyeRightyInitialized"));
                    getters.put("getMouthX",rightType.getMethod("getMouthX"));
                    setters.put("getMouthX",rightType.getMethod("setMouthX",Integer.class));
                    checkers.put("checkMouthXInitialized",rightType.getMethod("checkMouthXInitialized"));
                    getters.put("getMouthY",rightType.getMethod("getMouthY"));
                    setters.put("getMouthY",rightType.getMethod("setMouthY",Integer.class));
                    checkers.put("checkMouthYInitialized",rightType.getMethod("checkMouthYInitialized"));
                    getters.put("getNoseX",rightType.getMethod("getNoseX"));
                    setters.put("getNoseX",rightType.getMethod("setNoseX",Integer.class));
                    checkers.put("checkNoseXInitialized",rightType.getMethod("checkNoseXInitialized"));
                    getters.put("getNoseY",rightType.getMethod("getNoseY"));
                    setters.put("getNoseY",rightType.getMethod("setNoseY",Integer.class));
                    checkers.put("checkNoseYInitialized",rightType.getMethod("checkNoseYInitialized"));
                    getters.put("getAngleYaw",rightType.getMethod("getAngleYaw"));
                    setters.put("getAngleYaw",rightType.getMethod("setAngleYaw",Integer.class));
                    checkers.put("checkAngleYawInitialized",rightType.getMethod("checkAngleYawInitialized"));
                    getters.put("getAnglePitch",rightType.getMethod("getAnglePitch"));
                    setters.put("getAnglePitch",rightType.getMethod("setAnglePitch",Integer.class));
                    checkers.put("checkAnglePitchInitialized",rightType.getMethod("checkAnglePitchInitialized"));
                    getters.put("getAngleRoll",rightType.getMethod("getAngleRoll"));
                    setters.put("getAngleRoll",rightType.getMethod("setAngleRoll",Integer.class));
                    checkers.put("checkAngleRollInitialized",rightType.getMethod("checkAngleRollInitialized"));
                    getters.put("getExtInfo",rightType.getMethod("getExtInfo"));
                    setters.put("getExtInfo",rightType.getMethod("setExtInfo",byte[].class));
                    checkers.put("checkExtInfoInitialized",rightType.getMethod("checkExtInfoInitialized"));
                    getters.put("getFeature",rightType.getMethod("getFeature"));
                    setters.put("getFeature",rightType.getMethod("setFeature",byte[].class));
                    checkers.put("checkFeatureInitialized",rightType.getMethod("checkFeatureInitialized"));
                    getters.put("getCreateTime",rightType.getMethod("getCreateTime"));
                    setters.put("getCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                    checkers.put("checkCreateTimeInitialized",rightType.getMethod("checkCreateTimeInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(FaceBean left, N_FACE right) {
                try{
                    if((boolean)checkers.get("checkMd5Initialized").invoke(right))
                        left.setMd5((String)getters.get("getMd5").invoke(right));
                    if((boolean)checkers.get("checkPersonIdInitialized").invoke(right))
                        left.setPersonId((Integer)getters.get("getPersonId").invoke(right));
                    if((boolean)checkers.get("checkImgMd5Initialized").invoke(right))
                        left.setImgMd5((String)getters.get("getImgMd5").invoke(right));
                    if((boolean)checkers.get("checkFaceLeftInitialized").invoke(right))
                        left.setFaceLeft((Integer)getters.get("getFaceLeft").invoke(right));
                    if((boolean)checkers.get("checkFaceTopInitialized").invoke(right))
                        left.setFaceTop((Integer)getters.get("getFaceTop").invoke(right));
                    if((boolean)checkers.get("checkFaceWidthInitialized").invoke(right))
                        left.setFaceWidth((Integer)getters.get("getFaceWidth").invoke(right));
                    if((boolean)checkers.get("checkFaceHeightInitialized").invoke(right))
                        left.setFaceHeight((Integer)getters.get("getFaceHeight").invoke(right));
                    if((boolean)checkers.get("checkEyeLeftxInitialized").invoke(right))
                        left.setEyeLeftx((Integer)getters.get("getEyeLeftx").invoke(right));
                    if((boolean)checkers.get("checkEyeLeftyInitialized").invoke(right))
                        left.setEyeLefty((Integer)getters.get("getEyeLefty").invoke(right));
                    if((boolean)checkers.get("checkEyeRightxInitialized").invoke(right))
                        left.setEyeRightx((Integer)getters.get("getEyeRightx").invoke(right));
                    if((boolean)checkers.get("checkEyeRightyInitialized").invoke(right))
                        left.setEyeRighty((Integer)getters.get("getEyeRighty").invoke(right));
                    if((boolean)checkers.get("checkMouthXInitialized").invoke(right))
                        left.setMouthX((Integer)getters.get("getMouthX").invoke(right));
                    if((boolean)checkers.get("checkMouthYInitialized").invoke(right))
                        left.setMouthY((Integer)getters.get("getMouthY").invoke(right));
                    if((boolean)checkers.get("checkNoseXInitialized").invoke(right))
                        left.setNoseX((Integer)getters.get("getNoseX").invoke(right));
                    if((boolean)checkers.get("checkNoseYInitialized").invoke(right))
                        left.setNoseY((Integer)getters.get("getNoseY").invoke(right));
                    if((boolean)checkers.get("checkAngleYawInitialized").invoke(right))
                        left.setAngleYaw((Integer)getters.get("getAngleYaw").invoke(right));
                    if((boolean)checkers.get("checkAnglePitchInitialized").invoke(right))
                        left.setAnglePitch((Integer)getters.get("getAnglePitch").invoke(right));
                    if((boolean)checkers.get("checkAngleRollInitialized").invoke(right))
                        left.setAngleRoll((Integer)getters.get("getAngleRoll").invoke(right));
                    if((boolean)checkers.get("checkExtInfoInitialized").invoke(right))
                        left.setExtInfo((byte[])getters.get("getExtInfo").invoke(right));
                    if((boolean)checkers.get("checkFeatureInitialized").invoke(right))
                        left.setFeature((byte[])getters.get("getFeature").invoke(right));
                    if((boolean)checkers.get("checkCreateTimeInitialized").invoke(right))
                        left.setCreateTime((java.util.Date)getters.get("getCreateTime").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(FaceBean left, N_FACE right) {
                try{
                 if(left.checkMd5Initialized() )
                    setters.get("setMd5").invoke(right,left.getMd5());
                if(left.checkPersonIdInitialized() )
                    setters.get("setPersonId").invoke(right,left.getPersonId());
                if(left.checkImgMd5Initialized() )
                    setters.get("setImgMd5").invoke(right,left.getImgMd5());
                if(left.checkFaceLeftInitialized() )
                    setters.get("setFaceLeft").invoke(right,left.getFaceLeft());
                if(left.checkFaceTopInitialized() )
                    setters.get("setFaceTop").invoke(right,left.getFaceTop());
                if(left.checkFaceWidthInitialized() )
                    setters.get("setFaceWidth").invoke(right,left.getFaceWidth());
                if(left.checkFaceHeightInitialized() )
                    setters.get("setFaceHeight").invoke(right,left.getFaceHeight());
                if(left.checkEyeLeftxInitialized() )
                    setters.get("setEyeLeftx").invoke(right,left.getEyeLeftx());
                if(left.checkEyeLeftyInitialized() )
                    setters.get("setEyeLefty").invoke(right,left.getEyeLefty());
                if(left.checkEyeRightxInitialized() )
                    setters.get("setEyeRightx").invoke(right,left.getEyeRightx());
                if(left.checkEyeRightyInitialized() )
                    setters.get("setEyeRighty").invoke(right,left.getEyeRighty());
                if(left.checkMouthXInitialized() )
                    setters.get("setMouthX").invoke(right,left.getMouthX());
                if(left.checkMouthYInitialized() )
                    setters.get("setMouthY").invoke(right,left.getMouthY());
                if(left.checkNoseXInitialized() )
                    setters.get("setNoseX").invoke(right,left.getNoseX());
                if(left.checkNoseYInitialized() )
                    setters.get("setNoseY").invoke(right,left.getNoseY());
                if(left.checkAngleYawInitialized() )
                    setters.get("setAngleYaw").invoke(right,left.getAngleYaw());
                if(left.checkAnglePitchInitialized() )
                    setters.get("setAnglePitch").invoke(right,left.getAnglePitch());
                if(left.checkAngleRollInitialized() )
                    setters.get("setAngleRoll").invoke(right,left.getAngleRoll());
                if(left.checkExtInfoInitialized() )
                    setters.get("setExtInfo").invoke(right,left.getExtInfo());
                if(left.checkFeatureInitialized() )
                    setters.get("setFeature").invoke(right,left.getFeature());
// IGNORE field fl_face.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(left.checkCreateTimeInitialized() )
//                     setters.get("setCreateTime").invoke(right,left.getCreateTime());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[2]);
        this.converterImageBean            = new IBeanConverter.AbstractHandle<ImageBean,N_IMAGE>(ImageBean.class,
            (Class<N_IMAGE>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getMd5",rightType.getMethod("getMd5"));
                    setters.put("getMd5",rightType.getMethod("setMd5",String.class));
                    checkers.put("checkMd5Initialized",rightType.getMethod("checkMd5Initialized"));
                    getters.put("getFormat",rightType.getMethod("getFormat"));
                    setters.put("getFormat",rightType.getMethod("setFormat",String.class));
                    checkers.put("checkFormatInitialized",rightType.getMethod("checkFormatInitialized"));
                    getters.put("getWidth",rightType.getMethod("getWidth"));
                    setters.put("getWidth",rightType.getMethod("setWidth",Integer.class));
                    checkers.put("checkWidthInitialized",rightType.getMethod("checkWidthInitialized"));
                    getters.put("getHeight",rightType.getMethod("getHeight"));
                    setters.put("getHeight",rightType.getMethod("setHeight",Integer.class));
                    checkers.put("checkHeightInitialized",rightType.getMethod("checkHeightInitialized"));
                    getters.put("getDepth",rightType.getMethod("getDepth"));
                    setters.put("getDepth",rightType.getMethod("setDepth",Integer.class));
                    checkers.put("checkDepthInitialized",rightType.getMethod("checkDepthInitialized"));
                    getters.put("getFaceNum",rightType.getMethod("getFaceNum"));
                    setters.put("getFaceNum",rightType.getMethod("setFaceNum",Integer.class));
                    checkers.put("checkFaceNumInitialized",rightType.getMethod("checkFaceNumInitialized"));
                    getters.put("getThumbMd5",rightType.getMethod("getThumbMd5"));
                    setters.put("getThumbMd5",rightType.getMethod("setThumbMd5",String.class));
                    checkers.put("checkThumbMd5Initialized",rightType.getMethod("checkThumbMd5Initialized"));
                    getters.put("getDeviceId",rightType.getMethod("getDeviceId"));
                    setters.put("getDeviceId",rightType.getMethod("setDeviceId",Integer.class));
                    checkers.put("checkDeviceIdInitialized",rightType.getMethod("checkDeviceIdInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(ImageBean left, N_IMAGE right) {
                try{
                    if((boolean)checkers.get("checkMd5Initialized").invoke(right))
                        left.setMd5((String)getters.get("getMd5").invoke(right));
                    if((boolean)checkers.get("checkFormatInitialized").invoke(right))
                        left.setFormat((String)getters.get("getFormat").invoke(right));
                    if((boolean)checkers.get("checkWidthInitialized").invoke(right))
                        left.setWidth((Integer)getters.get("getWidth").invoke(right));
                    if((boolean)checkers.get("checkHeightInitialized").invoke(right))
                        left.setHeight((Integer)getters.get("getHeight").invoke(right));
                    if((boolean)checkers.get("checkDepthInitialized").invoke(right))
                        left.setDepth((Integer)getters.get("getDepth").invoke(right));
                    if((boolean)checkers.get("checkFaceNumInitialized").invoke(right))
                        left.setFaceNum((Integer)getters.get("getFaceNum").invoke(right));
                    if((boolean)checkers.get("checkThumbMd5Initialized").invoke(right))
                        left.setThumbMd5((String)getters.get("getThumbMd5").invoke(right));
                    if((boolean)checkers.get("checkDeviceIdInitialized").invoke(right))
                        left.setDeviceId((Integer)getters.get("getDeviceId").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(ImageBean left, N_IMAGE right) {
                try{
                 if(left.checkMd5Initialized() )
                    setters.get("setMd5").invoke(right,left.getMd5());
                if(left.checkFormatInitialized() )
                    setters.get("setFormat").invoke(right,left.getFormat());
                if(left.checkWidthInitialized() )
                    setters.get("setWidth").invoke(right,left.getWidth());
                if(left.checkHeightInitialized() )
                    setters.get("setHeight").invoke(right,left.getHeight());
                if(left.checkDepthInitialized() )
                    setters.get("setDepth").invoke(right,left.getDepth());
                if(left.checkFaceNumInitialized() )
                    setters.get("setFaceNum").invoke(right,left.getFaceNum());
                if(left.checkThumbMd5Initialized() )
                    setters.get("setThumbMd5").invoke(right,left.getThumbMd5());
                if(left.checkDeviceIdInitialized() )
                    setters.get("setDeviceId").invoke(right,left.getDeviceId());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[3]);
        this.converterLogBean            = new IBeanConverter.AbstractHandle<LogBean,N_LOG>(LogBean.class,
            (Class<N_LOG>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getId",rightType.getMethod("getId"));
                    setters.put("getId",rightType.getMethod("setId",Integer.class));
                    checkers.put("checkIdInitialized",rightType.getMethod("checkIdInitialized"));
                    getters.put("getPersonId",rightType.getMethod("getPersonId"));
                    setters.put("getPersonId",rightType.getMethod("setPersonId",Integer.class));
                    checkers.put("checkPersonIdInitialized",rightType.getMethod("checkPersonIdInitialized"));
                    getters.put("getDeviceId",rightType.getMethod("getDeviceId"));
                    setters.put("getDeviceId",rightType.getMethod("setDeviceId",Integer.class));
                    checkers.put("checkDeviceIdInitialized",rightType.getMethod("checkDeviceIdInitialized"));
                    getters.put("getVerifyFace",rightType.getMethod("getVerifyFace"));
                    setters.put("getVerifyFace",rightType.getMethod("setVerifyFace",String.class));
                    checkers.put("checkVerifyFaceInitialized",rightType.getMethod("checkVerifyFaceInitialized"));
                    getters.put("getCompareFace",rightType.getMethod("getCompareFace"));
                    setters.put("getCompareFace",rightType.getMethod("setCompareFace",String.class));
                    checkers.put("checkCompareFaceInitialized",rightType.getMethod("checkCompareFaceInitialized"));
                    getters.put("getSimilarty",rightType.getMethod("getSimilarty"));
                    setters.put("getSimilarty",rightType.getMethod("setSimilarty",Double.class));
                    checkers.put("checkSimilartyInitialized",rightType.getMethod("checkSimilartyInitialized"));
                    getters.put("getVerifyTime",rightType.getMethod("getVerifyTime"));
                    setters.put("getVerifyTime",rightType.getMethod("setVerifyTime",java.util.Date.class));
                    checkers.put("checkVerifyTimeInitialized",rightType.getMethod("checkVerifyTimeInitialized"));
                    getters.put("getCreateTime",rightType.getMethod("getCreateTime"));
                    setters.put("getCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                    checkers.put("checkCreateTimeInitialized",rightType.getMethod("checkCreateTimeInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(LogBean left, N_LOG right) {
                try{
                    if((boolean)checkers.get("checkIdInitialized").invoke(right))
                        left.setId((Integer)getters.get("getId").invoke(right));
                    if((boolean)checkers.get("checkPersonIdInitialized").invoke(right))
                        left.setPersonId((Integer)getters.get("getPersonId").invoke(right));
                    if((boolean)checkers.get("checkDeviceIdInitialized").invoke(right))
                        left.setDeviceId((Integer)getters.get("getDeviceId").invoke(right));
                    if((boolean)checkers.get("checkVerifyFaceInitialized").invoke(right))
                        left.setVerifyFace((String)getters.get("getVerifyFace").invoke(right));
                    if((boolean)checkers.get("checkCompareFaceInitialized").invoke(right))
                        left.setCompareFace((String)getters.get("getCompareFace").invoke(right));
                    if((boolean)checkers.get("checkSimilartyInitialized").invoke(right))
                        left.setSimilarty((Double)getters.get("getSimilarty").invoke(right));
                    if((boolean)checkers.get("checkVerifyTimeInitialized").invoke(right))
                        left.setVerifyTime((java.util.Date)getters.get("getVerifyTime").invoke(right));
                    if((boolean)checkers.get("checkCreateTimeInitialized").invoke(right))
                        left.setCreateTime((java.util.Date)getters.get("getCreateTime").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(LogBean left, N_LOG right) {
                try{
                 if(left.checkIdInitialized() )
                    setters.get("setId").invoke(right,left.getId());
                if(left.checkPersonIdInitialized() )
                    setters.get("setPersonId").invoke(right,left.getPersonId());
                if(left.checkDeviceIdInitialized() )
                    setters.get("setDeviceId").invoke(right,left.getDeviceId());
                if(left.checkVerifyFaceInitialized() )
                    setters.get("setVerifyFace").invoke(right,left.getVerifyFace());
                if(left.checkCompareFaceInitialized() )
                    setters.get("setCompareFace").invoke(right,left.getCompareFace());
                if(left.checkSimilartyInitialized() )
                    setters.get("setSimilarty").invoke(right,left.getSimilarty());
                if(left.checkVerifyTimeInitialized() )
                    setters.get("setVerifyTime").invoke(right,left.getVerifyTime());
// IGNORE field fl_log.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(left.checkCreateTimeInitialized() )
//                     setters.get("setCreateTime").invoke(right,left.getCreateTime());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[4]);
        this.converterPersonBean            = new IBeanConverter.AbstractHandle<PersonBean,N_PERSON>(PersonBean.class,
            (Class<N_PERSON>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getId",rightType.getMethod("getId"));
                    setters.put("getId",rightType.getMethod("setId",Integer.class));
                    checkers.put("checkIdInitialized",rightType.getMethod("checkIdInitialized"));
                    getters.put("getGroupId",rightType.getMethod("getGroupId"));
                    setters.put("getGroupId",rightType.getMethod("setGroupId",Integer.class));
                    checkers.put("checkGroupIdInitialized",rightType.getMethod("checkGroupIdInitialized"));
                    getters.put("getName",rightType.getMethod("getName"));
                    setters.put("getName",rightType.getMethod("setName",String.class));
                    checkers.put("checkNameInitialized",rightType.getMethod("checkNameInitialized"));
                    getters.put("getSex",rightType.getMethod("getSex"));
                    setters.put("getSex",rightType.getMethod("setSex",Integer.class));
                    checkers.put("checkSexInitialized",rightType.getMethod("checkSexInitialized"));
                    getters.put("getBirthdate",rightType.getMethod("getBirthdate"));
                    setters.put("getBirthdate",rightType.getMethod("setBirthdate",java.util.Date.class));
                    checkers.put("checkBirthdateInitialized",rightType.getMethod("checkBirthdateInitialized"));
                    getters.put("getPapersType",rightType.getMethod("getPapersType"));
                    setters.put("getPapersType",rightType.getMethod("setPapersType",Integer.class));
                    checkers.put("checkPapersTypeInitialized",rightType.getMethod("checkPapersTypeInitialized"));
                    getters.put("getPapersNum",rightType.getMethod("getPapersNum"));
                    setters.put("getPapersNum",rightType.getMethod("setPapersNum",String.class));
                    checkers.put("checkPapersNumInitialized",rightType.getMethod("checkPapersNumInitialized"));
                    getters.put("getPhotoId",rightType.getMethod("getPhotoId"));
                    setters.put("getPhotoId",rightType.getMethod("setPhotoId",String.class));
                    checkers.put("checkPhotoIdInitialized",rightType.getMethod("checkPhotoIdInitialized"));
                    getters.put("getFaceMd5",rightType.getMethod("getFaceMd5"));
                    setters.put("getFaceMd5",rightType.getMethod("setFaceMd5",String.class));
                    checkers.put("checkFaceMd5Initialized",rightType.getMethod("checkFaceMd5Initialized"));
                    getters.put("getExpiryDate",rightType.getMethod("getExpiryDate"));
                    setters.put("getExpiryDate",rightType.getMethod("setExpiryDate",java.util.Date.class));
                    checkers.put("checkExpiryDateInitialized",rightType.getMethod("checkExpiryDateInitialized"));
                    getters.put("getCreateTime",rightType.getMethod("getCreateTime"));
                    setters.put("getCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                    checkers.put("checkCreateTimeInitialized",rightType.getMethod("checkCreateTimeInitialized"));
                    getters.put("getUpdateTime",rightType.getMethod("getUpdateTime"));
                    setters.put("getUpdateTime",rightType.getMethod("setUpdateTime",java.util.Date.class));
                    checkers.put("checkUpdateTimeInitialized",rightType.getMethod("checkUpdateTimeInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(PersonBean left, N_PERSON right) {
                try{
                    if((boolean)checkers.get("checkIdInitialized").invoke(right))
                        left.setId((Integer)getters.get("getId").invoke(right));
                    if((boolean)checkers.get("checkGroupIdInitialized").invoke(right))
                        left.setGroupId((Integer)getters.get("getGroupId").invoke(right));
                    if((boolean)checkers.get("checkNameInitialized").invoke(right))
                        left.setName((String)getters.get("getName").invoke(right));
                    if((boolean)checkers.get("checkSexInitialized").invoke(right))
                        left.setSex((Integer)getters.get("getSex").invoke(right));
                    if((boolean)checkers.get("checkBirthdateInitialized").invoke(right))
                        left.setBirthdate((java.util.Date)getters.get("getBirthdate").invoke(right));
                    if((boolean)checkers.get("checkPapersTypeInitialized").invoke(right))
                        left.setPapersType((Integer)getters.get("getPapersType").invoke(right));
                    if((boolean)checkers.get("checkPapersNumInitialized").invoke(right))
                        left.setPapersNum((String)getters.get("getPapersNum").invoke(right));
                    if((boolean)checkers.get("checkPhotoIdInitialized").invoke(right))
                        left.setPhotoId((String)getters.get("getPhotoId").invoke(right));
                    if((boolean)checkers.get("checkFaceMd5Initialized").invoke(right))
                        left.setFaceMd5((String)getters.get("getFaceMd5").invoke(right));
                    if((boolean)checkers.get("checkExpiryDateInitialized").invoke(right))
                        left.setExpiryDate((java.util.Date)getters.get("getExpiryDate").invoke(right));
                    if((boolean)checkers.get("checkCreateTimeInitialized").invoke(right))
                        left.setCreateTime((java.util.Date)getters.get("getCreateTime").invoke(right));
                    if((boolean)checkers.get("checkUpdateTimeInitialized").invoke(right))
                        left.setUpdateTime((java.util.Date)getters.get("getUpdateTime").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(PersonBean left, N_PERSON right) {
                try{
                 if(left.checkIdInitialized() )
                    setters.get("setId").invoke(right,left.getId());
                if(left.checkGroupIdInitialized() )
                    setters.get("setGroupId").invoke(right,left.getGroupId());
                if(left.checkNameInitialized() )
                    setters.get("setName").invoke(right,left.getName());
                if(left.checkSexInitialized() )
                    setters.get("setSex").invoke(right,left.getSex());
                if(left.checkBirthdateInitialized() )
                    setters.get("setBirthdate").invoke(right,left.getBirthdate());
                if(left.checkPapersTypeInitialized() )
                    setters.get("setPapersType").invoke(right,left.getPapersType());
                if(left.checkPapersNumInitialized() )
                    setters.get("setPapersNum").invoke(right,left.getPapersNum());
                if(left.checkPhotoIdInitialized() )
                    setters.get("setPhotoId").invoke(right,left.getPhotoId());
                if(left.checkFaceMd5Initialized() )
                    setters.get("setFaceMd5").invoke(right,left.getFaceMd5());
                if(left.checkExpiryDateInitialized() )
                    setters.get("setExpiryDate").invoke(right,left.getExpiryDate());
// IGNORE field fl_person.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(left.checkCreateTimeInitialized() )
//                     setters.get("setCreateTime").invoke(right,left.getCreateTime());
// IGNORE field fl_person.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(left.checkUpdateTimeInitialized() )
//                     setters.get("setUpdateTime").invoke(right,left.getUpdateTime());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[5]);
        this.converterStoreBean            = new IBeanConverter.AbstractHandle<StoreBean,N_STORE>(StoreBean.class,
            (Class<N_STORE>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getMd5",rightType.getMethod("getMd5"));
                    setters.put("getMd5",rightType.getMethod("setMd5",String.class));
                    checkers.put("checkMd5Initialized",rightType.getMethod("checkMd5Initialized"));
                    getters.put("getEncoding",rightType.getMethod("getEncoding"));
                    setters.put("getEncoding",rightType.getMethod("setEncoding",String.class));
                    checkers.put("checkEncodingInitialized",rightType.getMethod("checkEncodingInitialized"));
                    getters.put("getData",rightType.getMethod("getData"));
                    setters.put("getData",rightType.getMethod("setData",byte[].class));
                    checkers.put("checkDataInitialized",rightType.getMethod("checkDataInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(StoreBean left, N_STORE right) {
                try{
                    if((boolean)checkers.get("checkMd5Initialized").invoke(right))
                        left.setMd5((String)getters.get("getMd5").invoke(right));
                    if((boolean)checkers.get("checkEncodingInitialized").invoke(right))
                        left.setEncoding((String)getters.get("getEncoding").invoke(right));
                    if((boolean)checkers.get("checkDataInitialized").invoke(right))
                        left.setData((byte[])getters.get("getData").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(StoreBean left, N_STORE right) {
                try{
                 if(left.checkMd5Initialized() )
                    setters.get("setMd5").invoke(right,left.getMd5());
                if(left.checkEncodingInitialized() )
                    setters.get("setEncoding").invoke(right,left.getEncoding());
                if(left.checkDataInitialized() )
                    setters.get("setData").invoke(right,left.getData());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[6]);
        this.converterFaceLightBean            = new IBeanConverter.AbstractHandle<FaceLightBean,N_FACELIGHT>(FaceLightBean.class,
            (Class<N_FACELIGHT>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getMd5",rightType.getMethod("getMd5"));
                    setters.put("getMd5",rightType.getMethod("setMd5",String.class));
                    checkers.put("checkMd5Initialized",rightType.getMethod("checkMd5Initialized"));
                    getters.put("getPersonId",rightType.getMethod("getPersonId"));
                    setters.put("getPersonId",rightType.getMethod("setPersonId",Integer.class));
                    checkers.put("checkPersonIdInitialized",rightType.getMethod("checkPersonIdInitialized"));
                    getters.put("getImgMd5",rightType.getMethod("getImgMd5"));
                    setters.put("getImgMd5",rightType.getMethod("setImgMd5",String.class));
                    checkers.put("checkImgMd5Initialized",rightType.getMethod("checkImgMd5Initialized"));
                    getters.put("getFaceLeft",rightType.getMethod("getFaceLeft"));
                    setters.put("getFaceLeft",rightType.getMethod("setFaceLeft",Integer.class));
                    checkers.put("checkFaceLeftInitialized",rightType.getMethod("checkFaceLeftInitialized"));
                    getters.put("getFaceTop",rightType.getMethod("getFaceTop"));
                    setters.put("getFaceTop",rightType.getMethod("setFaceTop",Integer.class));
                    checkers.put("checkFaceTopInitialized",rightType.getMethod("checkFaceTopInitialized"));
                    getters.put("getFaceWidth",rightType.getMethod("getFaceWidth"));
                    setters.put("getFaceWidth",rightType.getMethod("setFaceWidth",Integer.class));
                    checkers.put("checkFaceWidthInitialized",rightType.getMethod("checkFaceWidthInitialized"));
                    getters.put("getFaceHeight",rightType.getMethod("getFaceHeight"));
                    setters.put("getFaceHeight",rightType.getMethod("setFaceHeight",Integer.class));
                    checkers.put("checkFaceHeightInitialized",rightType.getMethod("checkFaceHeightInitialized"));
                    getters.put("getEyeLeftx",rightType.getMethod("getEyeLeftx"));
                    setters.put("getEyeLeftx",rightType.getMethod("setEyeLeftx",Integer.class));
                    checkers.put("checkEyeLeftxInitialized",rightType.getMethod("checkEyeLeftxInitialized"));
                    getters.put("getEyeLefty",rightType.getMethod("getEyeLefty"));
                    setters.put("getEyeLefty",rightType.getMethod("setEyeLefty",Integer.class));
                    checkers.put("checkEyeLeftyInitialized",rightType.getMethod("checkEyeLeftyInitialized"));
                    getters.put("getEyeRightx",rightType.getMethod("getEyeRightx"));
                    setters.put("getEyeRightx",rightType.getMethod("setEyeRightx",Integer.class));
                    checkers.put("checkEyeRightxInitialized",rightType.getMethod("checkEyeRightxInitialized"));
                    getters.put("getEyeRighty",rightType.getMethod("getEyeRighty"));
                    setters.put("getEyeRighty",rightType.getMethod("setEyeRighty",Integer.class));
                    checkers.put("checkEyeRightyInitialized",rightType.getMethod("checkEyeRightyInitialized"));
                    getters.put("getMouthX",rightType.getMethod("getMouthX"));
                    setters.put("getMouthX",rightType.getMethod("setMouthX",Integer.class));
                    checkers.put("checkMouthXInitialized",rightType.getMethod("checkMouthXInitialized"));
                    getters.put("getMouthY",rightType.getMethod("getMouthY"));
                    setters.put("getMouthY",rightType.getMethod("setMouthY",Integer.class));
                    checkers.put("checkMouthYInitialized",rightType.getMethod("checkMouthYInitialized"));
                    getters.put("getNoseX",rightType.getMethod("getNoseX"));
                    setters.put("getNoseX",rightType.getMethod("setNoseX",Integer.class));
                    checkers.put("checkNoseXInitialized",rightType.getMethod("checkNoseXInitialized"));
                    getters.put("getNoseY",rightType.getMethod("getNoseY"));
                    setters.put("getNoseY",rightType.getMethod("setNoseY",Integer.class));
                    checkers.put("checkNoseYInitialized",rightType.getMethod("checkNoseYInitialized"));
                    getters.put("getAngleYaw",rightType.getMethod("getAngleYaw"));
                    setters.put("getAngleYaw",rightType.getMethod("setAngleYaw",Integer.class));
                    checkers.put("checkAngleYawInitialized",rightType.getMethod("checkAngleYawInitialized"));
                    getters.put("getAnglePitch",rightType.getMethod("getAnglePitch"));
                    setters.put("getAnglePitch",rightType.getMethod("setAnglePitch",Integer.class));
                    checkers.put("checkAnglePitchInitialized",rightType.getMethod("checkAnglePitchInitialized"));
                    getters.put("getAngleRoll",rightType.getMethod("getAngleRoll"));
                    setters.put("getAngleRoll",rightType.getMethod("setAngleRoll",Integer.class));
                    checkers.put("checkAngleRollInitialized",rightType.getMethod("checkAngleRollInitialized"));
                    getters.put("getExtInfo",rightType.getMethod("getExtInfo"));
                    setters.put("getExtInfo",rightType.getMethod("setExtInfo",byte[].class));
                    checkers.put("checkExtInfoInitialized",rightType.getMethod("checkExtInfoInitialized"));
                    getters.put("getCreateTime",rightType.getMethod("getCreateTime"));
                    setters.put("getCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                    checkers.put("checkCreateTimeInitialized",rightType.getMethod("checkCreateTimeInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(FaceLightBean left, N_FACELIGHT right) {
                try{
                    if((boolean)checkers.get("checkMd5Initialized").invoke(right))
                        left.setMd5((String)getters.get("getMd5").invoke(right));
                    if((boolean)checkers.get("checkPersonIdInitialized").invoke(right))
                        left.setPersonId((Integer)getters.get("getPersonId").invoke(right));
                    if((boolean)checkers.get("checkImgMd5Initialized").invoke(right))
                        left.setImgMd5((String)getters.get("getImgMd5").invoke(right));
                    if((boolean)checkers.get("checkFaceLeftInitialized").invoke(right))
                        left.setFaceLeft((Integer)getters.get("getFaceLeft").invoke(right));
                    if((boolean)checkers.get("checkFaceTopInitialized").invoke(right))
                        left.setFaceTop((Integer)getters.get("getFaceTop").invoke(right));
                    if((boolean)checkers.get("checkFaceWidthInitialized").invoke(right))
                        left.setFaceWidth((Integer)getters.get("getFaceWidth").invoke(right));
                    if((boolean)checkers.get("checkFaceHeightInitialized").invoke(right))
                        left.setFaceHeight((Integer)getters.get("getFaceHeight").invoke(right));
                    if((boolean)checkers.get("checkEyeLeftxInitialized").invoke(right))
                        left.setEyeLeftx((Integer)getters.get("getEyeLeftx").invoke(right));
                    if((boolean)checkers.get("checkEyeLeftyInitialized").invoke(right))
                        left.setEyeLefty((Integer)getters.get("getEyeLefty").invoke(right));
                    if((boolean)checkers.get("checkEyeRightxInitialized").invoke(right))
                        left.setEyeRightx((Integer)getters.get("getEyeRightx").invoke(right));
                    if((boolean)checkers.get("checkEyeRightyInitialized").invoke(right))
                        left.setEyeRighty((Integer)getters.get("getEyeRighty").invoke(right));
                    if((boolean)checkers.get("checkMouthXInitialized").invoke(right))
                        left.setMouthX((Integer)getters.get("getMouthX").invoke(right));
                    if((boolean)checkers.get("checkMouthYInitialized").invoke(right))
                        left.setMouthY((Integer)getters.get("getMouthY").invoke(right));
                    if((boolean)checkers.get("checkNoseXInitialized").invoke(right))
                        left.setNoseX((Integer)getters.get("getNoseX").invoke(right));
                    if((boolean)checkers.get("checkNoseYInitialized").invoke(right))
                        left.setNoseY((Integer)getters.get("getNoseY").invoke(right));
                    if((boolean)checkers.get("checkAngleYawInitialized").invoke(right))
                        left.setAngleYaw((Integer)getters.get("getAngleYaw").invoke(right));
                    if((boolean)checkers.get("checkAnglePitchInitialized").invoke(right))
                        left.setAnglePitch((Integer)getters.get("getAnglePitch").invoke(right));
                    if((boolean)checkers.get("checkAngleRollInitialized").invoke(right))
                        left.setAngleRoll((Integer)getters.get("getAngleRoll").invoke(right));
                    if((boolean)checkers.get("checkExtInfoInitialized").invoke(right))
                        left.setExtInfo((byte[])getters.get("getExtInfo").invoke(right));
                    if((boolean)checkers.get("checkCreateTimeInitialized").invoke(right))
                        left.setCreateTime((java.util.Date)getters.get("getCreateTime").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(FaceLightBean left, N_FACELIGHT right) {
                try{
                 if(left.checkMd5Initialized() )
                    setters.get("setMd5").invoke(right,left.getMd5());
                if(left.checkPersonIdInitialized() )
                    setters.get("setPersonId").invoke(right,left.getPersonId());
                if(left.checkImgMd5Initialized() )
                    setters.get("setImgMd5").invoke(right,left.getImgMd5());
                if(left.checkFaceLeftInitialized() )
                    setters.get("setFaceLeft").invoke(right,left.getFaceLeft());
                if(left.checkFaceTopInitialized() )
                    setters.get("setFaceTop").invoke(right,left.getFaceTop());
                if(left.checkFaceWidthInitialized() )
                    setters.get("setFaceWidth").invoke(right,left.getFaceWidth());
                if(left.checkFaceHeightInitialized() )
                    setters.get("setFaceHeight").invoke(right,left.getFaceHeight());
                if(left.checkEyeLeftxInitialized() )
                    setters.get("setEyeLeftx").invoke(right,left.getEyeLeftx());
                if(left.checkEyeLeftyInitialized() )
                    setters.get("setEyeLefty").invoke(right,left.getEyeLefty());
                if(left.checkEyeRightxInitialized() )
                    setters.get("setEyeRightx").invoke(right,left.getEyeRightx());
                if(left.checkEyeRightyInitialized() )
                    setters.get("setEyeRighty").invoke(right,left.getEyeRighty());
                if(left.checkMouthXInitialized() )
                    setters.get("setMouthX").invoke(right,left.getMouthX());
                if(left.checkMouthYInitialized() )
                    setters.get("setMouthY").invoke(right,left.getMouthY());
                if(left.checkNoseXInitialized() )
                    setters.get("setNoseX").invoke(right,left.getNoseX());
                if(left.checkNoseYInitialized() )
                    setters.get("setNoseY").invoke(right,left.getNoseY());
                if(left.checkAngleYawInitialized() )
                    setters.get("setAngleYaw").invoke(right,left.getAngleYaw());
                if(left.checkAnglePitchInitialized() )
                    setters.get("setAnglePitch").invoke(right,left.getAnglePitch());
                if(left.checkAngleRollInitialized() )
                    setters.get("setAngleRoll").invoke(right,left.getAngleRoll());
                if(left.checkExtInfoInitialized() )
                    setters.get("setExtInfo").invoke(right,left.getExtInfo());
// IGNORE field fl_face_light.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(left.checkCreateTimeInitialized() )
//                     setters.get("setCreateTime").invoke(right,left.getCreateTime());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[7]);
        this.converterFeatureBean            = new IBeanConverter.AbstractHandle<FeatureBean,N_FEATURE>(FeatureBean.class,
            (Class<N_FEATURE>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getMd5",rightType.getMethod("getMd5"));
                    setters.put("getMd5",rightType.getMethod("setMd5",String.class));
                    checkers.put("checkMd5Initialized",rightType.getMethod("checkMd5Initialized"));
                    getters.put("getPersonId",rightType.getMethod("getPersonId"));
                    setters.put("getPersonId",rightType.getMethod("setPersonId",Integer.class));
                    checkers.put("checkPersonIdInitialized",rightType.getMethod("checkPersonIdInitialized"));
                    getters.put("getImgMd5",rightType.getMethod("getImgMd5"));
                    setters.put("getImgMd5",rightType.getMethod("setImgMd5",String.class));
                    checkers.put("checkImgMd5Initialized",rightType.getMethod("checkImgMd5Initialized"));
                    getters.put("getFeature",rightType.getMethod("getFeature"));
                    setters.put("getFeature",rightType.getMethod("setFeature",byte[].class));
                    checkers.put("checkFeatureInitialized",rightType.getMethod("checkFeatureInitialized"));
                    getters.put("getCreateTime",rightType.getMethod("getCreateTime"));
                    setters.put("getCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                    checkers.put("checkCreateTimeInitialized",rightType.getMethod("checkCreateTimeInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(FeatureBean left, N_FEATURE right) {
                try{
                    if((boolean)checkers.get("checkMd5Initialized").invoke(right))
                        left.setMd5((String)getters.get("getMd5").invoke(right));
                    if((boolean)checkers.get("checkPersonIdInitialized").invoke(right))
                        left.setPersonId((Integer)getters.get("getPersonId").invoke(right));
                    if((boolean)checkers.get("checkImgMd5Initialized").invoke(right))
                        left.setImgMd5((String)getters.get("getImgMd5").invoke(right));
                    if((boolean)checkers.get("checkFeatureInitialized").invoke(right))
                        left.setFeature((byte[])getters.get("getFeature").invoke(right));
                    if((boolean)checkers.get("checkCreateTimeInitialized").invoke(right))
                        left.setCreateTime((java.util.Date)getters.get("getCreateTime").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(FeatureBean left, N_FEATURE right) {
                try{
                 if(left.checkMd5Initialized() )
                    setters.get("setMd5").invoke(right,left.getMd5());
                if(left.checkPersonIdInitialized() )
                    setters.get("setPersonId").invoke(right,left.getPersonId());
                if(left.checkImgMd5Initialized() )
                    setters.get("setImgMd5").invoke(right,left.getImgMd5());
                if(left.checkFeatureInitialized() )
                    setters.get("setFeature").invoke(right,left.getFeature());
// IGNORE field fl_feature.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(left.checkCreateTimeInitialized() )
//                     setters.get("setCreateTime").invoke(right,left.getCreateTime());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
        rawClass = getRawClass(((ParameterizedType) superClass).getActualTypeArguments()[8]);
        this.converterLogLightBean            = new IBeanConverter.AbstractHandle<LogLightBean,N_LOGLIGHT>(LogLightBean.class,
            (Class<N_LOGLIGHT>)rawClass){
            final Map<String,Method> getters = new Hashtable<String,Method>();
            final Map<String,Method> setters = new Hashtable<String,Method>();
            final Map<String,Method> checkers = new Hashtable<String,Method>();
            {
                try{
                    getters.put("getId",rightType.getMethod("getId"));
                    setters.put("getId",rightType.getMethod("setId",Integer.class));
                    checkers.put("checkIdInitialized",rightType.getMethod("checkIdInitialized"));
                    getters.put("getPersonId",rightType.getMethod("getPersonId"));
                    setters.put("getPersonId",rightType.getMethod("setPersonId",Integer.class));
                    checkers.put("checkPersonIdInitialized",rightType.getMethod("checkPersonIdInitialized"));
                    getters.put("getName",rightType.getMethod("getName"));
                    setters.put("getName",rightType.getMethod("setName",String.class));
                    checkers.put("checkNameInitialized",rightType.getMethod("checkNameInitialized"));
                    getters.put("getPapersType",rightType.getMethod("getPapersType"));
                    setters.put("getPapersType",rightType.getMethod("setPapersType",Integer.class));
                    checkers.put("checkPapersTypeInitialized",rightType.getMethod("checkPapersTypeInitialized"));
                    getters.put("getPapersNum",rightType.getMethod("getPapersNum"));
                    setters.put("getPapersNum",rightType.getMethod("setPapersNum",String.class));
                    checkers.put("checkPapersNumInitialized",rightType.getMethod("checkPapersNumInitialized"));
                    getters.put("getVerifyTime",rightType.getMethod("getVerifyTime"));
                    setters.put("getVerifyTime",rightType.getMethod("setVerifyTime",java.util.Date.class));
                    checkers.put("checkVerifyTimeInitialized",rightType.getMethod("checkVerifyTimeInitialized"));
                    getters.put("isNew",rightType.getMethod("isNew"));
                    setters.put("isNew",rightType.getMethod("isNew",boolean.class));
                    getters.put("getModified",rightType.getMethod("getModified"));
                    setters.put("setModified",rightType.getMethod("setModified",long.class));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
            @Override
            protected void _fromRight(LogLightBean left, N_LOGLIGHT right) {
                try{
                    if((boolean)checkers.get("checkIdInitialized").invoke(right))
                        left.setId((Integer)getters.get("getId").invoke(right));
                    if((boolean)checkers.get("checkPersonIdInitialized").invoke(right))
                        left.setPersonId((Integer)getters.get("getPersonId").invoke(right));
                    if((boolean)checkers.get("checkNameInitialized").invoke(right))
                        left.setName((String)getters.get("getName").invoke(right));
                    if((boolean)checkers.get("checkPapersTypeInitialized").invoke(right))
                        left.setPapersType((Integer)getters.get("getPapersType").invoke(right));
                    if((boolean)checkers.get("checkPapersNumInitialized").invoke(right))
                        left.setPapersNum((String)getters.get("getPapersNum").invoke(right));
                    if((boolean)checkers.get("checkVerifyTimeInitialized").invoke(right))
                        left.setVerifyTime((java.util.Date)getters.get("getVerifyTime").invoke(right));
                    left.isNew((boolean)getters.get("isNew").invoke(right));
                    left.setModified((long)setters.get("getModified").invoke(right));
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }
    
            @Override
            protected void _toRight(LogLightBean left, N_LOGLIGHT right) {
                try{
                 if(left.checkIdInitialized() )
                    setters.get("setId").invoke(right,left.getId());
                if(left.checkPersonIdInitialized() )
                    setters.get("setPersonId").invoke(right,left.getPersonId());
                if(left.checkNameInitialized() )
                    setters.get("setName").invoke(right,left.getName());
                if(left.checkPapersTypeInitialized() )
                    setters.get("setPapersType").invoke(right,left.getPapersType());
                if(left.checkPapersNumInitialized() )
                    setters.get("setPapersNum").invoke(right,left.getPapersNum());
                if(left.checkVerifyTimeInitialized() )
                    setters.get("setVerifyTime").invoke(right,left.getVerifyTime());
                    setters.get("isNew").invoke(right,left.isNew());
                    setters.get("setModified").invoke(right,left.getModified());
                }catch(RuntimeException e){
                    throw e;
                }catch(Exception e){
                    throw new RuntimeException(e);
                }
            }};            
    }
    @Override
    public <L,R>IBeanConverter<L,R>getBeanConverter(Class<L> lClass,Class<R> rClass){
        throw new UnsupportedOperationException();
    }
    
    @Override
    public <L,R>void setBeanConverter(Class<L> lClass,Class<R> rClass,IBeanConverter<L,R>converter){
        throw new UnsupportedOperationException();
    }

    @Override
    public IBeanConverter<DeviceBean, N_DEVICE> getDeviceBeanConverter() {
        return converterDeviceBean;
    }
    @Override
    public IBeanConverter<FaceBean, N_FACE> getFaceBeanConverter() {
        return converterFaceBean;
    }
    @Override
    public IBeanConverter<ImageBean, N_IMAGE> getImageBeanConverter() {
        return converterImageBean;
    }
    @Override
    public IBeanConverter<LogBean, N_LOG> getLogBeanConverter() {
        return converterLogBean;
    }
    @Override
    public IBeanConverter<PersonBean, N_PERSON> getPersonBeanConverter() {
        return converterPersonBean;
    }
    @Override
    public IBeanConverter<StoreBean, N_STORE> getStoreBeanConverter() {
        return converterStoreBean;
    }
    @Override
    public IBeanConverter<FaceLightBean, N_FACELIGHT> getFaceLightBeanConverter() {
        return converterFaceLightBean;
    }
    @Override
    public IBeanConverter<FeatureBean, N_FEATURE> getFeatureBeanConverter() {
        return converterFeatureBean;
    }
    @Override
    public IBeanConverter<LogLightBean, N_LOGLIGHT> getLogLightBeanConverter() {
        return converterLogLightBean;
    }
}
