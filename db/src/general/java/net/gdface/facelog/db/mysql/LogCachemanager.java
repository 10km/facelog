// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.mysql;


import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

import net.gdface.facelog.db.Constant;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.ITableCache;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.ILogManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.mysql.Cache.DeviceCache;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.mysql.Cache.FaceCache;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.mysql.Cache.FeatureCache;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.mysql.Cache.PersonCache;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.WrapDAOException;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.db.mysql.LogManager;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.mysql.Cache.LogCache;

/**
 * Handles database calls (save, load, count, etc...) for the fl_log table.<br>
 * @author guyadong
 */
public class LogCachemanager extends LogManager
{
    private LogManager nativeManager = LogManager.getInstance();
    private final LogCache logCache;
    private DeviceCache deviceCache;
    public void setDeviceCache(DeviceCache deviceCache){
        this.deviceCache = deviceCache;
    }
    private FaceCache faceCache;
    public void setFaceCache(FaceCache faceCache){
        this.faceCache = faceCache;
    }
    private FeatureCache featureCache;
    public void setFeatureCache(FeatureCache featureCache){
        this.featureCache = featureCache;
    }
    private PersonCache personCache;
    public void setPersonCache(PersonCache personCache){
        this.personCache = personCache;
    }
    public LogCachemanager(long maximumSize, long duration, TimeUnit unit) {
        this.logCache = new LogCache(maximumSize,duration,unit);
    }
    public LogCachemanager(long maximumSize, long durationMinutes) {
        this(maximumSize, durationMinutes, ITableCache.DEFAULT_TIME_UNIT);
    }

    public LogCachemanager(long maximumSize) {
        this(maximumSize,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }
    public LogCachemanager() {
        this(ITableCache.DEFAULT_CACHE_MAXIMUMSIZE,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override ILogManager
    @Override 
    public LogBean loadByPrimaryKey(Integer id)
    {
        return logCache.getBean(id);
    }

    //1.2
    @Override
    public LogBean loadByPrimaryKey(LogBean bean)
    {        
        return null == bean ? null : logCache.getBean(bean.getId());
    }



    
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

    //5.1 GET REFERENCED VALUE override ILogManager
    @Override 
    public DeviceBean getReferencedByDeviceId(LogBean bean)
    {
        if(null == bean)return null;
        bean.setReferencedByDeviceId(deviceCache.getBean(bean.getDeviceId())); 
        return bean.getReferencedByDeviceId();        
    }
    //5.1 GET REFERENCED VALUE override ILogManager
    @Override 
    public FaceBean getReferencedByCompareFace(LogBean bean)
    {
        if(null == bean)return null;
        bean.setReferencedByCompareFace(faceCache.getBean(bean.getCompareFace())); 
        return bean.getReferencedByCompareFace();        
    }
    //5.1 GET REFERENCED VALUE override ILogManager
    @Override 
    public FeatureBean getReferencedByVerifyFeature(LogBean bean)
    {
        if(null == bean)return null;
        bean.setReferencedByVerifyFeature(featureCache.getBean(bean.getVerifyFeature())); 
        return bean.getReferencedByVerifyFeature();        
    }
    //5.1 GET REFERENCED VALUE override ILogManager
    @Override 
    public PersonBean getReferencedByPersonId(LogBean bean)
    {
        if(null == bean)return null;
        bean.setReferencedByPersonId(personCache.getBean(bean.getPersonId())); 
        return bean.getReferencedByPersonId();        
    }
    private class CacheAction implements Action<LogBean>{
        final Action<LogBean> action;
        CacheAction(Action<LogBean>action){
            this.action = action;            
        }
        @Override
        public void call(LogBean bean) {
            if(null != action){
                action.call(bean);
            }
            logCache.put(bean);
        }
        @Override
        public LogBean getBean() {
            return null == action?null:action.getBean();
        }}
    //20-5
    @Override
    public int loadUsingTemplate(LogBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<LogBean> action)
    {
        if(null == fieldList )
            action = new CacheAction(action);
        return super.loadUsingTemplate(bean,fieldList,startRow,numRows,searchType,action);
    }

    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________


}
