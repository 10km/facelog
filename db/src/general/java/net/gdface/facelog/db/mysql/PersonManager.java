// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________



package net.gdface.facelog.db.mysql;

import java.util.List;
import java.util.Collection;
import java.util.concurrent.Callable;

import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.PersonListener;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.person.FlPersonManager;
import net.gdface.facelog.dborm.person.FlPersonBean;
import net.gdface.facelog.dborm.person.FlPersonListener;

/**
 * Handles database calls (save, load, count, etc...) for the fl_person table.
 * @author guyadong
 */
public class PersonManager 
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the id field.
     */
    public static final int ID_ID = 0;

    /**
     * Identify the group_id field.
     */
    public static final int ID_GROUP_ID = 1;

    /**
     * Identify the name field.
     */
    public static final int ID_NAME = 2;

    /**
     * Identify the sex field.
     */
    public static final int ID_SEX = 3;

    /**
     * Identify the birthdate field.
     */
    public static final int ID_BIRTHDATE = 4;

    /**
     * Identify the papers_type field.
     */
    public static final int ID_PAPERS_TYPE = 5;

    /**
     * Identify the papers_num field.
     */
    public static final int ID_PAPERS_NUM = 6;

    /**
     * Identify the photo_id field.
     */
    public static final int ID_PHOTO_ID = 7;

    /**
     * Identify the face_md5 field.
     */
    public static final int ID_FACE_MD5 = 8;

    /**
     * Identify the expiry_date field.
     */
    public static final int ID_EXPIRY_DATE = 9;

    /**
     * Identify the create_time field.
     */
    public static final int ID_CREATE_TIME = 10;

    /**
     * Identify the update_time field.
     */
    public static final int ID_UPDATE_TIME = 11;

    /**
     * Tablename.
     */
        public static final String TABLE_NAME="fl_person";
    /**
     * Contains all the full fields of the fl_person table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
        "fl_person.id"
        ,"fl_person.group_id"
        ,"fl_person.name"
        ,"fl_person.sex"
        ,"fl_person.birthdate"
        ,"fl_person.papers_type"
        ,"fl_person.papers_num"
        ,"fl_person.photo_id"
        ,"fl_person.face_md5"
        ,"fl_person.expiry_date"
        ,"fl_person.create_time"
        ,"fl_person.update_time"
    };

    /**
     * Contains all the fields of the fl_person table.
     */
    public static final String[] FIELD_NAMES =
    {
        "id"
        ,"group_id"
        ,"name"
        ,"sex"
        ,"birthdate"
        ,"papers_type"
        ,"papers_num"
        ,"photo_id"
        ,"face_md5"
        ,"expiry_date"
        ,"create_time"
        ,"update_time"
    };
   /**
     * Contains all the primarykey fields of the fl_person table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };
    /**
     * Field that contains the comma separated fields of the fl_person table.
     */
    public static final String ALL_FULL_FIELDS = "fl_person.id"
                            + ",fl_person.group_id"
                            + ",fl_person.name"
                            + ",fl_person.sex"
                            + ",fl_person.birthdate"
                            + ",fl_person.papers_type"
                            + ",fl_person.papers_num"
                            + ",fl_person.photo_id"
                            + ",fl_person.face_md5"
                            + ",fl_person.expiry_date"
                            + ",fl_person.create_time"
                            + ",fl_person.update_time";

    /**
     * Field that contains the comma separated fields of the fl_person table.
     */
    public static final String ALL_FIELDS = "id"
                            + ",group_id"
                            + ",name"
                            + ",sex"
                            + ",birthdate"
                            + ",papers_type"
                            + ",papers_num"
                            + ",photo_id"
                            + ",face_md5"
                            + ",expiry_date"
                            + ",create_time"
                            + ",update_time";

    public static interface Action{
          void call(PersonBean bean);
          PersonBean getBean();
     }

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }
    private FlPersonManager nativeManager = FlPersonManager.getInstance();
    private IDbConverter dbConverter = new DbConverter();
    private IBeanConverter<PersonBean,FlPersonBean> beanConverter;
    private static PersonManager singleton = new PersonManager();

    /**
     * Get the PersonManager singleton.
     *
     * @return PersonManager
     */
    public static PersonManager getInstance()
    {
        return singleton;
    }
    
    public FlPersonManager getNativeManager() {
        return nativeManager;
    }

    public void setNativeManager(FlPersonManager nativeManager) {
        this.nativeManager = nativeManager;
    }
    
    public IDbConverter getDbConverter() {
        return dbConverter;
    }

    public void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getPersonBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link PersonBean} from the fl_person using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique PersonBean or {@code null} if not found
     */
    //1
    public PersonBean loadByPrimaryKey(Integer id)
    {
        try{
            return this.beanConverter.fromNative(nativeManager.loadByPrimaryKey(id));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Loads a {@link PersonBean} from the fl_person using primary key fields of {@code bean}.
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link PersonBean} with primary key fields
     * @return a unique {@link PersonBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    //1.2
    public PersonBean loadByPrimaryKey(PersonBean bean)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadByPrimaryKey(this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Returns true if this fl_person contains row with primary key fields.
     * @author guyadong
     * @param id Integer - PK# 1
     * @see #loadByPrimaryKey(Integer id)
     */
    //1.3
    public boolean existsPrimaryKey(Integer id)
    {
        return null!=loadByPrimaryKey(id );

    }

    /**
     * Returns true if this fl_person contains row specified by primary key fields of {@link PersonBean}.<br>
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link PersonBean} with primary key fields
     * @return 
     * @see {@link #loadByPrimaryKey(PersonBean bean)}
     */
    //1.4
    //@Override
    public boolean existsPrimaryKey(PersonBean bean)
    {
        return null!=loadByPrimaryKey(bean);

    }
    
    /**
     * Delete row according to its primary keys.
     *
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(Integer id)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(id);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Delete row according to Primary Key fileds of the parameter{@code bean},
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the PersonBean with primary key fields
     * @return the number of deleted rows
     * @see {@link #deleteByPrimaryKey(Integer id)}
     */
    //2.1
    public int deleteByPrimaryKey(PersonBean bean)
    {
        try{
            return this.nativeManager.deleteByPrimaryKey(this.beanConverter.toNative(bean));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlFacebyPersonId -> FaceBean</li>
     *     <li> impFlLogbyPersonId -> LogBean</li>
     * </ul>
     * @param bean the {@link PersonBean} object to use
     * @param fkName valid values: impFlFacebyPersonId,impFlLogbyPersonId
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    //@Override
    public <T> T[] getImportedBeans(PersonBean bean,String fkName){
        try {
            return nativeManager.getImportedBeans( this.beanConverter.toNative(bean),fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlFacebyPersonId -> FaceBean</li>
     *     <li> impFlLogbyPersonId -> LogBean</li>
     * </ul>
     * @param bean the {@link PersonBean} object to use
     * @param fkName valid values: impFlFacebyPersonId,impFlLogbyPersonId
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    //@Override
    public <T> List<T> getImportedBeansAsList(PersonBean bean,String fkName){
        try {
            return nativeManager.getImportedBeansAsList( this.beanConverter.toNative(bean),fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> impFlFacebyPersonId -> FaceBean</li>
     *     <li> impFlLogbyPersonId -> LogBean</li>
     * </ul>
     * @param bean the {@link PersonBean} object to use
     * @param importedBeans the ${importedClass} array to associate to the {@link PersonBean}
     * @param fkName valid values: impFlFacebyPersonId,impFlLogbyPersonId
     * @return importedBeans always
     */
    //@Override
    public <T> T[] setImportedBeans(PersonBean bean,T[] importedBeans,String fkName){
        try {
            return nativeManager.setImportedBeans( this.beanConverter.toNative(bean),importedBeans,fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T>
     * <ul>
     *     <li> impFlFacebyPersonId -> FaceBean Collection</li>
     *     <li> impFlLogbyPersonId -> LogBean Collection</li>
     * </ul>
     * @param bean the {@link PersonBean} object to use
     * @param importedBeans the <T> object to associate to the {@link PersonBean}
     * @param fkName valid values: impFlFacebyPersonId,impFlLogbyPersonId
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    //@Override
    public <T extends Collection<PersonBean>> T setImportedBeans(PersonBean bean,T importedBeans,String fkName){
        try {
            return (T) this.beanConverter.fromNative(nativeManager.setImportedBeans( this.beanConverter.toNative(bean),this.beanConverter.toNative(importedBeans),fkName));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FaceBean} object from the fl_face.person_id field.<BR>
     * FK_NAME : fl_face_ibfk_2 
     * @param bean the {@link PersonBean}
     * @return the associated {@link FaceBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public FaceBean[] getFlFaceBeansByPersonId(PersonBean bean)
    {
        try {
            return this.dbConverter.getFaceBeanConverter().fromNative(nativeManager.getFlFaceBeansByPersonId( this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Retrieves the {@link FaceBean} object from fl_face.person_id field.<BR>
     * FK_NAME:fl_face_ibfk_2
     * @param bean the {@link PersonBean}
     * @return the associated {@link FaceBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public List<FaceBean> getFlFaceBeansByPersonIdAsList(PersonBean bean)
    {
        try {
            return this.dbConverter.getFaceBeanConverter().fromNative(nativeManager.getFlFaceBeansByPersonIdAsList( this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link FaceBean} object array associate to PersonBean by the fl_face.person_id field.<BR>
     * FK_NAME : fl_face_ibfk_2 
     * @param bean the referenced {@link PersonBean}
     * @param importedBeans imported beans from fl_face
     * @return importedBeans always
     * @see {@link FlFaceManager#setReferencedByPersonId(FaceBean, PersonBean)
     */
    //3.3 SET IMPORTED
    public FaceBean[] setFlFaceBeansByPersonId(PersonBean bean , FaceBean[] importedBeans)
    {
        try {
            return this.dbConverter.getFaceBeanConverter().fromNative(this.nativeManager.setFlFaceBeansByPersonId(
                 this.beanConverter.toNative(bean),
                this.dbConverter.getFaceBeanConverter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link FaceBean} object collection associate to PersonBean by the fl_face.person_id field.<BR>
     * FK_NAME:fl_face_ibfk_2
     * @param bean the referenced {@link PersonBean} 
     * @param importedBeans imported beans from fl_face 
     * @return importedBeans always
     * @see {@link FlFaceManager#setReferencedByPersonId(FaceBean, PersonBean)
     */
    //3.4 SET IMPORTED
    @SuppressWarnings("unchecked")
    public <T extends Collection<FaceBean>> T setFlFaceBeansByPersonId(PersonBean bean , T importedBeans)
    {
        try {
            return (T) this.dbConverter.getFaceBeanConverter().fromNative(nativeManager.setFlFaceBeansByPersonId(
                 this.beanConverter.toNative(bean),
                this.dbConverter.getFaceBeanConverter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Retrieves the {@link LogBean} object from the fl_log.person_id field.<BR>
     * FK_NAME : fl_log_ibfk_1 
     * @param bean the {@link PersonBean}
     * @return the associated {@link LogBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public LogBean[] getFlLogBeansByPersonId(PersonBean bean)
    {
        try {
            return this.dbConverter.getLogBeanConverter().fromNative(nativeManager.getFlLogBeansByPersonId( this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Retrieves the {@link LogBean} object from fl_log.person_id field.<BR>
     * FK_NAME:fl_log_ibfk_1
     * @param bean the {@link PersonBean}
     * @return the associated {@link LogBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public List<LogBean> getFlLogBeansByPersonIdAsList(PersonBean bean)
    {
        try {
            return this.dbConverter.getLogBeanConverter().fromNative(nativeManager.getFlLogBeansByPersonIdAsList( this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link LogBean} object array associate to PersonBean by the fl_log.person_id field.<BR>
     * FK_NAME : fl_log_ibfk_1 
     * @param bean the referenced {@link PersonBean}
     * @param importedBeans imported beans from fl_log
     * @return importedBeans always
     * @see {@link FlLogManager#setReferencedByPersonId(LogBean, PersonBean)
     */
    //3.3 SET IMPORTED
    public LogBean[] setFlLogBeansByPersonId(PersonBean bean , LogBean[] importedBeans)
    {
        try {
            return this.dbConverter.getLogBeanConverter().fromNative(this.nativeManager.setFlLogBeansByPersonId(
                 this.beanConverter.toNative(bean),
                this.dbConverter.getLogBeanConverter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link LogBean} object collection associate to PersonBean by the fl_log.person_id field.<BR>
     * FK_NAME:fl_log_ibfk_1
     * @param bean the referenced {@link PersonBean} 
     * @param importedBeans imported beans from fl_log 
     * @return importedBeans always
     * @see {@link FlLogManager#setReferencedByPersonId(LogBean, PersonBean)
     */
    //3.4 SET IMPORTED
    @SuppressWarnings("unchecked")
    public <T extends Collection<LogBean>> T setFlLogBeansByPersonId(PersonBean bean , T importedBeans)
    {
        try {
            return (T) this.dbConverter.getLogBeanConverter().fromNative(nativeManager.setFlLogBeansByPersonId(
                 this.beanConverter.toNative(bean),
                this.dbConverter.getLogBeanConverter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }



    /**
     * Save the PersonBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link PersonBean} bean to be saved
     * @param refFlImagebyPhotoId the {@link ImageBean} bean referenced by {@link PersonBean} 
     * @param impFlFacebyPersonId the {@link FaceBean} bean refer to {@link PersonBean} 
     * @param impFlLogbyPersonId the {@link LogBean} bean refer to {@link PersonBean} 
     * @return the inserted or updated {@link PersonBean} bean
     */
    //3.5 SYNC SAVE 
    public PersonBean save(PersonBean bean
        , ImageBean refFlImagebyPhotoId 
        , FaceBean[] impFlFacebyPersonId , LogBean[] impFlLogbyPersonId )
    {
        try{
            return this.beanConverter.fromNative(nativeManager.save(this.beanConverter.toNative(bean)
            , this.dbConverter.getImageBeanConverter().toNative(refFlImagebyPhotoId)             , this.dbConverter.getFaceBeanConverter().toNative(impFlFacebyPersonId)  , this.dbConverter.getLogBeanConverter().toNative(impFlLogbyPersonId)  ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(PersonBean , ImageBean , FaceBean[] , LogBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public PersonBean saveAsTransaction(final PersonBean bean
        ,final ImageBean refFlImagebyPhotoId 
        ,final FaceBean[] impFlFacebyPersonId ,final LogBean[] impFlLogbyPersonId )
    {
        return this.runAsTransaction(new Callable<PersonBean>(){
            @Override
            public PersonBean call() throws Exception {
                return save(bean , refFlImagebyPhotoId , impFlFacebyPersonId , impFlLogbyPersonId );
            }});
    }
    /**
     * Save the PersonBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link PersonBean} bean to be saved
     * @param refFlImagebyPhotoId the {@link ImageBean} bean referenced by {@link PersonBean} 
     * @param impFlFacebyPersonId the {@link FaceBean} bean refer to {@link PersonBean} 
     * @param impFlLogbyPersonId the {@link LogBean} bean refer to {@link PersonBean} 
     * @return the inserted or updated {@link PersonBean} bean
     */
    //3.7 SYNC SAVE 
    public PersonBean save(PersonBean bean
        , ImageBean refFlImagebyPhotoId 
        , Collection<FaceBean> impFlFacebyPersonId , Collection<LogBean> impFlLogbyPersonId )
    {
        try{
            return this.beanConverter.fromNative(nativeManager.save(this.beanConverter.toNative(bean)
            , this.dbConverter.getImageBeanConverter().toNative(refFlImagebyPhotoId)             , this.dbConverter.getFaceBeanConverter().toNative(impFlFacebyPersonId)  , this.dbConverter.getLogBeanConverter().toNative(impFlLogbyPersonId)  ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save(PersonBean , ImageBean , Collection , Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public PersonBean saveAsTransaction(final PersonBean bean
        ,final ImageBean refFlImagebyPhotoId 
        ,final  Collection<FaceBean> impFlFacebyPersonId ,final  Collection<LogBean> impFlLogbyPersonId ) throws DAOException
    {
        return this.runAsTransaction(new Callable<PersonBean>(){
            @Override
            public PersonBean call() throws Exception {
                return save(bean , refFlImagebyPhotoId , impFlFacebyPersonId , impFlLogbyPersonId );
            }});
    }
      //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Class<?>[]> REF_METHODS=new java.util.HashMap<String,Class<?>[]>(){
        private static final long serialVersionUID = 1L;
    {        
    put("refFlImagebyPhotoId",new Class<?>[]{ImageBean.class,net.gdface.facelog.dborm.image.FlImageBean.class});
    }} ;
    /**
     * Retrieves the bean object referenced by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> refFlImagebyPhotoId -> ImageBean</li>
     * </ul>
     * @param bean the {@link PersonBean} object to use
     * @param fkName valid values: refFlImagebyPhotoId
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    //@Override
    public <T> T getReferencedBean(PersonBean bean,String fkName){
        try {
            return this.nativeManager.getReferencedBean( this.beanConverter.toNative(bean), fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Associates the {@link PersonBean} object to the bean object by fkName field.<br>
     * 
     * @param <T>
     * <ul>
     *     <li> refFlImagebyPhotoId -> ImageBean</li>
     * </ul>
     * @param bean the {@link PersonBean} object to use
     * @param beanToSet the <T> object to associate to the {@link PersonBean}
     * @param fkName valid values: refFlImagebyPhotoId
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    @SuppressWarnings("unchecked")
    //@Override
    public <T> T setReferencedBean(PersonBean bean,T beanToSet,String fkName){
        try {
            if(null == beanToSet) return null;
            Class<?>[] types=REF_METHODS.get(fkName);
            if(null == types)
                throw new IllegalArgumentException(String.format("invalid fkName :%s",fkName));
            @SuppressWarnings("rawtypes")
            IBeanConverter converter=this.dbConverter.getBeanConverter(beanToSet.getClass(),types[1]);
            if( null == converter )
                throw new IllegalArgumentException(String.format("invalid type of 'beanToSet' :%s",beanToSet.getClass().getName()));
            return (T) converter.fromNative(this.nativeManager.setReferencedBean( this.beanConverter.toNative(bean), converter.toNative(beanToSet), fkName));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the {@link ImageBean} object referenced by {@link PersonBean#getPhotoId}() field.<br>
     * FK_NAME : fl_person_ibfk_1
     * @param bean the {@link PersonBean}
     * @return the associated {@link ImageBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET REFERENCED VALUE
    public ImageBean getReferencedByPhotoId(PersonBean bean)
    {
        try{
            return this.dbConverter.getImageBeanConverter().fromNative(this.nativeManager.getReferencedByPhotoId(this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
        
    }

    /**
     * Associates the {@link PersonBean} object to the {@link ImageBean} object by {@link PersonBean#getPhotoId}() field.
     *
     * @param bean the {@link PersonBean} object to use
     * @param beanToSet the {@link ImageBean} object to associate to the {@link PersonBean}
     * @return the associated {@link ImageBean} bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public ImageBean setReferencedByPhotoId(PersonBean bean, ImageBean beanToSet) throws DAOException
    {
        try{
            return this.dbConverter.getImageBeanConverter().fromNative(this.nativeManager.setReferencedByPhotoId(this.beanConverter.toNative(bean),this.dbConverter.getImageBeanConverter().toNative(beanToSet)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from fl_person.
     *
     * @return an array of FlPersonManager bean
     */
    //5
    public PersonBean[] loadAll()
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadUsingTemplate(null));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Loads each row from fl_person and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //5-1
    public int loadAll(Action action)
    {
        return this.loadUsingTemplate(null,action);
    }
    /**
     * Loads all the rows from fl_person.
     *
     * @return a list of PersonBean bean
     */
    //5-2
    public List<PersonBean> loadAllAsList()
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from fl_person, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of FlPersonManager bean
     */
    //6
    public PersonBean[] loadAll(int startRow, int numRows)
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }
    /**
     *  Loads the given number of rows from fl_person, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //6-1
    public int loadAll(int startRow, int numRows,Action action)
    {
        return this.loadUsingTemplate(null, startRow, numRows,action);
    }
    /**
     * Loads the given number of rows from fl_person, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlPersonManager bean
     */
    //6-2
    public List<PersonBean> loadAllAsList(int startRow, int numRows)
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of PersonBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting PersonBean table
     */
    //7
    public PersonBean[] loadByWhere(String where)
    {
        return this.loadByWhere(where, (int[])null);
    }
    /**
     * Retrieves a list of PersonBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting PersonBean table
     */
    //7
    public List<PersonBean> loadByWhereAsList(String where)
    {
        return this.loadByWhereAsList(where, null);
    }
    /**
     * Retrieves each row of PersonBean given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //7-1
    public int loadByWhere(String where,Action action)
    {
        return this.loadByWhere(where, null,action);
    }
    /**
     * Retrieves an array of PersonBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting PersonBean table
     */
    //8
    public PersonBean[] loadByWhere(String where, int[] fieldList)
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of PersonBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting PersonBean table
     */
    //8
    public List<PersonBean> loadByWhereAsList(String where, int[] fieldList)
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }
    /**
     * Retrieves each row of PersonBean given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //8-1
    public int loadByWhere(String where, int[] fieldList,Action action)
    {
        return this.loadByWhere(where, fieldList, 1, -1,action);
    }

    /**
     * Retrieves an array of PersonBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting PersonBean table
     */
    //9
    public PersonBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows)
    {
        return (PersonBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new PersonBean[0]);
    }
    /**
     * Retrieves each row of  PersonBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //9-1
    public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action action)
    {
        return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
    }

    /**
     * Retrieves a list of PersonBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting PersonBean table
     */
    //9-2
    public List<PersonBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadByWhereAsList(where,fieldList,startRow,numRows));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Retrieves each row of PersonBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //9-3
    public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action action)
    {
        try{
            return this.nativeManager.loadByWhereForAction(where,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Deletes all rows from fl_person table.
     * @return the number of deleted rows.
     */
    //10
    public int deleteAll()
    {
        return this.deleteByWhere("");
    }

    /**
     * Deletes rows from the fl_person table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    //11
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the PersonBean bean into the database.
     *
     * @param bean the PersonBean bean to be saved
     * @return the inserted or updated bean
     */
    //12
    public PersonBean save(PersonBean bean)
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the PersonBean bean into the database.
     *
     * @param bean the PersonBean bean to be saved
     * @return the inserted bean
     */
    //13
    public PersonBean insert(PersonBean bean)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.insert(this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Update the PersonBean bean record in the database according to the changes.
     *
     * @param bean the PersonBean bean to be updated
     * @return the updated bean
     */
    //14
    public PersonBean update(PersonBean bean)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.update(this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Saves an array of PersonBean beans into the database.
     *
     * @param beans the PersonBean bean table to be saved
     * @return the saved PersonBean array.
     */
    //15
    public PersonBean[] save(PersonBean[] beans)
    {
        for (PersonBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a list of PersonBean beans into the database.
     *
     * @param beans the PersonBean bean table to be saved
     * @return the saved PersonBean array.
     */
    //15-2
    public <T extends Collection<PersonBean>>T save(T beans)
    {
        for (PersonBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }
    /**
     * Saves an array of PersonBean beans as transaction into the database.
     *
     * @param beans the PersonBean bean table to be saved
     * @return the saved PersonBean array.
     * @see #save(PersonBean[])
     */
    //15-3
    public PersonBean[] saveAsTransaction(final PersonBean[] beans) {
        return this.runAsTransaction(new Callable<PersonBean[]>(){
            @Override
            public PersonBean[] call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Saves a list of PersonBean beans as transaction into the database.
     *
     * @param beans the PersonBean bean table to be saved
     * @return the saved PersonBean array.
     * @see #save(List)
     */
    //15-4
    public <T extends Collection<PersonBean>> T saveAsTransaction(final T beans){
        return this.runAsTransaction(new Callable<T>(){
            @Override
            public T call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Insert an array of PersonBean beans into the database.
     *
     * @param beans the PersonBean bean table to be inserted
     * @return the saved PersonBean array.
     */
    //16
    public PersonBean[] insert(PersonBean[] beans)
    {
        return this.save(beans);
    }

    /**
     * Insert a list of PersonBean beans into the database.
     *
     * @param beans the PersonBean bean table to be inserted
     * @return the saved PersonBean array.
     */
    //16-2
    public <T extends Collection<PersonBean>> T insert(T beans)
    {
        return this.save(beans);
    }
    
    /**
     * Insert an array of PersonBean beans as transaction into the database.
     *
     * @param beans the PersonBean bean table to be inserted
     * @return the saved PersonBean array.
     * @see #saveAsTransaction(PersonBean[])
     */
    //16-3
    public PersonBean[] insertAsTransaction(PersonBean[] beans)
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Insert a list of PersonBean beans as transaction into the database.
     *
     * @param beans the PersonBean bean table to be inserted
     * @return the saved PersonBean array.
     * @see #saveAsTransaction(List)
     */
    //16-4
    public <T extends Collection<PersonBean>> T insertAsTransaction(T beans)
    {
        return this.saveAsTransaction(beans);
    }


    /**
     * Updates an array of PersonBean beans into the database.
     *
     * @param beans the PersonBean bean table to be inserted
     * @return the saved PersonBean array.
     */
    //17
    public PersonBean[] update(PersonBean[] beans)
    {
        return this.save(beans);
    }

    /**
     * Updates a list of PersonBean beans into the database.
     *
     * @param beans the PersonBean bean table to be inserted
     * @return the saved PersonBean array.
     */
    //17-2
    public <T extends Collection<PersonBean>> T update(T beans)
    {
        return this.save(beans);
    }
    
    /**
     * Updates an array of PersonBean beans as transaction into the database.
     *
     * @param beans the PersonBean bean table to be inserted
     * @return the saved PersonBean array.
     * @see #saveAsTransaction(PersonBean[])
     */
    //17-3
    public PersonBean[] updateAsTransaction(PersonBean[] beans)
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Updates a list of PersonBean beans as transaction into the database.
     *
     * @param beans the PersonBean bean table to be inserted
     * @return the saved PersonBean array.
     * @see #saveAsTransaction(List)
     */
    //17-4
    public <T extends Collection<PersonBean>> T updateAsTransaction(T beans)
    {
        return this.saveAsTransaction(beans);
    }
    
    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique PersonBean bean from a template one giving a c
     *
     * @param bean the PersonBean bean to look for
     * @return the bean matching the template
     */
    //18
    public PersonBean loadUniqueUsingTemplate(PersonBean bean)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
     }

    /**
     * Loads an array of PersonBean from a template one.
     *
     * @param bean the PersonBean template to look for
     * @return all the PersonBean matching the template
     */
    //19
    public PersonBean[] loadUsingTemplate(PersonBean bean)
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the PersonBean template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //19-1
    public int loadUsingTemplate(PersonBean bean,Action action)
    {
        return this.loadUsingTemplate(bean, 1, -1,action);
    }

    /**
     * Loads a list of PersonBean from a template one.
     *
     * @param bean the PersonBean template to look for
     * @return all the PersonBean matching the template
     */
    //19-2
    public List<PersonBean> loadUsingTemplateAsList(PersonBean bean)
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of PersonBean from a template one, given the start row and number of rows.
     *
     * @param bean the PersonBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the PersonBean matching the template
     */
    //20
    public PersonBean[] loadUsingTemplate(PersonBean bean, int startRow, int numRows)
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the PersonBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //20-1
    public int loadUsingTemplate(PersonBean bean, int startRow, int numRows,Action action)
    {
        return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
    }
    /**
     * Loads a list of PersonBean from a template one, given the start row and number of rows.
     *
     * @param bean the PersonBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the PersonBean matching the template
     */
    //20-2
    public List<PersonBean> loadUsingTemplateAsList(PersonBean bean, int startRow, int numRows)
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of PersonBean from a template one, given the start row and number of rows.
     *
     * @param bean the PersonBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the PersonBean matching the template
     */
    //20-3
    public PersonBean[] loadUsingTemplate(PersonBean bean, int startRow, int numRows, int searchType)
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new PersonBean[0]);
    }

    /**
     * Loads a list of PersonBean from a template one, given the start row and number of rows.
     *
     * @param bean the PersonBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the PersonBean matching the template
     */
    //20-4
    public List<PersonBean> loadUsingTemplateAsList(PersonBean beanBase, int startRow, int numRows, int searchType)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadUsingTemplateAsList(this.beanConverter.toNative(beanBase),startRow,numRows,searchType));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }        
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the PersonBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //20-5
    public int loadUsingTemplate(PersonBean beanBase, int[] fieldList, int startRow, int numRows,int searchType, Action action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toNative(beanBase),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Deletes rows using a PersonBean template.
     *
     * @param bean the PersonBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //21
    public int deleteUsingTemplate(PersonBean beanBase)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toNative(beanBase));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an unique PersonBean using the face_md5 index.
     *
     * @param faceMd5 the face_md5 column's value filter. must not be null
     * @return an array of PersonBean
     */
    public PersonBean loadByface_md5(String faceMd5)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadByface_md5(faceMd5));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

 
    /**
     * Deletes rows using the face_md5 index.
     *
     * @param faceMd5 the face_md5 column's value filter.
     * @return the number of deleted objects
     */
    public int deleteByface_md5(String faceMd5)
    {
        try{
            return this.nativeManager.deleteByface_md5(faceMd5);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * Retrieves an unique PersonBean using the papers_num index.
     *
     * @param papersNum the papers_num column's value filter. must not be null
     * @return an array of PersonBean
     */
    public PersonBean loadBypapers_num(String papersNum)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadBypapers_num(papersNum));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

 
    /**
     * Deletes rows using the papers_num index.
     *
     * @param papersNum the papers_num column's value filter.
     * @return the number of deleted objects
     */
    public int deleteBypapers_num(String papersNum)
    {
        try{
            return this.nativeManager.deleteBypapers_num(papersNum);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * Retrieves an unique PersonBean using the photo_id index.
     *
     * @param photoId the photo_id column's value filter. must not be null
     * @return an array of PersonBean
     */
    public PersonBean loadByphoto_id(String photoId)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadByphoto_id(photoId));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

 
    /**
     * Deletes rows using the photo_id index.
     *
     * @param photoId the photo_id column's value filter.
     * @return the number of deleted objects
     */
    public int deleteByphoto_id(String photoId)
    {
        try{
            return this.nativeManager.deleteByphoto_id(photoId);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    
     /**
     * Retrieves an array of PersonBean using the expiry_date index.
     *
     * @param expiryDate the expiry_date column's value filter.
     * @return an array of PersonBean
     */
    public PersonBean[] loadByexpiry_date(java.util.Date expiryDate)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadByexpiry_date(expiryDate));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * Retrieves a list of PersonBean using the expiry_date index.
     *
     * @param expiryDate the expiry_date column's value filter.
     * @return a list of PersonBean
     */
    public List<PersonBean> loadByexpiry_dateAsList(java.util.Date expiryDate)
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadByexpiry_dateAsList(expiryDate));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
 
    /**
     * Deletes rows using the expiry_date index.
     *
     * @param expiryDate the expiry_date column's value filter.
     * @return the number of deleted objects
     */
    public int deleteByexpiry_date(java.util.Date expiryDate)
    {
        try{
            return this.nativeManager.deleteByexpiry_date(expiryDate);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table fl_person.
     *
     * @return the number of rows returned
     */
    //24
    public int countAll() 
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table fl_person with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    //25
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * count the number of elements of a specific PersonBean bean
     *
     * @param bean the PersonBean bean to look for ant count
     * @return the number of rows returned
     */
    //27
    public int countUsingTemplate(PersonBean bean)
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific PersonBean bean , given the start row and number of rows.
     *
     * @param bean the PersonBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     */
    //20
    public int countUsingTemplate(PersonBean bean, int startRow, int numRows)
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific PersonBean bean given the start row and number of rows and the search type
     *
     * @param bean the PersonBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     */
    //20
    public int countUsingTemplate(PersonBean beanBase, int startRow, int numRows, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toNative(beanBase),startRow,numRows,searchType);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    /**
     * Registers a unique PersonListener listener.
     */
    //35
    public void registerListener(TableListener listener)
    {
        this.nativeManager.registerListener(this.toNative((PersonListener)listener));
    }

    private FlPersonListener toNative(final PersonListener listener) {
        return null == listener ?null:new FlPersonListener (){

            @Override
            public void beforeInsert(FlPersonBean bean) throws DAOException {
                listener.beforeInsert(PersonManager.this.beanConverter.fromNative(bean));                
            }

            @Override
            public void afterInsert(FlPersonBean bean) throws DAOException {
                listener.afterInsert(PersonManager.this.beanConverter.fromNative(bean));
                
            }

            @Override
            public void beforeUpdate(FlPersonBean bean) throws DAOException {
                listener.beforeUpdate(PersonManager.this.beanConverter.fromNative(bean));
                
            }

            @Override
            public void afterUpdate(FlPersonBean bean) throws DAOException {
                listener.afterUpdate(PersonManager.this.beanConverter.fromNative(bean));
            }

            @Override
            public void beforeDelete(FlPersonBean bean) throws DAOException {
                listener.beforeDelete(PersonManager.this.beanConverter.fromNative(bean));
            }

            @Override
            public void afterDelete(FlPersonBean bean) throws DAOException {
                listener.afterDelete(PersonManager.this.beanConverter.fromNative(bean));
            }};
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________


    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     * @author guyadong
     */
    //43
    public static boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of PersonBean
     */
    public PersonBean[] loadBySql(String sql, Object[] argList, int[] fieldList) {
        return loadBySqlAsList(sql, argList, fieldList).toArray(new PersonBean[0]);
    }
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of PersonBean
     */
    public List<PersonBean> loadBySqlAsList(String sql, Object[] argList, int[] fieldList){
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadBySqlAsList(sql,argList,fieldList));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    
    //@Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    
    //@Override
    public void runAsTransaction(final Runnable fun){
        try{
            this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    private FlPersonManager.Action toNative(final Action action){
        if(null == action)
            throw new NullPointerException();
        return new FlPersonManager.Action(){

            @Override
            public void call(FlPersonBean bean) {
                action.call(PersonManager.this.beanConverter.fromNative(bean));
            }

            @Override
            public FlPersonBean getBean() {
                return  PersonManager.this.beanConverter.toNative(action.getBean());
            }};
    }
}
