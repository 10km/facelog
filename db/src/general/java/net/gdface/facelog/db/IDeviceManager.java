// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db;

/**
 * Interface to handle database calls (save, load, count, etc...) for the fl_device table.<br>
 * @author guyadong
 */
public interface IDeviceManager extends TableManager<DeviceBean>
{  
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link DeviceBean} from the fl_device using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique DeviceBean or {@code null} if not found
     */
    //1
    public DeviceBean loadByPrimaryKey(Integer id);

    
    /**
     * Returns true if this fl_device contains row with primary key fields.
     * @param id Integer - PK# 1
     * @see #loadByPrimaryKey($keys)
     */
    //1.4
    public boolean existsPrimaryKey(Integer id);
    
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     *
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(Integer id);

 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link ImageBean} object from the fl_image.device_id field.<BR>
     * FK_NAME : fl_image_ibfk_3 
     * @param bean the {@link DeviceBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public ImageBean[] getFlImageBeansByDeviceId(DeviceBean bean);
    
    /**
     * Retrieves the {@link ImageBean} object from the fl_image.device_id field.<BR>
     * FK_NAME : fl_image_ibfk_3 
     * @param id Integer - PK# 1
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public ImageBean[] getFlImageBeansByDeviceId(Integer deviceId);
    
    /**
     * Retrieves the {@link ImageBean} object from fl_image.device_id field.<BR>
     * FK_NAME:fl_image_ibfk_3
     * @param bean the {@link DeviceBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public java.util.List<ImageBean> getFlImageBeansByDeviceIdAsList(DeviceBean bean);

    /**
     * Retrieves the {@link ImageBean} object from fl_image.device_id field.<BR>
     * FK_NAME:fl_image_ibfk_3
     * @param id Integer - PK# 1
     * @return the associated {@link ImageBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public java.util.List<ImageBean> getFlImageBeansByDeviceIdAsList(Integer deviceId);
    
    /**
     * set  the {@link ImageBean} object array associate to DeviceBean by the fl_image.device_id field.<BR>
     * FK_NAME : fl_image_ibfk_3 
     * @param bean the referenced {@link DeviceBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @see {@link ImageManager#setReferencedByDeviceId(ImageBean, DeviceBean)
     */
    //3.3 SET IMPORTED
    public ImageBean[] setFlImageBeansByDeviceId(DeviceBean bean , ImageBean[] importedBeans);

    /**
     * set  the {@link ImageBean} object java.util.Collection associate to DeviceBean by the fl_image.device_id field.<BR>
     * FK_NAME:fl_image_ibfk_3
     * @param bean the referenced {@link DeviceBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @see {@link ImageManager#setReferencedByDeviceId(ImageBean, DeviceBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<ImageBean>> C setFlImageBeansByDeviceId(DeviceBean bean , C importedBeans);

    /**
     * Retrieves the {@link LogBean} object from the fl_log.device_id field.<BR>
     * FK_NAME : fl_log_ibfk_2 
     * @param bean the {@link DeviceBean}
     * @return the associated {@link LogBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public LogBean[] getFlLogBeansByDeviceId(DeviceBean bean);
    
    /**
     * Retrieves the {@link LogBean} object from the fl_log.device_id field.<BR>
     * FK_NAME : fl_log_ibfk_2 
     * @param id Integer - PK# 1
     * @return the associated {@link LogBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public LogBean[] getFlLogBeansByDeviceId(Integer deviceId);
    
    /**
     * Retrieves the {@link LogBean} object from fl_log.device_id field.<BR>
     * FK_NAME:fl_log_ibfk_2
     * @param bean the {@link DeviceBean}
     * @return the associated {@link LogBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public java.util.List<LogBean> getFlLogBeansByDeviceIdAsList(DeviceBean bean);

    /**
     * Retrieves the {@link LogBean} object from fl_log.device_id field.<BR>
     * FK_NAME:fl_log_ibfk_2
     * @param id Integer - PK# 1
     * @return the associated {@link LogBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public java.util.List<LogBean> getFlLogBeansByDeviceIdAsList(Integer deviceId);
    
    /**
     * set  the {@link LogBean} object array associate to DeviceBean by the fl_log.device_id field.<BR>
     * FK_NAME : fl_log_ibfk_2 
     * @param bean the referenced {@link DeviceBean}
     * @param importedBeans imported beans from fl_log
     * @return importedBeans always
     * @see {@link LogManager#setReferencedByDeviceId(LogBean, DeviceBean)
     */
    //3.3 SET IMPORTED
    public LogBean[] setFlLogBeansByDeviceId(DeviceBean bean , LogBean[] importedBeans);

    /**
     * set  the {@link LogBean} object java.util.Collection associate to DeviceBean by the fl_log.device_id field.<BR>
     * FK_NAME:fl_log_ibfk_2
     * @param bean the referenced {@link DeviceBean} 
     * @param importedBeans imported beans from fl_log 
     * @return importedBeans always
     * @see {@link LogManager#setReferencedByDeviceId(LogBean, DeviceBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<LogBean>> C setFlLogBeansByDeviceId(DeviceBean bean , C importedBeans);

    /**
     * Save the DeviceBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link DeviceBean} bean to be saved
         * @param impFlImagebyDeviceId the {@link ImageBean} bean refer to {@link DeviceBean} 
     * @param impFlLogbyDeviceId the {@link LogBean} bean refer to {@link DeviceBean} 
     * @return the inserted or updated {@link DeviceBean} bean
     */
    //3.5 SYNC SAVE 
    public DeviceBean save(DeviceBean bean
        
        , ImageBean[] impFlImagebyDeviceId , LogBean[] impFlLogbyDeviceId );
    /**
     * Transaction version for sync save
     * @see {@link #save(DeviceBean , ImageBean[] , LogBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public DeviceBean saveAsTransaction(final DeviceBean bean
        
        ,final ImageBean[] impFlImagebyDeviceId ,final LogBean[] impFlLogbyDeviceId );
    /**
     * Save the DeviceBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link DeviceBean} bean to be saved
         * @param impFlImagebyDeviceId the {@link ImageBean} bean refer to {@link DeviceBean} 
     * @param impFlLogbyDeviceId the {@link LogBean} bean refer to {@link DeviceBean} 
     * @return the inserted or updated {@link DeviceBean} bean
     */
    //3.7 SYNC SAVE 
    public DeviceBean save(DeviceBean bean
        
        , java.util.Collection<ImageBean> impFlImagebyDeviceId , java.util.Collection<LogBean> impFlLogbyDeviceId );
    /**
     * Transaction version for sync save
     * @see {@link #save(DeviceBean , java.util.Collection , java.util.Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public DeviceBean saveAsTransaction(final DeviceBean bean
        
        ,final  java.util.Collection<ImageBean> impFlImagebyDeviceId ,final  java.util.Collection<LogBean> impFlLogbyDeviceId );
      //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

     /**
     * Retrieves an array of DeviceBean using the group_id index.
     *
     * @param groupId the group_id column's value filter.
     * @return an array of DeviceBean
     */
    public DeviceBean[] loadByIndexGroupId(Integer groupId);
    
    /**
     * Retrieves a list of DeviceBean using the group_id index.
     *
     * @param groupId the group_id column's value filter.
     * @return a list of DeviceBean
     */
    public java.util.List<DeviceBean> loadByIndexGroupIdAsList(Integer groupId);

    /**
     * Deletes rows using the group_id index.
     *
     * @param groupId the group_id column's value filter.
     * @return the number of deleted objects
     */
    public int deleteByIndexGroupId(Integer groupId);
    
}
