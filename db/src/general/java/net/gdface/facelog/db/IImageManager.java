// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db;

/**
 * Interface to handle database calls (save, load, count, etc...) for the fl_image table.<br>
 * @author guyadong
 */
public interface IImageManager extends TableManager<ImageBean>
{  
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link ImageBean} from the fl_image using primary key fields.
     *
     * @param md5 String - PK# 1
     * @return a unique ImageBean or {@code null} if not found
     */
    //1
    public ImageBean loadByPrimaryKey(String md5);

    
    /**
     * Returns true if this fl_image contains row with primary key fields.
     * @param md5 String - PK# 1
     * @see #loadByPrimaryKey($keys)
     */
    //1.4
    public boolean existsPrimaryKey(String md5);
    /**
     * Check duplicated row by primary keys,if row exists throw exception
     * @param md5 String
     */
    //1.4.1
    public String checkDuplicate(String md5);
    /**
     * Loads {@link ImageBean} from the fl_image using primary key fields.
     *
     * @param keys primary keys array
     * @return list of ImageBean
     */
    //1.8
    public java.util.List<ImageBean> loadByPrimaryKey(String... keys);
    /**
     * Loads {@link ImageBean} from the fl_image using primary key fields.
     *
     * @param keys primary keys collection
     * @return list of ImageBean
     */
    //1.9
    public java.util.List<ImageBean> loadByPrimaryKey(java.util.Collection<String> keys);
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     *
     * @param md5 String - PK# 1
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(String md5);
    /**
     * Delete rows according to primary key.<br>
     *
     * @param keys primary keys array
     * @return the number of deleted rows
     */
    //2.2
    public int deleteByPrimaryKey(String... keys);
    /**
     * Delete rows according to primary key.<br>
     *
     * @param keys primary keys collection
     * @return the number of deleted rows
     */
    //2.3
    public int deleteByPrimaryKey(java.util.Collection<String> keys);
    /**
     * Delete beans.<br>
     *
     * @param beans ImageBean collection wille be deleted
     * @return the number of deleted rows
     */
    //2.4
    public int delete(ImageBean... beans);
    /**
     * Delete beans.<br>
     *
     * @param beans ImageBean collection wille be deleted
     * @return the number of deleted rows
     */
    //2.5
    public int delete(java.util.Collection<ImageBean> beans);
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link FaceBean} object from the fl_face.image_md5 field.<BR>
     * FK_NAME : fl_face_ibfk_1 
     * @param bean the {@link ImageBean}
     * @return the associated {@link FaceBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public FaceBean[] getFaceBeansByImageMd5(ImageBean bean);
    
    /**
     * Retrieves the {@link FaceBean} object from the fl_face.image_md5 field.<BR>
     * FK_NAME : fl_face_ibfk_1 
     * @param md5 String - PK# 1
     * @return the associated {@link FaceBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public FaceBean[] getFaceBeansByImageMd5(String imageMd5);
    
    /**
     * Retrieves the {@link FaceBean} object from fl_face.image_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param bean the {@link ImageBean}
     * @return the associated {@link FaceBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public java.util.List<FaceBean> getFaceBeansByImageMd5AsList(ImageBean bean);

    /**
     * Retrieves the {@link FaceBean} object from fl_face.image_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param md5 String - PK# 1
     * @return the associated {@link FaceBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public java.util.List<FaceBean> getFaceBeansByImageMd5AsList(String imageMd5);
    /**
     * delete the associated {@link FaceBean} objects from fl_face.image_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param md5 String - PK# 1
     * @return the number of deleted rows
     */
    //3.2.3 DELETE IMPORTED
    public int deleteFaceBeansByImageMd5(String imageMd5);
    
    /**
     * set  the {@link FaceBean} object array associate to ImageBean by the fl_face.image_md5 field.<BR>
     * FK_NAME : fl_face_ibfk_1 
     * @param bean the referenced {@link ImageBean}
     * @param importedBeans imported beans from fl_face
     * @return importedBeans always
     * @see {@link FaceManager#setReferencedByImageMd5(FaceBean, ImageBean)
     */
    //3.3 SET IMPORTED
    public FaceBean[] setFaceBeansByImageMd5(ImageBean bean , FaceBean[] importedBeans);

    /**
     * set  the {@link FaceBean} object java.util.Collection associate to ImageBean by the fl_face.image_md5 field.<BR>
     * FK_NAME:fl_face_ibfk_1
     * @param bean the referenced {@link ImageBean} 
     * @param importedBeans imported beans from fl_face 
     * @return importedBeans always
     * @see {@link FaceManager#setReferencedByImageMd5(FaceBean, ImageBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<FaceBean>> C setFaceBeansByImageMd5(ImageBean bean , C importedBeans);

    /**
     * Retrieves the {@link PersonBean} object from the fl_person.image_md5 field.<BR>
     * FK_NAME : fl_person_ibfk_1 
     * @param bean the {@link ImageBean}
     * @return the associated {@link PersonBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public PersonBean[] getPersonBeansByImageMd5(ImageBean bean);
    
    /**
     * Retrieves the {@link PersonBean} object from the fl_person.image_md5 field.<BR>
     * FK_NAME : fl_person_ibfk_1 
     * @param md5 String - PK# 1
     * @return the associated {@link PersonBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.1.2 GET IMPORTED
    public PersonBean[] getPersonBeansByImageMd5(String imageMd5);
    
    /**
     * Retrieves the {@link PersonBean} object from fl_person.image_md5 field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param bean the {@link ImageBean}
     * @return the associated {@link PersonBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public java.util.List<PersonBean> getPersonBeansByImageMd5AsList(ImageBean bean);

    /**
     * Retrieves the {@link PersonBean} object from fl_person.image_md5 field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param md5 String - PK# 1
     * @return the associated {@link PersonBean} beans 
     * @throws DAOException
     */
    //3.2.2 GET IMPORTED
    public java.util.List<PersonBean> getPersonBeansByImageMd5AsList(String imageMd5);
    /**
     * delete the associated {@link PersonBean} objects from fl_person.image_md5 field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param md5 String - PK# 1
     * @return the number of deleted rows
     */
    //3.2.3 DELETE IMPORTED
    public int deletePersonBeansByImageMd5(String imageMd5);
    
    /**
     * set  the {@link PersonBean} object array associate to ImageBean by the fl_person.image_md5 field.<BR>
     * FK_NAME : fl_person_ibfk_1 
     * @param bean the referenced {@link ImageBean}
     * @param importedBeans imported beans from fl_person
     * @return importedBeans always
     * @see {@link PersonManager#setReferencedByImageMd5(PersonBean, ImageBean)
     */
    //3.3 SET IMPORTED
    public PersonBean[] setPersonBeansByImageMd5(ImageBean bean , PersonBean[] importedBeans);

    /**
     * set  the {@link PersonBean} object java.util.Collection associate to ImageBean by the fl_person.image_md5 field.<BR>
     * FK_NAME:fl_person_ibfk_1
     * @param bean the referenced {@link ImageBean} 
     * @param importedBeans imported beans from fl_person 
     * @return importedBeans always
     * @see {@link PersonManager#setReferencedByImageMd5(PersonBean, ImageBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<PersonBean>> C setPersonBeansByImageMd5(ImageBean bean , C importedBeans);

    /**
     * Save the ImageBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link ImageBean} bean to be saved
     * @param refDeviceByDeviceId the {@link DeviceBean} bean referenced by {@link ImageBean} 
     * @param impFaceByImageMd5 the {@link FaceBean} bean refer to {@link ImageBean} 
     * @param impPersonByImageMd5 the {@link PersonBean} bean refer to {@link ImageBean} 
     * @return the inserted or updated {@link ImageBean} bean
     */
    //3.5 SYNC SAVE 
    public ImageBean save(ImageBean bean
        , DeviceBean refDeviceByDeviceId 
        , FaceBean[] impFaceByImageMd5 , PersonBean[] impPersonByImageMd5 );
    /**
     * Transaction version for sync save
     * @see {@link #save(ImageBean , DeviceBean , FaceBean[] , PersonBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public ImageBean saveAsTransaction(final ImageBean bean
        ,final DeviceBean refDeviceByDeviceId 
        ,final FaceBean[] impFaceByImageMd5 ,final PersonBean[] impPersonByImageMd5 );
    /**
     * Save the ImageBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link ImageBean} bean to be saved
     * @param refDeviceByDeviceId the {@link DeviceBean} bean referenced by {@link ImageBean} 
     * @param impFaceByImageMd5 the {@link FaceBean} bean refer to {@link ImageBean} 
     * @param impPersonByImageMd5 the {@link PersonBean} bean refer to {@link ImageBean} 
     * @return the inserted or updated {@link ImageBean} bean
     */
    //3.7 SYNC SAVE 
    public ImageBean save(ImageBean bean
        , DeviceBean refDeviceByDeviceId 
        , java.util.Collection<FaceBean> impFaceByImageMd5 , java.util.Collection<PersonBean> impPersonByImageMd5 );
    /**
     * Transaction version for sync save
     * @see {@link #save(ImageBean , DeviceBean , java.util.Collection , java.util.Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public ImageBean saveAsTransaction(final ImageBean bean
        ,final DeviceBean refDeviceByDeviceId 
        ,final  java.util.Collection<FaceBean> impFaceByImageMd5 ,final  java.util.Collection<PersonBean> impPersonByImageMd5 );
      //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link DeviceBean} object referenced by {@link ImageBean#getDeviceId}() field.<br>
     * FK_NAME : fl_image_ibfk_1
     * @param bean the {@link ImageBean}
     * @return the associated {@link DeviceBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //5.1 GET REFERENCED VALUE
    public DeviceBean getReferencedByDeviceId(ImageBean bean);

    /**
     * Associates the {@link ImageBean} object to the {@link DeviceBean} object by {@link ImageBean#getDeviceId}() field.
     *
     * @param bean the {@link ImageBean} object to use
     * @param beanToSet the {@link DeviceBean} object to associate to the {@link ImageBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public DeviceBean setReferencedByDeviceId(ImageBean bean, DeviceBean beanToSet);
    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________


     /**
     * Retrieves an array of ImageBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return an array of ImageBean
     */
    public ImageBean[] loadByIndexDeviceId(Integer deviceId);
    
    /**
     * Retrieves a list of ImageBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return a list of ImageBean
     */
    public java.util.List<ImageBean> loadByIndexDeviceIdAsList(Integer deviceId);

    /**
     * Deletes rows using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return the number of deleted objects
     */
    public int deleteByIndexDeviceId(Integer deviceId);
    

    /**
     * return a primary key list from {@link ImageBean} array
     * @param array
     */
    //45
    public java.util.List<String> toPrimaryKeyList(ImageBean... array);
    /**
     * return a primary key list from {@link ImageBean} collection
     * @param array
     */
    //46
    public java.util.List<String> toPrimaryKeyList(java.util.Collection<ImageBean> collection);
}
