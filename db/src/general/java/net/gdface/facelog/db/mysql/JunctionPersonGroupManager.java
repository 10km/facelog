// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.java.vm
// ______________________________________________________
package net.gdface.facelog.db.mysql;

import java.util.concurrent.Callable;

import net.gdface.facelog.db.Constant;
import net.gdface.facelog.db.JunctionPersonGroupBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.IJunctionPersonGroupManager;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.exception.WrapDAOException;
import net.gdface.facelog.db.exception.ObjectRetrievalException;

import net.gdface.facelog.dborm.exception.DAOException;

/**
 * Handles database calls (save, load, count, etc...) for the fl_junction_person_group table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.<br>
 * Remarks: 用户组信息关联表<br>
 * @author guyadong
 */
public class JunctionPersonGroupManager extends TableManager.Adapter<JunctionPersonGroupBean> implements IJunctionPersonGroupManager
{
    private net.gdface.facelog.dborm.person.FlJunctionPersonGroupManager nativeManager = net.gdface.facelog.dborm.person.FlJunctionPersonGroupManager.getInstance();
    private IDbConverter<
                        net.gdface.facelog.dborm.device.FlDeviceBean,
                        net.gdface.facelog.dborm.device.FlDeviceGroupBean,
                        net.gdface.facelog.dborm.face.FlFaceBean,
                        net.gdface.facelog.dborm.face.FlFeatureBean,
                        net.gdface.facelog.dborm.image.FlImageBean,
                        net.gdface.facelog.dborm.device.FlJunctionDeviceGroupBean,
                        net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean,
                        net.gdface.facelog.dborm.log.FlLogBean,
                        net.gdface.facelog.dborm.person.FlPersonBean,
                        net.gdface.facelog.dborm.person.FlPersonGroupBean,
                        net.gdface.facelog.dborm.image.FlStoreBean,
                        net.gdface.facelog.dborm.log.FlLogLightBean> dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<JunctionPersonGroupBean,net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean> beanConverter = dbConverter.getJunctionPersonGroupBeanConverter();
    private static JunctionPersonGroupManager singleton = new JunctionPersonGroupManager();
    protected JunctionPersonGroupManager(){}
    /**
    * @return table name
    */
    public String getTableName() {
        return this.nativeManager.getTableName();
    }

    /**
    * @return field names of table
    */
    public String getFields() {
        return this.nativeManager.getFields();
    }
    
    public String getFullFields() {
        return this.nativeManager.getFullFields();
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return this.nativeManager.getPrimarykeyNames();
    }
    
    /**
     * Get the {@link JunctionPersonGroupManager} singleton.
     *
     * @return {@link JunctionPersonGroupManager}
     */
    public static JunctionPersonGroupManager getInstance()
    {
        return singleton;
    }
   
    @Override
    protected Class<JunctionPersonGroupBean> _beanType(){
        return JunctionPersonGroupBean.class;
    }
    
    public IDbConverter<net.gdface.facelog.dborm.device.FlDeviceBean,net.gdface.facelog.dborm.device.FlDeviceGroupBean,net.gdface.facelog.dborm.face.FlFaceBean,net.gdface.facelog.dborm.face.FlFeatureBean,net.gdface.facelog.dborm.image.FlImageBean,net.gdface.facelog.dborm.device.FlJunctionDeviceGroupBean,net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean,net.gdface.facelog.dborm.log.FlLogBean,net.gdface.facelog.dborm.person.FlPersonBean,net.gdface.facelog.dborm.person.FlPersonGroupBean,net.gdface.facelog.dborm.image.FlStoreBean,net.gdface.facelog.dborm.log.FlLogLightBean> getDbConverter() {
        return dbConverter;
    }

    /**
     * set  {@link IDbConverter} as converter used by manager.<br>
     * throw {@link NullPointerException} if {@code dbConverter} is null
     * @param dbConverter
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public synchronized void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getJunctionPersonGroupBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override IJunctionPersonGroupManager
    @Override 
    public JunctionPersonGroupBean loadByPrimaryKey(Integer personId,Integer groupId)
    {
        if(null == personId || null == groupId){
            return null;
        }
        try{
            return loadByPrimaryKeyChecked(personId,groupId);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    //1.1 override IJunctionPersonGroupManager
    @Override
    public JunctionPersonGroupBean loadByPrimaryKeyChecked(Integer personId,Integer groupId) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKeyChecked(personId,groupId));
        }catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e){
            throw new ObjectRetrievalException();
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //1.2
    @Override
    public JunctionPersonGroupBean loadByPrimaryKey(JunctionPersonGroupBean bean)
    {
        return bean==null?null:loadByPrimaryKey(bean.getPersonId(),bean.getGroupId());
    }

    //1.2.2
    @Override
    public JunctionPersonGroupBean loadByPrimaryKeyChecked(JunctionPersonGroupBean bean) throws ObjectRetrievalException
    {
        if(null == bean)
            throw new NullPointerException();
        return loadByPrimaryKeyChecked(bean.getPersonId(),bean.getGroupId());
    }
    
    //1.3
    @Override
    public JunctionPersonGroupBean loadByPrimaryKey(Object ...keys){
        try{
            return loadByPrimaryKeyChecked(keys);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    
    //1.3.2
    @Override
    public JunctionPersonGroupBean loadByPrimaryKeyChecked(Object ...keys) throws ObjectRetrievalException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 2)
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
            if(! (keys[1] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:Integer");
          return loadByPrimaryKeyChecked((Integer)keys[0],(Integer)keys[1]);
    }

    //1.4 override IJunctionPersonGroupManager
    @Override 
    public boolean existsPrimaryKey(Integer personId,Integer groupId)
    {
        try{
            return nativeManager.existsPrimaryKey(personId,groupId);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //1.6
    @Override
    public boolean existsByPrimaryKey(JunctionPersonGroupBean bean)
    {
        return null == bean ? false : existsPrimaryKey(bean.getPersonId(),bean.getGroupId());
    }
    //1.7
    @Override
    public JunctionPersonGroupBean checkDuplicate(JunctionPersonGroupBean bean){
        try{
            nativeManager.checkDuplicate(this.beanConverter.toRight(bean));            
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
        return bean;   
    }
    //2 override IJunctionPersonGroupManager
    @Override 
    public int deleteByPrimaryKey(Integer personId,Integer groupId)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(personId,groupId);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //2
    @Override
    public int delete(JunctionPersonGroupBean bean){
        try
        {
            return nativeManager.delete(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }   
    }
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys){
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 2 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        if(! (keys[1] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:Integer");
        return deleteByPrimaryKey((Integer)keys[0],(Integer)keys[1]);
    }
    //2.4 override IJunctionPersonGroupManager
    @Override 
    public int delete(JunctionPersonGroupBean... beans){
        if(null == beans)return 0;
        int count = 0;
        for(JunctionPersonGroupBean bean :beans){
            count += delete(bean);
        }
        return count;
    }
    //2.5 override IJunctionPersonGroupManager
    @Override 
    public int delete(java.util.Collection<JunctionPersonGroupBean> beans){
        if(null == beans)return 0;
        int count = 0;
        for(JunctionPersonGroupBean bean :beans){
            count += delete(bean);
        }
        return count;
    }
 
 


    //3.5 SYNC SAVE override IJunctionPersonGroupManager
    @Override  
    public JunctionPersonGroupBean save(JunctionPersonGroupBean bean
        , PersonBean refPersonByPersonId , PersonGroupBean refPersongroupByGroupId 
        )
    {
        if(null == bean) return null;
        if(null != refPersonByPersonId)
            this.setReferencedByPersonId(bean,refPersonByPersonId);
        if(null != refPersongroupByGroupId)
            this.setReferencedByGroupId(bean,refPersongroupByGroupId);
        bean = this.save( bean );
        return bean;
    } 

    //3.6 SYNC SAVE AS TRANSACTION override IJunctionPersonGroupManager
    @Override 
    public JunctionPersonGroupBean saveAsTransaction(final JunctionPersonGroupBean bean
        ,final PersonBean refPersonByPersonId ,final PersonGroupBean refPersongroupByGroupId 
        )
    {
        return this.runAsTransaction(new Callable<JunctionPersonGroupBean>(){
            @Override
            public JunctionPersonGroupBean call() throws Exception {
                return save(bean , refPersonByPersonId , refPersongroupByGroupId );
            }});
    }
     /**
     * Save the {@link JunctionPersonGroupBean} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link JunctionPersonGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(JunctionPersonGroupBean , PersonBean , PersonGroupBean )}
     * @return the inserted or updated {@link JunctionPersonGroupBean} bean
     */
    //3.9 SYNC SAVE 
    @Override
    public JunctionPersonGroupBean save(JunctionPersonGroupBean bean,Object ...args) 
    {
        if(null == args)
            return save(bean);
        if(args.length > 2)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 2");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof PersonBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:PersonBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof PersonGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.2 dynamic argument,expected type:PersonGroupBean");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(PersonBean)args[0],(args.length < 2 || null == args[1])?null:(PersonGroupBean)args[1]);
    } 

    /**
     * Save the {@link JunctionPersonGroupBean} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link JunctionPersonGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(JunctionPersonGroupBean , PersonBean , PersonGroupBean )}
     * @return the inserted or updated {@link JunctionPersonGroupBean} bean
     */
    //3.10 SYNC SAVE 
    @SuppressWarnings("unchecked")
    @Override
    public JunctionPersonGroupBean saveCollection(JunctionPersonGroupBean bean,Object ...inputs)
    {
        if(null == inputs)
            return save(bean);
        if(inputs.length > 2)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 2");
        Object[] args = new Object[2];
        System.arraycopy(inputs,0,args,0,2);
        if( args.length > 0 && null != args[0] && !(args[0] instanceof PersonBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:PersonBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof PersonGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.2 dynamic argument,expected type:PersonGroupBean");
        }
        return save(bean,null == args[0]?null:(PersonBean)args[0],null == args[1]?null:(PersonGroupBean)args[1]);
    }

     //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_JUNCTION_PERSON_GROUP_FK_PERSON_ID} -> {@link PersonBean}</li>
     *     <li> {@link Constant#FL_JUNCTION_PERSON_GROUP_FK_GROUP_ID} -> {@link PersonGroupBean}</li>
     * </ul>
     * @param bean the {@link JunctionPersonGroupBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link Constant#FL_JUNCTION_PERSON_GROUP_FK_PERSON_ID},{@link Constant#FL_JUNCTION_PERSON_GROUP_FK_GROUP_ID}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T getReferencedBean(JunctionPersonGroupBean bean,int fkIndex){
        switch(fkIndex){
        case FL_JUNCTION_PERSON_GROUP_FK_PERSON_ID:
            return  (T)this.getReferencedByPersonId(bean);
        case FL_JUNCTION_PERSON_GROUP_FK_GROUP_ID:
            return  (T)this.getReferencedByGroupId(bean);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    /**
     * Associates the {@link JunctionPersonGroupBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean(JunctionPersonGroupBean,int)}
     * @param bean the {@link JunctionPersonGroupBean} object to use
     * @param beanToSet the <T> object to associate to the {@link JunctionPersonGroupBean}
     * @param fkIndex valid values: see also {@link #getReferencedBean(JunctionPersonGroupBean,int)}
     * @return always beanToSet saved
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T setReferencedBean(JunctionPersonGroupBean bean,T beanToSet,int fkIndex){
        switch(fkIndex){
        case FL_JUNCTION_PERSON_GROUP_FK_PERSON_ID:
            return  (T)this.setReferencedByPersonId(bean, (PersonBean)beanToSet);
        case FL_JUNCTION_PERSON_GROUP_FK_GROUP_ID:
            return  (T)this.setReferencedByGroupId(bean, (PersonGroupBean)beanToSet);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    //5.1 GET REFERENCED VALUE override IJunctionPersonGroupManager
    @Override 
    public PersonBean getReferencedByPersonId(JunctionPersonGroupBean bean)
    {
        try{
            return this.dbConverter.getPersonBeanConverter().fromRight(this.nativeManager.getReferencedByPersonId(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
        
    }

    //5.2 SET REFERENCED override IJunctionPersonGroupManager
    @Override 
    public PersonBean setReferencedByPersonId(JunctionPersonGroupBean bean, PersonBean beanToSet)
    {
        try{
            net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean nativeBean = this.beanConverter.toRight(bean);
            IBeanConverter<PersonBean,net.gdface.facelog.dborm.person.FlPersonBean> foreignConverter = this.dbConverter.getPersonBeanConverter();
            net.gdface.facelog.dborm.person.FlPersonBean foreignNativeBean = foreignConverter.toRight(beanToSet);
            this.nativeManager.setReferencedByPersonId(nativeBean,foreignNativeBean);
            this.beanConverter.fromRight(bean, nativeBean);
            foreignConverter.fromRight(beanToSet,foreignNativeBean);
            return beanToSet;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //5.1 GET REFERENCED VALUE override IJunctionPersonGroupManager
    @Override 
    public PersonGroupBean getReferencedByGroupId(JunctionPersonGroupBean bean)
    {
        try{
            return this.dbConverter.getPersonGroupBeanConverter().fromRight(this.nativeManager.getReferencedByGroupId(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
        
    }

    //5.2 SET REFERENCED override IJunctionPersonGroupManager
    @Override 
    public PersonGroupBean setReferencedByGroupId(JunctionPersonGroupBean bean, PersonGroupBean beanToSet)
    {
        try{
            net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean nativeBean = this.beanConverter.toRight(bean);
            IBeanConverter<PersonGroupBean,net.gdface.facelog.dborm.person.FlPersonGroupBean> foreignConverter = this.dbConverter.getPersonGroupBeanConverter();
            net.gdface.facelog.dborm.person.FlPersonGroupBean foreignNativeBean = foreignConverter.toRight(beanToSet);
            this.nativeManager.setReferencedByGroupId(nativeBean,foreignNativeBean);
            this.beanConverter.fromRight(bean, nativeBean);
            foreignConverter.fromRight(beanToSet,foreignNativeBean);
            return beanToSet;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////

    //11
    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    protected JunctionPersonGroupBean insert(JunctionPersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //14
    @Override
    protected JunctionPersonGroupBean update(JunctionPersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public JunctionPersonGroupBean loadUniqueUsingTemplate(JunctionPersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }
    //18-1
    @Override
    public JunctionPersonGroupBean loadUniqueUsingTemplateChecked(JunctionPersonGroupBean bean) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e)
        {
            throw new ObjectRetrievalException();
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }
    //20-5
    @Override
    public int loadUsingTemplate(JunctionPersonGroupBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<JunctionPersonGroupBean> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(JunctionPersonGroupBean bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    //25
    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //20
    @Override
    public int countUsingTemplate(JunctionPersonGroupBean bean, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    /**
     * @return {@link WrapListener} instance
     */
    //35
    @Override
    public TableListener<JunctionPersonGroupBean> registerListener(TableListener<JunctionPersonGroupBean> listener)
    {
        WrapListener wrapListener;
        if(listener instanceof WrapListener){
            wrapListener = (WrapListener)listener;
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }else{
            wrapListener = new WrapListener(listener);
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }
        return wrapListener;
    }

    //36
    @Override
    public void unregisterListener(TableListener<JunctionPersonGroupBean> listener)
    {
        if(listener instanceof WrapListener)
            this.nativeManager.unregisterListener(((WrapListener)listener).nativeListener);
        throw new IllegalArgumentException("invalid listener type: " + WrapListener.class.getName() +" required");
    }
    
    //37
    @Override
    public void fire(TableListener.Event event, JunctionPersonGroupBean bean){
        fire(event.ordinal(), bean);
    }
    
    //37-1
    @Override
    public void fire(int event, JunctionPersonGroupBean bean){
        try{
            this.nativeManager.fire(event, this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * bind foreign key listener to foreign table for DELETE RULE
     */
    //37-2
    void bindForeignKeyListenerForDeleteRule(){
        this.nativeManager.bindForeignKeyListenerForDeleteRule();
    }
    /**
     * unbind foreign key listener from all of foreign tables <br>
     * @see #bindForeignKeyListenerForDeleteRule()
     */
    //37-3
    void unbindForeignKeyListenerForDeleteRule(){
        this.nativeManager.unbindForeignKeyListenerForDeleteRule();

    }
    /**
     * wrap {@code TableListener<JunctionPersonGroupBean>} as native listener
     * @author guyadong
     *
     */
    public class WrapListener implements TableListener<JunctionPersonGroupBean>{
        private final TableListener<JunctionPersonGroupBean> listener;
        private final net.gdface.facelog.dborm.TableListener<net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean> nativeListener;
        private WrapListener(final TableListener<JunctionPersonGroupBean> listener) {
            if(null == listener)
                throw new NullPointerException();
            this.listener = listener;
            this.nativeListener = new net.gdface.facelog.dborm.TableListener<net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean> (){

                @Override
                public void beforeInsert(net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean bean) throws DAOException {
                    listener.beforeInsert(JunctionPersonGroupManager.this.beanConverter.fromRight(bean));                
                }

                @Override
                public void afterInsert(net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean bean) throws DAOException {
                    listener.afterInsert(JunctionPersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeUpdate(net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean bean) throws DAOException {
                    listener.beforeUpdate(JunctionPersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterUpdate(net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean bean) throws DAOException {
                    listener.afterUpdate(JunctionPersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeDelete(net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean bean) throws DAOException {
                    listener.beforeDelete(JunctionPersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterDelete(net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean bean) throws DAOException {
                    listener.afterDelete(JunctionPersonGroupManager.this.beanConverter.fromRight(bean));
                }};
        }

        public void beforeInsert(JunctionPersonGroupBean bean) {
            listener.beforeInsert(bean);
        }

        public void afterInsert(JunctionPersonGroupBean bean) {
            listener.afterInsert(bean);
        }

        public void beforeUpdate(JunctionPersonGroupBean bean) {
            listener.beforeUpdate(bean);
        }

        public void afterUpdate(JunctionPersonGroupBean bean) {
            listener.afterUpdate(bean);
        }

        public void beforeDelete(JunctionPersonGroupBean bean) {
            listener.beforeDelete(bean);
        }

        public void afterDelete(JunctionPersonGroupBean bean) {
            listener.afterDelete(bean);
        }        
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //43
    @Override
    public boolean isPrimaryKey(String column){
        return this.nativeManager.isPrimaryKey(column);
    }
    
    @Override
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<JunctionPersonGroupBean> action){
        try{
            return this.nativeManager.loadBySqlForAction(sql,argList,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    private net.gdface.facelog.dborm.TableManager.Action<net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean> toNative(final Action<JunctionPersonGroupBean> action){
        if(null == action)
            throw new NullPointerException();
        return new net.gdface.facelog.dborm.TableManager.Action<net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean>(){

            @Override
            public void call(net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean bean) {
                action.call(JunctionPersonGroupManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean getBean() {
                return  JunctionPersonGroupManager.this.beanConverter.toRight(action.getBean());
            }};
    }
    
}
