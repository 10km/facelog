// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.mysql;

import java.util.concurrent.TimeUnit;

import net.gdface.facelog.db.ITableCache;
import net.gdface.facelog.db.mysql.DeviceManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.mysql.DeviceCache;

/**
 * Handles database calls (save, load, count, etc...) for the fl_device table.<br>
 * @author guyadong
 */
public class DeviceCacheManager extends DeviceManager
{
    /** singleton of DeviceCacheManager */
    private static DeviceCacheManager instance;
    /** 
     * @return a instance of DeviceCacheManager
     * @throws IllegalStateException while {@link #instance} is null
     */
    public static final DeviceCacheManager getInstance(){
        if(null == instance){
            throw new IllegalStateException("uninitialized instance of DeviceCacheManager");
        }
        return instance;
    }
    /**
     * create a instance of DeviceCacheManager and assign to {@link #instance},if <code>instance</code> is not initialized.<br>
     * otherwise return <code>instance</code>
     */
    public static synchronized final DeviceCacheManager makeInstance(long maximumSize, long duration, TimeUnit unit){
        if(null == instance){
            instance = new DeviceCacheManager(maximumSize,duration,unit);
        }
        return instance;
    }
    /** @see #makeInstance(long, long, TimeUnit) */
    public static final DeviceCacheManager makeInstance(long maximumSize, long durationMinutes){
        return makeInstance(maximumSize, durationMinutes, ITableCache.DEFAULT_TIME_UNIT);
    }
    /** @see #makeInstance(long, long, TimeUnit) */
    public static final DeviceCacheManager makeInstance(long maximumSize){
        return makeInstance(maximumSize,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }
    /** instance of {@link DeviceCache} */
    private final DeviceCache cache;
    protected DeviceCacheManager(long maximumSize, long duration, TimeUnit unit) {
        cache = new DeviceCache(maximumSize,duration,unit);
        cache.registerListener();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override IDeviceManager
    @Override 
    public DeviceBean loadByPrimaryKey(Integer id){
        return cache.getBean(id);
    }

    //1.2
    @Override
    public DeviceBean loadByPrimaryKey(DeviceBean bean){        
        return null == bean ? null : loadByPrimaryKey(bean.getId());
    }
    
    private class CacheAction implements Action<DeviceBean>{
        final Action<DeviceBean> action;
        CacheAction(Action<DeviceBean>action){
            this.action = action;
        }
        @Override
        public void call(DeviceBean bean) {
            if(null != action){
                action.call(bean);
            }
            cache.put(bean);
        }
        @Override
        public DeviceBean getBean() {
            return null == action?null:action.getBean();
        }}
    //20-5
    @Override
    public int loadUsingTemplate(DeviceBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<DeviceBean> action){
        if(null == fieldList )
            action = new CacheAction(action);
        return super.loadUsingTemplate(bean,fieldList,startRow,numRows,searchType,action);
    }

    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________
    // override IDeviceManager
    @Override 
    public DeviceBean loadByIndexMac(String mac){
        return cache.getBeanByMac(mac);
    }
    // override IDeviceManager
    @Override 
    public DeviceBean loadByIndexSerialNo(String serialNo){
        return cache.getBeanBySerialNo(serialNo);
    }
}
