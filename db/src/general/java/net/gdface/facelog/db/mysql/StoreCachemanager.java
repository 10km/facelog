// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.mysql;


import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

import net.gdface.facelog.db.Constant;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.ITableCache;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.IStoreManager;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.WrapDAOException;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.db.mysql.StoreManager;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.mysql.Cache.StoreCache;

/**
 * Handles database calls (save, load, count, etc...) for the fl_store table.<br>
 * @author guyadong
 */
public class StoreCachemanager extends StoreManager
{
    private StoreManager nativeManager = StoreManager.getInstance();
    private final StoreCache storeCache;
    public StoreCachemanager(long maximumSize, long duration, TimeUnit unit) {
        this.storeCache = new StoreCache(maximumSize,duration,unit);
    }
    public StoreCachemanager(long maximumSize, long durationMinutes) {
        this(maximumSize, durationMinutes, ITableCache.DEFAULT_TIME_UNIT);
    }

    public StoreCachemanager(long maximumSize) {
        this(maximumSize,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }
    public StoreCachemanager() {
        this(ITableCache.DEFAULT_CACHE_MAXIMUMSIZE,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override IStoreManager
    @Override 
    public StoreBean loadByPrimaryKey(String md5)
    {
        return storeCache.getBean(md5);
    }

    //1.2
    @Override
    public StoreBean loadByPrimaryKey(StoreBean bean)
    {        
        return null == bean ? null : storeCache.getBean(bean.getMd5());
    }



    
    private class CacheAction implements Action<StoreBean>{
        final Action<StoreBean> action;
        CacheAction(Action<StoreBean>action){
            this.action = action;            
        }
        @Override
        public void call(StoreBean bean) {
            if(null != action){
                action.call(bean);
            }
            storeCache.put(bean);
        }
        @Override
        public StoreBean getBean() {
            return null == action?null:action.getBean();
        }}
    //20-5
    @Override
    public int loadUsingTemplate(StoreBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<StoreBean> action)
    {
        if(null == fieldList )
            action = new CacheAction(action);
        return super.loadUsingTemplate(bean,fieldList,startRow,numRows,searchType,action);
    }


}
