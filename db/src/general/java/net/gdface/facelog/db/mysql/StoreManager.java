// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________


package net.gdface.facelog.db.mysql;

import java.lang.ref.SoftReference;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.List;
import java.util.Collection;
import java.util.concurrent.Callable;
import java.util.ArrayList;

import net.gdface.facelog.db.BaseBean;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.ImageBean;

import net.gdface.facelog.dborm.Manager;
import net.gdface.facelog.dborm.TableListener;
import net.gdface.facelog.dborm.TableManager;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.exception.DataAccessException;
import net.gdface.facelog.dborm.exception.ObjectRetrievalException;
import net.gdface.facelog.dborm.image.FlImageBean;
import net.gdface.facelog.dborm.image.FlImageBeanBase;
import net.gdface.facelog.dborm.image.FlImageManager;
import net.gdface.facelog.dborm.image.FlStoreManager;
import net.gdface.facelog.dborm.image.FlStoreBeanBase;
import net.gdface.facelog.dborm.image.FlStoreBean;

/**
 * Handles database calls (save, load, count, etc...) for the fl_store table.
 * @author guyadong
 */
public class StoreManager 
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the md5 field.
     */
    public static final int ID_MD5 = 0;

    /**
     * Identify the encoding field.
     */
    public static final int ID_ENCODING = 1;

    /**
     * Identify the data field.
     */
    public static final int ID_DATA = 2;

    /**
     * Tablename.
     */
		public static final String TABLE_NAME="fl_store";
    /**
     * Contains all the full fields of the fl_store table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
        "fl_store.md5"
        ,"fl_store.encoding"
        ,"fl_store.data"
    };

    /**
     * Contains all the fields of the fl_store table.
     */
    public static final String[] FIELD_NAMES =
    {
        "md5"
        ,"encoding"
        ,"data"
    };
   /**
     * Contains all the primarykey fields of the fl_store table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "md5"
    };
    /**
     * Field that contains the comma separated fields of the fl_store table.
     */
    public static final String ALL_FULL_FIELDS = "fl_store.md5"
                            + ",fl_store.encoding"
                            + ",fl_store.data";

    /**
     * Field that contains the comma separated fields of the fl_store table.
     */
    public static final String ALL_FIELDS = "md5"
                            + ",encoding"
                            + ",data";

    public static interface Action{
          void call(StoreBean
 bean);
          StoreBean
 getBean();
     }

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }
    private FlStoreManager nativeManager = FlStoreManager.getInstance();
    private IDbConverter dbConverter = new DbConverter();
    private IBeanConverter<StoreBean,FlStoreBeanBase> beanConverter;
    private static StoreManager singleton = new StoreManager();

    /**
     * Get the StoreManager singleton.
     *
     * @return StoreManager
     */
    public static StoreManager getInstance()
    {
        return singleton;
    }
    
    public FlStoreManager getNativeManager() {
        return nativeManager;
    }

    public void setNativeManager(FlStoreManager nativeManager) {
        this.nativeManager = nativeManager;
    }
    
    public IDbConverter getDbConverter() {
        return dbConverter;
    }

    public void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getStoreBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link StoreBean} from the fl_store using primary key fields.
     *
     * @param md5 String - PK# 1
     * @return a unique StoreBean or {@code null} if not found
     */
    //1
    public StoreBean loadByPrimaryKey(String md5)
    {
        try
        {
            return this.beanConverter.fromNative(nativeManager.loadByPrimaryKey(md5));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Loads a {@link StoreBean} from the fl_store using primary key fields of {@code bean}.
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link StoreBean} with primary key fields
     * @return a unique {@link StoreBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(String md5)}
     */
    //1.2
    public StoreBean loadByPrimaryKey(StoreBean bean)
    {
        try{
            return bean==null?null:loadByPrimaryKey( bean.getMd5());
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Returns true if this fl_store contains row with primary key fields.
     * @author guyadong
     * @param md5 String - PK# 1
     * @throws DAOException
     * @see #loadByPrimaryKey(String md5)
     */
    //1.3
    public boolean existsPrimaryKey(String md5)
    {
        try{
            return null!=loadByPrimaryKey(md5 );
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns true if this fl_store contains row specified by primary key fields of {@link StoreBean}.<br>
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link StoreBean} with primary key fields
     * @return 
     * @see {@link #loadByPrimaryKey(StoreBeanBase bean)}
     */
    //1.4
    //@Override
    public boolean existsPrimaryKey(StoreBean bean)
    {
        try{
            return null!=loadByPrimaryKey(bean);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * Delete row according to its primary keys.
     *
     * @param md5 String - PK# 1
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(String md5)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(md5);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Delete row according to Primary Key fileds of the parameter{@code bean},
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the StoreBean with primary key fields
     * @return the number of deleted rows
     * @see {@link #deleteByPrimaryKey(String md5)}
     */
    //2.1
    public int deleteByPrimaryKey(StoreBean bean)
    {
        try{
            return bean==null?0:deleteByPrimaryKey( bean.getMd5());
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyMd5 -> ImageBean</li>
     *     <li> impFlImagebyThumbMd5 -> ImageBean</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param fkName valid values: impFlImagebyMd5,impFlImagebyThumbMd5
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @SuppressWarnings("unchecked")
    //@Override
    public <T> T[] getImportedBeans(StoreBean bean,String fkName){
        try {
            return nativeManager.getImportedBeans((FlStoreBean) this.beanConverter.toNative(bean),fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyMd5 -> ImageBean</li>
     *     <li> impFlImagebyThumbMd5 -> ImageBean</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param fkName valid values: impFlImagebyMd5,impFlImagebyThumbMd5
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @SuppressWarnings("unchecked")
    //@Override
    public <T> List<T> getImportedBeansAsList(StoreBean bean,String fkName){
        try {
            return nativeManager.getImportedBeansAsList((FlStoreBean) this.beanConverter.toNative(bean),fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> impFlImagebyMd5 -> ImageBean</li>
     *     <li> impFlImagebyThumbMd5 -> ImageBean</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param importedBeans the ${importedClass} array to associate to the {@link StoreBean}
     * @param fkName valid values: impFlImagebyMd5,impFlImagebyThumbMd5
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    //@Override
    public <T> T[] setImportedBeans(StoreBean bean,T[] importedBeans,String fkName){
        try {
            return nativeManager.setImportedBeans((FlStoreBean) this.beanConverter.toNative(bean),importedBeans,fkName);
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyMd5 -> ImageBean Collection</li>
     *     <li> impFlImagebyThumbMd5 -> ImageBean Collection</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param importedBeans the <T> object to associate to the {@link StoreBean}
     * @param fkName valid values: impFlImagebyMd5,impFlImagebyThumbMd5
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    //@Override
    public <T extends Collection<StoreBean>> T setImportedBeans(StoreBean bean,T importedBeans,String fkName){
        try {        	
            return (T) this.beanConverter.fromNative(nativeManager.setImportedBeans((StoreBean) this.beanConverter.toNative(bean),this.beanConverter.toNative(importedBeans),fkName));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link ImageBean} object from the fl_image.md5 field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public ImageBean[] getFlImageBeansByMd5(StoreBean bean)
    {
        try {        	
            return this.dbConverter.getImageBeanConverter().fromNative(nativeManager.getFlImageBeansByMd5((FlStoreBean) this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from fl_image.md5 field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<ImageBean> getFlImageBeansByMd5AsList(StoreBean bean)
    {
        try {        	
            return this.dbConverter.getImageBeanConverter().fromNative(nativeManager.getFlImageBeansByMd5AsList((FlStoreBean) this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object array associate to StoreBean by the fl_image.md5 field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param bean the referenced {@link StoreBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByMd5(ImageBean, StoreBean)
     */
    //3.3 SET IMPORTED
    public ImageBean[] setFlImageBeansByMd5(StoreBean bean , ImageBean[] importedBeans)
    {
        try {        	
            return this.dbConverter.getImageBeanConverter().fromNative(nativeManager.setFlImageBeansByMd5(
                (FlStoreBean) this.beanConverter.toNative(bean),
                this.dbConverter.getImageBeanConverter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object collection associate to StoreBean by the fl_image.md5 field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param bean the referenced {@link StoreBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByMd5(ImageBean, StoreBean)
     */
    //3.4 SET IMPORTED
    @SuppressWarnings("unchecked")
    public <T extends Collection<ImageBean>> T setFlImageBeansByMd5(StoreBean bean , T importedBeans)
    {
        try {        	
            return (T) this.dbConverter.getImageBeanConverter().fromNative(nativeManager.setFlImageBeansByMd5(
                (FlStoreBean) this.beanConverter.toNative(bean),
                this.dbConverter.getImageBeanConverter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from the fl_image.thumb_md5 field.<BR>
     * FK_NAME : fl_image_ibfk_2 
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public ImageBean[] getFlImageBeansByThumbMd5(StoreBean bean)
    {
        try {        	
            return this.dbConverter.getImageBeanConverter().fromNative(nativeManager.getFlImageBeansByThumbMd5((FlStoreBean) this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from fl_image.thumb_md5 field.<BR>
     * FK_NAME:fl_image_ibfk_2
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     * @throws DAOException
     */
    //3.2 GET IMPORTED
    public List<ImageBean> getFlImageBeansByThumbMd5AsList(StoreBean bean)
    {
        try {        	
            return this.dbConverter.getImageBeanConverter().fromNative(nativeManager.getFlImageBeansByThumbMd5AsList((FlStoreBean) this.beanConverter.toNative(bean)));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object array associate to StoreBean by the fl_image.thumb_md5 field.<BR>
     * FK_NAME : fl_image_ibfk_2 
     * @param bean the referenced {@link StoreBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByThumbMd5(ImageBean, StoreBean)
     */
    //3.3 SET IMPORTED
    public ImageBean[] setFlImageBeansByThumbMd5(StoreBean bean , ImageBean[] importedBeans)
    {
        try {        	
            return this.dbConverter.getImageBeanConverter().fromNative(nativeManager.setFlImageBeansByThumbMd5(
                (FlStoreBean) this.beanConverter.toNative(bean),
                this.dbConverter.getImageBeanConverter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object collection associate to StoreBean by the fl_image.thumb_md5 field.<BR>
     * FK_NAME:fl_image_ibfk_2
     * @param bean the referenced {@link StoreBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByThumbMd5(ImageBean, StoreBean)
     */
    //3.4 SET IMPORTED
    @SuppressWarnings("unchecked")
    public <T extends Collection<ImageBean>> T setFlImageBeansByThumbMd5(StoreBean bean , T importedBeans)
    {
        try {        	
            return (T) this.dbConverter.getImageBeanConverter().fromNative(nativeManager.setFlImageBeansByThumbMd5(
                (FlStoreBean) this.beanConverter.toNative(bean),
                this.dbConverter.getImageBeanConverter().toNative(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }



    /**
     * Save the StoreBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link StoreBean} bean to be saved
         * @param impFlImagebyMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @param impFlImagebyThumbMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @return the inserted or updated {@link StoreBean} bean
     * @throws DAOException
     */
    //3.5 SYNC SAVE 
    public StoreBean save(StoreBean bean
        
        , ImageBean[] impFlImagebyMd5 , ImageBean[] impFlImagebyThumbMd5 ) throws DAOException
    {
        if(null == bean) return null;
        bean = this.save( bean );
        if( null != impFlImagebyMd5) {
            for ( ImageBean imp : impFlImagebyMd5 ){
                imp.setMd5(bean.getMd5()); 
                imp.setReferencedByMd5( bean );
                FlImageManager.getInstance().save( (FlImageBean)this.dbConverter.getImageBeanConverter().toNative(imp) );
            }
        }
        if( null != impFlImagebyThumbMd5) {
            for ( ImageBean imp : impFlImagebyThumbMd5 ){
                imp.setThumbMd5(bean.getMd5()); 
                imp.setReferencedByThumbMd5( bean );
                FlImageManager.getInstance().save( (FlImageBean)this.dbConverter.getImageBeanConverter().toNative(imp) );
            }
        }
        return bean;
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(StoreBean , ImageBean[] , ImageBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public StoreBean saveAsTransaction(final StoreBean bean
        
        ,final ImageBean[] impFlImagebyMd5 ,final ImageBean[] impFlImagebyThumbMd5 ) throws DAOException
    {
        return this.runAsTransaction(new Callable<StoreBean>(){
            @Override
            public StoreBean call() throws Exception {
                return save(bean , impFlImagebyMd5 , impFlImagebyThumbMd5 );
            }});
    }
    /**
     * Save the StoreBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link StoreBean} bean to be saved
         * @param impFlImagebyMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @param impFlImagebyThumbMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @return the inserted or updated {@link StoreBean} bean
     * @throws DAOException
     */
    //3.7 SYNC SAVE 
    public StoreBean save(StoreBean bean
        
        , Collection<ImageBean> impFlImagebyMd5 , Collection<ImageBean> impFlImagebyThumbMd5 ) throws DAOException
    {
        if(null == bean) return null;
        bean = this.save( bean );
        if( null != impFlImagebyMd5) {
            for ( ImageBean imp : impFlImagebyMd5 ){
                imp.setMd5(bean.getMd5()); 
                imp.setReferencedByMd5(bean);
                FlImageManager.getInstance().save( (FlImageBean)this.dbConverter.getImageBeanConverter().toNative(imp) );
            }
        }
        if( null != impFlImagebyThumbMd5) {
            for ( ImageBean imp : impFlImagebyThumbMd5 ){
                imp.setThumbMd5(bean.getMd5()); 
                imp.setReferencedByThumbMd5(bean);
                FlImageManager.getInstance().save( (FlImageBean)this.dbConverter.getImageBeanConverter().toNative(imp) );
            }
        }
        return bean;
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save(StoreBean , Collection , Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public StoreBean saveAsTransaction(final StoreBean bean
        
        ,final  Collection<ImageBean> impFlImagebyMd5 ,final  Collection<ImageBean> impFlImagebyThumbMd5 ) throws DAOException
    {
        return this.runAsTransaction(new Callable<StoreBean>(){
            @Override
            public StoreBean call() throws Exception {
                return save(bean , impFlImagebyMd5 , impFlImagebyThumbMd5 );
            }});
    }
  
    //@Override
    public <T> T getReferencedBean(StoreBean bean,String fkName)throws DAOException{
        throw new UnsupportedOperationException();
    }
    //@Override
    public <T> T setReferencedBean(StoreBean bean,T beanToSet,String fkName)throws DAOException{
        throw new UnsupportedOperationException();
    }
     

    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from fl_store.
     *
     * @return an array of FlStoreManager bean
     */
    //5
    public StoreBean[] loadAll()
    {
        try{
            return this.beanConverter.fromNative(this.nativeManager.loadUsingTemplate(null));
        }
        catch(DAOException e)
        {
            throw new RuntimeException(e);
        }
    }
    /**
     * Loads each row from fl_store and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //5-1
    public int loadAll(Action action) throws DAOException
    {
        return this.nativeManager.loadUsingTemplate(null,action);
    }
    /**
     * Loads all the rows from fl_store.
     *
     * @return a list of FlStoreManager bean
     * @throws DAOException
     */
    //5-2
    public List<StoreBean> loadAllAsList() throws DAOException
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from fl_store, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of FlStoreManager bean
     * @throws DAOException
     */
    //6
    public StoreBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }
    /**
     *  Loads the given number of rows from fl_store, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //6-1
    public int loadAll(int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows,action);
    }
    /**
     * Loads the given number of rows from fl_store, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlStoreManager bean
     * @throws DAOException
     */
    //6-2
    public List<StoreBean> loadAllAsList(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of StoreBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting StoreBean table
     * @throws DAOException
     */
    //7
    public StoreBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, (int[])null);
    }
    /**
     * Retrieves a list of StoreBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting StoreBean table
     * @throws DAOException
     */
    //7
    public List<StoreBean> loadByWhereAsList(String where) throws DAOException
    {
        return this.loadByWhereAsList(where, null);
    }
    /**
     * Retrieves each row of StoreBean given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //7-1
    public int loadByWhere(String where,Action action) throws DAOException
    {
        return this.loadByWhere(where, null,action);
    }
    /**
     * Retrieves an array of StoreBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting StoreBean table
     * @throws DAOException
     */
    //8
    public StoreBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of StoreBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting StoreBean table
     * @throws DAOException
     */
    //8
    public List<StoreBean> loadByWhereAsList(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }
    /**
     * Retrieves each row of StoreBean given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //8-1
    public int loadByWhere(String where, int[] fieldList,Action action) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1,action);
    }

    /**
     * Retrieves an array of StoreBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting StoreBean table
     * @throws DAOException
     */
    //9
    public StoreBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return (StoreBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new StoreBean[0]);
    }
    /**
     * Retrieves each row of  StoreBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //9-1
    public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
    }

    /**
     * Retrieves a list of StoreBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting StoreBean table
     * @throws DAOException
     */
    //9-2
    public List<StoreBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByWhereForAction(where,fieldList,startRow,numRows,action);              
        return action.getList();
    }
    /**
     * Retrieves each row of StoreBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //9-3
    public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        String sql=createSqlString(fieldList, where);
        // System.out.println("loadByWhere: " + sql);
        return this.loadBySqlForAction(sql, null, fieldList, startRow, numRows, action);
    }

    /**
     * Deletes all rows from fl_store table.
     * @return the number of deleted rows.
     * @throws DAOException
     */
    //10
    public int deleteAll() throws DAOException
    {
        return this.deleteByWhere("");
    }

    /**
     * Deletes rows from the fl_store table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuilder sql = new StringBuilder("DELETE FROM fl_store " + where);
            // System.out.println("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the StoreBean bean into the database.
     *
     * @param bean the StoreBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public StoreBean save(StoreBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the StoreBean bean into the database.
     *
     * @param bean the StoreBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public StoreBean insert(StoreBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuilder("INSERT into fl_store (");

            if (bean.isMd5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("md5");
                _dirtyCount++;
            }

            if (bean.isEncodingModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("encoding");
                _dirtyCount++;
            }

            if (bean.isDataModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("data");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            // System.out.println("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the StoreBean bean record in the database according to the changes.
     *
     * @param bean the StoreBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public StoreBean update(StoreBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuilder("UPDATE fl_store SET ");
            boolean useComma=false;

            if (bean.isMd5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("md5=?");
            }

            if (bean.isEncodingModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("encoding=?");
            }

            if (bean.isDataModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("data=?");
            }
            sql.append(" WHERE ");
            sql.append("md5=?");
            // System.out.println("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                // System.out.println("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of StoreBean beans into the database.
     *
     * @param beans the StoreBean bean table to be saved
     * @return the saved StoreBean array.
     * @throws DAOException
     */
    //15
    public StoreBean[] save(StoreBean[] beans) throws DAOException
    {
        for (StoreBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }

    /**
     * Saves a list of StoreBean beans into the database.
     *
     * @param beans the StoreBean bean table to be saved
     * @return the saved StoreBean array.
     * @throws DAOException
     */
    //15-2
    public <T extends Collection<StoreBean>>T save(T beans) throws DAOException
    {
        for (StoreBean bean : beans) 
        {
            this.save(bean);
        }
        return beans;
    }
    /**
     * Saves an array of StoreBean beans as transaction into the database.
     *
     * @param beans the StoreBean bean table to be saved
     * @return the saved StoreBean array.
     * @throws DAOException
     * @see #save(StoreBean[])
     */
    //15-3
    public StoreBean[] saveAsTransaction(final StoreBean[] beans) throws DAOException {
        return Manager.getInstance().runAsTransaction(new Callable<StoreBean[]>(){
            @Override
            public StoreBean[] call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Saves a list of StoreBean beans as transaction into the database.
     *
     * @param beans the StoreBean bean table to be saved
     * @return the saved StoreBean array.
     * @throws DAOException
     * @see #save(List)
     */
    //15-4
    public <T extends Collection<StoreBean>> T saveAsTransaction(final T beans) throws DAOException {
        return Manager.getInstance().runAsTransaction(new Callable<T>(){
            @Override
            public T call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Insert an array of StoreBean beans into the database.
     *
     * @param beans the StoreBean bean table to be inserted
     * @return the saved StoreBean array.
     * @throws DAOException
     */
    //16
    public StoreBean[] insert(StoreBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Insert a list of StoreBean beans into the database.
     *
     * @param beans the StoreBean bean table to be inserted
     * @return the saved StoreBean array.
     * @throws DAOException
     */
    //16-2
    public <T extends Collection<StoreBean>> T insert(T beans) throws DAOException
    {
        return this.save(beans);
    }
    
    /**
     * Insert an array of StoreBean beans as transaction into the database.
     *
     * @param beans the StoreBean bean table to be inserted
     * @return the saved StoreBean array.
     * @throws DAOException
     * @see #saveAsTransaction(StoreBean[])
     */
    //16-3
    public StoreBean[] insertAsTransaction(StoreBean[] beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Insert a list of StoreBean beans as transaction into the database.
     *
     * @param beans the StoreBean bean table to be inserted
     * @return the saved StoreBean array.
     * @throws DAOException
     * @see #saveAsTransaction(List)
     */
    //16-4
    public <T extends Collection<StoreBean>> T insertAsTransaction(T beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }


    /**
     * Updates an array of StoreBean beans into the database.
     *
     * @param beans the StoreBean bean table to be inserted
     * @return the saved StoreBean array.
     * @throws DAOException
     */
    //17
    public StoreBean[] update(StoreBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates a list of StoreBean beans into the database.
     *
     * @param beans the StoreBean bean table to be inserted
     * @return the saved StoreBean array.
     * @throws DAOException
     */
    //17-2
    public <T extends Collection<StoreBean>> T update(T beans) throws DAOException
    {
        return this.save(beans);
    }
    
    /**
     * Updates an array of StoreBean beans as transaction into the database.
     *
     * @param beans the StoreBean bean table to be inserted
     * @return the saved StoreBean array.
     * @throws DAOException
     * @see #saveAsTransaction(StoreBean[])
     */
    //17-3
    public StoreBean[] updateAsTransaction(StoreBean[] beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Updates a list of StoreBean beans as transaction into the database.
     *
     * @param beans the StoreBean bean table to be inserted
     * @return the saved StoreBean array.
     * @throws DAOException
     * @see #saveAsTransaction(List)
     */
    //17-4
    public <T extends Collection<StoreBean>> T updateAsTransaction(T beans) throws DAOException
    {
        return this.saveAsTransaction(beans);
    }
    
    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique StoreBean bean from a template one giving a c
     *
     * @param bean the StoreBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public StoreBean loadUniqueUsingTemplate(StoreBeanBase bean) throws DAOException
    {
         StoreBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of StoreBean from a template one.
     *
     * @param bean the StoreBean template to look for
     * @return all the StoreBean matching the template
     * @throws DAOException
     */
    //19
    public StoreBean[] loadUsingTemplate(StoreBeanBase bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the StoreBean template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //19-1
    public int loadUsingTemplate(StoreBeanBase bean,Action action) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1,action);
    }

    /**
     * Loads a list of StoreBean from a template one.
     *
     * @param bean the StoreBean template to look for
     * @return all the StoreBean matching the template
     * @throws DAOException
     */
    //19-2
    public List<StoreBean> loadUsingTemplateAsList(StoreBeanBase bean) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of StoreBean from a template one, given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the StoreBean matching the template
     * @throws DAOException
     */
    //20
    public StoreBean[] loadUsingTemplate(StoreBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //20-1
    public int loadUsingTemplate(StoreBeanBase bean, int startRow, int numRows,Action action) throws DAOException
    {
        return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
    }
    /**
     * Loads a list of StoreBean from a template one, given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the StoreBean matching the template
     * @throws DAOException
     */
    //20-2
    public List<StoreBean> loadUsingTemplateAsList(StoreBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of StoreBean from a template one, given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the StoreBean matching the template
     * @throws DAOException
     */
    //20-3
    public StoreBean[] loadUsingTemplate(StoreBeanBase bean, int startRow, int numRows, int searchType) throws DAOException
    {
    	return (StoreBean[])this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new StoreBean[0]);
    }

    /**
     * Loads a list of StoreBean from a template one, given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the StoreBean matching the template
     * @throws DAOException
     */
    //20-4
    public List<StoreBean> loadUsingTemplateAsList(StoreBeanBase beanBase, int startRow, int numRows, int searchType) throws DAOException
    {
        ListAction action = new ListAction();
        loadUsingTemplate(beanBase,null,startRow,numRows,searchType, action);
        return (List<StoreBean>) action.getList();
        
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    //20-5
    public int loadUsingTemplate(StoreBeanBase beanBase, int[] fieldList, int startRow, int numRows,int searchType, Action action) throws DAOException
    {
        StoreBean bean=StoreBeanBase.toFullBean(beanBase);
        // System.out.println("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        StringBuilder sqlWhere = new StringBuilder("");
        String sql=createSqlString(fieldList,this.fillWhere(sqlWhere, bean, searchType) > 0?" WHERE "+sqlWhere.toString():null);
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
    /**
     * Deletes rows using a StoreBean template.
     *
     * @param bean the StoreBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(StoreBeanBase beanBase) throws DAOException
    {
        StoreBean bean=StoreBeanBase.toFullBean(beanBase);
        if (bean.isMd5Initialized()) {
            return this.deleteByPrimaryKey(bean.getMd5());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("DELETE FROM fl_store ");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... deleting all");
            }
            // System.out.println("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            if(_rows>0)
                this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table fl_store.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table fl_store with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM fl_store " + where;
        // System.out.println("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table fl_store with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific StoreBean bean
     *
     * @param bean the StoreBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(StoreBeanBase bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific StoreBean bean , given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(StoreBeanBase bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific StoreBean bean given the start row and number of rows and the search type
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(StoreBeanBase beanBase, int startRow, int numRows, int searchType) throws DAOException
    {
        StoreBean bean=StoreBeanBase.toFullBean(beanBase);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuilder sql = new StringBuilder("SELECT COUNT(*) AS MCOUNT FROM fl_store");
        StringBuilder sqlWhere = new StringBuilder("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0)
            {
                sql.append(" WHERE ").append(sqlWhere);
            }
            else
            {
                // System.out.println("The bean to look is not initialized... counting all...");
            }
            // System.out.println("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given StringBuilder with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the StringBuilder that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuilder sqlWhere, StoreBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isMd5Modified()) {
                _dirtyCount ++;
                if (bean.getMd5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("md5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("md5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isEncodingModified()) {
                _dirtyCount ++;
                if (bean.getEncoding() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("encoding IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("encoding ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isDataModified()) {
                _dirtyCount ++;
                if (bean.getData() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("data IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("data = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the PreparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, StoreBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isMd5Modified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMd5() + "]");
                        if (bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMd5() + "%]");
                        if ( bean.getMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMd5() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getMd5() + "]");
                        if ( bean.getMd5() == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getMd5()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getMd5() + "%]");
                        if (bean.getMd5()  == null) { ps.setNull(++_dirtyCount, Types.CHAR); } else { ps.setString(++_dirtyCount, bean.getMd5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isEncodingModified()) {
                switch (searchType) {
                    case SEARCH_EXACT:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEncoding() + "]");
                        if (bean.getEncoding() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getEncoding()); }
                        break;
                    case SEARCH_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getEncoding() + "%]");
                        if ( bean.getEncoding()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getEncoding() + "%"); }
                        break;
                    case SEARCH_STARTING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [%" + bean.getEncoding() + "]");
                        if ( bean.getEncoding() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, "%" + bean.getEncoding()); }
                        break;
                    case SEARCH_ENDING_LIKE:
                        // System.out.println("Setting for " + _dirtyCount + " [" + bean.getEncoding() + "%]");
                        if (bean.getEncoding()  == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getEncoding() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isDataModified()) {
                // System.out.println("Setting for " + _dirtyCount + " [" + bean.getData() + "]");
                if (bean.getData() == null) { ps.setNull(++_dirtyCount, Types.LONGVARBINARY); } else { ps.setBytes(++_dirtyCount, bean.getData()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of StoreBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting StoreBean table
     * @throws DAOException
     */
    //28
    public StoreBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
    	return this.decodeResultSetAsList(rs, fieldList, startRow, numRows).toArray(new StoreBean[0]);
    }

    /**
     * decode a resultset in a list of StoreBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting StoreBean table
     * @throws DAOException
     */
    //28-1
    public List<StoreBean> decodeResultSetAsList(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        actionOnResultSet(rs, fieldList, numRows, numRows, action);
        return action.getList();
    }
    /** decode a resultset and call action
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action interface obj for do something
     * @return the count dealt by action  
     * @throws DAOException
     * @throws IllegalArgumentException
     */
    //28-2
    public int actionOnResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows, Action action) throws DAOException{
        try{
            int count = 0;
            if(0!=numRows){
                if( startRow<1 )
                    throw new IllegalArgumentException("invalid argument:startRow (must >=1)");
                if( null==action || null==rs )
                    throw new IllegalArgumentException("invalid argument:action OR rs (must not be null)");                    
                for(;startRow>1&&rs.next();--startRow);//skip to last of startRow
                if (fieldList == null) {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, action.getBean()));
                }else {
                    if(numRows<0)
                        for(;rs.next();++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                    else
                        for(;rs.next() && count<numRows;++count)
                            action.call(decodeRow(rs, fieldList,action.getBean()));
                }
            }
            return count;
        }catch(DAOException e){
            throw e;
        }catch(SQLException e){
            throw new DataAccessException(e);
        }
    }

    /**
     * Transforms a ResultSet iterating on the fl_store on a StoreBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting StoreBean bean
     * @throws DAOException
     */
    //29
    public StoreBean decodeRow(ResultSet rs,StoreBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        try
        {
            bean.setMd5(rs.getString(1));
            bean.setEncoding(rs.getString(2));
            bean.setData(rs.getBytes(3));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_store table on a StoreBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting StoreBean bean
     * @throws DAOException
     */
    //30
    public StoreBean decodeRow(ResultSet rs, int[] fieldList,StoreBean bean) throws DAOException
    {
        if(null==bean)
            bean = this.createBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_MD5:
                        ++pos;
                        bean.setMd5(rs.getString(pos));
                        break;
                    case ID_ENCODING:
                        ++pos;
                        bean.setEncoding(rs.getString(pos));
                        break;
                    case ID_DATA:
                        ++pos;
                        bean.setData(rs.getBytes(pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the fl_store on a StoreBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting StoreBean bean
     * @throws DAOException
     */
    //31
    public StoreBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        StoreBean bean = this.createBean();
        try
        {
            bean.setMd5(rs.getString("md5"));
            bean.setEncoding(rs.getString("encoding"));
            bean.setData(rs.getBytes("data"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of StoreBean
     * @throws DAOException
     */
    //32
    public StoreBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of StoreBean
     * @throws DAOException
     */
    //32
    public List<StoreBean> loadByPreparedStatementAsList(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of StoreBean
     * @throws DAOException
     */
    //33
    public StoreBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        return this.loadByPreparedStatementAsList(ps, fieldList).toArray(new StoreBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of StoreBean
     * @throws DAOException
     */
    //33
    public List<StoreBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList) throws DAOException
    { 
        return loadByPreparedStatementAsList(ps,fieldList,1,-1);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of StoreBean
     * @throws DAOException
     */
    //34
    public StoreBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        return loadByPreparedStatementAsList(ps,fieldList,startRow,numRows).toArray(new StoreBean[0]);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of StoreBean
     * @throws DAOException
     */
    //34-1
    public List<StoreBean> loadByPreparedStatementAsList(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ListAction action = new ListAction();
        loadByPreparedStatement(ps,fieldList,startRow,numRows,action);
        return action.getList();
    }
    /**
     * Loads each element using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows 
     * and dealt by action.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */     
    //34-2
    public int loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows,Action action) throws DAOException
    {
        ResultSet rs =  null;
        try {
            ps.setFetchSize(100);
            rs = ps.executeQuery();
            return this.actionOnResultSet(rs, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        } catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(rs);
        }
    }
    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private FlStoreListener listener = null;

    /**
     * Registers a unique FlStoreListener listener.
     */
    //35
    public void registerListener(TableListener listener)
    {
        this.listener = (FlStoreListener)listener;
    }

    /**
     * Before the save of the StoreBean bean.
     *
     * @param bean the StoreBean bean to be saved
     */
    //36
    private void beforeInsert(StoreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the StoreBean bean.
     *
     * @param bean the StoreBean bean to be saved
     */
    //37
    private void afterInsert(StoreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the StoreBean bean.
     *
     * @param bean the StoreBean bean to be updated
     */
    //38
    private void beforeUpdate(StoreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the StoreBean bean.
     *
     * @param bean the StoreBean bean to be updated
     */
    //39
    private void afterUpdate(StoreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the StoreBean bean.
     *
     * @param bean the StoreBean bean to be deleted
     */
    private void beforeDelete(StoreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the StoreBean bean.
     *
     * @param bean the StoreBean bean to be deleted
     */
    private void afterDelete(StoreBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    private Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    private void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    private Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     * @author guyadong
     */
    //43
    public static boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    /**
     * Fill the given prepared statement with the values in argList
     * @param ps the PreparedStatement that will be filled
     * @param argList the arguments to use fill given prepared statement
     * @throws DAOException
     */
    private void fillPrepareStatement(PreparedStatement ps, Object[] argList) throws DAOException{
        try {
            if (!(argList == null || ps == null)) {
                for (int i = 0; i < argList.length; i++) {
                    if (argList[i].getClass().equals(byte[].class)) {
                        ps.setBytes(i + 1, (byte[]) argList[i]);
                    } else
                        ps.setObject(i + 1, argList[i]);
                }
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }
    
    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of StoreBean
     * @throws DAOException 
     */
    public StoreBean[] loadBySql(String sql, Object[] argList, int[] fieldList) throws DAOException {
        return loadBySqlAsList(sql, argList, fieldList).toArray(new StoreBean[0]);
    }
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of StoreBean
     * @throws DAOException
     */
    public List<StoreBean> loadBySqlAsList(String sql, Object[] argList, int[] fieldList) throws DAOException{
        ListAction action = new ListAction();
        loadBySqlForAction(sql,argList,fieldList,1,-1,action);
        return action.getList();
    }
    /**
     * Load each the elements using a SQL statement specifying a list of fields to be retrieved and dealt by action.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     * @throws DAOException
     */
    private int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action action) throws DAOException{
        PreparedStatement ps = null;
        Connection connection = null;
        // logger.debug("sql string:\n" + sql + "\n");
        try {
            connection = this.getConnection();
            ps = connection.prepareStatement(sql,
                    ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            fillPrepareStatement(ps, argList);
            return this.loadByPreparedStatement(ps, fieldList, startRow, numRows, action);
        } catch (DAOException e) {
            throw e;
        }catch (SQLException e) {
            throw new DataAccessException(e);
        } finally {
            this.getManager().close(ps);
            this.freeConnection(connection);
        }
    }
    private String createSqlString(int[] fieldList,String where){
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS);
        } else{
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; ++i){
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }            
        }
        sql.append(" FROM fl_store ");
        if(null!=where)
            sql.append(where);
        return sql.toString();
    }
    
    class ListAction implements Action {
        final List<StoreBean> list;
        protected ListAction(List<StoreBean> list) {
            if(null==list)
                throw new IllegalArgumentException("list must not be null");
            this.list = list;
        }

        protected ListAction() {
            list=new ArrayList<StoreBean>();
        }

        public List<StoreBean> getList() {
            return list;
        }

        @Override
        public void call(StoreBean bean) {
            list.add(bean);
        }

        @Override
        public StoreBean getBean() {
            return null;
        }
    }
    public static abstract class NoListAction implements Action {
        SoftReference<StoreBean> sf=new SoftReference<StoreBean>(new StoreBean());
        @Override
        public final StoreBean getBean() {
            StoreBean bean = sf.get();
            if(null==bean){
                sf=new SoftReference<StoreBean>(bean=new StoreBean());
            }
            return bean.clean();
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) throws DAOException{
        return Manager.getInstance().runAsTransaction(fun);
    }
    
    @Override
    public void runAsTransaction(final Runnable fun) throws DAOException{
        Manager.getInstance().runAsTransaction(fun);
    }

}
