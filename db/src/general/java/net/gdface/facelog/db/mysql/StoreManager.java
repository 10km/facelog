// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.java.vm
// ______________________________________________________
package net.gdface.facelog.db.mysql;

import java.util.concurrent.Callable;

import net.gdface.facelog.db.Constant;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.IStoreManager;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.WrapDAOException;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.image.FlStoreManager;
import net.gdface.facelog.dborm.image.FlStoreBean;

/**
 * Handles database calls (save, load, count, etc...) for the fl_store table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.<br>
 * Remarks: 二进制数据存储表<br>
 * @author guyadong
 */
public class StoreManager extends TableManager.Adapter<StoreBean> implements IStoreManager
{
    private FlStoreManager nativeManager = FlStoreManager.getInstance();
    private IDbConverter<net.gdface.facelog.dborm.device.FlDeviceBean,net.gdface.facelog.dborm.face.FlFaceBean,net.gdface.facelog.dborm.face.FlFeatureBean,net.gdface.facelog.dborm.image.FlImageBean,net.gdface.facelog.dborm.log.FlLogBean,net.gdface.facelog.dborm.person.FlPersonBean,net.gdface.facelog.dborm.image.FlStoreBean,net.gdface.facelog.dborm.log.FlLogLightBean> dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<StoreBean,FlStoreBean> beanConverter = dbConverter.getStoreBeanConverter();
    private static StoreManager singleton = new StoreManager();
    protected StoreManager(){}
    /**
    * @return table name
    */
    public String getTableName() {
        return this.nativeManager.getTableName();
    }

    /**
    * @return field names of table
    */
    public String getFields() {
        return this.nativeManager.getFields();
    }
    
    public String getFullFields() {
        return this.nativeManager.getFullFields();
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return this.nativeManager.getPrimarykeyNames();
    }
    
    /**
     * Get the {@link StoreManager} singleton.
     *
     * @return {@link StoreManager}
     */
    public static StoreManager getInstance()
    {
        return singleton;
    }
   
    @Override
    protected Class<StoreBean> _beanType(){
        return StoreBean.class;
    }
    
    public IDbConverter<net.gdface.facelog.dborm.device.FlDeviceBean,net.gdface.facelog.dborm.face.FlFaceBean,net.gdface.facelog.dborm.face.FlFeatureBean,net.gdface.facelog.dborm.image.FlImageBean,net.gdface.facelog.dborm.log.FlLogBean,net.gdface.facelog.dborm.person.FlPersonBean,net.gdface.facelog.dborm.image.FlStoreBean,net.gdface.facelog.dborm.log.FlLogLightBean> getDbConverter() {
        return dbConverter;
    }

    /**
     * set  {@link IDbConverter} as converter used by manager.<br>
     * throw {@link NullPointerException} if {@code dbConverter} is null
     * @param dbConverter
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public synchronized void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getStoreBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override IStoreManager
    @Override 
    public StoreBean loadByPrimaryKey(String md5)
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKey(md5));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //1.2
    @Override
    public StoreBean loadByPrimaryKey(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByPrimaryKey(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //1.3
    @Override
    public StoreBean loadByPrimaryKey(Object ...keys){
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof String))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
        return loadByPrimaryKey((String)keys[0]);
    }
    
    //1.4 override IStoreManager
    @Override 
    public boolean existsPrimaryKey(String md5)
    {
        try{
            return nativeManager.existsPrimaryKey(md5 );
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //1.6
    @Override
    public boolean existsByPrimaryKey(StoreBean bean)
    {
        return null == bean ? false : existsPrimaryKey(bean.getMd5());
    }
    //1.7
    @Override
    public StoreBean checkDuplicate(StoreBean bean){
        if(null != bean)
            checkDuplicate(bean.getMd5());            
        return bean;   
    }
    //1.4.1 override IStoreManager
    @Override 
    public String checkDuplicate(String md5){
        try{
            return this.nativeManager.checkDuplicate(md5);
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //1.8 override IStoreManager
    @Override 
    public java.util.List<StoreBean> loadByPrimaryKey(String... keys){
        if(null == keys)return new java.util.ArrayList<StoreBean>();
        java.util.ArrayList<StoreBean> list = new java.util.ArrayList<StoreBean>(keys.length);
        for(int i = 0 ;i< keys.length;++i){
            list.add(loadByPrimaryKey(keys[i]));
        }
        return list;
    }
    //1.9 override IStoreManager
    @Override 
    public java.util.List<StoreBean> loadByPrimaryKey(java.util.Collection<String> keys){
        if(null == keys )return new java.util.ArrayList<StoreBean>();
        java.util.ArrayList<StoreBean> list = new java.util.ArrayList<StoreBean>(keys.size());
        if(keys instanceof java.util.List){
            for(String key: keys){
                list.add(loadByPrimaryKey(key));
            }
        }else{
            StoreBean bean;
            for(String key: keys){
                if(null != (bean = loadByPrimaryKey(key)))
                    list.add(bean);
            }
        }
        return list;
    }
    //2 override IStoreManager
    @Override 
    public int deleteByPrimaryKey(String md5)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(md5);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //2
    @Override
    public int delete(StoreBean bean){
        try
        {
            return nativeManager.delete(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }   
    }
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys){
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof String))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
        return deleteByPrimaryKey((String)keys[0]);
    }
    //2.2 override IStoreManager
    @Override 
    public int deleteByPrimaryKey(String... keys){
        if(null == keys)return 0;
        int count = 0;
        for(String key:keys){
            count += deleteByPrimaryKey(key);
        }
        return count;
    }
    //2.3 override IStoreManager
    @Override 
    public int deleteByPrimaryKey(java.util.Collection<String> keys){
        if(null == keys)return 0;
        int count = 0;
        for(String key :keys){
            count += deleteByPrimaryKey(key);
        }
        return count;
    }
    //2.4 override IStoreManager
    @Override 
    public int delete(StoreBean... beans){
        if(null == beans)return 0;
        int count = 0;
        for(StoreBean bean :beans){
            count += delete(bean);
        }
        return count;
    }
    //2.5 override IStoreManager
    @Override 
    public int delete(java.util.Collection<StoreBean> beans){
        if(null == beans)return 0;
        int count = 0;
        for(StoreBean bean :beans){
            count += delete(bean);
        }
        return count;
    }
 
 


     

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////

    //11
    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    protected StoreBean insert(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //14
    @Override
    protected StoreBean update(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public StoreBean loadUniqueUsingTemplate(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }

    //20-5
    @Override
    public int loadUsingTemplate(StoreBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<StoreBean> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(StoreBean bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    //25
    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //20
    @Override
    public int countUsingTemplate(StoreBean bean, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    //35
    @Override
    public void registerListener(TableListener<StoreBean> listener)
    {
        this.nativeManager.registerListener(this.toNative(listener));
    }

    //36
    @Override
    public void unregisterListener(TableListener<StoreBean> listener)
    {
        this.nativeManager.unregisterListener(this.toNative(listener));
    }
    
    private net.gdface.facelog.dborm.TableListener<FlStoreBean> toNative(final TableListener<StoreBean> listener) {
        return null == listener ?null:new net.gdface.facelog.dborm.TableListener<FlStoreBean> (){

            @Override
            public void beforeInsert(FlStoreBean bean) throws DAOException {
                listener.beforeInsert(StoreManager.this.beanConverter.fromRight(bean));                
            }

            @Override
            public void afterInsert(FlStoreBean bean) throws DAOException {
                listener.afterInsert(StoreManager.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void beforeUpdate(FlStoreBean bean) throws DAOException {
                listener.beforeUpdate(StoreManager.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void afterUpdate(FlStoreBean bean) throws DAOException {
                listener.afterUpdate(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public void beforeDelete(FlStoreBean bean) throws DAOException {
                listener.beforeDelete(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public void afterDelete(FlStoreBean bean) throws DAOException {
                listener.afterDelete(StoreManager.this.beanConverter.fromRight(bean));
            }};
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //43
    @Override
    public boolean isPrimaryKey(String column){
        return this.nativeManager.isPrimaryKey(column);
    }
    
    @Override
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<StoreBean> action){
        try{
            return this.nativeManager.loadBySqlForAction(sql,argList,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    private net.gdface.facelog.dborm.TableManager.Action<FlStoreBean> toNative(final Action<StoreBean> action){
        if(null == action)
            throw new NullPointerException();
        return new net.gdface.facelog.dborm.TableManager.Action<FlStoreBean>(){

            @Override
            public void call(FlStoreBean bean) {
                action.call(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public FlStoreBean getBean() {
                return  StoreManager.this.beanConverter.toRight(action.getBean());
            }};
    }
    
    //45 override IStoreManager
    @Override 
    public java.util.List<String> toPrimaryKeyList(StoreBean... array){        
        if(null == array)return new java.util.ArrayList<String>();
        java.util.ArrayList<String> list = new java.util.ArrayList<String>(array.length);
        for(StoreBean bean:array){
            list.add(null == bean ? null : bean.getMd5());
        }
        return list;
    }
    //46 override IStoreManager
    @Override 
    public java.util.List<String> toPrimaryKeyList(java.util.Collection<StoreBean> collection){        
        if(null == collection)return new java.util.ArrayList<String>();
        java.util.ArrayList<String> list = new java.util.ArrayList<String>(collection.size());
        for(StoreBean bean:collection){
            list.add(null == bean ? null : bean.getMd5());
        }
        return list;
    }
}
