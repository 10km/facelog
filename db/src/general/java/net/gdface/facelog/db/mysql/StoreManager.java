// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________



package net.gdface.facelog.db.mysql;

import java.util.List;
import java.util.Collection;
import java.util.concurrent.Callable;

import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.BaseBean;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.StoreListener;
import net.gdface.facelog.db.WrapDAOException;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.image.FlStoreManager;
import net.gdface.facelog.dborm.image.FlStoreBean;
import net.gdface.facelog.dborm.image.FlStoreListener;
import net.gdface.facelog.dborm.image.FlImageBean;
/**
 * Handles database calls (save, load, count, etc...) for the fl_store table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.
 * @author guyadong
 */
public class StoreManager extends TableManager.Adapter<StoreBean>
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the md5 field.
     */
    public static final int ID_MD5 = 0;

    /**
     * Identify the encoding field.
     */
    public static final int ID_ENCODING = 1;

    /**
     * Identify the data field.
     */
    public static final int ID_DATA = 2;

    /**
     * Tablename.
     */
        public static final String TABLE_NAME="fl_store";
    /**
     * Contains all the full fields of the fl_store table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
        "fl_store.md5"
        ,"fl_store.encoding"
        ,"fl_store.data"
    };

    /**
     * Contains all the fields of the fl_store table.
     */
    public static final String[] FIELD_NAMES =
    {
        "md5"
        ,"encoding"
        ,"data"
    };
   /**
     * Contains all the primarykey fields of the fl_store table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "md5"
    };
    /**
     * Field that contains the comma separated fields of the fl_store table.
     */
    public static final String ALL_FULL_FIELDS = "fl_store.md5"
                            + ",fl_store.encoding"
                            + ",fl_store.data";

    /**
     * Field that contains the comma separated fields of the fl_store table.
     */
    public static final String ALL_FIELDS = "md5"
                            + ",encoding"
                            + ",data";

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }
    
    private FlStoreManager nativeManager = FlStoreManager.getInstance();
    private IDbConverter dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<StoreBean,FlStoreBean> beanConverter = dbConverter.getStoreBeanConverter();
    private static StoreManager singleton = new StoreManager();

    /**
     * Get the {@link StoreManager} singleton.
     *
     * @return {@link StoreManager}
     */
    public static StoreManager getInstance()
    {
        return singleton;
    }
    
    public FlStoreManager getNativeManager() {
        return nativeManager;
    }

    public void setNativeManager(FlStoreManager nativeManager) {
        this.nativeManager = nativeManager;
    }
    
    public IDbConverter getDbConverter() {
        return dbConverter;
    }

    /**
     * set  {@link IDbConverter} as converter used by manager.<br>
     * throw {@link NullPointerException} if {@code dbConverter} is null
     * @param dbConverter
     */
    public synchronized void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getStoreBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link StoreBean} from the fl_store using primary key fields.
     *
     * @param md5 String - PK# 1
     * @return a unique StoreBean or {@code null} if not found
     */
    //1
    public StoreBean loadByPrimaryKey(String md5)
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKey(md5));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Loads a {@link StoreBean} from the fl_store using primary key fields of {@code bean}.
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link StoreBean} with primary key fields
     * @return a unique {@link StoreBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(String md5)}
     */
    //1.2
    public StoreBean loadByPrimaryKey(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByPrimaryKey(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Returns true if this fl_store contains row with primary key fields.
     * @author guyadong
     * @param md5 String - PK# 1
     * @see #loadByPrimaryKey(String md5)
     */
    //1.3
    public boolean existsPrimaryKey(String md5)
    {
        return null!=loadByPrimaryKey(md5 );

    }

    /**
     * Returns true if this fl_store contains row specified by primary key fields of {@link StoreBean}.<br>
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link StoreBean} with primary key fields
     * @return 
     * @see {@link #loadByPrimaryKey(StoreBean bean)}
     */
    //1.4
    @Override
    public boolean existsPrimaryKey(StoreBean bean)
    {
        return null!=loadByPrimaryKey(bean);

    }
    
    /**
     * Delete row according to its primary keys.
     *
     * @param md5 String - PK# 1
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(String md5)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(md5);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Delete row according to Primary Key fileds of the parameter{@code bean},
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the StoreBean with primary key fields
     * @return the number of deleted rows
     * @see {@link #deleteByPrimaryKey(String md5)}
     */
    //2.1
    @Override
    public int deleteByPrimaryKey(StoreBean bean)
    {
        try{
            return this.nativeManager.deleteByPrimaryKey(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Class<?>[]> IMPORT_RESULT_TYPES=new java.util.HashMap<String,Class<?>[]>(){
        private static final long serialVersionUID = 1L;
    {        
    put("impFlImagebyMd5",new Class<?>[]{ImageBean.class,FlImageBean.class});
    put("impFlImagebyThumbMd5",new Class<?>[]{ImageBean.class,FlImageBean.class});
    }} ;
    
    @SuppressWarnings("unchecked")
    private final <T> IBeanConverter<T,Object> getBeanConverter(String fkName){
        Class<?>[] resultClass=IMPORT_RESULT_TYPES.get(fkName);
        if(null == resultClass)
            throw new IllegalArgumentException("invalid fkName: " + fkName);
        return (IBeanConverter<T, Object>) this.dbConverter.getBeanConverter(resultClass[0],resultClass[1]);
    }
    
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyMd5 -> ImageBean</li>
     *     <li> impFlImagebyThumbMd5 -> ImageBean</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param fkName valid values: impFlImagebyMd5,impFlImagebyThumbMd5
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @Override
    public <T extends BaseBean> T[] getImportedBeans(StoreBean bean,String fkName){
        try {
            IBeanConverter<T,Object> resultConverter = getBeanConverter(fkName);
            return resultConverter.fromRight(nativeManager.getImportedBeans( this.beanConverter.toRight(bean),fkName));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Retrieves imported T objects by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyMd5 -> ImageBean</li>
     *     <li> impFlImagebyThumbMd5 -> ImageBean</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param fkName valid values: impFlImagebyMd5,impFlImagebyThumbMd5
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @Override
    public <T extends BaseBean> List<T> getImportedBeansAsList(StoreBean bean,String fkName){
        try {
            IBeanConverter<T,Object> resultConverter = getBeanConverter(fkName);
            return resultConverter.fromRight(nativeManager.getImportedBeansAsList( this.beanConverter.toRight(bean),fkName));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Set the T objects as imported beans of bean object by fkName.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> impFlImagebyMd5 -> ImageBean</li>
     *     <li> impFlImagebyThumbMd5 -> ImageBean</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param importedBeans the ImageBean array to associate to the {@link StoreBean}
     * @param fkName valid values: impFlImagebyMd5,impFlImagebyThumbMd5
     * @return importedBeans always
     */
    @Override
    public <T extends BaseBean> T[] setImportedBeans(StoreBean bean,T[] importedBeans,String fkName){
        try {
            IBeanConverter<T,Object> resultConverter = getBeanConverter(fkName);
            return resultConverter.fromRight(importedBeans,nativeManager.setImportedBeans( 
                this.beanConverter.toRight(bean),
                resultConverter.toRight(importedBeans),
                fkName));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Set the importedBeans associates to the bean by fkName<br>
     * @param <T>
     * <ul>
     *     <li> impFlImagebyMd5 -> ImageBean Collection</li>
     *     <li> impFlImagebyThumbMd5 -> ImageBean Collection</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param importedBeans the <T> object to associate to the {@link StoreBean}
     * @param fkName valid values: impFlImagebyMd5,impFlImagebyThumbMd5
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends BaseBean,C extends Collection<T>> C setImportedBeans(StoreBean bean,C importedBeans,String fkName){
        try {
            IBeanConverter<T,Object> resultConverter = getBeanConverter(fkName);
            if(importedBeans instanceof List){
                resultConverter.fromRight((List<T>)importedBeans,nativeManager.setImportedBeans( 
                        this.beanConverter.toRight(bean),
                        resultConverter.toRight(importedBeans),
                        fkName));            	
            }else{
                T[] array = importedBeans.toArray((T[])new Object[importedBeans.size()]);
                resultConverter.fromRight(array,nativeManager.setImportedBeans( 
                    this.beanConverter.toRight(bean),
                    resultConverter.toRight(array),
                    fkName));                
            }
            return importedBeans;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link ImageBean} object from the fl_image.md5 field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public ImageBean[] getFlImageBeansByMd5(StoreBean bean)
    {
        try {
            return this.dbConverter.getImageBeanConverter().fromRight(nativeManager.getFlImageBeansByMd5( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from fl_image.md5 field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public List<ImageBean> getFlImageBeansByMd5AsList(StoreBean bean)
    {
        try {
            return this.dbConverter.getImageBeanConverter().fromRight(nativeManager.getFlImageBeansByMd5AsList( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object array associate to StoreBean by the fl_image.md5 field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param bean the referenced {@link StoreBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByMd5(ImageBean, StoreBean)
     */
    //3.3 SET IMPORTED
    public ImageBean[] setFlImageBeansByMd5(StoreBean bean , ImageBean[] importedBeans)
    {
        try {
            IBeanConverter<ImageBean,FlImageBean> importedConverter = this.dbConverter.getImageBeanConverter();
            return importedConverter.fromRight(importedBeans,
                this.nativeManager.setFlImageBeansByMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object collection associate to StoreBean by the fl_image.md5 field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param bean the referenced {@link StoreBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByMd5(ImageBean, StoreBean)
     */
    //3.4 SET IMPORTED
    public <C extends Collection<ImageBean>> C setFlImageBeansByMd5(StoreBean bean , C importedBeans)
    {
        try {
            IBeanConverter<ImageBean,FlImageBean> importedConverter = this.dbConverter.getImageBeanConverter();
            if(importedBeans instanceof List){
                importedConverter.fromRight((List<ImageBean>)importedBeans,nativeManager.setFlImageBeansByMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                    ));
            }else{
                ImageBean[] array = importedBeans.toArray(new ImageBean[0]);
                importedConverter.fromRight(array,nativeManager.setFlImageBeansByMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(array)
                    ));
            }
            return importedBeans;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from the fl_image.thumb_md5 field.<BR>
     * FK_NAME : fl_image_ibfk_2 
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public ImageBean[] getFlImageBeansByThumbMd5(StoreBean bean)
    {
        try {
            return this.dbConverter.getImageBeanConverter().fromRight(nativeManager.getFlImageBeansByThumbMd5( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from fl_image.thumb_md5 field.<BR>
     * FK_NAME:fl_image_ibfk_2
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public List<ImageBean> getFlImageBeansByThumbMd5AsList(StoreBean bean)
    {
        try {
            return this.dbConverter.getImageBeanConverter().fromRight(nativeManager.getFlImageBeansByThumbMd5AsList( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object array associate to StoreBean by the fl_image.thumb_md5 field.<BR>
     * FK_NAME : fl_image_ibfk_2 
     * @param bean the referenced {@link StoreBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByThumbMd5(ImageBean, StoreBean)
     */
    //3.3 SET IMPORTED
    public ImageBean[] setFlImageBeansByThumbMd5(StoreBean bean , ImageBean[] importedBeans)
    {
        try {
            IBeanConverter<ImageBean,FlImageBean> importedConverter = this.dbConverter.getImageBeanConverter();
            return importedConverter.fromRight(importedBeans,
                this.nativeManager.setFlImageBeansByThumbMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object collection associate to StoreBean by the fl_image.thumb_md5 field.<BR>
     * FK_NAME:fl_image_ibfk_2
     * @param bean the referenced {@link StoreBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByThumbMd5(ImageBean, StoreBean)
     */
    //3.4 SET IMPORTED
    public <C extends Collection<ImageBean>> C setFlImageBeansByThumbMd5(StoreBean bean , C importedBeans)
    {
        try {
            IBeanConverter<ImageBean,FlImageBean> importedConverter = this.dbConverter.getImageBeanConverter();
            if(importedBeans instanceof List){
                importedConverter.fromRight((List<ImageBean>)importedBeans,nativeManager.setFlImageBeansByThumbMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                    ));
            }else{
                ImageBean[] array = importedBeans.toArray(new ImageBean[0]);
                importedConverter.fromRight(array,nativeManager.setFlImageBeansByThumbMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(array)
                    ));
            }
            return importedBeans;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }



    /**
     * Save the StoreBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link StoreBean} bean to be saved
         * @param impFlImagebyMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @param impFlImagebyThumbMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @return the inserted or updated {@link StoreBean} bean
     */
    //3.5 SYNC SAVE 
    public StoreBean save(StoreBean bean
        
        , ImageBean[] impFlImagebyMd5 , ImageBean[] impFlImagebyThumbMd5 )
    {
        try{
            return this.beanConverter.fromRight(bean,nativeManager.save(this.beanConverter.toRight(bean)
                                , this.dbConverter.getImageBeanConverter().toRight(impFlImagebyMd5)  , this.dbConverter.getImageBeanConverter().toRight(impFlImagebyThumbMd5)  ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(StoreBean , ImageBean[] , ImageBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public StoreBean saveAsTransaction(final StoreBean bean
        
        ,final ImageBean[] impFlImagebyMd5 ,final ImageBean[] impFlImagebyThumbMd5 )
    {
        return this.runAsTransaction(new Callable<StoreBean>(){
            @Override
            public StoreBean call() throws Exception {
                return save(bean , impFlImagebyMd5 , impFlImagebyThumbMd5 );
            }});
    }
    /**
     * Save the StoreBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link StoreBean} bean to be saved
         * @param impFlImagebyMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @param impFlImagebyThumbMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @return the inserted or updated {@link StoreBean} bean
     */
    //3.7 SYNC SAVE 
    public StoreBean save(StoreBean bean
        
        , Collection<ImageBean> impFlImagebyMd5 , Collection<ImageBean> impFlImagebyThumbMd5 )
    {
        try{
            return this.beanConverter.fromRight(bean,nativeManager.save(this.beanConverter.toRight(bean)
                                , this.dbConverter.getImageBeanConverter().toRight(impFlImagebyMd5)  , this.dbConverter.getImageBeanConverter().toRight(impFlImagebyThumbMd5)  ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save(StoreBean , Collection , Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public StoreBean saveAsTransaction(final StoreBean bean
        
        ,final  Collection<ImageBean> impFlImagebyMd5 ,final  Collection<ImageBean> impFlImagebyThumbMd5 ) throws DAOException
    {
        return this.runAsTransaction(new Callable<StoreBean>(){
            @Override
            public StoreBean call() throws Exception {
                return save(bean , impFlImagebyMd5 , impFlImagebyThumbMd5 );
            }});
    }
  
    @Override
    public <T extends BaseBean> T getReferencedBean(StoreBean bean,String fkName){
        throw new UnsupportedOperationException();
    }
    @Override
    public <T extends BaseBean> T setReferencedBean(StoreBean bean,T beanToSet,String fkName){
        throw new UnsupportedOperationException();
    }
     

    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from fl_store.
     *
     * @return an array of FlStoreManager bean
     */
    //5
    @Override
    public StoreBean[] loadAll()
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUsingTemplate(null));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Loads each row from fl_store and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //5-1
    @Override
    public int loadAll(Action<StoreBean> action)
    {
        return this.loadUsingTemplate(null,action);
    }
    /**
     * Loads all the rows from fl_store.
     *
     * @return a list of StoreBean bean
     */
    //5-2
    @Override
    public List<StoreBean> loadAllAsList()
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from fl_store, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of FlStoreManager bean
     */
    //6
    @Override
    public StoreBean[] loadAll(int startRow, int numRows)
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }
    /**
     *  Loads the given number of rows from fl_store, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //6-1
    @Override
    public int loadAll(int startRow, int numRows,Action<StoreBean> action)
    {
        return this.loadUsingTemplate(null, startRow, numRows,action);
    }
    /**
     * Loads the given number of rows from fl_store, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlStoreManager bean
     */
    //6-2
    @Override
    public List<StoreBean> loadAllAsList(int startRow, int numRows)
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of StoreBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting StoreBean table
     */
    //7
    @Override
    public StoreBean[] loadByWhere(String where)
    {
        return this.loadByWhere(where, (int[])null);
    }
    
    /**
     * Retrieves a list of StoreBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting StoreBean table
     */
    //7
    @Override
    public List<StoreBean> loadByWhereAsList(String where)
    {
        return this.loadByWhereAsList(where, null);
    }
    /**
     * Retrieves each row of StoreBean given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //7-1
    @Override
    public int loadByWhere(String where,Action<StoreBean> action)
    {
        return this.loadByWhere(where, null,action);
    }
    /**
     * Retrieves an array of StoreBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting StoreBean table
     */
    //8
    @Override
    public StoreBean[] loadByWhere(String where, int[] fieldList)
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of StoreBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting StoreBean table
     */
    //8
    @Override
    public List<StoreBean> loadByWhereAsList(String where, int[] fieldList)
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }
    /**
     * Retrieves each row of StoreBean given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //8-1
    @Override
    public int loadByWhere(String where, int[] fieldList,Action<StoreBean> action)
    {
        return this.loadByWhere(where, fieldList, 1, -1,action);
    }

    /**
     * Retrieves an array of StoreBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting StoreBean table
     */
    //9
    @Override
    public StoreBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows)
    {
        return (StoreBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new StoreBean[0]);
    }
    /**
     * Retrieves each row of  StoreBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //9-1
    @Override
    public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action<StoreBean> action)
    {
        return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
    }

    /**
     * Retrieves a list of StoreBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting StoreBean table
     */
    //9-2
    @Override
    public List<StoreBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByWhereAsList(where,fieldList,startRow,numRows));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Retrieves each row of StoreBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //9-3
    @Override
    public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action<StoreBean> action)
    {
        try{
            return this.nativeManager.loadByWhereForAction(where,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Deletes rows from the fl_store table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    //11
    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the {@link StoreBean} bean into the database.
     *
     * @param bean the {@link StoreBean} bean to be saved
     * @return the inserted or updated bean,or null if bean is null
     */
    //12
    @Override
    public StoreBean save(StoreBean bean)
    {
        if(null == bean)return null;
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the {@link StoreBean} bean into the database.
     *
     * @param bean the {@link StoreBean} bean to be saved
     * @return the inserted bean or null if bean is null
     */
    //13
    @Override
    public StoreBean insert(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Update the {@link StoreBean} bean record in the database according to the changes.
     *
     * @param bean the {@link StoreBean} bean to be updated
     * @return the updated bean or null if bean is null
     */
    //14
    @Override
    public StoreBean update(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Saves an array of {@link StoreBean} bean into the database.
     *
     * @param beans the {@link StoreBean} bean table to be saved
     * @return the saved {@link StoreBean} beans.
     */
    //15
    public StoreBean[] save(StoreBean[] beans)
    {
        if(null !=beans){
            for (StoreBean bean : beans) 
            {
                this.save(bean);
            }
        }
        return beans;
    }

    /**
     * Saves a collection of {@link StoreBean} bean into the database.
     *
     * @param beans the {@link StoreBean} bean table to be saved
     * @return the saved {@link StoreBean} beans.
     */
    //15-2
    @Override
    public <C extends Collection<StoreBean>> C save(C beans)
    {
        if(null != beans){
            for (StoreBean bean : beans) 
            {
                this.save(bean);
            }
        }
        return beans;
    }
    /**
     * Saves an array of {@link StoreBean} bean into the database as transaction.
     *
     * @param beans the {@link StoreBean} bean table to be saved
     * @return the saved {@link StoreBean} beans.
     * @see #save(StoreBean[])
     */
    //15-3
    @Override
    public StoreBean[] saveAsTransaction(final StoreBean[] beans) {
        return this.runAsTransaction(new Callable<StoreBean[]>(){
            @Override
            public StoreBean[] call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Saves a collection of {@link StoreBean} bean into the database as transaction.
     *
     * @param beans the {@link StoreBean} bean table to be saved
     * @return the saved {@link StoreBean} beans.
     * @see #save(List)
     */
    //15-4
    @Override
    public <C extends Collection<StoreBean>> C saveAsTransaction(final C beans){
        return this.runAsTransaction(new Callable<C>(){
            @Override
            public C call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Insert an array of {@link StoreBean} bean into the database.
     *
     * @param beans the {@link StoreBean} bean table to be inserted
     * @return the saved {@link StoreBean} beans.
     */
    //16
    @Override
    public StoreBean[] insert(StoreBean[] beans)
    {
        return this.save(beans);
    }

    /**
     * Insert a collection of {@link StoreBean} bean into the database.
     *
     * @param beans the {@link StoreBean} bean table to be inserted
     * @return the saved {@link StoreBean} beans.
     */
    //16-2
    @Override
    public <C extends Collection<StoreBean>> C insert(C beans)
    {
        return this.save(beans);
    }
    
    /**
     * Insert an array of {@link StoreBean} bean into the database as transaction.
     *
     * @param beans the {@link StoreBean} bean table to be inserted
     * @return the saved {@link StoreBean} beans.
     * @see #saveAsTransaction(StoreBean[])
     */
    //16-3
    @Override
    public StoreBean[] insertAsTransaction(StoreBean[] beans)
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Insert a collection of {@link StoreBean} bean as transaction into the database.
     *
     * @param beans the {@link StoreBean} bean table to be inserted
     * @return the saved {@link StoreBean} beans.
     * @see #saveAsTransaction(List)
     */
    //16-4
    @Override
    public <C extends Collection<StoreBean>> C insertAsTransaction(C beans)
    {
        return this.saveAsTransaction(beans);
    }


    /**
     * Update an array of {@link StoreBean} bean into the database.
     *
     * @param beans the {@link StoreBean} bean table to be inserted
     * @return the saved {@link StoreBean} beans.
     */
    //17
    @Override
    public StoreBean[] update(StoreBean[] beans)
    {
        return this.save(beans);
    }

    /**
     * Update a collection of {@link StoreBean} bean into the database.
     *
     * @param beans the {@link StoreBean} bean table to be inserted
     * @return the saved {@link StoreBean} beans.
     */
    //17-2
    @Override
    public <C extends Collection<StoreBean>> C update(C beans)
    {
        return this.save(beans);
    }
    
    /**
     * Update an array of {@link StoreBean} bean into the database as transaction.
     *
     * @param beans the {@link StoreBean} beans table to be inserted
     * @return the saved {@link StoreBean} beans.
     * @see #saveAsTransaction(StoreBean[])
     */
    //17-3
    @Override
    public StoreBean[] updateAsTransaction(StoreBean[] beans)
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Update a collection of {@link StoreBean} bean into the database as transaction.
     *
     * @param beans the {@link StoreBean} bean table to be inserted
     * @return the saved {@link StoreBean} beans.
     * @see #saveAsTransaction(List)
     */
    //17-4
    @Override
    public <C extends Collection<StoreBean>> C updateAsTransaction(C beans)
    {
        return this.saveAsTransaction(beans);
    }
    
    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique StoreBean bean from a template one giving a c
     *
     * @param bean the StoreBean bean to look for
     * @return the bean matching the template
     */
    //18
    @Override
    public StoreBean loadUniqueUsingTemplate(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }

    /**
     * Loads an array of StoreBean from a template one.
     *
     * @param bean the StoreBean template to look for
     * @return all the StoreBean matching the template
     */
    //19
    @Override
    public StoreBean[] loadUsingTemplate(StoreBean bean)
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the StoreBean template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //19-1
    @Override
    public int loadUsingTemplate(StoreBean bean,Action<StoreBean> action)
    {
        return this.loadUsingTemplate(bean, 1, -1,action);
    }

    /**
     * Loads a list of StoreBean from a template one.
     *
     * @param bean the StoreBean template to look for
     * @return all the StoreBean matching the template
     */
    //19-2
    @Override
    public List<StoreBean> loadUsingTemplateAsList(StoreBean bean)
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of StoreBean from a template one, given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the StoreBean matching the template
     */
    //20
    @Override
    public StoreBean[] loadUsingTemplate(StoreBean bean, int startRow, int numRows)
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //20-1
    @Override
    public int loadUsingTemplate(StoreBean bean, int startRow, int numRows,Action<StoreBean> action)
    {
        return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
    }
    /**
     * Loads a list of StoreBean from a template one, given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the StoreBean matching the template
     */
    //20-2
    @Override
    public List<StoreBean> loadUsingTemplateAsList(StoreBean bean, int startRow, int numRows)
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of StoreBean from a template one, given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the StoreBean matching the template
     */
    //20-3
    @Override
    public StoreBean[] loadUsingTemplate(StoreBean bean, int startRow, int numRows, int searchType)
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new StoreBean[0]);
    }

    /**
     * Loads a list of StoreBean from a template one, given the start row and number of rows.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the StoreBean matching the template
     */
    //20-4
    @Override
    public List<StoreBean> loadUsingTemplateAsList(StoreBean bean, int startRow, int numRows, int searchType)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUsingTemplateAsList(this.beanConverter.toRight(bean),startRow,numRows,searchType));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }        
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //20-5
    @Override
    public int loadUsingTemplate(StoreBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<StoreBean> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Deletes rows using a StoreBean template.
     *
     * @param bean the StoreBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //21
    @Override
    public int deleteUsingTemplate(StoreBean bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }





    /**
     * Retrieves the number of rows of the table fl_store with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    //25
    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    /**
     * count the number of elements of a specific StoreBean bean given the start row and number of rows and the search type
     *
     * @param bean the StoreBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     */
    //20
    @Override
    public int countUsingTemplate(StoreBean bean, int startRow, int numRows, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),startRow,numRows,searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    /**
     * Registers a unique {@link StoreListener} listener.
     */
    //35
    @Override
    public void registerListener(TableListener listener)
    {
        this.nativeManager.registerListener(this.toNative((StoreListener)listener));
    }

    private FlStoreListener toNative(final StoreListener listener) {
        return null == listener ?null:new FlStoreListener (){

            @Override
            public void beforeInsert(FlStoreBean bean) throws DAOException {
                listener.beforeInsert(StoreManager.this.beanConverter.fromRight(bean));                
            }

            @Override
            public void afterInsert(FlStoreBean bean) throws DAOException {
                listener.afterInsert(StoreManager.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void beforeUpdate(FlStoreBean bean) throws DAOException {
                listener.beforeUpdate(StoreManager.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void afterUpdate(FlStoreBean bean) throws DAOException {
                listener.afterUpdate(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public void beforeDelete(FlStoreBean bean) throws DAOException {
                listener.beforeDelete(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public void afterDelete(FlStoreBean bean) throws DAOException {
                listener.afterDelete(StoreManager.this.beanConverter.fromRight(bean));
            }};
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________


    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     * @author guyadong
     */
    //43
    public static boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of StoreBean
     */
    @Override
    public StoreBean[] loadBySql(String sql, Object[] argList, int[] fieldList) {
        return loadBySqlAsList(sql, argList, fieldList).toArray(new StoreBean[0]);
    }
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of StoreBean
     */
    @Override
    public List<StoreBean> loadBySqlAsList(String sql, Object[] argList, int[] fieldList){
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBySqlAsList(sql,argList,fieldList));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public void runAsTransaction(final Runnable fun){
        try{
            this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    private FlStoreManager.Action toNative(final Action<StoreBean> action){
        if(null == action)
            throw new NullPointerException();
        return new FlStoreManager.Action(){

            @Override
            public void call(FlStoreBean bean) {
                action.call(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public FlStoreBean getBean() {
                return  StoreManager.this.beanConverter.toRight(action.getBean());
            }};
    }
}
