// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.mysql;

import java.util.concurrent.Callable;

import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.BaseBean;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.WrapDAOException;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.image.FlStoreManager;
import net.gdface.facelog.dborm.image.FlStoreBean;
import net.gdface.facelog.dborm.image.FlImageBean;
/**
 * Handles database calls (save, load, count, etc...) for the fl_store table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.
 * @author guyadong
 */
public class StoreManager extends TableManager.Adapter<StoreBean>
{
    private FlStoreManager nativeManager = FlStoreManager.getInstance();
    private IDbConverter<net.gdface.facelog.dborm.device.FlDeviceBean,net.gdface.facelog.dborm.face.FlFaceBean,net.gdface.facelog.dborm.image.FlImageBean,net.gdface.facelog.dborm.log.FlLogBean,net.gdface.facelog.dborm.person.FlPersonBean,net.gdface.facelog.dborm.image.FlStoreBean,net.gdface.facelog.dborm.face.FlFaceLightBean,net.gdface.facelog.dborm.face.FlFeatureBean,net.gdface.facelog.dborm.log.FlLogLightBean> dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<StoreBean,FlStoreBean> beanConverter = dbConverter.getStoreBeanConverter();
    private static StoreManager singleton = new StoreManager();

    /**
    * @return table name
    */
    public String getTableName() {
        return this.nativeManager.getTableName();
    }

    /**
    * @return field names of table
    */
    public String[] getFieldNames() {
        return this.nativeManager.getFieldNames();
    }

    public String getFieldNamesAsString() {
        return this.nativeManager.getFieldNamesAsString();
    }
    
    public String[] getFullFieldNames() {
        return this.nativeManager.getFullFieldNames();
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return this.nativeManager.getPrimarykeyNames();
    }
    
    /**
     * Get the {@link StoreManager} singleton.
     *
     * @return {@link StoreManager}
     */
    public static StoreManager getInstance()
    {
        return singleton;
    }
   
    public IDbConverter<net.gdface.facelog.dborm.device.FlDeviceBean,net.gdface.facelog.dborm.face.FlFaceBean,net.gdface.facelog.dborm.image.FlImageBean,net.gdface.facelog.dborm.log.FlLogBean,net.gdface.facelog.dborm.person.FlPersonBean,net.gdface.facelog.dborm.image.FlStoreBean,net.gdface.facelog.dborm.face.FlFaceLightBean,net.gdface.facelog.dborm.face.FlFeatureBean,net.gdface.facelog.dborm.log.FlLogLightBean> getDbConverter() {
        return dbConverter;
    }

    /**
     * set  {@link IDbConverter} as converter used by manager.<br>
     * throw {@link NullPointerException} if {@code dbConverter} is null
     * @param dbConverter
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public synchronized void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getStoreBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link StoreBean} from the fl_store using primary key fields.
     *
     * @param md5 String - PK# 1
     * @return a unique StoreBean or {@code null} if not found
     */
    //1
    public StoreBean loadByPrimaryKey(String md5)
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKey(md5));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //1.2
    @Override
    public StoreBean loadByPrimaryKey(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByPrimaryKey(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Loads a {@link StoreBean} from the fl_store using primary key fields.
     * when you don't know which is primary key of table,you can use the method.
     * @param keys primary keys value:<br> 
     *             PK# 1:String     
     * @return a unique {@link StoreBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(String md5)}
     */
    //1.3
    public StoreBean loadByPrimaryKey(Object ...keys){
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof String))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
        return loadByPrimaryKey((String)keys[0]);
    }
    
    /**
     * Returns true if this fl_store contains row with primary key fields.
     * @param md5 String - PK# 1
     * @see #loadByPrimaryKey(String md5)
     */
    //1.4
    public boolean existsPrimaryKey(String md5)
    {
        return null!=loadByPrimaryKey(md5 );
    }
    
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     *
     * @param md5 String - PK# 1
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(String md5)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(md5);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Delete row according to its primary keys.
     *
     * @param keys primary keys value:<br> 
     *             PK# 1:String     
     * @return the number of deleted rows
     * @see {@link #deleteByPrimaryKey(String md5)}
     */   
    //2.1
    public int deleteByPrimaryKey(Object ...keys){
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof String))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:String");
        return deleteByPrimaryKey((String)keys[0]);
    }

 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_STORE_IK_FL_IMAGE_MD5} -> {@link FlImageBean}</li>
     *     <li> {@link TableManager#FL_STORE_IK_FL_IMAGE_THUMB_MD5} -> {@link FlImageBean}</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param ikIndex valid values: {@link TableManager#FL_STORE_IK_FL_IMAGE_MD5},{@link TableManager#FL_STORE_IK_FL_IMAGE_THUMB_MD5}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends BaseBean> T[] getImportedBeans(StoreBean bean,int ikIndex){
        switch(ikIndex){
        case FL_STORE_IK_FL_IMAGE_MD5:
            return (T[])this.getFlImageBeansByMd5(bean);
        case FL_STORE_IK_FL_IMAGE_THUMB_MD5:
            return (T[])this.getFlImageBeansByThumbMd5(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_STORE_IK_FL_IMAGE_MD5} -> {@link FlImageBean}</li>
     *     <li> {@link TableManager#FL_STORE_IK_FL_IMAGE_THUMB_MD5} -> {@link FlImageBean}</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param ikIndex valid values: {@link TableManager#FL_STORE_IK_FL_IMAGE_MD5},{@link TableManager#FL_STORE_IK_FL_IMAGE_THUMB_MD5}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends BaseBean> java.util.List<T> getImportedBeansAsList(StoreBean bean,int ikIndex){
        switch(ikIndex){
        case FL_STORE_IK_FL_IMAGE_MD5:
            return (java.util.List<T>)this.getFlImageBeansByMd5AsList(bean);
        case FL_STORE_IK_FL_IMAGE_THUMB_MD5:
            return (java.util.List<T>)this.getFlImageBeansByThumbMd5AsList(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> {@link TableManager#FL_STORE_IK_FL_IMAGE_MD5} -> {@link FlImageBean}</li>
     *     <li> {@link TableManager#FL_STORE_IK_FL_IMAGE_THUMB_MD5} -> {@link FlImageBean}</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param importedBeans the FlImageBean array to associate to the {@link StoreBean}
     * @param ikIndex valid values: {@link TableManager#FL_STORE_IK_FL_IMAGE_MD5},{@link TableManager#FL_STORE_IK_FL_IMAGE_THUMB_MD5}
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends BaseBean> T[] setImportedBeans(StoreBean bean,T[] importedBeans,int ikIndex){
        switch(ikIndex){
        case FL_STORE_IK_FL_IMAGE_MD5:
            return (T[])setFlImageBeansByMd5(bean,(ImageBean[])importedBeans);
        case FL_STORE_IK_FL_IMAGE_THUMB_MD5:
            return (T[])setFlImageBeansByThumbMd5(bean,(ImageBean[])importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T>
     * <ul>
     *     <li> {@link TableManager#FL_STORE_IK_FL_IMAGE_MD5} -> {@link FlImageBean}</li>
     *     <li> {@link TableManager#FL_STORE_IK_FL_IMAGE_THUMB_MD5} -> {@link FlImageBean}</li>
     * </ul>
     * @param bean the {@link StoreBean} object to use
     * @param importedBeans the <T> object to associate to the {@link StoreBean}
     * @param ikIndex valid values: {@link TableManager#FL_STORE_IK_FL_IMAGE_MD5},{@link TableManager#FL_STORE_IK_FL_IMAGE_THUMB_MD5}
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends BaseBean,C extends java.util.Collection<T>> C setImportedBeans(StoreBean bean,C importedBeans,int ikIndex){
        switch(ikIndex){
        case FL_STORE_IK_FL_IMAGE_MD5:
            return (C)setFlImageBeansByMd5(bean,(java.util.Collection<ImageBean>)importedBeans);
        case FL_STORE_IK_FL_IMAGE_THUMB_MD5:
            return (C)setFlImageBeansByThumbMd5(bean,(java.util.Collection<ImageBean>)importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link ImageBean} object from the fl_image.md5 field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public ImageBean[] getFlImageBeansByMd5(StoreBean bean)
    {
        try {
            return this.dbConverter.getImageBeanConverter().fromRight(nativeManager.getFlImageBeansByMd5( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from fl_image.md5 field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public java.util.List<ImageBean> getFlImageBeansByMd5AsList(StoreBean bean)
    {
        try {
            return this.dbConverter.getImageBeanConverter().fromRight(nativeManager.getFlImageBeansByMd5AsList( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object array associate to StoreBean by the fl_image.md5 field.<BR>
     * FK_NAME : fl_image_ibfk_1 
     * @param bean the referenced {@link StoreBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByMd5(ImageBean, StoreBean)
     */
    //3.3 SET IMPORTED
    public ImageBean[] setFlImageBeansByMd5(StoreBean bean , ImageBean[] importedBeans)
    {
        try {
            IBeanConverter<ImageBean,FlImageBean> importedConverter = this.dbConverter.getImageBeanConverter();
            return importedConverter.fromRight(importedBeans,
                this.nativeManager.setFlImageBeansByMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object java.util.Collection associate to StoreBean by the fl_image.md5 field.<BR>
     * FK_NAME:fl_image_ibfk_1
     * @param bean the referenced {@link StoreBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByMd5(ImageBean, StoreBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<ImageBean>> C setFlImageBeansByMd5(StoreBean bean , C importedBeans)
    {
        try {
            IBeanConverter<ImageBean,FlImageBean> importedConverter = this.dbConverter.getImageBeanConverter();
            if(importedBeans instanceof java.util.List){
                importedConverter.fromRight((java.util.List<ImageBean>)importedBeans,nativeManager.setFlImageBeansByMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                    ));
            }else{
                ImageBean[] array = importedBeans.toArray(new ImageBean[0]);
                importedConverter.fromRight(array,nativeManager.setFlImageBeansByMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(array)
                    ));
            }
            return importedBeans;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from the fl_image.thumb_md5 field.<BR>
     * FK_NAME : fl_image_ibfk_2 
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.1 GET IMPORTED
    public ImageBean[] getFlImageBeansByThumbMd5(StoreBean bean)
    {
        try {
            return this.dbConverter.getImageBeanConverter().fromRight(nativeManager.getFlImageBeansByThumbMd5( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link ImageBean} object from fl_image.thumb_md5 field.<BR>
     * FK_NAME:fl_image_ibfk_2
     * @param bean the {@link StoreBean}
     * @return the associated {@link ImageBean} beans or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET IMPORTED
    public java.util.List<ImageBean> getFlImageBeansByThumbMd5AsList(StoreBean bean)
    {
        try {
            return this.dbConverter.getImageBeanConverter().fromRight(nativeManager.getFlImageBeansByThumbMd5AsList( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object array associate to StoreBean by the fl_image.thumb_md5 field.<BR>
     * FK_NAME : fl_image_ibfk_2 
     * @param bean the referenced {@link StoreBean}
     * @param importedBeans imported beans from fl_image
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByThumbMd5(ImageBean, StoreBean)
     */
    //3.3 SET IMPORTED
    public ImageBean[] setFlImageBeansByThumbMd5(StoreBean bean , ImageBean[] importedBeans)
    {
        try {
            IBeanConverter<ImageBean,FlImageBean> importedConverter = this.dbConverter.getImageBeanConverter();
            return importedConverter.fromRight(importedBeans,
                this.nativeManager.setFlImageBeansByThumbMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * set  the {@link ImageBean} object java.util.Collection associate to StoreBean by the fl_image.thumb_md5 field.<BR>
     * FK_NAME:fl_image_ibfk_2
     * @param bean the referenced {@link StoreBean} 
     * @param importedBeans imported beans from fl_image 
     * @return importedBeans always
     * @see {@link FlImageManager#setReferencedByThumbMd5(ImageBean, StoreBean)
     */
    //3.4 SET IMPORTED
    public <C extends java.util.Collection<ImageBean>> C setFlImageBeansByThumbMd5(StoreBean bean , C importedBeans)
    {
        try {
            IBeanConverter<ImageBean,FlImageBean> importedConverter = this.dbConverter.getImageBeanConverter();
            if(importedBeans instanceof java.util.List){
                importedConverter.fromRight((java.util.List<ImageBean>)importedBeans,nativeManager.setFlImageBeansByThumbMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(importedBeans)
                    ));
            }else{
                ImageBean[] array = importedBeans.toArray(new ImageBean[0]);
                importedConverter.fromRight(array,nativeManager.setFlImageBeansByThumbMd5(
                    this.beanConverter.toRight(bean),
                    importedConverter.toRight(array)
                    ));
            }
            return importedBeans;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }



    /**
     * Save the StoreBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link StoreBean} bean to be saved
         * @param impFlImagebyMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @param impFlImagebyThumbMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @return the inserted or updated {@link StoreBean} bean
     */
    //3.5 SYNC SAVE 
    public StoreBean save(StoreBean bean
        
        , ImageBean[] impFlImagebyMd5 , ImageBean[] impFlImagebyThumbMd5 )
    {
        try{
            return this.beanConverter.fromRight(bean,nativeManager.save(this.beanConverter.toRight(bean)
                                , this.dbConverter.getImageBeanConverter().toRight(impFlImagebyMd5)  , this.dbConverter.getImageBeanConverter().toRight(impFlImagebyThumbMd5)  ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(StoreBean , ImageBean[] , ImageBean[] )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public StoreBean saveAsTransaction(final StoreBean bean
        
        ,final ImageBean[] impFlImagebyMd5 ,final ImageBean[] impFlImagebyThumbMd5 )
    {
        return this.runAsTransaction(new Callable<StoreBean>(){
            @Override
            public StoreBean call() throws Exception {
                return save(bean , impFlImagebyMd5 , impFlImagebyThumbMd5 );
            }});
    }
    /**
     * Save the StoreBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link StoreBean} bean to be saved
         * @param impFlImagebyMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @param impFlImagebyThumbMd5 the {@link ImageBean} bean refer to {@link StoreBean} 
     * @return the inserted or updated {@link StoreBean} bean
     */
    //3.7 SYNC SAVE 
    public StoreBean save(StoreBean bean
        
        , java.util.Collection<ImageBean> impFlImagebyMd5 , java.util.Collection<ImageBean> impFlImagebyThumbMd5 )
    {
        try{
            return this.beanConverter.fromRight(bean,nativeManager.save(this.beanConverter.toRight(bean)
                                , this.dbConverter.getImageBeanConverter().toRight(impFlImagebyMd5)  , this.dbConverter.getImageBeanConverter().toRight(impFlImagebyThumbMd5)  ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }   
    /**
     * Transaction version for sync save
     * @see {@link #save(StoreBean , java.util.Collection , java.util.Collection )}
     */
    //3.8 SYNC SAVE AS TRANSACTION
    public StoreBean saveAsTransaction(final StoreBean bean
        
        ,final  java.util.Collection<ImageBean> impFlImagebyMd5 ,final  java.util.Collection<ImageBean> impFlImagebyThumbMd5 )
    {
        return this.runAsTransaction(new Callable<StoreBean>(){
            @Override
            public StoreBean call() throws Exception {
                return save(bean , impFlImagebyMd5 , impFlImagebyThumbMd5 );
            }});
    }
      

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////

    //11
    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    protected StoreBean insert(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //14
    @Override
    protected StoreBean update(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public StoreBean loadUniqueUsingTemplate(StoreBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }

    //20-5
    @Override
    public int loadUsingTemplate(StoreBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<StoreBean> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(StoreBean bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    //25
    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //20
    @Override
    public int countUsingTemplate(StoreBean bean, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    //35
    @Override
    public void registerListener(TableListener<StoreBean> listener)
    {
        this.nativeManager.registerListener(this.toNative(listener));
    }

    //36
    @Override
    public void unregisterListener(TableListener<StoreBean> listener)
    {
        this.nativeManager.unregisterListener(this.toNative(listener));
    }
    
    private net.gdface.facelog.dborm.TableListener<FlStoreBean> toNative(final TableListener<StoreBean> listener) {
        return null == listener ?null:new net.gdface.facelog.dborm.TableListener<FlStoreBean> (){

            @Override
            public void beforeInsert(FlStoreBean bean) throws DAOException {
                listener.beforeInsert(StoreManager.this.beanConverter.fromRight(bean));                
            }

            @Override
            public void afterInsert(FlStoreBean bean) throws DAOException {
                listener.afterInsert(StoreManager.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void beforeUpdate(FlStoreBean bean) throws DAOException {
                listener.beforeUpdate(StoreManager.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void afterUpdate(FlStoreBean bean) throws DAOException {
                listener.afterUpdate(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public void beforeDelete(FlStoreBean bean) throws DAOException {
                listener.beforeDelete(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public void afterDelete(FlStoreBean bean) throws DAOException {
                listener.afterDelete(StoreManager.this.beanConverter.fromRight(bean));
            }};
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //43
    @Override
    public boolean isPrimaryKey(String column){
        return this.nativeManager.isPrimaryKey(column);
    }
    
    @Override
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<StoreBean> action){
        try{
            return this.nativeManager.loadBySqlForAction(sql,argList,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public void runAsTransaction(final Runnable fun){
        try{
            this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    private net.gdface.facelog.dborm.TableManager.Action<FlStoreBean> toNative(final Action<StoreBean> action){
        if(null == action)
            throw new NullPointerException();
        return new net.gdface.facelog.dborm.TableManager.Action<FlStoreBean>(){

            @Override
            public void call(FlStoreBean bean) {
                action.call(StoreManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public FlStoreBean getBean() {
                return  StoreManager.this.beanConverter.toRight(action.getBean());
            }};
    }
}
