// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.mysql;

import java.util.concurrent.TimeUnit;

import net.gdface.facelog.db.ITableCache;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.mysql.DeviceCacheManager;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.mysql.FaceCacheManager;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.mysql.FeatureCacheManager;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.mysql.PersonCacheManager;
import net.gdface.facelog.db.mysql.LogManager;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.mysql.LogCache;

/**
 * Handles database calls (save, load, count, etc...) for the fl_log table.<br>
 * @author guyadong
 */
public class LogCacheManager extends LogManager
{
    /** singleton of LogCacheManager */
    private static LogCacheManager instance;
    /** 
     * @return a instance of LogCacheManager
     * @throws IllegalStateException while {@link #instance} is null
     */
    public static final LogCacheManager getInstance(){
        if(null == instance){
            throw new IllegalStateException("uninitialized instance of LogCacheManager");
        }
        return instance;
    }
    /**
     * create a instance of LogCacheManager and assign to {@link #instance},if <code>instance</code> is not initialized.<br>
     * otherwise return <code>instance</code>
     */
    public static synchronized final LogCacheManager makeInstance(long maximumSize, long duration, TimeUnit unit){
        if(null == instance){
            instance = new LogCacheManager(maximumSize,duration,unit);
        }
        return instance;
    }
    /** @see #makeInstance(long, long, TimeUnit) */
    public static final LogCacheManager makeInstance(long maximumSize, long durationMinutes){
        return makeInstance(maximumSize, durationMinutes, ITableCache.DEFAULT_TIME_UNIT);
    }
    /** @see #makeInstance(long, long, TimeUnit) */
    public static final LogCacheManager makeInstance(long maximumSize){
        return makeInstance(maximumSize,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }
    /** instance of {@link LogCache} */
    private final LogCache cache;
    protected LogCacheManager(long maximumSize, long duration, TimeUnit unit) {
        cache = new LogCache(maximumSize,duration,unit);
        cache.registerListener();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override ILogManager
    @Override 
    public LogBean loadByPrimaryKey(Integer id){
        return cache.getBean(id);
    }

    //1.2
    @Override
    public LogBean loadByPrimaryKey(LogBean bean){        
        return null == bean ? null : cache.getBean(bean.getId());
    }
    
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

    //5.1 GET REFERENCED VALUE override ILogManager
    @Override 
    public DeviceBean getReferencedByDeviceId(LogBean bean){
        if(null == bean)return null;
        bean.setReferencedByDeviceId(DeviceCacheManager.getInstance().loadByPrimaryKey(bean.getDeviceId())); 
        return bean.getReferencedByDeviceId();
    }
    //5.1 GET REFERENCED VALUE override ILogManager
    @Override 
    public FaceBean getReferencedByCompareFace(LogBean bean){
        if(null == bean)return null;
        bean.setReferencedByCompareFace(FaceCacheManager.getInstance().loadByPrimaryKey(bean.getCompareFace())); 
        return bean.getReferencedByCompareFace();
    }
    //5.1 GET REFERENCED VALUE override ILogManager
    @Override 
    public FeatureBean getReferencedByVerifyFeature(LogBean bean){
        if(null == bean)return null;
        bean.setReferencedByVerifyFeature(FeatureCacheManager.getInstance().loadByPrimaryKey(bean.getVerifyFeature())); 
        return bean.getReferencedByVerifyFeature();
    }
    //5.1 GET REFERENCED VALUE override ILogManager
    @Override 
    public PersonBean getReferencedByPersonId(LogBean bean){
        if(null == bean)return null;
        bean.setReferencedByPersonId(PersonCacheManager.getInstance().loadByPrimaryKey(bean.getPersonId())); 
        return bean.getReferencedByPersonId();
    }
    private class CacheAction implements Action<LogBean>{
        final Action<LogBean> action;
        CacheAction(Action<LogBean>action){
            this.action = action;
        }
        @Override
        public void call(LogBean bean) {
            if(null != action){
                action.call(bean);
            }
            cache.put(bean);
        }
        @Override
        public LogBean getBean() {
            return null == action?null:action.getBean();
        }}
    //20-5
    @Override
    public int loadUsingTemplate(LogBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<LogBean> action){
        if(null == fieldList )
            action = new CacheAction(action);
        return super.loadUsingTemplate(bean,fieldList,startRow,numRows,searchType,action);
    }

    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________
}
