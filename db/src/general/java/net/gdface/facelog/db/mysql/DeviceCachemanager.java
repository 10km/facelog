// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.mysql;


import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

import net.gdface.facelog.db.Constant;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.ITableCache;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.IDeviceManager;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.mysql.Cache.ImageCache;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.mysql.Cache.LogCache;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.WrapDAOException;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.db.mysql.DeviceManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.mysql.Cache.DeviceCache;

/**
 * Handles database calls (save, load, count, etc...) for the fl_device table.<br>
 * @author guyadong
 */
public class DeviceCachemanager extends DeviceManager
{
    private DeviceManager nativeManager = DeviceManager.getInstance();
    private final DeviceCache deviceCache;
    private ImageCache imageCache;
    public void setImageCache(ImageCache imageCache){
        this.imageCache = imageCache;
    }
    private LogCache logCache;
    public void setLogCache(LogCache logCache){
        this.logCache = logCache;
    }
    public DeviceCachemanager(long maximumSize, long duration, TimeUnit unit) {
        this.deviceCache = new DeviceCache(maximumSize,duration,unit);
    }
    public DeviceCachemanager(long maximumSize, long durationMinutes) {
        this(maximumSize, durationMinutes, ITableCache.DEFAULT_TIME_UNIT);
    }

    public DeviceCachemanager(long maximumSize) {
        this(maximumSize,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }
    public DeviceCachemanager() {
        this(ITableCache.DEFAULT_CACHE_MAXIMUMSIZE,ITableCache.DEFAULT_DURATION,ITableCache.DEFAULT_TIME_UNIT);
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override IDeviceManager
    @Override 
    public DeviceBean loadByPrimaryKey(Integer id)
    {
        return deviceCache.getBean(id);
    }

    //1.2
    @Override
    public DeviceBean loadByPrimaryKey(DeviceBean bean)
    {        
        return null == bean ? null : deviceCache.getBean(bean.getId());
    }


    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////

    //3.2 GET IMPORTED override IDeviceManager
    @Override 
    public java.util.List<ImageBean> getImageBeansByDeviceIdAsList(DeviceBean bean)
    {
        return (java.util.List<ImageBean>)imageCache.put(super.getImageBeansByDeviceIdAsList(bean));
    }

    //3.2 GET IMPORTED override IDeviceManager
    @Override 
    public java.util.List<LogBean> getLogBeansByDeviceIdAsList(DeviceBean bean)
    {
        return (java.util.List<LogBean>)logCache.put(super.getLogBeansByDeviceIdAsList(bean));
    }


    
    private class CacheAction implements Action<DeviceBean>{
        final Action<DeviceBean> action;
        CacheAction(Action<DeviceBean>action){
            this.action = action;            
        }
        @Override
        public void call(DeviceBean bean) {
            if(null != action){
                action.call(bean);
            }
            deviceCache.put(bean);
        }
        @Override
        public DeviceBean getBean() {
            return null == action?null:action.getBean();
        }}
    //20-5
    @Override
    public int loadUsingTemplate(DeviceBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<DeviceBean> action)
    {
        if(null == fieldList )
            action = new CacheAction(action);
        return super.loadUsingTemplate(bean,fieldList,startRow,numRows,searchType,action);
    }

    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________


}
