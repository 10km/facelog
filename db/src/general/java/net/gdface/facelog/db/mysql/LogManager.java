// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________



package net.gdface.facelog.db.mysql;

import java.util.List;
import java.util.Collection;
import java.util.concurrent.Callable;

import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.BaseBean;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.LogListener;
import net.gdface.facelog.db.WrapDAOException;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.log.FlLogManager;
import net.gdface.facelog.dborm.log.FlLogBean;
import net.gdface.facelog.dborm.log.FlLogListener;
/**
 * Handles database calls (save, load, count, etc...) for the fl_log table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.
 * @author guyadong
 */
public class LogManager implements TableManager<LogBean>
{

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the id field.
     */
    public static final int ID_ID = 0;

    /**
     * Identify the person_id field.
     */
    public static final int ID_PERSON_ID = 1;

    /**
     * Identify the device_id field.
     */
    public static final int ID_DEVICE_ID = 2;

    /**
     * Identify the verify_face field.
     */
    public static final int ID_VERIFY_FACE = 3;

    /**
     * Identify the compare_face field.
     */
    public static final int ID_COMPARE_FACE = 4;

    /**
     * Identify the similarty field.
     */
    public static final int ID_SIMILARTY = 5;

    /**
     * Identify the verify_time field.
     */
    public static final int ID_VERIFY_TIME = 6;

    /**
     * Identify the create_time field.
     */
    public static final int ID_CREATE_TIME = 7;

    /**
     * Tablename.
     */
        public static final String TABLE_NAME="fl_log";
    /**
     * Contains all the full fields of the fl_log table.
     */
    public static final String[] FULL_FIELD_NAMES =
    {
        "fl_log.id"
        ,"fl_log.person_id"
        ,"fl_log.device_id"
        ,"fl_log.verify_face"
        ,"fl_log.compare_face"
        ,"fl_log.similarty"
        ,"fl_log.verify_time"
        ,"fl_log.create_time"
    };

    /**
     * Contains all the fields of the fl_log table.
     */
    public static final String[] FIELD_NAMES =
    {
        "id"
        ,"person_id"
        ,"device_id"
        ,"verify_face"
        ,"compare_face"
        ,"similarty"
        ,"verify_time"
        ,"create_time"
    };
   /**
     * Contains all the primarykey fields of the fl_log table.
     */
    public static final String[] PRIMARYKEY_NAMES =
    {
        "id"
    };
    /**
     * Field that contains the comma separated fields of the fl_log table.
     */
    public static final String ALL_FULL_FIELDS = "fl_log.id"
                            + ",fl_log.person_id"
                            + ",fl_log.device_id"
                            + ",fl_log.verify_face"
                            + ",fl_log.compare_face"
                            + ",fl_log.similarty"
                            + ",fl_log.verify_time"
                            + ",fl_log.create_time";

    /**
     * Field that contains the comma separated fields of the fl_log table.
     */
    public static final String ALL_FIELDS = "id"
                            + ",person_id"
                            + ",device_id"
                            + ",verify_face"
                            + ",compare_face"
                            + ",similarty"
                            + ",verify_time"
                            + ",create_time";

    /**
    * @return tableName
    */
    public String getTableName() {
        return TABLE_NAME;
    }

    /**
    * @return fieldNames
    */
    public String[] getFieldNames() {
        return FIELD_NAMES;
    }

    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return PRIMARYKEY_NAMES;
    }
    
    private FlLogManager nativeManager = FlLogManager.getInstance();
    private IDbConverter dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<LogBean,FlLogBean> beanConverter = dbConverter.getLogBeanConverter();
    private static LogManager singleton = new LogManager();

    /**
     * Get the {@link LogManager} singleton.
     *
     * @return {@link LogManager}
     */
    public static LogManager getInstance()
    {
        return singleton;
    }
    
    public FlLogManager getNativeManager() {
        return nativeManager;
    }

    public void setNativeManager(FlLogManager nativeManager) {
        this.nativeManager = nativeManager;
    }
    
    public IDbConverter getDbConverter() {
        return dbConverter;
    }

    /**
     * set  {@link IDbConverter} as converter used by manager.<br>
     * throw {@link NullPointerException} if {@code dbConverter} is null
     * @param dbConverter
     */
    public synchronized void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getLogBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link LogBean} from the fl_log using primary key fields.
     *
     * @param id Integer - PK# 1
     * @return a unique LogBean or {@code null} if not found
     */
    //1
    public LogBean loadByPrimaryKey(Integer id)
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKey(id));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Loads a {@link LogBean} from the fl_log using primary key fields of {@code bean}.
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link LogBean} with primary key fields
     * @return a unique {@link LogBean} or {@code null} if not found
     * @see {@link #loadByPrimaryKey(Integer id)}
     */
    //1.2
    public LogBean loadByPrimaryKey(LogBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByPrimaryKey(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Returns true if this fl_log contains row with primary key fields.
     * @author guyadong
     * @param id Integer - PK# 1
     * @see #loadByPrimaryKey(Integer id)
     */
    //1.3
    public boolean existsPrimaryKey(Integer id)
    {
        return null!=loadByPrimaryKey(id );

    }

    /**
     * Returns true if this fl_log contains row specified by primary key fields of {@link LogBean}.<br>
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the {@link LogBean} with primary key fields
     * @return 
     * @see {@link #loadByPrimaryKey(LogBean bean)}
     */
    //1.4
    @Override
    public boolean existsPrimaryKey(LogBean bean)
    {
        return null!=loadByPrimaryKey(bean);

    }
    
    /**
     * Delete row according to its primary keys.
     *
     * @param id Integer - PK# 1
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(Integer id)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(id);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Delete row according to Primary Key fileds of the parameter{@code bean},
     * when you don't know which is primary key of table,you can use the method.
     * @author guyadong
     * @param bean the LogBean with primary key fields
     * @return the number of deleted rows
     * @see {@link #deleteByPrimaryKey(Integer id)}
     */
    //2.1
    @Override
    public int deleteByPrimaryKey(LogBean bean)
    {
        try{
            return this.nativeManager.deleteByPrimaryKey(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
 

    @Override
    public <T extends BaseBean> T[] getImportedBeans(LogBean bean,String fkName){
        throw new UnsupportedOperationException();
    }
    @Override
    public <T extends BaseBean> List<T> getImportedBeansAsList(LogBean bean,String fkName){
        throw new UnsupportedOperationException();
    }
    @Override
    public <T extends BaseBean> T[] setImportedBeans(LogBean bean,T[] importedBeans,String fkName){
        throw new UnsupportedOperationException();
    }    
    @Override
    public <T extends BaseBean,C extends Collection<T>> C setImportedBeans(LogBean bean,C importedBeans,String fkName){
        throw new UnsupportedOperationException();
    }
 


    /**
     * Save the LogBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link LogBean} bean to be saved
     * @param refFlDevicebyDeviceId the {@link DeviceBean} bean referenced by {@link LogBean} 
     * @param refFlFacebyVerifyFace the {@link FaceBean} bean referenced by {@link LogBean} 
     * @param refFlFacebyCompareFace the {@link FaceBean} bean referenced by {@link LogBean} 
     * @param refFlPersonbyPersonId the {@link PersonBean} bean referenced by {@link LogBean} 
         * @return the inserted or updated {@link LogBean} bean
     */
    //3.5 SYNC SAVE 
    public LogBean save(LogBean bean
        , DeviceBean refFlDevicebyDeviceId , FaceBean refFlFacebyVerifyFace , FaceBean refFlFacebyCompareFace , PersonBean refFlPersonbyPersonId 
        )
    {
        try{
            return this.beanConverter.fromRight(bean,nativeManager.save(this.beanConverter.toRight(bean)
                , this.dbConverter.getDeviceBeanConverter().toRight(refFlDevicebyDeviceId) , this.dbConverter.getFaceBeanConverter().toRight(refFlFacebyVerifyFace) , this.dbConverter.getFaceBeanConverter().toRight(refFlFacebyCompareFace) , this.dbConverter.getPersonBeanConverter().toRight(refFlPersonbyPersonId)                 ));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    } 
    /**
     * Transaction version for sync save
     * @see {@link #save(LogBean , DeviceBean , FaceBean , FaceBean , PersonBean )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public LogBean saveAsTransaction(final LogBean bean
        ,final DeviceBean refFlDevicebyDeviceId ,final FaceBean refFlFacebyVerifyFace ,final FaceBean refFlFacebyCompareFace ,final PersonBean refFlPersonbyPersonId 
        )
    {
        return this.runAsTransaction(new Callable<LogBean>(){
            @Override
            public LogBean call() throws Exception {
                return save(bean , refFlDevicebyDeviceId , refFlFacebyVerifyFace , refFlFacebyCompareFace , refFlPersonbyPersonId );
            }});
    }
      //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////
    private static final  java.util.HashMap<String, Class<?>[]> REF_METHODS=new java.util.HashMap<String,Class<?>[]>(){
        private static final long serialVersionUID = 1L;
    {        
    put("refFlDevicebyDeviceId",new Class<?>[]{DeviceBean.class,net.gdface.facelog.dborm.device.FlDeviceBean.class});
    put("refFlFacebyVerifyFace",new Class<?>[]{FaceBean.class,net.gdface.facelog.dborm.face.FlFaceBean.class});
    put("refFlFacebyCompareFace",new Class<?>[]{FaceBean.class,net.gdface.facelog.dborm.face.FlFaceBean.class});
    put("refFlPersonbyPersonId",new Class<?>[]{PersonBean.class,net.gdface.facelog.dborm.person.FlPersonBean.class});
    }} ;
    /**
     * Retrieves the bean object referenced by fkName.<br>
     * @param <T>
     * <ul>
     *     <li> refFlDevicebyDeviceId -> DeviceBean</li>
     *     <li> refFlFacebyVerifyFace -> FaceBean</li>
     *     <li> refFlFacebyCompareFace -> FaceBean</li>
     *     <li> refFlPersonbyPersonId -> PersonBean</li>
     * </ul>
     * @param bean the {@link LogBean} object to use
     * @param fkName valid values: refFlDevicebyDeviceId,refFlFacebyVerifyFace,refFlFacebyCompareFace,refFlPersonbyPersonId
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    @Override
    public <T extends BaseBean> T getReferencedBean(LogBean bean,String fkName){
        try {
            return this.nativeManager.getReferencedBean( this.beanConverter.toRight(bean), fkName);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Associates the {@link LogBean} object to the bean object by fkName field.<br>
     * 
     * @param <T>
     * <ul>
     *     <li> refFlDevicebyDeviceId -> DeviceBean</li>
     *     <li> refFlFacebyVerifyFace -> FaceBean</li>
     *     <li> refFlFacebyCompareFace -> FaceBean</li>
     *     <li> refFlPersonbyPersonId -> PersonBean</li>
     * </ul>
     * @param bean the {@link LogBean} object to use
     * @param beanToSet the <T> object to associate to the {@link LogBean}
     * @param fkName valid values: refFlDevicebyDeviceId,refFlFacebyVerifyFace,refFlFacebyCompareFace,refFlPersonbyPersonId
     * @return always beanToSet saved
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends BaseBean> T setReferencedBean(LogBean bean,T beanToSet,String fkName){
        try {
            if(null == beanToSet) return null;
            Class<?>[] types=REF_METHODS.get(fkName);
            if(null == types)
                throw new IllegalArgumentException(String.format("invalid fkName :%s",fkName));
            @SuppressWarnings("rawtypes")
            IBeanConverter converter=this.dbConverter.getBeanConverter(beanToSet.getClass(),types[1]);
            if( null == converter )
                throw new IllegalArgumentException(String.format("invalid type of 'beanToSet' :%s",beanToSet.getClass().getName()));
            return (T) converter.fromRight(beanToSet,this.nativeManager.setReferencedBean( this.beanConverter.toRight(bean), converter.toRight(beanToSet), fkName));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
     
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the {@link DeviceBean} object referenced by {@link LogBean#getDeviceId}() field.<br>
     * FK_NAME : fl_log_ibfk_2
     * @param bean the {@link LogBean}
     * @return the associated {@link DeviceBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET REFERENCED VALUE
    public DeviceBean getReferencedByDeviceId(LogBean bean)
    {
        try{
            return this.dbConverter.getDeviceBeanConverter().fromRight(this.nativeManager.getReferencedByDeviceId(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
        
    }

    /**
     * Associates the {@link LogBean} object to the {@link DeviceBean} object by {@link LogBean#getDeviceId}() field.
     *
     * @param bean the {@link LogBean} object to use
     * @param beanToSet the {@link DeviceBean} object to associate to the {@link LogBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public DeviceBean setReferencedByDeviceId(LogBean bean, DeviceBean beanToSet) throws DAOException
    {
        try{
            return this.dbConverter.getDeviceBeanConverter().fromRight(beanToSet,this.nativeManager.setReferencedByDeviceId(this.beanConverter.toRight(bean),this.dbConverter.getDeviceBeanConverter().toRight(beanToSet)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link FaceBean} object referenced by {@link LogBean#getVerifyFace}() field.<br>
     * FK_NAME : fl_log_ibfk_3
     * @param bean the {@link LogBean}
     * @return the associated {@link FaceBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET REFERENCED VALUE
    public FaceBean getReferencedByVerifyFace(LogBean bean)
    {
        try{
            return this.dbConverter.getFaceBeanConverter().fromRight(this.nativeManager.getReferencedByVerifyFace(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
        
    }

    /**
     * Associates the {@link LogBean} object to the {@link FaceBean} object by {@link LogBean#getVerifyFace}() field.
     *
     * @param bean the {@link LogBean} object to use
     * @param beanToSet the {@link FaceBean} object to associate to the {@link LogBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FaceBean setReferencedByVerifyFace(LogBean bean, FaceBean beanToSet) throws DAOException
    {
        try{
            return this.dbConverter.getFaceBeanConverter().fromRight(beanToSet,this.nativeManager.setReferencedByVerifyFace(this.beanConverter.toRight(bean),this.dbConverter.getFaceBeanConverter().toRight(beanToSet)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link FaceBean} object referenced by {@link LogBean#getCompareFace}() field.<br>
     * FK_NAME : fl_log_ibfk_4
     * @param bean the {@link LogBean}
     * @return the associated {@link FaceBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET REFERENCED VALUE
    public FaceBean getReferencedByCompareFace(LogBean bean)
    {
        try{
            return this.dbConverter.getFaceBeanConverter().fromRight(this.nativeManager.getReferencedByCompareFace(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
        
    }

    /**
     * Associates the {@link LogBean} object to the {@link FaceBean} object by {@link LogBean#getCompareFace}() field.
     *
     * @param bean the {@link LogBean} object to use
     * @param beanToSet the {@link FaceBean} object to associate to the {@link LogBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public FaceBean setReferencedByCompareFace(LogBean bean, FaceBean beanToSet) throws DAOException
    {
        try{
            return this.dbConverter.getFaceBeanConverter().fromRight(beanToSet,this.nativeManager.setReferencedByCompareFace(this.beanConverter.toRight(bean),this.dbConverter.getFaceBeanConverter().toRight(beanToSet)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Retrieves the {@link PersonBean} object referenced by {@link LogBean#getPersonId}() field.<br>
     * FK_NAME : fl_log_ibfk_1
     * @param bean the {@link LogBean}
     * @return the associated {@link PersonBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //3.2 GET REFERENCED VALUE
    public PersonBean getReferencedByPersonId(LogBean bean)
    {
        try{
            return this.dbConverter.getPersonBeanConverter().fromRight(this.nativeManager.getReferencedByPersonId(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
        
    }

    /**
     * Associates the {@link LogBean} object to the {@link PersonBean} object by {@link LogBean#getPersonId}() field.
     *
     * @param bean the {@link LogBean} object to use
     * @param beanToSet the {@link PersonBean} object to associate to the {@link LogBean}
     * @return always beanToSet saved
     * @throws Exception
     */
    //5.2 SET REFERENCED 
    public PersonBean setReferencedByPersonId(LogBean bean, PersonBean beanToSet) throws DAOException
    {
        try{
            return this.dbConverter.getPersonBeanConverter().fromRight(beanToSet,this.nativeManager.setReferencedByPersonId(this.beanConverter.toRight(bean),this.dbConverter.getPersonBeanConverter().toRight(beanToSet)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from fl_log.
     *
     * @return an array of FlLogManager bean
     */
    //5
    @Override
    public LogBean[] loadAll()
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUsingTemplate(null));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Loads each row from fl_log and dealt with action.
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //5-1
    @Override
    public int loadAll(Action<LogBean> action)
    {
        return this.loadUsingTemplate(null,action);
    }
    /**
     * Loads all the rows from fl_log.
     *
     * @return a list of LogBean bean
     */
    //5-2
    @Override
    public List<LogBean> loadAllAsList()
    {
        return this.loadUsingTemplateAsList(null);
    }


    /**
     * Loads the given number of rows from fl_log, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of FlLogManager bean
     */
    //6
    @Override
    public LogBean[] loadAll(int startRow, int numRows)
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }
    /**
     *  Loads the given number of rows from fl_log, given the start row and dealt with action.
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //6-1
    @Override
    public int loadAll(int startRow, int numRows,Action<LogBean> action)
    {
        return this.loadUsingTemplate(null, startRow, numRows,action);
    }
    /**
     * Loads the given number of rows from fl_log, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return a list of FlLogManager bean
     */
    //6-2
    @Override
    public List<LogBean> loadAllAsList(int startRow, int numRows)
    {
        return this.loadUsingTemplateAsList(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of LogBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting LogBean table
     */
    //7
    @Override
    public LogBean[] loadByWhere(String where)
    {
        return this.loadByWhere(where, (int[])null);
    }
    
    /**
     * Retrieves a list of LogBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting LogBean table
     */
    //7
    @Override
    public List<LogBean> loadByWhereAsList(String where)
    {
        return this.loadByWhereAsList(where, null);
    }
    /**
     * Retrieves each row of LogBean given a sql 'where' clause and dealt with action.
     * @param where the sql 'where' clause
     * @param action  Action object for do something(not null)
     * @return the count dealt by action
     */
    //7-1
    @Override
    public int loadByWhere(String where,Action<LogBean> action)
    {
        return this.loadByWhere(where, null,action);
    }
    /**
     * Retrieves an array of LogBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting LogBean table
     */
    //8
    @Override
    public LogBean[] loadByWhere(String where, int[] fieldList)
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }


    /**
     * Retrieves a list of LogBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting LogBean table
     */
    //8
    @Override
    public List<LogBean> loadByWhereAsList(String where, int[] fieldList)
    {
        return this.loadByWhereAsList(where, fieldList, 1, -1);
    }
    /**
     * Retrieves each row of LogBean given a sql where clause, and a list of fields,
     * and dealt with action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //8-1
    @Override
    public int loadByWhere(String where, int[] fieldList,Action<LogBean> action)
    {
        return this.loadByWhere(where, fieldList, 1, -1,action);
    }

    /**
     * Retrieves an array of LogBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting LogBean table
     */
    //9
    @Override
    public LogBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows)
    {
        return (LogBean[]) this.loadByWhereAsList(where, fieldList, startRow, numRows).toArray(new LogBean[0]);
    }
    /**
     * Retrieves each row of  LogBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //9-1
    @Override
    public int loadByWhere(String where, int[] fieldList, int startRow, int numRows,Action<LogBean> action)
    {
        return this.loadByWhereForAction(where, fieldList, startRow, numRows,action);
    }

    /**
     * Retrieves a list of LogBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting LogBean table
     */
    //9-2
    @Override
    public List<LogBean> loadByWhereAsList(String where, int[] fieldList, int startRow, int numRows)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByWhereAsList(where,fieldList,startRow,numRows));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Retrieves each row of LogBean given a sql where clause and a list of fields, and startRow and numRows,
     * and dealt wity action
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //9-3
    @Override
    public int loadByWhereForAction(String where, int[] fieldList, int startRow, int numRows,Action<LogBean> action)
    {
        try{
            return this.nativeManager.loadByWhereForAction(where,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Deletes all rows from fl_log table.
     * @return the number of deleted rows.
     */
    //10
    @Override
    public int deleteAll()
    {
        return this.deleteByWhere("");
    }

    /**
     * Deletes rows from the fl_log table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    //11
    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the {@link LogBean} bean into the database.
     *
     * @param bean the {@link LogBean} bean to be saved
     * @return the inserted or updated bean,or null if bean is null
     */
    //12
    @Override
    public LogBean save(LogBean bean)
    {
        if(null == bean)return null;
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the {@link LogBean} bean into the database.
     *
     * @param bean the {@link LogBean} bean to be saved
     * @return the inserted bean or null if bean is null
     */
    //13
    @Override
    public LogBean insert(LogBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Update the {@link LogBean} bean record in the database according to the changes.
     *
     * @param bean the {@link LogBean} bean to be updated
     * @return the updated bean or null if bean is null
     */
    //14
    @Override
    public LogBean update(LogBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * Saves an array of {@link LogBean} bean into the database.
     *
     * @param beans the {@link LogBean} bean table to be saved
     * @return the saved {@link LogBean} beans or null if beans is null.
     */
    //15
    public LogBean[] save(LogBean[] beans)
    {
        if(null !=beans){
            for (LogBean bean : beans) 
            {
                this.save(bean);
            }
        }
        return beans;
    }

    /**
     * Saves a collection of {@link LogBean} bean into the database.
     *
     * @param beans the {@link LogBean} bean table to be saved
     * @return the saved {@link LogBean} beans or null if beans is null.
     */
    //15-2
    @Override
    public <C extends Collection<LogBean>> C save(C beans)
    {
        if(null != beans){
            for (LogBean bean : beans) 
            {
                this.save(bean);
            }
        }
        return beans;
    }
    /**
     * Saves an array of {@link LogBean} bean into the database as transaction.
     *
     * @param beans the {@link LogBean} bean table to be saved
     * @return the saved {@link LogBean} beans.
     * @see #save(LogBean[])
     */
    //15-3
    @Override
    public LogBean[] saveAsTransaction(final LogBean[] beans) {
        return this.runAsTransaction(new Callable<LogBean[]>(){
            @Override
            public LogBean[] call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Saves a collection of {@link LogBean} bean into the database as transaction.
     *
     * @param beans the {@link LogBean} bean table to be saved
     * @return the saved {@link LogBean} beans.
     * @see #save(List)
     */
    //15-4
    @Override
    public <C extends Collection<LogBean>> C saveAsTransaction(final C beans){
        return this.runAsTransaction(new Callable<C>(){
            @Override
            public C call() throws Exception {
                return save(beans);
            }});
    }
    /**
     * Insert an array of {@link LogBean} bean into the database.
     *
     * @param beans the {@link LogBean} bean table to be inserted
     * @return the saved {@link LogBean} beans.
     */
    //16
    @Override
    public LogBean[] insert(LogBean[] beans)
    {
        return this.save(beans);
    }

    /**
     * Insert a collection of {@link LogBean} bean into the database.
     *
     * @param beans the {@link LogBean} bean table to be inserted
     * @return the saved {@link LogBean} beans.
     */
    //16-2
    @Override
    public <C extends Collection<LogBean>> C insert(C beans)
    {
        return this.save(beans);
    }
    
    /**
     * Insert an array of {@link LogBean} bean into the database as transaction.
     *
     * @param beans the {@link LogBean} bean table to be inserted
     * @return the saved {@link LogBean} beans.
     * @see #saveAsTransaction(LogBean[])
     */
    //16-3
    @Override
    public LogBean[] insertAsTransaction(LogBean[] beans)
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Insert a collection of {@link LogBean} bean as transaction into the database.
     *
     * @param beans the {@link LogBean} bean table to be inserted
     * @return the saved {@link LogBean} beans.
     * @see #saveAsTransaction(List)
     */
    //16-4
    @Override
    public <C extends Collection<LogBean>> C insertAsTransaction(C beans)
    {
        return this.saveAsTransaction(beans);
    }


    /**
     * Update an array of {@link LogBean} bean into the database.
     *
     * @param beans the {@link LogBean} bean table to be inserted
     * @return the saved {@link LogBean} beans.
     */
    //17
    @Override
    public LogBean[] update(LogBean[] beans)
    {
        return this.save(beans);
    }

    /**
     * Update a collection of {@link LogBean} bean into the database.
     *
     * @param beans the {@link LogBean} bean table to be inserted
     * @return the saved {@link LogBean} beans.
     */
    //17-2
    @Override
    public <C extends Collection<LogBean>> C update(C beans)
    {
        return this.save(beans);
    }
    
    /**
     * Update an array of {@link LogBean} bean into the database as transaction.
     *
     * @param beans the {@link LogBean} beans table to be inserted
     * @return the saved {@link LogBean} beans.
     * @see #saveAsTransaction(LogBean[])
     */
    //17-3
    @Override
    public LogBean[] updateAsTransaction(LogBean[] beans)
    {
        return this.saveAsTransaction(beans);
    }

    /**
     * Update a collection of {@link LogBean} bean into the database as transaction.
     *
     * @param beans the {@link LogBean} bean table to be inserted
     * @return the saved {@link LogBean} beans.
     * @see #saveAsTransaction(List)
     */
    //17-4
    @Override
    public <C extends Collection<LogBean>> C updateAsTransaction(C beans)
    {
        return this.saveAsTransaction(beans);
    }
    
    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique LogBean bean from a template one giving a c
     *
     * @param bean the LogBean bean to look for
     * @return the bean matching the template
     */
    //18
    @Override
    public LogBean loadUniqueUsingTemplate(LogBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }

    /**
     * Loads an array of LogBean from a template one.
     *
     * @param bean the LogBean template to look for
     * @return all the LogBean matching the template
     */
    //19
    @Override
    public LogBean[] loadUsingTemplate(LogBean bean)
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }
    /**
     * Loads each row from a template one and dealt with action.
     *
     * @param bean the LogBean template to look for
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //19-1
    @Override
    public int loadUsingTemplate(LogBean bean,Action<LogBean> action)
    {
        return this.loadUsingTemplate(bean, 1, -1,action);
    }

    /**
     * Loads a list of LogBean from a template one.
     *
     * @param bean the LogBean template to look for
     * @return all the LogBean matching the template
     */
    //19-2
    @Override
    public List<LogBean> loadUsingTemplateAsList(LogBean bean)
    {
        return this.loadUsingTemplateAsList(bean, 1, -1);
    }

    /**
     * Loads an array of LogBean from a template one, given the start row and number of rows.
     *
     * @param bean the LogBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the LogBean matching the template
     */
    //20
    @Override
    public LogBean[] loadUsingTemplate(LogBean bean, int startRow, int numRows)
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the LogBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //20-1
    @Override
    public int loadUsingTemplate(LogBean bean, int startRow, int numRows,Action<LogBean> action)
    {
        return this.loadUsingTemplate(bean, null, startRow, numRows,SEARCH_EXACT, action);
    }
    /**
     * Loads a list of LogBean from a template one, given the start row and number of rows.
     *
     * @param bean the LogBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the LogBean matching the template
     */
    //20-2
    @Override
    public List<LogBean> loadUsingTemplateAsList(LogBean bean, int startRow, int numRows)
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of LogBean from a template one, given the start row and number of rows.
     *
     * @param bean the LogBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the LogBean matching the template
     */
    //20-3
    @Override
    public LogBean[] loadUsingTemplate(LogBean bean, int startRow, int numRows, int searchType)
    {
        return this.loadUsingTemplateAsList(bean, startRow, numRows, searchType).toArray(new LogBean[0]);
    }

    /**
     * Loads a list of LogBean from a template one, given the start row and number of rows.
     *
     * @param bean the LogBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the LogBean matching the template
     */
    //20-4
    @Override
    public List<LogBean> loadUsingTemplateAsList(LogBean bean, int startRow, int numRows, int searchType)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUsingTemplateAsList(this.beanConverter.toRight(bean),startRow,numRows,searchType));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }        
    }
    /**
     * Loads each row from a template one, given the start row and number of rows and dealt with action.
     *
     * @param bean the LogBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @param action Action object for do something(not null)
     * @return the count dealt by action
     */
    //20-5
    @Override
    public int loadUsingTemplate(LogBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<LogBean> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * Deletes rows using a LogBean template.
     *
     * @param bean the LogBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //21
    @Override
    public int deleteUsingTemplate(LogBean bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

     /**
     * Retrieves an array of LogBean using the compare_face index.
     *
     * @param compareFace the compare_face column's value filter.
     * @return an array of LogBean
     */
    public LogBean[] loadBycompare_face(String compareFace)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBycompare_face(compareFace));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    /**
     * Retrieves a list of LogBean using the compare_face index.
     *
     * @param compareFace the compare_face column's value filter.
     * @return a list of LogBean
     */
    public List<LogBean> loadBycompare_faceAsList(String compareFace)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBycompare_faceAsList(compareFace));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
 
    /**
     * Deletes rows using the compare_face index.
     *
     * @param compareFace the compare_face column's value filter.
     * @return the number of deleted objects
     */
    public int deleteBycompare_face(String compareFace)
    {
        try{
            return this.nativeManager.deleteBycompare_face(compareFace);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
     /**
     * Retrieves an array of LogBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return an array of LogBean
     */
    public LogBean[] loadBydevice_id(Integer deviceId)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBydevice_id(deviceId));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    /**
     * Retrieves a list of LogBean using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return a list of LogBean
     */
    public List<LogBean> loadBydevice_idAsList(Integer deviceId)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBydevice_idAsList(deviceId));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
 
    /**
     * Deletes rows using the device_id index.
     *
     * @param deviceId the device_id column's value filter.
     * @return the number of deleted objects
     */
    public int deleteBydevice_id(Integer deviceId)
    {
        try{
            return this.nativeManager.deleteBydevice_id(deviceId);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
     /**
     * Retrieves an array of LogBean using the person_id index.
     *
     * @param personId the person_id column's value filter.
     * @return an array of LogBean
     */
    public LogBean[] loadByperson_id(Integer personId)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByperson_id(personId));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    /**
     * Retrieves a list of LogBean using the person_id index.
     *
     * @param personId the person_id column's value filter.
     * @return a list of LogBean
     */
    public List<LogBean> loadByperson_idAsList(Integer personId)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByperson_idAsList(personId));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
 
    /**
     * Deletes rows using the person_id index.
     *
     * @param personId the person_id column's value filter.
     * @return the number of deleted objects
     */
    public int deleteByperson_id(Integer personId)
    {
        try{
            return this.nativeManager.deleteByperson_id(personId);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
     /**
     * Retrieves an array of LogBean using the verify_face index.
     *
     * @param verifyFace the verify_face column's value filter.
     * @return an array of LogBean
     */
    public LogBean[] loadByverify_face(String verifyFace)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByverify_face(verifyFace));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    /**
     * Retrieves a list of LogBean using the verify_face index.
     *
     * @param verifyFace the verify_face column's value filter.
     * @return a list of LogBean
     */
    public List<LogBean> loadByverify_faceAsList(String verifyFace)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByverify_faceAsList(verifyFace));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
 
    /**
     * Deletes rows using the verify_face index.
     *
     * @param verifyFace the verify_face column's value filter.
     * @return the number of deleted objects
     */
    public int deleteByverify_face(String verifyFace)
    {
        try{
            return this.nativeManager.deleteByverify_face(verifyFace);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table fl_log.
     *
     * @return the number of rows returned
     */
    //24
    @Override
    public int countAll() 
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table fl_log with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    //25
    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    /**
     * count the number of elements of a specific LogBean bean
     *
     * @param bean the LogBean bean to look for ant count
     * @return the number of rows returned
     */
    //27
    @Override
    public int countUsingTemplate(LogBean bean)
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific LogBean bean , given the start row and number of rows.
     *
     * @param bean the LogBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     */
    //20
    @Override
    public int countUsingTemplate(LogBean bean, int startRow, int numRows)
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific LogBean bean given the start row and number of rows and the search type
     *
     * @param bean the LogBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     */
    //20
    @Override
    public int countUsingTemplate(LogBean bean, int startRow, int numRows, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),startRow,numRows,searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    /**
     * Registers a unique {@link LogListener} listener.
     */
    //35
    @Override
    public void registerListener(TableListener listener)
    {
        this.nativeManager.registerListener(this.toNative((LogListener)listener));
    }

    private FlLogListener toNative(final LogListener listener) {
        return null == listener ?null:new FlLogListener (){

            @Override
            public void beforeInsert(FlLogBean bean) throws DAOException {
                listener.beforeInsert(LogManager.this.beanConverter.fromRight(bean));                
            }

            @Override
            public void afterInsert(FlLogBean bean) throws DAOException {
                listener.afterInsert(LogManager.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void beforeUpdate(FlLogBean bean) throws DAOException {
                listener.beforeUpdate(LogManager.this.beanConverter.fromRight(bean));
                
            }

            @Override
            public void afterUpdate(FlLogBean bean) throws DAOException {
                listener.afterUpdate(LogManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public void beforeDelete(FlLogBean bean) throws DAOException {
                listener.beforeDelete(LogManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public void afterDelete(FlLogBean bean) throws DAOException {
                listener.afterDelete(LogManager.this.beanConverter.fromRight(bean));
            }};
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________


    /**
     * return true if @{code column}(case insensitive)is primary key,otherwise return false <br>
     * return false if @{code column} is null or empty 
     * @param column
     * @return
     * @author guyadong
     */
    //43
    public static boolean isPrimaryKey(String column){
        for(String c:PRIMARYKEY_NAMES)if(c.equalsIgnoreCase(column))return true;
        return false;
    }
    
    /**
     * Load all the elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an array of LogBean
     */
    @Override
    public LogBean[] loadBySql(String sql, Object[] argList, int[] fieldList) {
        return loadBySqlAsList(sql, argList, fieldList).toArray(new LogBean[0]);
    }
    /**
     * Load all elements using a SQL statement specifying a list of fields to be retrieved.
     * @param sql the SQL statement for retrieving
     * @param argList the arguments to use fill given prepared statement,may be null
     * @param fieldList table of the field's associated constants
     * @return an list of LogBean
     */
    @Override
    public List<LogBean> loadBySqlAsList(String sql, Object[] argList, int[] fieldList){
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadBySqlAsList(sql,argList,fieldList));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public void runAsTransaction(final Runnable fun){
        try{
            this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    private FlLogManager.Action toNative(final Action<LogBean> action){
        if(null == action)
            throw new NullPointerException();
        return new FlLogManager.Action(){

            @Override
            public void call(FlLogBean bean) {
                action.call(LogManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public FlLogBean getBean() {
                return  LogManager.this.beanConverter.toRight(action.getBean());
            }};
    }
}
