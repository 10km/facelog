// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.java.vm
// ______________________________________________________
package net.gdface.facelog.db.mysql;

import java.util.concurrent.Callable;

import net.gdface.facelog.db.Constant;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.IPersonGroupManager;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.exception.WrapDaoException;
import net.gdface.facelog.db.exception.ObjectRetrievalException;

import net.gdface.facelog.dborm.exception.DaoException;

/**
 * Handles database calls (save, load, count, etc...) for the fl_person_group table.<br>
 * all {@link DaoException} be wrapped as {@link WrapDaoException} to throw.<br>
 * Remarks: 用户组信息<br>
 * @author guyadong
 */
public class PersonGroupManager extends TableManager.BaseAdapter<PersonGroupBean> implements IPersonGroupManager
{
    private net.gdface.facelog.dborm.person.FlPersonGroupManager nativeManager = net.gdface.facelog.dborm.person.FlPersonGroupManager.getInstance();
    private IDbConverter<
                        net.gdface.facelog.dborm.device.FlDeviceBean,
                        net.gdface.facelog.dborm.device.FlDeviceGroupBean,
                        net.gdface.facelog.dborm.face.FlFaceBean,
                        net.gdface.facelog.dborm.face.FlFeatureBean,
                        net.gdface.facelog.dborm.image.FlImageBean,
                        net.gdface.facelog.dborm.log.FlLogBean,
                        net.gdface.facelog.dborm.permit.FlPermitBean,
                        net.gdface.facelog.dborm.person.FlPersonBean,
                        net.gdface.facelog.dborm.person.FlPersonGroupBean,
                        net.gdface.facelog.dborm.image.FlStoreBean,
                        net.gdface.facelog.dborm.log.FlLogLightBean> dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<PersonGroupBean,net.gdface.facelog.dborm.person.FlPersonGroupBean> beanConverter = dbConverter.getPersonGroupBeanConverter();
    private static PersonGroupManager singleton = new PersonGroupManager();
    protected PersonGroupManager(){}
    
    protected PermitManager instanceOfPermitManager(){
        return PermitManager.getInstance();
    }
    protected PersonManager instanceOfPersonManager(){
        return PersonManager.getInstance();
    }
    protected DeviceGroupManager instanceOfDeviceGroupManager(){
        return DeviceGroupManager.getInstance();
    }
    protected PersonGroupManager instanceOfPersonGroupManager(){
        return this;
    }

    @Override
    public String getTableName() {
        return this.nativeManager.getTableName();
    }

    @Override
    public String getFields() {
        return this.nativeManager.getFields();
    }

    @Override
    public String getFullFields() {
        return this.nativeManager.getFullFields();
    }
    
    @Override
    public String[] getPrimarykeyNames() {
        return this.nativeManager.getPrimarykeyNames();
    }
    
    /**
     * Get the {@link PersonGroupManager} singleton.
     *
     * @return {@link PersonGroupManager}
     */
    public static PersonGroupManager getInstance()
    {
        return singleton;
    }
   
    @Override
    protected Class<PersonGroupBean> beanType(){
        return PersonGroupBean.class;
    }
    
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override IPersonGroupManager

    @Override 
    public PersonGroupBean loadByPrimaryKey(Integer id)
    {
        try{
            return loadByPrimaryKeyChecked(id);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    //1.1 override IPersonGroupManager

    @Override
    public PersonGroupBean loadByPrimaryKeyChecked(Integer id) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKeyChecked(id));
        }catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e){
            throw new ObjectRetrievalException();
        }catch(DaoException e){
            throw new WrapDaoException(e);
        }
    }
    //1.2

    @Override
    public PersonGroupBean loadByPrimaryKey(PersonGroupBean bean)
    {
        return bean==null?null:loadByPrimaryKey(bean.getId());
    }

    //1.2.2

    @Override
    public PersonGroupBean loadByPrimaryKeyChecked(PersonGroupBean bean) throws ObjectRetrievalException
    {
        if(null == bean){
            throw new NullPointerException();
        }
        return loadByPrimaryKeyChecked(bean.getId());
    }
    
    //1.3

    @Override
    public PersonGroupBean loadByPrimaryKey(Object ...keys){
        try{
            return loadByPrimaryKeyChecked(keys);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    
    //1.3.2

    @Override
    public PersonGroupBean loadByPrimaryKeyChecked(Object ...keys) throws ObjectRetrievalException{
        if(null == keys){
            throw new NullPointerException();
        }
        if(keys.length != FL_PERSON_GROUP_PK_COUNT){
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        }
        
        if(! (keys[0] instanceof Integer)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        }
        return loadByPrimaryKeyChecked((Integer)keys[0]);
    }

    //1.4 override IPersonGroupManager

    @Override 
    public boolean existsPrimaryKey(Integer id)
    {
        try{
            return nativeManager.existsPrimaryKey(id);
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    //1.6

    @Override
    public boolean existsByPrimaryKey(PersonGroupBean bean)
    {
        return null == bean ? false : existsPrimaryKey(bean.getId());
    }
    //1.7

    @Override
    public PersonGroupBean checkDuplicate(PersonGroupBean bean)throws ObjectRetrievalException{
        if(null != bean){
            checkDuplicate(bean.getId());
        }
        return bean;   
    }
    //1.4.1 override IPersonGroupManager

    @Override 
    public Integer checkDuplicate(Integer id)throws ObjectRetrievalException{
        try{
            return this.nativeManager.checkDuplicate(id);
        }catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e){
        	throw new ObjectRetrievalException(e);
        }catch(DaoException e){
            throw new WrapDaoException(e);
        }
    }
    //1.8 override IPersonGroupManager

    @Override 
    public java.util.List<PersonGroupBean> loadByPrimaryKey(int... keys){
        if(null == keys){
            return new java.util.ArrayList<PersonGroupBean>();
        }
        java.util.ArrayList<PersonGroupBean> list = new java.util.ArrayList<PersonGroupBean>(keys.length);
        for(int i = 0 ;i< keys.length;++i){
            list.add(loadByPrimaryKey(keys[i]));
        }
        return list;
    }
    //1.9 override IPersonGroupManager

    @Override 
    public java.util.List<PersonGroupBean> loadByPrimaryKey(java.util.Collection<Integer> keys){
        if(null == keys ){
            return new java.util.ArrayList<PersonGroupBean>();
        }
        java.util.ArrayList<PersonGroupBean> list = new java.util.ArrayList<PersonGroupBean>(keys.size());
        if(keys instanceof java.util.List){
            for(Integer key: keys){
                list.add(loadByPrimaryKey(key));
            }
        }else{
            PersonGroupBean bean;
            for(Integer key: keys){
                if(null != (bean = loadByPrimaryKey(key))){
                    list.add(bean);
                }
            }
        }
        return list;
    }
    //2 override IPersonGroupManager

    @Override 
    public int deleteByPrimaryKey(Integer id)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(id);
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    //2

    @Override
    public int delete(PersonGroupBean bean){
        try
        {
            return nativeManager.delete(this.beanConverter.toRight(bean));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }   
    }
    //2.1

    @Override
    public int deleteByPrimaryKey(Object ...keys){
        if(null == keys){
            throw new NullPointerException();
        }
        if(keys.length != FL_PERSON_GROUP_PK_COUNT){
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        }
        if(! (keys[0] instanceof Integer)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        }
        return deleteByPrimaryKey((Integer)keys[0]);
    }
    //2.2 override IPersonGroupManager

    @Override 
    public int deleteByPrimaryKey(int... keys){
        int count = 0;
        if(null != keys){        
            for(int key:keys){
                count += deleteByPrimaryKey(key);
            }
        }
        return count;
    }
    //2.3 override IPersonGroupManager

    @Override 
    public int deleteByPrimaryKey(java.util.Collection<Integer> keys){
        int count = 0;
        if(null != keys){        
            for(Integer key :keys){
                count += deleteByPrimaryKey(key);
            }
        }
        return count;
    }
    //2.4 override IPersonGroupManager

    @Override 
    public int delete(PersonGroupBean... beans){
        int count = 0;
        if(null != beans){
            for(PersonGroupBean bean :beans){
                count += delete(bean);
            }
        }
        return count;
    }
    //2.5 override IPersonGroupManager

    @Override 
    public int delete(java.util.Collection<PersonGroupBean> beans){
        int count = 0;
        if(null != beans){
            for(PersonGroupBean bean :beans){
                count += delete(bean);
            }
        }
        return count;
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] IMPORTED_BEAN_TYPES = new Class<?>[]{PermitBean.class,PersonBean.class,PersonGroupBean.class};

    /**
     * @see #getImportedBeansAsList(PersonGroupBean,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T[] getImportedBeans(PersonGroupBean bean, int ikIndex){
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(IMPORTED_BEAN_TYPES[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID} -> {@link PermitBean}</li>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID} -> {@link PersonBean}</li>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT} -> {@link PersonGroupBean}</li>
     * </ul>
     * @param bean the {@link PersonGroupBean} object to use
     * @param ikIndex valid values: {@link Constant#FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID},{@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID},{@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> java.util.List<T> getImportedBeansAsList(PersonGroupBean bean,int ikIndex){
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID:
            return (java.util.List<T>)this.getPermitBeansByPersonGroupIdAsList(bean);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID:
            return (java.util.List<T>)this.getPersonBeansByGroupIdAsList(bean);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT:
            return (java.util.List<T>)this.getPersonGroupBeansByParentAsList(bean);
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID} -> {@link PermitBean}</li>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID} -> {@link PersonBean}</li>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT} -> {@link PersonGroupBean}</li>
     * </ul>
     * @param bean the {@link PersonGroupBean} object to use
     * @param importedBeans the FlPersonGroupBean array to associate to the {@link PersonGroupBean}
     * @param ikIndex valid values: {@link Constant#FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID},{@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID},{@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT}
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T[] setImportedBeans(PersonGroupBean bean,T[] importedBeans,int ikIndex){
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID:
            return (T[])setPermitBeansByPersonGroupId(bean,(PermitBean[])importedBeans);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID:
            return (T[])setPersonBeansByGroupId(bean,(PersonBean[])importedBeans);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT:
            return (T[])setPersonGroupBeansByParent(bean,(PersonGroupBean[])importedBeans);
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID} -> {@link PermitBean}</li>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID} -> {@link PersonBean}</li>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT} -> {@link PersonGroupBean}</li>
     * </ul>
     * @param bean the {@link PersonGroupBean} object to use
     * @param importedBeans the <T> object to associate to the {@link PersonGroupBean}
     * @param ikIndex valid values: {@link Constant#FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID},{@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID},{@link Constant#FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT}
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>,C extends java.util.Collection<T>> C setImportedBeans(PersonGroupBean bean,C importedBeans,int ikIndex){
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_PERMIT_PERSON_GROUP_ID:
            return (C)setPermitBeansByPersonGroupId(bean,(java.util.Collection<PermitBean>)importedBeans);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_ID:
            return (C)setPersonBeansByGroupId(bean,(java.util.Collection<PersonBean>)importedBeans);
        case FL_PERSON_GROUP_IK_FL_PERSON_GROUP_PARENT:
            return (C)setPersonGroupBeansByParent(bean,(java.util.Collection<PersonGroupBean>)importedBeans);
        default:
            throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
        }
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    //3.1 GET IMPORTED override IPersonGroupManager

    @Override 
    public PermitBean[] getPermitBeansByPersonGroupId(PersonGroupBean bean)
    {
        return this.getPermitBeansByPersonGroupIdAsList(bean).toArray(new PermitBean[0]);
    }
    //3.1.2 GET IMPORTED override IPersonGroupManager

    @Override
    public PermitBean[] getPermitBeansByPersonGroupId(Integer idOfPersonGroup)
    {
        PersonGroupBean bean = new PersonGroupBean();
        bean.setId(idOfPersonGroup);
        return getPermitBeansByPersonGroupId(bean);
    }
    //3.2 GET IMPORTED override IPersonGroupManager

    @Override 
    public java.util.List<PermitBean> getPermitBeansByPersonGroupIdAsList(PersonGroupBean bean)
    {
        return getPermitBeansByPersonGroupIdAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED override IPersonGroupManager

    @Override
    public java.util.List<PermitBean> getPermitBeansByPersonGroupIdAsList(Integer idOfPersonGroup)
    {
         PersonGroupBean bean = new PersonGroupBean();
        bean.setId(idOfPersonGroup);
        return getPermitBeansByPersonGroupIdAsList(bean);
    }
    //3.2.3 DELETE IMPORTED override IPersonGroupManager

    @Override
    public int deletePermitBeansByPersonGroupId(Integer idOfPersonGroup)
    {
        java.util.List<PermitBean> list =getPermitBeansByPersonGroupIdAsList(idOfPersonGroup);
        return instanceOfPermitManager().delete(list);
    }
    //3.2.4 GET IMPORTED override IPersonGroupManager

    @Override 
    public java.util.List<PermitBean> getPermitBeansByPersonGroupIdAsList(PersonGroupBean bean,int startRow, int numRows)
    {
        try {
            return this.dbConverter.getPermitBeanConverter().fromRight(nativeManager.getPermitBeansByPersonGroupIdAsList( this.beanConverter.toRight(bean),startRow,numRows));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    //3.3 SET IMPORTED override IPersonGroupManager

    @Override 
    public PermitBean[] setPermitBeansByPersonGroupId(PersonGroupBean bean , PermitBean[] importedBeans)
    {
        if(null != importedBeans){
            for( PermitBean importBean : importedBeans ){
                instanceOfPermitManager().setReferencedByPersonGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED override IPersonGroupManager

    @Override 
    public <C extends java.util.Collection<PermitBean>> C setPermitBeansByPersonGroupId(PersonGroupBean bean , C importedBeans)
    {
        if(null != importedBeans){
            for( PermitBean importBean : importedBeans ){
                instanceOfPermitManager().setReferencedByPersonGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.1 GET IMPORTED override IPersonGroupManager

    @Override 
    public PersonBean[] getPersonBeansByGroupId(PersonGroupBean bean)
    {
        return this.getPersonBeansByGroupIdAsList(bean).toArray(new PersonBean[0]);
    }
    //3.1.2 GET IMPORTED override IPersonGroupManager

    @Override
    public PersonBean[] getPersonBeansByGroupId(Integer idOfPersonGroup)
    {
        PersonGroupBean bean = new PersonGroupBean();
        bean.setId(idOfPersonGroup);
        return getPersonBeansByGroupId(bean);
    }
    //3.2 GET IMPORTED override IPersonGroupManager

    @Override 
    public java.util.List<PersonBean> getPersonBeansByGroupIdAsList(PersonGroupBean bean)
    {
        return getPersonBeansByGroupIdAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED override IPersonGroupManager

    @Override
    public java.util.List<PersonBean> getPersonBeansByGroupIdAsList(Integer idOfPersonGroup)
    {
         PersonGroupBean bean = new PersonGroupBean();
        bean.setId(idOfPersonGroup);
        return getPersonBeansByGroupIdAsList(bean);
    }
    //3.2.3 DELETE IMPORTED override IPersonGroupManager

    @Override
    public int deletePersonBeansByGroupId(Integer idOfPersonGroup)
    {
        java.util.List<PersonBean> list =getPersonBeansByGroupIdAsList(idOfPersonGroup);
        return instanceOfPersonManager().delete(list);
    }
    //3.2.4 GET IMPORTED override IPersonGroupManager

    @Override 
    public java.util.List<PersonBean> getPersonBeansByGroupIdAsList(PersonGroupBean bean,int startRow, int numRows)
    {
        try {
            return this.dbConverter.getPersonBeanConverter().fromRight(nativeManager.getPersonBeansByGroupIdAsList( this.beanConverter.toRight(bean),startRow,numRows));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    //3.3 SET IMPORTED override IPersonGroupManager

    @Override 
    public PersonBean[] setPersonBeansByGroupId(PersonGroupBean bean , PersonBean[] importedBeans)
    {
        if(null != importedBeans){
            for( PersonBean importBean : importedBeans ){
                instanceOfPersonManager().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED override IPersonGroupManager

    @Override 
    public <C extends java.util.Collection<PersonBean>> C setPersonBeansByGroupId(PersonGroupBean bean , C importedBeans)
    {
        if(null != importedBeans){
            for( PersonBean importBean : importedBeans ){
                instanceOfPersonManager().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.1 GET IMPORTED override IPersonGroupManager

    @Override 
    public PersonGroupBean[] getPersonGroupBeansByParent(PersonGroupBean bean)
    {
        return this.getPersonGroupBeansByParentAsList(bean).toArray(new PersonGroupBean[0]);
    }
    //3.1.2 GET IMPORTED override IPersonGroupManager

    @Override
    public PersonGroupBean[] getPersonGroupBeansByParent(Integer idOfPersonGroup)
    {
        PersonGroupBean bean = new PersonGroupBean();
        bean.setId(idOfPersonGroup);
        return getPersonGroupBeansByParent(bean);
    }
    //3.2 GET IMPORTED override IPersonGroupManager

    @Override 
    public java.util.List<PersonGroupBean> getPersonGroupBeansByParentAsList(PersonGroupBean bean)
    {
        return getPersonGroupBeansByParentAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED override IPersonGroupManager

    @Override
    public java.util.List<PersonGroupBean> getPersonGroupBeansByParentAsList(Integer idOfPersonGroup)
    {
         PersonGroupBean bean = new PersonGroupBean();
        bean.setId(idOfPersonGroup);
        return getPersonGroupBeansByParentAsList(bean);
    }
    //3.2.3 DELETE IMPORTED override IPersonGroupManager

    @Override
    public int deletePersonGroupBeansByParent(Integer idOfPersonGroup)
    {
        java.util.List<PersonGroupBean> list =getPersonGroupBeansByParentAsList(idOfPersonGroup);
        return instanceOfPersonGroupManager().delete(list);
    }
    //3.2.4 GET IMPORTED override IPersonGroupManager

    @Override 
    public java.util.List<PersonGroupBean> getPersonGroupBeansByParentAsList(PersonGroupBean bean,int startRow, int numRows)
    {
        try {
            return this.dbConverter.getPersonGroupBeanConverter().fromRight(nativeManager.getPersonGroupBeansByParentAsList( this.beanConverter.toRight(bean),startRow,numRows));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    //3.3 SET IMPORTED override IPersonGroupManager

    @Override 
    public PersonGroupBean[] setPersonGroupBeansByParent(PersonGroupBean bean , PersonGroupBean[] importedBeans)
    {
        if(null != importedBeans){
            for( PersonGroupBean importBean : importedBeans ){
                instanceOfPersonGroupManager().setReferencedByParent(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED override IPersonGroupManager

    @Override 
    public <C extends java.util.Collection<PersonGroupBean>> C setPersonGroupBeansByParent(PersonGroupBean bean , C importedBeans)
    {
        if(null != importedBeans){
            for( PersonGroupBean importBean : importedBeans ){
                instanceOfPersonGroupManager().setReferencedByParent(importBean , bean);
            }
        }
        return importedBeans;
    }



    //3.5 SYNC SAVE override IPersonGroupManager

    @Override  
    public PersonGroupBean save(PersonGroupBean bean
        , PersonGroupBean refPersongroupByParent 
        , PermitBean[] impPermitByPersonGroupId , PersonBean[] impPersonByGroupId , PersonGroupBean[] impPersongroupByParent )
    {
        if(null == bean){
            return null;
        }
        if(null != refPersongroupByParent){
            this.setReferencedByParent(bean,refPersongroupByParent);
        }
        bean = this.save( bean );
        this.setPermitBeansByPersonGroupId(bean,impPermitByPersonGroupId);
        instanceOfPermitManager().save( impPermitByPersonGroupId );
        this.setPersonBeansByGroupId(bean,impPersonByGroupId);
        instanceOfPersonManager().save( impPersonByGroupId );
        this.setPersonGroupBeansByParent(bean,impPersongroupByParent);
        instanceOfPersonGroupManager().save( impPersongroupByParent );
        return bean;
    } 

    //3.6 SYNC SAVE AS TRANSACTION override IPersonGroupManager

    @Override 
    public PersonGroupBean saveAsTransaction(final PersonGroupBean bean
        ,final PersonGroupBean refPersongroupByParent 
        ,final PermitBean[] impPermitByPersonGroupId ,final PersonBean[] impPersonByGroupId ,final PersonGroupBean[] impPersongroupByParent )
    {
        return this.runAsTransaction(new Callable<PersonGroupBean>(){
            @Override
            public PersonGroupBean call() throws Exception {
                return save(bean , refPersongroupByParent , impPermitByPersonGroupId , impPersonByGroupId , impPersongroupByParent );
            }});
    }
    //3.7 SYNC SAVE override IPersonGroupManager

    @Override 
    public PersonGroupBean save(PersonGroupBean bean
        , PersonGroupBean refPersongroupByParent 
        , java.util.Collection<PermitBean> impPermitByPersonGroupId , java.util.Collection<PersonBean> impPersonByGroupId , java.util.Collection<PersonGroupBean> impPersongroupByParent )
    {
        if(null == bean){
            return null;
        }
        this.setReferencedByParent(bean,refPersongroupByParent);
        bean = this.save( bean );
        this.setPermitBeansByPersonGroupId(bean,impPermitByPersonGroupId);
        instanceOfPermitManager().save( impPermitByPersonGroupId );
        this.setPersonBeansByGroupId(bean,impPersonByGroupId);
        instanceOfPersonManager().save( impPersonByGroupId );
        this.setPersonGroupBeansByParent(bean,impPersongroupByParent);
        instanceOfPersonGroupManager().save( impPersongroupByParent );
        return bean;
    }   

    //3.8 SYNC SAVE AS TRANSACTION override IPersonGroupManager

    @Override 
    public PersonGroupBean saveAsTransaction(final PersonGroupBean bean
        ,final PersonGroupBean refPersongroupByParent 
        ,final  java.util.Collection<PermitBean> impPermitByPersonGroupId ,final  java.util.Collection<PersonBean> impPersonByGroupId ,final  java.util.Collection<PersonGroupBean> impPersongroupByParent )
    {
        return this.runAsTransaction(new Callable<PersonGroupBean>(){
            @Override
            public PersonGroupBean call() throws Exception {
                return save(bean , refPersongroupByParent , impPermitByPersonGroupId , impPersonByGroupId , impPersongroupByParent );
            }});
    }
 
    private static final int SYNC_SAVE_ARG_LEN = 4;
    private static final int SYNC_SAVE_ARG_0 = 0;
    private static final int SYNC_SAVE_ARG_1 = 1;
    private static final int SYNC_SAVE_ARG_2 = 2;
    private static final int SYNC_SAVE_ARG_3 = 3;
    //3.9 SYNC SAVE 
    /**
     * Save the {@link PersonGroupBean} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link PersonGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(PersonGroupBean , PersonGroupBean , PermitBean[] , PersonBean[] , PersonGroupBean[] )}
     * @return the inserted or updated {@link PersonGroupBean} bean
     */
    @Override
    public PersonGroupBean save(PersonGroupBean bean,Object ...inputs) 
    {
        if(null == inputs){
            return save(bean);
        }
        if(inputs.length > SYNC_SAVE_ARG_LEN){
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 4");
        }
        Object[] args = new Object[SYNC_SAVE_ARG_LEN];
        System.arraycopy(inputs, 0, args, 0, inputs.length);
        if( null != args[SYNC_SAVE_ARG_0] && !(args[SYNC_SAVE_ARG_0] instanceof PersonGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:PersonGroupBean");
        }
        if( null != args[SYNC_SAVE_ARG_1] && !(args[SYNC_SAVE_ARG_1] instanceof PermitBean[])){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:PermitBean[]");
        }
        if( null != args[SYNC_SAVE_ARG_2] && !(args[SYNC_SAVE_ARG_2] instanceof PersonBean[])){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:PersonBean[]");
        }
        if( null != args[SYNC_SAVE_ARG_3] && !(args[SYNC_SAVE_ARG_3] instanceof PersonGroupBean[])){
            throw new IllegalArgumentException("invalid type for the No.4 argument,expected type:PersonGroupBean[]");
        }
        return save(bean,
                    (PersonGroupBean)args[SYNC_SAVE_ARG_0],
                    (PermitBean[])args[SYNC_SAVE_ARG_1],
                    (PersonBean[])args[SYNC_SAVE_ARG_2],
                    (PersonGroupBean[])args[SYNC_SAVE_ARG_3]);
    } 

    //3.10 SYNC SAVE 
    /**
     * Save the {@link PersonGroupBean} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link PersonGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(PersonGroupBean , PersonGroupBean , java.util.Collection , java.util.Collection , java.util.Collection )}
     * @return the inserted or updated {@link PersonGroupBean} bean
     */
    @SuppressWarnings("unchecked")
    @Override
    public PersonGroupBean saveCollection(PersonGroupBean bean,Object ...inputs)
    {
        if(null == inputs){
            return save(bean);
        }
        if(inputs.length > SYNC_SAVE_ARG_LEN){
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 4");
        }
        Object[] args = new Object[SYNC_SAVE_ARG_LEN];
        System.arraycopy(inputs, 0, args, 0, inputs.length);
        if( null != args[SYNC_SAVE_ARG_0] && !(args[SYNC_SAVE_ARG_0] instanceof PersonGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:PersonGroupBean");
        }
        if( null != args[SYNC_SAVE_ARG_1] && !(args[SYNC_SAVE_ARG_1] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:java.util.Collection<PermitBean>");
        }
        if( null != args[SYNC_SAVE_ARG_2] && !(args[SYNC_SAVE_ARG_2] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:java.util.Collection<PersonBean>");
        }
        if( null != args[SYNC_SAVE_ARG_3] && !(args[SYNC_SAVE_ARG_3] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.4 argument,expected type:java.util.Collection<PersonGroupBean>");
        }
        return save(bean,
                    (PersonGroupBean)args[SYNC_SAVE_ARG_0],
                    (java.util.Collection<PermitBean>)args[SYNC_SAVE_ARG_1],
                    (java.util.Collection<PersonBean>)args[SYNC_SAVE_ARG_2],
                    (java.util.Collection<PersonGroupBean>)args[SYNC_SAVE_ARG_3]);
    }

     //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_FK_PARENT} -> {@link PersonGroupBean}</li>
     * </ul>
     * @param bean the {@link PersonGroupBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link Constant#FL_PERSON_GROUP_FK_PARENT}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T getReferencedBean(PersonGroupBean bean,int fkIndex){
        switch(fkIndex){
        case FL_PERSON_GROUP_FK_PARENT:
            return  (T)this.getReferencedByParent(bean);
        default:
            throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
        }
    }
    /**
     * Associates the {@link PersonGroupBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean(PersonGroupBean,int)}
     * @param bean the {@link PersonGroupBean} object to use
     * @param beanToSet the <T> object to associate to the {@link PersonGroupBean}
     * @param fkIndex valid values: see also {@link #getReferencedBean(PersonGroupBean,int)}
     * @return always beanToSet saved
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T setReferencedBean(PersonGroupBean bean,T beanToSet,int fkIndex){
        switch(fkIndex){
        case FL_PERSON_GROUP_FK_PARENT:
            return  (T)this.setReferencedByParent(bean, (PersonGroupBean)beanToSet);
        default:
            throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
        }
    }
    
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    //5.1 GET REFERENCED VALUE override IPersonGroupManager

    @Override 
    public PersonGroupBean getReferencedByParent(PersonGroupBean bean)
    {
        if(null == bean){
            return null;
        }
        bean.setReferencedByParent(instanceOfPersonGroupManager().loadByPrimaryKey(bean.getParent())); 
        return bean.getReferencedByParent();
    }

    //5.2 SET REFERENCED override IPersonGroupManager

    @Override 
    public PersonGroupBean setReferencedByParent(PersonGroupBean bean, PersonGroupBean beanToSet)
    {
        try{
            net.gdface.facelog.dborm.person.FlPersonGroupBean nativeBean = this.beanConverter.toRight(bean);
            IBeanConverter<PersonGroupBean,net.gdface.facelog.dborm.person.FlPersonGroupBean> foreignConverter = this.dbConverter.getPersonGroupBeanConverter();
            net.gdface.facelog.dborm.person.FlPersonGroupBean foreignNativeBean = foreignConverter.toRight(beanToSet);
            this.nativeManager.setReferencedByParent(nativeBean,foreignNativeBean);
            this.beanConverter.fromRight(bean, nativeBean);
            foreignConverter.fromRight(beanToSet,foreignNativeBean);
            return beanToSet;
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////

    //11

    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13

    @Override
    protected PersonGroupBean insert(PersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }

    //14
    @Override

    protected PersonGroupBean update(PersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override

    public PersonGroupBean loadUniqueUsingTemplate(PersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
     }
    //18-1
    @Override

    public PersonGroupBean loadUniqueUsingTemplateChecked(PersonGroupBean bean) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplateChecked(this.beanConverter.toRight(bean)));
        }
        catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e)
        {
            throw new ObjectRetrievalException();
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
     }
    //20-5

    @Override
    public int loadUsingTemplate(PersonGroupBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<PersonGroupBean> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }

    //21

    @Override
    public int deleteUsingTemplate(PersonGroupBean bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

     // override IPersonGroupManager

    @Override 
    public PersonGroupBean[] loadByIndexParent(Integer parent)
    {
        return this.loadByIndexParentAsList(parent).toArray(new PersonGroupBean[0]);
    }
    
    // override IPersonGroupManager

    @Override 
    public java.util.List<PersonGroupBean> loadByIndexParentAsList(Integer parent)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByIndexParentAsList(parent));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }

    // override IPersonGroupManager

    @Override 
    public int deleteByIndexParent(Integer parent)
    {
        try{
            return this.nativeManager.deleteByIndexParent(parent);
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    
    
    /**
     * Retrieves a list of PersonGroupBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_PERSON_GROUP_INDEX_PARENT}
     * @param keys key values of index
     * @return a list of PersonGroupBean
     */
    @Override
    public java.util.List<PersonGroupBean> loadByIndexAsList(int keyIndex,Object ...keys)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByIndexAsList(keyIndex,keys));
        }catch(DaoException e){
            throw new WrapDaoException(e);
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_PERSON_GROUP_INDEX_PARENT}
     * @param keys key values of index
     * @return the number of deleted objects
     */
    @Override
    public int deleteByIndex(int keyIndex,Object ...keys)
    {
        try{
            return this.nativeManager.deleteByIndex(keyIndex,keys);
        }catch(DaoException e){
            throw new WrapDaoException(e);
        }
    }

    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
    //22 MANY TO MANY override IPersonGroupManager

    @Override
    public java.util.List<PersonGroupBean> loadViaPermitAsList(DeviceGroupBean bean)
    {
         return this.loadViaPermitAsList(bean, 1, -1);
    }

    //23 MANY TO MANY override IPersonGroupManager

    @Override
    public java.util.List<PersonGroupBean> loadViaPermitAsList(DeviceGroupBean bean, int startRow, int numRows)
    {
        try{
            return this.beanConverter.fromRight(
                this.nativeManager.loadViaPermitAsList(
                    this.dbConverter.getDeviceGroupBeanConverter().toRight(bean),
                    startRow,
                    numRows));
        }catch(DaoException e){
            throw new WrapDaoException(e);
        }
    }
    //23.2 MANY TO MANY override IPersonGroupManager

    @Override
    public void addJunction(PersonGroupBean bean,DeviceGroupBean linked){
        if(null == bean || null == bean.getId()){
            return ;
        }
        if(null == linked || null ==bean.getId()){
            return ;
        }
        if(!instanceOfPermitManager().existsPrimaryKey(linked.getId(),bean.getId())){
            PermitBean junction = new PermitBean();
            junction.setDeviceGroupId(linked.getId());
            junction.setPersonGroupId(bean.getId());
            instanceOfPermitManager().save(junction);
        }
    }
    //23.3 MANY TO MANY override IPersonGroupManager

    @Override
    public int deleteJunction(PersonGroupBean bean,DeviceGroupBean linked){
        if(null == bean || null == bean.getId()){
            return 0;
        }
        if(null == linked || null ==bean.getId()){
            return 0;
        }
        return instanceOfPermitManager().deleteByPrimaryKey(linked.getId(),bean.getId());
    }
    //23.4 MANY TO MANY override IPersonGroupManager

    @Override
    public void addJunction(PersonGroupBean bean,DeviceGroupBean... linkedBeans){
        if(null != linkedBeans){
            for(DeviceGroupBean linked:linkedBeans){
                addJunction(bean,linked);
            }
        }
    }
    //23.5 MANY TO MANY override IPersonGroupManager

    @Override
    public void addJunction(PersonGroupBean bean,java.util.Collection<DeviceGroupBean> linkedBeans){
        if(null != linkedBeans){
            for(DeviceGroupBean linked:linkedBeans){
                addJunction(bean,linked);
            }
        }
    }
    //23.6 MANY TO MANY override IPersonGroupManager

    @Override
    public int deleteJunction(PersonGroupBean bean,DeviceGroupBean... linkedBeans){
        int count = 0;
        if(null != linkedBeans){
            for(DeviceGroupBean linked:linkedBeans){
                count += deleteJunction(bean,linked);
            }
        }
        return count;
    }
    //23.7 MANY TO MANY override IPersonGroupManager

    @Override
    public int deleteJunction(PersonGroupBean bean,java.util.Collection<DeviceGroupBean> linkedBeans){
        int count = 0;
        if(null != linkedBeans){
            for(DeviceGroupBean linked:linkedBeans){
                count += deleteJunction(bean,linked);
            }
        }
        return count;
    }
    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    //25

    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }

    //20

    @Override
    public int countUsingTemplate(PersonGroupBean bean, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),searchType);
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    //35
    /**
     * @return {@link WrapListener} instance
     */
    @Override
    public TableListener<PersonGroupBean> registerListener(TableListener<PersonGroupBean> listener)
    {
        WrapListener wrapListener;
        if(listener instanceof WrapListener){
            wrapListener = (WrapListener)listener;
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }else{
            wrapListener = new WrapListener(listener);
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }
        return wrapListener;
    }

    //36

    @Override
    public void unregisterListener(TableListener<PersonGroupBean> listener)
    {
        if(!(listener instanceof WrapListener)){
            throw new IllegalArgumentException("invalid listener type: " + WrapListener.class.getName() +" required");
        }
        this.nativeManager.unregisterListener(((WrapListener)listener).nativeListener);
    }
    
    //37

    @Override
    public void fire(TableListener.Event event, PersonGroupBean bean){
        fire(event.ordinal(), bean);
    }
    
    //37-1

    @Override
    public void fire(int event, PersonGroupBean bean){
        try{
            this.nativeManager.fire(event, this.beanConverter.toRight(bean));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    //37-2
    /**
     * bind foreign key listener to foreign table for DELETE RULE
     */
    void bindForeignKeyListenerForDeleteRule(){
        this.nativeManager.bindForeignKeyListenerForDeleteRule();
    }
    //37-3
    /**
     * unbind foreign key listener from all of foreign tables <br>
     * @see #bindForeignKeyListenerForDeleteRule()
     */
    void unbindForeignKeyListenerForDeleteRule(){
        this.nativeManager.unbindForeignKeyListenerForDeleteRule();

    }
    /**
     * wrap {@code TableListener<PersonGroupBean>} as native listener
     */
    public class WrapListener implements TableListener<PersonGroupBean>{
        private final TableListener<PersonGroupBean> listener;
        private final net.gdface.facelog.dborm.TableListener<net.gdface.facelog.dborm.person.FlPersonGroupBean> nativeListener;
        private WrapListener(final TableListener<PersonGroupBean> listener) {
            if(null == listener){
                throw new NullPointerException();
            }
            this.listener = listener;
            this.nativeListener = new net.gdface.facelog.dborm.TableListener<net.gdface.facelog.dborm.person.FlPersonGroupBean> (){

                @Override
                public void beforeInsert(net.gdface.facelog.dborm.person.FlPersonGroupBean bean) throws DaoException {
                    listener.beforeInsert(PersonGroupManager.this.beanConverter.fromRight(bean));                
                }

                @Override
                public void afterInsert(net.gdface.facelog.dborm.person.FlPersonGroupBean bean) throws DaoException {
                    listener.afterInsert(PersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeUpdate(net.gdface.facelog.dborm.person.FlPersonGroupBean bean) throws DaoException {
                    listener.beforeUpdate(PersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterUpdate(net.gdface.facelog.dborm.person.FlPersonGroupBean bean) throws DaoException {
                    listener.afterUpdate(PersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeDelete(net.gdface.facelog.dborm.person.FlPersonGroupBean bean) throws DaoException {
                    listener.beforeDelete(PersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterDelete(net.gdface.facelog.dborm.person.FlPersonGroupBean bean) throws DaoException {
                    listener.afterDelete(PersonGroupManager.this.beanConverter.fromRight(bean));
                }};
        }

        @Override
        public void beforeInsert(PersonGroupBean bean) {
            listener.beforeInsert(bean);
        }

        @Override
        public void afterInsert(PersonGroupBean bean) {
            listener.afterInsert(bean);
        }

        @Override
        public void beforeUpdate(PersonGroupBean bean) {
            listener.beforeUpdate(bean);
        }

        @Override
        public void afterUpdate(PersonGroupBean bean) {
            listener.afterUpdate(bean);
        }

        @Override
        public void beforeDelete(PersonGroupBean bean) {
            listener.beforeDelete(bean);
        }

        @Override
        public void afterDelete(PersonGroupBean bean) {
            listener.afterDelete(bean);
        }        
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //43

    @Override
    public boolean isPrimaryKey(String column){
        return this.nativeManager.isPrimaryKey(column);
    }
    
    @Override
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<PersonGroupBean> action){
        try{
            return this.nativeManager.loadBySqlForAction(sql,argList,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DaoException e)
        {
            throw new WrapDaoException(e);
        }
    }
    
    private net.gdface.facelog.dborm.TableManager.Action<net.gdface.facelog.dborm.person.FlPersonGroupBean> toNative(final Action<PersonGroupBean> action){
        if(null == action){
            throw new NullPointerException();
        }
        return new net.gdface.facelog.dborm.TableManager.Action<net.gdface.facelog.dborm.person.FlPersonGroupBean>(){

            @Override
            public void call(net.gdface.facelog.dborm.person.FlPersonGroupBean bean) {
                action.call(PersonGroupManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public net.gdface.facelog.dborm.person.FlPersonGroupBean getBean() {
                return  PersonGroupManager.this.beanConverter.toRight(action.getBean());
            }};
    }
    
    //45 override IPersonGroupManager

    @Override 
    public java.util.List<Integer> toPrimaryKeyList(PersonGroupBean... beans){        
        if(null == beans){
            return new java.util.ArrayList<Integer>();
        }
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(beans.length);
        for(PersonGroupBean bean:beans){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
    //46 override IPersonGroupManager

    @Override 
    public java.util.List<Integer> toPrimaryKeyList(java.util.Collection<PersonGroupBean> beans){        
        if(null == beans){
            return new java.util.ArrayList<Integer>();
        }
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(beans.size());
        for(PersonGroupBean bean:beans){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }

    //_____________________________________________________________________
    //
    // SELF-REFERENCE
    //_____________________________________________________________________
    //47 IPersonGroupManager

    @Override
    public java.util.List<PersonGroupBean> listOfParent(Integer id){
        PersonGroupBean parent = (null == id)
            ? null
            : new PersonGroupBean(id);
        java.util.List<PersonGroupBean> list;
        for(list = new java.util.ArrayList<PersonGroupBean>();null != parent;list.add(parent)){
            parent = loadByPrimaryKey(parent.getParent());
            if(equal(id,parent.getId())){
                // cycle reference
                list.add(parent);
                break;
            }
        }
        java.util.Collections.reverse(list);
        return list;
    }
    //48 IPersonGroupManager

    @Override
    public java.util.List<PersonGroupBean> listOfParent(PersonGroupBean bean){
        return null == bean
                ? java.util.Collections.<PersonGroupBean>emptyList()
                : listOfParent(bean.getId());
    }
    //49 IPersonGroupManager

    @Override
    public int levelOfParent(Integer id){
        PersonGroupBean parent = (null == id)
            ? null
            : new PersonGroupBean(id);
        int count;
        for(count = 0;null != parent;++count){
            parent = loadByPrimaryKey(parent.getParent());
            if(null != parent  && equal(id,parent.getId())){
                return -1;
            }
        }
        return count;
    }
    //50 IPersonGroupManager

    @Override
    public int levelOfParent(PersonGroupBean bean){
        return null == bean
                ? 0
                : levelOfParent(bean.getId());
    }
    //51 IPersonGroupManager

    @Override
    public boolean isCycleOnParent(Integer id){
        return levelOfParent(id) < 0;
    }
    //52 IPersonGroupManager

    @Override
    public boolean isCycleOnParent(PersonGroupBean bean){
        return levelOfParent(bean) < 0;
    }
    //53 IPersonGroupManager

    @Override
    public PersonGroupBean topOfParent(Integer id){
        if(null == id){
            throw new NullPointerException();
        }
        PersonGroupBean parent = new PersonGroupBean(id);
        for(;null != parent.getParent();){
            parent = loadByPrimaryKey(parent.getParent());
            if(equal(id,parent.getId())){
                throw new IllegalStateException("cycle on field: " + "parent");
            }
        }
        return parent;
    }
    //54 IPersonGroupManager

    @Override
    public PersonGroupBean topOfParent(PersonGroupBean bean){
        if(null == bean){
            throw new NullPointerException();
        }
        return topOfParent(bean.getId());
    }
    //55 IPersonGroupManager

    @Override
    public Integer checkCycleOfParent(Integer id){
        if(isCycleOnParent(id)){
            throw new IllegalStateException("cycle on field: " + "parent");
        }
        return id;
    }
    //56 IPersonGroupManager

    @Override
    public PersonGroupBean checkCycleOfParent(PersonGroupBean bean){
        if(isCycleOnParent(bean)){
            throw new IllegalStateException("cycle on field: " + "parent");
        }
        return bean;
    }
}
