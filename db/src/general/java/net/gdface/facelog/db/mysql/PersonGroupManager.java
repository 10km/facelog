// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.java.vm
// ______________________________________________________
package net.gdface.facelog.db.mysql;

import java.util.concurrent.Callable;

import net.gdface.facelog.db.Constant;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.IPersonGroupManager;
import net.gdface.facelog.db.JunctionPersonGroupBean;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.exception.WrapDAOException;
import net.gdface.facelog.db.exception.ObjectRetrievalException;

import net.gdface.facelog.dborm.exception.DAOException;
import net.gdface.facelog.dborm.person.FlPersonGroupManager;
import net.gdface.facelog.dborm.person.FlPersonGroupBean;

/**
 * Handles database calls (save, load, count, etc...) for the fl_person_group table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.<br>
 * Remarks: 用户组信息<br>
 * @author guyadong
 */
public class PersonGroupManager extends TableManager.Adapter<PersonGroupBean> implements IPersonGroupManager
{
    private FlPersonGroupManager nativeManager = FlPersonGroupManager.getInstance();
    private IDbConverter<net.gdface.facelog.dborm.device.FlDeviceBean,net.gdface.facelog.dborm.device.FlDeviceGroupBean,net.gdface.facelog.dborm.face.FlFaceBean,net.gdface.facelog.dborm.face.FlFeatureBean,net.gdface.facelog.dborm.image.FlImageBean,net.gdface.facelog.dborm.device.FlJunctionDeviceGroupBean,net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean,net.gdface.facelog.dborm.log.FlLogBean,net.gdface.facelog.dborm.person.FlPersonBean,net.gdface.facelog.dborm.person.FlPersonGroupBean,net.gdface.facelog.dborm.image.FlStoreBean,net.gdface.facelog.dborm.log.FlLogLightBean> dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<PersonGroupBean,FlPersonGroupBean> beanConverter = dbConverter.getPersonGroupBeanConverter();
    private static PersonGroupManager singleton = new PersonGroupManager();
    protected PersonGroupManager(){}
    /**
    * @return table name
    */
    public String getTableName() {
        return this.nativeManager.getTableName();
    }

    /**
    * @return field names of table
    */
    public String getFields() {
        return this.nativeManager.getFields();
    }
    
    public String getFullFields() {
        return this.nativeManager.getFullFields();
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return this.nativeManager.getPrimarykeyNames();
    }
    
    /**
     * Get the {@link PersonGroupManager} singleton.
     *
     * @return {@link PersonGroupManager}
     */
    public static PersonGroupManager getInstance()
    {
        return singleton;
    }
   
    @Override
    protected Class<PersonGroupBean> _beanType(){
        return PersonGroupBean.class;
    }
    
    public IDbConverter<net.gdface.facelog.dborm.device.FlDeviceBean,net.gdface.facelog.dborm.device.FlDeviceGroupBean,net.gdface.facelog.dborm.face.FlFaceBean,net.gdface.facelog.dborm.face.FlFeatureBean,net.gdface.facelog.dborm.image.FlImageBean,net.gdface.facelog.dborm.device.FlJunctionDeviceGroupBean,net.gdface.facelog.dborm.person.FlJunctionPersonGroupBean,net.gdface.facelog.dborm.log.FlLogBean,net.gdface.facelog.dborm.person.FlPersonBean,net.gdface.facelog.dborm.person.FlPersonGroupBean,net.gdface.facelog.dborm.image.FlStoreBean,net.gdface.facelog.dborm.log.FlLogLightBean> getDbConverter() {
        return dbConverter;
    }

    /**
     * set  {@link IDbConverter} as converter used by manager.<br>
     * throw {@link NullPointerException} if {@code dbConverter} is null
     * @param dbConverter
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public synchronized void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getPersonGroupBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override IPersonGroupManager
    @Override 
    public PersonGroupBean loadByPrimaryKey(Integer id)
    {
        if(null == id){
            return null;
        }
        try{
            return loadByPrimaryKeyChecked(id);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    //1.1 override IPersonGroupManager
    @Override
    public PersonGroupBean loadByPrimaryKeyChecked(Integer id) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKeyChecked(id));
        }catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e){
            throw new ObjectRetrievalException();
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //1.2
    @Override
    public PersonGroupBean loadByPrimaryKey(PersonGroupBean bean)
    {
        return bean==null?null:loadByPrimaryKey(bean.getId());
    }

    //1.2.2
    @Override
    public PersonGroupBean loadByPrimaryKeyChecked(PersonGroupBean bean) throws ObjectRetrievalException
    {
        if(null == bean)
            throw new NullPointerException();
        return loadByPrimaryKeyChecked(bean.getId());
    }
    
    //1.3
    @Override
    public PersonGroupBean loadByPrimaryKey(Object ...keys){
        try{
            return loadByPrimaryKeyChecked(keys);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    
    //1.3.2
    @Override
    public PersonGroupBean loadByPrimaryKeyChecked(Object ...keys) throws ObjectRetrievalException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1)
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
          return loadByPrimaryKeyChecked((Integer)keys[0]);
    }

    //1.4 override IPersonGroupManager
    @Override 
    public boolean existsPrimaryKey(Integer id)
    {
        try{
            return nativeManager.existsPrimaryKey(id);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //1.6
    @Override
    public boolean existsByPrimaryKey(PersonGroupBean bean)
    {
        return null == bean ? false : existsPrimaryKey(bean.getId());
    }
    //1.7
    @Override
    public PersonGroupBean checkDuplicate(PersonGroupBean bean){
        if(null != bean)
            checkDuplicate(bean.getId());            
        return bean;   
    }
    //1.4.1 override IPersonGroupManager
    @Override 
    public Integer checkDuplicate(Integer id){
        try{
            return this.nativeManager.checkDuplicate(id);
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //1.8 override IPersonGroupManager
    @Override 
    public java.util.List<PersonGroupBean> loadByPrimaryKey(int... keys){
        if(null == keys)return new java.util.ArrayList<PersonGroupBean>();
        java.util.ArrayList<PersonGroupBean> list = new java.util.ArrayList<PersonGroupBean>(keys.length);
        for(int i = 0 ;i< keys.length;++i){
            list.add(loadByPrimaryKey(keys[i]));
        }
        return list;
    }
    //1.9 override IPersonGroupManager
    @Override 
    public java.util.List<PersonGroupBean> loadByPrimaryKey(java.util.Collection<Integer> keys){
        if(null == keys )return new java.util.ArrayList<PersonGroupBean>();
        java.util.ArrayList<PersonGroupBean> list = new java.util.ArrayList<PersonGroupBean>(keys.size());
        if(keys instanceof java.util.List){
            for(Integer key: keys){
                list.add(loadByPrimaryKey(key));
            }
        }else{
            PersonGroupBean bean;
            for(Integer key: keys){
                if(null != (bean = loadByPrimaryKey(key)))
                    list.add(bean);
            }
        }
        return list;
    }
    //2 override IPersonGroupManager
    @Override 
    public int deleteByPrimaryKey(Integer id)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(id);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //2
    @Override
    public int delete(PersonGroupBean bean){
        try
        {
            return nativeManager.delete(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }   
    }
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys){
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        return deleteByPrimaryKey((Integer)keys[0]);
    }
    //2.2 override IPersonGroupManager
    @Override 
    public int deleteByPrimaryKey(int... keys){
        if(null == keys)return 0;
        int count = 0;
        for(int key:keys){
            count += deleteByPrimaryKey(key);
        }
        return count;
    }
    //2.3 override IPersonGroupManager
    @Override 
    public int deleteByPrimaryKey(java.util.Collection<Integer> keys){
        if(null == keys)return 0;
        int count = 0;
        for(Integer key :keys){
            count += deleteByPrimaryKey(key);
        }
        return count;
    }
    //2.4 override IPersonGroupManager
    @Override 
    public int delete(PersonGroupBean... beans){
        if(null == beans)return 0;
        int count = 0;
        for(PersonGroupBean bean :beans){
            count += delete(bean);
        }
        return count;
    }
    //2.5 override IPersonGroupManager
    @Override 
    public int delete(java.util.Collection<PersonGroupBean> beans){
        if(null == beans)return 0;
        int count = 0;
        for(PersonGroupBean bean :beans){
            count += delete(bean);
        }
        return count;
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] importedBeanTypes = new Class<?>[]{JunctionPersonGroupBean.class};

    /**
     * @see #getImportedBeansAsList(PersonGroupBean,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T[] getImportedBeans(PersonGroupBean bean, int ikIndex){
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(importedBeanTypes[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID} -> {@link JunctionPersonGroupBean}</li>
     * </ul>
     * @param bean the {@link PersonGroupBean} object to use
     * @param ikIndex valid values: {@link Constant#FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> java.util.List<T> getImportedBeansAsList(PersonGroupBean bean,int ikIndex){
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID:
            return (java.util.List<T>)this.getJunctionPersonGroupBeansByGroupIdAsList(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID} -> {@link JunctionPersonGroupBean}</li>
     * </ul>
     * @param bean the {@link PersonGroupBean} object to use
     * @param importedBeans the FlJunctionPersonGroupBean array to associate to the {@link PersonGroupBean}
     * @param ikIndex valid values: {@link Constant#FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID}
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T[] setImportedBeans(PersonGroupBean bean,T[] importedBeans,int ikIndex){
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID:
            return (T[])setJunctionPersonGroupBeansByGroupId(bean,(JunctionPersonGroupBean[])importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID} -> {@link JunctionPersonGroupBean}</li>
     * </ul>
     * @param bean the {@link PersonGroupBean} object to use
     * @param importedBeans the <T> object to associate to the {@link PersonGroupBean}
     * @param ikIndex valid values: {@link Constant#FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID}
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>,C extends java.util.Collection<T>> C setImportedBeans(PersonGroupBean bean,C importedBeans,int ikIndex){
        switch(ikIndex){
        case FL_PERSON_GROUP_IK_FL_JUNCTION_PERSON_GROUP_GROUP_ID:
            return (C)setJunctionPersonGroupBeansByGroupId(bean,(java.util.Collection<JunctionPersonGroupBean>)importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    //3.1 GET IMPORTED override IPersonGroupManager
    @Override 
    public JunctionPersonGroupBean[] getJunctionPersonGroupBeansByGroupId(PersonGroupBean bean)
    {
        return this.getJunctionPersonGroupBeansByGroupIdAsList(bean).toArray(new JunctionPersonGroupBean[0]);
    }
    //3.1.2 GET IMPORTED override IPersonGroupManager
    @Override
    public JunctionPersonGroupBean[] getJunctionPersonGroupBeansByGroupId(Integer persongroupId)
    {
        PersonGroupBean bean = new PersonGroupBean();
        bean.setId(persongroupId);
        return getJunctionPersonGroupBeansByGroupId(bean);
    }
    //3.2 GET IMPORTED override IPersonGroupManager
    @Override 
    public java.util.List<JunctionPersonGroupBean> getJunctionPersonGroupBeansByGroupIdAsList(PersonGroupBean bean)
    {
        try {
            return this.dbConverter.getJunctionPersonGroupBeanConverter().fromRight(nativeManager.getJunctionPersonGroupBeansByGroupIdAsList( this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //3.2.2 GET IMPORTED override IPersonGroupManager
    @Override
    public java.util.List<JunctionPersonGroupBean> getJunctionPersonGroupBeansByGroupIdAsList(Integer persongroupId)
    {
         PersonGroupBean bean = new PersonGroupBean();
        bean.setId(persongroupId);
        return getJunctionPersonGroupBeansByGroupIdAsList(bean);
    }
    //3.2.3 DELETE IMPORTED override IPersonGroupManager
    @Override
    public int deleteJunctionPersonGroupBeansByGroupId(Integer persongroupId)
    {
        java.util.List<JunctionPersonGroupBean> list =getJunctionPersonGroupBeansByGroupIdAsList(persongroupId);
        return JunctionPersonGroupManager.getInstance().delete(list);
    }
    //3.3 SET IMPORTED override IPersonGroupManager
    @Override 
    public JunctionPersonGroupBean[] setJunctionPersonGroupBeansByGroupId(PersonGroupBean bean , JunctionPersonGroupBean[] importedBeans)
    {
        if(null != importedBeans){
            for( JunctionPersonGroupBean importBean : importedBeans ){
                JunctionPersonGroupManager.getInstance().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED override IPersonGroupManager
    @Override 
    public <C extends java.util.Collection<JunctionPersonGroupBean>> C setJunctionPersonGroupBeansByGroupId(PersonGroupBean bean , C importedBeans)
    {
        if(null != importedBeans){
            for( JunctionPersonGroupBean importBean : importedBeans ){
                JunctionPersonGroupManager.getInstance().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }



    //3.5 SYNC SAVE override IPersonGroupManager
    @Override  
    public PersonGroupBean save(PersonGroupBean bean
        
        , JunctionPersonGroupBean[] impJunctionpersongroupByGroupId )
    {
        if(null == bean) return null;
        bean = this.save( bean );
        this.setJunctionPersonGroupBeansByGroupId(bean,impJunctionpersongroupByGroupId);
        JunctionPersonGroupManager.getInstance().save( impJunctionpersongroupByGroupId );
        return bean;
    } 

    //3.6 SYNC SAVE AS TRANSACTION override IPersonGroupManager
    @Override 
    public PersonGroupBean saveAsTransaction(final PersonGroupBean bean
        
        ,final JunctionPersonGroupBean[] impJunctionpersongroupByGroupId )
    {
        return this.runAsTransaction(new Callable<PersonGroupBean>(){
            @Override
            public PersonGroupBean call() throws Exception {
                return save(bean , impJunctionpersongroupByGroupId );
            }});
    }
    //3.7 SYNC SAVE override IPersonGroupManager
    @Override 
    public PersonGroupBean save(PersonGroupBean bean
        
        , java.util.Collection<JunctionPersonGroupBean> impJunctionpersongroupByGroupId )
    {
        if(null == bean) return null;
        bean = this.save( bean );
        this.setJunctionPersonGroupBeansByGroupId(bean,impJunctionpersongroupByGroupId);
        JunctionPersonGroupManager.getInstance().save( impJunctionpersongroupByGroupId );
        return bean;
    }   

    //3.8 SYNC SAVE AS TRANSACTION override IPersonGroupManager
    @Override 
    public PersonGroupBean saveAsTransaction(final PersonGroupBean bean
        
        ,final  java.util.Collection<JunctionPersonGroupBean> impJunctionpersongroupByGroupId )
    {
        return this.runAsTransaction(new Callable<PersonGroupBean>(){
            @Override
            public PersonGroupBean call() throws Exception {
                return save(bean , impJunctionpersongroupByGroupId );
            }});
    }
     /**
     * Save the {@link PersonGroupBean} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link PersonGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(PersonGroupBean , JunctionPersonGroupBean[] )}
     * @return the inserted or updated {@link PersonGroupBean} bean
     */
    //3.9 SYNC SAVE 
    @Override
    public PersonGroupBean save(PersonGroupBean bean,Object ...args) 
    {
        if(null == args)
            return save(bean);
        if(args.length > 1)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 1");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof JunctionPersonGroupBean[])){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:JunctionPersonGroupBean[]");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(JunctionPersonGroupBean[])args[0]);
    } 

    /**
     * Save the {@link PersonGroupBean} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link PersonGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(PersonGroupBean , java.util.Collection )}
     * @return the inserted or updated {@link PersonGroupBean} bean
     */
    //3.10 SYNC SAVE 
    @SuppressWarnings("unchecked")
    @Override
    public PersonGroupBean saveCollection(PersonGroupBean bean,Object ...inputs)
    {
        if(null == inputs)
            return save(bean);
        if(inputs.length > 1)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 1");
        Object[] args = new Object[1];
        System.arraycopy(inputs,0,args,0,1);
        if( args.length > 0 && null != args[0] && !(args[0] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:java.util.Collection<JunctionPersonGroupBean>");
        }
        return save(bean,null == args[0]?null:(java.util.Collection<JunctionPersonGroupBean>)args[0]);
    }

     

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////

    //11
    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    protected PersonGroupBean insert(PersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //14
    @Override
    protected PersonGroupBean update(PersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public PersonGroupBean loadUniqueUsingTemplate(PersonGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }
    //18-1
    @Override
    public PersonGroupBean loadUniqueUsingTemplateChecked(PersonGroupBean bean) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e)
        {
            throw new ObjectRetrievalException();
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }
    //20-5
    @Override
    public int loadUsingTemplate(PersonGroupBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<PersonGroupBean> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(PersonGroupBean bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    //25
    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //20
    @Override
    public int countUsingTemplate(PersonGroupBean bean, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    /**
     * @return {@link WrapListener} instance
     */
    //35
    @Override
    public TableListener<PersonGroupBean> registerListener(TableListener<PersonGroupBean> listener)
    {
        WrapListener wrapListener;
        if(listener instanceof WrapListener){
            wrapListener = (WrapListener)listener;
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }else{
            wrapListener = new WrapListener(listener);
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }
        return wrapListener;
    }

    //36
    @Override
    public void unregisterListener(TableListener<PersonGroupBean> listener)
    {
        if(listener instanceof WrapListener)
            this.nativeManager.unregisterListener(((WrapListener)listener).nativeListener);
        throw new IllegalArgumentException("invalid listener type: " + WrapListener.class.getName() +" required");
    }
    
    //37
    @Override
    public void fire(TableListener.Event event, PersonGroupBean bean){
        fire(event.ordinal(), bean);
    }
    
    //37-1
    @Override
    public void fire(int event, PersonGroupBean bean){
        try{
            this.nativeManager.fire(event, this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * bind foreign key listener to foreign table for DELETE RULE
     */
    //37-2
    void bindForeignKeyListenerForDeleteRule(){
        this.nativeManager.bindForeignKeyListenerForDeleteRule();
    }
    /**
     * unbind foreign key listener from all of foreign tables <br>
     * @see #bindForeignKeyListenerForDeleteRule()
     */
    //37-3
    void unbindForeignKeyListenerForDeleteRule(){
        this.nativeManager.unbindForeignKeyListenerForDeleteRule();

    }
    /**
     * wrap {@code TableListener<PersonGroupBean>} as native listener
     * @author guyadong
     *
     */
    public class WrapListener implements TableListener<PersonGroupBean>{
        private final TableListener<PersonGroupBean> listener;
        private final net.gdface.facelog.dborm.TableListener<FlPersonGroupBean> nativeListener;
        private WrapListener(final TableListener<PersonGroupBean> listener) {
            if(null == listener)
                throw new NullPointerException();
            this.listener = listener;
            this.nativeListener = new net.gdface.facelog.dborm.TableListener<FlPersonGroupBean> (){

                @Override
                public void beforeInsert(FlPersonGroupBean bean) throws DAOException {
                    listener.beforeInsert(PersonGroupManager.this.beanConverter.fromRight(bean));                
                }

                @Override
                public void afterInsert(FlPersonGroupBean bean) throws DAOException {
                    listener.afterInsert(PersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeUpdate(FlPersonGroupBean bean) throws DAOException {
                    listener.beforeUpdate(PersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterUpdate(FlPersonGroupBean bean) throws DAOException {
                    listener.afterUpdate(PersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeDelete(FlPersonGroupBean bean) throws DAOException {
                    listener.beforeDelete(PersonGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterDelete(FlPersonGroupBean bean) throws DAOException {
                    listener.afterDelete(PersonGroupManager.this.beanConverter.fromRight(bean));
                }};
        }

        public void beforeInsert(PersonGroupBean bean) {
            listener.beforeInsert(bean);
        }

        public void afterInsert(PersonGroupBean bean) {
            listener.afterInsert(bean);
        }

        public void beforeUpdate(PersonGroupBean bean) {
            listener.beforeUpdate(bean);
        }

        public void afterUpdate(PersonGroupBean bean) {
            listener.afterUpdate(bean);
        }

        public void beforeDelete(PersonGroupBean bean) {
            listener.beforeDelete(bean);
        }

        public void afterDelete(PersonGroupBean bean) {
            listener.afterDelete(bean);
        }        
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //43
    @Override
    public boolean isPrimaryKey(String column){
        return this.nativeManager.isPrimaryKey(column);
    }
    
    @Override
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<PersonGroupBean> action){
        try{
            return this.nativeManager.loadBySqlForAction(sql,argList,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    private net.gdface.facelog.dborm.TableManager.Action<FlPersonGroupBean> toNative(final Action<PersonGroupBean> action){
        if(null == action)
            throw new NullPointerException();
        return new net.gdface.facelog.dborm.TableManager.Action<FlPersonGroupBean>(){

            @Override
            public void call(FlPersonGroupBean bean) {
                action.call(PersonGroupManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public FlPersonGroupBean getBean() {
                return  PersonGroupManager.this.beanConverter.toRight(action.getBean());
            }};
    }
    
    //45 override IPersonGroupManager
    @Override 
    public java.util.List<Integer> toPrimaryKeyList(PersonGroupBean... array){        
        if(null == array)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(array.length);
        for(PersonGroupBean bean:array){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
    //46 override IPersonGroupManager
    @Override 
    public java.util.List<Integer> toPrimaryKeyList(java.util.Collection<PersonGroupBean> collection){        
        if(null == collection)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(collection.size());
        for(PersonGroupBean bean:collection){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
}
