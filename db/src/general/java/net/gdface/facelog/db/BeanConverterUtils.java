// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// template: bean.converter.utils.java.vm
// ______________________________________________________

package net.gdface.facelog.db;
import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.Hashtable;
import net.gdface.facelog.db.IBeanConverter;

import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.LogLightBean;

/**
 * generic type converter classes of {@link IBeanConverter} implementation for fl_device,fl_face,fl_feature,fl_image,fl_log,fl_person,fl_store,fl_log_light<br>
 * @author guyadong
 *
 */
public class BeanConverterUtils implements Constant {
    private BeanConverterUtils(){}
    /**
     * 返回buffer中所有字节(position~limit),不改变buffer状态
     * @param buffer
     * @return
     */
    private static final byte[] getBytesInBuffer(ByteBuffer buffer){
        int pos = buffer.position();
        try{
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);
            return bytes;
        }finally{
            buffer.position(pos);
        }
    }
    /**
     * {@code obj}转为{@code type}指定的类型
     * @param type
     * @param obj
     * @return
     */
    @SuppressWarnings({ "unchecked" })
    private static final <T> T convert(Class<T> type,Object obj){
        try{
            if(null ==obj && type.isPrimitive())
                throw new IllegalArgumentException(String.format("can't convert null to primitive type %s",type.getSimpleName()));
            return (T) obj;
        }catch(ClassCastException ce){
            // Long -> Date
            if(java.util.Date.class.isAssignableFrom(type) && (obj instanceof Long)){
                try {
                    // call constructor,such as  java.util.Date#Date(long), java.sql.Time.Time(long)
                    return type.getConstructor(long.class).newInstance(obj);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            // Date -> Long,long
            if( (long.class == type || Long.class == type) && obj instanceof java.util.Date){
                	Long time = ((java.util.Date)obj).getTime();
                    return (T)time;
            }
            // byte[] -> ByteBuffer
            if(ByteBuffer.class == type && obj instanceof byte[]){
                return (T) ByteBuffer.wrap((byte[]) obj);
            }
            // ByteBuffer -> byte[]
            if(byte[].class == type && obj instanceof ByteBuffer){
                return (T) getBytesInBuffer((ByteBuffer) obj);
            }
            throw new IllegalArgumentException(String.format("can't convert %s to %s",obj.getClass().getSimpleName(),type.getSimpleName()));
        }
    }
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter for {@link DeviceBean} to N_DEVICE <br>
     * @author guyadong
     *
     */
    public static class DeviceBeanConverter<N_DEVICE> extends IBeanConverter.AbstractHandle<DeviceBean,N_DEVICE>{
        final Map<String,Method> methods = new Hashtable<String,Method>();
        /** usage: <pre>new DeviceBeanConverter&lt;Model&gt;(){};</pre> */
        public DeviceBeanConverter(){
            super();
            init();
        }
        public DeviceBeanConverter (Class<DeviceBean> leftClass, Class<N_DEVICE> rightClass){
            super(leftClass,rightClass);
            init();
        }
        private void init(){
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("setNew",rightType.getMethod("setNew",boolean.class));
                methods.put("getModified",rightType.getMethod("getModified"));
                methods.put("setModified",rightType.getMethod("setModified",long.class));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
            try{         
                methods.put("getId",rightType.getMethod("getId"));
                try{
                    methods.put("setId",rightType.getMethod("setId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setId",rightType.getMethod("setId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getName",rightType.getMethod("getName"));
                methods.put("setName",rightType.getMethod("setName",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getGroupId",rightType.getMethod("getGroupId"));
                try{
                    methods.put("setGroupId",rightType.getMethod("setGroupId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setGroupId",rightType.getMethod("setGroupId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getVersion",rightType.getMethod("getVersion"));
                methods.put("setVersion",rightType.getMethod("setVersion",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getSerialNo",rightType.getMethod("getSerialNo"));
                methods.put("setSerialNo",rightType.getMethod("setSerialNo",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getMac",rightType.getMethod("getMac"));
                methods.put("setMac",rightType.getMethod("setMac",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getCreateTime",rightType.getMethod("getCreateTime"));
                try{
                    methods.put("setCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setCreateTime",rightType.getMethod("setCreateTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setCreateTime",rightType.getMethod("setCreateTime",Long.class));
                    }
                }
            }catch(Exception e){}
            try{         
                methods.put("getUpdateTime",rightType.getMethod("getUpdateTime"));
                try{
                    methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",Long.class));
                    }
                }
            }catch(Exception e){}
        }
        @Override
        protected void _fromRight(DeviceBean left, N_DEVICE right) {
            try{
                Method getterMethod;
                long modified = (long)methods.get("getModified").invoke(right);
                if( (0L !=  (modified & FL_DEVICE_ID_ID_MASK)) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_DEVICE_ID_NAME_MASK)) && (null != (getterMethod = methods.get("getName"))))
                    left.setName(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_DEVICE_ID_GROUP_ID_MASK)) && (null != (getterMethod = methods.get("getGroupId"))))
                    left.setGroupId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_DEVICE_ID_VERSION_MASK)) && (null != (getterMethod = methods.get("getVersion"))))
                    left.setVersion(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_DEVICE_ID_SERIAL_NO_MASK)) && (null != (getterMethod = methods.get("getSerialNo"))))
                    left.setSerialNo(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_DEVICE_ID_MAC_MASK)) && (null != (getterMethod = methods.get("getMac"))))
                    left.setMac(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_DEVICE_ID_CREATE_TIME_MASK)) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_DEVICE_ID_UPDATE_TIME_MASK)) && (null != (getterMethod = methods.get("getUpdateTime"))))
                    left.setUpdateTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((boolean)methods.get("isNew").invoke(right));
                left.setModified(modified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(DeviceBean left, N_DEVICE right) {
            try{
                Method setterMethod;
                if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getId()));
                if(null != (setterMethod = methods.get("setName")) && left.checkNameInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getName()));
                if(null != (setterMethod = methods.get("setGroupId")) && left.checkGroupIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getGroupId()));
                if(null != (setterMethod = methods.get("setVersion")) && left.checkVersionInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getVersion()));
                if(null != (setterMethod = methods.get("setSerialNo")) && left.checkSerialNoInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getSerialNo()));
                if(null != (setterMethod = methods.get("setMac")) && left.checkMacInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getMac()));
// IGNORE field fl_device.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized())
//                     setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getCreateTime()));
// IGNORE field fl_device.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(null != (setterMethod = methods.get("setUpdateTime")) && left.checkUpdateTimeInitialized())
//                     setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getUpdateTime()));
                methods.get("setNew").invoke(right,left.isNew());
                methods.get("setModified").invoke(right,left.getModified());
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }}; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter for {@link FaceBean} to N_FACE <br>
     * @author guyadong
     *
     */
    public static class FaceBeanConverter<N_FACE> extends IBeanConverter.AbstractHandle<FaceBean,N_FACE>{
        final Map<String,Method> methods = new Hashtable<String,Method>();
        /** usage: <pre>new FaceBeanConverter&lt;Model&gt;(){};</pre> */
        public FaceBeanConverter(){
            super();
            init();
        }
        public FaceBeanConverter (Class<FaceBean> leftClass, Class<N_FACE> rightClass){
            super(leftClass,rightClass);
            init();
        }
        private void init(){
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("setNew",rightType.getMethod("setNew",boolean.class));
                methods.put("getModified",rightType.getMethod("getModified"));
                methods.put("setModified",rightType.getMethod("setModified",long.class));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
            try{         
                methods.put("getId",rightType.getMethod("getId"));
                try{
                    methods.put("setId",rightType.getMethod("setId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setId",rightType.getMethod("setId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getImageMd5",rightType.getMethod("getImageMd5"));
                methods.put("setImageMd5",rightType.getMethod("setImageMd5",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getFaceLeft",rightType.getMethod("getFaceLeft"));
                try{
                    methods.put("setFaceLeft",rightType.getMethod("setFaceLeft",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setFaceLeft",rightType.getMethod("setFaceLeft",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getFaceTop",rightType.getMethod("getFaceTop"));
                try{
                    methods.put("setFaceTop",rightType.getMethod("setFaceTop",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setFaceTop",rightType.getMethod("setFaceTop",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getFaceWidth",rightType.getMethod("getFaceWidth"));
                try{
                    methods.put("setFaceWidth",rightType.getMethod("setFaceWidth",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setFaceWidth",rightType.getMethod("setFaceWidth",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getFaceHeight",rightType.getMethod("getFaceHeight"));
                try{
                    methods.put("setFaceHeight",rightType.getMethod("setFaceHeight",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setFaceHeight",rightType.getMethod("setFaceHeight",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getEyeLeftx",rightType.getMethod("getEyeLeftx"));
                try{
                    methods.put("setEyeLeftx",rightType.getMethod("setEyeLeftx",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setEyeLeftx",rightType.getMethod("setEyeLeftx",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getEyeLefty",rightType.getMethod("getEyeLefty"));
                try{
                    methods.put("setEyeLefty",rightType.getMethod("setEyeLefty",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setEyeLefty",rightType.getMethod("setEyeLefty",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getEyeRightx",rightType.getMethod("getEyeRightx"));
                try{
                    methods.put("setEyeRightx",rightType.getMethod("setEyeRightx",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setEyeRightx",rightType.getMethod("setEyeRightx",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getEyeRighty",rightType.getMethod("getEyeRighty"));
                try{
                    methods.put("setEyeRighty",rightType.getMethod("setEyeRighty",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setEyeRighty",rightType.getMethod("setEyeRighty",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getMouthX",rightType.getMethod("getMouthX"));
                try{
                    methods.put("setMouthX",rightType.getMethod("setMouthX",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setMouthX",rightType.getMethod("setMouthX",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getMouthY",rightType.getMethod("getMouthY"));
                try{
                    methods.put("setMouthY",rightType.getMethod("setMouthY",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setMouthY",rightType.getMethod("setMouthY",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getNoseX",rightType.getMethod("getNoseX"));
                try{
                    methods.put("setNoseX",rightType.getMethod("setNoseX",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setNoseX",rightType.getMethod("setNoseX",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getNoseY",rightType.getMethod("getNoseY"));
                try{
                    methods.put("setNoseY",rightType.getMethod("setNoseY",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setNoseY",rightType.getMethod("setNoseY",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getAngleYaw",rightType.getMethod("getAngleYaw"));
                try{
                    methods.put("setAngleYaw",rightType.getMethod("setAngleYaw",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setAngleYaw",rightType.getMethod("setAngleYaw",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getAnglePitch",rightType.getMethod("getAnglePitch"));
                try{
                    methods.put("setAnglePitch",rightType.getMethod("setAnglePitch",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setAnglePitch",rightType.getMethod("setAnglePitch",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getAngleRoll",rightType.getMethod("getAngleRoll"));
                try{
                    methods.put("setAngleRoll",rightType.getMethod("setAngleRoll",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setAngleRoll",rightType.getMethod("setAngleRoll",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getExtInfo",rightType.getMethod("getExtInfo"));
                methods.put("setExtInfo",rightType.getMethod("setExtInfo",java.nio.ByteBuffer.class));
            }catch(Exception e){}
            try{         
                methods.put("getFeatureMd5",rightType.getMethod("getFeatureMd5"));
                methods.put("setFeatureMd5",rightType.getMethod("setFeatureMd5",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getCreateTime",rightType.getMethod("getCreateTime"));
                try{
                    methods.put("setCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setCreateTime",rightType.getMethod("setCreateTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setCreateTime",rightType.getMethod("setCreateTime",Long.class));
                    }
                }
            }catch(Exception e){}
        }
        @Override
        protected void _fromRight(FaceBean left, N_FACE right) {
            try{
                Method getterMethod;
                long modified = (long)methods.get("getModified").invoke(right);
                if( (0L !=  (modified & FL_FACE_ID_ID_MASK)) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_IMAGE_MD5_MASK)) && (null != (getterMethod = methods.get("getImageMd5"))))
                    left.setImageMd5(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_FACE_LEFT_MASK)) && (null != (getterMethod = methods.get("getFaceLeft"))))
                    left.setFaceLeft(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_FACE_TOP_MASK)) && (null != (getterMethod = methods.get("getFaceTop"))))
                    left.setFaceTop(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_FACE_WIDTH_MASK)) && (null != (getterMethod = methods.get("getFaceWidth"))))
                    left.setFaceWidth(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_FACE_HEIGHT_MASK)) && (null != (getterMethod = methods.get("getFaceHeight"))))
                    left.setFaceHeight(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_EYE_LEFTX_MASK)) && (null != (getterMethod = methods.get("getEyeLeftx"))))
                    left.setEyeLeftx(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_EYE_LEFTY_MASK)) && (null != (getterMethod = methods.get("getEyeLefty"))))
                    left.setEyeLefty(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_EYE_RIGHTX_MASK)) && (null != (getterMethod = methods.get("getEyeRightx"))))
                    left.setEyeRightx(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_EYE_RIGHTY_MASK)) && (null != (getterMethod = methods.get("getEyeRighty"))))
                    left.setEyeRighty(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_MOUTH_X_MASK)) && (null != (getterMethod = methods.get("getMouthX"))))
                    left.setMouthX(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_MOUTH_Y_MASK)) && (null != (getterMethod = methods.get("getMouthY"))))
                    left.setMouthY(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_NOSE_X_MASK)) && (null != (getterMethod = methods.get("getNoseX"))))
                    left.setNoseX(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_NOSE_Y_MASK)) && (null != (getterMethod = methods.get("getNoseY"))))
                    left.setNoseY(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_ANGLE_YAW_MASK)) && (null != (getterMethod = methods.get("getAngleYaw"))))
                    left.setAngleYaw(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_ANGLE_PITCH_MASK)) && (null != (getterMethod = methods.get("getAnglePitch"))))
                    left.setAnglePitch(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_ANGLE_ROLL_MASK)) && (null != (getterMethod = methods.get("getAngleRoll"))))
                    left.setAngleRoll(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_EXT_INFO_MASK)) && (null != (getterMethod = methods.get("getExtInfo"))))
                    left.setExtInfo(convert(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_FEATURE_MD5_MASK)) && (null != (getterMethod = methods.get("getFeatureMd5"))))
                    left.setFeatureMd5(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FACE_ID_CREATE_TIME_MASK)) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((boolean)methods.get("isNew").invoke(right));
                left.setModified(modified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(FaceBean left, N_FACE right) {
            try{
                Method setterMethod;
                if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getId()));
                if(null != (setterMethod = methods.get("setImageMd5")) && left.checkImageMd5Initialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getImageMd5()));
                if(null != (setterMethod = methods.get("setFaceLeft")) && left.checkFaceLeftInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getFaceLeft()));
                if(null != (setterMethod = methods.get("setFaceTop")) && left.checkFaceTopInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getFaceTop()));
                if(null != (setterMethod = methods.get("setFaceWidth")) && left.checkFaceWidthInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getFaceWidth()));
                if(null != (setterMethod = methods.get("setFaceHeight")) && left.checkFaceHeightInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getFaceHeight()));
                if(null != (setterMethod = methods.get("setEyeLeftx")) && left.checkEyeLeftxInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getEyeLeftx()));
                if(null != (setterMethod = methods.get("setEyeLefty")) && left.checkEyeLeftyInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getEyeLefty()));
                if(null != (setterMethod = methods.get("setEyeRightx")) && left.checkEyeRightxInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getEyeRightx()));
                if(null != (setterMethod = methods.get("setEyeRighty")) && left.checkEyeRightyInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getEyeRighty()));
                if(null != (setterMethod = methods.get("setMouthX")) && left.checkMouthXInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getMouthX()));
                if(null != (setterMethod = methods.get("setMouthY")) && left.checkMouthYInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getMouthY()));
                if(null != (setterMethod = methods.get("setNoseX")) && left.checkNoseXInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getNoseX()));
                if(null != (setterMethod = methods.get("setNoseY")) && left.checkNoseYInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getNoseY()));
                if(null != (setterMethod = methods.get("setAngleYaw")) && left.checkAngleYawInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getAngleYaw()));
                if(null != (setterMethod = methods.get("setAnglePitch")) && left.checkAnglePitchInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getAnglePitch()));
                if(null != (setterMethod = methods.get("setAngleRoll")) && left.checkAngleRollInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getAngleRoll()));
                if(null != (setterMethod = methods.get("setExtInfo")) && left.checkExtInfoInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getExtInfo()));
                if(null != (setterMethod = methods.get("setFeatureMd5")) && left.checkFeatureMd5Initialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getFeatureMd5()));
// IGNORE field fl_face.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized())
//                     setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getCreateTime()));
                methods.get("setNew").invoke(right,left.isNew());
                methods.get("setModified").invoke(right,left.getModified());
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }}; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter for {@link FeatureBean} to N_FEATURE <br>
     * @author guyadong
     *
     */
    public static class FeatureBeanConverter<N_FEATURE> extends IBeanConverter.AbstractHandle<FeatureBean,N_FEATURE>{
        final Map<String,Method> methods = new Hashtable<String,Method>();
        /** usage: <pre>new FeatureBeanConverter&lt;Model&gt;(){};</pre> */
        public FeatureBeanConverter(){
            super();
            init();
        }
        public FeatureBeanConverter (Class<FeatureBean> leftClass, Class<N_FEATURE> rightClass){
            super(leftClass,rightClass);
            init();
        }
        private void init(){
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("setNew",rightType.getMethod("setNew",boolean.class));
                methods.put("getModified",rightType.getMethod("getModified"));
                methods.put("setModified",rightType.getMethod("setModified",long.class));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
            try{         
                methods.put("getMd5",rightType.getMethod("getMd5"));
                methods.put("setMd5",rightType.getMethod("setMd5",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getPersonId",rightType.getMethod("getPersonId"));
                try{
                    methods.put("setPersonId",rightType.getMethod("setPersonId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setPersonId",rightType.getMethod("setPersonId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getFeature",rightType.getMethod("getFeature"));
                methods.put("setFeature",rightType.getMethod("setFeature",java.nio.ByteBuffer.class));
            }catch(Exception e){}
            try{         
                methods.put("getUpdateTime",rightType.getMethod("getUpdateTime"));
                try{
                    methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",Long.class));
                    }
                }
            }catch(Exception e){}
        }
        @Override
        protected void _fromRight(FeatureBean left, N_FEATURE right) {
            try{
                Method getterMethod;
                long modified = (long)methods.get("getModified").invoke(right);
                if( (0L !=  (modified & FL_FEATURE_ID_MD5_MASK)) && (null != (getterMethod = methods.get("getMd5"))))
                    left.setMd5(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FEATURE_ID_PERSON_ID_MASK)) && (null != (getterMethod = methods.get("getPersonId"))))
                    left.setPersonId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FEATURE_ID_FEATURE_MASK)) && (null != (getterMethod = methods.get("getFeature"))))
                    left.setFeature(convert(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_FEATURE_ID_UPDATE_TIME_MASK)) && (null != (getterMethod = methods.get("getUpdateTime"))))
                    left.setUpdateTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((boolean)methods.get("isNew").invoke(right));
                left.setModified(modified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(FeatureBean left, N_FEATURE right) {
            try{
                Method setterMethod;
                if(null != (setterMethod = methods.get("setMd5")) && left.checkMd5Initialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getMd5()));
                if(null != (setterMethod = methods.get("setPersonId")) && left.checkPersonIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getPersonId()));
                if(null != (setterMethod = methods.get("setFeature")) && left.checkFeatureInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getFeature()));
// IGNORE field fl_feature.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(null != (setterMethod = methods.get("setUpdateTime")) && left.checkUpdateTimeInitialized())
//                     setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getUpdateTime()));
                methods.get("setNew").invoke(right,left.isNew());
                methods.get("setModified").invoke(right,left.getModified());
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }}; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter for {@link ImageBean} to N_IMAGE <br>
     * @author guyadong
     *
     */
    public static class ImageBeanConverter<N_IMAGE> extends IBeanConverter.AbstractHandle<ImageBean,N_IMAGE>{
        final Map<String,Method> methods = new Hashtable<String,Method>();
        /** usage: <pre>new ImageBeanConverter&lt;Model&gt;(){};</pre> */
        public ImageBeanConverter(){
            super();
            init();
        }
        public ImageBeanConverter (Class<ImageBean> leftClass, Class<N_IMAGE> rightClass){
            super(leftClass,rightClass);
            init();
        }
        private void init(){
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("setNew",rightType.getMethod("setNew",boolean.class));
                methods.put("getModified",rightType.getMethod("getModified"));
                methods.put("setModified",rightType.getMethod("setModified",long.class));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
            try{         
                methods.put("getMd5",rightType.getMethod("getMd5"));
                methods.put("setMd5",rightType.getMethod("setMd5",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getFormat",rightType.getMethod("getFormat"));
                methods.put("setFormat",rightType.getMethod("setFormat",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getWidth",rightType.getMethod("getWidth"));
                try{
                    methods.put("setWidth",rightType.getMethod("setWidth",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setWidth",rightType.getMethod("setWidth",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getHeight",rightType.getMethod("getHeight"));
                try{
                    methods.put("setHeight",rightType.getMethod("setHeight",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setHeight",rightType.getMethod("setHeight",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getDepth",rightType.getMethod("getDepth"));
                try{
                    methods.put("setDepth",rightType.getMethod("setDepth",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setDepth",rightType.getMethod("setDepth",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getFaceNum",rightType.getMethod("getFaceNum"));
                try{
                    methods.put("setFaceNum",rightType.getMethod("setFaceNum",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setFaceNum",rightType.getMethod("setFaceNum",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getThumbMd5",rightType.getMethod("getThumbMd5"));
                methods.put("setThumbMd5",rightType.getMethod("setThumbMd5",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getDeviceId",rightType.getMethod("getDeviceId"));
                try{
                    methods.put("setDeviceId",rightType.getMethod("setDeviceId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setDeviceId",rightType.getMethod("setDeviceId",int.class));
                }
            }catch(Exception e){}
        }
        @Override
        protected void _fromRight(ImageBean left, N_IMAGE right) {
            try{
                Method getterMethod;
                long modified = (long)methods.get("getModified").invoke(right);
                if( (0L !=  (modified & FL_IMAGE_ID_MD5_MASK)) && (null != (getterMethod = methods.get("getMd5"))))
                    left.setMd5(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_IMAGE_ID_FORMAT_MASK)) && (null != (getterMethod = methods.get("getFormat"))))
                    left.setFormat(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_IMAGE_ID_WIDTH_MASK)) && (null != (getterMethod = methods.get("getWidth"))))
                    left.setWidth(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_IMAGE_ID_HEIGHT_MASK)) && (null != (getterMethod = methods.get("getHeight"))))
                    left.setHeight(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_IMAGE_ID_DEPTH_MASK)) && (null != (getterMethod = methods.get("getDepth"))))
                    left.setDepth(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_IMAGE_ID_FACE_NUM_MASK)) && (null != (getterMethod = methods.get("getFaceNum"))))
                    left.setFaceNum(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_IMAGE_ID_THUMB_MD5_MASK)) && (null != (getterMethod = methods.get("getThumbMd5"))))
                    left.setThumbMd5(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_IMAGE_ID_DEVICE_ID_MASK)) && (null != (getterMethod = methods.get("getDeviceId"))))
                    left.setDeviceId(convert(Integer.class,getterMethod.invoke(right)));
                left.isNew((boolean)methods.get("isNew").invoke(right));
                left.setModified(modified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(ImageBean left, N_IMAGE right) {
            try{
                Method setterMethod;
                if(null != (setterMethod = methods.get("setMd5")) && left.checkMd5Initialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getMd5()));
                if(null != (setterMethod = methods.get("setFormat")) && left.checkFormatInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getFormat()));
                if(null != (setterMethod = methods.get("setWidth")) && left.checkWidthInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getWidth()));
                if(null != (setterMethod = methods.get("setHeight")) && left.checkHeightInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getHeight()));
                if(null != (setterMethod = methods.get("setDepth")) && left.checkDepthInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getDepth()));
                if(null != (setterMethod = methods.get("setFaceNum")) && left.checkFaceNumInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getFaceNum()));
                if(null != (setterMethod = methods.get("setThumbMd5")) && left.checkThumbMd5Initialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getThumbMd5()));
                if(null != (setterMethod = methods.get("setDeviceId")) && left.checkDeviceIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getDeviceId()));
                methods.get("setNew").invoke(right,left.isNew());
                methods.get("setModified").invoke(right,left.getModified());
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }}; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter for {@link LogBean} to N_LOG <br>
     * @author guyadong
     *
     */
    public static class LogBeanConverter<N_LOG> extends IBeanConverter.AbstractHandle<LogBean,N_LOG>{
        final Map<String,Method> methods = new Hashtable<String,Method>();
        /** usage: <pre>new LogBeanConverter&lt;Model&gt;(){};</pre> */
        public LogBeanConverter(){
            super();
            init();
        }
        public LogBeanConverter (Class<LogBean> leftClass, Class<N_LOG> rightClass){
            super(leftClass,rightClass);
            init();
        }
        private void init(){
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("setNew",rightType.getMethod("setNew",boolean.class));
                methods.put("getModified",rightType.getMethod("getModified"));
                methods.put("setModified",rightType.getMethod("setModified",long.class));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
            try{         
                methods.put("getId",rightType.getMethod("getId"));
                try{
                    methods.put("setId",rightType.getMethod("setId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setId",rightType.getMethod("setId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getPersonId",rightType.getMethod("getPersonId"));
                try{
                    methods.put("setPersonId",rightType.getMethod("setPersonId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setPersonId",rightType.getMethod("setPersonId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getDeviceId",rightType.getMethod("getDeviceId"));
                try{
                    methods.put("setDeviceId",rightType.getMethod("setDeviceId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setDeviceId",rightType.getMethod("setDeviceId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getVerifyFeature",rightType.getMethod("getVerifyFeature"));
                methods.put("setVerifyFeature",rightType.getMethod("setVerifyFeature",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getCompareFace",rightType.getMethod("getCompareFace"));
                try{
                    methods.put("setCompareFace",rightType.getMethod("setCompareFace",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setCompareFace",rightType.getMethod("setCompareFace",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getSimilarty",rightType.getMethod("getSimilarty"));
                try{
                    methods.put("setSimilarty",rightType.getMethod("setSimilarty",Double.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setSimilarty",rightType.getMethod("setSimilarty",double.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getVerifyTime",rightType.getMethod("getVerifyTime"));
                try{
                    methods.put("setVerifyTime",rightType.getMethod("setVerifyTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setVerifyTime",rightType.getMethod("setVerifyTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setVerifyTime",rightType.getMethod("setVerifyTime",Long.class));
                    }
                }
            }catch(Exception e){}
            try{         
                methods.put("getCreateTime",rightType.getMethod("getCreateTime"));
                try{
                    methods.put("setCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setCreateTime",rightType.getMethod("setCreateTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setCreateTime",rightType.getMethod("setCreateTime",Long.class));
                    }
                }
            }catch(Exception e){}
        }
        @Override
        protected void _fromRight(LogBean left, N_LOG right) {
            try{
                Method getterMethod;
                long modified = (long)methods.get("getModified").invoke(right);
                if( (0L !=  (modified & FL_LOG_ID_ID_MASK)) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_ID_PERSON_ID_MASK)) && (null != (getterMethod = methods.get("getPersonId"))))
                    left.setPersonId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_ID_DEVICE_ID_MASK)) && (null != (getterMethod = methods.get("getDeviceId"))))
                    left.setDeviceId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_ID_VERIFY_FEATURE_MASK)) && (null != (getterMethod = methods.get("getVerifyFeature"))))
                    left.setVerifyFeature(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_ID_COMPARE_FACE_MASK)) && (null != (getterMethod = methods.get("getCompareFace"))))
                    left.setCompareFace(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_ID_SIMILARTY_MASK)) && (null != (getterMethod = methods.get("getSimilarty"))))
                    left.setSimilarty(convert(Double.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_ID_VERIFY_TIME_MASK)) && (null != (getterMethod = methods.get("getVerifyTime"))))
                    left.setVerifyTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_ID_CREATE_TIME_MASK)) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((boolean)methods.get("isNew").invoke(right));
                left.setModified(modified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(LogBean left, N_LOG right) {
            try{
                Method setterMethod;
                if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getId()));
                if(null != (setterMethod = methods.get("setPersonId")) && left.checkPersonIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getPersonId()));
                if(null != (setterMethod = methods.get("setDeviceId")) && left.checkDeviceIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getDeviceId()));
                if(null != (setterMethod = methods.get("setVerifyFeature")) && left.checkVerifyFeatureInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getVerifyFeature()));
                if(null != (setterMethod = methods.get("setCompareFace")) && left.checkCompareFaceInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getCompareFace()));
                if(null != (setterMethod = methods.get("setSimilarty")) && left.checkSimilartyInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getSimilarty()));
                if(null != (setterMethod = methods.get("setVerifyTime")) && left.checkVerifyTimeInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getVerifyTime()));
// IGNORE field fl_log.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized())
//                     setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getCreateTime()));
                methods.get("setNew").invoke(right,left.isNew());
                methods.get("setModified").invoke(right,left.getModified());
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }}; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter for {@link PersonBean} to N_PERSON <br>
     * @author guyadong
     *
     */
    public static class PersonBeanConverter<N_PERSON> extends IBeanConverter.AbstractHandle<PersonBean,N_PERSON>{
        final Map<String,Method> methods = new Hashtable<String,Method>();
        /** usage: <pre>new PersonBeanConverter&lt;Model&gt;(){};</pre> */
        public PersonBeanConverter(){
            super();
            init();
        }
        public PersonBeanConverter (Class<PersonBean> leftClass, Class<N_PERSON> rightClass){
            super(leftClass,rightClass);
            init();
        }
        private void init(){
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("setNew",rightType.getMethod("setNew",boolean.class));
                methods.put("getModified",rightType.getMethod("getModified"));
                methods.put("setModified",rightType.getMethod("setModified",long.class));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
            try{         
                methods.put("getId",rightType.getMethod("getId"));
                try{
                    methods.put("setId",rightType.getMethod("setId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setId",rightType.getMethod("setId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getGroupId",rightType.getMethod("getGroupId"));
                try{
                    methods.put("setGroupId",rightType.getMethod("setGroupId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setGroupId",rightType.getMethod("setGroupId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getName",rightType.getMethod("getName"));
                methods.put("setName",rightType.getMethod("setName",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getSex",rightType.getMethod("getSex"));
                try{
                    methods.put("setSex",rightType.getMethod("setSex",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setSex",rightType.getMethod("setSex",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getBirthdate",rightType.getMethod("getBirthdate"));
                try{
                    methods.put("setBirthdate",rightType.getMethod("setBirthdate",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setBirthdate",rightType.getMethod("setBirthdate",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setBirthdate",rightType.getMethod("setBirthdate",Long.class));
                    }
                }
            }catch(Exception e){}
            try{         
                methods.put("getPapersType",rightType.getMethod("getPapersType"));
                try{
                    methods.put("setPapersType",rightType.getMethod("setPapersType",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setPapersType",rightType.getMethod("setPapersType",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getPapersNum",rightType.getMethod("getPapersNum"));
                methods.put("setPapersNum",rightType.getMethod("setPapersNum",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getImageMd5",rightType.getMethod("getImageMd5"));
                methods.put("setImageMd5",rightType.getMethod("setImageMd5",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getExpiryDate",rightType.getMethod("getExpiryDate"));
                try{
                    methods.put("setExpiryDate",rightType.getMethod("setExpiryDate",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setExpiryDate",rightType.getMethod("setExpiryDate",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setExpiryDate",rightType.getMethod("setExpiryDate",Long.class));
                    }
                }
            }catch(Exception e){}
            try{         
                methods.put("getCreateTime",rightType.getMethod("getCreateTime"));
                try{
                    methods.put("setCreateTime",rightType.getMethod("setCreateTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setCreateTime",rightType.getMethod("setCreateTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setCreateTime",rightType.getMethod("setCreateTime",Long.class));
                    }
                }
            }catch(Exception e){}
            try{         
                methods.put("getUpdateTime",rightType.getMethod("getUpdateTime"));
                try{
                    methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setUpdateTime",rightType.getMethod("setUpdateTime",Long.class));
                    }
                }
            }catch(Exception e){}
        }
        @Override
        protected void _fromRight(PersonBean left, N_PERSON right) {
            try{
                Method getterMethod;
                long modified = (long)methods.get("getModified").invoke(right);
                if( (0L !=  (modified & FL_PERSON_ID_ID_MASK)) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_GROUP_ID_MASK)) && (null != (getterMethod = methods.get("getGroupId"))))
                    left.setGroupId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_NAME_MASK)) && (null != (getterMethod = methods.get("getName"))))
                    left.setName(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_SEX_MASK)) && (null != (getterMethod = methods.get("getSex"))))
                    left.setSex(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_BIRTHDATE_MASK)) && (null != (getterMethod = methods.get("getBirthdate"))))
                    left.setBirthdate(convert(java.util.Date.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_PAPERS_TYPE_MASK)) && (null != (getterMethod = methods.get("getPapersType"))))
                    left.setPapersType(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_PAPERS_NUM_MASK)) && (null != (getterMethod = methods.get("getPapersNum"))))
                    left.setPapersNum(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_IMAGE_MD5_MASK)) && (null != (getterMethod = methods.get("getImageMd5"))))
                    left.setImageMd5(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_EXPIRY_DATE_MASK)) && (null != (getterMethod = methods.get("getExpiryDate"))))
                    left.setExpiryDate(convert(java.util.Date.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_CREATE_TIME_MASK)) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_PERSON_ID_UPDATE_TIME_MASK)) && (null != (getterMethod = methods.get("getUpdateTime"))))
                    left.setUpdateTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((boolean)methods.get("isNew").invoke(right));
                left.setModified(modified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(PersonBean left, N_PERSON right) {
            try{
                Method setterMethod;
                if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getId()));
                if(null != (setterMethod = methods.get("setGroupId")) && left.checkGroupIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getGroupId()));
                if(null != (setterMethod = methods.get("setName")) && left.checkNameInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getName()));
                if(null != (setterMethod = methods.get("setSex")) && left.checkSexInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getSex()));
                if(null != (setterMethod = methods.get("setBirthdate")) && left.checkBirthdateInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getBirthdate()));
                if(null != (setterMethod = methods.get("setPapersType")) && left.checkPapersTypeInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getPapersType()));
                if(null != (setterMethod = methods.get("setPapersNum")) && left.checkPapersNumInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getPapersNum()));
                if(null != (setterMethod = methods.get("setImageMd5")) && left.checkImageMd5Initialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getImageMd5()));
                if(null != (setterMethod = methods.get("setExpiryDate")) && left.checkExpiryDateInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getExpiryDate()));
// IGNORE field fl_person.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized())
//                     setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getCreateTime()));
// IGNORE field fl_person.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
//                 if(null != (setterMethod = methods.get("setUpdateTime")) && left.checkUpdateTimeInitialized())
//                     setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getUpdateTime()));
                methods.get("setNew").invoke(right,left.isNew());
                methods.get("setModified").invoke(right,left.getModified());
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }}; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter for {@link StoreBean} to N_STORE <br>
     * @author guyadong
     *
     */
    public static class StoreBeanConverter<N_STORE> extends IBeanConverter.AbstractHandle<StoreBean,N_STORE>{
        final Map<String,Method> methods = new Hashtable<String,Method>();
        /** usage: <pre>new StoreBeanConverter&lt;Model&gt;(){};</pre> */
        public StoreBeanConverter(){
            super();
            init();
        }
        public StoreBeanConverter (Class<StoreBean> leftClass, Class<N_STORE> rightClass){
            super(leftClass,rightClass);
            init();
        }
        private void init(){
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("setNew",rightType.getMethod("setNew",boolean.class));
                methods.put("getModified",rightType.getMethod("getModified"));
                methods.put("setModified",rightType.getMethod("setModified",long.class));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
            try{         
                methods.put("getMd5",rightType.getMethod("getMd5"));
                methods.put("setMd5",rightType.getMethod("setMd5",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getEncoding",rightType.getMethod("getEncoding"));
                methods.put("setEncoding",rightType.getMethod("setEncoding",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getData",rightType.getMethod("getData"));
                methods.put("setData",rightType.getMethod("setData",java.nio.ByteBuffer.class));
            }catch(Exception e){}
        }
        @Override
        protected void _fromRight(StoreBean left, N_STORE right) {
            try{
                Method getterMethod;
                long modified = (long)methods.get("getModified").invoke(right);
                if( (0L !=  (modified & FL_STORE_ID_MD5_MASK)) && (null != (getterMethod = methods.get("getMd5"))))
                    left.setMd5(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_STORE_ID_ENCODING_MASK)) && (null != (getterMethod = methods.get("getEncoding"))))
                    left.setEncoding(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_STORE_ID_DATA_MASK)) && (null != (getterMethod = methods.get("getData"))))
                    left.setData(convert(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                left.isNew((boolean)methods.get("isNew").invoke(right));
                left.setModified(modified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(StoreBean left, N_STORE right) {
            try{
                Method setterMethod;
                if(null != (setterMethod = methods.get("setMd5")) && left.checkMd5Initialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getMd5()));
                if(null != (setterMethod = methods.get("setEncoding")) && left.checkEncodingInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getEncoding()));
                if(null != (setterMethod = methods.get("setData")) && left.checkDataInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getData()));
                methods.get("setNew").invoke(right,left.isNew());
                methods.get("setModified").invoke(right,left.getModified());
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }}; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter for {@link LogLightBean} to N_LOGLIGHT <br>
     * @author guyadong
     *
     */
    public static class LogLightBeanConverter<N_LOGLIGHT> extends IBeanConverter.AbstractHandle<LogLightBean,N_LOGLIGHT>{
        final Map<String,Method> methods = new Hashtable<String,Method>();
        /** usage: <pre>new LogLightBeanConverter&lt;Model&gt;(){};</pre> */
        public LogLightBeanConverter(){
            super();
            init();
        }
        public LogLightBeanConverter (Class<LogLightBean> leftClass, Class<N_LOGLIGHT> rightClass){
            super(leftClass,rightClass);
            init();
        }
        private void init(){
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("setNew",rightType.getMethod("setNew",boolean.class));
                methods.put("getModified",rightType.getMethod("getModified"));
                methods.put("setModified",rightType.getMethod("setModified",long.class));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
            try{         
                methods.put("getId",rightType.getMethod("getId"));
                try{
                    methods.put("setId",rightType.getMethod("setId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setId",rightType.getMethod("setId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getPersonId",rightType.getMethod("getPersonId"));
                try{
                    methods.put("setPersonId",rightType.getMethod("setPersonId",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setPersonId",rightType.getMethod("setPersonId",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getName",rightType.getMethod("getName"));
                methods.put("setName",rightType.getMethod("setName",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getPapersType",rightType.getMethod("getPapersType"));
                try{
                    methods.put("setPapersType",rightType.getMethod("setPapersType",Integer.class));
                }catch(NoSuchMethodException nm){
                    methods.put("setPapersType",rightType.getMethod("setPapersType",int.class));
                }
            }catch(Exception e){}
            try{         
                methods.put("getPapersNum",rightType.getMethod("getPapersNum"));
                methods.put("setPapersNum",rightType.getMethod("setPapersNum",String.class));
            }catch(Exception e){}
            try{         
                methods.put("getVerifyTime",rightType.getMethod("getVerifyTime"));
                try{
                    methods.put("setVerifyTime",rightType.getMethod("setVerifyTime",java.util.Date.class));
                }catch(NoSuchMethodException nm){
                    try{
                        methods.put("setVerifyTime",rightType.getMethod("setVerifyTime",long.class));
                    }catch(NoSuchMethodException nm2){
                        methods.put("setVerifyTime",rightType.getMethod("setVerifyTime",Long.class));
                    }
                }
            }catch(Exception e){}
        }
        @Override
        protected void _fromRight(LogLightBean left, N_LOGLIGHT right) {
            try{
                Method getterMethod;
                long modified = (long)methods.get("getModified").invoke(right);
                if( (0L !=  (modified & FL_LOG_LIGHT_ID_ID_MASK)) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_LIGHT_ID_PERSON_ID_MASK)) && (null != (getterMethod = methods.get("getPersonId"))))
                    left.setPersonId(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_LIGHT_ID_NAME_MASK)) && (null != (getterMethod = methods.get("getName"))))
                    left.setName(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_LIGHT_ID_PAPERS_TYPE_MASK)) && (null != (getterMethod = methods.get("getPapersType"))))
                    left.setPapersType(convert(Integer.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_LIGHT_ID_PAPERS_NUM_MASK)) && (null != (getterMethod = methods.get("getPapersNum"))))
                    left.setPapersNum(convert(String.class,getterMethod.invoke(right)));
                if( (0L !=  (modified & FL_LOG_LIGHT_ID_VERIFY_TIME_MASK)) && (null != (getterMethod = methods.get("getVerifyTime"))))
                    left.setVerifyTime(convert(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((boolean)methods.get("isNew").invoke(right));
                left.setModified(modified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(LogLightBean left, N_LOGLIGHT right) {
            try{
                Method setterMethod;
                if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getId()));
                if(null != (setterMethod = methods.get("setPersonId")) && left.checkPersonIdInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getPersonId()));
                if(null != (setterMethod = methods.get("setName")) && left.checkNameInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getName()));
                if(null != (setterMethod = methods.get("setPapersType")) && left.checkPapersTypeInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getPapersType()));
                if(null != (setterMethod = methods.get("setPapersNum")) && left.checkPapersNumInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getPapersNum()));
                if(null != (setterMethod = methods.get("setVerifyTime")) && left.checkVerifyTimeInitialized())
                    setterMethod.invoke(right,convert(setterMethod.getParameterTypes()[0],left.getVerifyTime()));
                methods.get("setNew").invoke(right,left.isNew());
                methods.get("setModified").invoke(right,left.getModified());
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }}; 

}
