// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: bean.converter.utils.java.vm
// ______________________________________________________
package net.gdface.facelog.db;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import net.gdface.facelog.db.IBeanConverter;

import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.JunctionDeviceGroupBean;
import net.gdface.facelog.db.JunctionPersonGroupBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.LogLightBean;

/**
 * generic type converter classes of {@link IBeanConverter} implementation for fl_device,fl_device_group,fl_face,fl_feature,fl_image,fl_junction_device_group,fl_junction_person_group,fl_log,fl_person,fl_person_group,fl_store,fl_log_light<br>
 * @author guyadong
 *
 */
public class BeanConverterUtils implements Constant {
    private static class NullCastPrimitiveException extends ClassCastException {
        private static final long serialVersionUID = 1L;
        NullCastPrimitiveException(String message) {
            super(message);
        }
    }
    private BeanConverterUtils(){}
    /**
     * 返回buffer中所有字节(position~limit),不改变buffer状态
     * @param buffer
     * @return
     */
    private static final byte[] getBytesInBuffer(ByteBuffer buffer){
        int pos = buffer.position();
        try{
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);
            return bytes;
        }finally{
            buffer.position(pos);
        }
    }
    private static final List<Long> toList(long[] array) {
        ArrayList<Long> result = new ArrayList<Long>(array.length);
        for (int i = 0; i < array.length; i++) {
            result.add(new Long(array[i]));
        }
        return result;
    }
    private static final long[] toPrimitive(List<Long> list) {        
        long[] dst = new long[list.size()];
        Long element;
        for (int i = 0; i < dst.length; i++) {
            if(null == (element = list.get(i)))
                throw new IllegalArgumentException("can't cast List<Long> to long[] because of null element");
            dst[i] = element.longValue();
        }
        return dst;
    }
    /**
     * {@code source}转为{@code type}指定的类型
     * @param type destination type
     * @param source  source object
     * @return
     */
    @SuppressWarnings({ "unchecked" })
    private static final <T> T cast(Class<T> type,Object source){
        try{
            if(null ==source && type.isPrimitive())
                throw new NullCastPrimitiveException(String.format("can't convert null to primitive type %s",type.getSimpleName()));
            return (T) source;
        }catch(ClassCastException cce){
            // long[] -> List  
            if(List.class.isAssignableFrom(type) && (source instanceof long[])){
                return (T) toList((long[]) source);
            }
            // List -> long[]   
            if(long[].class == type && (source instanceof List)){
                return (T) toPrimitive( (List<Long>) source);
            }
            // Long -> Date
            if(java.util.Date.class.isAssignableFrom(type) && (source instanceof Long)){
                try {
                    // call constructor,such as  java.util.Date#Date(long), java.sql.Time.Time(long)
                    return type.getConstructor(long.class).newInstance(source);
                } catch (Exception e) {
                    StringWriter writer = new StringWriter();
                    e.printStackTrace(new PrintWriter(writer));
                    throw new ClassCastException(writer.toString());
                }
            }
            // Date -> Long,long
            if( (long.class == type || Long.class == type) && source instanceof java.util.Date){
                    Long time = ((java.util.Date)source).getTime();
                    return (T)time;
            }
            // byte[] -> ByteBuffer
            if(ByteBuffer.class == type && source instanceof byte[]){
                return (T) ByteBuffer.wrap((byte[]) source);
            }
            // ByteBuffer -> byte[]
            if(byte[].class == type && source instanceof ByteBuffer){
                return (T) getBytesInBuffer((ByteBuffer) source);
            }
            throw cce;
        }
    }
    private static final boolean bitCheck(int index,long...bits){
        return 0 != (bits[index>>6]&(1L<<(index&0x3f)));
    }
    private static final long[] bitOR(int index,long... bits){
         bits[index>>6] |= (1L<<(index&0x3f));
         return bits;
    }
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link DeviceBean} and R_DEVICE <br>
     * @author guyadong
     * @param <R_DEVICE> right type
     *
     */
    public static class DeviceBeanConverter<R_DEVICE> extends IBeanConverter.AbstractHandle<DeviceBean,R_DEVICE>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new DeviceBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_DEVICE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_DEVICE_JAVA_FIELDS}
         */
        public DeviceBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #DeviceBeanConverter(String) */
        public DeviceBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #DeviceBeanConverter(String)}
         */
        public DeviceBeanConverter (Class<DeviceBean> leftClass, Class<R_DEVICE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #DeviceBeanConverter(Class,Class,String) */
        public DeviceBeanConverter (Class<DeviceBean> leftClass, Class<R_DEVICE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_DEVICE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setId");
            getSetterNoThrow("setId",Integer.class,int.class);                    
            getGetter("setName");
            getSetterNoThrow("setName",String.class); 
            getGetter("setGroupId");
            getSetterNoThrow("setGroupId",Integer.class,int.class);                    
            getGetter("setVersion");
            getSetterNoThrow("setVersion",String.class); 
            getGetter("setSerialNo");
            getSetterNoThrow("setSerialNo",String.class); 
            getGetter("setMac");
            getSetterNoThrow("setMac",String.class); 
            getGetter("setCreateTime");
            getSetterNoThrow("setCreateTime",java.util.Date.class,Long.class,long.class);  
            getGetter("setUpdateTime");
            getSetterNoThrow("setUpdateTime",java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void _fromRight(DeviceBean left, R_DEVICE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("id",modified) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("name",modified) && (null != (getterMethod = methods.get("getName"))))
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("groupId",modified) && (null != (getterMethod = methods.get("getGroupId"))))
                    left.setGroupId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("version",modified) && (null != (getterMethod = methods.get("getVersion"))))
                    left.setVersion(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("serialNo",modified) && (null != (getterMethod = methods.get("getSerialNo"))))
                    left.setSerialNo(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("mac",modified) && (null != (getterMethod = methods.get("getMac"))))
                    left.setMac(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("createTime",modified) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                if( bitCheck("updateTime",modified) && (null != (getterMethod = methods.get("getUpdateTime"))))
                    left.setUpdateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(DeviceBean left, R_DEVICE right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setId"),left.getId()));
                        bitOR("id",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setName")) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setName"),left.getName()));
                        bitOR("name",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setGroupId")) && left.checkGroupIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setGroupId"),left.getGroupId()));
                        bitOR("groupId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setVersion")) && left.checkVersionInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setVersion"),left.getVersion()));
                        bitOR("version",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setSerialNo")) && left.checkSerialNoInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setSerialNo"),left.getSerialNo()));
                        bitOR("serialNo",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setMac")) && left.checkMacInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setMac"),left.getMac()));
                        bitOR("mac",modified);
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_device.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setCreateTime"),left.getCreateTime()));
                        bitOR("createTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
// IGNORE field fl_device.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setUpdateTime")) && left.checkUpdateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setUpdateTime"),left.getUpdateTime()));
                        bitOR("updateTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link DeviceGroupBean} and R_DEVICEGROUP <br>
     * @author guyadong
     * @param <R_DEVICEGROUP> right type
     *
     */
    public static class DeviceGroupBeanConverter<R_DEVICEGROUP> extends IBeanConverter.AbstractHandle<DeviceGroupBean,R_DEVICEGROUP>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new DeviceGroupBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_DEVICEGROUP,<br>
         *                   if null or empty, use default string:{@link Constant#FL_DEVICE_GROUP_JAVA_FIELDS}
         */
        public DeviceGroupBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #DeviceGroupBeanConverter(String) */
        public DeviceGroupBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #DeviceGroupBeanConverter(String)}
         */
        public DeviceGroupBeanConverter (Class<DeviceGroupBean> leftClass, Class<R_DEVICEGROUP> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #DeviceGroupBeanConverter(Class,Class,String) */
        public DeviceGroupBeanConverter (Class<DeviceGroupBean> leftClass, Class<R_DEVICEGROUP> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_DEVICE_GROUP_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setId");
            getSetterNoThrow("setId",Integer.class,int.class);                    
            getGetter("setName");
            getSetterNoThrow("setName",String.class); 
        }
        @Override
        protected void _fromRight(DeviceGroupBean left, R_DEVICEGROUP right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("id",modified) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("name",modified) && (null != (getterMethod = methods.get("getName"))))
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(DeviceGroupBean left, R_DEVICEGROUP right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setId"),left.getId()));
                        bitOR("id",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setName")) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setName"),left.getName()));
                        bitOR("name",modified);
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link FaceBean} and R_FACE <br>
     * @author guyadong
     * @param <R_FACE> right type
     *
     */
    public static class FaceBeanConverter<R_FACE> extends IBeanConverter.AbstractHandle<FaceBean,R_FACE>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new FaceBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_FACE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_FACE_JAVA_FIELDS}
         */
        public FaceBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #FaceBeanConverter(String) */
        public FaceBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #FaceBeanConverter(String)}
         */
        public FaceBeanConverter (Class<FaceBean> leftClass, Class<R_FACE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #FaceBeanConverter(Class,Class,String) */
        public FaceBeanConverter (Class<FaceBean> leftClass, Class<R_FACE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_FACE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setId");
            getSetterNoThrow("setId",Integer.class,int.class);                    
            getGetter("setImageMd5");
            getSetterNoThrow("setImageMd5",String.class); 
            getGetter("setFaceLeft");
            getSetterNoThrow("setFaceLeft",Integer.class,int.class);                    
            getGetter("setFaceTop");
            getSetterNoThrow("setFaceTop",Integer.class,int.class);                    
            getGetter("setFaceWidth");
            getSetterNoThrow("setFaceWidth",Integer.class,int.class);                    
            getGetter("setFaceHeight");
            getSetterNoThrow("setFaceHeight",Integer.class,int.class);                    
            getGetter("setEyeLeftx");
            getSetterNoThrow("setEyeLeftx",Integer.class,int.class);                    
            getGetter("setEyeLefty");
            getSetterNoThrow("setEyeLefty",Integer.class,int.class);                    
            getGetter("setEyeRightx");
            getSetterNoThrow("setEyeRightx",Integer.class,int.class);                    
            getGetter("setEyeRighty");
            getSetterNoThrow("setEyeRighty",Integer.class,int.class);                    
            getGetter("setMouthX");
            getSetterNoThrow("setMouthX",Integer.class,int.class);                    
            getGetter("setMouthY");
            getSetterNoThrow("setMouthY",Integer.class,int.class);                    
            getGetter("setNoseX");
            getSetterNoThrow("setNoseX",Integer.class,int.class);                    
            getGetter("setNoseY");
            getSetterNoThrow("setNoseY",Integer.class,int.class);                    
            getGetter("setAngleYaw");
            getSetterNoThrow("setAngleYaw",Integer.class,int.class);                    
            getGetter("setAnglePitch");
            getSetterNoThrow("setAnglePitch",Integer.class,int.class);                    
            getGetter("setAngleRoll");
            getSetterNoThrow("setAngleRoll",Integer.class,int.class);                    
            getGetter("setExtInfo");
            getSetterNoThrow("setExtInfo",java.nio.ByteBuffer.class,byte[].class);                    
            getGetter("setFeatureMd5");
            getSetterNoThrow("setFeatureMd5",String.class); 
            getGetter("setCreateTime");
            getSetterNoThrow("setCreateTime",java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void _fromRight(FaceBean left, R_FACE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("id",modified) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("imageMd5",modified) && (null != (getterMethod = methods.get("getImageMd5"))))
                    left.setImageMd5(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("faceLeft",modified) && (null != (getterMethod = methods.get("getFaceLeft"))))
                    left.setFaceLeft(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("faceTop",modified) && (null != (getterMethod = methods.get("getFaceTop"))))
                    left.setFaceTop(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("faceWidth",modified) && (null != (getterMethod = methods.get("getFaceWidth"))))
                    left.setFaceWidth(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("faceHeight",modified) && (null != (getterMethod = methods.get("getFaceHeight"))))
                    left.setFaceHeight(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("eyeLeftx",modified) && (null != (getterMethod = methods.get("getEyeLeftx"))))
                    left.setEyeLeftx(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("eyeLefty",modified) && (null != (getterMethod = methods.get("getEyeLefty"))))
                    left.setEyeLefty(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("eyeRightx",modified) && (null != (getterMethod = methods.get("getEyeRightx"))))
                    left.setEyeRightx(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("eyeRighty",modified) && (null != (getterMethod = methods.get("getEyeRighty"))))
                    left.setEyeRighty(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("mouthX",modified) && (null != (getterMethod = methods.get("getMouthX"))))
                    left.setMouthX(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("mouthY",modified) && (null != (getterMethod = methods.get("getMouthY"))))
                    left.setMouthY(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("noseX",modified) && (null != (getterMethod = methods.get("getNoseX"))))
                    left.setNoseX(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("noseY",modified) && (null != (getterMethod = methods.get("getNoseY"))))
                    left.setNoseY(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("angleYaw",modified) && (null != (getterMethod = methods.get("getAngleYaw"))))
                    left.setAngleYaw(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("anglePitch",modified) && (null != (getterMethod = methods.get("getAnglePitch"))))
                    left.setAnglePitch(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("angleRoll",modified) && (null != (getterMethod = methods.get("getAngleRoll"))))
                    left.setAngleRoll(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("extInfo",modified) && (null != (getterMethod = methods.get("getExtInfo"))))
                    left.setExtInfo(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                if( bitCheck("featureMd5",modified) && (null != (getterMethod = methods.get("getFeatureMd5"))))
                    left.setFeatureMd5(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("createTime",modified) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(FaceBean left, R_FACE right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setId"),left.getId()));
                        bitOR("id",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setImageMd5")) && left.checkImageMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setImageMd5"),left.getImageMd5()));
                        bitOR("imageMd5",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setFaceLeft")) && left.checkFaceLeftInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setFaceLeft"),left.getFaceLeft()));
                        bitOR("faceLeft",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setFaceTop")) && left.checkFaceTopInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setFaceTop"),left.getFaceTop()));
                        bitOR("faceTop",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setFaceWidth")) && left.checkFaceWidthInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setFaceWidth"),left.getFaceWidth()));
                        bitOR("faceWidth",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setFaceHeight")) && left.checkFaceHeightInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setFaceHeight"),left.getFaceHeight()));
                        bitOR("faceHeight",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setEyeLeftx")) && left.checkEyeLeftxInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setEyeLeftx"),left.getEyeLeftx()));
                        bitOR("eyeLeftx",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setEyeLefty")) && left.checkEyeLeftyInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setEyeLefty"),left.getEyeLefty()));
                        bitOR("eyeLefty",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setEyeRightx")) && left.checkEyeRightxInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setEyeRightx"),left.getEyeRightx()));
                        bitOR("eyeRightx",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setEyeRighty")) && left.checkEyeRightyInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setEyeRighty"),left.getEyeRighty()));
                        bitOR("eyeRighty",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setMouthX")) && left.checkMouthXInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setMouthX"),left.getMouthX()));
                        bitOR("mouthX",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setMouthY")) && left.checkMouthYInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setMouthY"),left.getMouthY()));
                        bitOR("mouthY",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setNoseX")) && left.checkNoseXInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setNoseX"),left.getNoseX()));
                        bitOR("noseX",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setNoseY")) && left.checkNoseYInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setNoseY"),left.getNoseY()));
                        bitOR("noseY",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setAngleYaw")) && left.checkAngleYawInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setAngleYaw"),left.getAngleYaw()));
                        bitOR("angleYaw",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setAnglePitch")) && left.checkAnglePitchInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setAnglePitch"),left.getAnglePitch()));
                        bitOR("anglePitch",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setAngleRoll")) && left.checkAngleRollInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setAngleRoll"),left.getAngleRoll()));
                        bitOR("angleRoll",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setExtInfo")) && left.checkExtInfoInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setExtInfo"),left.getExtInfo()));
                        bitOR("extInfo",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setFeatureMd5")) && left.checkFeatureMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setFeatureMd5"),left.getFeatureMd5()));
                        bitOR("featureMd5",modified);
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_face.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setCreateTime"),left.getCreateTime()));
                        bitOR("createTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link FeatureBean} and R_FEATURE <br>
     * @author guyadong
     * @param <R_FEATURE> right type
     *
     */
    public static class FeatureBeanConverter<R_FEATURE> extends IBeanConverter.AbstractHandle<FeatureBean,R_FEATURE>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new FeatureBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_FEATURE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_FEATURE_JAVA_FIELDS}
         */
        public FeatureBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #FeatureBeanConverter(String) */
        public FeatureBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #FeatureBeanConverter(String)}
         */
        public FeatureBeanConverter (Class<FeatureBean> leftClass, Class<R_FEATURE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #FeatureBeanConverter(Class,Class,String) */
        public FeatureBeanConverter (Class<FeatureBean> leftClass, Class<R_FEATURE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_FEATURE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setMd5");
            getSetterNoThrow("setMd5",String.class); 
            getGetter("setPersonId");
            getSetterNoThrow("setPersonId",Integer.class,int.class);                    
            getGetter("setFeature");
            getSetterNoThrow("setFeature",java.nio.ByteBuffer.class,byte[].class);                    
            getGetter("setUpdateTime");
            getSetterNoThrow("setUpdateTime",java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void _fromRight(FeatureBean left, R_FEATURE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("md5",modified) && (null != (getterMethod = methods.get("getMd5"))))
                    left.setMd5(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("personId",modified) && (null != (getterMethod = methods.get("getPersonId"))))
                    left.setPersonId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("feature",modified) && (null != (getterMethod = methods.get("getFeature"))))
                    left.setFeature(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                if( bitCheck("updateTime",modified) && (null != (getterMethod = methods.get("getUpdateTime"))))
                    left.setUpdateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(FeatureBean left, R_FEATURE right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setMd5")) && left.checkMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setMd5"),left.getMd5()));
                        bitOR("md5",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setPersonId")) && left.checkPersonIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setPersonId"),left.getPersonId()));
                        bitOR("personId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setFeature")) && left.checkFeatureInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setFeature"),left.getFeature()));
                        bitOR("feature",modified);
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_feature.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setUpdateTime")) && left.checkUpdateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setUpdateTime"),left.getUpdateTime()));
                        bitOR("updateTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link ImageBean} and R_IMAGE <br>
     * @author guyadong
     * @param <R_IMAGE> right type
     *
     */
    public static class ImageBeanConverter<R_IMAGE> extends IBeanConverter.AbstractHandle<ImageBean,R_IMAGE>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new ImageBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_IMAGE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_IMAGE_JAVA_FIELDS}
         */
        public ImageBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #ImageBeanConverter(String) */
        public ImageBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #ImageBeanConverter(String)}
         */
        public ImageBeanConverter (Class<ImageBean> leftClass, Class<R_IMAGE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #ImageBeanConverter(Class,Class,String) */
        public ImageBeanConverter (Class<ImageBean> leftClass, Class<R_IMAGE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_IMAGE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setMd5");
            getSetterNoThrow("setMd5",String.class); 
            getGetter("setFormat");
            getSetterNoThrow("setFormat",String.class); 
            getGetter("setWidth");
            getSetterNoThrow("setWidth",Integer.class,int.class);                    
            getGetter("setHeight");
            getSetterNoThrow("setHeight",Integer.class,int.class);                    
            getGetter("setDepth");
            getSetterNoThrow("setDepth",Integer.class,int.class);                    
            getGetter("setFaceNum");
            getSetterNoThrow("setFaceNum",Integer.class,int.class);                    
            getGetter("setThumbMd5");
            getSetterNoThrow("setThumbMd5",String.class); 
            getGetter("setDeviceId");
            getSetterNoThrow("setDeviceId",Integer.class,int.class);                    
        }
        @Override
        protected void _fromRight(ImageBean left, R_IMAGE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("md5",modified) && (null != (getterMethod = methods.get("getMd5"))))
                    left.setMd5(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("format",modified) && (null != (getterMethod = methods.get("getFormat"))))
                    left.setFormat(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("width",modified) && (null != (getterMethod = methods.get("getWidth"))))
                    left.setWidth(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("height",modified) && (null != (getterMethod = methods.get("getHeight"))))
                    left.setHeight(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("depth",modified) && (null != (getterMethod = methods.get("getDepth"))))
                    left.setDepth(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("faceNum",modified) && (null != (getterMethod = methods.get("getFaceNum"))))
                    left.setFaceNum(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("thumbMd5",modified) && (null != (getterMethod = methods.get("getThumbMd5"))))
                    left.setThumbMd5(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("deviceId",modified) && (null != (getterMethod = methods.get("getDeviceId"))))
                    left.setDeviceId(cast(Integer.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(ImageBean left, R_IMAGE right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setMd5")) && left.checkMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setMd5"),left.getMd5()));
                        bitOR("md5",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setFormat")) && left.checkFormatInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setFormat"),left.getFormat()));
                        bitOR("format",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setWidth")) && left.checkWidthInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setWidth"),left.getWidth()));
                        bitOR("width",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setHeight")) && left.checkHeightInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setHeight"),left.getHeight()));
                        bitOR("height",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setDepth")) && left.checkDepthInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setDepth"),left.getDepth()));
                        bitOR("depth",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setFaceNum")) && left.checkFaceNumInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setFaceNum"),left.getFaceNum()));
                        bitOR("faceNum",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setThumbMd5")) && left.checkThumbMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setThumbMd5"),left.getThumbMd5()));
                        bitOR("thumbMd5",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setDeviceId")) && left.checkDeviceIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setDeviceId"),left.getDeviceId()));
                        bitOR("deviceId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link JunctionDeviceGroupBean} and R_JUNCTIONDEVICEGROUP <br>
     * @author guyadong
     * @param <R_JUNCTIONDEVICEGROUP> right type
     *
     */
    public static class JunctionDeviceGroupBeanConverter<R_JUNCTIONDEVICEGROUP> extends IBeanConverter.AbstractHandle<JunctionDeviceGroupBean,R_JUNCTIONDEVICEGROUP>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new JunctionDeviceGroupBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_JUNCTIONDEVICEGROUP,<br>
         *                   if null or empty, use default string:{@link Constant#FL_JUNCTION_DEVICE_GROUP_JAVA_FIELDS}
         */
        public JunctionDeviceGroupBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #JunctionDeviceGroupBeanConverter(String) */
        public JunctionDeviceGroupBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #JunctionDeviceGroupBeanConverter(String)}
         */
        public JunctionDeviceGroupBeanConverter (Class<JunctionDeviceGroupBean> leftClass, Class<R_JUNCTIONDEVICEGROUP> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #JunctionDeviceGroupBeanConverter(Class,Class,String) */
        public JunctionDeviceGroupBeanConverter (Class<JunctionDeviceGroupBean> leftClass, Class<R_JUNCTIONDEVICEGROUP> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_JUNCTION_DEVICE_GROUP_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setDeviceId");
            getSetterNoThrow("setDeviceId",Integer.class,int.class);                    
            getGetter("setGroupId");
            getSetterNoThrow("setGroupId",Integer.class,int.class);                    
            getGetter("setCreateTime");
            getSetterNoThrow("setCreateTime",java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void _fromRight(JunctionDeviceGroupBean left, R_JUNCTIONDEVICEGROUP right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("deviceId",modified) && (null != (getterMethod = methods.get("getDeviceId"))))
                    left.setDeviceId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("groupId",modified) && (null != (getterMethod = methods.get("getGroupId"))))
                    left.setGroupId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("createTime",modified) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(JunctionDeviceGroupBean left, R_JUNCTIONDEVICEGROUP right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setDeviceId")) && left.checkDeviceIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setDeviceId"),left.getDeviceId()));
                        bitOR("deviceId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setGroupId")) && left.checkGroupIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setGroupId"),left.getGroupId()));
                        bitOR("groupId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_junction_device_group.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setCreateTime"),left.getCreateTime()));
                        bitOR("createTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link JunctionPersonGroupBean} and R_JUNCTIONPERSONGROUP <br>
     * @author guyadong
     * @param <R_JUNCTIONPERSONGROUP> right type
     *
     */
    public static class JunctionPersonGroupBeanConverter<R_JUNCTIONPERSONGROUP> extends IBeanConverter.AbstractHandle<JunctionPersonGroupBean,R_JUNCTIONPERSONGROUP>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new JunctionPersonGroupBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_JUNCTIONPERSONGROUP,<br>
         *                   if null or empty, use default string:{@link Constant#FL_JUNCTION_PERSON_GROUP_JAVA_FIELDS}
         */
        public JunctionPersonGroupBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #JunctionPersonGroupBeanConverter(String) */
        public JunctionPersonGroupBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #JunctionPersonGroupBeanConverter(String)}
         */
        public JunctionPersonGroupBeanConverter (Class<JunctionPersonGroupBean> leftClass, Class<R_JUNCTIONPERSONGROUP> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #JunctionPersonGroupBeanConverter(Class,Class,String) */
        public JunctionPersonGroupBeanConverter (Class<JunctionPersonGroupBean> leftClass, Class<R_JUNCTIONPERSONGROUP> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_JUNCTION_PERSON_GROUP_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setPersonId");
            getSetterNoThrow("setPersonId",Integer.class,int.class);                    
            getGetter("setGroupId");
            getSetterNoThrow("setGroupId",Integer.class,int.class);                    
            getGetter("setCreateTime");
            getSetterNoThrow("setCreateTime",java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void _fromRight(JunctionPersonGroupBean left, R_JUNCTIONPERSONGROUP right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("personId",modified) && (null != (getterMethod = methods.get("getPersonId"))))
                    left.setPersonId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("groupId",modified) && (null != (getterMethod = methods.get("getGroupId"))))
                    left.setGroupId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("createTime",modified) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(JunctionPersonGroupBean left, R_JUNCTIONPERSONGROUP right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setPersonId")) && left.checkPersonIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setPersonId"),left.getPersonId()));
                        bitOR("personId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setGroupId")) && left.checkGroupIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setGroupId"),left.getGroupId()));
                        bitOR("groupId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_junction_person_group.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setCreateTime"),left.getCreateTime()));
                        bitOR("createTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link LogBean} and R_LOG <br>
     * @author guyadong
     * @param <R_LOG> right type
     *
     */
    public static class LogBeanConverter<R_LOG> extends IBeanConverter.AbstractHandle<LogBean,R_LOG>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new LogBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_LOG,<br>
         *                   if null or empty, use default string:{@link Constant#FL_LOG_JAVA_FIELDS}
         */
        public LogBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #LogBeanConverter(String) */
        public LogBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #LogBeanConverter(String)}
         */
        public LogBeanConverter (Class<LogBean> leftClass, Class<R_LOG> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #LogBeanConverter(Class,Class,String) */
        public LogBeanConverter (Class<LogBean> leftClass, Class<R_LOG> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_LOG_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setId");
            getSetterNoThrow("setId",Integer.class,int.class);                    
            getGetter("setPersonId");
            getSetterNoThrow("setPersonId",Integer.class,int.class);                    
            getGetter("setDeviceId");
            getSetterNoThrow("setDeviceId",Integer.class,int.class);                    
            getGetter("setVerifyFeature");
            getSetterNoThrow("setVerifyFeature",String.class); 
            getGetter("setCompareFace");
            getSetterNoThrow("setCompareFace",Integer.class,int.class);                    
            getGetter("setSimilarty");
            getSetterNoThrow("setSimilarty",Double.class,double.class);                    
            getGetter("setVerifyTime");
            getSetterNoThrow("setVerifyTime",java.util.Date.class,Long.class,long.class);  
            getGetter("setCreateTime");
            getSetterNoThrow("setCreateTime",java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void _fromRight(LogBean left, R_LOG right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("id",modified) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("personId",modified) && (null != (getterMethod = methods.get("getPersonId"))))
                    left.setPersonId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("deviceId",modified) && (null != (getterMethod = methods.get("getDeviceId"))))
                    left.setDeviceId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("verifyFeature",modified) && (null != (getterMethod = methods.get("getVerifyFeature"))))
                    left.setVerifyFeature(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("compareFace",modified) && (null != (getterMethod = methods.get("getCompareFace"))))
                    left.setCompareFace(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("similarty",modified) && (null != (getterMethod = methods.get("getSimilarty"))))
                    left.setSimilarty(cast(Double.class,getterMethod.invoke(right)));
                if( bitCheck("verifyTime",modified) && (null != (getterMethod = methods.get("getVerifyTime"))))
                    left.setVerifyTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                if( bitCheck("createTime",modified) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(LogBean left, R_LOG right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setId"),left.getId()));
                        bitOR("id",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setPersonId")) && left.checkPersonIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setPersonId"),left.getPersonId()));
                        bitOR("personId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setDeviceId")) && left.checkDeviceIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setDeviceId"),left.getDeviceId()));
                        bitOR("deviceId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setVerifyFeature")) && left.checkVerifyFeatureInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setVerifyFeature"),left.getVerifyFeature()));
                        bitOR("verifyFeature",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setCompareFace")) && left.checkCompareFaceInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setCompareFace"),left.getCompareFace()));
                        bitOR("compareFace",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setSimilarty")) && left.checkSimilartyInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setSimilarty"),left.getSimilarty()));
                        bitOR("similarty",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setVerifyTime")) && left.checkVerifyTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setVerifyTime"),left.getVerifyTime()));
                        bitOR("verifyTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_log.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setCreateTime"),left.getCreateTime()));
                        bitOR("createTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link PersonBean} and R_PERSON <br>
     * @author guyadong
     * @param <R_PERSON> right type
     *
     */
    public static class PersonBeanConverter<R_PERSON> extends IBeanConverter.AbstractHandle<PersonBean,R_PERSON>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new PersonBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_PERSON,<br>
         *                   if null or empty, use default string:{@link Constant#FL_PERSON_JAVA_FIELDS}
         */
        public PersonBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #PersonBeanConverter(String) */
        public PersonBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #PersonBeanConverter(String)}
         */
        public PersonBeanConverter (Class<PersonBean> leftClass, Class<R_PERSON> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #PersonBeanConverter(Class,Class,String) */
        public PersonBeanConverter (Class<PersonBean> leftClass, Class<R_PERSON> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_PERSON_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setId");
            getSetterNoThrow("setId",Integer.class,int.class);                    
            getGetter("setName");
            getSetterNoThrow("setName",String.class); 
            getGetter("setSex");
            getSetterNoThrow("setSex",Integer.class,int.class);                    
            getGetter("setBirthdate");
            getSetterNoThrow("setBirthdate",java.util.Date.class,Long.class,long.class);  
            getGetter("setPapersType");
            getSetterNoThrow("setPapersType",Integer.class,int.class);                    
            getGetter("setPapersNum");
            getSetterNoThrow("setPapersNum",String.class); 
            getGetter("setImageMd5");
            getSetterNoThrow("setImageMd5",String.class); 
            getGetter("setExpiryDate");
            getSetterNoThrow("setExpiryDate",java.util.Date.class,Long.class,long.class);  
            getGetter("setCreateTime");
            getSetterNoThrow("setCreateTime",java.util.Date.class,Long.class,long.class);  
            getGetter("setUpdateTime");
            getSetterNoThrow("setUpdateTime",java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void _fromRight(PersonBean left, R_PERSON right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("id",modified) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("name",modified) && (null != (getterMethod = methods.get("getName"))))
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("sex",modified) && (null != (getterMethod = methods.get("getSex"))))
                    left.setSex(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("birthdate",modified) && (null != (getterMethod = methods.get("getBirthdate"))))
                    left.setBirthdate(cast(java.util.Date.class,getterMethod.invoke(right)));
                if( bitCheck("papersType",modified) && (null != (getterMethod = methods.get("getPapersType"))))
                    left.setPapersType(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("papersNum",modified) && (null != (getterMethod = methods.get("getPapersNum"))))
                    left.setPapersNum(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("imageMd5",modified) && (null != (getterMethod = methods.get("getImageMd5"))))
                    left.setImageMd5(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("expiryDate",modified) && (null != (getterMethod = methods.get("getExpiryDate"))))
                    left.setExpiryDate(cast(java.util.Date.class,getterMethod.invoke(right)));
                if( bitCheck("createTime",modified) && (null != (getterMethod = methods.get("getCreateTime"))))
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                if( bitCheck("updateTime",modified) && (null != (getterMethod = methods.get("getUpdateTime"))))
                    left.setUpdateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(PersonBean left, R_PERSON right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setId"),left.getId()));
                        bitOR("id",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setName")) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setName"),left.getName()));
                        bitOR("name",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setSex")) && left.checkSexInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setSex"),left.getSex()));
                        bitOR("sex",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setBirthdate")) && left.checkBirthdateInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setBirthdate"),left.getBirthdate()));
                        bitOR("birthdate",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setPapersType")) && left.checkPapersTypeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setPapersType"),left.getPapersType()));
                        bitOR("papersType",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setPapersNum")) && left.checkPapersNumInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setPapersNum"),left.getPapersNum()));
                        bitOR("papersNum",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setImageMd5")) && left.checkImageMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setImageMd5"),left.getImageMd5()));
                        bitOR("imageMd5",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setExpiryDate")) && left.checkExpiryDateInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setExpiryDate"),left.getExpiryDate()));
                        bitOR("expiryDate",modified);
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_person.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setCreateTime")) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setCreateTime"),left.getCreateTime()));
                        bitOR("createTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
// IGNORE field fl_person.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
               if(null != (setterMethod = methods.get("setUpdateTime")) && left.checkUpdateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setUpdateTime"),left.getUpdateTime()));
                        bitOR("updateTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link PersonGroupBean} and R_PERSONGROUP <br>
     * @author guyadong
     * @param <R_PERSONGROUP> right type
     *
     */
    public static class PersonGroupBeanConverter<R_PERSONGROUP> extends IBeanConverter.AbstractHandle<PersonGroupBean,R_PERSONGROUP>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new PersonGroupBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_PERSONGROUP,<br>
         *                   if null or empty, use default string:{@link Constant#FL_PERSON_GROUP_JAVA_FIELDS}
         */
        public PersonGroupBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #PersonGroupBeanConverter(String) */
        public PersonGroupBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #PersonGroupBeanConverter(String)}
         */
        public PersonGroupBeanConverter (Class<PersonGroupBean> leftClass, Class<R_PERSONGROUP> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #PersonGroupBeanConverter(Class,Class,String) */
        public PersonGroupBeanConverter (Class<PersonGroupBean> leftClass, Class<R_PERSONGROUP> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_PERSON_GROUP_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setId");
            getSetterNoThrow("setId",Integer.class,int.class);                    
            getGetter("setName");
            getSetterNoThrow("setName",String.class); 
        }
        @Override
        protected void _fromRight(PersonGroupBean left, R_PERSONGROUP right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("id",modified) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("name",modified) && (null != (getterMethod = methods.get("getName"))))
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(PersonGroupBean left, R_PERSONGROUP right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setId"),left.getId()));
                        bitOR("id",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setName")) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setName"),left.getName()));
                        bitOR("name",modified);
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link StoreBean} and R_STORE <br>
     * @author guyadong
     * @param <R_STORE> right type
     *
     */
    public static class StoreBeanConverter<R_STORE> extends IBeanConverter.AbstractHandle<StoreBean,R_STORE>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new StoreBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_STORE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_STORE_JAVA_FIELDS}
         */
        public StoreBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #StoreBeanConverter(String) */
        public StoreBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #StoreBeanConverter(String)}
         */
        public StoreBeanConverter (Class<StoreBean> leftClass, Class<R_STORE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #StoreBeanConverter(Class,Class,String) */
        public StoreBeanConverter (Class<StoreBean> leftClass, Class<R_STORE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_STORE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setMd5");
            getSetterNoThrow("setMd5",String.class); 
            getGetter("setEncoding");
            getSetterNoThrow("setEncoding",String.class); 
            getGetter("setData");
            getSetterNoThrow("setData",java.nio.ByteBuffer.class,byte[].class);                    
        }
        @Override
        protected void _fromRight(StoreBean left, R_STORE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("md5",modified) && (null != (getterMethod = methods.get("getMd5"))))
                    left.setMd5(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("encoding",modified) && (null != (getterMethod = methods.get("getEncoding"))))
                    left.setEncoding(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("data",modified) && (null != (getterMethod = methods.get("getData"))))
                    left.setData(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(StoreBean left, R_STORE right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setMd5")) && left.checkMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setMd5"),left.getMd5()));
                        bitOR("md5",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setEncoding")) && left.checkEncodingInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setEncoding"),left.getEncoding()));
                        bitOR("encoding",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setData")) && left.checkDataInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setData"),left.getData()));
                        bitOR("data",modified);
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link LogLightBean} and R_LOGLIGHT <br>
     * @author guyadong
     * @param <R_LOGLIGHT> right type
     *
     */
    public static class LogLightBeanConverter<R_LOGLIGHT> extends IBeanConverter.AbstractHandle<LogLightBean,R_LOGLIGHT>{
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new LogLightBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_LOGLIGHT,<br>
         *                   if null or empty, use default string:{@link Constant#FL_LOG_LIGHT_JAVA_FIELDS}
         */
        public LogLightBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #LogLightBeanConverter(String) */
        public LogLightBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #LogLightBeanConverter(String)}
         */
        public LogLightBeanConverter (Class<LogLightBean> leftClass, Class<R_LOGLIGHT> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #LogLightBeanConverter(Class,Class,String) */
        public LogLightBeanConverter (Class<LogLightBean> leftClass, Class<R_LOGLIGHT> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_LOG_LIGHT_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+"))
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                rightIndexs.put(field,i);
            }
            try{
                methods.put("isNew",rightType.getMethod("isNew"));
                methods.put("getModified",rightType.getMethod("getModified"));
                getSetter("setNew",boolean.class);
                if(rightIndexs.size() > 64)
                    getSetter("setModified",long[].class,List.class);
                else
                    getSetter("setModified",long.class);
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }
            getGetter("getInitialized");
            if(rightIndexs.size() > 64)
                getSetterNoThrow("setInitialized",long[].class,List.class);
            else
                getSetterNoThrow("setInitialized",long.class);

            getGetter("setId");
            getSetterNoThrow("setId",Integer.class,int.class);                    
            getGetter("setPersonId");
            getSetterNoThrow("setPersonId",Integer.class,int.class);                    
            getGetter("setName");
            getSetterNoThrow("setName",String.class); 
            getGetter("setPapersType");
            getSetterNoThrow("setPapersType",Integer.class,int.class);                    
            getGetter("setPapersNum");
            getSetterNoThrow("setPapersNum",String.class); 
            getGetter("setVerifyTime");
            getSetterNoThrow("setVerifyTime",java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void _fromRight(LogLightBean left, R_LOGLIGHT right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long[] modified;
                if(rightIndexs.size() > 64)
                    modified = (long[])methods.get("getModified").invoke(right);
                else
                    modified = new long[]{(Long)methods.get("getModified").invoke(right)};
                if( bitCheck("id",modified) && (null != (getterMethod = methods.get("getId"))))
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("personId",modified) && (null != (getterMethod = methods.get("getPersonId"))))
                    left.setPersonId(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("name",modified) && (null != (getterMethod = methods.get("getName"))))
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("papersType",modified) && (null != (getterMethod = methods.get("getPapersType"))))
                    left.setPapersType(cast(Integer.class,getterMethod.invoke(right)));
                if( bitCheck("papersNum",modified) && (null != (getterMethod = methods.get("getPapersNum"))))
                    left.setPapersNum(cast(String.class,getterMethod.invoke(right)));
                if( bitCheck("verifyTime",modified) && (null != (getterMethod = methods.get("getVerifyTime"))))
                    left.setVerifyTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                left.isNew((Boolean)methods.get("isNew").invoke(right));
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void _toRight(LogLightBean left, R_LOGLIGHT right) {
            try{
                Method setterMethod;
                long[] modified = new long[(rightIndexs.size() + 63)>>6];
                for(int i = 0 ;i < modified.length; ++i)modified[i] = 0L;
               if(null != (setterMethod = methods.get("setId")) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setId"),left.getId()));
                        bitOR("id",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setPersonId")) && left.checkPersonIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setPersonId"),left.getPersonId()));
                        bitOR("personId",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setName")) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setName"),left.getName()));
                        bitOR("name",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setPapersType")) && left.checkPapersTypeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setPapersType"),left.getPapersType()));
                        bitOR("papersType",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setPapersNum")) && left.checkPapersNumInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setPapersNum"),left.getPapersNum()));
                        bitOR("papersNum",modified);
                    }catch(NullCastPrimitiveException e){}
                }
               if(null != (setterMethod = methods.get("setVerifyTime")) && left.checkVerifyTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get("setVerifyTime"),left.getVerifyTime()));
                        bitOR("verifyTime",modified);
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get("setInitialized"))){
                    if( modified.length > 1)
                        setterMethod.invoke(right,cast(setterParams.get("setInitialized"),modified));
                    else
                        setterMethod.invoke(right,modified[0]);
                }
                methods.get("setNew").invoke(right,left.isNew());
                if( modified.length > 1)
                    methods.get("setModified").invoke(right,cast(setterParams.get("setModified"),modified));
                else
                    methods.get("setModified").invoke(right,modified[0]);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 

}
