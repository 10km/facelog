// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: bean.converter.utils.java.vm
// ______________________________________________________
package net.gdface.facelog.db;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.List;

import net.gdface.facelog.db.IBeanConverter;

import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.LogLightBean;

/**
 * generic type converter classes of {@link IBeanConverter} implementation for fl_device,fl_device_group,fl_face,fl_feature,fl_image,fl_log,fl_permit,fl_person,fl_person_group,fl_store,fl_log_light<br>
 * @author guyadong
 *
 */
public class BeanConverterUtils implements Constant {
    public static final String GET_INITIALIZED = "getInitialized";
    public static final String SET_INITIALIZED = "setInitialized";
    public static final String GET_MODIFIED = "getModified";
    public static final String SET_MODIFIED = "setModified";
    public static final String SET_NEW = "setNew";
    public static final String IS_NEW = "isNew";
    private static class NullCastPrimitiveException extends ClassCastException {
        private static final long serialVersionUID = 1L;
        NullCastPrimitiveException(String message) {
            super(message);
        }
    }
    private BeanConverterUtils(){}
    /**
     * 返回buffer中所有字节(position~limit),不改变buffer状态
     * @param buffer
     * @return
     */
    private static final byte[] getBytesInBuffer(ByteBuffer buffer){
        int pos = buffer.position();
        try{
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);
            return bytes;
        }finally{
            buffer.position(pos);
        }
    }
    private static final List<Long> toList(long[] array) {
        ArrayList<Long> result = new ArrayList<Long>(array.length);
        for (int i = 0; i < array.length; i++) {
            result.add(new Long(array[i]));
        }
        return result;
    }
    private static final long[] toPrimitive(List<Long> list) {        
        long[] dst = new long[list.size()];
        Long element;
        for (int i = 0; i < dst.length; i++) {
            if(null == (element = list.get(i))){
                throw new IllegalArgumentException("can't cast List<Long> to long[] because of null element");
            }
            dst[i] = element.longValue();
        }
        return dst;
    }
    /**
     * {@code source}转为{@code type}指定的类型
     * @param type destination type
     * @param source  source object
     * @return
     */
    @SuppressWarnings({ "unchecked" })
    private static final <T> T cast(Class<T> type,Object source){
        try{
            if(null ==source && type.isPrimitive()){
                throw new NullCastPrimitiveException(String.format("can't convert null to primitive type %s",type.getSimpleName()));
            }
            return (T) source;
        }catch(ClassCastException cce){
            // long[] -> List  
            if(List.class.isAssignableFrom(type) && null != source && source instanceof long[]){
                return (T) toList((long[]) source);
            }
            // List -> long[]   
            if(long[].class == type && null != source && source instanceof List){
                return (T) toPrimitive( (List<Long>) source);
            }
            // Long -> Date
            if(java.util.Date.class.isAssignableFrom(type) && null != source && source instanceof Long){
                try {
                    // call constructor,such as  java.util.Date#Date(long), java.sql.Time.Time(long)
                    return type.getConstructor(long.class).newInstance(source);
                } catch (Exception e) {
                    StringWriter writer = new StringWriter();
                    e.printStackTrace(new PrintWriter(writer));
                    throw new ClassCastException(writer.toString());
                }
            }
            // Date -> Long,long
            if( long.class == type || Long.class == type){
                if(null != source && source instanceof java.util.Date){
                    Long time = ((java.util.Date)source).getTime();
                    return (T)time;
                }
            }
            // byte[] -> ByteBuffer
            if(ByteBuffer.class == type && null != source && source instanceof byte[]){
                return (T) ByteBuffer.wrap((byte[]) source);
            }
            // ByteBuffer -> byte[]
            if(byte[].class == type && null != source && source instanceof ByteBuffer){
                return (T) getBytesInBuffer((ByteBuffer) source);
            }
            throw cce;
        }
    }
    private static final boolean bitCheck(int index,long...bits){
        return 0 != (bits[index>>6]&(1L<<(index&0x3f)));
    }
    private static final long[] bitOR(int index,long... bits){
         bits[index>>6] |= (1L<<(index&0x3f));
         return bits;
    }
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link DeviceBean} and R_DEVICE <br>
     * @author guyadong
     * @param <R_DEVICE> right type
     *
     */
    public static class DeviceBeanConverter<R_DEVICE> extends IBeanConverter.AbstractHandle<DeviceBean,R_DEVICE>{
        static enum Column{
            /** column method info */
            id("getId","setId"),
            groupId("getGroupId","setGroupId"),
            name("getName","setName"),
            version("getVersion","setVersion"),
            serialNo("getSerialNo","setSerialNo"),
            mac("getMac","setMac"),
            remark("getRemark","setRemark"),
            createTime("getCreateTime","setCreateTime"),
            updateTime("getUpdateTime","setUpdateTime");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new DeviceBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_DEVICE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_DEVICE_JAVA_FIELDS}
         */
        public DeviceBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #DeviceBeanConverter(String) */
        public DeviceBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #DeviceBeanConverter(String)}
         */
        public DeviceBeanConverter (Class<DeviceBean> leftClass, Class<R_DEVICE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #DeviceBeanConverter(Class,Class,String) */
        public DeviceBeanConverter (Class<DeviceBean> leftClass, Class<R_DEVICE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_DEVICE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.id.getter);
            getSetterNoThrow(Column.id.setter,Integer.class,int.class);                    
            getGetter(Column.groupId.getter);
            getSetterNoThrow(Column.groupId.setter,Integer.class,int.class);                    
            getGetter(Column.name.getter);
            getSetterNoThrow(Column.name.setter,String.class); 
            getGetter(Column.version.getter);
            getSetterNoThrow(Column.version.setter,String.class); 
            getGetter(Column.serialNo.getter);
            getSetterNoThrow(Column.serialNo.setter,String.class); 
            getGetter(Column.mac.getter);
            getSetterNoThrow(Column.mac.setter,String.class); 
            getGetter(Column.remark.getter);
            getSetterNoThrow(Column.remark.setter,String.class); 
            getGetter(Column.createTime.getter);
            getSetterNoThrow(Column.createTime.setter,java.util.Date.class,Long.class,long.class);  
            getGetter(Column.updateTime.getter);
            getSetterNoThrow(Column.updateTime.setter,java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void doFromRight(DeviceBean left, R_DEVICE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.id.name(),initialized) && (null != (getterMethod = methods.get(Column.id.getter)))){
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.id.name(),modified)){
                        selfModified |= FL_DEVICE_ID_ID_MASK;
                    }
                }
                if( bitCheck(Column.groupId.name(),initialized) && (null != (getterMethod = methods.get(Column.groupId.getter)))){
                    left.setGroupId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.groupId.name(),modified)){
                        selfModified |= FL_DEVICE_ID_GROUP_ID_MASK;
                    }
                }
                if( bitCheck(Column.name.name(),initialized) && (null != (getterMethod = methods.get(Column.name.getter)))){
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.name.name(),modified)){
                        selfModified |= FL_DEVICE_ID_NAME_MASK;
                    }
                }
                if( bitCheck(Column.version.name(),initialized) && (null != (getterMethod = methods.get(Column.version.getter)))){
                    left.setVersion(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.version.name(),modified)){
                        selfModified |= FL_DEVICE_ID_VERSION_MASK;
                    }
                }
                if( bitCheck(Column.serialNo.name(),initialized) && (null != (getterMethod = methods.get(Column.serialNo.getter)))){
                    left.setSerialNo(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.serialNo.name(),modified)){
                        selfModified |= FL_DEVICE_ID_SERIAL_NO_MASK;
                    }
                }
                if( bitCheck(Column.mac.name(),initialized) && (null != (getterMethod = methods.get(Column.mac.getter)))){
                    left.setMac(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.mac.name(),modified)){
                        selfModified |= FL_DEVICE_ID_MAC_MASK;
                    }
                }
                if( bitCheck(Column.remark.name(),initialized) && (null != (getterMethod = methods.get(Column.remark.getter)))){
                    left.setRemark(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.remark.name(),modified)){
                        selfModified |= FL_DEVICE_ID_REMARK_MASK;
                    }
                }
                if( bitCheck(Column.createTime.name(),initialized) && (null != (getterMethod = methods.get(Column.createTime.getter)))){
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.createTime.name(),modified)){
                        selfModified |= FL_DEVICE_ID_CREATE_TIME_MASK;
                    }
                }
                if( bitCheck(Column.updateTime.name(),initialized) && (null != (getterMethod = methods.get(Column.updateTime.getter)))){
                    left.setUpdateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.updateTime.name(),modified)){
                        selfModified |= FL_DEVICE_ID_UPDATE_TIME_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(DeviceBean left, R_DEVICE right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.id.setter)) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.id.setter),left.getId()));
                        bitOR(Column.id.name(),initialized);
                        if(left.checkIdModified()){
                            bitOR(Column.id.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.groupId.setter)) && left.checkGroupIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.groupId.setter),left.getGroupId()));
                        bitOR(Column.groupId.name(),initialized);
                        if(left.checkGroupIdModified()){
                            bitOR(Column.groupId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.name.setter)) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.name.setter),left.getName()));
                        bitOR(Column.name.name(),initialized);
                        if(left.checkNameModified()){
                            bitOR(Column.name.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.version.setter)) && left.checkVersionInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.version.setter),left.getVersion()));
                        bitOR(Column.version.name(),initialized);
                        if(left.checkVersionModified()){
                            bitOR(Column.version.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.serialNo.setter)) && left.checkSerialNoInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.serialNo.setter),left.getSerialNo()));
                        bitOR(Column.serialNo.name(),initialized);
                        if(left.checkSerialNoModified()){
                            bitOR(Column.serialNo.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.mac.setter)) && left.checkMacInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.mac.setter),left.getMac()));
                        bitOR(Column.mac.name(),initialized);
                        if(left.checkMacModified()){
                            bitOR(Column.mac.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.remark.setter)) && left.checkRemarkInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.remark.setter),left.getRemark()));
                        bitOR(Column.remark.name(),initialized);
                        if(left.checkRemarkModified()){
                            bitOR(Column.remark.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_device.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
                if(null != (setterMethod = methods.get(Column.createTime.setter)) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.createTime.setter),left.getCreateTime()));
                        bitOR(Column.createTime.name(),initialized);
                        if(left.checkCreateTimeModified()){
                            bitOR(Column.createTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
*/
// IGNORE field fl_device.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
                if(null != (setterMethod = methods.get(Column.updateTime.setter)) && left.checkUpdateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.updateTime.setter),left.getUpdateTime()));
                        bitOR(Column.updateTime.name(),initialized);
                        if(left.checkUpdateTimeModified()){
                            bitOR(Column.updateTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link DeviceGroupBean} and R_DEVICEGROUP <br>
     * @author guyadong
     * @param <R_DEVICEGROUP> right type
     *
     */
    public static class DeviceGroupBeanConverter<R_DEVICEGROUP> extends IBeanConverter.AbstractHandle<DeviceGroupBean,R_DEVICEGROUP>{
        static enum Column{
            /** column method info */
            id("getId","setId"),
            name("getName","setName"),
            leaf("getLeaf","setLeaf"),
            parent("getParent","setParent"),
            remark("getRemark","setRemark"),
            extBin("getExtBin","setExtBin"),
            extTxt("getExtTxt","setExtTxt");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new DeviceGroupBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_DEVICEGROUP,<br>
         *                   if null or empty, use default string:{@link Constant#FL_DEVICE_GROUP_JAVA_FIELDS}
         */
        public DeviceGroupBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #DeviceGroupBeanConverter(String) */
        public DeviceGroupBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #DeviceGroupBeanConverter(String)}
         */
        public DeviceGroupBeanConverter (Class<DeviceGroupBean> leftClass, Class<R_DEVICEGROUP> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #DeviceGroupBeanConverter(Class,Class,String) */
        public DeviceGroupBeanConverter (Class<DeviceGroupBean> leftClass, Class<R_DEVICEGROUP> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_DEVICE_GROUP_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.id.getter);
            getSetterNoThrow(Column.id.setter,Integer.class,int.class);                    
            getGetter(Column.name.getter);
            getSetterNoThrow(Column.name.setter,String.class); 
            getGetter(Column.leaf.getter);
            getSetterNoThrow(Column.leaf.setter,Integer.class,int.class);                    
            getGetter(Column.parent.getter);
            getSetterNoThrow(Column.parent.setter,Integer.class,int.class);                    
            getGetter(Column.remark.getter);
            getSetterNoThrow(Column.remark.setter,String.class); 
            getGetter(Column.extBin.getter);
            getSetterNoThrow(Column.extBin.setter,java.nio.ByteBuffer.class,byte[].class);                    
            getGetter(Column.extTxt.getter);
            getSetterNoThrow(Column.extTxt.setter,String.class); 
        }
        @Override
        protected void doFromRight(DeviceGroupBean left, R_DEVICEGROUP right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.id.name(),initialized) && (null != (getterMethod = methods.get(Column.id.getter)))){
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.id.name(),modified)){
                        selfModified |= FL_DEVICE_GROUP_ID_ID_MASK;
                    }
                }
                if( bitCheck(Column.name.name(),initialized) && (null != (getterMethod = methods.get(Column.name.getter)))){
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.name.name(),modified)){
                        selfModified |= FL_DEVICE_GROUP_ID_NAME_MASK;
                    }
                }
                if( bitCheck(Column.leaf.name(),initialized) && (null != (getterMethod = methods.get(Column.leaf.getter)))){
                    left.setLeaf(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.leaf.name(),modified)){
                        selfModified |= FL_DEVICE_GROUP_ID_LEAF_MASK;
                    }
                }
                if( bitCheck(Column.parent.name(),initialized) && (null != (getterMethod = methods.get(Column.parent.getter)))){
                    left.setParent(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.parent.name(),modified)){
                        selfModified |= FL_DEVICE_GROUP_ID_PARENT_MASK;
                    }
                }
                if( bitCheck(Column.remark.name(),initialized) && (null != (getterMethod = methods.get(Column.remark.getter)))){
                    left.setRemark(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.remark.name(),modified)){
                        selfModified |= FL_DEVICE_GROUP_ID_REMARK_MASK;
                    }
                }
                if( bitCheck(Column.extBin.name(),initialized) && (null != (getterMethod = methods.get(Column.extBin.getter)))){
                    left.setExtBin(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.extBin.name(),modified)){
                        selfModified |= FL_DEVICE_GROUP_ID_EXT_BIN_MASK;
                    }
                }
                if( bitCheck(Column.extTxt.name(),initialized) && (null != (getterMethod = methods.get(Column.extTxt.getter)))){
                    left.setExtTxt(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.extTxt.name(),modified)){
                        selfModified |= FL_DEVICE_GROUP_ID_EXT_TXT_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(DeviceGroupBean left, R_DEVICEGROUP right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.id.setter)) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.id.setter),left.getId()));
                        bitOR(Column.id.name(),initialized);
                        if(left.checkIdModified()){
                            bitOR(Column.id.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.name.setter)) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.name.setter),left.getName()));
                        bitOR(Column.name.name(),initialized);
                        if(left.checkNameModified()){
                            bitOR(Column.name.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.leaf.setter)) && left.checkLeafInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.leaf.setter),left.getLeaf()));
                        bitOR(Column.leaf.name(),initialized);
                        if(left.checkLeafModified()){
                            bitOR(Column.leaf.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.parent.setter)) && left.checkParentInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.parent.setter),left.getParent()));
                        bitOR(Column.parent.name(),initialized);
                        if(left.checkParentModified()){
                            bitOR(Column.parent.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.remark.setter)) && left.checkRemarkInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.remark.setter),left.getRemark()));
                        bitOR(Column.remark.name(),initialized);
                        if(left.checkRemarkModified()){
                            bitOR(Column.remark.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.extBin.setter)) && left.checkExtBinInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.extBin.setter),left.getExtBin()));
                        bitOR(Column.extBin.name(),initialized);
                        if(left.checkExtBinModified()){
                            bitOR(Column.extBin.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.extTxt.setter)) && left.checkExtTxtInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.extTxt.setter),left.getExtTxt()));
                        bitOR(Column.extTxt.name(),initialized);
                        if(left.checkExtTxtModified()){
                            bitOR(Column.extTxt.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link FaceBean} and R_FACE <br>
     * @author guyadong
     * @param <R_FACE> right type
     *
     */
    public static class FaceBeanConverter<R_FACE> extends IBeanConverter.AbstractHandle<FaceBean,R_FACE>{
        static enum Column{
            /** column method info */
            id("getId","setId"),
            imageMd5("getImageMd5","setImageMd5"),
            faceLeft("getFaceLeft","setFaceLeft"),
            faceTop("getFaceTop","setFaceTop"),
            faceWidth("getFaceWidth","setFaceWidth"),
            faceHeight("getFaceHeight","setFaceHeight"),
            eyeLeftx("getEyeLeftx","setEyeLeftx"),
            eyeLefty("getEyeLefty","setEyeLefty"),
            eyeRightx("getEyeRightx","setEyeRightx"),
            eyeRighty("getEyeRighty","setEyeRighty"),
            mouthX("getMouthX","setMouthX"),
            mouthY("getMouthY","setMouthY"),
            noseX("getNoseX","setNoseX"),
            noseY("getNoseY","setNoseY"),
            angleYaw("getAngleYaw","setAngleYaw"),
            anglePitch("getAnglePitch","setAnglePitch"),
            angleRoll("getAngleRoll","setAngleRoll"),
            extInfo("getExtInfo","setExtInfo"),
            featureMd5("getFeatureMd5","setFeatureMd5"),
            createTime("getCreateTime","setCreateTime");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new FaceBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_FACE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_FACE_JAVA_FIELDS}
         */
        public FaceBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #FaceBeanConverter(String) */
        public FaceBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #FaceBeanConverter(String)}
         */
        public FaceBeanConverter (Class<FaceBean> leftClass, Class<R_FACE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #FaceBeanConverter(Class,Class,String) */
        public FaceBeanConverter (Class<FaceBean> leftClass, Class<R_FACE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_FACE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.id.getter);
            getSetterNoThrow(Column.id.setter,Integer.class,int.class);                    
            getGetter(Column.imageMd5.getter);
            getSetterNoThrow(Column.imageMd5.setter,String.class); 
            getGetter(Column.faceLeft.getter);
            getSetterNoThrow(Column.faceLeft.setter,Integer.class,int.class);                    
            getGetter(Column.faceTop.getter);
            getSetterNoThrow(Column.faceTop.setter,Integer.class,int.class);                    
            getGetter(Column.faceWidth.getter);
            getSetterNoThrow(Column.faceWidth.setter,Integer.class,int.class);                    
            getGetter(Column.faceHeight.getter);
            getSetterNoThrow(Column.faceHeight.setter,Integer.class,int.class);                    
            getGetter(Column.eyeLeftx.getter);
            getSetterNoThrow(Column.eyeLeftx.setter,Integer.class,int.class);                    
            getGetter(Column.eyeLefty.getter);
            getSetterNoThrow(Column.eyeLefty.setter,Integer.class,int.class);                    
            getGetter(Column.eyeRightx.getter);
            getSetterNoThrow(Column.eyeRightx.setter,Integer.class,int.class);                    
            getGetter(Column.eyeRighty.getter);
            getSetterNoThrow(Column.eyeRighty.setter,Integer.class,int.class);                    
            getGetter(Column.mouthX.getter);
            getSetterNoThrow(Column.mouthX.setter,Integer.class,int.class);                    
            getGetter(Column.mouthY.getter);
            getSetterNoThrow(Column.mouthY.setter,Integer.class,int.class);                    
            getGetter(Column.noseX.getter);
            getSetterNoThrow(Column.noseX.setter,Integer.class,int.class);                    
            getGetter(Column.noseY.getter);
            getSetterNoThrow(Column.noseY.setter,Integer.class,int.class);                    
            getGetter(Column.angleYaw.getter);
            getSetterNoThrow(Column.angleYaw.setter,Integer.class,int.class);                    
            getGetter(Column.anglePitch.getter);
            getSetterNoThrow(Column.anglePitch.setter,Integer.class,int.class);                    
            getGetter(Column.angleRoll.getter);
            getSetterNoThrow(Column.angleRoll.setter,Integer.class,int.class);                    
            getGetter(Column.extInfo.getter);
            getSetterNoThrow(Column.extInfo.setter,java.nio.ByteBuffer.class,byte[].class);                    
            getGetter(Column.featureMd5.getter);
            getSetterNoThrow(Column.featureMd5.setter,String.class); 
            getGetter(Column.createTime.getter);
            getSetterNoThrow(Column.createTime.setter,java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void doFromRight(FaceBean left, R_FACE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.id.name(),initialized) && (null != (getterMethod = methods.get(Column.id.getter)))){
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.id.name(),modified)){
                        selfModified |= FL_FACE_ID_ID_MASK;
                    }
                }
                if( bitCheck(Column.imageMd5.name(),initialized) && (null != (getterMethod = methods.get(Column.imageMd5.getter)))){
                    left.setImageMd5(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.imageMd5.name(),modified)){
                        selfModified |= FL_FACE_ID_IMAGE_MD5_MASK;
                    }
                }
                if( bitCheck(Column.faceLeft.name(),initialized) && (null != (getterMethod = methods.get(Column.faceLeft.getter)))){
                    left.setFaceLeft(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.faceLeft.name(),modified)){
                        selfModified |= FL_FACE_ID_FACE_LEFT_MASK;
                    }
                }
                if( bitCheck(Column.faceTop.name(),initialized) && (null != (getterMethod = methods.get(Column.faceTop.getter)))){
                    left.setFaceTop(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.faceTop.name(),modified)){
                        selfModified |= FL_FACE_ID_FACE_TOP_MASK;
                    }
                }
                if( bitCheck(Column.faceWidth.name(),initialized) && (null != (getterMethod = methods.get(Column.faceWidth.getter)))){
                    left.setFaceWidth(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.faceWidth.name(),modified)){
                        selfModified |= FL_FACE_ID_FACE_WIDTH_MASK;
                    }
                }
                if( bitCheck(Column.faceHeight.name(),initialized) && (null != (getterMethod = methods.get(Column.faceHeight.getter)))){
                    left.setFaceHeight(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.faceHeight.name(),modified)){
                        selfModified |= FL_FACE_ID_FACE_HEIGHT_MASK;
                    }
                }
                if( bitCheck(Column.eyeLeftx.name(),initialized) && (null != (getterMethod = methods.get(Column.eyeLeftx.getter)))){
                    left.setEyeLeftx(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.eyeLeftx.name(),modified)){
                        selfModified |= FL_FACE_ID_EYE_LEFTX_MASK;
                    }
                }
                if( bitCheck(Column.eyeLefty.name(),initialized) && (null != (getterMethod = methods.get(Column.eyeLefty.getter)))){
                    left.setEyeLefty(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.eyeLefty.name(),modified)){
                        selfModified |= FL_FACE_ID_EYE_LEFTY_MASK;
                    }
                }
                if( bitCheck(Column.eyeRightx.name(),initialized) && (null != (getterMethod = methods.get(Column.eyeRightx.getter)))){
                    left.setEyeRightx(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.eyeRightx.name(),modified)){
                        selfModified |= FL_FACE_ID_EYE_RIGHTX_MASK;
                    }
                }
                if( bitCheck(Column.eyeRighty.name(),initialized) && (null != (getterMethod = methods.get(Column.eyeRighty.getter)))){
                    left.setEyeRighty(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.eyeRighty.name(),modified)){
                        selfModified |= FL_FACE_ID_EYE_RIGHTY_MASK;
                    }
                }
                if( bitCheck(Column.mouthX.name(),initialized) && (null != (getterMethod = methods.get(Column.mouthX.getter)))){
                    left.setMouthX(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.mouthX.name(),modified)){
                        selfModified |= FL_FACE_ID_MOUTH_X_MASK;
                    }
                }
                if( bitCheck(Column.mouthY.name(),initialized) && (null != (getterMethod = methods.get(Column.mouthY.getter)))){
                    left.setMouthY(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.mouthY.name(),modified)){
                        selfModified |= FL_FACE_ID_MOUTH_Y_MASK;
                    }
                }
                if( bitCheck(Column.noseX.name(),initialized) && (null != (getterMethod = methods.get(Column.noseX.getter)))){
                    left.setNoseX(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.noseX.name(),modified)){
                        selfModified |= FL_FACE_ID_NOSE_X_MASK;
                    }
                }
                if( bitCheck(Column.noseY.name(),initialized) && (null != (getterMethod = methods.get(Column.noseY.getter)))){
                    left.setNoseY(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.noseY.name(),modified)){
                        selfModified |= FL_FACE_ID_NOSE_Y_MASK;
                    }
                }
                if( bitCheck(Column.angleYaw.name(),initialized) && (null != (getterMethod = methods.get(Column.angleYaw.getter)))){
                    left.setAngleYaw(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.angleYaw.name(),modified)){
                        selfModified |= FL_FACE_ID_ANGLE_YAW_MASK;
                    }
                }
                if( bitCheck(Column.anglePitch.name(),initialized) && (null != (getterMethod = methods.get(Column.anglePitch.getter)))){
                    left.setAnglePitch(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.anglePitch.name(),modified)){
                        selfModified |= FL_FACE_ID_ANGLE_PITCH_MASK;
                    }
                }
                if( bitCheck(Column.angleRoll.name(),initialized) && (null != (getterMethod = methods.get(Column.angleRoll.getter)))){
                    left.setAngleRoll(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.angleRoll.name(),modified)){
                        selfModified |= FL_FACE_ID_ANGLE_ROLL_MASK;
                    }
                }
                if( bitCheck(Column.extInfo.name(),initialized) && (null != (getterMethod = methods.get(Column.extInfo.getter)))){
                    left.setExtInfo(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.extInfo.name(),modified)){
                        selfModified |= FL_FACE_ID_EXT_INFO_MASK;
                    }
                }
                if( bitCheck(Column.featureMd5.name(),initialized) && (null != (getterMethod = methods.get(Column.featureMd5.getter)))){
                    left.setFeatureMd5(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.featureMd5.name(),modified)){
                        selfModified |= FL_FACE_ID_FEATURE_MD5_MASK;
                    }
                }
                if( bitCheck(Column.createTime.name(),initialized) && (null != (getterMethod = methods.get(Column.createTime.getter)))){
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.createTime.name(),modified)){
                        selfModified |= FL_FACE_ID_CREATE_TIME_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(FaceBean left, R_FACE right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.id.setter)) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.id.setter),left.getId()));
                        bitOR(Column.id.name(),initialized);
                        if(left.checkIdModified()){
                            bitOR(Column.id.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.imageMd5.setter)) && left.checkImageMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.imageMd5.setter),left.getImageMd5()));
                        bitOR(Column.imageMd5.name(),initialized);
                        if(left.checkImageMd5Modified()){
                            bitOR(Column.imageMd5.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.faceLeft.setter)) && left.checkFaceLeftInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.faceLeft.setter),left.getFaceLeft()));
                        bitOR(Column.faceLeft.name(),initialized);
                        if(left.checkFaceLeftModified()){
                            bitOR(Column.faceLeft.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.faceTop.setter)) && left.checkFaceTopInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.faceTop.setter),left.getFaceTop()));
                        bitOR(Column.faceTop.name(),initialized);
                        if(left.checkFaceTopModified()){
                            bitOR(Column.faceTop.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.faceWidth.setter)) && left.checkFaceWidthInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.faceWidth.setter),left.getFaceWidth()));
                        bitOR(Column.faceWidth.name(),initialized);
                        if(left.checkFaceWidthModified()){
                            bitOR(Column.faceWidth.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.faceHeight.setter)) && left.checkFaceHeightInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.faceHeight.setter),left.getFaceHeight()));
                        bitOR(Column.faceHeight.name(),initialized);
                        if(left.checkFaceHeightModified()){
                            bitOR(Column.faceHeight.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.eyeLeftx.setter)) && left.checkEyeLeftxInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.eyeLeftx.setter),left.getEyeLeftx()));
                        bitOR(Column.eyeLeftx.name(),initialized);
                        if(left.checkEyeLeftxModified()){
                            bitOR(Column.eyeLeftx.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.eyeLefty.setter)) && left.checkEyeLeftyInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.eyeLefty.setter),left.getEyeLefty()));
                        bitOR(Column.eyeLefty.name(),initialized);
                        if(left.checkEyeLeftyModified()){
                            bitOR(Column.eyeLefty.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.eyeRightx.setter)) && left.checkEyeRightxInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.eyeRightx.setter),left.getEyeRightx()));
                        bitOR(Column.eyeRightx.name(),initialized);
                        if(left.checkEyeRightxModified()){
                            bitOR(Column.eyeRightx.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.eyeRighty.setter)) && left.checkEyeRightyInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.eyeRighty.setter),left.getEyeRighty()));
                        bitOR(Column.eyeRighty.name(),initialized);
                        if(left.checkEyeRightyModified()){
                            bitOR(Column.eyeRighty.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.mouthX.setter)) && left.checkMouthXInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.mouthX.setter),left.getMouthX()));
                        bitOR(Column.mouthX.name(),initialized);
                        if(left.checkMouthXModified()){
                            bitOR(Column.mouthX.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.mouthY.setter)) && left.checkMouthYInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.mouthY.setter),left.getMouthY()));
                        bitOR(Column.mouthY.name(),initialized);
                        if(left.checkMouthYModified()){
                            bitOR(Column.mouthY.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.noseX.setter)) && left.checkNoseXInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.noseX.setter),left.getNoseX()));
                        bitOR(Column.noseX.name(),initialized);
                        if(left.checkNoseXModified()){
                            bitOR(Column.noseX.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.noseY.setter)) && left.checkNoseYInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.noseY.setter),left.getNoseY()));
                        bitOR(Column.noseY.name(),initialized);
                        if(left.checkNoseYModified()){
                            bitOR(Column.noseY.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.angleYaw.setter)) && left.checkAngleYawInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.angleYaw.setter),left.getAngleYaw()));
                        bitOR(Column.angleYaw.name(),initialized);
                        if(left.checkAngleYawModified()){
                            bitOR(Column.angleYaw.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.anglePitch.setter)) && left.checkAnglePitchInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.anglePitch.setter),left.getAnglePitch()));
                        bitOR(Column.anglePitch.name(),initialized);
                        if(left.checkAnglePitchModified()){
                            bitOR(Column.anglePitch.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.angleRoll.setter)) && left.checkAngleRollInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.angleRoll.setter),left.getAngleRoll()));
                        bitOR(Column.angleRoll.name(),initialized);
                        if(left.checkAngleRollModified()){
                            bitOR(Column.angleRoll.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.extInfo.setter)) && left.checkExtInfoInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.extInfo.setter),left.getExtInfo()));
                        bitOR(Column.extInfo.name(),initialized);
                        if(left.checkExtInfoModified()){
                            bitOR(Column.extInfo.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.featureMd5.setter)) && left.checkFeatureMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.featureMd5.setter),left.getFeatureMd5()));
                        bitOR(Column.featureMd5.name(),initialized);
                        if(left.checkFeatureMd5Modified()){
                            bitOR(Column.featureMd5.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_face.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
                if(null != (setterMethod = methods.get(Column.createTime.setter)) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.createTime.setter),left.getCreateTime()));
                        bitOR(Column.createTime.name(),initialized);
                        if(left.checkCreateTimeModified()){
                            bitOR(Column.createTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link FeatureBean} and R_FEATURE <br>
     * @author guyadong
     * @param <R_FEATURE> right type
     *
     */
    public static class FeatureBeanConverter<R_FEATURE> extends IBeanConverter.AbstractHandle<FeatureBean,R_FEATURE>{
        static enum Column{
            /** column method info */
            md5("getMd5","setMd5"),
            personId("getPersonId","setPersonId"),
            feature("getFeature","setFeature"),
            updateTime("getUpdateTime","setUpdateTime");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new FeatureBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_FEATURE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_FEATURE_JAVA_FIELDS}
         */
        public FeatureBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #FeatureBeanConverter(String) */
        public FeatureBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #FeatureBeanConverter(String)}
         */
        public FeatureBeanConverter (Class<FeatureBean> leftClass, Class<R_FEATURE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #FeatureBeanConverter(Class,Class,String) */
        public FeatureBeanConverter (Class<FeatureBean> leftClass, Class<R_FEATURE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_FEATURE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.md5.getter);
            getSetterNoThrow(Column.md5.setter,String.class); 
            getGetter(Column.personId.getter);
            getSetterNoThrow(Column.personId.setter,Integer.class,int.class);                    
            getGetter(Column.feature.getter);
            getSetterNoThrow(Column.feature.setter,java.nio.ByteBuffer.class,byte[].class);                    
            getGetter(Column.updateTime.getter);
            getSetterNoThrow(Column.updateTime.setter,java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void doFromRight(FeatureBean left, R_FEATURE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.md5.name(),initialized) && (null != (getterMethod = methods.get(Column.md5.getter)))){
                    left.setMd5(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.md5.name(),modified)){
                        selfModified |= FL_FEATURE_ID_MD5_MASK;
                    }
                }
                if( bitCheck(Column.personId.name(),initialized) && (null != (getterMethod = methods.get(Column.personId.getter)))){
                    left.setPersonId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.personId.name(),modified)){
                        selfModified |= FL_FEATURE_ID_PERSON_ID_MASK;
                    }
                }
                if( bitCheck(Column.feature.name(),initialized) && (null != (getterMethod = methods.get(Column.feature.getter)))){
                    left.setFeature(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.feature.name(),modified)){
                        selfModified |= FL_FEATURE_ID_FEATURE_MASK;
                    }
                }
                if( bitCheck(Column.updateTime.name(),initialized) && (null != (getterMethod = methods.get(Column.updateTime.getter)))){
                    left.setUpdateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.updateTime.name(),modified)){
                        selfModified |= FL_FEATURE_ID_UPDATE_TIME_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(FeatureBean left, R_FEATURE right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.md5.setter)) && left.checkMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.md5.setter),left.getMd5()));
                        bitOR(Column.md5.name(),initialized);
                        if(left.checkMd5Modified()){
                            bitOR(Column.md5.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.personId.setter)) && left.checkPersonIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.personId.setter),left.getPersonId()));
                        bitOR(Column.personId.name(),initialized);
                        if(left.checkPersonIdModified()){
                            bitOR(Column.personId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.feature.setter)) && left.checkFeatureInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.feature.setter),left.getFeature()));
                        bitOR(Column.feature.name(),initialized);
                        if(left.checkFeatureModified()){
                            bitOR(Column.feature.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_feature.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
                if(null != (setterMethod = methods.get(Column.updateTime.setter)) && left.checkUpdateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.updateTime.setter),left.getUpdateTime()));
                        bitOR(Column.updateTime.name(),initialized);
                        if(left.checkUpdateTimeModified()){
                            bitOR(Column.updateTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link ImageBean} and R_IMAGE <br>
     * @author guyadong
     * @param <R_IMAGE> right type
     *
     */
    public static class ImageBeanConverter<R_IMAGE> extends IBeanConverter.AbstractHandle<ImageBean,R_IMAGE>{
        static enum Column{
            /** column method info */
            md5("getMd5","setMd5"),
            format("getFormat","setFormat"),
            width("getWidth","setWidth"),
            height("getHeight","setHeight"),
            depth("getDepth","setDepth"),
            faceNum("getFaceNum","setFaceNum"),
            thumbMd5("getThumbMd5","setThumbMd5"),
            deviceId("getDeviceId","setDeviceId");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new ImageBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_IMAGE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_IMAGE_JAVA_FIELDS}
         */
        public ImageBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #ImageBeanConverter(String) */
        public ImageBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #ImageBeanConverter(String)}
         */
        public ImageBeanConverter (Class<ImageBean> leftClass, Class<R_IMAGE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #ImageBeanConverter(Class,Class,String) */
        public ImageBeanConverter (Class<ImageBean> leftClass, Class<R_IMAGE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_IMAGE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.md5.getter);
            getSetterNoThrow(Column.md5.setter,String.class); 
            getGetter(Column.format.getter);
            getSetterNoThrow(Column.format.setter,String.class); 
            getGetter(Column.width.getter);
            getSetterNoThrow(Column.width.setter,Integer.class,int.class);                    
            getGetter(Column.height.getter);
            getSetterNoThrow(Column.height.setter,Integer.class,int.class);                    
            getGetter(Column.depth.getter);
            getSetterNoThrow(Column.depth.setter,Integer.class,int.class);                    
            getGetter(Column.faceNum.getter);
            getSetterNoThrow(Column.faceNum.setter,Integer.class,int.class);                    
            getGetter(Column.thumbMd5.getter);
            getSetterNoThrow(Column.thumbMd5.setter,String.class); 
            getGetter(Column.deviceId.getter);
            getSetterNoThrow(Column.deviceId.setter,Integer.class,int.class);                    
        }
        @Override
        protected void doFromRight(ImageBean left, R_IMAGE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.md5.name(),initialized) && (null != (getterMethod = methods.get(Column.md5.getter)))){
                    left.setMd5(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.md5.name(),modified)){
                        selfModified |= FL_IMAGE_ID_MD5_MASK;
                    }
                }
                if( bitCheck(Column.format.name(),initialized) && (null != (getterMethod = methods.get(Column.format.getter)))){
                    left.setFormat(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.format.name(),modified)){
                        selfModified |= FL_IMAGE_ID_FORMAT_MASK;
                    }
                }
                if( bitCheck(Column.width.name(),initialized) && (null != (getterMethod = methods.get(Column.width.getter)))){
                    left.setWidth(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.width.name(),modified)){
                        selfModified |= FL_IMAGE_ID_WIDTH_MASK;
                    }
                }
                if( bitCheck(Column.height.name(),initialized) && (null != (getterMethod = methods.get(Column.height.getter)))){
                    left.setHeight(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.height.name(),modified)){
                        selfModified |= FL_IMAGE_ID_HEIGHT_MASK;
                    }
                }
                if( bitCheck(Column.depth.name(),initialized) && (null != (getterMethod = methods.get(Column.depth.getter)))){
                    left.setDepth(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.depth.name(),modified)){
                        selfModified |= FL_IMAGE_ID_DEPTH_MASK;
                    }
                }
                if( bitCheck(Column.faceNum.name(),initialized) && (null != (getterMethod = methods.get(Column.faceNum.getter)))){
                    left.setFaceNum(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.faceNum.name(),modified)){
                        selfModified |= FL_IMAGE_ID_FACE_NUM_MASK;
                    }
                }
                if( bitCheck(Column.thumbMd5.name(),initialized) && (null != (getterMethod = methods.get(Column.thumbMd5.getter)))){
                    left.setThumbMd5(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.thumbMd5.name(),modified)){
                        selfModified |= FL_IMAGE_ID_THUMB_MD5_MASK;
                    }
                }
                if( bitCheck(Column.deviceId.name(),initialized) && (null != (getterMethod = methods.get(Column.deviceId.getter)))){
                    left.setDeviceId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.deviceId.name(),modified)){
                        selfModified |= FL_IMAGE_ID_DEVICE_ID_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(ImageBean left, R_IMAGE right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.md5.setter)) && left.checkMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.md5.setter),left.getMd5()));
                        bitOR(Column.md5.name(),initialized);
                        if(left.checkMd5Modified()){
                            bitOR(Column.md5.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.format.setter)) && left.checkFormatInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.format.setter),left.getFormat()));
                        bitOR(Column.format.name(),initialized);
                        if(left.checkFormatModified()){
                            bitOR(Column.format.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.width.setter)) && left.checkWidthInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.width.setter),left.getWidth()));
                        bitOR(Column.width.name(),initialized);
                        if(left.checkWidthModified()){
                            bitOR(Column.width.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.height.setter)) && left.checkHeightInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.height.setter),left.getHeight()));
                        bitOR(Column.height.name(),initialized);
                        if(left.checkHeightModified()){
                            bitOR(Column.height.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.depth.setter)) && left.checkDepthInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.depth.setter),left.getDepth()));
                        bitOR(Column.depth.name(),initialized);
                        if(left.checkDepthModified()){
                            bitOR(Column.depth.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.faceNum.setter)) && left.checkFaceNumInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.faceNum.setter),left.getFaceNum()));
                        bitOR(Column.faceNum.name(),initialized);
                        if(left.checkFaceNumModified()){
                            bitOR(Column.faceNum.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.thumbMd5.setter)) && left.checkThumbMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.thumbMd5.setter),left.getThumbMd5()));
                        bitOR(Column.thumbMd5.name(),initialized);
                        if(left.checkThumbMd5Modified()){
                            bitOR(Column.thumbMd5.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.deviceId.setter)) && left.checkDeviceIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.deviceId.setter),left.getDeviceId()));
                        bitOR(Column.deviceId.name(),initialized);
                        if(left.checkDeviceIdModified()){
                            bitOR(Column.deviceId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link LogBean} and R_LOG <br>
     * @author guyadong
     * @param <R_LOG> right type
     *
     */
    public static class LogBeanConverter<R_LOG> extends IBeanConverter.AbstractHandle<LogBean,R_LOG>{
        static enum Column{
            /** column method info */
            id("getId","setId"),
            personId("getPersonId","setPersonId"),
            deviceId("getDeviceId","setDeviceId"),
            verifyFeature("getVerifyFeature","setVerifyFeature"),
            compareFace("getCompareFace","setCompareFace"),
            verifyStatus("getVerifyStatus","setVerifyStatus"),
            similarty("getSimilarty","setSimilarty"),
            verifyTime("getVerifyTime","setVerifyTime"),
            createTime("getCreateTime","setCreateTime");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new LogBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_LOG,<br>
         *                   if null or empty, use default string:{@link Constant#FL_LOG_JAVA_FIELDS}
         */
        public LogBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #LogBeanConverter(String) */
        public LogBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #LogBeanConverter(String)}
         */
        public LogBeanConverter (Class<LogBean> leftClass, Class<R_LOG> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #LogBeanConverter(Class,Class,String) */
        public LogBeanConverter (Class<LogBean> leftClass, Class<R_LOG> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_LOG_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.id.getter);
            getSetterNoThrow(Column.id.setter,Integer.class,int.class);                    
            getGetter(Column.personId.getter);
            getSetterNoThrow(Column.personId.setter,Integer.class,int.class);                    
            getGetter(Column.deviceId.getter);
            getSetterNoThrow(Column.deviceId.setter,Integer.class,int.class);                    
            getGetter(Column.verifyFeature.getter);
            getSetterNoThrow(Column.verifyFeature.setter,String.class); 
            getGetter(Column.compareFace.getter);
            getSetterNoThrow(Column.compareFace.setter,Integer.class,int.class);                    
            getGetter(Column.verifyStatus.getter);
            getSetterNoThrow(Column.verifyStatus.setter,Integer.class,int.class);                    
            getGetter(Column.similarty.getter);
            getSetterNoThrow(Column.similarty.setter,Double.class,double.class);                    
            getGetter(Column.verifyTime.getter);
            getSetterNoThrow(Column.verifyTime.setter,java.util.Date.class,Long.class,long.class);  
            getGetter(Column.createTime.getter);
            getSetterNoThrow(Column.createTime.setter,java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void doFromRight(LogBean left, R_LOG right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.id.name(),initialized) && (null != (getterMethod = methods.get(Column.id.getter)))){
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.id.name(),modified)){
                        selfModified |= FL_LOG_ID_ID_MASK;
                    }
                }
                if( bitCheck(Column.personId.name(),initialized) && (null != (getterMethod = methods.get(Column.personId.getter)))){
                    left.setPersonId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.personId.name(),modified)){
                        selfModified |= FL_LOG_ID_PERSON_ID_MASK;
                    }
                }
                if( bitCheck(Column.deviceId.name(),initialized) && (null != (getterMethod = methods.get(Column.deviceId.getter)))){
                    left.setDeviceId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.deviceId.name(),modified)){
                        selfModified |= FL_LOG_ID_DEVICE_ID_MASK;
                    }
                }
                if( bitCheck(Column.verifyFeature.name(),initialized) && (null != (getterMethod = methods.get(Column.verifyFeature.getter)))){
                    left.setVerifyFeature(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.verifyFeature.name(),modified)){
                        selfModified |= FL_LOG_ID_VERIFY_FEATURE_MASK;
                    }
                }
                if( bitCheck(Column.compareFace.name(),initialized) && (null != (getterMethod = methods.get(Column.compareFace.getter)))){
                    left.setCompareFace(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.compareFace.name(),modified)){
                        selfModified |= FL_LOG_ID_COMPARE_FACE_MASK;
                    }
                }
                if( bitCheck(Column.verifyStatus.name(),initialized) && (null != (getterMethod = methods.get(Column.verifyStatus.getter)))){
                    left.setVerifyStatus(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.verifyStatus.name(),modified)){
                        selfModified |= FL_LOG_ID_VERIFY_STATUS_MASK;
                    }
                }
                if( bitCheck(Column.similarty.name(),initialized) && (null != (getterMethod = methods.get(Column.similarty.getter)))){
                    left.setSimilarty(cast(Double.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.similarty.name(),modified)){
                        selfModified |= FL_LOG_ID_SIMILARTY_MASK;
                    }
                }
                if( bitCheck(Column.verifyTime.name(),initialized) && (null != (getterMethod = methods.get(Column.verifyTime.getter)))){
                    left.setVerifyTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.verifyTime.name(),modified)){
                        selfModified |= FL_LOG_ID_VERIFY_TIME_MASK;
                    }
                }
                if( bitCheck(Column.createTime.name(),initialized) && (null != (getterMethod = methods.get(Column.createTime.getter)))){
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.createTime.name(),modified)){
                        selfModified |= FL_LOG_ID_CREATE_TIME_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(LogBean left, R_LOG right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.id.setter)) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.id.setter),left.getId()));
                        bitOR(Column.id.name(),initialized);
                        if(left.checkIdModified()){
                            bitOR(Column.id.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.personId.setter)) && left.checkPersonIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.personId.setter),left.getPersonId()));
                        bitOR(Column.personId.name(),initialized);
                        if(left.checkPersonIdModified()){
                            bitOR(Column.personId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.deviceId.setter)) && left.checkDeviceIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.deviceId.setter),left.getDeviceId()));
                        bitOR(Column.deviceId.name(),initialized);
                        if(left.checkDeviceIdModified()){
                            bitOR(Column.deviceId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.verifyFeature.setter)) && left.checkVerifyFeatureInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.verifyFeature.setter),left.getVerifyFeature()));
                        bitOR(Column.verifyFeature.name(),initialized);
                        if(left.checkVerifyFeatureModified()){
                            bitOR(Column.verifyFeature.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.compareFace.setter)) && left.checkCompareFaceInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.compareFace.setter),left.getCompareFace()));
                        bitOR(Column.compareFace.name(),initialized);
                        if(left.checkCompareFaceModified()){
                            bitOR(Column.compareFace.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.verifyStatus.setter)) && left.checkVerifyStatusInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.verifyStatus.setter),left.getVerifyStatus()));
                        bitOR(Column.verifyStatus.name(),initialized);
                        if(left.checkVerifyStatusModified()){
                            bitOR(Column.verifyStatus.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.similarty.setter)) && left.checkSimilartyInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.similarty.setter),left.getSimilarty()));
                        bitOR(Column.similarty.name(),initialized);
                        if(left.checkSimilartyModified()){
                            bitOR(Column.similarty.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.verifyTime.setter)) && left.checkVerifyTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.verifyTime.setter),left.getVerifyTime()));
                        bitOR(Column.verifyTime.name(),initialized);
                        if(left.checkVerifyTimeModified()){
                            bitOR(Column.verifyTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_log.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
                if(null != (setterMethod = methods.get(Column.createTime.setter)) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.createTime.setter),left.getCreateTime()));
                        bitOR(Column.createTime.name(),initialized);
                        if(left.checkCreateTimeModified()){
                            bitOR(Column.createTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link PermitBean} and R_PERMIT <br>
     * @author guyadong
     * @param <R_PERMIT> right type
     *
     */
    public static class PermitBeanConverter<R_PERMIT> extends IBeanConverter.AbstractHandle<PermitBean,R_PERMIT>{
        static enum Column{
            /** column method info */
            deviceGroupId("getDeviceGroupId","setDeviceGroupId"),
            personGroupId("getPersonGroupId","setPersonGroupId"),
            remark("getRemark","setRemark"),
            extBin("getExtBin","setExtBin"),
            extTxt("getExtTxt","setExtTxt"),
            createTime("getCreateTime","setCreateTime");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new PermitBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_PERMIT,<br>
         *                   if null or empty, use default string:{@link Constant#FL_PERMIT_JAVA_FIELDS}
         */
        public PermitBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #PermitBeanConverter(String) */
        public PermitBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #PermitBeanConverter(String)}
         */
        public PermitBeanConverter (Class<PermitBean> leftClass, Class<R_PERMIT> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #PermitBeanConverter(Class,Class,String) */
        public PermitBeanConverter (Class<PermitBean> leftClass, Class<R_PERMIT> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_PERMIT_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.deviceGroupId.getter);
            getSetterNoThrow(Column.deviceGroupId.setter,Integer.class,int.class);                    
            getGetter(Column.personGroupId.getter);
            getSetterNoThrow(Column.personGroupId.setter,Integer.class,int.class);                    
            getGetter(Column.remark.getter);
            getSetterNoThrow(Column.remark.setter,String.class); 
            getGetter(Column.extBin.getter);
            getSetterNoThrow(Column.extBin.setter,java.nio.ByteBuffer.class,byte[].class);                    
            getGetter(Column.extTxt.getter);
            getSetterNoThrow(Column.extTxt.setter,String.class); 
            getGetter(Column.createTime.getter);
            getSetterNoThrow(Column.createTime.setter,java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void doFromRight(PermitBean left, R_PERMIT right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.deviceGroupId.name(),initialized) && (null != (getterMethod = methods.get(Column.deviceGroupId.getter)))){
                    left.setDeviceGroupId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.deviceGroupId.name(),modified)){
                        selfModified |= FL_PERMIT_ID_DEVICE_GROUP_ID_MASK;
                    }
                }
                if( bitCheck(Column.personGroupId.name(),initialized) && (null != (getterMethod = methods.get(Column.personGroupId.getter)))){
                    left.setPersonGroupId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.personGroupId.name(),modified)){
                        selfModified |= FL_PERMIT_ID_PERSON_GROUP_ID_MASK;
                    }
                }
                if( bitCheck(Column.remark.name(),initialized) && (null != (getterMethod = methods.get(Column.remark.getter)))){
                    left.setRemark(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.remark.name(),modified)){
                        selfModified |= FL_PERMIT_ID_REMARK_MASK;
                    }
                }
                if( bitCheck(Column.extBin.name(),initialized) && (null != (getterMethod = methods.get(Column.extBin.getter)))){
                    left.setExtBin(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.extBin.name(),modified)){
                        selfModified |= FL_PERMIT_ID_EXT_BIN_MASK;
                    }
                }
                if( bitCheck(Column.extTxt.name(),initialized) && (null != (getterMethod = methods.get(Column.extTxt.getter)))){
                    left.setExtTxt(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.extTxt.name(),modified)){
                        selfModified |= FL_PERMIT_ID_EXT_TXT_MASK;
                    }
                }
                if( bitCheck(Column.createTime.name(),initialized) && (null != (getterMethod = methods.get(Column.createTime.getter)))){
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.createTime.name(),modified)){
                        selfModified |= FL_PERMIT_ID_CREATE_TIME_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(PermitBean left, R_PERMIT right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.deviceGroupId.setter)) && left.checkDeviceGroupIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.deviceGroupId.setter),left.getDeviceGroupId()));
                        bitOR(Column.deviceGroupId.name(),initialized);
                        if(left.checkDeviceGroupIdModified()){
                            bitOR(Column.deviceGroupId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.personGroupId.setter)) && left.checkPersonGroupIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.personGroupId.setter),left.getPersonGroupId()));
                        bitOR(Column.personGroupId.name(),initialized);
                        if(left.checkPersonGroupIdModified()){
                            bitOR(Column.personGroupId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.remark.setter)) && left.checkRemarkInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.remark.setter),left.getRemark()));
                        bitOR(Column.remark.name(),initialized);
                        if(left.checkRemarkModified()){
                            bitOR(Column.remark.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.extBin.setter)) && left.checkExtBinInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.extBin.setter),left.getExtBin()));
                        bitOR(Column.extBin.name(),initialized);
                        if(left.checkExtBinModified()){
                            bitOR(Column.extBin.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.extTxt.setter)) && left.checkExtTxtInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.extTxt.setter),left.getExtTxt()));
                        bitOR(Column.extTxt.name(),initialized);
                        if(left.checkExtTxtModified()){
                            bitOR(Column.extTxt.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_permit.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
                if(null != (setterMethod = methods.get(Column.createTime.setter)) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.createTime.setter),left.getCreateTime()));
                        bitOR(Column.createTime.name(),initialized);
                        if(left.checkCreateTimeModified()){
                            bitOR(Column.createTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link PersonBean} and R_PERSON <br>
     * @author guyadong
     * @param <R_PERSON> right type
     *
     */
    public static class PersonBeanConverter<R_PERSON> extends IBeanConverter.AbstractHandle<PersonBean,R_PERSON>{
        static enum Column{
            /** column method info */
            id("getId","setId"),
            groupId("getGroupId","setGroupId"),
            name("getName","setName"),
            sex("getSex","setSex"),
            rank("getRank","setRank"),
            password("getPassword","setPassword"),
            birthdate("getBirthdate","setBirthdate"),
            mobilePhone("getMobilePhone","setMobilePhone"),
            papersType("getPapersType","setPapersType"),
            papersNum("getPapersNum","setPapersNum"),
            imageMd5("getImageMd5","setImageMd5"),
            expiryDate("getExpiryDate","setExpiryDate"),
            remark("getRemark","setRemark"),
            createTime("getCreateTime","setCreateTime"),
            updateTime("getUpdateTime","setUpdateTime");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new PersonBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_PERSON,<br>
         *                   if null or empty, use default string:{@link Constant#FL_PERSON_JAVA_FIELDS}
         */
        public PersonBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #PersonBeanConverter(String) */
        public PersonBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #PersonBeanConverter(String)}
         */
        public PersonBeanConverter (Class<PersonBean> leftClass, Class<R_PERSON> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #PersonBeanConverter(Class,Class,String) */
        public PersonBeanConverter (Class<PersonBean> leftClass, Class<R_PERSON> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_PERSON_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.id.getter);
            getSetterNoThrow(Column.id.setter,Integer.class,int.class);                    
            getGetter(Column.groupId.getter);
            getSetterNoThrow(Column.groupId.setter,Integer.class,int.class);                    
            getGetter(Column.name.getter);
            getSetterNoThrow(Column.name.setter,String.class); 
            getGetter(Column.sex.getter);
            getSetterNoThrow(Column.sex.setter,Integer.class,int.class);                    
            getGetter(Column.rank.getter);
            getSetterNoThrow(Column.rank.setter,Integer.class,int.class);                    
            getGetter(Column.password.getter);
            getSetterNoThrow(Column.password.setter,String.class); 
            getGetter(Column.birthdate.getter);
            getSetterNoThrow(Column.birthdate.setter,java.util.Date.class,Long.class,long.class);  
            getGetter(Column.mobilePhone.getter);
            getSetterNoThrow(Column.mobilePhone.setter,String.class); 
            getGetter(Column.papersType.getter);
            getSetterNoThrow(Column.papersType.setter,Integer.class,int.class);                    
            getGetter(Column.papersNum.getter);
            getSetterNoThrow(Column.papersNum.setter,String.class); 
            getGetter(Column.imageMd5.getter);
            getSetterNoThrow(Column.imageMd5.setter,String.class); 
            getGetter(Column.expiryDate.getter);
            getSetterNoThrow(Column.expiryDate.setter,java.util.Date.class,Long.class,long.class);  
            getGetter(Column.remark.getter);
            getSetterNoThrow(Column.remark.setter,String.class); 
            getGetter(Column.createTime.getter);
            getSetterNoThrow(Column.createTime.setter,java.util.Date.class,Long.class,long.class);  
            getGetter(Column.updateTime.getter);
            getSetterNoThrow(Column.updateTime.setter,java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void doFromRight(PersonBean left, R_PERSON right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.id.name(),initialized) && (null != (getterMethod = methods.get(Column.id.getter)))){
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.id.name(),modified)){
                        selfModified |= FL_PERSON_ID_ID_MASK;
                    }
                }
                if( bitCheck(Column.groupId.name(),initialized) && (null != (getterMethod = methods.get(Column.groupId.getter)))){
                    left.setGroupId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.groupId.name(),modified)){
                        selfModified |= FL_PERSON_ID_GROUP_ID_MASK;
                    }
                }
                if( bitCheck(Column.name.name(),initialized) && (null != (getterMethod = methods.get(Column.name.getter)))){
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.name.name(),modified)){
                        selfModified |= FL_PERSON_ID_NAME_MASK;
                    }
                }
                if( bitCheck(Column.sex.name(),initialized) && (null != (getterMethod = methods.get(Column.sex.getter)))){
                    left.setSex(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.sex.name(),modified)){
                        selfModified |= FL_PERSON_ID_SEX_MASK;
                    }
                }
                if( bitCheck(Column.rank.name(),initialized) && (null != (getterMethod = methods.get(Column.rank.getter)))){
                    left.setRank(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.rank.name(),modified)){
                        selfModified |= FL_PERSON_ID_RANK_MASK;
                    }
                }
                if( bitCheck(Column.password.name(),initialized) && (null != (getterMethod = methods.get(Column.password.getter)))){
                    left.setPassword(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.password.name(),modified)){
                        selfModified |= FL_PERSON_ID_PASSWORD_MASK;
                    }
                }
                if( bitCheck(Column.birthdate.name(),initialized) && (null != (getterMethod = methods.get(Column.birthdate.getter)))){
                    left.setBirthdate(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.birthdate.name(),modified)){
                        selfModified |= FL_PERSON_ID_BIRTHDATE_MASK;
                    }
                }
                if( bitCheck(Column.mobilePhone.name(),initialized) && (null != (getterMethod = methods.get(Column.mobilePhone.getter)))){
                    left.setMobilePhone(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.mobilePhone.name(),modified)){
                        selfModified |= FL_PERSON_ID_MOBILE_PHONE_MASK;
                    }
                }
                if( bitCheck(Column.papersType.name(),initialized) && (null != (getterMethod = methods.get(Column.papersType.getter)))){
                    left.setPapersType(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.papersType.name(),modified)){
                        selfModified |= FL_PERSON_ID_PAPERS_TYPE_MASK;
                    }
                }
                if( bitCheck(Column.papersNum.name(),initialized) && (null != (getterMethod = methods.get(Column.papersNum.getter)))){
                    left.setPapersNum(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.papersNum.name(),modified)){
                        selfModified |= FL_PERSON_ID_PAPERS_NUM_MASK;
                    }
                }
                if( bitCheck(Column.imageMd5.name(),initialized) && (null != (getterMethod = methods.get(Column.imageMd5.getter)))){
                    left.setImageMd5(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.imageMd5.name(),modified)){
                        selfModified |= FL_PERSON_ID_IMAGE_MD5_MASK;
                    }
                }
                if( bitCheck(Column.expiryDate.name(),initialized) && (null != (getterMethod = methods.get(Column.expiryDate.getter)))){
                    left.setExpiryDate(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.expiryDate.name(),modified)){
                        selfModified |= FL_PERSON_ID_EXPIRY_DATE_MASK;
                    }
                }
                if( bitCheck(Column.remark.name(),initialized) && (null != (getterMethod = methods.get(Column.remark.getter)))){
                    left.setRemark(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.remark.name(),modified)){
                        selfModified |= FL_PERSON_ID_REMARK_MASK;
                    }
                }
                if( bitCheck(Column.createTime.name(),initialized) && (null != (getterMethod = methods.get(Column.createTime.getter)))){
                    left.setCreateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.createTime.name(),modified)){
                        selfModified |= FL_PERSON_ID_CREATE_TIME_MASK;
                    }
                }
                if( bitCheck(Column.updateTime.name(),initialized) && (null != (getterMethod = methods.get(Column.updateTime.getter)))){
                    left.setUpdateTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.updateTime.name(),modified)){
                        selfModified |= FL_PERSON_ID_UPDATE_TIME_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(PersonBean left, R_PERSON right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.id.setter)) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.id.setter),left.getId()));
                        bitOR(Column.id.name(),initialized);
                        if(left.checkIdModified()){
                            bitOR(Column.id.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.groupId.setter)) && left.checkGroupIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.groupId.setter),left.getGroupId()));
                        bitOR(Column.groupId.name(),initialized);
                        if(left.checkGroupIdModified()){
                            bitOR(Column.groupId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.name.setter)) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.name.setter),left.getName()));
                        bitOR(Column.name.name(),initialized);
                        if(left.checkNameModified()){
                            bitOR(Column.name.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.sex.setter)) && left.checkSexInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.sex.setter),left.getSex()));
                        bitOR(Column.sex.name(),initialized);
                        if(left.checkSexModified()){
                            bitOR(Column.sex.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.rank.setter)) && left.checkRankInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.rank.setter),left.getRank()));
                        bitOR(Column.rank.name(),initialized);
                        if(left.checkRankModified()){
                            bitOR(Column.rank.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.password.setter)) && left.checkPasswordInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.password.setter),left.getPassword()));
                        bitOR(Column.password.name(),initialized);
                        if(left.checkPasswordModified()){
                            bitOR(Column.password.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.birthdate.setter)) && left.checkBirthdateInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.birthdate.setter),left.getBirthdate()));
                        bitOR(Column.birthdate.name(),initialized);
                        if(left.checkBirthdateModified()){
                            bitOR(Column.birthdate.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.mobilePhone.setter)) && left.checkMobilePhoneInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.mobilePhone.setter),left.getMobilePhone()));
                        bitOR(Column.mobilePhone.name(),initialized);
                        if(left.checkMobilePhoneModified()){
                            bitOR(Column.mobilePhone.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.papersType.setter)) && left.checkPapersTypeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.papersType.setter),left.getPapersType()));
                        bitOR(Column.papersType.name(),initialized);
                        if(left.checkPapersTypeModified()){
                            bitOR(Column.papersType.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.papersNum.setter)) && left.checkPapersNumInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.papersNum.setter),left.getPapersNum()));
                        bitOR(Column.papersNum.name(),initialized);
                        if(left.checkPapersNumModified()){
                            bitOR(Column.papersNum.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.imageMd5.setter)) && left.checkImageMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.imageMd5.setter),left.getImageMd5()));
                        bitOR(Column.imageMd5.name(),initialized);
                        if(left.checkImageMd5Modified()){
                            bitOR(Column.imageMd5.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.expiryDate.setter)) && left.checkExpiryDateInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.expiryDate.setter),left.getExpiryDate()));
                        bitOR(Column.expiryDate.name(),initialized);
                        if(left.checkExpiryDateModified()){
                            bitOR(Column.expiryDate.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.remark.setter)) && left.checkRemarkInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.remark.setter),left.getRemark()));
                        bitOR(Column.remark.name(),initialized);
                        if(left.checkRemarkModified()){
                            bitOR(Column.remark.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
// IGNORE field fl_person.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
                if(null != (setterMethod = methods.get(Column.createTime.setter)) && left.checkCreateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.createTime.setter),left.getCreateTime()));
                        bitOR(Column.createTime.name(),initialized);
                        if(left.checkCreateTimeModified()){
                            bitOR(Column.createTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
*/
// IGNORE field fl_person.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
                if(null != (setterMethod = methods.get(Column.updateTime.setter)) && left.checkUpdateTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.updateTime.setter),left.getUpdateTime()));
                        bitOR(Column.updateTime.name(),initialized);
                        if(left.checkUpdateTimeModified()){
                            bitOR(Column.updateTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
*/
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link PersonGroupBean} and R_PERSONGROUP <br>
     * @author guyadong
     * @param <R_PERSONGROUP> right type
     *
     */
    public static class PersonGroupBeanConverter<R_PERSONGROUP> extends IBeanConverter.AbstractHandle<PersonGroupBean,R_PERSONGROUP>{
        static enum Column{
            /** column method info */
            id("getId","setId"),
            name("getName","setName"),
            leaf("getLeaf","setLeaf"),
            parent("getParent","setParent"),
            remark("getRemark","setRemark"),
            extBin("getExtBin","setExtBin"),
            extTxt("getExtTxt","setExtTxt");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new PersonGroupBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_PERSONGROUP,<br>
         *                   if null or empty, use default string:{@link Constant#FL_PERSON_GROUP_JAVA_FIELDS}
         */
        public PersonGroupBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #PersonGroupBeanConverter(String) */
        public PersonGroupBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #PersonGroupBeanConverter(String)}
         */
        public PersonGroupBeanConverter (Class<PersonGroupBean> leftClass, Class<R_PERSONGROUP> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #PersonGroupBeanConverter(Class,Class,String) */
        public PersonGroupBeanConverter (Class<PersonGroupBean> leftClass, Class<R_PERSONGROUP> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_PERSON_GROUP_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.id.getter);
            getSetterNoThrow(Column.id.setter,Integer.class,int.class);                    
            getGetter(Column.name.getter);
            getSetterNoThrow(Column.name.setter,String.class); 
            getGetter(Column.leaf.getter);
            getSetterNoThrow(Column.leaf.setter,Integer.class,int.class);                    
            getGetter(Column.parent.getter);
            getSetterNoThrow(Column.parent.setter,Integer.class,int.class);                    
            getGetter(Column.remark.getter);
            getSetterNoThrow(Column.remark.setter,String.class); 
            getGetter(Column.extBin.getter);
            getSetterNoThrow(Column.extBin.setter,java.nio.ByteBuffer.class,byte[].class);                    
            getGetter(Column.extTxt.getter);
            getSetterNoThrow(Column.extTxt.setter,String.class); 
        }
        @Override
        protected void doFromRight(PersonGroupBean left, R_PERSONGROUP right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.id.name(),initialized) && (null != (getterMethod = methods.get(Column.id.getter)))){
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.id.name(),modified)){
                        selfModified |= FL_PERSON_GROUP_ID_ID_MASK;
                    }
                }
                if( bitCheck(Column.name.name(),initialized) && (null != (getterMethod = methods.get(Column.name.getter)))){
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.name.name(),modified)){
                        selfModified |= FL_PERSON_GROUP_ID_NAME_MASK;
                    }
                }
                if( bitCheck(Column.leaf.name(),initialized) && (null != (getterMethod = methods.get(Column.leaf.getter)))){
                    left.setLeaf(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.leaf.name(),modified)){
                        selfModified |= FL_PERSON_GROUP_ID_LEAF_MASK;
                    }
                }
                if( bitCheck(Column.parent.name(),initialized) && (null != (getterMethod = methods.get(Column.parent.getter)))){
                    left.setParent(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.parent.name(),modified)){
                        selfModified |= FL_PERSON_GROUP_ID_PARENT_MASK;
                    }
                }
                if( bitCheck(Column.remark.name(),initialized) && (null != (getterMethod = methods.get(Column.remark.getter)))){
                    left.setRemark(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.remark.name(),modified)){
                        selfModified |= FL_PERSON_GROUP_ID_REMARK_MASK;
                    }
                }
                if( bitCheck(Column.extBin.name(),initialized) && (null != (getterMethod = methods.get(Column.extBin.getter)))){
                    left.setExtBin(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.extBin.name(),modified)){
                        selfModified |= FL_PERSON_GROUP_ID_EXT_BIN_MASK;
                    }
                }
                if( bitCheck(Column.extTxt.name(),initialized) && (null != (getterMethod = methods.get(Column.extTxt.getter)))){
                    left.setExtTxt(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.extTxt.name(),modified)){
                        selfModified |= FL_PERSON_GROUP_ID_EXT_TXT_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(PersonGroupBean left, R_PERSONGROUP right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.id.setter)) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.id.setter),left.getId()));
                        bitOR(Column.id.name(),initialized);
                        if(left.checkIdModified()){
                            bitOR(Column.id.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.name.setter)) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.name.setter),left.getName()));
                        bitOR(Column.name.name(),initialized);
                        if(left.checkNameModified()){
                            bitOR(Column.name.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.leaf.setter)) && left.checkLeafInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.leaf.setter),left.getLeaf()));
                        bitOR(Column.leaf.name(),initialized);
                        if(left.checkLeafModified()){
                            bitOR(Column.leaf.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.parent.setter)) && left.checkParentInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.parent.setter),left.getParent()));
                        bitOR(Column.parent.name(),initialized);
                        if(left.checkParentModified()){
                            bitOR(Column.parent.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.remark.setter)) && left.checkRemarkInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.remark.setter),left.getRemark()));
                        bitOR(Column.remark.name(),initialized);
                        if(left.checkRemarkModified()){
                            bitOR(Column.remark.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.extBin.setter)) && left.checkExtBinInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.extBin.setter),left.getExtBin()));
                        bitOR(Column.extBin.name(),initialized);
                        if(left.checkExtBinModified()){
                            bitOR(Column.extBin.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.extTxt.setter)) && left.checkExtTxtInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.extTxt.setter),left.getExtTxt()));
                        bitOR(Column.extTxt.name(),initialized);
                        if(left.checkExtTxtModified()){
                            bitOR(Column.extTxt.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link StoreBean} and R_STORE <br>
     * @author guyadong
     * @param <R_STORE> right type
     *
     */
    public static class StoreBeanConverter<R_STORE> extends IBeanConverter.AbstractHandle<StoreBean,R_STORE>{
        static enum Column{
            /** column method info */
            md5("getMd5","setMd5"),
            encoding("getEncoding","setEncoding"),
            data("getData","setData");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new StoreBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_STORE,<br>
         *                   if null or empty, use default string:{@link Constant#FL_STORE_JAVA_FIELDS}
         */
        public StoreBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #StoreBeanConverter(String) */
        public StoreBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #StoreBeanConverter(String)}
         */
        public StoreBeanConverter (Class<StoreBean> leftClass, Class<R_STORE> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #StoreBeanConverter(Class,Class,String) */
        public StoreBeanConverter (Class<StoreBean> leftClass, Class<R_STORE> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_STORE_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.md5.getter);
            getSetterNoThrow(Column.md5.setter,String.class); 
            getGetter(Column.encoding.getter);
            getSetterNoThrow(Column.encoding.setter,String.class); 
            getGetter(Column.data.getter);
            getSetterNoThrow(Column.data.setter,java.nio.ByteBuffer.class,byte[].class);                    
        }
        @Override
        protected void doFromRight(StoreBean left, R_STORE right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.md5.name(),initialized) && (null != (getterMethod = methods.get(Column.md5.getter)))){
                    left.setMd5(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.md5.name(),modified)){
                        selfModified |= FL_STORE_ID_MD5_MASK;
                    }
                }
                if( bitCheck(Column.encoding.name(),initialized) && (null != (getterMethod = methods.get(Column.encoding.getter)))){
                    left.setEncoding(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.encoding.name(),modified)){
                        selfModified |= FL_STORE_ID_ENCODING_MASK;
                    }
                }
                if( bitCheck(Column.data.name(),initialized) && (null != (getterMethod = methods.get(Column.data.getter)))){
                    left.setData(cast(java.nio.ByteBuffer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.data.name(),modified)){
                        selfModified |= FL_STORE_ID_DATA_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(StoreBean left, R_STORE right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.md5.setter)) && left.checkMd5Initialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.md5.setter),left.getMd5()));
                        bitOR(Column.md5.name(),initialized);
                        if(left.checkMd5Modified()){
                            bitOR(Column.md5.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.encoding.setter)) && left.checkEncodingInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.encoding.setter),left.getEncoding()));
                        bitOR(Column.encoding.name(),initialized);
                        if(left.checkEncodingModified()){
                            bitOR(Column.encoding.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.data.setter)) && left.checkDataInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.data.setter),left.getData()));
                        bitOR(Column.data.name(),initialized);
                        if(left.checkDataModified()){
                            bitOR(Column.data.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
    /**
     * implementation of {@link IBeanConverter} by reflect<br>
     * generic type converter between {@link LogLightBean} and R_LOGLIGHT <br>
     * @author guyadong
     * @param <R_LOGLIGHT> right type
     *
     */
    public static class LogLightBeanConverter<R_LOGLIGHT> extends IBeanConverter.AbstractHandle<LogLightBean,R_LOGLIGHT>{
        static enum Column{
            /** column method info */
            id("getId","setId"),
            personId("getPersonId","setPersonId"),
            name("getName","setName"),
            papersType("getPapersType","setPapersType"),
            papersNum("getPapersNum","setPapersNum"),
            verifyTime("getVerifyTime","setVerifyTime");
            final String getter;
            final String setter;
            Column(String getter,String setter){
                this.getter = setter;
                this.setter = setter;
            }
        }
        private final Map<String,Method> methods = new Hashtable<String,Method>();
        private final Map<String,Integer> rightIndexs = new Hashtable<String,Integer>();
        private final Map<String, Class<?>> setterParams = new Hashtable<String,Class<?>>();

        private boolean bitCheck(String name,long...bits){
            Integer id = rightIndexs.get(name);
            return (null == id)?false:BeanConverterUtils.bitCheck(id.intValue(),bits);
        }
        private long[] bitOR(String name,long... bits){
            return BeanConverterUtils.bitOR(rightIndexs.get(name),bits);
        }
        private void getGetter(String name){
            try{
                methods.put(name,rightType.getMethod(name));
            }catch(NoSuchMethodException e){}
        }
        private void getSetter(String name, Class<?>...types) throws NoSuchMethodException{
            for(Class<?>paramType:types){
                try{
                    methods.put(name,rightType.getMethod(name,paramType));
                    setterParams.put(name, paramType);
                    return;
                }catch(NoSuchMethodException e){
                    continue;
                }
            }
            throw new NoSuchMethodException();
        }
        private void getSetterNoThrow(String name, Class<?>...types){
            try{
                getSetter(name,types);
            }catch(NoSuchMethodException e){}
        }
        /** 
         * usage: <pre>new LogLightBeanConverter&lt;Model&gt;(javaFields){};</pre>
         * @param javaFields a comma splice string,including all field name of R_LOGLIGHT,<br>
         *                   if null or empty, use default string:{@link Constant#FL_LOG_LIGHT_JAVA_FIELDS}
         */
        public LogLightBeanConverter(String javaFields){
            super();
            init(javaFields);
        }
        /** @see #LogLightBeanConverter(String) */
        public LogLightBeanConverter(){
            this(null);
        }
        /**
         * constructor
         * @param leftClass
         * @param rightClass
         * @param javaFields see also {@link #LogLightBeanConverter(String)}
         */
        public LogLightBeanConverter (Class<LogLightBean> leftClass, Class<R_LOGLIGHT> rightClass,String javaFields){
            super(leftClass,rightClass);
            init(javaFields);
        }
        /** @see #LogLightBeanConverter(Class,Class,String) */
        public LogLightBeanConverter (Class<LogLightBean> leftClass, Class<R_LOGLIGHT> rightClass){
            this(leftClass,rightClass,null);
        }
        private void init(String javaFields){
            if(null == javaFields || javaFields.isEmpty()){
                javaFields = FL_LOG_LIGHT_JAVA_FIELDS;
            }
            String []rightFields = javaFields.split(",");
            for(int i = 0 ; i < rightFields.length; ++i){
                String field = rightFields[i].trim();
                if(!field.matches("\\w+")){
                    throw new IllegalArgumentException("invalid 'javaFields':" + javaFields);
                }
                rightIndexs.put(field,i);
            }
            try{
                methods.put(IS_NEW,rightType.getMethod(IS_NEW));
                methods.put(GET_INITIALIZED,rightType.getMethod(GET_INITIALIZED));
                getSetter(SET_NEW,boolean.class);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_INITIALIZED,long[].class,List.class);
                }else{
                    getSetter(SET_INITIALIZED,long.class);
                }
                getGetter(GET_MODIFIED);
                if(rightIndexs.size() > LONG_BIT_NUM){
                    getSetter(SET_MODIFIED,long[].class,List.class);
                }else{
                    getSetter(SET_MODIFIED,long.class);
                }
            }catch(NoSuchMethodException e){
                throw new RuntimeException(e);
            }

            getGetter(Column.id.getter);
            getSetterNoThrow(Column.id.setter,Integer.class,int.class);                    
            getGetter(Column.personId.getter);
            getSetterNoThrow(Column.personId.setter,Integer.class,int.class);                    
            getGetter(Column.name.getter);
            getSetterNoThrow(Column.name.setter,String.class); 
            getGetter(Column.papersType.getter);
            getSetterNoThrow(Column.papersType.setter,Integer.class,int.class);                    
            getGetter(Column.papersNum.getter);
            getSetterNoThrow(Column.papersNum.setter,String.class); 
            getGetter(Column.verifyTime.getter);
            getSetterNoThrow(Column.verifyTime.setter,java.util.Date.class,Long.class,long.class);  
        }
        @Override
        protected void doFromRight(LogLightBean left, R_LOGLIGHT right) {
            try{
                Method getterMethod;
                left.resetIsModified();
                long selfModified = 0L;
                long[] initialized;
                long[] modified;
                if(rightIndexs.size() > LONG_BIT_NUM){
                    initialized = (long[])methods.get(GET_INITIALIZED).invoke(right);
                    modified = (long[])methods.get(GET_MODIFIED).invoke(right);
                }else{
                    initialized = new long[]{(Long)methods.get(GET_INITIALIZED).invoke(right)};
                    modified = new long[]{(Long)methods.get(GET_MODIFIED).invoke(right)};
                }
                if( bitCheck(Column.id.name(),initialized) && (null != (getterMethod = methods.get(Column.id.getter)))){
                    left.setId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.id.name(),modified)){
                        selfModified |= FL_LOG_LIGHT_ID_ID_MASK;
                    }
                }
                if( bitCheck(Column.personId.name(),initialized) && (null != (getterMethod = methods.get(Column.personId.getter)))){
                    left.setPersonId(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.personId.name(),modified)){
                        selfModified |= FL_LOG_LIGHT_ID_PERSON_ID_MASK;
                    }
                }
                if( bitCheck(Column.name.name(),initialized) && (null != (getterMethod = methods.get(Column.name.getter)))){
                    left.setName(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.name.name(),modified)){
                        selfModified |= FL_LOG_LIGHT_ID_NAME_MASK;
                    }
                }
                if( bitCheck(Column.papersType.name(),initialized) && (null != (getterMethod = methods.get(Column.papersType.getter)))){
                    left.setPapersType(cast(Integer.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.papersType.name(),modified)){
                        selfModified |= FL_LOG_LIGHT_ID_PAPERS_TYPE_MASK;
                    }
                }
                if( bitCheck(Column.papersNum.name(),initialized) && (null != (getterMethod = methods.get(Column.papersNum.getter)))){
                    left.setPapersNum(cast(String.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.papersNum.name(),modified)){
                        selfModified |= FL_LOG_LIGHT_ID_PAPERS_NUM_MASK;
                    }
                }
                if( bitCheck(Column.verifyTime.name(),initialized) && (null != (getterMethod = methods.get(Column.verifyTime.getter)))){
                    left.setVerifyTime(cast(java.util.Date.class,getterMethod.invoke(right)));
                    if(bitCheck(Column.verifyTime.name(),modified)){
                        selfModified |= FL_LOG_LIGHT_ID_VERIFY_TIME_MASK;
                    }
                }
                left.isNew((Boolean)methods.get(IS_NEW).invoke(right));
                left.setModified(selfModified);
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }

        @Override
        protected void doToRight(LogLightBean left, R_LOGLIGHT right) {
            try{
                Method setterMethod;
                long[] initialized = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                long[] modified = new long[(rightIndexs.size() + LONG_BIT_NUM - 1)>>6];
                Arrays.fill(initialized, 0L);
                Arrays.fill(modified, 0L);
                if(null != (setterMethod = methods.get(Column.id.setter)) && left.checkIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.id.setter),left.getId()));
                        bitOR(Column.id.name(),initialized);
                        if(left.checkIdModified()){
                            bitOR(Column.id.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.personId.setter)) && left.checkPersonIdInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.personId.setter),left.getPersonId()));
                        bitOR(Column.personId.name(),initialized);
                        if(left.checkPersonIdModified()){
                            bitOR(Column.personId.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.name.setter)) && left.checkNameInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.name.setter),left.getName()));
                        bitOR(Column.name.name(),initialized);
                        if(left.checkNameModified()){
                            bitOR(Column.name.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.papersType.setter)) && left.checkPapersTypeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.papersType.setter),left.getPapersType()));
                        bitOR(Column.papersType.name(),initialized);
                        if(left.checkPapersTypeModified()){
                            bitOR(Column.papersType.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.papersNum.setter)) && left.checkPapersNumInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.papersNum.setter),left.getPapersNum()));
                        bitOR(Column.papersNum.name(),initialized);
                        if(left.checkPapersNumModified()){
                            bitOR(Column.papersNum.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(Column.verifyTime.setter)) && left.checkVerifyTimeInitialized()){
                    try{
                        setterMethod.invoke(right,cast(setterParams.get(Column.verifyTime.setter),left.getVerifyTime()));
                        bitOR(Column.verifyTime.name(),initialized);
                        if(left.checkVerifyTimeModified()){
                            bitOR(Column.verifyTime.name(),modified);
                        }
                    }catch(NullCastPrimitiveException e){}
                }
                if(null != (setterMethod = methods.get(SET_MODIFIED))){
                    if( initialized.length > 1){
                        setterMethod.invoke(right,cast(setterParams.get(SET_MODIFIED),initialized));
                    }else{
                        setterMethod.invoke(right,initialized[0]);
                    }
                }
                methods.get(SET_NEW).invoke(right,left.isNew());
                if( initialized.length > 1){
                    methods.get(SET_INITIALIZED).invoke(right,cast(setterParams.get(SET_INITIALIZED),initialized));
                    methods.get(SET_MODIFIED).invoke(right,cast(setterParams.get(SET_MODIFIED),modified));
                }else{
                    methods.get(SET_INITIALIZED).invoke(right,initialized[0]);
                    methods.get(SET_MODIFIED).invoke(right,modified[0]);
                }
            }catch(RuntimeException e){
                throw e;
            }catch(Exception e){
                throw new RuntimeException(e);
            }
        }
    }; 
}
