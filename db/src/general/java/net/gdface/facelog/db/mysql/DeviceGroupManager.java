// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.java.vm
// ______________________________________________________
package net.gdface.facelog.db.mysql;

import java.util.concurrent.Callable;

import net.gdface.facelog.db.Constant;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.TableManager;
import net.gdface.facelog.db.IDeviceGroupManager;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.facelog.db.TableListener;
import net.gdface.facelog.db.exception.WrapDAOException;
import net.gdface.facelog.db.exception.ObjectRetrievalException;

import net.gdface.facelog.dborm.exception.DAOException;

/**
 * Handles database calls (save, load, count, etc...) for the fl_device_group table.<br>
 * all {@link DAOException} be wrapped as {@link WrapDAOException} to throw.<br>
 * Remarks: 设备组信息<br>
 * @author guyadong
 */
public class DeviceGroupManager extends TableManager.Adapter<DeviceGroupBean> implements IDeviceGroupManager
{
    private net.gdface.facelog.dborm.device.FlDeviceGroupManager nativeManager = net.gdface.facelog.dborm.device.FlDeviceGroupManager.getInstance();
    private IDbConverter<
                        net.gdface.facelog.dborm.device.FlDeviceBean,
                        net.gdface.facelog.dborm.device.FlDeviceGroupBean,
                        net.gdface.facelog.dborm.face.FlFaceBean,
                        net.gdface.facelog.dborm.face.FlFeatureBean,
                        net.gdface.facelog.dborm.image.FlImageBean,
                        net.gdface.facelog.dborm.log.FlLogBean,
                        net.gdface.facelog.dborm.permit.FlPermitBean,
                        net.gdface.facelog.dborm.person.FlPersonBean,
                        net.gdface.facelog.dborm.person.FlPersonGroupBean,
                        net.gdface.facelog.dborm.image.FlStoreBean,
                        net.gdface.facelog.dborm.log.FlLogLightBean> dbConverter = DbConverter.INSTANCE;
    private IBeanConverter<DeviceGroupBean,net.gdface.facelog.dborm.device.FlDeviceGroupBean> beanConverter = dbConverter.getDeviceGroupBeanConverter();
    private static DeviceGroupManager singleton = new DeviceGroupManager();
    protected DeviceGroupManager(){}
    
    protected DeviceManager instanceOfDeviceManager(){
        return DeviceManager.getInstance();
    }
    protected PermitManager instanceOfPermitManager(){
        return PermitManager.getInstance();
    }
    protected PersonGroupManager instanceOfPersonGroupManager(){
        return PersonGroupManager.getInstance();
    }
    protected DeviceGroupManager instanceOfDeviceGroupManager(){
        return this;
    }
    /**
    * @return table name
    */
    public String getTableName() {
        return this.nativeManager.getTableName();
    }

    /**
    * @return field names of table
    */
    public String getFields() {
        return this.nativeManager.getFields();
    }
    
    public String getFullFields() {
        return this.nativeManager.getFullFields();
    }
    
    /**
    * @return primarykeyNames
    */
    public String[] getPrimarykeyNames() {
        return this.nativeManager.getPrimarykeyNames();
    }
    
    /**
     * Get the {@link DeviceGroupManager} singleton.
     *
     * @return {@link DeviceGroupManager}
     */
    public static DeviceGroupManager getInstance()
    {
        return singleton;
    }
   
    @Override
    protected Class<DeviceGroupBean> _beanType(){
        return DeviceGroupBean.class;
    }
    
    public IDbConverter<net.gdface.facelog.dborm.device.FlDeviceBean,net.gdface.facelog.dborm.device.FlDeviceGroupBean,net.gdface.facelog.dborm.face.FlFaceBean,net.gdface.facelog.dborm.face.FlFeatureBean,net.gdface.facelog.dborm.image.FlImageBean,net.gdface.facelog.dborm.log.FlLogBean,net.gdface.facelog.dborm.permit.FlPermitBean,net.gdface.facelog.dborm.person.FlPersonBean,net.gdface.facelog.dborm.person.FlPersonGroupBean,net.gdface.facelog.dborm.image.FlStoreBean,net.gdface.facelog.dborm.log.FlLogLightBean> getDbConverter() {
        return dbConverter;
    }

    /**
     * set  {@link IDbConverter} as converter used by manager.<br>
     * throw {@link NullPointerException} if {@code dbConverter} is null
     * @param dbConverter
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public synchronized void setDbConverter(IDbConverter dbConverter) {
        if( null == dbConverter)
            throw new NullPointerException();
        this.dbConverter = dbConverter;
        this.beanConverter = this.dbConverter.getDeviceGroupBeanConverter();
    }
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    //1 override IDeviceGroupManager
    @Override 
    public DeviceGroupBean loadByPrimaryKey(Integer id)
    {
        try{
            return loadByPrimaryKeyChecked(id);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    //1.1 override IDeviceGroupManager
    @Override
    public DeviceGroupBean loadByPrimaryKeyChecked(Integer id) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(nativeManager.loadByPrimaryKeyChecked(id));
        }catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e){
            throw new ObjectRetrievalException();
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //1.2
    @Override
    public DeviceGroupBean loadByPrimaryKey(DeviceGroupBean bean)
    {
        return bean==null?null:loadByPrimaryKey(bean.getId());
    }

    //1.2.2
    @Override
    public DeviceGroupBean loadByPrimaryKeyChecked(DeviceGroupBean bean) throws ObjectRetrievalException
    {
        if(null == bean)
            throw new NullPointerException();
        return loadByPrimaryKeyChecked(bean.getId());
    }
    
    //1.3
    @Override
    public DeviceGroupBean loadByPrimaryKey(Object ...keys){
        try{
            return loadByPrimaryKeyChecked(keys);
        }catch(ObjectRetrievalException e){
            // not found
            return null;
        }
    }
    
    //1.3.2
    @Override
    public DeviceGroupBean loadByPrimaryKeyChecked(Object ...keys) throws ObjectRetrievalException{
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1)
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
          return loadByPrimaryKeyChecked((Integer)keys[0]);
    }

    //1.4 override IDeviceGroupManager
    @Override 
    public boolean existsPrimaryKey(Integer id)
    {
        try{
            return nativeManager.existsPrimaryKey(id);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //1.6
    @Override
    public boolean existsByPrimaryKey(DeviceGroupBean bean)
    {
        return null == bean ? false : existsPrimaryKey(bean.getId());
    }
    //1.7
    @Override
    public DeviceGroupBean checkDuplicate(DeviceGroupBean bean)throws ObjectRetrievalException{
        if(null != bean)
            checkDuplicate(bean.getId());            
        return bean;   
    }
    //1.4.1 override IDeviceGroupManager
    @Override 
    public Integer checkDuplicate(Integer id)throws ObjectRetrievalException{
        try{
            return this.nativeManager.checkDuplicate(id);
        }catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e){
        	throw new ObjectRetrievalException(e);
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //1.8 override IDeviceGroupManager
    @Override 
    public java.util.List<DeviceGroupBean> loadByPrimaryKey(int... keys){
        if(null == keys)return new java.util.ArrayList<DeviceGroupBean>();
        java.util.ArrayList<DeviceGroupBean> list = new java.util.ArrayList<DeviceGroupBean>(keys.length);
        for(int i = 0 ;i< keys.length;++i){
            list.add(loadByPrimaryKey(keys[i]));
        }
        return list;
    }
    //1.9 override IDeviceGroupManager
    @Override 
    public java.util.List<DeviceGroupBean> loadByPrimaryKey(java.util.Collection<Integer> keys){
        if(null == keys )return new java.util.ArrayList<DeviceGroupBean>();
        java.util.ArrayList<DeviceGroupBean> list = new java.util.ArrayList<DeviceGroupBean>(keys.size());
        if(keys instanceof java.util.List){
            for(Integer key: keys){
                list.add(loadByPrimaryKey(key));
            }
        }else{
            DeviceGroupBean bean;
            for(Integer key: keys){
                if(null != (bean = loadByPrimaryKey(key)))
                    list.add(bean);
            }
        }
        return list;
    }
    //2 override IDeviceGroupManager
    @Override 
    public int deleteByPrimaryKey(Integer id)
    {
        try
        {
            return nativeManager.deleteByPrimaryKey(id);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //2
    @Override
    public int delete(DeviceGroupBean bean){
        try
        {
            return nativeManager.delete(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }   
    }
    //2.1
    @Override
    public int deleteByPrimaryKey(Object ...keys){
        if(null == keys)
            throw new NullPointerException();
        if(keys.length != 1 )
            throw new IllegalArgumentException("argument number mismatch with primary key number");
        if(! (keys[0] instanceof Integer))
            throw new IllegalArgumentException("invalid type for the No.1 argument,expected type:Integer");
        return deleteByPrimaryKey((Integer)keys[0]);
    }
    //2.2 override IDeviceGroupManager
    @Override 
    public int deleteByPrimaryKey(int... keys){
        if(null == keys)return 0;
        int count = 0;
        for(int key:keys){
            count += deleteByPrimaryKey(key);
        }
        return count;
    }
    //2.3 override IDeviceGroupManager
    @Override 
    public int deleteByPrimaryKey(java.util.Collection<Integer> keys){
        if(null == keys)return 0;
        int count = 0;
        for(Integer key :keys){
            count += deleteByPrimaryKey(key);
        }
        return count;
    }
    //2.4 override IDeviceGroupManager
    @Override 
    public int delete(DeviceGroupBean... beans){
        if(null == beans)return 0;
        int count = 0;
        for(DeviceGroupBean bean :beans){
            count += delete(bean);
        }
        return count;
    }
    //2.5 override IDeviceGroupManager
    @Override 
    public int delete(java.util.Collection<DeviceGroupBean> beans){
        if(null == beans)return 0;
        int count = 0;
        for(DeviceGroupBean bean :beans){
            count += delete(bean);
        }
        return count;
    }
 
    //////////////////////////////////////
    // IMPORT KEY GENERIC METHOD
    //////////////////////////////////////
    
    private static final Class<?>[] importedBeanTypes = new Class<?>[]{DeviceBean.class,DeviceGroupBean.class,PermitBean.class};

    /**
     * @see #getImportedBeansAsList(DeviceGroupBean,int)
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T[] getImportedBeans(DeviceGroupBean bean, int ikIndex){
        return getImportedBeansAsList(bean, ikIndex).toArray((T[])java.lang.reflect.Array.newInstance(importedBeanTypes[ikIndex],0));
    }
    
    /**
     * Retrieves imported T objects by ikIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID} -> {@link DeviceBean}</li>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT} -> {@link DeviceGroupBean}</li>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID} -> {@link PermitBean}</li>
     * </ul>
     * @param bean the {@link DeviceGroupBean} object to use
     * @param ikIndex valid values: {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID},{@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT},{@link Constant#FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID}
     * @return the associated T beans or {@code null} if {@code bean} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> java.util.List<T> getImportedBeansAsList(DeviceGroupBean bean,int ikIndex){
        switch(ikIndex){
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID:
            return (java.util.List<T>)this.getDeviceBeansByGroupIdAsList(bean);
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT:
            return (java.util.List<T>)this.getDeviceGroupBeansByParentAsList(bean);
        case FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID:
            return (java.util.List<T>)this.getPermitBeansByDeviceGroupIdAsList(bean);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the T objects as imported beans of bean object by ikIndex.<br>
     * @param <T>
     * 
     * <ul>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID} -> {@link DeviceBean}</li>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT} -> {@link DeviceGroupBean}</li>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID} -> {@link PermitBean}</li>
     * </ul>
     * @param bean the {@link DeviceGroupBean} object to use
     * @param importedBeans the FlPermitBean array to associate to the {@link DeviceGroupBean}
     * @param ikIndex valid values: {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID},{@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT},{@link Constant#FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID}
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T[] setImportedBeans(DeviceGroupBean bean,T[] importedBeans,int ikIndex){
        switch(ikIndex){
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID:
            return (T[])setDeviceBeansByGroupId(bean,(DeviceBean[])importedBeans);
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT:
            return (T[])setDeviceGroupBeansByParent(bean,(DeviceGroupBean[])importedBeans);
        case FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID:
            return (T[])setPermitBeansByDeviceGroupId(bean,(PermitBean[])importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
    /**
     * Set the importedBeans associates to the bean by ikIndex<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID} -> {@link DeviceBean}</li>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT} -> {@link DeviceGroupBean}</li>
     *     <li> {@link Constant#FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID} -> {@link PermitBean}</li>
     * </ul>
     * @param bean the {@link DeviceGroupBean} object to use
     * @param importedBeans the <T> object to associate to the {@link DeviceGroupBean}
     * @param ikIndex valid values: {@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID},{@link Constant#FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT},{@link Constant#FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID}
     * @return importedBeans always
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>,C extends java.util.Collection<T>> C setImportedBeans(DeviceGroupBean bean,C importedBeans,int ikIndex){
        switch(ikIndex){
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_ID:
            return (C)setDeviceBeansByGroupId(bean,(java.util.Collection<DeviceBean>)importedBeans);
        case FL_DEVICE_GROUP_IK_FL_DEVICE_GROUP_PARENT:
            return (C)setDeviceGroupBeansByParent(bean,(java.util.Collection<DeviceGroupBean>)importedBeans);
        case FL_DEVICE_GROUP_IK_FL_PERMIT_DEVICE_GROUP_ID:
            return (C)setPermitBeansByDeviceGroupId(bean,(java.util.Collection<PermitBean>)importedBeans);
        }
        throw new IllegalArgumentException(String.format("invalid ikIndex %d", ikIndex));
    }
 

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    //3.1 GET IMPORTED override IDeviceGroupManager
    @Override 
    public DeviceBean[] getDeviceBeansByGroupId(DeviceGroupBean bean)
    {
        return this.getDeviceBeansByGroupIdAsList(bean).toArray(new DeviceBean[0]);
    }
    //3.1.2 GET IMPORTED override IDeviceGroupManager
    @Override
    public DeviceBean[] getDeviceBeansByGroupId(Integer idOfDeviceGroup)
    {
        DeviceGroupBean bean = new DeviceGroupBean();
        bean.setId(idOfDeviceGroup);
        return getDeviceBeansByGroupId(bean);
    }
    //3.2 GET IMPORTED override IDeviceGroupManager
    @Override 
    public java.util.List<DeviceBean> getDeviceBeansByGroupIdAsList(DeviceGroupBean bean)
    {
        return getDeviceBeansByGroupIdAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED override IDeviceGroupManager
    @Override
    public java.util.List<DeviceBean> getDeviceBeansByGroupIdAsList(Integer idOfDeviceGroup)
    {
         DeviceGroupBean bean = new DeviceGroupBean();
        bean.setId(idOfDeviceGroup);
        return getDeviceBeansByGroupIdAsList(bean);
    }
    //3.2.3 DELETE IMPORTED override IDeviceGroupManager
    @Override
    public int deleteDeviceBeansByGroupId(Integer idOfDeviceGroup)
    {
        java.util.List<DeviceBean> list =getDeviceBeansByGroupIdAsList(idOfDeviceGroup);
        return instanceOfDeviceManager().delete(list);
    }
    //3.2.4 GET IMPORTED override IDeviceGroupManager
    @Override 
    public java.util.List<DeviceBean> getDeviceBeansByGroupIdAsList(DeviceGroupBean bean,int startRow, int numRows)
    {
        try {
            return this.dbConverter.getDeviceBeanConverter().fromRight(nativeManager.getDeviceBeansByGroupIdAsList( this.beanConverter.toRight(bean),startRow,numRows));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //3.3 SET IMPORTED override IDeviceGroupManager
    @Override 
    public DeviceBean[] setDeviceBeansByGroupId(DeviceGroupBean bean , DeviceBean[] importedBeans)
    {
        if(null != importedBeans){
            for( DeviceBean importBean : importedBeans ){
                instanceOfDeviceManager().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED override IDeviceGroupManager
    @Override 
    public <C extends java.util.Collection<DeviceBean>> C setDeviceBeansByGroupId(DeviceGroupBean bean , C importedBeans)
    {
        if(null != importedBeans){
            for( DeviceBean importBean : importedBeans ){
                instanceOfDeviceManager().setReferencedByGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.1 GET IMPORTED override IDeviceGroupManager
    @Override 
    public DeviceGroupBean[] getDeviceGroupBeansByParent(DeviceGroupBean bean)
    {
        return this.getDeviceGroupBeansByParentAsList(bean).toArray(new DeviceGroupBean[0]);
    }
    //3.1.2 GET IMPORTED override IDeviceGroupManager
    @Override
    public DeviceGroupBean[] getDeviceGroupBeansByParent(Integer idOfDeviceGroup)
    {
        DeviceGroupBean bean = new DeviceGroupBean();
        bean.setId(idOfDeviceGroup);
        return getDeviceGroupBeansByParent(bean);
    }
    //3.2 GET IMPORTED override IDeviceGroupManager
    @Override 
    public java.util.List<DeviceGroupBean> getDeviceGroupBeansByParentAsList(DeviceGroupBean bean)
    {
        return getDeviceGroupBeansByParentAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED override IDeviceGroupManager
    @Override
    public java.util.List<DeviceGroupBean> getDeviceGroupBeansByParentAsList(Integer idOfDeviceGroup)
    {
         DeviceGroupBean bean = new DeviceGroupBean();
        bean.setId(idOfDeviceGroup);
        return getDeviceGroupBeansByParentAsList(bean);
    }
    //3.2.3 DELETE IMPORTED override IDeviceGroupManager
    @Override
    public int deleteDeviceGroupBeansByParent(Integer idOfDeviceGroup)
    {
        java.util.List<DeviceGroupBean> list =getDeviceGroupBeansByParentAsList(idOfDeviceGroup);
        return instanceOfDeviceGroupManager().delete(list);
    }
    //3.2.4 GET IMPORTED override IDeviceGroupManager
    @Override 
    public java.util.List<DeviceGroupBean> getDeviceGroupBeansByParentAsList(DeviceGroupBean bean,int startRow, int numRows)
    {
        try {
            return this.dbConverter.getDeviceGroupBeanConverter().fromRight(nativeManager.getDeviceGroupBeansByParentAsList( this.beanConverter.toRight(bean),startRow,numRows));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //3.3 SET IMPORTED override IDeviceGroupManager
    @Override 
    public DeviceGroupBean[] setDeviceGroupBeansByParent(DeviceGroupBean bean , DeviceGroupBean[] importedBeans)
    {
        if(null != importedBeans){
            for( DeviceGroupBean importBean : importedBeans ){
                instanceOfDeviceGroupManager().setReferencedByParent(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED override IDeviceGroupManager
    @Override 
    public <C extends java.util.Collection<DeviceGroupBean>> C setDeviceGroupBeansByParent(DeviceGroupBean bean , C importedBeans)
    {
        if(null != importedBeans){
            for( DeviceGroupBean importBean : importedBeans ){
                instanceOfDeviceGroupManager().setReferencedByParent(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.1 GET IMPORTED override IDeviceGroupManager
    @Override 
    public PermitBean[] getPermitBeansByDeviceGroupId(DeviceGroupBean bean)
    {
        return this.getPermitBeansByDeviceGroupIdAsList(bean).toArray(new PermitBean[0]);
    }
    //3.1.2 GET IMPORTED override IDeviceGroupManager
    @Override
    public PermitBean[] getPermitBeansByDeviceGroupId(Integer idOfDeviceGroup)
    {
        DeviceGroupBean bean = new DeviceGroupBean();
        bean.setId(idOfDeviceGroup);
        return getPermitBeansByDeviceGroupId(bean);
    }
    //3.2 GET IMPORTED override IDeviceGroupManager
    @Override 
    public java.util.List<PermitBean> getPermitBeansByDeviceGroupIdAsList(DeviceGroupBean bean)
    {
        return getPermitBeansByDeviceGroupIdAsList(bean,1,-1);
    }
    //3.2.2 GET IMPORTED override IDeviceGroupManager
    @Override
    public java.util.List<PermitBean> getPermitBeansByDeviceGroupIdAsList(Integer idOfDeviceGroup)
    {
         DeviceGroupBean bean = new DeviceGroupBean();
        bean.setId(idOfDeviceGroup);
        return getPermitBeansByDeviceGroupIdAsList(bean);
    }
    //3.2.3 DELETE IMPORTED override IDeviceGroupManager
    @Override
    public int deletePermitBeansByDeviceGroupId(Integer idOfDeviceGroup)
    {
        java.util.List<PermitBean> list =getPermitBeansByDeviceGroupIdAsList(idOfDeviceGroup);
        return instanceOfPermitManager().delete(list);
    }
    //3.2.4 GET IMPORTED override IDeviceGroupManager
    @Override 
    public java.util.List<PermitBean> getPermitBeansByDeviceGroupIdAsList(DeviceGroupBean bean,int startRow, int numRows)
    {
        try {
            return this.dbConverter.getPermitBeanConverter().fromRight(nativeManager.getPermitBeansByDeviceGroupIdAsList( this.beanConverter.toRight(bean),startRow,numRows));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    //3.3 SET IMPORTED override IDeviceGroupManager
    @Override 
    public PermitBean[] setPermitBeansByDeviceGroupId(DeviceGroupBean bean , PermitBean[] importedBeans)
    {
        if(null != importedBeans){
            for( PermitBean importBean : importedBeans ){
                instanceOfPermitManager().setReferencedByDeviceGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }

    //3.4 SET IMPORTED override IDeviceGroupManager
    @Override 
    public <C extends java.util.Collection<PermitBean>> C setPermitBeansByDeviceGroupId(DeviceGroupBean bean , C importedBeans)
    {
        if(null != importedBeans){
            for( PermitBean importBean : importedBeans ){
                instanceOfPermitManager().setReferencedByDeviceGroupId(importBean , bean);
            }
        }
        return importedBeans;
    }



    //3.5 SYNC SAVE override IDeviceGroupManager
    @Override  
    public DeviceGroupBean save(DeviceGroupBean bean
        , DeviceGroupBean refDevicegroupByParent 
        , DeviceBean[] impDeviceByGroupId , DeviceGroupBean[] impDevicegroupByParent , PermitBean[] impPermitByDeviceGroupId )
    {
        if(null == bean) return null;
        if(null != refDevicegroupByParent)
            this.setReferencedByParent(bean,refDevicegroupByParent);
        bean = this.save( bean );
        this.setDeviceBeansByGroupId(bean,impDeviceByGroupId);
        instanceOfDeviceManager().save( impDeviceByGroupId );
        this.setDeviceGroupBeansByParent(bean,impDevicegroupByParent);
        instanceOfDeviceGroupManager().save( impDevicegroupByParent );
        this.setPermitBeansByDeviceGroupId(bean,impPermitByDeviceGroupId);
        instanceOfPermitManager().save( impPermitByDeviceGroupId );
        return bean;
    } 

    //3.6 SYNC SAVE AS TRANSACTION override IDeviceGroupManager
    @Override 
    public DeviceGroupBean saveAsTransaction(final DeviceGroupBean bean
        ,final DeviceGroupBean refDevicegroupByParent 
        ,final DeviceBean[] impDeviceByGroupId ,final DeviceGroupBean[] impDevicegroupByParent ,final PermitBean[] impPermitByDeviceGroupId )
    {
        return this.runAsTransaction(new Callable<DeviceGroupBean>(){
            @Override
            public DeviceGroupBean call() throws Exception {
                return save(bean , refDevicegroupByParent , impDeviceByGroupId , impDevicegroupByParent , impPermitByDeviceGroupId );
            }});
    }
    //3.7 SYNC SAVE override IDeviceGroupManager
    @Override 
    public DeviceGroupBean save(DeviceGroupBean bean
        , DeviceGroupBean refDevicegroupByParent 
        , java.util.Collection<DeviceBean> impDeviceByGroupId , java.util.Collection<DeviceGroupBean> impDevicegroupByParent , java.util.Collection<PermitBean> impPermitByDeviceGroupId )
    {
        if(null == bean) return null;
        this.setReferencedByParent(bean,refDevicegroupByParent);
        bean = this.save( bean );
        this.setDeviceBeansByGroupId(bean,impDeviceByGroupId);
        instanceOfDeviceManager().save( impDeviceByGroupId );
        this.setDeviceGroupBeansByParent(bean,impDevicegroupByParent);
        instanceOfDeviceGroupManager().save( impDevicegroupByParent );
        this.setPermitBeansByDeviceGroupId(bean,impPermitByDeviceGroupId);
        instanceOfPermitManager().save( impPermitByDeviceGroupId );
        return bean;
    }   

    //3.8 SYNC SAVE AS TRANSACTION override IDeviceGroupManager
    @Override 
    public DeviceGroupBean saveAsTransaction(final DeviceGroupBean bean
        ,final DeviceGroupBean refDevicegroupByParent 
        ,final  java.util.Collection<DeviceBean> impDeviceByGroupId ,final  java.util.Collection<DeviceGroupBean> impDevicegroupByParent ,final  java.util.Collection<PermitBean> impPermitByDeviceGroupId )
    {
        return this.runAsTransaction(new Callable<DeviceGroupBean>(){
            @Override
            public DeviceGroupBean call() throws Exception {
                return save(bean , refDevicegroupByParent , impDeviceByGroupId , impDevicegroupByParent , impPermitByDeviceGroupId );
            }});
    }
     /**
     * Save the {@link DeviceGroupBean} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link DeviceGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(DeviceGroupBean , DeviceGroupBean , DeviceBean[] , DeviceGroupBean[] , PermitBean[] )}
     * @return the inserted or updated {@link DeviceGroupBean} bean
     */
    //3.9 SYNC SAVE 
    @Override
    public DeviceGroupBean save(DeviceGroupBean bean,Object ...args) 
    {
        if(null == args)
            return save(bean);
        if(args.length > 4)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 4");
        if( args.length > 0 && null != args[0] && !(args[0] instanceof DeviceGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:DeviceGroupBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof DeviceBean[])){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:DeviceBean[]");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof DeviceGroupBean[])){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:DeviceGroupBean[]");
        }
        if( args.length > 3 && null != args[3] && !(args[3] instanceof PermitBean[])){
            throw new IllegalArgumentException("invalid type for the No.4 argument,expected type:PermitBean[]");
        }
        return save(bean,(args.length < 1 || null == args[0])?null:(DeviceGroupBean)args[0],(args.length < 2 || null == args[1])?null:(DeviceBean[])args[1],(args.length < 3 || null == args[2])?null:(DeviceGroupBean[])args[2],(args.length < 4 || null == args[3])?null:(PermitBean[])args[3]);
    } 

    /**
     * Save the {@link DeviceGroupBean} bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link DeviceGroupBean} bean to be saved
     * @param args referenced beans or imported beans<br>
     *      see also {@link #save(DeviceGroupBean , DeviceGroupBean , java.util.Collection , java.util.Collection , java.util.Collection )}
     * @return the inserted or updated {@link DeviceGroupBean} bean
     */
    //3.10 SYNC SAVE 
    @SuppressWarnings("unchecked")
    @Override
    public DeviceGroupBean saveCollection(DeviceGroupBean bean,Object ...inputs)
    {
        if(null == inputs)
            return save(bean);
        if(inputs.length > 4)
            throw new IllegalArgumentException("too many dynamic arguments,max dynamic arguments number: 4");
        Object[] args = new Object[4];
        System.arraycopy(inputs,0,args,0,4);
        if( args.length > 0 && null != args[0] && !(args[0] instanceof DeviceGroupBean)){
            throw new IllegalArgumentException("invalid type for the No.1 dynamic argument,expected type:DeviceGroupBean");
        }
        if( args.length > 1 && null != args[1] && !(args[1] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.2 argument,expected type:java.util.Collection<DeviceBean>");
        }
        if( args.length > 2 && null != args[2] && !(args[2] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.3 argument,expected type:java.util.Collection<DeviceGroupBean>");
        }
        if( args.length > 3 && null != args[3] && !(args[3] instanceof java.util.Collection)){
            throw new IllegalArgumentException("invalid type for the No.4 argument,expected type:java.util.Collection<PermitBean>");
        }
        return save(bean,null == args[0]?null:(DeviceGroupBean)args[0],null == args[1]?null:(java.util.Collection<DeviceBean>)args[1],null == args[2]?null:(java.util.Collection<DeviceGroupBean>)args[2],null == args[3]?null:(java.util.Collection<PermitBean>)args[3]);
    }

     //////////////////////////////////////
    // FOREIGN KEY GENERIC METHOD
    //////////////////////////////////////

    /**
     * Retrieves the bean object referenced by fkIndex.<br>
     * @param <T>
     * <ul>
     *     <li> {@link Constant#FL_DEVICE_GROUP_FK_PARENT} -> {@link DeviceGroupBean}</li>
     * </ul>
     * @param bean the {@link DeviceGroupBean} object to use
     * @param fkIndex valid values: <br>
     *        {@link Constant#FL_DEVICE_GROUP_FK_PARENT}
     * @return the associated <T> bean or {@code null} if {@code bean} or {@code beanToSet} is {@code null}
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T getReferencedBean(DeviceGroupBean bean,int fkIndex){
        switch(fkIndex){
        case FL_DEVICE_GROUP_FK_PARENT:
            return  (T)this.getReferencedByParent(bean);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    /**
     * Associates the {@link DeviceGroupBean} object to the bean object by fkIndex field.<br>
     * 
     * @param <T> see also {@link #getReferencedBean(DeviceGroupBean,int)}
     * @param bean the {@link DeviceGroupBean} object to use
     * @param beanToSet the <T> object to associate to the {@link DeviceGroupBean}
     * @param fkIndex valid values: see also {@link #getReferencedBean(DeviceGroupBean,int)}
     * @return always beanToSet saved
     */
    @SuppressWarnings("unchecked")
    @Override
    public <T extends net.gdface.facelog.db.BaseBean<T>> T setReferencedBean(DeviceGroupBean bean,T beanToSet,int fkIndex){
        switch(fkIndex){
        case FL_DEVICE_GROUP_FK_PARENT:
            return  (T)this.setReferencedByParent(bean, (DeviceGroupBean)beanToSet);
        }
        throw new IllegalArgumentException(String.format("invalid fkIndex %d", fkIndex));
    }
    
    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////


    //5.1 GET REFERENCED VALUE override IDeviceGroupManager
    @Override 
    public DeviceGroupBean getReferencedByParent(DeviceGroupBean bean)
    {
        if(null == bean)return null;
        bean.setReferencedByParent(instanceOfDeviceGroupManager().loadByPrimaryKey(bean.getParent())); 
        return bean.getReferencedByParent();
    }

    //5.2 SET REFERENCED override IDeviceGroupManager
    @Override 
    public DeviceGroupBean setReferencedByParent(DeviceGroupBean bean, DeviceGroupBean beanToSet)
    {
        try{
            net.gdface.facelog.dborm.device.FlDeviceGroupBean nativeBean = this.beanConverter.toRight(bean);
            IBeanConverter<DeviceGroupBean,net.gdface.facelog.dborm.device.FlDeviceGroupBean> foreignConverter = this.dbConverter.getDeviceGroupBeanConverter();
            net.gdface.facelog.dborm.device.FlDeviceGroupBean foreignNativeBean = foreignConverter.toRight(beanToSet);
            this.nativeManager.setReferencedByParent(nativeBean,foreignNativeBean);
            this.beanConverter.fromRight(bean, nativeBean);
            foreignConverter.fromRight(beanToSet,foreignNativeBean);
            return beanToSet;
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////

    //11
    @Override
    public int deleteByWhere(String where)
    {
        try{
            return this.nativeManager.deleteByWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________

    //13
    @Override
    protected DeviceGroupBean insert(DeviceGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.insert(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //14
    @Override
    protected DeviceGroupBean update(DeviceGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(bean,this.nativeManager.update(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    //18
    @Override
    public DeviceGroupBean loadUniqueUsingTemplate(DeviceGroupBean bean)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplate(this.beanConverter.toRight(bean)));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }
    //18-1
    @Override
    public DeviceGroupBean loadUniqueUsingTemplateChecked(DeviceGroupBean bean) throws ObjectRetrievalException
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadUniqueUsingTemplateChecked(this.beanConverter.toRight(bean)));
        }
        catch(net.gdface.facelog.dborm.exception.ObjectRetrievalException e)
        {
            throw new ObjectRetrievalException();
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
     }
    //20-5
    @Override
    public int loadUsingTemplate(DeviceGroupBean bean, int[] fieldList, int startRow, int numRows,int searchType, Action<DeviceGroupBean> action)
    {
        try {
            return this.nativeManager.loadUsingTemplate(this.beanConverter.toRight(bean),fieldList,startRow,numRows,searchType,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //21
    @Override
    public int deleteUsingTemplate(DeviceGroupBean bean)
    {
        try{
            return this.nativeManager.deleteUsingTemplate(this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

     // override IDeviceGroupManager
    @Override 
    public DeviceGroupBean[] loadByIndexParent(Integer parent)
    {
        return this.loadByIndexParentAsList(parent).toArray(new DeviceGroupBean[0]);
    }
    
    // override IDeviceGroupManager
    @Override 
    public java.util.List<DeviceGroupBean> loadByIndexParentAsList(Integer parent)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByIndexParentAsList(parent));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    // override IDeviceGroupManager
    @Override 
    public int deleteByIndexParent(Integer parent)
    {
        try{
            return this.nativeManager.deleteByIndexParent(parent);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    
    /**
     * Retrieves a list of DeviceGroupBean using the index specified by keyIndex.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_DEVICE_GROUP_INDEX_PARENT}
     * @param keys key values of index
     * @return a list of DeviceGroupBean
     */
    @Override
    public java.util.List<DeviceGroupBean> loadByIndexAsList(int keyIndex,Object ...keys)
    {
        try{
            return this.beanConverter.fromRight(this.nativeManager.loadByIndexAsList(keyIndex,keys));
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    
    /**
     * Deletes rows using key.
     * @param keyIndex valid values: <br>
     *        {@link Constant#FL_DEVICE_GROUP_INDEX_PARENT}
     * @param keys key values of index
     * @return the number of deleted objects
     */
    @Override
    public int deleteByIndex(int keyIndex,Object ...keys)
    {
        try{
            return this.nativeManager.deleteByIndex(keyIndex,keys);
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }

    //_____________________________________________________________________
    //
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE
    //_____________________________________________________________________
    //22 MANY TO MANY override IDeviceGroupManager
    @Override
    public java.util.List<DeviceGroupBean> loadViaPermitAsList(PersonGroupBean bean)
    {
         return this.loadViaPermitAsList(bean, 1, -1);
    }

    //23 MANY TO MANY override IDeviceGroupManager
    @Override
    public java.util.List<DeviceGroupBean> loadViaPermitAsList(PersonGroupBean bean, int startRow, int numRows)
    {
        try{
            return this.beanConverter.fromRight(
                this.nativeManager.loadViaPermitAsList(
                    this.dbConverter.getPersonGroupBeanConverter().toRight(bean),
                    startRow,
                    numRows));
        }catch(DAOException e){
            throw new WrapDAOException(e);
        }
    }
    //23.2 MANY TO MANY override IDeviceGroupManager
    @Override
    public void addJunction(DeviceGroupBean bean,PersonGroupBean linked){
        if(null == bean || null == bean.getId())
            return ;
        if(null == linked || null ==bean.getId())
            return ;
        if(!instanceOfPermitManager().existsPrimaryKey(bean.getId(),linked.getId())){
            PermitBean junction = new PermitBean();
            junction.setDeviceGroupId(bean.getId());
            junction.setPersonGroupId(linked.getId());
            instanceOfPermitManager().save(junction);
        }
    }
    //23.3 MANY TO MANY override IDeviceGroupManager
    @Override
    public int deleteJunction(DeviceGroupBean bean,PersonGroupBean linked){
        if(null == bean || null == bean.getId())
            return 0;
        if(null == linked || null ==bean.getId())
            return 0;
        return instanceOfPermitManager().deleteByPrimaryKey(bean.getId(),linked.getId());
    }
    //23.4 MANY TO MANY override IDeviceGroupManager
    @Override
    public void addJunction(DeviceGroupBean bean,PersonGroupBean... linkedBeans){
        if(null == linkedBeans)return;
        for(PersonGroupBean linked:linkedBeans){
            addJunction(bean,linked);
        }
    }
    //23.5 MANY TO MANY override IDeviceGroupManager
    @Override
    public void addJunction(DeviceGroupBean bean,java.util.Collection<PersonGroupBean> linkedBeans){
        if(null == linkedBeans)return;
        for(PersonGroupBean linked:linkedBeans){
            addJunction(bean,linked);
        }
    }
    //23.6 MANY TO MANY override IDeviceGroupManager
    @Override
    public int deleteJunction(DeviceGroupBean bean,PersonGroupBean... linkedBeans){
        if(null == linkedBeans)return 0;
        int count = 0;
        for(PersonGroupBean linked:linkedBeans){
            count += deleteJunction(bean,linked);
        }
        return count;
    }
    //23.7 MANY TO MANY override IDeviceGroupManager
    @Override
    public int deleteJunction(DeviceGroupBean bean,java.util.Collection<PersonGroupBean> linkedBeans){
        if(null == linkedBeans)return 0;
        int count = 0;
        for(PersonGroupBean linked:linkedBeans){
            count += deleteJunction(bean,linked);
        }
        return count;
    }
    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________
    //25
    @Override
    public int countWhere(String where)
    {
        try{
            return this.nativeManager.countWhere(where);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }

    //20
    @Override
    public int countUsingTemplate(DeviceGroupBean bean, int searchType)
    {
        try{
            return this.nativeManager.countUsingTemplate(this.beanConverter.toRight(bean),searchType);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }


    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________

    /**
     * @return {@link WrapListener} instance
     */
    //35
    @Override
    public TableListener<DeviceGroupBean> registerListener(TableListener<DeviceGroupBean> listener)
    {
        WrapListener wrapListener;
        if(listener instanceof WrapListener){
            wrapListener = (WrapListener)listener;
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }else{
            wrapListener = new WrapListener(listener);
            this.nativeManager.registerListener(wrapListener.nativeListener);
        }
        return wrapListener;
    }

    //36
    @Override
    public void unregisterListener(TableListener<DeviceGroupBean> listener)
    {
        if(listener instanceof WrapListener)
            this.nativeManager.unregisterListener(((WrapListener)listener).nativeListener);
        throw new IllegalArgumentException("invalid listener type: " + WrapListener.class.getName() +" required");
    }
    
    //37
    @Override
    public void fire(TableListener.Event event, DeviceGroupBean bean){
        fire(event.ordinal(), bean);
    }
    
    //37-1
    @Override
    public void fire(int event, DeviceGroupBean bean){
        try{
            this.nativeManager.fire(event, this.beanConverter.toRight(bean));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    /**
     * bind foreign key listener to foreign table for DELETE RULE
     */
    //37-2
    void bindForeignKeyListenerForDeleteRule(){
        this.nativeManager.bindForeignKeyListenerForDeleteRule();
    }
    /**
     * unbind foreign key listener from all of foreign tables <br>
     * @see #bindForeignKeyListenerForDeleteRule()
     */
    //37-3
    void unbindForeignKeyListenerForDeleteRule(){
        this.nativeManager.unbindForeignKeyListenerForDeleteRule();

    }
    /**
     * wrap {@code TableListener<DeviceGroupBean>} as native listener
     * @author guyadong
     *
     */
    public class WrapListener implements TableListener<DeviceGroupBean>{
        private final TableListener<DeviceGroupBean> listener;
        private final net.gdface.facelog.dborm.TableListener<net.gdface.facelog.dborm.device.FlDeviceGroupBean> nativeListener;
        private WrapListener(final TableListener<DeviceGroupBean> listener) {
            if(null == listener)
                throw new NullPointerException();
            this.listener = listener;
            this.nativeListener = new net.gdface.facelog.dborm.TableListener<net.gdface.facelog.dborm.device.FlDeviceGroupBean> (){

                @Override
                public void beforeInsert(net.gdface.facelog.dborm.device.FlDeviceGroupBean bean) throws DAOException {
                    listener.beforeInsert(DeviceGroupManager.this.beanConverter.fromRight(bean));                
                }

                @Override
                public void afterInsert(net.gdface.facelog.dborm.device.FlDeviceGroupBean bean) throws DAOException {
                    listener.afterInsert(DeviceGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeUpdate(net.gdface.facelog.dborm.device.FlDeviceGroupBean bean) throws DAOException {
                    listener.beforeUpdate(DeviceGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterUpdate(net.gdface.facelog.dborm.device.FlDeviceGroupBean bean) throws DAOException {
                    listener.afterUpdate(DeviceGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void beforeDelete(net.gdface.facelog.dborm.device.FlDeviceGroupBean bean) throws DAOException {
                    listener.beforeDelete(DeviceGroupManager.this.beanConverter.fromRight(bean));
                }

                @Override
                public void afterDelete(net.gdface.facelog.dborm.device.FlDeviceGroupBean bean) throws DAOException {
                    listener.afterDelete(DeviceGroupManager.this.beanConverter.fromRight(bean));
                }};
        }

        public void beforeInsert(DeviceGroupBean bean) {
            listener.beforeInsert(bean);
        }

        public void afterInsert(DeviceGroupBean bean) {
            listener.afterInsert(bean);
        }

        public void beforeUpdate(DeviceGroupBean bean) {
            listener.beforeUpdate(bean);
        }

        public void afterUpdate(DeviceGroupBean bean) {
            listener.afterUpdate(bean);
        }

        public void beforeDelete(DeviceGroupBean bean) {
            listener.beforeDelete(bean);
        }

        public void afterDelete(DeviceGroupBean bean) {
            listener.afterDelete(bean);
        }        
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    //43
    @Override
    public boolean isPrimaryKey(String column){
        return this.nativeManager.isPrimaryKey(column);
    }
    
    @Override
    public int loadBySqlForAction(String sql, Object[] argList, int[] fieldList,int startRow, int numRows,Action<DeviceGroupBean> action){
        try{
            return this.nativeManager.loadBySqlForAction(sql,argList,fieldList,startRow,numRows,this.toNative(action));
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    @Override
    public <T>T runAsTransaction(Callable<T> fun) {
        try{
            return this.nativeManager.runAsTransaction(fun);
        }
        catch(DAOException e)
        {
            throw new WrapDAOException(e);
        }
    }
    
    private net.gdface.facelog.dborm.TableManager.Action<net.gdface.facelog.dborm.device.FlDeviceGroupBean> toNative(final Action<DeviceGroupBean> action){
        if(null == action)
            throw new NullPointerException();
        return new net.gdface.facelog.dborm.TableManager.Action<net.gdface.facelog.dborm.device.FlDeviceGroupBean>(){

            @Override
            public void call(net.gdface.facelog.dborm.device.FlDeviceGroupBean bean) {
                action.call(DeviceGroupManager.this.beanConverter.fromRight(bean));
            }

            @Override
            public net.gdface.facelog.dborm.device.FlDeviceGroupBean getBean() {
                return  DeviceGroupManager.this.beanConverter.toRight(action.getBean());
            }};
    }
    
    //45 override IDeviceGroupManager
    @Override 
    public java.util.List<Integer> toPrimaryKeyList(DeviceGroupBean... array){        
        if(null == array)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(array.length);
        for(DeviceGroupBean bean:array){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }
    //46 override IDeviceGroupManager
    @Override 
    public java.util.List<Integer> toPrimaryKeyList(java.util.Collection<DeviceGroupBean> collection){        
        if(null == collection)return new java.util.ArrayList<Integer>();
        java.util.ArrayList<Integer> list = new java.util.ArrayList<Integer>(collection.size());
        for(DeviceGroupBean bean:collection){
            list.add(null == bean ? null : bean.getId());
        }
        return list;
    }

    //_____________________________________________________________________
    //
    // SELF-REFERENCE
    //_____________________________________________________________________
    //47 IDeviceGroupManager
    @Override
    public java.util.List<DeviceGroupBean> listOfParent(Integer id){
        DeviceGroupBean parent = (null == id)
            ? null
            : new DeviceGroupBean(id);
        java.util.List<DeviceGroupBean> list;
        for(list = new java.util.ArrayList<DeviceGroupBean>();null != parent;list.add(parent)){
            parent = loadByPrimaryKey(parent.getParent());
            if(equal(id,parent.getId())){
                // cycle reference
                list.add(parent);
                break;
            }
        }
        java.util.Collections.reverse(list);
        return list;
    }
    //48 IDeviceGroupManager
    @Override
    @SuppressWarnings("unchecked")
    public java.util.List<DeviceGroupBean> listOfParent(DeviceGroupBean bean){
        return null == bean
                ? java.util.Collections.EMPTY_LIST
                : listOfParent(bean.getId());
    }
    //49 IDeviceGroupManager
    @Override
    public int levelOfParent(Integer id){
        DeviceGroupBean parent = (null == id)
            ? null
            : new DeviceGroupBean(id);
        int count;
        for(count = 0;null != parent;++count){
            parent = loadByPrimaryKey(parent.getParent());
            if(null != parent  && equal(id,parent.getId())){
                return -1;
            }
        }
        return count;
    }
    //50 IDeviceGroupManager
    @Override
    public int levelOfParent(DeviceGroupBean bean){
        return null == bean
                ? 0
                : levelOfParent(bean.getId());
    }
    //51 IDeviceGroupManager
    @Override
    public boolean isCycleOnParent(Integer id){
        return levelOfParent(id) < 0;
    }
    //52 IDeviceGroupManager
    @Override
    public boolean isCycleOnParent(DeviceGroupBean bean){
        return levelOfParent(bean) < 0;
    }
    //53 IDeviceGroupManager
    @Override
    public DeviceGroupBean topOfParent(Integer id){
        if(null == id)
            throw new NullPointerException();
        DeviceGroupBean parent = new DeviceGroupBean(id);
        for(;null != parent.getParent();){
            parent = loadByPrimaryKey(parent.getParent());
            if(equal(id,parent.getId())){
                throw new IllegalStateException("cycle on field: " + "parent");
            }
        }
        return parent;
    }
    //54 IDeviceGroupManager
    @Override
    public DeviceGroupBean topOfParent(DeviceGroupBean bean){
        if(null == bean)
            throw new NullPointerException();
        return topOfParent(bean.getId());
    }
    //55 IDeviceGroupManager
    @Override
    public Integer checkCycleOfParent(Integer id){
        if(isCycleOnParent(id))
            throw new IllegalStateException("cycle on field: " + "parent");
        return id;
    }
    //56 IDeviceGroupManager
    @Override
    public DeviceGroupBean checkCycleOfParent(DeviceGroupBean bean){
        if(isCycleOnParent(bean))
            throw new IllegalStateException("cycle on field: " + "parent");
        return bean;
    }
}
