// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: $db.driver
// ______________________________________________________

package net.gdface.facelog.db;

import net.gdface.facelog.dborm.device.FlDeviceBean;
import net.gdface.facelog.dborm.face.FlFaceBean;
import net.gdface.facelog.dborm.image.FlImageBean;
import net.gdface.facelog.dborm.log.FlLogBean;
import net.gdface.facelog.dborm.person.FlPersonBean;
import net.gdface.facelog.dborm.image.FlStoreBean;
import net.gdface.facelog.dborm.face.FlFaceLightBean;
import net.gdface.facelog.dborm.face.FlFeatureBean;
import net.gdface.facelog.dborm.log.FlLogLightBean;

public interface IDbConverter {
    public abstract IBeanConverter<DeviceBean, FlDeviceBean> getDeviceBeanConverter();
    public abstract IBeanConverter<FaceBean, FlFaceBean> getFaceBeanConverter();
    public abstract IBeanConverter<ImageBean, FlImageBean> getImageBeanConverter();
    public abstract IBeanConverter<LogBean, FlLogBean> getLogBeanConverter();
    public abstract IBeanConverter<PersonBean, FlPersonBean> getPersonBeanConverter();
    public abstract IBeanConverter<StoreBean, FlStoreBean> getStoreBeanConverter();
    public abstract IBeanConverter<FaceLightBean, FlFaceLightBean> getFaceLightBeanConverter();
    public abstract IBeanConverter<FeatureBean, FlFeatureBean> getFeatureBeanConverter();
    public abstract IBeanConverter<LogLightBean, FlLogLightBean> getLogLightBeanConverter();

    /**
     * @param <G> general type
     * @param <N> native type
     * @param gClass
     * @param nClass
     * @return
     */
    public abstract<G, N> IBeanConverter<G,N> getBeanConverter(Class<G> gClass,Class<N> nClass);
    /**
     * @param <G> general type
     * @param <N> native type
     * @param gClass
     * @param nClass
     * @param converter
     */
    public abstract <G, N> void setBeanConverter(Class<G> gClass, Class<N> nClass, IBeanConverter<G,N>converter);

}