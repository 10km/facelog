// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db;
import java.io.Serializable;
import com.facebook.swift.codec.ThriftStruct;
import com.facebook.swift.codec.ThriftField;
/**
 * FaceBean is a mapping of fl_face Table.
 * <br>Meta Data Information (in progress):
 * <ul>
 *    <li>comments: 人脸检测信息数据表,用于保存检测到的人脸的所有信息(特征数据除外) </li>
 * </ul>
 * @author guyadong
*/
@ThriftStruct
public class FaceBean
    implements Serializable,BaseBean<FaceBean>,Comparable<FaceBean>,Constant,Cloneable
{
    private static final long serialVersionUID = -1428389659131258505L;
    
    /** comments:主键 */
    private Integer id;

    /** comments:外键,所属图像id */
    private String imageMd5;

    private Integer faceLeft;

    private Integer faceTop;

    private Integer faceWidth;

    private Integer faceHeight;

    private Integer eyeLeftx;

    private Integer eyeLefty;

    private Integer eyeRightx;

    private Integer eyeRighty;

    private Integer mouthX;

    private Integer mouthY;

    private Integer noseX;

    private Integer noseY;

    private Integer angleYaw;

    private Integer anglePitch;

    private Integer angleRoll;

    /** comments:扩展字段,保存人脸检测基本信息之外的其他数据,内容由SDK负责解析 */
    private java.nio.ByteBuffer extInfo;

    /** comments:外键,人脸特征数据MD5 id */
    private String featureMd5;

    private java.util.Date createTime; // DEFAULT 'CURRENT_TIMESTAMP';

    /** columns modified flag */
    private long modified = 0L;
    /** columns initialized flag */
    private long initialized = 0L;
    private boolean _isNew = true;
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    @ThriftField(1)
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    @ThriftField
    public void setNew(boolean isNew)
    {
        this._isNew = isNew;
    }
    /**
     * @return the modified status of columns
     */
    @ThriftField(2)
    public long getModified(){
        return modified;
    }

    /**
     * @param modified the modified status bit to be assigned to {@link #modified}
     */
    @ThriftField
    public void setModified(long modified){
        this.modified = modified;
    }
    /**
     * @return the initialized status of columns
     */
    @ThriftField(3)
    public long getInitialized(){
        return initialized;
    }

    /**
     * @param initialized the initialized status bit to be assigned to {@link #initialized}
     */
    @ThriftField
    public void setInitialized(long initialized){
        this.initialized = initialized;
    }
    public FaceBean(){
        super();
    }
    /**
     * Getter method for {@link #id}.<br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.id</li>
     * <li> imported key: fl_log.compare_face</li>
     * <li>comments: 主键</li>
     * <li>AUTO_INCREMENT</li>
     * <li>NOT NULL</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of id
     */
    @ThriftField(4)
    public Integer getId(){
        return id;
    }
    /**
     * Setter method for {@link #id}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value (NOT NULL) to be assigned to id
     */
    @ThriftField
    public void setId(Integer newVal)
    {
        if ((newVal != null && id != null && (newVal.compareTo(id) == 0)) ||
            (newVal == null && id == null && checkIdInitialized())) {
            return;
        }
        id = newVal;

        modified |= FL_FACE_ID_ID_MASK;
        initialized |= FL_FACE_ID_ID_MASK;
    }

    /**
     * Setter method for {@link #id}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to id
     */
    public void setId(int newVal)
    {
        setId(new Integer(newVal));
    }
    /**
     * Determines if the id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkIdModified()
    {
        return 0L !=  (modified & FL_FACE_ID_ID_MASK);
    }

    /**
     * Determines if the id has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkIdInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_ID_MASK);
    }
    /**
     * Getter method for {@link #imageMd5}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.image_md5</li>
     * <li> foreign key: fl_image.md5</li>
     * <li>comments: 外键,所属图像id</li>
     * <li>NOT NULL</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of imageMd5
     */
    @ThriftField(5)
    public String getImageMd5(){
        return imageMd5;
    }
    /**
     * Setter method for {@link #imageMd5}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value (NOT NULL) to be assigned to imageMd5
     */
    @ThriftField
    public void setImageMd5(String newVal)
    {
        if ((newVal != null && imageMd5 != null && (newVal.compareTo(imageMd5) == 0)) ||
            (newVal == null && imageMd5 == null && checkImageMd5Initialized())) {
            return;
        }
        imageMd5 = newVal;

        modified |= FL_FACE_ID_IMAGE_MD5_MASK;
        initialized |= FL_FACE_ID_IMAGE_MD5_MASK;
    }

    /**
     * Determines if the imageMd5 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkImageMd5Modified()
    {
        return 0L !=  (modified & FL_FACE_ID_IMAGE_MD5_MASK);
    }

    /**
     * Determines if the imageMd5 has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkImageMd5Initialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_IMAGE_MD5_MASK);
    }
    /**
     * Getter method for {@link #faceLeft}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.face_left</li>
     * <li>NOT NULL</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceLeft
     */
    @ThriftField(6)
    public Integer getFaceLeft(){
        return faceLeft;
    }
    /**
     * Setter method for {@link #faceLeft}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value (NOT NULL) to be assigned to faceLeft
     */
    @ThriftField
    public void setFaceLeft(Integer newVal)
    {
        if ((newVal != null && faceLeft != null && (newVal.compareTo(faceLeft) == 0)) ||
            (newVal == null && faceLeft == null && checkFaceLeftInitialized())) {
            return;
        }
        faceLeft = newVal;

        modified |= FL_FACE_ID_FACE_LEFT_MASK;
        initialized |= FL_FACE_ID_FACE_LEFT_MASK;
    }

    /**
     * Setter method for {@link #faceLeft}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceLeft
     */
    public void setFaceLeft(int newVal)
    {
        setFaceLeft(new Integer(newVal));
    }
    /**
     * Determines if the faceLeft has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkFaceLeftModified()
    {
        return 0L !=  (modified & FL_FACE_ID_FACE_LEFT_MASK);
    }

    /**
     * Determines if the faceLeft has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkFaceLeftInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_FACE_LEFT_MASK);
    }
    /**
     * Getter method for {@link #faceTop}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.face_top</li>
     * <li>NOT NULL</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceTop
     */
    @ThriftField(7)
    public Integer getFaceTop(){
        return faceTop;
    }
    /**
     * Setter method for {@link #faceTop}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value (NOT NULL) to be assigned to faceTop
     */
    @ThriftField
    public void setFaceTop(Integer newVal)
    {
        if ((newVal != null && faceTop != null && (newVal.compareTo(faceTop) == 0)) ||
            (newVal == null && faceTop == null && checkFaceTopInitialized())) {
            return;
        }
        faceTop = newVal;

        modified |= FL_FACE_ID_FACE_TOP_MASK;
        initialized |= FL_FACE_ID_FACE_TOP_MASK;
    }

    /**
     * Setter method for {@link #faceTop}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceTop
     */
    public void setFaceTop(int newVal)
    {
        setFaceTop(new Integer(newVal));
    }
    /**
     * Determines if the faceTop has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkFaceTopModified()
    {
        return 0L !=  (modified & FL_FACE_ID_FACE_TOP_MASK);
    }

    /**
     * Determines if the faceTop has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkFaceTopInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_FACE_TOP_MASK);
    }
    /**
     * Getter method for {@link #faceWidth}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.face_width</li>
     * <li>NOT NULL</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceWidth
     */
    @ThriftField(8)
    public Integer getFaceWidth(){
        return faceWidth;
    }
    /**
     * Setter method for {@link #faceWidth}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value (NOT NULL) to be assigned to faceWidth
     */
    @ThriftField
    public void setFaceWidth(Integer newVal)
    {
        if ((newVal != null && faceWidth != null && (newVal.compareTo(faceWidth) == 0)) ||
            (newVal == null && faceWidth == null && checkFaceWidthInitialized())) {
            return;
        }
        faceWidth = newVal;

        modified |= FL_FACE_ID_FACE_WIDTH_MASK;
        initialized |= FL_FACE_ID_FACE_WIDTH_MASK;
    }

    /**
     * Setter method for {@link #faceWidth}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceWidth
     */
    public void setFaceWidth(int newVal)
    {
        setFaceWidth(new Integer(newVal));
    }
    /**
     * Determines if the faceWidth has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkFaceWidthModified()
    {
        return 0L !=  (modified & FL_FACE_ID_FACE_WIDTH_MASK);
    }

    /**
     * Determines if the faceWidth has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkFaceWidthInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_FACE_WIDTH_MASK);
    }
    /**
     * Getter method for {@link #faceHeight}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.face_height</li>
     * <li>NOT NULL</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of faceHeight
     */
    @ThriftField(9)
    public Integer getFaceHeight(){
        return faceHeight;
    }
    /**
     * Setter method for {@link #faceHeight}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value (NOT NULL) to be assigned to faceHeight
     */
    @ThriftField
    public void setFaceHeight(Integer newVal)
    {
        if ((newVal != null && faceHeight != null && (newVal.compareTo(faceHeight) == 0)) ||
            (newVal == null && faceHeight == null && checkFaceHeightInitialized())) {
            return;
        }
        faceHeight = newVal;

        modified |= FL_FACE_ID_FACE_HEIGHT_MASK;
        initialized |= FL_FACE_ID_FACE_HEIGHT_MASK;
    }

    /**
     * Setter method for {@link #faceHeight}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to faceHeight
     */
    public void setFaceHeight(int newVal)
    {
        setFaceHeight(new Integer(newVal));
    }
    /**
     * Determines if the faceHeight has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkFaceHeightModified()
    {
        return 0L !=  (modified & FL_FACE_ID_FACE_HEIGHT_MASK);
    }

    /**
     * Determines if the faceHeight has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkFaceHeightInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_FACE_HEIGHT_MASK);
    }
    /**
     * Getter method for {@link #eyeLeftx}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.eye_leftx</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeLeftx
     */
    @ThriftField(10)
    public Integer getEyeLeftx(){
        return eyeLeftx;
    }
    /**
     * Setter method for {@link #eyeLeftx}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to eyeLeftx
     */
    @ThriftField
    public void setEyeLeftx(Integer newVal)
    {
        if ((newVal != null && eyeLeftx != null && (newVal.compareTo(eyeLeftx) == 0)) ||
            (newVal == null && eyeLeftx == null && checkEyeLeftxInitialized())) {
            return;
        }
        eyeLeftx = newVal;

        modified |= FL_FACE_ID_EYE_LEFTX_MASK;
        initialized |= FL_FACE_ID_EYE_LEFTX_MASK;
    }

    /**
     * Setter method for {@link #eyeLeftx}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeLeftx
     */
    public void setEyeLeftx(int newVal)
    {
        setEyeLeftx(new Integer(newVal));
    }
    /**
     * Determines if the eyeLeftx has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkEyeLeftxModified()
    {
        return 0L !=  (modified & FL_FACE_ID_EYE_LEFTX_MASK);
    }

    /**
     * Determines if the eyeLeftx has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkEyeLeftxInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_EYE_LEFTX_MASK);
    }
    /**
     * Getter method for {@link #eyeLefty}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.eye_lefty</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeLefty
     */
    @ThriftField(11)
    public Integer getEyeLefty(){
        return eyeLefty;
    }
    /**
     * Setter method for {@link #eyeLefty}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to eyeLefty
     */
    @ThriftField
    public void setEyeLefty(Integer newVal)
    {
        if ((newVal != null && eyeLefty != null && (newVal.compareTo(eyeLefty) == 0)) ||
            (newVal == null && eyeLefty == null && checkEyeLeftyInitialized())) {
            return;
        }
        eyeLefty = newVal;

        modified |= FL_FACE_ID_EYE_LEFTY_MASK;
        initialized |= FL_FACE_ID_EYE_LEFTY_MASK;
    }

    /**
     * Setter method for {@link #eyeLefty}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeLefty
     */
    public void setEyeLefty(int newVal)
    {
        setEyeLefty(new Integer(newVal));
    }
    /**
     * Determines if the eyeLefty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkEyeLeftyModified()
    {
        return 0L !=  (modified & FL_FACE_ID_EYE_LEFTY_MASK);
    }

    /**
     * Determines if the eyeLefty has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkEyeLeftyInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_EYE_LEFTY_MASK);
    }
    /**
     * Getter method for {@link #eyeRightx}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.eye_rightx</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeRightx
     */
    @ThriftField(12)
    public Integer getEyeRightx(){
        return eyeRightx;
    }
    /**
     * Setter method for {@link #eyeRightx}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to eyeRightx
     */
    @ThriftField
    public void setEyeRightx(Integer newVal)
    {
        if ((newVal != null && eyeRightx != null && (newVal.compareTo(eyeRightx) == 0)) ||
            (newVal == null && eyeRightx == null && checkEyeRightxInitialized())) {
            return;
        }
        eyeRightx = newVal;

        modified |= FL_FACE_ID_EYE_RIGHTX_MASK;
        initialized |= FL_FACE_ID_EYE_RIGHTX_MASK;
    }

    /**
     * Setter method for {@link #eyeRightx}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeRightx
     */
    public void setEyeRightx(int newVal)
    {
        setEyeRightx(new Integer(newVal));
    }
    /**
     * Determines if the eyeRightx has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkEyeRightxModified()
    {
        return 0L !=  (modified & FL_FACE_ID_EYE_RIGHTX_MASK);
    }

    /**
     * Determines if the eyeRightx has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkEyeRightxInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_EYE_RIGHTX_MASK);
    }
    /**
     * Getter method for {@link #eyeRighty}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.eye_righty</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of eyeRighty
     */
    @ThriftField(13)
    public Integer getEyeRighty(){
        return eyeRighty;
    }
    /**
     * Setter method for {@link #eyeRighty}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to eyeRighty
     */
    @ThriftField
    public void setEyeRighty(Integer newVal)
    {
        if ((newVal != null && eyeRighty != null && (newVal.compareTo(eyeRighty) == 0)) ||
            (newVal == null && eyeRighty == null && checkEyeRightyInitialized())) {
            return;
        }
        eyeRighty = newVal;

        modified |= FL_FACE_ID_EYE_RIGHTY_MASK;
        initialized |= FL_FACE_ID_EYE_RIGHTY_MASK;
    }

    /**
     * Setter method for {@link #eyeRighty}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to eyeRighty
     */
    public void setEyeRighty(int newVal)
    {
        setEyeRighty(new Integer(newVal));
    }
    /**
     * Determines if the eyeRighty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkEyeRightyModified()
    {
        return 0L !=  (modified & FL_FACE_ID_EYE_RIGHTY_MASK);
    }

    /**
     * Determines if the eyeRighty has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkEyeRightyInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_EYE_RIGHTY_MASK);
    }
    /**
     * Getter method for {@link #mouthX}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.mouth_x</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mouthX
     */
    @ThriftField(14)
    public Integer getMouthX(){
        return mouthX;
    }
    /**
     * Setter method for {@link #mouthX}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to mouthX
     */
    @ThriftField
    public void setMouthX(Integer newVal)
    {
        if ((newVal != null && mouthX != null && (newVal.compareTo(mouthX) == 0)) ||
            (newVal == null && mouthX == null && checkMouthXInitialized())) {
            return;
        }
        mouthX = newVal;

        modified |= FL_FACE_ID_MOUTH_X_MASK;
        initialized |= FL_FACE_ID_MOUTH_X_MASK;
    }

    /**
     * Setter method for {@link #mouthX}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mouthX
     */
    public void setMouthX(int newVal)
    {
        setMouthX(new Integer(newVal));
    }
    /**
     * Determines if the mouthX has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkMouthXModified()
    {
        return 0L !=  (modified & FL_FACE_ID_MOUTH_X_MASK);
    }

    /**
     * Determines if the mouthX has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkMouthXInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_MOUTH_X_MASK);
    }
    /**
     * Getter method for {@link #mouthY}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.mouth_y</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of mouthY
     */
    @ThriftField(15)
    public Integer getMouthY(){
        return mouthY;
    }
    /**
     * Setter method for {@link #mouthY}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to mouthY
     */
    @ThriftField
    public void setMouthY(Integer newVal)
    {
        if ((newVal != null && mouthY != null && (newVal.compareTo(mouthY) == 0)) ||
            (newVal == null && mouthY == null && checkMouthYInitialized())) {
            return;
        }
        mouthY = newVal;

        modified |= FL_FACE_ID_MOUTH_Y_MASK;
        initialized |= FL_FACE_ID_MOUTH_Y_MASK;
    }

    /**
     * Setter method for {@link #mouthY}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mouthY
     */
    public void setMouthY(int newVal)
    {
        setMouthY(new Integer(newVal));
    }
    /**
     * Determines if the mouthY has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkMouthYModified()
    {
        return 0L !=  (modified & FL_FACE_ID_MOUTH_Y_MASK);
    }

    /**
     * Determines if the mouthY has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkMouthYInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_MOUTH_Y_MASK);
    }
    /**
     * Getter method for {@link #noseX}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.nose_x</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of noseX
     */
    @ThriftField(16)
    public Integer getNoseX(){
        return noseX;
    }
    /**
     * Setter method for {@link #noseX}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to noseX
     */
    @ThriftField
    public void setNoseX(Integer newVal)
    {
        if ((newVal != null && noseX != null && (newVal.compareTo(noseX) == 0)) ||
            (newVal == null && noseX == null && checkNoseXInitialized())) {
            return;
        }
        noseX = newVal;

        modified |= FL_FACE_ID_NOSE_X_MASK;
        initialized |= FL_FACE_ID_NOSE_X_MASK;
    }

    /**
     * Setter method for {@link #noseX}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to noseX
     */
    public void setNoseX(int newVal)
    {
        setNoseX(new Integer(newVal));
    }
    /**
     * Determines if the noseX has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkNoseXModified()
    {
        return 0L !=  (modified & FL_FACE_ID_NOSE_X_MASK);
    }

    /**
     * Determines if the noseX has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkNoseXInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_NOSE_X_MASK);
    }
    /**
     * Getter method for {@link #noseY}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.nose_y</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of noseY
     */
    @ThriftField(17)
    public Integer getNoseY(){
        return noseY;
    }
    /**
     * Setter method for {@link #noseY}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to noseY
     */
    @ThriftField
    public void setNoseY(Integer newVal)
    {
        if ((newVal != null && noseY != null && (newVal.compareTo(noseY) == 0)) ||
            (newVal == null && noseY == null && checkNoseYInitialized())) {
            return;
        }
        noseY = newVal;

        modified |= FL_FACE_ID_NOSE_Y_MASK;
        initialized |= FL_FACE_ID_NOSE_Y_MASK;
    }

    /**
     * Setter method for {@link #noseY}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to noseY
     */
    public void setNoseY(int newVal)
    {
        setNoseY(new Integer(newVal));
    }
    /**
     * Determines if the noseY has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkNoseYModified()
    {
        return 0L !=  (modified & FL_FACE_ID_NOSE_Y_MASK);
    }

    /**
     * Determines if the noseY has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkNoseYInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_NOSE_Y_MASK);
    }
    /**
     * Getter method for {@link #angleYaw}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.angle_yaw</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of angleYaw
     */
    @ThriftField(18)
    public Integer getAngleYaw(){
        return angleYaw;
    }
    /**
     * Setter method for {@link #angleYaw}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to angleYaw
     */
    @ThriftField
    public void setAngleYaw(Integer newVal)
    {
        if ((newVal != null && angleYaw != null && (newVal.compareTo(angleYaw) == 0)) ||
            (newVal == null && angleYaw == null && checkAngleYawInitialized())) {
            return;
        }
        angleYaw = newVal;

        modified |= FL_FACE_ID_ANGLE_YAW_MASK;
        initialized |= FL_FACE_ID_ANGLE_YAW_MASK;
    }

    /**
     * Setter method for {@link #angleYaw}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to angleYaw
     */
    public void setAngleYaw(int newVal)
    {
        setAngleYaw(new Integer(newVal));
    }
    /**
     * Determines if the angleYaw has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkAngleYawModified()
    {
        return 0L !=  (modified & FL_FACE_ID_ANGLE_YAW_MASK);
    }

    /**
     * Determines if the angleYaw has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkAngleYawInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_ANGLE_YAW_MASK);
    }
    /**
     * Getter method for {@link #anglePitch}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.angle_pitch</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of anglePitch
     */
    @ThriftField(19)
    public Integer getAnglePitch(){
        return anglePitch;
    }
    /**
     * Setter method for {@link #anglePitch}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to anglePitch
     */
    @ThriftField
    public void setAnglePitch(Integer newVal)
    {
        if ((newVal != null && anglePitch != null && (newVal.compareTo(anglePitch) == 0)) ||
            (newVal == null && anglePitch == null && checkAnglePitchInitialized())) {
            return;
        }
        anglePitch = newVal;

        modified |= FL_FACE_ID_ANGLE_PITCH_MASK;
        initialized |= FL_FACE_ID_ANGLE_PITCH_MASK;
    }

    /**
     * Setter method for {@link #anglePitch}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to anglePitch
     */
    public void setAnglePitch(int newVal)
    {
        setAnglePitch(new Integer(newVal));
    }
    /**
     * Determines if the anglePitch has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkAnglePitchModified()
    {
        return 0L !=  (modified & FL_FACE_ID_ANGLE_PITCH_MASK);
    }

    /**
     * Determines if the anglePitch has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkAnglePitchInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_ANGLE_PITCH_MASK);
    }
    /**
     * Getter method for {@link #angleRoll}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.angle_roll</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of angleRoll
     */
    @ThriftField(20)
    public Integer getAngleRoll(){
        return angleRoll;
    }
    /**
     * Setter method for {@link #angleRoll}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to angleRoll
     */
    @ThriftField
    public void setAngleRoll(Integer newVal)
    {
        if ((newVal != null && angleRoll != null && (newVal.compareTo(angleRoll) == 0)) ||
            (newVal == null && angleRoll == null && checkAngleRollInitialized())) {
            return;
        }
        angleRoll = newVal;

        modified |= FL_FACE_ID_ANGLE_ROLL_MASK;
        initialized |= FL_FACE_ID_ANGLE_ROLL_MASK;
    }

    /**
     * Setter method for {@link #angleRoll}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to angleRoll
     */
    public void setAngleRoll(int newVal)
    {
        setAngleRoll(new Integer(newVal));
    }
    /**
     * Determines if the angleRoll has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkAngleRollModified()
    {
        return 0L !=  (modified & FL_FACE_ID_ANGLE_ROLL_MASK);
    }

    /**
     * Determines if the angleRoll has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkAngleRollInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_ANGLE_ROLL_MASK);
    }
    /**
     * Getter method for {@link #extInfo}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.ext_info</li>
     * <li>comments: 扩展字段,保存人脸检测基本信息之外的其他数据,内容由SDK负责解析</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARBINARY</li>
     * </ul>
     *
     * @return the value of extInfo
     */
    @ThriftField(21)
    public java.nio.ByteBuffer getExtInfo(){
        return extInfo;
    }
    /**
     * Setter method for {@link #extInfo}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to extInfo
     */
    @ThriftField
    public void setExtInfo(java.nio.ByteBuffer newVal)
    {
        if ((newVal != null && extInfo != null && (newVal.compareTo(extInfo) == 0)) ||
            (newVal == null && extInfo == null && checkExtInfoInitialized())) {
            return;
        }
        extInfo = newVal;

        modified |= FL_FACE_ID_EXT_INFO_MASK;
        initialized |= FL_FACE_ID_EXT_INFO_MASK;
    }

    /**
     * Determines if the extInfo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkExtInfoModified()
    {
        return 0L !=  (modified & FL_FACE_ID_EXT_INFO_MASK);
    }

    /**
     * Determines if the extInfo has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkExtInfoInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_EXT_INFO_MASK);
    }
    /**
     * Getter method for {@link #featureMd5}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.feature_md5</li>
     * <li> foreign key: fl_feature.md5</li>
     * <li>comments: 外键,人脸特征数据MD5 id</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.CHAR</li>
     * </ul>
     *
     * @return the value of featureMd5
     */
    @ThriftField(22)
    public String getFeatureMd5(){
        return featureMd5;
    }
    /**
     * Setter method for {@link #featureMd5}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value  to be assigned to featureMd5
     */
    @ThriftField
    public void setFeatureMd5(String newVal)
    {
        if ((newVal != null && featureMd5 != null && (newVal.compareTo(featureMd5) == 0)) ||
            (newVal == null && featureMd5 == null && checkFeatureMd5Initialized())) {
            return;
        }
        featureMd5 = newVal;

        modified |= FL_FACE_ID_FEATURE_MD5_MASK;
        initialized |= FL_FACE_ID_FEATURE_MD5_MASK;
    }

    /**
     * Determines if the featureMd5 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkFeatureMd5Modified()
    {
        return 0L !=  (modified & FL_FACE_ID_FEATURE_MD5_MASK);
    }

    /**
     * Determines if the featureMd5 has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkFeatureMd5Initialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_FEATURE_MD5_MASK);
    }
    /**
     * Getter method for {@link #createTime}.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: fl_face.create_time</li>
     * <li>default value: ; // DEFAULT 'CURRENT_TIMESTAMP'</li>
     * <li>NOT NULL</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of createTime
     */
    public java.util.Date getCreateTime(){
        return createTime;
    }
    /** 
     * use Long to represent date type for thrift:swift support 
     * @see #getCreateTime()
     */
    @ThriftField(name = "createTime",value = 23)
    public Long readCreateTime(){
        return null == createTime ? null:createTime.getTime();
    }
    /**
     * Setter method for {@link #createTime}.<br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value (NOT NULL) to be assigned to createTime
     */
    public void setCreateTime(java.util.Date newVal)
    {
        if ((newVal != null && createTime != null && (newVal.compareTo(createTime) == 0)) ||
            (newVal == null && createTime == null && checkCreateTimeInitialized())) {
            return;
        }
        createTime = newVal;

        modified |= FL_FACE_ID_CREATE_TIME_MASK;
        initialized |= FL_FACE_ID_CREATE_TIME_MASK;
    }

    /** 
     * use Long to represent date type for thrift:swift support
     * @see #setCreateTime(java.util.Date)  
     */
    @ThriftField(name = "createTime",value = 23)
    public void writeCreateTime(Long newVal){
        setCreateTime(null == newVal?null:new java.util.Date(newVal));
    }
    /**
     * Setter method for {@link #createTime}.<br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createTime
     */
    public void setCreateTime(long newVal)
    {
        setCreateTime(new java.util.Date(newVal));
    }
    /**
     * Determines if the createTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean checkCreateTimeModified()
    {
        return 0L !=  (modified & FL_FACE_ID_CREATE_TIME_MASK);
    }

    /**
     * Determines if the createTime has been initialized.<br>
     *
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean checkCreateTimeInitialized()
    {
        return 0L !=  (initialized & FL_FACE_ID_CREATE_TIME_MASK);
    }
    //////////////////////////////////////
    // referenced bean for FOREIGN KEYS
    //////////////////////////////////////
    /** 
     * The referenced {@link FeatureBean} by {@link #featureMd5} . <br>
     * FOREIGN KEY (feature_md5) REFERENCES fl_feature(md5)
     */
    private FeatureBean referencedByFeatureMd5;
    /** Getter method for {@link #referencedByFeatureMd5}. */
    @ThriftField(24)
    public FeatureBean getReferencedByFeatureMd5() {
        return this.referencedByFeatureMd5;
    }
    /** Setter method for {@link #referencedByFeatureMd5}. */
    @ThriftField
    public void setReferencedByFeatureMd5(FeatureBean reference) {
        this.referencedByFeatureMd5 = reference;
    }
    /** 
     * The referenced {@link ImageBean} by {@link #imageMd5} . <br>
     * FOREIGN KEY (image_md5) REFERENCES fl_image(md5)
     */
    private ImageBean referencedByImageMd5;
    /** Getter method for {@link #referencedByImageMd5}. */
    @ThriftField(25)
    public ImageBean getReferencedByImageMd5() {
        return this.referencedByImageMd5;
    }
    /** Setter method for {@link #referencedByImageMd5}. */
    @ThriftField
    public void setReferencedByImageMd5(ImageBean reference) {
        this.referencedByImageMd5 = reference;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return 0 != modified;
    }
  
    /**
     * Determines if the {@code column} has been modified.
     * @param columnID
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(int columnID){
        switch ( columnID ){
        case FL_FACE_ID_ID:
            return checkIdModified();
        case FL_FACE_ID_IMAGE_MD5:
            return checkImageMd5Modified();
        case FL_FACE_ID_FACE_LEFT:
            return checkFaceLeftModified();
        case FL_FACE_ID_FACE_TOP:
            return checkFaceTopModified();
        case FL_FACE_ID_FACE_WIDTH:
            return checkFaceWidthModified();
        case FL_FACE_ID_FACE_HEIGHT:
            return checkFaceHeightModified();
        case FL_FACE_ID_EYE_LEFTX:
            return checkEyeLeftxModified();
        case FL_FACE_ID_EYE_LEFTY:
            return checkEyeLeftyModified();
        case FL_FACE_ID_EYE_RIGHTX:
            return checkEyeRightxModified();
        case FL_FACE_ID_EYE_RIGHTY:
            return checkEyeRightyModified();
        case FL_FACE_ID_MOUTH_X:
            return checkMouthXModified();
        case FL_FACE_ID_MOUTH_Y:
            return checkMouthYModified();
        case FL_FACE_ID_NOSE_X:
            return checkNoseXModified();
        case FL_FACE_ID_NOSE_Y:
            return checkNoseYModified();
        case FL_FACE_ID_ANGLE_YAW:
            return checkAngleYawModified();
        case FL_FACE_ID_ANGLE_PITCH:
            return checkAnglePitchModified();
        case FL_FACE_ID_ANGLE_ROLL:
            return checkAngleRollModified();
        case FL_FACE_ID_EXT_INFO:
            return checkExtInfoModified();
        case FL_FACE_ID_FEATURE_MD5:
            return checkFeatureMd5Modified();
        case FL_FACE_ID_CREATE_TIME:
            return checkCreateTimeModified();
        }
        return false;
    }
    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param columnID
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(int columnID){
        switch(columnID) {
        case FL_FACE_ID_ID:
            return checkIdInitialized();
        case FL_FACE_ID_IMAGE_MD5:
            return checkImageMd5Initialized();
        case FL_FACE_ID_FACE_LEFT:
            return checkFaceLeftInitialized();
        case FL_FACE_ID_FACE_TOP:
            return checkFaceTopInitialized();
        case FL_FACE_ID_FACE_WIDTH:
            return checkFaceWidthInitialized();
        case FL_FACE_ID_FACE_HEIGHT:
            return checkFaceHeightInitialized();
        case FL_FACE_ID_EYE_LEFTX:
            return checkEyeLeftxInitialized();
        case FL_FACE_ID_EYE_LEFTY:
            return checkEyeLeftyInitialized();
        case FL_FACE_ID_EYE_RIGHTX:
            return checkEyeRightxInitialized();
        case FL_FACE_ID_EYE_RIGHTY:
            return checkEyeRightyInitialized();
        case FL_FACE_ID_MOUTH_X:
            return checkMouthXInitialized();
        case FL_FACE_ID_MOUTH_Y:
            return checkMouthYInitialized();
        case FL_FACE_ID_NOSE_X:
            return checkNoseXInitialized();
        case FL_FACE_ID_NOSE_Y:
            return checkNoseYInitialized();
        case FL_FACE_ID_ANGLE_YAW:
            return checkAngleYawInitialized();
        case FL_FACE_ID_ANGLE_PITCH:
            return checkAnglePitchInitialized();
        case FL_FACE_ID_ANGLE_ROLL:
            return checkAngleRollInitialized();
        case FL_FACE_ID_EXT_INFO:
            return checkExtInfoInitialized();
        case FL_FACE_ID_FEATURE_MD5:
            return checkFeatureMd5Initialized();
        case FL_FACE_ID_CREATE_TIME:
            return checkCreateTimeInitialized();
        }
        return false;
    }
    
    /**
     * Determines if the {@code column} has been modified.
     * @param column
     * @return true if the field has been modified, false if the field has not been modified
     * @author guyadong
     */
    public boolean isModified(String column){        
        return isModified(columnIDOf(column));
    }

    /**
     * Determines if the {@code column} has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     * @param column
     * @return true if the field has been initialized, false otherwise
     * @author guyadong
     */
    public boolean isInitialized(String column){
        return isInitialized(columnIDOf(column));
    }
    
    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        modified = 0L;
    }
    /**
     * Resets the primary keys ( {@link #id} ) modification status to 'not modified'.
     */
    public void resetPrimaryKeysModified()
    {
        modified &= (~(FL_FACE_ID_ID_MASK));
    }
    /**
     * Resets columns modification status except primary keys to 'not modified'.
     */
    public void resetModifiedExceptPrimaryKeys()
    {
        modified &= (~(FL_FACE_ID_IMAGE_MD5_MASK |
            FL_FACE_ID_FACE_LEFT_MASK |
            FL_FACE_ID_FACE_TOP_MASK |
            FL_FACE_ID_FACE_WIDTH_MASK |
            FL_FACE_ID_FACE_HEIGHT_MASK |
            FL_FACE_ID_EYE_LEFTX_MASK |
            FL_FACE_ID_EYE_LEFTY_MASK |
            FL_FACE_ID_EYE_RIGHTX_MASK |
            FL_FACE_ID_EYE_RIGHTY_MASK |
            FL_FACE_ID_MOUTH_X_MASK |
            FL_FACE_ID_MOUTH_Y_MASK |
            FL_FACE_ID_NOSE_X_MASK |
            FL_FACE_ID_NOSE_Y_MASK |
            FL_FACE_ID_ANGLE_YAW_MASK |
            FL_FACE_ID_ANGLE_PITCH_MASK |
            FL_FACE_ID_ANGLE_ROLL_MASK |
            FL_FACE_ID_EXT_INFO_MASK |
            FL_FACE_ID_FEATURE_MD5_MASK |
            FL_FACE_ID_CREATE_TIME_MASK));
    }
    /**
     * Resets the object initialization status to 'not initialized'.
     */
    private void resetInitialized()
    {
        initialized = 0L;
    }
    @Override
    public boolean equals(Object object)
    {
        if (!(object instanceof FaceBean)) {
            return false;
        }

        FaceBean obj = (FaceBean) object;
        return new EqualsBuilder()
            .append(getId(), obj.getId())
            .append(getImageMd5(), obj.getImageMd5())
            .append(getFaceLeft(), obj.getFaceLeft())
            .append(getFaceTop(), obj.getFaceTop())
            .append(getFaceWidth(), obj.getFaceWidth())
            .append(getFaceHeight(), obj.getFaceHeight())
            .append(getEyeLeftx(), obj.getEyeLeftx())
            .append(getEyeLefty(), obj.getEyeLefty())
            .append(getEyeRightx(), obj.getEyeRightx())
            .append(getEyeRighty(), obj.getEyeRighty())
            .append(getMouthX(), obj.getMouthX())
            .append(getMouthY(), obj.getMouthY())
            .append(getNoseX(), obj.getNoseX())
            .append(getNoseY(), obj.getNoseY())
            .append(getAngleYaw(), obj.getAngleYaw())
            .append(getAnglePitch(), obj.getAnglePitch())
            .append(getAngleRoll(), obj.getAngleRoll())
            .append(getExtInfo(), obj.getExtInfo())
            .append(getFeatureMd5(), obj.getFeatureMd5())
            .append(getCreateTime(), obj.getCreateTime())
            .isEquals();
    }

    @Override
    public int hashCode()
    {
        return new HashCodeBuilder(-82280557, -700257973)
            .append(getId())
            .toHashCode();
    }

    @Override
    public String toString() {
        return new StringBuilder(this.getClass().getName()).append("@").append(Integer.toHexString(this.hashCode())).append("[\n")
            .append("\tid=").append(getId()).append("\n")
            .append("\timage_md5=").append(getImageMd5()).append("\n")
            .append("\tface_left=").append(getFaceLeft()).append("\n")
            .append("\tface_top=").append(getFaceTop()).append("\n")
            .append("\tface_width=").append(getFaceWidth()).append("\n")
            .append("\tface_height=").append(getFaceHeight()).append("\n")
            .append("\teye_leftx=").append(getEyeLeftx()).append("\n")
            .append("\teye_lefty=").append(getEyeLefty()).append("\n")
            .append("\teye_rightx=").append(getEyeRightx()).append("\n")
            .append("\teye_righty=").append(getEyeRighty()).append("\n")
            .append("\tmouth_x=").append(getMouthX()).append("\n")
            .append("\tmouth_y=").append(getMouthY()).append("\n")
            .append("\tnose_x=").append(getNoseX()).append("\n")
            .append("\tnose_y=").append(getNoseY()).append("\n")
            .append("\tangle_yaw=").append(getAngleYaw()).append("\n")
            .append("\tangle_pitch=").append(getAnglePitch()).append("\n")
            .append("\tangle_roll=").append(getAngleRoll()).append("\n")
            .append("\text_info=").append(getExtInfo()).append("\n")
            .append("\tfeature_md5=").append(getFeatureMd5()).append("\n")
            .append("\tcreate_time=").append(getCreateTime()).append("\n")
            .append("]\n")
            .toString();
    }

    @Override
    public int compareTo(FaceBean object){
        return new CompareToBuilder()
            .append(getId(), object.getId())
            .append(getImageMd5(), object.getImageMd5())
            .append(getFaceLeft(), object.getFaceLeft())
            .append(getFaceTop(), object.getFaceTop())
            .append(getFaceWidth(), object.getFaceWidth())
            .append(getFaceHeight(), object.getFaceHeight())
            .append(getEyeLeftx(), object.getEyeLeftx())
            .append(getEyeLefty(), object.getEyeLefty())
            .append(getEyeRightx(), object.getEyeRightx())
            .append(getEyeRighty(), object.getEyeRighty())
            .append(getMouthX(), object.getMouthX())
            .append(getMouthY(), object.getMouthY())
            .append(getNoseX(), object.getNoseX())
            .append(getNoseY(), object.getNoseY())
            .append(getAngleYaw(), object.getAngleYaw())
            .append(getAnglePitch(), object.getAnglePitch())
            .append(getAngleRoll(), object.getAngleRoll())
            .append(getExtInfo(), object.getExtInfo())
            .append(getFeatureMd5(), object.getFeatureMd5())
            .append(getCreateTime(), object.getCreateTime())
            .toComparison();
    }
    @Override
    public FaceBean clone(){
        try {
            return (FaceBean) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
    }
    /**
    * set all field to null
    *
    * @author guyadong
    */
    public FaceBean clean()
    {
        setId(null);
        setImageMd5(null);
        setFaceLeft(null);
        setFaceTop(null);
        setFaceWidth(null);
        setFaceHeight(null);
        setEyeLeftx(null);
        setEyeLefty(null);
        setEyeRightx(null);
        setEyeRighty(null);
        setMouthX(null);
        setMouthY(null);
        setNoseX(null);
        setNoseY(null);
        setAngleYaw(null);
        setAnglePitch(null);
        setAngleRoll(null);
        setExtInfo(null);
        setFeatureMd5(null);
        setCreateTime(null);
        isNew(true);
        resetInitialized();
        resetIsModified();
        return this;
    }
    
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column id list to copy into the current bean
     */
    public void copy(FaceBean bean, int... fieldList)
    {
        if (null == fieldList || 0 == fieldList.length)
            for (int i = 0; i < 20; ++i) {
                if( bean.isInitialized(i))
                    setValue(i, bean.getValue(i));
            }
        else
            for (int i = 0; i < fieldList.length; ++i) {
                if( bean.isInitialized(fieldList[i]))
                    setValue(fieldList[i], bean.getValue(fieldList[i]));
            }
    }
        
    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     * @param fieldList the column name list to copy into the current bean
     */
    public void copy(FaceBean bean, String... fieldList)
    {
        if (null == fieldList || 0 == fieldList.length)
            copy(bean,(int[])null);
        else{
            int field;
            for (int i = 0; i < fieldList.length; i++) {
                field = columnIDOf(fieldList[i].trim());
                if(bean.isInitialized(field))
                    setValue(field, bean.getValue(field));
            }
        }
    }

    /**
     * return a object representation of the given column id
     */
    @SuppressWarnings("unchecked")
    public <T>T getValue(int columnID)
    {
        switch( columnID ){
        case FL_FACE_ID_ID: 
            return (T)getId();        
        case FL_FACE_ID_IMAGE_MD5: 
            return (T)getImageMd5();        
        case FL_FACE_ID_FACE_LEFT: 
            return (T)getFaceLeft();        
        case FL_FACE_ID_FACE_TOP: 
            return (T)getFaceTop();        
        case FL_FACE_ID_FACE_WIDTH: 
            return (T)getFaceWidth();        
        case FL_FACE_ID_FACE_HEIGHT: 
            return (T)getFaceHeight();        
        case FL_FACE_ID_EYE_LEFTX: 
            return (T)getEyeLeftx();        
        case FL_FACE_ID_EYE_LEFTY: 
            return (T)getEyeLefty();        
        case FL_FACE_ID_EYE_RIGHTX: 
            return (T)getEyeRightx();        
        case FL_FACE_ID_EYE_RIGHTY: 
            return (T)getEyeRighty();        
        case FL_FACE_ID_MOUTH_X: 
            return (T)getMouthX();        
        case FL_FACE_ID_MOUTH_Y: 
            return (T)getMouthY();        
        case FL_FACE_ID_NOSE_X: 
            return (T)getNoseX();        
        case FL_FACE_ID_NOSE_Y: 
            return (T)getNoseY();        
        case FL_FACE_ID_ANGLE_YAW: 
            return (T)getAngleYaw();        
        case FL_FACE_ID_ANGLE_PITCH: 
            return (T)getAnglePitch();        
        case FL_FACE_ID_ANGLE_ROLL: 
            return (T)getAngleRoll();        
        case FL_FACE_ID_EXT_INFO: 
            return (T)getExtInfo();        
        case FL_FACE_ID_FEATURE_MD5: 
            return (T)getFeatureMd5();        
        case FL_FACE_ID_CREATE_TIME: 
            return (T)getCreateTime();        
        }
        return null;
    }

    /**
     * set a value representation of the given column id
     */
    public <T> void setValue(int columnID,T value)
    {
        switch( columnID ) {
        case FL_FACE_ID_ID:        
            setId((Integer)value);
        case FL_FACE_ID_IMAGE_MD5:        
            setImageMd5((String)value);
        case FL_FACE_ID_FACE_LEFT:        
            setFaceLeft((Integer)value);
        case FL_FACE_ID_FACE_TOP:        
            setFaceTop((Integer)value);
        case FL_FACE_ID_FACE_WIDTH:        
            setFaceWidth((Integer)value);
        case FL_FACE_ID_FACE_HEIGHT:        
            setFaceHeight((Integer)value);
        case FL_FACE_ID_EYE_LEFTX:        
            setEyeLeftx((Integer)value);
        case FL_FACE_ID_EYE_LEFTY:        
            setEyeLefty((Integer)value);
        case FL_FACE_ID_EYE_RIGHTX:        
            setEyeRightx((Integer)value);
        case FL_FACE_ID_EYE_RIGHTY:        
            setEyeRighty((Integer)value);
        case FL_FACE_ID_MOUTH_X:        
            setMouthX((Integer)value);
        case FL_FACE_ID_MOUTH_Y:        
            setMouthY((Integer)value);
        case FL_FACE_ID_NOSE_X:        
            setNoseX((Integer)value);
        case FL_FACE_ID_NOSE_Y:        
            setNoseY((Integer)value);
        case FL_FACE_ID_ANGLE_YAW:        
            setAngleYaw((Integer)value);
        case FL_FACE_ID_ANGLE_PITCH:        
            setAnglePitch((Integer)value);
        case FL_FACE_ID_ANGLE_ROLL:        
            setAngleRoll((Integer)value);
        case FL_FACE_ID_EXT_INFO:        
            setExtInfo((java.nio.ByteBuffer)value);
        case FL_FACE_ID_FEATURE_MD5:        
            setFeatureMd5((String)value);
        case FL_FACE_ID_CREATE_TIME:        
            setCreateTime((java.util.Date)value);
        }
    }
    
    /**
     * return a object representation of the given field
     */
    public <T>T getValue(String column)
    {
        return getValue(columnIDOf(column));
    }

    /**
     * set a value representation of the given field
     */
    public <T>void setValue(String column,T value)
    {
        setValue(columnIDOf(column),value);
    }

    public static int columnIDOf(String column){
        int index = FL_FACE_FIELDS_LIST.indexOf(column);
        if( 0 > index ) 
            index = FL_FACE_JAVA_FIELDS_LIST.indexOf(column);
        return index;    
    }
}
