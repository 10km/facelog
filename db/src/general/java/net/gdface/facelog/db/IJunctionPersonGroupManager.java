// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: manager.interface.java.vm
// ______________________________________________________
package net.gdface.facelog.db;
import net.gdface.facelog.db.exception.ObjectRetrievalException;
import net.gdface.facelog.db.exception.WrapDAOException;

/**
 * Interface to handle database calls (save, load, count, etc...) for the fl_junction_person_group table.<br>
 * Remarks: 用户组信息关联表
 * @author guyadong
 */
public interface IJunctionPersonGroupManager extends TableManager<JunctionPersonGroupBean>
{  
    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a {@link JunctionPersonGroupBean} from the fl_junction_person_group using primary key fields.
     *
     * @param personId Integer - PK# 1
     * @param groupId Integer - PK# 2
     * @return a unique JunctionPersonGroupBean or {@code null} if not found
     */
    //1
    public JunctionPersonGroupBean loadByPrimaryKey(Integer personId,Integer groupId);

    /**
     * Loads a {@link JunctionPersonGroupBean} from the fl_junction_person_group using primary key fields.
     *
     * @param personId Integer - PK# 1
     * @param groupId Integer - PK# 2
     * @return a unique JunctionPersonGroupBean
     * @throws ObjectRetrievalException if not found
     */
    //1.1
    public JunctionPersonGroupBean loadByPrimaryKeyChecked(Integer personId,Integer groupId) throws ObjectRetrievalException;
    
    /**
     * Returns true if this fl_junction_person_group contains row with primary key fields.
     * @param personId Integer - PK# 1
     * @param groupId Integer - PK# 2
     * @see #loadByPrimaryKey($keys)
     */
    //1.4
    public boolean existsPrimaryKey(Integer personId,Integer groupId);
    /**
     * Delete row according to its primary keys.<br>
     * all keys must not be null
     *
     * @param personId Integer - PK# 1
     * @param groupId Integer - PK# 2
     * @return the number of deleted rows
     */
    //2
    public int deleteByPrimaryKey(Integer personId,Integer groupId);
    /**
     * Delete beans.<br>
     *
     * @param beans JunctionPersonGroupBean collection wille be deleted
     * @return the number of deleted rows
     */
    //2.4
    public int delete(JunctionPersonGroupBean... beans);
    /**
     * Delete beans.<br>
     *
     * @param beans JunctionPersonGroupBean collection wille be deleted
     * @return the number of deleted rows
     */
    //2.5
    public int delete(java.util.Collection<JunctionPersonGroupBean> beans);
 
    /**
     * Save the JunctionPersonGroupBean bean and referenced beans and imported beans into the database.
     *
     * @param bean the {@link JunctionPersonGroupBean} bean to be saved
     * @param refPersonByPersonId the {@link PersonBean} bean referenced by {@link JunctionPersonGroupBean} 
     * @param refPersongroupByGroupId the {@link PersonGroupBean} bean referenced by {@link JunctionPersonGroupBean} 
         * @return the inserted or updated {@link JunctionPersonGroupBean} bean
     */
    //3.5 SYNC SAVE 
    public JunctionPersonGroupBean save(JunctionPersonGroupBean bean
        , PersonBean refPersonByPersonId , PersonGroupBean refPersongroupByGroupId 
        );
    /**
     * Transaction version for sync save
     * @see {@link #save(JunctionPersonGroupBean , PersonBean , PersonGroupBean )}
     */
    //3.6 SYNC SAVE AS TRANSACTION
    public JunctionPersonGroupBean saveAsTransaction(final JunctionPersonGroupBean bean
        ,final PersonBean refPersonByPersonId ,final PersonGroupBean refPersongroupByGroupId 
        );
      //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the {@link PersonBean} object referenced by {@link JunctionPersonGroupBean#getPersonId}() field.<br>
     * FK_NAME : fl_junction_person_group_ibfk_1
     * @param bean the {@link JunctionPersonGroupBean}
     * @return the associated {@link PersonBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //5.1 GET REFERENCED VALUE
    public PersonBean getReferencedByPersonId(JunctionPersonGroupBean bean);

    /**
     * Associates the {@link JunctionPersonGroupBean} object to the {@link PersonBean} object by {@link JunctionPersonGroupBean#getPersonId}() field.
     *
     * @param bean the {@link JunctionPersonGroupBean} object to use
     * @param beanToSet the {@link PersonBean} object to associate to the {@link JunctionPersonGroupBean}
     * @return always beanToSet saved
     * @throws WrapDAOException
     */
    //5.2 SET REFERENCED 
    public PersonBean setReferencedByPersonId(JunctionPersonGroupBean bean, PersonBean beanToSet);
    /**
     * Retrieves the {@link PersonGroupBean} object referenced by {@link JunctionPersonGroupBean#getGroupId}() field.<br>
     * FK_NAME : fl_junction_person_group_ibfk_2
     * @param bean the {@link JunctionPersonGroupBean}
     * @return the associated {@link PersonGroupBean} bean or {@code null} if {@code bean} is {@code null}
     */
    //5.1 GET REFERENCED VALUE
    public PersonGroupBean getReferencedByGroupId(JunctionPersonGroupBean bean);

    /**
     * Associates the {@link JunctionPersonGroupBean} object to the {@link PersonGroupBean} object by {@link JunctionPersonGroupBean#getGroupId}() field.
     *
     * @param bean the {@link JunctionPersonGroupBean} object to use
     * @param beanToSet the {@link PersonGroupBean} object to associate to the {@link JunctionPersonGroupBean}
     * @return always beanToSet saved
     * @throws WrapDAOException
     */
    //5.2 SET REFERENCED 
    public PersonGroupBean setReferencedByGroupId(JunctionPersonGroupBean bean, PersonGroupBean beanToSet);


}
