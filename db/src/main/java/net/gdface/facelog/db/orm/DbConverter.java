// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.orm;

import java.util.HashMap;
import java.util.Map;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.BaseBean;

import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.FaceLightBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.LogLightBean;
import net.gdface.facelog.dborm.device.FlDeviceBeanBase;
import net.gdface.facelog.dborm.face.FlFaceBeanBase;
import net.gdface.facelog.dborm.image.FlImageBeanBase;
import net.gdface.facelog.dborm.log.FlLogBeanBase;
import net.gdface.facelog.dborm.person.FlPersonBeanBase;
import net.gdface.facelog.dborm.image.FlStoreBeanBase;
import net.gdface.facelog.dborm.face.FlFaceLightBeanBase;
import net.gdface.facelog.dborm.face.FlFeatureBeanBase;
import net.gdface.facelog.dborm.log.FlLogLightBeanBase;
public class DbConverter implements IDbConverter {
	public final IBeanConverter<DeviceBean,FlDeviceBeanBase> _convertDeviceBean=new IBeanConverter.AbstractHandle<DeviceBean,FlDeviceBeanBase>(){

		@Override
		public DeviceBean fromNative(FlDeviceBeanBase bean) {
			return null;
		}

		@Override
		public FlDeviceBeanBase toNative(DeviceBean bean) {
			return null;
		}};
	public final IBeanConverter<FaceBean,FlFaceBeanBase> _convertFaceBean=new IBeanConverter.AbstractHandle<FaceBean,FlFaceBeanBase>(){

		@Override
		public FaceBean fromNative(FlFaceBeanBase bean) {
			return null;
		}

		@Override
		public FlFaceBeanBase toNative(FaceBean bean) {
			return null;
		}};
	public final IBeanConverter<ImageBean,FlImageBeanBase> _convertImageBean=new IBeanConverter.AbstractHandle<ImageBean,FlImageBeanBase>(){

		@Override
		public ImageBean fromNative(FlImageBeanBase bean) {
			return null;
		}

		@Override
		public FlImageBeanBase toNative(ImageBean bean) {
			return null;
		}};
	public final IBeanConverter<LogBean,FlLogBeanBase> _convertLogBean=new IBeanConverter.AbstractHandle<LogBean,FlLogBeanBase>(){

		@Override
		public LogBean fromNative(FlLogBeanBase bean) {
			return null;
		}

		@Override
		public FlLogBeanBase toNative(LogBean bean) {
			return null;
		}};
	public final IBeanConverter<PersonBean,FlPersonBeanBase> _convertPersonBean=new IBeanConverter.AbstractHandle<PersonBean,FlPersonBeanBase>(){

		@Override
		public PersonBean fromNative(FlPersonBeanBase bean) {
			return null;
		}

		@Override
		public FlPersonBeanBase toNative(PersonBean bean) {
			return null;
		}};
	public final IBeanConverter<StoreBean,FlStoreBeanBase> _convertStoreBean=new IBeanConverter.AbstractHandle<StoreBean,FlStoreBeanBase>(){

		@Override
		public StoreBean fromNative(FlStoreBeanBase bean) {
			return null;
		}

		@Override
		public FlStoreBeanBase toNative(StoreBean bean) {
			return null;
		}};
	public final IBeanConverter<FaceLightBean,FlFaceLightBeanBase> _convertFaceLightBean=new IBeanConverter.AbstractHandle<FaceLightBean,FlFaceLightBeanBase>(){

		@Override
		public FaceLightBean fromNative(FlFaceLightBeanBase bean) {
			return null;
		}

		@Override
		public FlFaceLightBeanBase toNative(FaceLightBean bean) {
			return null;
		}};
	public final IBeanConverter<FeatureBean,FlFeatureBeanBase> _convertFeatureBean=new IBeanConverter.AbstractHandle<FeatureBean,FlFeatureBeanBase>(){

		@Override
		public FeatureBean fromNative(FlFeatureBeanBase bean) {
			return null;
		}

		@Override
		public FlFeatureBeanBase toNative(FeatureBean bean) {
			return null;
		}};
	public final IBeanConverter<LogLightBean,FlLogLightBeanBase> _convertLogLightBean=new IBeanConverter.AbstractHandle<LogLightBean,FlLogLightBeanBase>(){

		@Override
		public LogLightBean fromNative(FlLogLightBeanBase bean) {
			return null;
		}

		@Override
		public FlLogLightBeanBase toNative(LogLightBean bean) {
			return null;
		}};

		private final Map<Class<? extends BaseBean>,IBeanConverter<? extends BaseBean,?>> converters= new HashMap<Class<? extends BaseBean>,IBeanConverter<?extends BaseBean,?>>(){
			private static final long serialVersionUID = 1L;
			{
				put(DeviceBean.class,_convertDeviceBean);
				put(FaceBean.class,_convertFaceBean);
				put(ImageBean.class,_convertImageBean);
				put(LogBean.class,_convertLogBean);
				put(PersonBean.class,_convertPersonBean);
				put(StoreBean.class,_convertStoreBean);
				put(FaceLightBean.class,_convertFaceLightBean);
				put(FeatureBean.class,_convertFeatureBean);
				put(LogLightBean.class,_convertLogLightBean);
			}};
	
	@Override
	@SuppressWarnings("unchecked")
	public <G extends BaseBean,N>IBeanConverter<G,N>getBeanConverter(Class<G> clazz){
		return (IBeanConverter<G, N>) converters.get(clazz);
	}

	@Override
	public IBeanConverter<DeviceBean, FlDeviceBeanBase> getDeviceBeanConverter() {
		return _convertDeviceBean;
	}

	@Override
	public IBeanConverter<FaceBean, FlFaceBeanBase> getFaceBeanConverter() {
		return _convertFaceBean;
	}

	@Override
	public IBeanConverter<ImageBean, FlImageBeanBase> getImageBeanConverter() {
		return _convertImageBean;
	}

	@Override
	public IBeanConverter<LogBean, FlLogBeanBase> getLogBeanConverter() {
		return _convertLogBean;
	}

	@Override
	public IBeanConverter<PersonBean, FlPersonBeanBase> getPersonBeanConverter() {
		return _convertPersonBean;
	}

	@Override
	public IBeanConverter<StoreBean, FlStoreBeanBase> getStoreBeanConverter() {
		return _convertStoreBean;
	}

	@Override
	public IBeanConverter<FaceLightBean, FlFaceLightBeanBase> getFaceLightBeanConverter() {
		return _convertFaceLightBean;
	}

	@Override
	public IBeanConverter<FeatureBean, FlFeatureBeanBase> getFeatureBeanConverter() {
		return _convertFeatureBean;
	}

	@Override
	public IBeanConverter<LogLightBean, FlLogLightBeanBase> getLogLightBeanConverter() {
		return _convertLogLightBean;
	}
}
