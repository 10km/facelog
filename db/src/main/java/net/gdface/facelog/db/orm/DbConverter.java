// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
// ______________________________________________________

package net.gdface.facelog.db.orm;

import java.util.Vector;
import net.gdface.facelog.db.IBeanConverter;
import net.gdface.facelog.db.IDbConverter;
import net.gdface.facelog.db.BaseBean;

import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.StoreBean;
import net.gdface.facelog.db.FaceLightBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.LogLightBean;
import net.gdface.facelog.dborm.device.FlDeviceBeanBase;
import net.gdface.facelog.dborm.face.FlFaceBeanBase;
import net.gdface.facelog.dborm.image.FlImageBeanBase;
import net.gdface.facelog.dborm.log.FlLogBeanBase;
import net.gdface.facelog.dborm.person.FlPersonBeanBase;
import net.gdface.facelog.dborm.image.FlStoreBeanBase;
import net.gdface.facelog.dborm.face.FlFaceLightBeanBase;
import net.gdface.facelog.dborm.face.FlFeatureBeanBase;
import net.gdface.facelog.dborm.log.FlLogLightBeanBase;
public class DbConverter implements IDbConverter {
    public final IBeanConverter<DeviceBean,FlDeviceBeanBase> _convertDeviceBean=new IBeanConverter.AbstractHandle<DeviceBean,FlDeviceBeanBase>(){

        @Override
        public DeviceBean fromNative(FlDeviceBeanBase bean) {
            return null;
        }

        @Override
        public FlDeviceBeanBase toNative(DeviceBean bean) {
            return null;
        }};
    public final IBeanConverter<FaceBean,FlFaceBeanBase> _convertFaceBean=new IBeanConverter.AbstractHandle<FaceBean,FlFaceBeanBase>(){

        @Override
        public FaceBean fromNative(FlFaceBeanBase bean) {
            return null;
        }

        @Override
        public FlFaceBeanBase toNative(FaceBean bean) {
            return null;
        }};
    public final IBeanConverter<ImageBean,FlImageBeanBase> _convertImageBean=new IBeanConverter.AbstractHandle<ImageBean,FlImageBeanBase>(){

        @Override
        public ImageBean fromNative(FlImageBeanBase bean) {
            return null;
        }

        @Override
        public FlImageBeanBase toNative(ImageBean bean) {
            return null;
        }};
    public final IBeanConverter<LogBean,FlLogBeanBase> _convertLogBean=new IBeanConverter.AbstractHandle<LogBean,FlLogBeanBase>(){

        @Override
        public LogBean fromNative(FlLogBeanBase bean) {
            return null;
        }

        @Override
        public FlLogBeanBase toNative(LogBean bean) {
            return null;
        }};
    public final IBeanConverter<PersonBean,FlPersonBeanBase> _convertPersonBean=new IBeanConverter.AbstractHandle<PersonBean,FlPersonBeanBase>(){

        @Override
        public PersonBean fromNative(FlPersonBeanBase bean) {
            return null;
        }

        @Override
        public FlPersonBeanBase toNative(PersonBean bean) {
            return null;
        }};
    public final IBeanConverter<StoreBean,FlStoreBeanBase> _convertStoreBean=new IBeanConverter.AbstractHandle<StoreBean,FlStoreBeanBase>(){

        @Override
        public StoreBean fromNative(FlStoreBeanBase bean) {
            return null;
        }

        @Override
        public FlStoreBeanBase toNative(StoreBean bean) {
            return null;
        }};
    public final IBeanConverter<FaceLightBean,FlFaceLightBeanBase> _convertFaceLightBean=new IBeanConverter.AbstractHandle<FaceLightBean,FlFaceLightBeanBase>(){

        @Override
        public FaceLightBean fromNative(FlFaceLightBeanBase bean) {
            return null;
        }

        @Override
        public FlFaceLightBeanBase toNative(FaceLightBean bean) {
            return null;
        }};
    public final IBeanConverter<FeatureBean,FlFeatureBeanBase> _convertFeatureBean=new IBeanConverter.AbstractHandle<FeatureBean,FlFeatureBeanBase>(){

        @Override
        public FeatureBean fromNative(FlFeatureBeanBase bean) {
            return null;
        }

        @Override
        public FlFeatureBeanBase toNative(FeatureBean bean) {
            return null;
        }};
    public final IBeanConverter<LogLightBean,FlLogLightBeanBase> _convertLogLightBean=new IBeanConverter.AbstractHandle<LogLightBean,FlLogLightBeanBase>(){

        @Override
        public LogLightBean fromNative(FlLogLightBeanBase bean) {
            return null;
        }

        @Override
        public FlLogLightBeanBase toNative(LogLightBean bean) {
            return null;
        }};

    private final Vector<Object[]> converters= new Vector<Object[]>(){
        private static final long serialVersionUID = -2915982403974349774L;
        {
            add(new Object[]{DeviceBean.class,FlDeviceBeanBase.class,_convertDeviceBean});
            add(new Object[]{FaceBean.class,FlFaceBeanBase.class,_convertFaceBean});
            add(new Object[]{ImageBean.class,FlImageBeanBase.class,_convertImageBean});
            add(new Object[]{LogBean.class,FlLogBeanBase.class,_convertLogBean});
            add(new Object[]{PersonBean.class,FlPersonBeanBase.class,_convertPersonBean});
            add(new Object[]{StoreBean.class,FlStoreBeanBase.class,_convertStoreBean});
            add(new Object[]{FaceLightBean.class,FlFaceLightBeanBase.class,_convertFaceLightBean});
            add(new Object[]{FeatureBean.class,FlFeatureBeanBase.class,_convertFeatureBean});
            add(new Object[]{LogLightBean.class,FlLogLightBeanBase.class,_convertLogLightBean});
        }};
    
    private<G extends BaseBean,N> int getIndex(Class<G> gClass,Class<N> nClass){
            Vector<Integer>find= new Vector<Integer>();
            if(null!=gClass && null != nClass){
                for(int i=0;i<converters.size();++i){
                    Object[] converter = converters.get(i);
                    if(((Class<?>)converter[0]).isAssignableFrom(gClass) 
                            && ((Class<?>)converter[1]).isAssignableFrom(nClass)){
                        return i;
                    }
                }
            }else if(null != gClass){
                for(int i=0;i<converters.size();++i){
                    Object[] converter = converters.get(i);
                    if(((Class<?>)converter[0]).isAssignableFrom(gClass) 
                            ){
                        find.add(i);
                    }
                }
            }else if(null != nClass){
                for(int i=0;i<converters.size();++i){
                    Object[] converter = converters.get(i);
                    if(((Class<?>)converter[1]).isAssignableFrom(nClass)){
                        find.add(i);
                    }
                }
            }
            return  1==find.size() ? find.get(0) : -1;
        }  
    @Override
    @SuppressWarnings("unchecked")
    public <G extends BaseBean,N>IBeanConverter<G,N>getBeanConverter(Class<G> gClass,Class<N> nClass){
        int index = getIndex(gClass, nClass);
        if(index<0)
            throw new IllegalArgumentException(
                    String.format("not found converter for (%s,%s)"
                            ,null==gClass?"null":gClass.getSimpleName()
                            ,null==nClass?"null":nClass.getSimpleName()));
        return (IBeanConverter<G, N>) converters.get(index)[2];
    }
    @Override
    public synchronized <G extends BaseBean,N>void setBeanConverter(Class<G> gClass,Class<N> nClass,IBeanConverter<G,N>converter){
        if(null == gClass || null == nClass || null == converter)
            throw new NullPointerException();
        Object[] c = new Object[]{gClass,nClass,converter};
        int index = getIndex(gClass, nClass);
        if(index<0){
            converters.add(c);
        }else{
            converters.set(index, c);
        }
    }

    @Override
    public IBeanConverter<DeviceBean, FlDeviceBeanBase> getDeviceBeanConverter() {
        return _convertDeviceBean;
    }

    @Override
    public IBeanConverter<FaceBean, FlFaceBeanBase> getFaceBeanConverter() {
        return _convertFaceBean;
    }

    @Override
    public IBeanConverter<ImageBean, FlImageBeanBase> getImageBeanConverter() {
        return _convertImageBean;
    }

    @Override
    public IBeanConverter<LogBean, FlLogBeanBase> getLogBeanConverter() {
        return _convertLogBean;
    }

    @Override
    public IBeanConverter<PersonBean, FlPersonBeanBase> getPersonBeanConverter() {
        return _convertPersonBean;
    }

    @Override
    public IBeanConverter<StoreBean, FlStoreBeanBase> getStoreBeanConverter() {
        return _convertStoreBean;
    }

    @Override
    public IBeanConverter<FaceLightBean, FlFaceLightBeanBase> getFaceLightBeanConverter() {
        return _convertFaceLightBean;
    }

    @Override
    public IBeanConverter<FeatureBean, FlFeatureBeanBase> getFeatureBeanConverter() {
        return _convertFeatureBean;
    }

    @Override
    public IBeanConverter<LogLightBean, FlLogLightBeanBase> getLogLightBeanConverter() {
        return _convertLogLightBean;
    }
}
