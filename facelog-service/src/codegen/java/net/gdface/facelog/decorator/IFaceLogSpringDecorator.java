package net.gdface.facelog.decorator;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Map;
import net.gdface.facelog.IFaceLog;
import net.gdface.facelog.MQParam;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.LogLightBean;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.PersonGroupBean;
import net.gdface.thrift.TypeTransformer;
import net.gdface.thrift.exception.ServiceRuntimeException;
import java.util.ServiceLoader;
import java.util.Iterator;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.*;
/**
 * decorator pattern 装饰者模式代理{@link IFaceLog}接口<br>
 * 将{@link IFaceLog}实例封装为一个spring controler<br>
 * 转发所有服务请求到{@link #delegate()}指定的实例<br>
 * 计算机生成代码(generated by automated tools ThriftServiceDecoratorGenerator @author guyadong)<br>
 * @author guyadong
 *
 */
@RestController
@Api(value = "IFaceLog")
public class IFaceLogSpringDecorator {
    private static final Logger logger = LoggerFactory.getLogger(IFaceLogSpringDecorator.class);
    private static final IFaceLog delegate = loadDelegate();
    private static final IFaceLogResponseFactory respFactory = loadRespFactory();
    
    private static final IFaceLog loadDelegate() {
			/* SPI(Service Provider Interface)机制加载 {@link IFaceLogSupplier}实例,没有找到则抛出异常 */
			ServiceLoader<IFaceLogSupplier> providers = ServiceLoader.load(IFaceLogSupplier.class);
			Iterator<IFaceLogSupplier> itor = providers.iterator();
			if(!itor.hasNext()){
				throw new IllegalStateException("NOT FOUND IFaceLogSupplier instance");
			}
			return itor.next().get();
	}   

    private static final IFaceLogResponseFactory loadRespFactory() {
			/* SPI(Service Provider Interface)机制加载 {@link IFaceLogResponseFactory}实例,没有找到则抛出异常 */
			ServiceLoader<IFaceLogResponseFactory> providers = ServiceLoader.load(IFaceLogResponseFactory.class);
			Iterator<IFaceLogResponseFactory> itor = providers.iterator();
			if(!itor.hasNext()){
				throw new IllegalStateException("NOT FOUND IFaceLogResponseFactory instance");
			}
			return itor.next();
	}  
    public IFaceLogSpringDecorator() {
    }

    /**
     * 返回被装饰的{@link IFaceLog}实例
     * @return
     */
    public IFaceLog delegate() {
        return delegate;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addFeature(byte[],java.lang.Integer,java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addFeature", method = RequestMethod.POST)
    public IFaceLogResponse addFeature(@RequestParam("feature") byte[] feature,
        @RequestParam("personId") Integer personId,
        @RequestParam("faecBeans") List<FaceBean> faecBeans,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().addFeature(feature,personId,faecBeans,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addFeature(byte[],java.lang.Integer,java.util.Map,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addFeatureMulti", method = RequestMethod.POST)
    public IFaceLogResponse addFeature(@RequestParam("feature") byte[] feature,
        @RequestParam("personId") Integer personId,
        @RequestParam("faceInfo") Map<ByteBuffer, FaceBean> faceInfo,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().addFeature(feature,personId,faceInfo,deviceId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addImage(byte[],java.lang.Integer,net.gdface.facelog.db.FaceBean,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addImage", method = RequestMethod.POST)
    public IFaceLogResponse addImage(@RequestParam("imageData") byte[] imageData,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("faceBean") FaceBean faceBean,
        @RequestParam("personId") Integer personId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().addImage(imageData,deviceId,faceBean,personId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addLog(net.gdface.facelog.db.LogBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addLog", method = RequestMethod.POST)
    public IFaceLogResponse addLog(@RequestParam("bean") LogBean bean,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().addLog(bean,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addLogs(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addLogs", method = RequestMethod.POST)
    public IFaceLogResponse addLogs(@RequestParam("beans") List<LogBean> beans,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().addLogs(beans,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addPermit(int,int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addPermitById", method = RequestMethod.POST)
    public IFaceLogResponse addPermit(@RequestParam("deviceGroupId") int deviceGroupId,
        @RequestParam("personGroupId") int personGroupId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().addPermit(deviceGroupId,personGroupId,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addPermit(net.gdface.facelog.db.DeviceGroupBean,net.gdface.facelog.db.PersonGroupBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addPermit", method = RequestMethod.POST)
    public IFaceLogResponse addPermit(@RequestParam("deviceGroup") DeviceGroupBean deviceGroup,
        @RequestParam("personGroup") PersonGroupBean personGroup,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().addPermit(deviceGroup,personGroup,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyAckChannel(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyAckChannel", method = RequestMethod.POST)
    public IFaceLogResponse applyAckChannel(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().applyAckChannel(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyAckChannel(net.gdface.facelog.Token,long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyAckChannelWithDuration", method = RequestMethod.POST)
    public IFaceLogResponse applyAckChannel(@RequestParam("token") net.gdface.facelog.Token token,
        @RequestParam("duration") long duration) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().applyAckChannel(token,duration));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyCmdSn(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyCmdSn", method = RequestMethod.POST)
    public IFaceLogResponse applyCmdSn(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().applyCmdSn(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyPersonToken(int,java.lang.String,boolean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyPersonToken", method = RequestMethod.POST)
    public IFaceLogResponse applyPersonToken(@RequestParam("personId") int personId,
        @RequestParam("password") String password,
        @RequestParam("isMd5") boolean isMd5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().applyPersonToken(personId,password,isMd5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyRootToken(java.lang.String,boolean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyRootToken", method = RequestMethod.POST)
    public IFaceLogResponse applyRootToken(@RequestParam("password") String password,
        @RequestParam("isMd5") boolean isMd5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().applyRootToken(password,isMd5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyUserToken(int,java.lang.String,boolean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyUserToken", method = RequestMethod.POST)
    public IFaceLogResponse applyUserToken(@RequestParam("userid") int userid,
        @RequestParam("password") String password,
        @RequestParam("isMd5") boolean isMd5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().applyUserToken(userid,password,isMd5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#bindBorder(java.lang.Integer,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/bindBorder", method = RequestMethod.POST)
    public IFaceLogResponse bindBorder(@RequestParam("personGroupId") Integer personGroupId,
        @RequestParam("deviceGroupId") Integer deviceGroupId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().bindBorder(personGroupId,deviceGroupId,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#childListForDeviceGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/childListForDeviceGroup", method = RequestMethod.POST)
    public IFaceLogResponse childListForDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().childListForDeviceGroup(deviceGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#childListForPersonGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/childListForPersonGroup", method = RequestMethod.POST)
    public IFaceLogResponse childListForPersonGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().childListForPersonGroup(personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countDeviceByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countDeviceByWhere", method = RequestMethod.POST)
    public IFaceLogResponse countDeviceByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().countDeviceByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countDeviceGroupByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countDeviceGroupByWhere", method = RequestMethod.POST)
    public IFaceLogResponse countDeviceGroupByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().countDeviceGroupByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countLogByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogByWhere", method = RequestMethod.POST)
    public IFaceLogResponse countLogByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().countLogByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countLogLightByVerifyTime(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogLightByVerifyTime", method = RequestMethod.POST)
    public IFaceLogResponse countLogLightByVerifyTime(@RequestParam("timestamp") long timestamp) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().countLogLightByVerifyTime(timestamp));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countLogLightByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogLightByWhere", method = RequestMethod.POST)
    public IFaceLogResponse countLogLightByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().countLogLightByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countPersonByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countPersonByWhere", method = RequestMethod.POST)
    public IFaceLogResponse countPersonByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().countPersonByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countPersonGroupByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countPersonGroupByWhere", method = RequestMethod.POST)
    public IFaceLogResponse countPersonGroupByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().countPersonGroupByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteAllFeaturesByPersonId(int,boolean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteAllFeaturesByPersonId", method = RequestMethod.POST)
    public IFaceLogResponse deleteAllFeaturesByPersonId(@RequestParam("personId") int personId,
        @RequestParam("deleteImage") boolean deleteImage,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deleteAllFeaturesByPersonId(personId,deleteImage,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteDeviceGroup(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteDeviceGroup", method = RequestMethod.POST)
    public IFaceLogResponse deleteDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deleteDeviceGroup(deviceGroupId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteFeature(java.lang.String,boolean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteFeature", method = RequestMethod.POST)
    public IFaceLogResponse deleteFeature(@RequestParam("featureMd5") String featureMd5,
        @RequestParam("deleteImage") boolean deleteImage,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deleteFeature(featureMd5,deleteImage,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteGroupPermitOnDeviceGroup(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteGroupPermitOnDeviceGroup", method = RequestMethod.POST)
    public IFaceLogResponse deleteGroupPermitOnDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deleteGroupPermitOnDeviceGroup(deviceGroupId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteImage(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteImage", method = RequestMethod.POST)
    public IFaceLogResponse deleteImage(@RequestParam("imageMd5") String imageMd5,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deleteImage(imageMd5,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePermit(net.gdface.facelog.db.DeviceGroupBean,net.gdface.facelog.db.PersonGroupBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePermit", method = RequestMethod.POST)
    public IFaceLogResponse deletePermit(@RequestParam("deviceGroup") DeviceGroupBean deviceGroup,
        @RequestParam("personGroup") PersonGroupBean personGroup,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deletePermit(deviceGroup,personGroup,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePerson(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePerson", method = RequestMethod.POST)
    public IFaceLogResponse deletePerson(@RequestParam("personId") int personId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deletePerson(personId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersonByPapersNum(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonByPapersNum", method = RequestMethod.POST)
    public IFaceLogResponse deletePersonByPapersNum(@RequestParam("papersNum") String papersNum,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deletePersonByPapersNum(papersNum,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersonGroup(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonGroup", method = RequestMethod.POST)
    public IFaceLogResponse deletePersonGroup(@RequestParam("personGroupId") int personGroupId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deletePersonGroup(personGroupId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersonGroupPermit(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonGroupPermit", method = RequestMethod.POST)
    public IFaceLogResponse deletePersonGroupPermit(@RequestParam("personGroupId") int personGroupId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deletePersonGroupPermit(personGroupId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersons(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersons", method = RequestMethod.POST)
    public IFaceLogResponse deletePersons(@RequestParam("personIdList") List<Integer> personIdList,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deletePersons(personIdList,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersonsByPapersNum(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonsByPapersNum", method = RequestMethod.POST)
    public IFaceLogResponse deletePersonsByPapersNum(@RequestParam("papersNumlist") List<String> papersNumlist,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().deletePersonsByPapersNum(papersNumlist,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#disablePerson(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/disablePerson", method = RequestMethod.POST)
    public IFaceLogResponse disablePerson(@RequestParam("personId") int personId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().disablePerson(personId,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#disablePerson(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/disablePersonList", method = RequestMethod.POST)
    public IFaceLogResponse disablePerson(@RequestParam("personIdList") List<Integer> personIdList,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().disablePerson(personIdList,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#existsDevice(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsDevice", method = RequestMethod.POST)
    public IFaceLogResponse existsDevice(@RequestParam("id") int id) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().existsDevice(id));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#existsFeature(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsFeature", method = RequestMethod.POST)
    public IFaceLogResponse existsFeature(@RequestParam("md5") String md5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().existsFeature(md5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#existsImage(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsImage", method = RequestMethod.POST)
    public IFaceLogResponse existsImage(@RequestParam("md5") String md5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().existsImage(md5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#existsPerson(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsPerson", method = RequestMethod.POST)
    public IFaceLogResponse existsPerson(@RequestParam("persionId") int persionId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().existsPerson(persionId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDevice(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevice", method = RequestMethod.POST)
    public IFaceLogResponse getDevice(@RequestParam("deviceId") int deviceId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDevice(deviceId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroup", method = RequestMethod.POST)
    public IFaceLogResponse getDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDeviceGroup(deviceGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroups(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroups", method = RequestMethod.POST)
    public IFaceLogResponse getDeviceGroups(@RequestParam("groupIdList") List<Integer> groupIdList) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDeviceGroups(groupIdList));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroupsBelongs(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsBelongs", method = RequestMethod.POST)
    public IFaceLogResponse getDeviceGroupsBelongs(@RequestParam("deviceId") int deviceId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDeviceGroupsBelongs(deviceId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroupsPermit(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsPermit", method = RequestMethod.POST)
    public IFaceLogResponse getDeviceGroupsPermit(@RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDeviceGroupsPermit(personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroupsPermittedBy(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsPermittedBy", method = RequestMethod.POST)
    public IFaceLogResponse getDeviceGroupsPermittedBy(@RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDeviceGroupsPermittedBy(personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceIdOfFeature(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceIdOfFeature", method = RequestMethod.POST)
    public IFaceLogResponse getDeviceIdOfFeature(@RequestParam("featureMd5") String featureMd5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDeviceIdOfFeature(featureMd5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDevices(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevices", method = RequestMethod.POST)
    public IFaceLogResponse getDevices(@RequestParam("idList") List<Integer> idList) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDevices(idList));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDevicesOfGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevicesOfGroup", method = RequestMethod.POST)
    public IFaceLogResponse getDevicesOfGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getDevicesOfGroup(deviceGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeature(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeature", method = RequestMethod.POST)
    public IFaceLogResponse getFeature(@RequestParam("md5") String md5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getFeature(md5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeatureBeansByPersonId(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeatureBeansByPersonId", method = RequestMethod.POST)
    public IFaceLogResponse getFeatureBeansByPersonId(@RequestParam("personId") int personId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getFeatureBeansByPersonId(personId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeatureBytes(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeatureBytes", method = RequestMethod.POST)
    public IFaceLogResponse getFeatureBytes(@RequestParam("md5") String md5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getFeatureBytes(md5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeatures(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeatures", method = RequestMethod.POST)
    public IFaceLogResponse getFeatures(@RequestParam("md5") List<String> md5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getFeatures(md5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeaturesOfPerson(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeaturesOfPerson", method = RequestMethod.POST)
    public IFaceLogResponse getFeaturesOfPerson(@RequestParam("personId") int personId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getFeaturesOfPerson(personId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getGroupPermit(int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermit", method = RequestMethod.POST)
    public IFaceLogResponse getGroupPermit(@RequestParam("deviceId") int deviceId,
        @RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getGroupPermit(deviceId,personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getGroupPermitOnDeviceGroup(int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermitOnDeviceGroup", method = RequestMethod.POST)
    public IFaceLogResponse getGroupPermitOnDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId,
        @RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getGroupPermitOnDeviceGroup(deviceGroupId,personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getGroupPermits(int,java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermits", method = RequestMethod.POST)
    public IFaceLogResponse getGroupPermits(@RequestParam("deviceId") int deviceId,
        @RequestParam("personGroupIdList") List<Integer> personGroupIdList) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getGroupPermits(deviceId,personGroupIdList));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getImage(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImage", method = RequestMethod.POST)
    public IFaceLogResponse getImage(@RequestParam("imageMD5") String imageMD5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getImage(imageMD5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getImageBytes(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImageBytes", method = RequestMethod.POST)
    public IFaceLogResponse getImageBytes(@RequestParam("imageMD5") String imageMD5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getImageBytes(imageMD5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getImagesAssociatedByFeature(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImagesAssociatedByFeature", method = RequestMethod.POST)
    public IFaceLogResponse getImagesAssociatedByFeature(@RequestParam("featureMd5") String featureMd5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getImagesAssociatedByFeature(featureMd5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getLogBeansByPersonId(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getLogBeansByPersonId", method = RequestMethod.POST)
    public IFaceLogResponse getLogBeansByPersonId(@RequestParam("personId") int personId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getLogBeansByPersonId(personId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPerson(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPerson", method = RequestMethod.POST)
    public IFaceLogResponse getPerson(@RequestParam("personId") int personId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPerson(personId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonByPapersNum(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonByPapersNum", method = RequestMethod.POST)
    public IFaceLogResponse getPersonByPapersNum(@RequestParam("papersNum") String papersNum) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersonByPapersNum(papersNum));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroup", method = RequestMethod.POST)
    public IFaceLogResponse getPersonGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersonGroup(personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonGroups(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroups", method = RequestMethod.POST)
    public IFaceLogResponse getPersonGroups(@RequestParam("groupIdList") List<Integer> groupIdList) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersonGroups(groupIdList));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonGroupsBelongs(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroupsBelongs", method = RequestMethod.POST)
    public IFaceLogResponse getPersonGroupsBelongs(@RequestParam("personId") int personId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersonGroupsBelongs(personId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonGroupsPermittedBy(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroupsPermittedBy", method = RequestMethod.POST)
    public IFaceLogResponse getPersonGroupsPermittedBy(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersonGroupsPermittedBy(deviceGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonPermit(int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonPermit", method = RequestMethod.POST)
    public IFaceLogResponse getPersonPermit(@RequestParam("deviceId") int deviceId,
        @RequestParam("personId") int personId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersonPermit(deviceId,personId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonPermits(int,java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonPermits", method = RequestMethod.POST)
    public IFaceLogResponse getPersonPermits(@RequestParam("deviceId") int deviceId,
        @RequestParam("personIdList") List<Integer> personIdList) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersonPermits(deviceId,personIdList));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersons(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersons", method = RequestMethod.POST)
    public IFaceLogResponse getPersons(@RequestParam("idList") List<Integer> idList) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersons(idList));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonsOfGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonsOfGroup", method = RequestMethod.POST)
    public IFaceLogResponse getPersonsOfGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getPersonsOfGroup(personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getProperty(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getProperty", method = RequestMethod.POST)
    public IFaceLogResponse getProperty(@RequestParam("key") String key,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getProperty(key,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getRedisParameters(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getRedisParameters", method = RequestMethod.POST)
    public IFaceLogResponse getRedisParameters(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getRedisParameters(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getServiceConfig(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getServiceConfig", method = RequestMethod.POST)
    public IFaceLogResponse getServiceConfig(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getServiceConfig(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getSubDeviceGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getSubDeviceGroup", method = RequestMethod.POST)
    public IFaceLogResponse getSubDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getSubDeviceGroup(deviceGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getSubPersonGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getSubPersonGroup", method = RequestMethod.POST)
    public IFaceLogResponse getSubPersonGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().getSubPersonGroup(personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isDisable(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isDisable", method = RequestMethod.POST)
    public IFaceLogResponse isDisable(@RequestParam("personId") int personId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isDisable(personId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isLocal()}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isLocal", method = RequestMethod.POST)
    public IFaceLogResponse isLocal() 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isLocal());
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidAckChannel(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidAckChannel", method = RequestMethod.POST)
    public IFaceLogResponse isValidAckChannel(@RequestParam("ackChannel") String ackChannel) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isValidAckChannel(ackChannel));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidCmdSn(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidCmdSn", method = RequestMethod.POST)
    public IFaceLogResponse isValidCmdSn(@RequestParam("cmdSn") long cmdSn) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isValidCmdSn(cmdSn));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidDeviceToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidDeviceToken", method = RequestMethod.POST)
    public IFaceLogResponse isValidDeviceToken(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isValidDeviceToken(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidPassword(java.lang.String,java.lang.String,boolean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidPassword", method = RequestMethod.POST)
    public IFaceLogResponse isValidPassword(@RequestParam("userId") String userId,
        @RequestParam("password") String password,
        @RequestParam("isMd5") boolean isMd5) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isValidPassword(userId,password,isMd5));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidPersonToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidPersonToken", method = RequestMethod.POST)
    public IFaceLogResponse isValidPersonToken(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isValidPersonToken(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidRootToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidRootToken", method = RequestMethod.POST)
    public IFaceLogResponse isValidRootToken(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isValidRootToken(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidToken", method = RequestMethod.POST)
    public IFaceLogResponse isValidToken(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isValidToken(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidUserToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidUserToken", method = RequestMethod.POST)
    public IFaceLogResponse isValidUserToken(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().isValidUserToken(token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#listOfParentForDeviceGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/listOfParentForDeviceGroup", method = RequestMethod.POST)
    public IFaceLogResponse listOfParentForDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().listOfParentForDeviceGroup(deviceGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#listOfParentForPersonGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/listOfParentForPersonGroup", method = RequestMethod.POST)
    public IFaceLogResponse listOfParentForPersonGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().listOfParentForPersonGroup(personGroupId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadAllPerson()}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadAllPerson", method = RequestMethod.POST)
    public IFaceLogResponse loadAllPerson() 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadAllPerson());
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadDeviceByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadDeviceByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadDeviceByWhere(where,startRow,numRows));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadDeviceGroupByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceGroupByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadDeviceGroupByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadDeviceGroupByWhere(where,startRow,numRows));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadDeviceGroupIdByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceGroupIdByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadDeviceGroupIdByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadDeviceGroupIdByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadDeviceIdByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceIdByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadDeviceIdByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadDeviceIdByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadFeatureMd5ByUpdate(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadFeatureMd5ByUpdate", method = RequestMethod.POST)
    public IFaceLogResponse loadFeatureMd5ByUpdate(@RequestParam("timestamp") long timestamp) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadFeatureMd5ByUpdate(timestamp));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadLogByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadLogByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadLogByWhere(where,startRow,numRows));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadLogLightByVerifyTime(long,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogLightByVerifyTime", method = RequestMethod.POST)
    public IFaceLogResponse loadLogLightByVerifyTime(@RequestParam("timestamp") long timestamp,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadLogLightByVerifyTime(timestamp,startRow,numRows));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadLogLightByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogLightByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadLogLightByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadLogLightByWhere(where,startRow,numRows));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPermitByUpdate(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPermitByUpdate", method = RequestMethod.POST)
    public IFaceLogResponse loadPermitByUpdate(@RequestParam("timestamp") long timestamp) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadPermitByUpdate(timestamp));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadPersonByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadPersonByWhere(where,startRow,numRows));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonGroupByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonGroupByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadPersonGroupByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadPersonGroupByWhere(where,startRow,numRows));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonGroupIdByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonGroupIdByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadPersonGroupIdByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadPersonGroupIdByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonIdByUpdateTime(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonIdByUpdateTime", method = RequestMethod.POST)
    public IFaceLogResponse loadPersonIdByUpdateTime(@RequestParam("timestamp") long timestamp) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadPersonIdByUpdateTime(timestamp));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonIdByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonIdByWhere", method = RequestMethod.POST)
    public IFaceLogResponse loadPersonIdByWhere(@RequestParam("where") String where) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadPersonIdByWhere(where));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadUpdatedPersons(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadUpdatedPersons", method = RequestMethod.POST)
    public IFaceLogResponse loadUpdatedPersons(@RequestParam("timestamp") long timestamp) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().loadUpdatedPersons(timestamp));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#offline(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/offline", method = RequestMethod.POST)
    public IFaceLogResponse offline(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().offline(token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#online(net.gdface.facelog.db.DeviceBean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/online", method = RequestMethod.POST)
    public IFaceLogResponse online(@RequestParam("device") DeviceBean device) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().online(device));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#registerDevice(net.gdface.facelog.db.DeviceBean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/registerDevice", method = RequestMethod.POST)
    public IFaceLogResponse registerDevice(@RequestParam("newDevice") DeviceBean newDevice) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().registerDevice(newDevice));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#releasePersonToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releasePersonToken", method = RequestMethod.POST)
    public IFaceLogResponse releasePersonToken(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().releasePersonToken(token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#releaseRootToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releaseRootToken", method = RequestMethod.POST)
    public IFaceLogResponse releaseRootToken(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().releaseRootToken(token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#releaseUserToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releaseUserToken", method = RequestMethod.POST)
    public IFaceLogResponse releaseUserToken(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().releaseUserToken(token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#replaceFeature(java.lang.Integer,java.lang.String,boolean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/replaceFeature", method = RequestMethod.POST)
    public IFaceLogResponse replaceFeature(@RequestParam("personId") Integer personId,
        @RequestParam("featureMd5") String featureMd5,
        @RequestParam("deleteOldFeatureImage") boolean deleteOldFeatureImage,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().replaceFeature(personId,featureMd5,deleteOldFeatureImage,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#rootGroupOfDevice(java.lang.Integer)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/rootGroupOfDevice", method = RequestMethod.POST)
    public IFaceLogResponse rootGroupOfDevice(@RequestParam("deviceId") Integer deviceId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().rootGroupOfDevice(deviceId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#rootGroupOfPerson(java.lang.Integer)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/rootGroupOfPerson", method = RequestMethod.POST)
    public IFaceLogResponse rootGroupOfPerson(@RequestParam("personId") Integer personId) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().rootGroupOfPerson(personId));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#saveDevice(net.gdface.facelog.db.DeviceBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveDevice", method = RequestMethod.POST)
    public IFaceLogResponse saveDevice(@RequestParam("deviceBean") DeviceBean deviceBean,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().saveDevice(deviceBean,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#saveDeviceGroup(net.gdface.facelog.db.DeviceGroupBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveDeviceGroup", method = RequestMethod.POST)
    public IFaceLogResponse saveDeviceGroup(@RequestParam("deviceGroupBean") DeviceGroupBean deviceGroupBean,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().saveDeviceGroup(deviceGroupBean,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],byte[],byte[],net.gdface.facelog.db.FaceBean,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonFull", method = RequestMethod.POST)
    public IFaceLogResponse savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("feature") byte[] feature,
        @RequestParam("featureImage") byte[] featureImage,
        @RequestParam("featureFaceBean") FaceBean featureFaceBean,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,feature,featureImage,featureFaceBean,deviceId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],byte[],java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureMultiFaces", method = RequestMethod.POST)
    public IFaceLogResponse savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("feature") byte[] feature,
        @RequestParam("faceBeans") List<FaceBean> faceBeans,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,feature,faceBeans,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],byte[],java.util.Map,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureMultiImage", method = RequestMethod.POST)
    public IFaceLogResponse savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("feature") byte[] feature,
        @RequestParam("faceInfo") Map<ByteBuffer, FaceBean> faceInfo,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,feature,faceInfo,deviceId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhoto", method = RequestMethod.POST)
    public IFaceLogResponse savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],net.gdface.facelog.db.FeatureBean,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeature", method = RequestMethod.POST)
    public IFaceLogResponse savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("featureBean") FeatureBean featureBean,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,featureBean,deviceId,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,java.lang.String,java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureSaved", method = RequestMethod.POST)
    public IFaceLogResponse savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhotoMd5") String idPhotoMd5,
        @RequestParam("featureMd5") String featureMd5,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePerson(bean,idPhotoMd5,featureMd5,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePerson", method = RequestMethod.POST)
    public IFaceLogResponse savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePerson(bean,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePersonGroup(net.gdface.facelog.db.PersonGroupBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonGroup", method = RequestMethod.POST)
    public IFaceLogResponse savePersonGroup(@RequestParam("personGroupBean") PersonGroupBean personGroupBean,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePersonGroup(personGroupBean,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePersons(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersons", method = RequestMethod.POST)
    public IFaceLogResponse savePersons(@RequestParam("beans") List<PersonBean> beans,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().savePersons(beans,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePersons(java.util.Map,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonsWithPhoto", method = RequestMethod.POST)
    public IFaceLogResponse savePersons(@RequestParam("persons") Map<ByteBuffer, PersonBean> persons,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().savePersons(persons,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#saveServiceConfig(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveServiceConfig", method = RequestMethod.POST)
    public IFaceLogResponse saveServiceConfig(@RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().saveServiceConfig(token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#setPersonExpiryDate(int,long,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setPersonExpiryDate", method = RequestMethod.POST)
    public IFaceLogResponse setPersonExpiryDate(@RequestParam("personId") int personId,
        @RequestParam("expiryDate") long expiryDate,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().setPersonExpiryDate(personId,expiryDate,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#setPersonExpiryDate(java.util.List,long,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setPersonExpiryDateList", method = RequestMethod.POST)
    public IFaceLogResponse setPersonExpiryDate(@RequestParam("personIdList") List<Integer> personIdList,
        @RequestParam("expiryDate") long expiryDate,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().setPersonExpiryDate(personIdList,expiryDate,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#setProperties(java.util.Map,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setProperties", method = RequestMethod.POST)
    public IFaceLogResponse setProperties(@RequestParam("config") Map<String, String> config,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().setProperties(config,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#setProperty(java.lang.String,java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setProperty", method = RequestMethod.POST)
    public IFaceLogResponse setProperty(@RequestParam("key") String key,
        @RequestParam("value") String value,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().setProperty(key,value,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#taskQueueOf(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/taskQueueOf", method = RequestMethod.POST)
    public IFaceLogResponse taskQueueOf(@RequestParam("task") String task,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().taskQueueOf(task,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#taskRegister(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/taskRegister", method = RequestMethod.POST)
    public IFaceLogResponse taskRegister(@RequestParam("task") String task,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().taskRegister(task,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#unbindBorder(java.lang.Integer,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/unbindBorder", method = RequestMethod.POST)
    public IFaceLogResponse unbindBorder(@RequestParam("personGroupId") Integer personGroupId,
        @RequestParam("deviceGroupId") Integer deviceGroupId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().unbindBorder(personGroupId,deviceGroupId,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#unregisterDevice(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/unregisterDevice", method = RequestMethod.POST)
    public IFaceLogResponse unregisterDevice(@RequestParam("deviceId") int deviceId,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            delegate().unregisterDevice(deviceId,token);
            response.onComplete(null);
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#updateDevice(net.gdface.facelog.db.DeviceBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/updateDevice", method = RequestMethod.POST)
    public IFaceLogResponse updateDevice(@RequestParam("deviceBean") DeviceBean deviceBean,
        @RequestParam("token") net.gdface.facelog.Token token) 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().updateDevice(deviceBean,token));
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#version()}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/version", method = RequestMethod.POST)
    public IFaceLogResponse version() 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().version());
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#versionInfo()}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/versionInfo", method = RequestMethod.POST)
    public IFaceLogResponse versionInfo() 
        {
        IFaceLogResponse response = respFactory.newInstance();
        try{
            response.onComplete(delegate().versionInfo());
        }
        catch(Exception e){
        	logger.error(e.getMessage(),e);
        	response.onError(e);
        }
        return response;
    }
    /**
     * 获取{@link IFaceLog}实例的接口，
     * 用于应用层SPI方式提供{@link IFaceLog}实例
     * @author guyadong
     *
     */
    public static interface IFaceLogSupplier{
        IFaceLog get();
    }
    /**
     * web响应数据接口
     * @author guyadong
     *
     */
    public static interface IFaceLogResponse{
    	/**
    	 * @param result 调用返回值，void类型填{@code null}
    	 */
    	void onComplete(Object result);
    	/**
    	 * @param e 异常
    	 */
    	void onError(Exception e);
    }
    /**
     * 获取{@link IFaceLogResponse}接口实例的工厂类接口
     * @author guyadong
     *
     */
    public static interface IFaceLogResponseFactory{
    	/**
    	 * @return 返回新的{@link IFaceLogResponse}接口实例
    	 */
    	IFaceLogResponse newInstance();
    }
}