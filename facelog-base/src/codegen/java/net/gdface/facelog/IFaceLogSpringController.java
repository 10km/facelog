/**
 * decorator pattern 装饰者模式代理{@link IFaceLog}接口<br>
 * 将{@link IFaceLog}实例封装为一个spring controler<br>
 * 计算机生成代码(generated by automated tools DecoratorGenerator @author guyadong)<br>
 * @author guyadong
 *
 */
package net.gdface.facelog;
import java.util.List;
import java.util.Map;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PermitBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.PersonGroupBean;
import java.util.ServiceLoader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Iterator;
import java.util.Objects;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.*;

/**
 * FaceLog 服务接口<br>
 * <ul>
 * <li>所有标明为图像数据的参数,是指具有特定图像格式的图像数据(如jpg,png...),而非无格式的原始点阵位图</li>
 * <li>所有{@link RuntimeException}异常会被封装在{@code ServiceRuntimeException}抛出,
 * client端可以通过{@code ServiceRuntimeException#getType()}获取异常类型.<br>
 * 异常类型定义参见{@link CommonConstant.ExceptionType},<br>
 * 例如: 在执行涉及数据库操作的异常{@link RuntimeDaoException}，
 * 被封装到{@code ServiceRuntimeException}抛出时type为{@link ExceptionType#DAO}</li>
 * <li>所有数据库对象(Java Bean,比如 {@link PersonBean}),在执行保存操作(save)时,
 * 如果为新增记录({@link PersonBean#isNew()}为true),则执行insert操作,否则执行update操作,
 * 如果数据库已经存在指定的记录而{@code isNew()}为{@code true},则那么执行insert操作数据库就会抛出异常，
 * 所以请在执行save时特别注意{@code isNew()}状态</li>
 * <li>对于以add为前缀的添加记录方法,在添加记录前会检查数据库中是否有(主键)相同记录,
 * 如果有则会抛出异常{@link DuplicateRecordException}</li>
 * <li>所有带{@link Token}参数的方法都需要提供访问令牌,访问令牌分为人员令牌,设备令牌和root令牌(仅用于root帐户),
 * 注释中标注为{@code PERSON_ONLY}的方法只接受人员令牌,
 * 注释中标注为{@code DEVICE_ONLY}的方法只接受设备令牌,
 * 注释中标注为{@code ROOT_ONLY}的方法只接受root令牌,
 * 关于令牌申请和释放参见{@link #applyPersonToken(int, String, boolean)},{@link #releasePersonToken(Token)},{@link #online(DeviceBean)},{@link #offline(Token)}</li>
 * </ul>
 * @author guyadong
 */
@RestController
@Api(value="IFaceLog",tags={"IFaceLog Controller"})
public class IFaceLogSpringController {
    private static final Logger logger = LoggerFactory.getLogger(IFaceLogSpringController.class);
    private static InstanceSupplier instanceSupplier = getInstanceSupplier();
    private final ResponseFactory responseFactory = loadResponseFactory();
    /**
     * SPI(Service Provider Interface)机制加载 {@link InstanceSupplier}实例,没有找到则返回{@code null},
     * 返回{@link InstanceSupplier}提供的{@link IFaceLog}实例
     * @return 返回{@link IFaceLog}实例
     */
    private static final InstanceSupplier getInstanceSupplier() {
            /* SPI(Service Provider Interface)机制加载 {@link InstanceSupplier}实例,没有找到则抛出异常 */
            ServiceLoader<InstanceSupplier> providers = ServiceLoader.load(InstanceSupplier.class);
            Iterator<InstanceSupplier> itor = providers.iterator();
            return itor.hasNext() ? itor.next() : null;
    }
    /**
	 * @param instanceSupplier 要设置的 instanceSupplier
	 */
	public static void setInstanceSupplier(InstanceSupplier instanceSupplier) {
		IFaceLogSpringController.instanceSupplier = instanceSupplier;
	}
    /**
     * SPI(Service Provider Interface)加载{@link ResponseFactory}接口实例,
     * 没有找到则返回{@link DefaultResponseFactory}实例
     * @return 返回{@link ResponseFactory}实例
     */
    private static final ResponseFactory loadResponseFactory() {
            ServiceLoader<ResponseFactory> providers = ServiceLoader.load(ResponseFactory.class);
            Iterator<ResponseFactory> itor = providers.iterator();
            return itor.hasNext() ? itor.next() : new DefaultResponseFactory();
    }  
    public IFaceLogSpringController() {
    }

    /**
     * 返回被装饰的{@link IFaceLog}实例
     * @return
     */
    protected IFaceLog delegate() {
        return Objects.requireNonNull(
                instanceSupplier == null ? null : instanceSupplier.instanceOfIFaceLog(),
                "IFaceLog  instance is null"    );
    }
    // port-1
    /**
     * 增加一个人脸特征记录，如果记录已经存在则抛出异常<br>
     * 适用于一张人脸图像提取一个人脸特征的算法<br>
     * @param feature 特征数据
     * @param featureVersion 特征(SDk)版本号
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param asIdPhotoIfAbsent 如果{@code personId}指定的记录没指定身份照片,
     * 是否用{@code featurePhoto}作为身份照片,{@code featurePhoto}为{@code null}时无效
     * @param featurePhoto 生成人脸特征的原始照片,如果不要求保留原始照片可为null
     * @param faceBean 生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null
     * @param removed 已经存在的特征记录ID(MD5),可为{@code null},不为{@code null}时会先删除指定的特征,记录不存在则抛出异常
     * @param token (设备)访问令牌
     * @return 保存的人脸特征记录{@link FeatureBean}
     * @throws DuplicateRecordException
     * @since 2.1.2
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addFeatureWithImage", method = RequestMethod.POST)
    @ApiOperation(value = "增加一个人脸特征记录，如果记录已经存在则抛出异常<br>\n"
+" 适用于一张人脸图像提取一个人脸特征的算法<br>",httpMethod="POST")
    public Response addFeature( @RequestBody AddFeatureWithImageArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().addFeature(args.feature,args.featureVersion,args.personId,args.asIdPhotoIfAbsent,args.featurePhoto,args.faceBean,args.removed,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-2
    /**
     * 增加一个人脸特征记录，如果记录已经存在则抛出异常<br>
     * @param feature 人脸特征数据
     * @param featureVersion 特征(SDk)版本号
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param faecBeans 生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null
     * @param removed 已经存在的特征记录ID(MD5),可为{@code null},不为{@code null}时会先删除指定的特征,记录不存在则抛出异常
     * @param token (设备)访问令牌
     * @return 保存的人脸特征记录{@link FeatureBean}
     * @throws DuplicateRecordException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addFeature", method = RequestMethod.POST)
    @ApiOperation(value = "增加一个人脸特征记录，如果记录已经存在则抛出异常<br>",httpMethod="POST")
    public Response addFeature( @RequestBody AddFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().addFeature(args.feature,args.featureVersion,args.personId,args.faecBeans,args.removed,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-3
    /**
     * 增加一个人脸特征记录,特征数据由faceInfo指定的多张图像合成，如果记录已经存在则抛出异常<br>
     * {@code photos}与{@code faces}为提取特征{@code feature}的人脸照片对应的人脸位置对象，必须一一对应
     * @param feature 特征数据
     * @param featureVersion 特征(SDk)版本号
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param photos 检测到人脸的照片列表
     * @param faces 检测人脸信息列表
     * @param removed 已经存在的特征记录ID(MD5),可为{@code null},不为{@code null}时会先删除指定的特征,记录不存在则抛出异常
     * @param token (设备)访问令牌
     * @return 保存的人脸特征记录{@link FeatureBean}
     * @throws DuplicateRecordException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addFeatureMulti", method = RequestMethod.POST)
    @ApiOperation(value = "增加一个人脸特征记录,特征数据由faceInfo指定的多张图像合成，如果记录已经存在则抛出异常<br>\n"
+" {@code photos}与{@code faces}为提取特征{@code feature}的人脸照片对应的人脸位置对象，必须一一对应",httpMethod="POST")
    public Response addFeature( @RequestBody AddFeatureMultiArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().addFeature(args.feature,args.featureVersion,args.personId,args.photos,args.faces,args.removed,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-4
    /**
     * 保存图像数据,如果图像数据已经存在，则抛出异常
     * @param imageData 图像数据
     * @param deviceId 图像来源设备id,可为null
     * @param faceBean 关联的人脸信息对象,可为null
     * @param personId 关联的人员id(fl_person.id),可为null
     * @param token 访问令牌
     * @return 保存的图像记录
     * @throws DuplicateRecordException 数据库中已经存在要保存的图像数据
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addImage", method = RequestMethod.POST)
    @ApiOperation(value = "保存图像数据,如果图像数据已经存在，则抛出异常",httpMethod="POST")
    public Response addImage( @RequestBody AddImageArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().addImage(args.imageData,args.deviceId,args.faceBean,args.personId,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-5
    /**
     * 添加一条验证日志记录
     * <br>{@code DEVICE_ONLY}
     * @param logBean 日志记录对象
     * @param token 访问令牌
     * @throws DuplicateRecordException 数据库中存在相同记录
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addLog", method = RequestMethod.POST)
    @ApiOperation(value = "添加一条验证日志记录\n"
+" <br>{@code DEVICE_ONLY}",httpMethod="POST")
    public Response addLog( @RequestBody AddLogArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().addLog(args.logBean,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-6
    /**
     * 添加一条验证日志记录
     * <br>{@code DEVICE_ONLY}
     * {@code faceBean}和{@code featureImage}必须全不为{@code null},否则抛出异常
     * @param logBean 日志记录对象
     * @param faceBean 用于保存到数据库的提取人脸特征的人脸信息对象
     * @param featureImage 用于保存到数据库的现场采集人脸特征的照片
     * @param token 访问令牌
     * @throws DuplicateRecordException 数据库中存在相同记录
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addLogFull", method = RequestMethod.POST)
    @ApiOperation(value = "添加一条验证日志记录\n"
+" <br>{@code DEVICE_ONLY}\n"
+" {@code faceBean}和{@code featureImage}必须全不为{@code null},否则抛出异常",httpMethod="POST")
    public Response addLog( @RequestBody AddLogFullArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().addLog(args.logBean,args.faceBean,args.featureImage,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-7
    /**
     * 添加一组验证日志记录(事务存储)<br>
     * 所有输入参数的list长度必须一致(不能有{@code null})元素,每3个相同索引位置元素为一组关联的日志记录，参见{@link #addLog(LogBean, FaceBean, byte[], Token)}
     * @param logBeans 日志记录对象
     * @param faceBeans 为用于保存到数据库的提取人脸特征的人脸信息对象
     * @param featureImages 用于保存到数据库的现场采集人脸特征的照片
     * @param token 访问令牌
     * @throws DuplicateRecordException 数据库中存在相同记录
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addLogsFull", method = RequestMethod.POST)
    @ApiOperation(value = "添加一组验证日志记录(事务存储)<br>\n"
+" 所有输入参数的list长度必须一致(不能有{@code null})元素,每3个相同索引位置元素为一组关联的日志记录，参见{@link #addLog(LogBean, FaceBean, byte[], Token)}",httpMethod="POST")
    public Response addLogs( @RequestBody AddLogsFullArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().addLogs(args.logBeans,args.faceBeans,args.featureImages,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-8
    /**
     * 添加一组验证日志记录(事务存储)
     * <br>{@code DEVICE_ONLY}
     * @param beans
     * @param token 访问令牌
     * @throws DuplicateRecordException 数据库中存在相同记录
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addLogs", method = RequestMethod.POST)
    @ApiOperation(value = "添加一组验证日志记录(事务存储)\n"
+" <br>{@code DEVICE_ONLY}",httpMethod="POST")
    public Response addLogs( @RequestBody AddLogsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().addLogs(args.beans,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-9
    /**
     * 申请一个唯一的命令响应通道<br>
     * <br>{@code PERSON_ONLY}
     * @param duration 通道有效时间(秒) 大于0有效,否则使用默认的有效期
     * @param token 访问令牌
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyAckChannelWithDuration", method = RequestMethod.POST)
    @ApiOperation(value = "申请一个唯一的命令响应通道<br>\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response applyAckChannel( @RequestBody ApplyAckChannelWithDurationArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().applyAckChannel(args.duration,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-10
    /**
     * 申请一个唯一的命令响应通道(默认有效期)<br>
     * <br>{@code PERSON_ONLY}
     * @param token 访问令牌
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyAckChannel", method = RequestMethod.POST)
    @ApiOperation(value = "申请一个唯一的命令响应通道(默认有效期)<br>\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response applyAckChannel( @RequestBody ApplyAckChannelArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().applyAckChannel(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-11
    /**
     * 申请一个唯一的命令序列号
     * <br>{@code PERSON_ONLY}
     * @param token 访问令牌
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyCmdSn", method = RequestMethod.POST)
    @ApiOperation(value = "申请一个唯一的命令序列号\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response applyCmdSn( @RequestBody ApplyCmdSnArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().applyCmdSn(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-12
    /**
     * 申请人员访问令牌
     * @param personId 用户ID
     * @param password 密码
     * @param isMd5 为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)
     * @return 返回申请的令牌
     * @throws ServiceSecurityException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyPersonToken", method = RequestMethod.POST)
    @ApiOperation(value = "申请人员访问令牌",httpMethod="POST")
    public Response applyPersonToken( @RequestBody ApplyPersonTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().applyPersonToken(args.personId,args.password,args.isMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-13
    /**
     * 申请root访问令牌
     * @param password root用户密码
     * @param isMd5 为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)
     * @return 返回申请的令牌
     * @throws ServiceSecurityException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyRootToken", method = RequestMethod.POST)
    @ApiOperation(value = "申请root访问令牌",httpMethod="POST")
    public Response applyRootToken( @RequestBody ApplyRootTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().applyRootToken(args.password,args.isMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-14
    /**
     * 申请person/root访问令牌
     * @param userid 用户ID(为-1时为root)
     * @param password 用户密码
     * @param isMd5 为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)
     * @return 返回申请的令牌
     * @throws ServiceSecurityException
     * @since 2.1.1
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyUserToken", method = RequestMethod.POST)
    @ApiOperation(value = "申请person/root访问令牌",httpMethod="POST")
    public Response applyUserToken( @RequestBody ApplyUserTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().applyUserToken(args.userid,args.password,args.isMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-15
    /**
     * 创建管理边界<br>
     * 设置fl_person_group.root_group和fl_device_group.root_group字段互相指向<br>
     * 没有找到personGroupId或deviceGroupId指定的记录抛出异常,
     * 以事务操作方式更新数据库<br>
     * <br>{@link TokenMangement.Enable#ROOT}<br>
     * @param personGroupId 人员组id
     * @param deviceGroupId 设备组id
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/bindBorder", method = RequestMethod.POST)
    @ApiOperation(value = "创建管理边界<br>\n"
+" 设置fl_person_group.root_group和fl_device_group.root_group字段互相指向<br>\n"
+" 没有找到personGroupId或deviceGroupId指定的记录抛出异常,\n"
+" 以事务操作方式更新数据库<br>\n"
+" <br>{@link TokenMangement.Enable#ROOT}<br>",httpMethod="POST")
    public Response bindBorder( @RequestBody BindBorderArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().bindBorder(args.personGroupId,args.deviceGroupId,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-16
    /**
     * 返回(deviceGroupId))指定的fl_device_group记录的所有的子节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @param deviceGroupId
     * @return 如果{@code deviceGroupId}无效则返回空表
     * @since 2.1.2
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/childListForDeviceGroup", method = RequestMethod.POST)
    @ApiOperation(value = "返回(deviceGroupId))指定的fl_device_group记录的所有的子节点(包括自己)<br>\n"
+" 自引用字段:fl_device_group(parent)",httpMethod="POST")
    public Response childListForDeviceGroup( @RequestBody ChildListForDeviceGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().childListForDeviceGroup(args.deviceGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-17
    /**
     * 返回(personGroupId))指定的fl_person_group记录的所有的子节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @param personGroupId
     * @return 如果{@code personGroupId}无效则返回空表
     * @since 2.1.2
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/childListForPersonGroup", method = RequestMethod.POST)
    @ApiOperation(value = "返回(personGroupId))指定的fl_person_group记录的所有的子节点(包括自己)<br>\n"
+" 自引用字段:fl_person_group(parent)",httpMethod="POST")
    public Response childListForPersonGroup( @RequestBody ChildListForPersonGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().childListForPersonGroup(args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-18
    /**
     * 返回满足{@code where} SQL条件语句的fl_device记录总数
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @return 返回设备ID列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countDeviceByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "返回满足{@code where} SQL条件语句的fl_device记录总数",httpMethod="POST")
    public Response countDeviceByWhere( @RequestBody CountDeviceByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countDeviceByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-19
    /**
     * 返回满足{@code where} SQL条件语句的fl_device_group记录总数
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @return 返回满足{@code where} SQL条件语句的fl_device_group记录总数
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countDeviceGroupByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "返回满足{@code where} SQL条件语句的fl_device_group记录总数",httpMethod="POST")
    public Response countDeviceGroupByWhere( @RequestBody CountDeviceGroupByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countDeviceGroupByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-20
    /**
     * 返回满足{@code where}条件的日志记录(fl_log)数目
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @return 返回满足{@code where}条件的日志记录(fl_log)数目
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "返回满足{@code where}条件的日志记录(fl_log)数目",httpMethod="POST")
    public Response countLogByWhere( @RequestBody CountLogByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countLogByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-21
    /**
     * 返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @param timestamp 时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串
     * @return 满足条件的记录条数
     * @see #countLogLightByWhere(String)
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogLightByVerifyTimeTimestr", method = RequestMethod.POST)
    @ApiOperation(value = "返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数",httpMethod="POST")
    public Response countLogLightByVerifyTime( @RequestBody CountLogLightByVerifyTimeTimestrArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countLogLightByVerifyTime(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-22
    /**
     * 返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数
     * @param timestamp 时间戳
     * @return 满足条件的记录条数
     * @see #countLogLightByWhere(String)
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogLightByVerifyTime", method = RequestMethod.POST)
    @ApiOperation(value = "返回fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的记录总数",httpMethod="POST")
    public Response countLogLightByVerifyTime( @RequestBody CountLogLightByVerifyTimeArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countLogLightByVerifyTime(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-23
    /**
     * 返回符合{@code where}条件的记录条数
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @return 返回符合{@code where}条件的记录条数
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogLightByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "返回符合{@code where}条件的记录条数",httpMethod="POST")
    public Response countLogLightByWhere( @RequestBody CountLogLightByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countLogLightByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-24
    /**
     * 返回满足{@code where}条件的日志记录(fl_person)数目
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @return 返回满足{@code where}条件的日志记录(fl_person)数目
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countPersonByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "返回满足{@code where}条件的日志记录(fl_person)数目",httpMethod="POST")
    public Response countPersonByWhere( @RequestBody CountPersonByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countPersonByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-25
    /**
     * 返回满足{@code where} SQL条件语句的 fl_person_group 记录总数
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录
     * @return 返回满足{@code where} SQL条件语句的 fl_person_group 记录总数
     * @see TableManager#countWhere(String)
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countPersonGroupByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "返回满足{@code where} SQL条件语句的 fl_person_group 记录总数",httpMethod="POST")
    public Response countPersonGroupByWhere( @RequestBody CountPersonGroupByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countPersonGroupByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-26
    /**
     * 按天统计指定用户的通行次数<br>
     * @param personId
     * @param startDate 统计起始日期,可为{@code null}
     * @param endDate 统计结束日期,可为{@code null}
     * @return 返回统计结果，即每个有通行记录的日期(格式:yyyy-MM-dd)的通行次数
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countPersonLog", method = RequestMethod.POST)
    @ApiOperation(value = "按天统计指定用户的通行次数<br>",httpMethod="POST")
    public Response countPersonLog( @RequestBody CountPersonLogArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countPersonLog(args.personId,args.startDate,args.endDate));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-27
    /**
     * 按天统计指定用户的通行次数<br>
     * startDate,endDate日期格式为,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串
     * @param personId
     * @param startDate 统计起始日期,可为{@code null},日期格式为
     * @param endDate 统计结束日期,可为{@code null}
     * @return 返回统计结果，即每个有通行记录的日期(格式:yyyy-MM-dd)的通行次数
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countPersonLogTimeStr", method = RequestMethod.POST)
    @ApiOperation(value = "按天统计指定用户的通行次数<br>\n"
+" startDate,endDate日期格式为,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串",httpMethod="POST")
    public Response countPersonLog( @RequestBody CountPersonLogTimeStrArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().countPersonLog(args.personId,args.startDate,args.endDate));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-28
    /**
     * 删除 personId 关联的所有特征(feature)记录
     * @param personId
     * @param deleteImage 是否删除关联的 image记录
     * @param token 访问令牌
     * @return 
     * @see #deleteFeature(String, boolean, Token)
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteAllFeaturesByPersonId", method = RequestMethod.POST)
    @ApiOperation(value = "删除 personId 关联的所有特征(feature)记录",httpMethod="POST")
    public Response deleteAllFeaturesByPersonId( @RequestBody DeleteAllFeaturesByPersonIdArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deleteAllFeaturesByPersonId(args.personId,args.deleteImage,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-29
    /**
     * 删除设备id指定的设备记录
     * <br>{@code PERSON_ONLY}
     * @param id
     * @param token 人员令牌
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteDevice", method = RequestMethod.POST)
    @ApiOperation(value = "删除设备id指定的设备记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response deleteDevice( @RequestBody DeleteDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deleteDevice(args.id,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-30
    /**
     * 删除设备MAC地址指定的设备记录
     * <br>{@code PERSON_ONLY}
     * @param mac 设备MAC地址(12位HEX字符串)
     * @param token 人员令牌
     * @return 返回删除的记录条数(1),如果记录不存在返回0
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteDeviceByMac", method = RequestMethod.POST)
    @ApiOperation(value = "删除设备MAC地址指定的设备记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response deleteDeviceByMac( @RequestBody DeleteDeviceByMacArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deleteDeviceByMac(args.mac,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-31
    /**
     * 删除{@code deviceGroupId}指定的设备组<br>
     * 组删除后，所有子节点记录不会被删除，但parent字段会被自动默认为{@code null}
     * <br>{@code PERSON_ONLY}
     * @param deviceGroupId
     * @param token 访问令牌
     * @return 返回删除的记录条数
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteDeviceGroup", method = RequestMethod.POST)
    @ApiOperation(value = "删除{@code deviceGroupId}指定的设备组<br>\n"
+" 组删除后，所有子节点记录不会被删除，但parent字段会被自动默认为{@code null}\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response deleteDeviceGroup( @RequestBody DeleteDeviceGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deleteDeviceGroup(args.deviceGroupId,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-32
    /**
     * 删除featureMd5指定的特征记录及关联的face记录
     * @param featureMd5
     * @param deleteImage 为{@code true}则删除关联的 image记录(如果该图像还关联其他特征则不删除)
     * @param token 访问令牌
     * @return 返回删除的特征记录关联的图像(image)记录的MD5<br>
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteFeature", method = RequestMethod.POST)
    @ApiOperation(value = "删除featureMd5指定的特征记录及关联的face记录",httpMethod="POST")
    public Response deleteFeature( @RequestBody DeleteFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deleteFeature(args.featureMd5,args.deleteImage,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-33
    /**
     * 从permit表删除指定{@code deviceGroupId}指定设备组上的人员通行权限
     * @param deviceGroupId
     * @param token 令牌
     * @return 删除的记录条数
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteGroupPermitOnDeviceGroup", method = RequestMethod.POST)
    @ApiOperation(value = "从permit表删除指定{@code deviceGroupId}指定设备组上的人员通行权限",httpMethod="POST")
    public Response deleteGroupPermitOnDeviceGroup( @RequestBody DeleteGroupPermitOnDeviceGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deleteGroupPermitOnDeviceGroup(args.deviceGroupId,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-34
    /**
     * 删除imageMd5指定图像及其缩略图
     * @param imageMd5
     * @param token 访问令牌
     * @return 删除成功返回1,否则返回0
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteImage", method = RequestMethod.POST)
    @ApiOperation(value = "删除imageMd5指定图像及其缩略图",httpMethod="POST")
    public Response deleteImage( @RequestBody DeleteImageArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deleteImage(args.imageMd5,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-35
    /**
     * 删除fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>
     * @param deviceGroupId 设备组id
     * @param personGroupId 人员组id
     * @param token
     * @return 删除成功返回1,否则返回0
     * @since 2.1.2
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePermitById", method = RequestMethod.POST)
    @ApiOperation(value = "删除fl_device_group和fl_person_group之间的MANY TO MANY 联接表(fl_permit)记录<br>",httpMethod="POST")
    public Response deletePermit( @RequestBody DeletePermitByIdArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deletePermit(args.deviceGroupId,args.personGroupId,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-36
    /**
     * 删除personId指定的人员(person)记录及关联的所有记录
     * <br>{@code PERSON_ONLY}
     * @param personId
     * @param token 访问令牌
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePerson", method = RequestMethod.POST)
    @ApiOperation(value = "删除personId指定的人员(person)记录及关联的所有记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response deletePerson( @RequestBody DeletePersonArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deletePerson(args.personId,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-37
    /**
     * 删除papersNum指定的人员(person)记录及关联的所有记录
     * <br>{@code PERSON_ONLY}
     * @param papersNum 证件号码
     * @param token 访问令牌
     * @return 返回删除的 person 记录数量
     * @see #deletePerson(int, Token)
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonByPapersNum", method = RequestMethod.POST)
    @ApiOperation(value = "删除papersNum指定的人员(person)记录及关联的所有记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response deletePersonByPapersNum( @RequestBody DeletePersonByPapersNumArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deletePersonByPapersNum(args.papersNum,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-38
    /**
     * 删除{@code personGroupId}指定的人员组<br>
     * 组删除后，所有子节点记录不会被删除，但parent字段会被自动默认为{@code null}
     * <br>{@code PERSON_ONLY}
     * @param personGroupId
     * @param token 访问令牌
     * @return 
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonGroup", method = RequestMethod.POST)
    @ApiOperation(value = "删除{@code personGroupId}指定的人员组<br>\n"
+" 组删除后，所有子节点记录不会被删除，但parent字段会被自动默认为{@code null}\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response deletePersonGroup( @RequestBody DeletePersonGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deletePersonGroup(args.personGroupId,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-39
    /**
     * 从permit表删除指定{@code personGroupId}指定人员组的在所有设备上的通行权限
     * @param personGroupId
     * @param token 令牌
     * @return 删除的记录条数
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonGroupPermit", method = RequestMethod.POST)
    @ApiOperation(value = "从permit表删除指定{@code personGroupId}指定人员组的在所有设备上的通行权限",httpMethod="POST")
    public Response deletePersonGroupPermit( @RequestBody DeletePersonGroupPermitArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deletePersonGroupPermit(args.personGroupId,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-40
    /**
     * 删除personIdList指定的人员(person)记录及关联的所有记录
     * <br>{@code PERSON_ONLY}
     * @param personIdList 人员id列表
     * @param token 访问令牌
     * @return 返回删除的 person 记录数量
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersons", method = RequestMethod.POST)
    @ApiOperation(value = "删除personIdList指定的人员(person)记录及关联的所有记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response deletePersons( @RequestBody DeletePersonsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deletePersons(args.personIdList,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-41
    /**
     * 删除papersNum指定的人员(person)记录及关联的所有记录
     * <br>{@code PERSON_ONLY}
     * @param papersNumlist 证件号码列表
     * @param token 访问令牌
     * @return 返回删除的 person 记录数量
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonsByPapersNum", method = RequestMethod.POST)
    @ApiOperation(value = "删除papersNum指定的人员(person)记录及关联的所有记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response deletePersonsByPapersNum( @RequestBody DeletePersonsByPapersNumArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().deletePersonsByPapersNum(args.papersNumlist,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-42
    /**
     * 设置 personId 指定的人员为禁止状态<br>
     * 将{@code fl_person.expiry_date}设置为昨天
     * <br>{@code PERSON_ONLY}
     * @param personId
     * @param moveToGroupId 将用户移动到指定的用户组，为{@code null}则不移动
     * @param deletePhoto 为{@code true}删除用户标准照
     * @param deleteFeature 为{@code true}删除用户所有的人脸特征数据(包括照片)
     * @param deleteLog 为{@code true}删除用户所有通行日志
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/disablePerson", method = RequestMethod.POST)
    @ApiOperation(value = "设置 personId 指定的人员为禁止状态<br>\n"
+" 将{@code fl_person.expiry_date}设置为昨天\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response disablePerson( @RequestBody DisablePersonArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().disablePerson(args.personId,args.moveToGroupId,args.deletePhoto,args.deleteFeature,args.deleteLog,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-43
    /**
     * 设置 personIdList 指定的人员为禁止状态
     * <br>{@code PERSON_ONLY}
     * @param personIdList 人员id列表
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/disablePersonList", method = RequestMethod.POST)
    @ApiOperation(value = "设置 personIdList 指定的人员为禁止状态\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response disablePerson( @RequestBody DisablePersonListArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().disablePerson(args.personIdList,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-44
    /**
     * 判断id指定的设备记录是否存在
     * @param id
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsDevice", method = RequestMethod.POST)
    @ApiOperation(value = "判断id指定的设备记录是否存在",httpMethod="POST")
    public Response existsDevice( @RequestBody ExistsDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().existsDevice(args.id));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-45
    /**
     * 判断md5指定的特征记录是否存在
     * @param md5
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsFeature", method = RequestMethod.POST)
    @ApiOperation(value = "判断md5指定的特征记录是否存在",httpMethod="POST")
    public Response existsFeature( @RequestBody ExistsFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().existsFeature(args.md5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-46
    /**
     * 判断{@code md5}指定的图像记录是否存在
     * @param md5 图像的MD5校验码
     * @return 记录存在返回{@code true},否则返回{@code false}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsImage", method = RequestMethod.POST)
    @ApiOperation(value = "判断{@code md5}指定的图像记录是否存在",httpMethod="POST")
    public Response existsImage( @RequestBody ExistsImageArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().existsImage(args.md5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-47
    /**
     * 判断是否存在personId指定的人员记录
     * @param persionId
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsPerson", method = RequestMethod.POST)
    @ApiOperation(value = "判断是否存在personId指定的人员记录",httpMethod="POST")
    public Response existsPerson( @RequestBody ExistsPersonArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().existsPerson(args.persionId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-48
    /**
     * 返回{@code deviceId}指定的设备记录
     * @param deviceId
     * @return 返回设备记录
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevice", method = RequestMethod.POST)
    @ApiOperation(value = "返回{@code deviceId}指定的设备记录",httpMethod="POST")
    public Response getDevice( @RequestBody GetDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDevice(args.deviceId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-49
    /**
     * 根据设备MAC地址查找指定的设备记录
     * @param mac
     * @return 返回设备记录
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceByMac", method = RequestMethod.POST)
    @ApiOperation(value = "根据设备MAC地址查找指定的设备记录",httpMethod="POST")
    public Response getDeviceByMac( @RequestBody GetDeviceByMacArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDeviceByMac(args.mac));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-50
    /**
     * 根据设备组id返回数据库记录
     * @param deviceGroupId
     * @return 
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroup", method = RequestMethod.POST)
    @ApiOperation(value = "根据设备组id返回数据库记录",httpMethod="POST")
    public Response getDeviceGroup( @RequestBody GetDeviceGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDeviceGroup(args.deviceGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-51
    /**
     * 返回设备组id列表指定的数据库记录
     * @param groupIdList
     * @return 
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroups", method = RequestMethod.POST)
    @ApiOperation(value = "返回设备组id列表指定的数据库记录",httpMethod="POST")
    public Response getDeviceGroups( @RequestBody GetDeviceGroupsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDeviceGroups(args.groupIdList));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-52
    /**
     * 返回({@code deviceId})指定的设备所属所有设备组<br>
     * @param deviceId
     * @return 如果{@code deviceId}无效则返回空表
     * @see #listOfParentForDeviceGroup(int)
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsBelongs", method = RequestMethod.POST)
    @ApiOperation(value = "返回({@code deviceId})指定的设备所属所有设备组<br>",httpMethod="POST")
    public Response getDeviceGroupsBelongs( @RequestBody GetDeviceGroupsBelongsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDeviceGroupsBelongs(args.deviceId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-53
    /**
     * 从permit表返回允许在{@code personGroupId}指定的人员组通过的所有设备组({@link DeviceGroupBean})的id<br>
     * 不排序,不包含重复id
     * @param personGroupId 为{@code null}返回空表
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsPermit", method = RequestMethod.POST)
    @ApiOperation(value = "从permit表返回允许在{@code personGroupId}指定的人员组通过的所有设备组({@link DeviceGroupBean})的id<br>\n"
+" 不排序,不包含重复id",httpMethod="POST")
    public Response getDeviceGroupsPermit( @RequestBody GetDeviceGroupsPermitArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDeviceGroupsPermit(args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-54
    /**
     * 从permit表返回允许在{@code personGroupId}指定的人员组通过的所有设备组({@link DeviceGroupBean})的id<br>
     * 不排序,不包含重复id,本方法不会对{@code personGroupId}的父结点向上回溯
     * @param personGroupId
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsPermittedBy", method = RequestMethod.POST)
    @ApiOperation(value = "从permit表返回允许在{@code personGroupId}指定的人员组通过的所有设备组({@link DeviceGroupBean})的id<br>\n"
+" 不排序,不包含重复id,本方法不会对{@code personGroupId}的父结点向上回溯",httpMethod="POST")
    public Response getDeviceGroupsPermittedBy( @RequestBody GetDeviceGroupsPermittedByArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDeviceGroupsPermittedBy(args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-55
    /**
     * 返回featureMd5的人脸特征记录关联的设备id<br>
     * @param featureMd5
     * @return 如果没有关联的设备则返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceIdOfFeature", method = RequestMethod.POST)
    @ApiOperation(value = "返回featureMd5的人脸特征记录关联的设备id<br>",httpMethod="POST")
    public Response getDeviceIdOfFeature( @RequestBody GetDeviceIdOfFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDeviceIdOfFeature(args.featureMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-56
    /**
     * 返回 {@code idList} 指定的设备记录
     * @param idList
     * @return 返回设备记录列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevices", method = RequestMethod.POST)
    @ApiOperation(value = "返回 {@code idList} 指定的设备记录",httpMethod="POST")
    public Response getDevices( @RequestBody GetDevicesArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDevices(args.idList));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-57
    /**
     * 返回{@code deviceGroupId}指定的设备组下属的所有设备记录<br>
     * 如果没有下属设备记录则返回空表
     * @param deviceGroupId
     * @return 
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevicesOfGroup", method = RequestMethod.POST)
    @ApiOperation(value = "返回{@code deviceGroupId}指定的设备组下属的所有设备记录<br>\n"
+" 如果没有下属设备记录则返回空表",httpMethod="POST")
    public Response getDevicesOfGroup( @RequestBody GetDevicesOfGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getDevicesOfGroup(args.deviceGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-58
    /**
     * 返回faceId指定的人脸信息记录
     * @param faceId
     * @return {@link FaceBean} ,如果没有对应记录则返回null
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFace", method = RequestMethod.POST)
    @ApiOperation(value = "返回faceId指定的人脸信息记录",httpMethod="POST")
    public Response getFace( @RequestBody GetFaceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFace(args.faceId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-59
    /**
     * 获取指定人脸特征关联的人脸记录
     * @param featureMd5 人脸特征记录id(MD校验码),为空或{@code null}或记录不存在返回空表
     * @return {@link FaceBean}列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFacesOfFeature", method = RequestMethod.POST)
    @ApiOperation(value = "获取指定人脸特征关联的人脸记录",httpMethod="POST")
    public Response getFacesOfFeature( @RequestBody GetFacesOfFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFacesOfFeature(args.featureMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-60
    /**
     * 获取指定图像关联的人脸记录
     * @param imageMd5 图像数据的MD校验码,为空或{@code null}或记录不存在返回空表
     * @return {@link FaceBean}列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFacesOfImage", method = RequestMethod.POST)
    @ApiOperation(value = "获取指定图像关联的人脸记录",httpMethod="POST")
    public Response getFacesOfImage( @RequestBody GetFacesOfImageArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFacesOfImage(args.imageMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-61
    /**
     * 根据MD5校验码返回人脸特征数据记录
     * @param md5
     * @return 如果数据库中没有对应的数据则返回null
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeature", method = RequestMethod.POST)
    @ApiOperation(value = "根据MD5校验码返回人脸特征数据记录",httpMethod="POST")
    public Response getFeature( @RequestBody GetFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFeature(args.md5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-62
    /**
     * 根据MD5校验码返回人脸特征数据
     * @param md5
     * @return 二进制数据字节数组,如果数据库中没有对应的数据则返回null
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeatureBytes", method = RequestMethod.POST)
    @ApiOperation(value = "根据MD5校验码返回人脸特征数据",httpMethod="POST")
    public Response getFeatureBytes( @RequestBody GetFeatureBytesArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFeatureBytes(args.md5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-63
    /**
     * 根据MD5校验码返回人脸特征数据记录
     * @param md5List md5列表
     * @return {@link FeatureBean}列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeatures", method = RequestMethod.POST)
    @ApiOperation(value = "根据MD5校验码返回人脸特征数据记录",httpMethod="POST")
    public Response getFeatures( @RequestBody GetFeaturesArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFeatures(args.md5List));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-64
    /**
     * 返回 persionId 关联的指定SDK的人脸特征记录
     * @param personId 人员id(fl_person.id)
     * @param sdkVersion 算法(SDK)版本号
     * @return 返回 fl_feature.md5  列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeaturesByPersonIdAndSdkVersion", method = RequestMethod.POST)
    @ApiOperation(value = "返回 persionId 关联的指定SDK的人脸特征记录",httpMethod="POST")
    public Response getFeaturesByPersonIdAndSdkVersion( @RequestBody GetFeaturesByPersonIdAndSdkVersionArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFeaturesByPersonIdAndSdkVersion(args.personId,args.sdkVersion));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-65
    /**
     * 获取指定人脸特征关联的人脸特征记录
     * @param imageMd5 图像数据的MD校验码,为空或{@code null}或记录不存在返回空表
     * @return 特征记录id列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeaturesOfImage", method = RequestMethod.POST)
    @ApiOperation(value = "获取指定人脸特征关联的人脸特征记录",httpMethod="POST")
    public Response getFeaturesOfImage( @RequestBody GetFeaturesOfImageArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFeaturesOfImage(args.imageMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-66
    /**
     * 返回指定人员{@code personId}关联的所有特征<br>
     * @param personId
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeaturesOfPerson", method = RequestMethod.POST)
    @ApiOperation(value = "返回指定人员{@code personId}关联的所有特征<br>",httpMethod="POST")
    public Response getFeaturesOfPerson( @RequestBody GetFeaturesOfPersonArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFeaturesOfPerson(args.personId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-67
    /**
     * 返回在指定设备上允许通行的所有特征记录<br>
     * 此方法主要设计用于不能通过长连接侦听redis频道的设备(如人脸锁)。
     * @param deviceId 设备ID
     * @param ignoreSchedule 是否忽略时间过滤器(fl_permit.schedule字段)的限制
     * @param sdkVersion 特征版本号
     * @param excludeFeatureIds 要排除的特征记录id(MD5) ,可为{@code null}
     * @param timestamp 不为{@code null}时返回大于指定时间戳的所有fl_feature记录
     * @return 返回 fl_feature.md5  列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeaturesPermittedOnDevice", method = RequestMethod.POST)
    @ApiOperation(value = "返回在指定设备上允许通行的所有特征记录<br>\n"
+" 此方法主要设计用于不能通过长连接侦听redis频道的设备(如人脸锁)。",httpMethod="POST")
    public Response getFeaturesPermittedOnDevice( @RequestBody GetFeaturesPermittedOnDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getFeaturesPermittedOnDevice(args.deviceId,args.ignoreSchedule,args.sdkVersion,args.excludeFeatureIds,args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-68
    /**
     * 获取人员组通行权限<br>
     * 返回{@code personGroupId}指定的人员组在{@code deviceId}设备上是否允许通行,
     * 本方法会对{@code personGroupId}的父结点向上回溯：
     * {@codepersonGroupId } 及其父结点,任何一个在permit表存在与{@code deviceId}所属设备级的关联记录中就返回true，
     * 输入参数为{@code null}或找不到指定的记录则返回false
     * @param deviceId
     * @param personGroupId
     * @return 允许通行返回指定的{@link PermitBean}记录，否则返回{@code null}
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermit", method = RequestMethod.POST)
    @ApiOperation(value = "获取人员组通行权限<br>\n"
+" 返回{@code personGroupId}指定的人员组在{@code deviceId}设备上是否允许通行,\n"
+" 本方法会对{@code personGroupId}的父结点向上回溯：\n"
+" {@codepersonGroupId } 及其父结点,任何一个在permit表存在与{@code deviceId}所属设备级的关联记录中就返回true，\n"
+" 输入参数为{@code null}或找不到指定的记录则返回false",httpMethod="POST")
    public Response getGroupPermit( @RequestBody GetGroupPermitArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getGroupPermit(args.deviceId,args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-69
    /**
     * 获取人员组通行权限<br>
     * 返回{@code personGroupId}指定的人员组在{@code deviceGroupId}指定的设备组上是否允许通行,
     * 本方法会对{@code personGroupId}的父结点向上回溯：
     * {@codepersonGroupId } 及其父结点,任何一个在permit表存在与{@code deviceId}所属设备级的关联记录中就返回true，
     * 输入参数为{@code null}或找不到指定的记录则返回false
     * @param deviceGroupId
     * @param personGroupId
     * @return 允许通行返回指定的{@link PermitBean}记录，否则返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermitOnDeviceGroup", method = RequestMethod.POST)
    @ApiOperation(value = "获取人员组通行权限<br>\n"
+" 返回{@code personGroupId}指定的人员组在{@code deviceGroupId}指定的设备组上是否允许通行,\n"
+" 本方法会对{@code personGroupId}的父结点向上回溯：\n"
+" {@codepersonGroupId } 及其父结点,任何一个在permit表存在与{@code deviceId}所属设备级的关联记录中就返回true，\n"
+" 输入参数为{@code null}或找不到指定的记录则返回false",httpMethod="POST")
    public Response getGroupPermitOnDeviceGroup( @RequestBody GetGroupPermitOnDeviceGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getGroupPermitOnDeviceGroup(args.deviceGroupId,args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-70
    /**
     * 参见 {@link #getGroupPermit(int, int)}
     * @param deviceId
     * @param personGroupIdList
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermits", method = RequestMethod.POST)
    @ApiOperation(value = "参见 {@link #getGroupPermit(int, int)}",httpMethod="POST")
    public Response getGroupPermits( @RequestBody GetGroupPermitsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getGroupPermits(args.deviceId,args.personGroupIdList));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-71
    /**
     * 根据图像的MD5校验码返回图像记录
     * @param imageMD5
     * @return {@link ImageBean} ,如果没有对应记录则返回null
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImage", method = RequestMethod.POST)
    @ApiOperation(value = "根据图像的MD5校验码返回图像记录",httpMethod="POST")
    public Response getImage( @RequestBody GetImageArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getImage(args.imageMD5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-72
    /**
     * 根据图像的MD5校验码返回图像数据
     * @param imageMD5
     * @return 二进制数据字节数组,如果数据库中没有对应的数据则返回null
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImageBytes", method = RequestMethod.POST)
    @ApiOperation(value = "根据图像的MD5校验码返回图像数据",httpMethod="POST")
    public Response getImageBytes( @RequestBody GetImageBytesArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getImageBytes(args.imageMD5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-73
    /**
     * 返回featureMd5的人脸特征记录关联的所有图像记录id(MD5)
     * @param featureMd5 人脸特征id(MD5)
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImagesAssociatedByFeature", method = RequestMethod.POST)
    @ApiOperation(value = "返回featureMd5的人脸特征记录关联的所有图像记录id(MD5)",httpMethod="POST")
    public Response getImagesAssociatedByFeature( @RequestBody GetImagesAssociatedByFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getImagesAssociatedByFeature(args.featureMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-74
    /**
     * 返回 persionId 关联的所有日志记录
     * @param personId fl_person.id
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getLogBeansByPersonId", method = RequestMethod.POST)
    @ApiOperation(value = "返回 persionId 关联的所有日志记录",httpMethod="POST")
    public Response getLogBeansByPersonId( @RequestBody GetLogBeansByPersonIdArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getLogBeansByPersonId(args.personId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-75
    /**
     * 返回personId指定的人员记录
     * @param personId
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPerson", method = RequestMethod.POST)
    @ApiOperation(value = "返回personId指定的人员记录",httpMethod="POST")
    public Response getPerson( @RequestBody GetPersonArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPerson(args.personId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-76
    /**
     * 根据登记的手机号码返回人员记录
     * @param mobilePhone
     * @return 没有找到匹配的记录则返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonByMobilePhone", method = RequestMethod.POST)
    @ApiOperation(value = "根据登记的手机号码返回人员记录",httpMethod="POST")
    public Response getPersonByMobilePhone( @RequestBody GetPersonByMobilePhoneArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonByMobilePhone(args.mobilePhone));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-77
    /**
     * 根据证件号码返回人员记录
     * @param papersNum
     * @return 没有找到匹配的记录则返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonByPapersNum", method = RequestMethod.POST)
    @ApiOperation(value = "根据证件号码返回人员记录",httpMethod="POST")
    public Response getPersonByPapersNum( @RequestBody GetPersonByPapersNumArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonByPapersNum(args.papersNum));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-78
    /**
     * 根据人员组id返回数据库记录
     * @param personGroupId
     * @return 
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroup", method = RequestMethod.POST)
    @ApiOperation(value = "根据人员组id返回数据库记录",httpMethod="POST")
    public Response getPersonGroup( @RequestBody GetPersonGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonGroup(args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-79
    /**
     * 返回人员组id列表指定的数据库记录
     * @param groupIdList
     * @return 
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroups", method = RequestMethod.POST)
    @ApiOperation(value = "返回人员组id列表指定的数据库记录",httpMethod="POST")
    public Response getPersonGroups( @RequestBody GetPersonGroupsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonGroups(args.groupIdList));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-80
    /**
     * 返回({@code personId})指定的人员所属所有人员组<br>
     * @param personId
     * @return 如果{@code personId}无效则返回空表
     * @see #listOfParentForPersonGroup(int)
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroupsBelongs", method = RequestMethod.POST)
    @ApiOperation(value = "返回({@code personId})指定的人员所属所有人员组<br>",httpMethod="POST")
    public Response getPersonGroupsBelongs( @RequestBody GetPersonGroupsBelongsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonGroupsBelongs(args.personId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-81
    /**
     * 从permit表返回允许在{@code deviceGroupId}指定的设备组通过的所有人员组{@link PersonGroupBean}对象的id<br>
     * 不排序,不包含重复id,本方法不会对{@link PersonGroupBean}的父结点向上回溯
     * @param deviceGroupId
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroupsPermittedBy", method = RequestMethod.POST)
    @ApiOperation(value = "从permit表返回允许在{@code deviceGroupId}指定的设备组通过的所有人员组{@link PersonGroupBean}对象的id<br>\n"
+"  不排序,不包含重复id,本方法不会对{@link PersonGroupBean}的父结点向上回溯",httpMethod="POST")
    public Response getPersonGroupsPermittedBy( @RequestBody GetPersonGroupsPermittedByArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonGroupsPermittedBy(args.deviceGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-82
    /**
     * 获取人员通行权限<br>
     * 返回{@code personId}指定的人员在{@code deviceId}设备上是否允许通行
     * @param deviceId
     * @param personId
     * @return 允许通行返回指定的{@link PermitBean}记录，否则返回{@code null}
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonPermit", method = RequestMethod.POST)
    @ApiOperation(value = "获取人员通行权限<br>\n"
+" 返回{@code personId}指定的人员在{@code deviceId}设备上是否允许通行",httpMethod="POST")
    public Response getPersonPermit( @RequestBody GetPersonPermitArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonPermit(args.deviceId,args.personId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-83
    /**
     * 参见 {@link #getPersonPermit(int, int) }
     * @param deviceId
     * @param personIdList
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonPermits", method = RequestMethod.POST)
    @ApiOperation(value = "参见 {@link #getPersonPermit(int, int) }",httpMethod="POST")
    public Response getPersonPermits( @RequestBody GetPersonPermitsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonPermits(args.deviceId,args.personIdList));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-84
    /**
     * 返回 list 指定的人员记录
     * @param idList 人员id列表
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersons", method = RequestMethod.POST)
    @ApiOperation(value = "返回 list 指定的人员记录",httpMethod="POST")
    public Response getPersons( @RequestBody GetPersonsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersons(args.idList));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-85
    /**
     * 返回{@code deviceGroupId}指定的人员组下属的所有人员记录<br>
     * 如果没有下属人员记录则返回空表
     * @param personGroupId
     * @return 人员ID列表
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonsOfGroup", method = RequestMethod.POST)
    @ApiOperation(value = "返回{@code deviceGroupId}指定的人员组下属的所有人员记录<br>\n"
+" 如果没有下属人员记录则返回空表",httpMethod="POST")
    public Response getPersonsOfGroup( @RequestBody GetPersonsOfGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonsOfGroup(args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-86
    /**
     * 返回在指定设备上允许通行的所有人员记录<br>
     * @param deviceId 设备ID
     * @param ignoreSchedule 是否忽略时间过滤器(fl_permit.schedule字段)的限制
     * @param excludePersonIds 要排除的人员记录id,可为{@code null}
     * @param timestamp 不为{@code null}时返回大于指定时间戳的所有fl_person记录
     * @return 返回的用户对象列表中，过滤所有有效期失效的用户<br>
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonsPermittedOnDevice", method = RequestMethod.POST)
    @ApiOperation(value = "返回在指定设备上允许通行的所有人员记录<br>",httpMethod="POST")
    public Response getPersonsPermittedOnDevice( @RequestBody GetPersonsPermittedOnDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getPersonsPermittedOnDevice(args.deviceId,args.ignoreSchedule,args.excludePersonIds,args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-87
    /**
     * 返回{@code prefix}为前缀的所有参数
     * 非root令牌只能访问指定范围的参数,否则会抛出异常<br>
     * root令牌不受限制<br>
     * @param prefix
     * @param token
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getProperties", method = RequestMethod.POST)
    @ApiOperation(value = "返回{@code prefix}为前缀的所有参数\n"
+" 非root令牌只能访问指定范围的参数,否则会抛出异常<br>\n"
+" root令牌不受限制<br>",httpMethod="POST")
    public Response getProperties( @RequestBody GetPropertiesArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getProperties(args.prefix,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-88
    /**
     * 返回指定的参数,如果参数没有定义则返回{@code null}<br>
     * 非root令牌只能访问指定范围的参数,否则会抛出异常<br>
     * root令牌不受限制<br>
     * @param key
     * @param token 访问令牌
     * @return 返回{@code key}指定的参数值
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getProperty", method = RequestMethod.POST)
    @ApiOperation(value = "返回指定的参数,如果参数没有定义则返回{@code null}<br>\n"
+" 非root令牌只能访问指定范围的参数,否则会抛出异常<br>\n"
+" root令牌不受限制<br>",httpMethod="POST")
    public Response getProperty( @RequestBody GetPropertyArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getProperty(args.key,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-89
    /**
     * 返回redis访问基本参数:<br>
     * <ul>
     * <li>redis服务器地址</li>
     * <li>设备命令通道名</li>
     * <li>人员验证实时监控通道名</li>
     * <li>设备心跳实时监控通道名</li>
     * <li>设备心跳包间隔时间(秒)</li>
     * <li>设备心跳包失效时间(秒)</li>
     * </ul>
     * 参见{@link MQParam}定义
     * @param token 访问令牌
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getRedisParameters", method = RequestMethod.POST)
    @ApiOperation(value = "返回redis访问基本参数:<br>\n"
+" <ul>\n"
+" <li>redis服务器地址</li>\n"
+" <li>设备命令通道名</li>\n"
+" <li>人员验证实时监控通道名</li>\n"
+" <li>设备心跳实时监控通道名</li>\n"
+" <li>设备心跳包间隔时间(秒)</li>\n"
+" <li>设备心跳包失效时间(秒)</li>\n"
+" </ul>\n"
+" 参见{@link MQParam}定义",httpMethod="POST")
    public Response getRedisParameters( @RequestBody GetRedisParametersArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getRedisParameters(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-90
    /**
     * 获取服务的所有配置参数
     * <br>{@code ROOT_ONLY}
     * @param token 访问令牌
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getServiceConfig", method = RequestMethod.POST)
    @ApiOperation(value = "获取服务的所有配置参数\n"
+" <br>{@code ROOT_ONLY}",httpMethod="POST")
    public Response getServiceConfig( @RequestBody GetServiceConfigArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getServiceConfig(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-91
    /**
     * 返回{@code deviceGroupId}指定的设备组下的所有子节点(设备组)<br>
     * 如果没有子节点则返回空表
     * @param deviceGroupId
     * @return 设备组ID列表
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getSubDeviceGroup", method = RequestMethod.POST)
    @ApiOperation(value = "返回{@code deviceGroupId}指定的设备组下的所有子节点(设备组)<br>\n"
+" 如果没有子节点则返回空表",httpMethod="POST")
    public Response getSubDeviceGroup( @RequestBody GetSubDeviceGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getSubDeviceGroup(args.deviceGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-92
    /**
     * 返回{@code personGroupId}指定的人员组下的所有子节点(人员组)<br>
     * 如果没有子节点则返回空表
     * @param personGroupId
     * @return 人员组ID列表
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getSubPersonGroup", method = RequestMethod.POST)
    @ApiOperation(value = "返回{@code personGroupId}指定的人员组下的所有子节点(人员组)<br>\n"
+" 如果没有子节点则返回空表",httpMethod="POST")
    public Response getSubPersonGroup( @RequestBody GetSubPersonGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().getSubPersonGroup(args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-93
    /**
     * 判断 personId 指定的人员记录是否过期
     * @param personId
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isDisable", method = RequestMethod.POST)
    @ApiOperation(value = "判断 personId 指定的人员记录是否过期",httpMethod="POST")
    public Response isDisable( @RequestBody IsDisableArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isDisable(args.personId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-94
    /**
     * 是否为本地实现
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isLocal", method = RequestMethod.POST)
    @ApiOperation(value = "是否为本地实现",httpMethod="POST")
    public Response isLocal() 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isLocal());
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-95
    /**
     * 判断命令响应通道是否有效<br>
     * 通道过期或不存在都返回{@code false}
     * @param ackChannel
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidAckChannel", method = RequestMethod.POST)
    @ApiOperation(value = "判断命令响应通道是否有效<br>\n"
+" 通道过期或不存在都返回{@code false}",httpMethod="POST")
    public Response isValidAckChannel( @RequestBody IsValidAckChannelArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isValidAckChannel(args.ackChannel));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-96
    /**
     * 判断命令序列号是否有效<br>
     * 序列号过期或不存在都返回{@code false}
     * @param cmdSn
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidCmdSn", method = RequestMethod.POST)
    @ApiOperation(value = "判断命令序列号是否有效<br>\n"
+" 序列号过期或不存在都返回{@code false}",httpMethod="POST")
    public Response isValidCmdSn( @RequestBody IsValidCmdSnArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isValidCmdSn(args.cmdSn));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-97
    /**
     * 验证设备令牌是否有效
     * @param token
     * @return 令牌有效返回{@code true},否则返回{@code false}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidDeviceToken", method = RequestMethod.POST)
    @ApiOperation(value = "验证设备令牌是否有效",httpMethod="POST")
    public Response isValidDeviceToken( @RequestBody IsValidDeviceTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isValidDeviceToken(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-98
    /**
     * 验证用户密码是否匹配
     * @param userId 用户id字符串,root用户id即为{@link CommonConstant#ROOT_NAME}
     * @param password 用户密码
     * @param isMd5 为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)
     * @return {@code true}密码匹配
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidPassword", method = RequestMethod.POST)
    @ApiOperation(value = "验证用户密码是否匹配",httpMethod="POST")
    public Response isValidPassword( @RequestBody IsValidPasswordArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isValidPassword(args.userId,args.password,args.isMd5));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-99
    /**
     * 验证人员令牌是否有效
     * @param token
     * @return 令牌有效返回{@code true},否则返回{@code false}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidPersonToken", method = RequestMethod.POST)
    @ApiOperation(value = "验证人员令牌是否有效",httpMethod="POST")
    public Response isValidPersonToken( @RequestBody IsValidPersonTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isValidPersonToken(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-100
    /**
     * 验证root令牌是否有效
     * @param token
     * @return 令牌有效返回{@code true},否则返回{@code false}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidRootToken", method = RequestMethod.POST)
    @ApiOperation(value = "验证root令牌是否有效",httpMethod="POST")
    public Response isValidRootToken( @RequestBody IsValidRootTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isValidRootToken(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-101
    /**
     * 验证令牌是否有效
     * @param token
     * @return 令牌有效返回{@code true},否则返回{@code false}
     * @since 2.1.1
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidToken", method = RequestMethod.POST)
    @ApiOperation(value = "验证令牌是否有效",httpMethod="POST")
    public Response isValidToken( @RequestBody IsValidTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isValidToken(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-102
    /**
     * 验证PERSON/ROOT令牌是否有效
     * @param token
     * @return 令牌有效返回{@code true},否则返回{@code false}
     * @since 2.1.1
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidUserToken", method = RequestMethod.POST)
    @ApiOperation(value = "验证PERSON/ROOT令牌是否有效",httpMethod="POST")
    public Response isValidUserToken( @RequestBody IsValidUserTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().isValidUserToken(args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-103
    /**
     * 返回({@code deviceGroupId})指定的fl_device_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_device_group(parent)
     * @param deviceGroupId
     * @return 如果{@code deviceGroupId}无效则返回空表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/listOfParentForDeviceGroup", method = RequestMethod.POST)
    @ApiOperation(value = "返回({@code deviceGroupId})指定的fl_device_group记录的所有的父节点(包括自己)<br>\n"
+" 自引用字段:fl_device_group(parent)",httpMethod="POST")
    public Response listOfParentForDeviceGroup( @RequestBody ListOfParentForDeviceGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().listOfParentForDeviceGroup(args.deviceGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-104
    /**
     * 返回({@code personGroupId})指定的fl_person_group记录的所有的父节点(包括自己)<br>
     * 自引用字段:fl_person_group(parent)
     * @param personGroupId
     * @return 如果{@code personGroupId}无效则返回空表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/listOfParentForPersonGroup", method = RequestMethod.POST)
    @ApiOperation(value = "返回({@code personGroupId})指定的fl_person_group记录的所有的父节点(包括自己)<br>\n"
+" 自引用字段:fl_person_group(parent)",httpMethod="POST")
    public Response listOfParentForPersonGroup( @RequestBody ListOfParentForPersonGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().listOfParentForPersonGroup(args.personGroupId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-105
    /**
     * 返回所有人员记录
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadAllPerson", method = RequestMethod.POST)
    @ApiOperation(value = "返回所有人员记录",httpMethod="POST")
    public Response loadAllPerson() 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadAllPerson());
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-106
    /**
     * 根据{@code where}指定的查询条件查询设备记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 返回设备记录列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "根据{@code where}指定的查询条件查询设备记录",httpMethod="POST")
    public Response loadDeviceByWhere( @RequestBody LoadDeviceByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadDeviceByWhere(args.where,args.startRow,args.numRows));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-107
    /**
     * 查询{@code where} SQL条件语句指定的记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @return 设备组ID列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceGroupByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "查询{@code where} SQL条件语句指定的记录",httpMethod="POST")
    public Response loadDeviceGroupByWhere( @RequestBody LoadDeviceGroupByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadDeviceGroupByWhere(args.where,args.startRow,args.numRows));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-108
    /**
     * 查询{@code where}条件指定的记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @return 返回查询结果记录的主键
     * @see 设备组ID列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceGroupIdByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "查询{@code where}条件指定的记录",httpMethod="POST")
    public Response loadDeviceGroupIdByWhere( @RequestBody LoadDeviceGroupIdByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadDeviceGroupIdByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-109
    /**
     * 根据{@code where}指定的查询条件查询设备记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @return 返回设备ID列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceIdByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "根据{@code where}指定的查询条件查询设备记录",httpMethod="POST")
    public Response loadDeviceIdByWhere( @RequestBody LoadDeviceIdByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadDeviceIdByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-110
    /**
     * 查询 {@code table}表的名为{@code column}类型为{@link Integer}类型的字段数据
     * @param table 数据库表名
     * @param column 有效的table表字段名或{@link LogLightBean} 字段名
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return 返回不重复的字段值列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDistinctIntegerColumn", method = RequestMethod.POST)
    @ApiOperation(value = "查询 {@code table}表的名为{@code column}类型为{@link Integer}类型的字段数据",httpMethod="POST")
    public Response loadDistinctIntegerColumn( @RequestBody LoadDistinctIntegerColumnArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadDistinctIntegerColumn(args.table,args.column,args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-111
    /**
     * 查询 {@code table}表的名为{@code column}类型为字段数据,将字段值转为{@link String}类型返回
     * @param table 数据库表名
     * @param column 有效的table表字段名或{@link LogLightBean} 字段名
     * @param where 'where'起始的SQL 查询条件语句,可为{@code null}
     * @return 返回不重复的字段值列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDistinctStringColumn", method = RequestMethod.POST)
    @ApiOperation(value = "查询 {@code table}表的名为{@code column}类型为字段数据,将字段值转为{@link String}类型返回",httpMethod="POST")
    public Response loadDistinctStringColumn( @RequestBody LoadDistinctStringColumnArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadDistinctStringColumn(args.table,args.column,args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-112
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_feature记录
     * @param timestamp 时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串
     * @return 返回 fl_feature.md5 列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadFeatureMd5ByUpdateTimeStr", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回 fl_feature.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_feature记录",httpMethod="POST")
    public Response loadFeatureMd5ByUpdate( @RequestBody LoadFeatureMd5ByUpdateTimeStrArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadFeatureMd5ByUpdate(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-113
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_feature.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_feature记录
     * @param timestamp
     * @return 返回 fl_feature.md5 列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadFeatureMd5ByUpdate", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回 fl_feature.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_feature记录",httpMethod="POST")
    public Response loadFeatureMd5ByUpdate( @RequestBody LoadFeatureMd5ByUpdateArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadFeatureMd5ByUpdate(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-114
    /**
     * 日志查询<br>
     * 根据{@code where}指定的查询条件查询日志记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "日志查询<br>\n"
+" 根据{@code where}指定的查询条件查询日志记录",httpMethod="POST")
    public Response loadLogByWhere( @RequestBody LoadLogByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadLogByWhere(args.where,args.startRow,args.numRows));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-115
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @param timestamp 时间戳
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogLightByVerifyTimeTimestr", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录",httpMethod="POST")
    public Response loadLogLightByVerifyTime( @RequestBody LoadLogLightByVerifyTimeTimestrArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadLogLightByVerifyTime(args.timestamp,args.startRow,args.numRows));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-116
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录
     * @param timestamp 时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogLightByVerifyTime", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回 fl_log_light.verify_time 字段大于指定时间戳({@code timestamp})的所有记录",httpMethod="POST")
    public Response loadLogLightByVerifyTime( @RequestBody LoadLogLightByVerifyTimeArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadLogLightByVerifyTime(args.timestamp,args.startRow,args.numRows));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-117
    /**
     * 日志查询<br>
     * 根据{@code where}指定的查询条件查询日志记录{@link LogLightBean}
     * @param where 'WHERE'开头的SQL条件语句
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogLightByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "日志查询<br>\n"
+" 根据{@code where}指定的查询条件查询日志记录{@link LogLightBean}",httpMethod="POST")
    public Response loadLogLightByWhere( @RequestBody LoadLogLightByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadLogLightByWhere(args.where,args.startRow,args.numRows));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-118
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_permit.create_time 字段大于指定时间戳( {@code timestamp} )的所有fl_permit记录
     * @param timestamp 时间戳,,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPermitByUpdateTimestr", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回 fl_permit.create_time 字段大于指定时间戳( {@code timestamp} )的所有fl_permit记录",httpMethod="POST")
    public Response loadPermitByUpdate( @RequestBody LoadPermitByUpdateTimestrArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadPermitByUpdate(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-119
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_permit.create_time 字段大于指定时间戳( {@code timestamp} )的所有fl_permit记录
     * @param timestamp
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPermitByUpdate", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回 fl_permit.create_time 字段大于指定时间戳( {@code timestamp} )的所有fl_permit记录",httpMethod="POST")
    public Response loadPermitByUpdate( @RequestBody LoadPermitByUpdateArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadPermitByUpdate(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-120
    /**
     * 返回 where 指定的所有人员记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录
     * @param startRow 记录起始行号 (first row = 1, last row = -1)
     * @param numRows 返回记录条数 为负值是返回{@code startRow}开始的所有行
     * @return 人员记录列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "返回 where 指定的所有人员记录",httpMethod="POST")
    public Response loadPersonByWhere( @RequestBody LoadPersonByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadPersonByWhere(args.where,args.startRow,args.numRows));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-121
    /**
     * 查询{@code where} SQL条件语句指定的记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录
     * @param startRow 返回记录的起始行(首行=1,尾行=-1)
     * @param numRows 返回记录条数(小于0时返回所有记录)
     * @return 人员组ID列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonGroupByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "查询{@code where} SQL条件语句指定的记录",httpMethod="POST")
    public Response loadPersonGroupByWhere( @RequestBody LoadPersonGroupByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadPersonGroupByWhere(args.where,args.startRow,args.numRows));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-122
    /**
     * 查询{@code where}条件指定的记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录
     * @return 返回人员组列表
     * @see #loadPersonGroupByWhere(String,int,int)
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonGroupIdByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "查询{@code where}条件指定的记录",httpMethod="POST")
    public Response loadPersonGroupIdByWhere( @RequestBody LoadPersonGroupIdByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadPersonGroupIdByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-123
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_person记录
     * @param timestamp 时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串
     * @return 返回fl_person.id 列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonIdByUpdateTimeTimeStr", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回 fl_person.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_person记录",httpMethod="POST")
    public Response loadPersonIdByUpdateTime( @RequestBody LoadPersonIdByUpdateTimeTimeStrArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadPersonIdByUpdateTime(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-124
    /**
     * (主动更新机制实现)<br>
     * 返回 fl_person.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_person记录
     * @param timestamp
     * @return 返回fl_person.id 列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonIdByUpdateTime", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回 fl_person.update_time 字段大于指定时间戳( {@code timestamp} )的所有fl_person记录",httpMethod="POST")
    public Response loadPersonIdByUpdateTime( @RequestBody LoadPersonIdByUpdateTimeArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadPersonIdByUpdateTime(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-125
    /**
     * 返回 where 指定的所有人员记录
     * @param where 'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录
     * @return 返回 fl_person.id 列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonIdByWhere", method = RequestMethod.POST)
    @ApiOperation(value = "返回 where 指定的所有人员记录",httpMethod="POST")
    public Response loadPersonIdByWhere( @RequestBody LoadPersonIdByWhereArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadPersonIdByWhere(args.where));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-126
    /**
     * (主动更新机制实现)<br>
     * 返回fl_person.update_time字段大于指定时间戳( {@code timestamp} )的所有fl_person记录<br>
     * 同时包含fl_feature更新记录引用的fl_person记录
     * @param timestamp 时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串
     * @return 返回fl_person.id 列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadUpdatedPersonsTimestr", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回fl_person.update_time字段大于指定时间戳( {@code timestamp} )的所有fl_person记录<br>\n"
+" 同时包含fl_feature更新记录引用的fl_person记录",httpMethod="POST")
    public Response loadUpdatedPersons( @RequestBody LoadUpdatedPersonsTimestrArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadUpdatedPersons(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-127
    /**
     * (主动更新机制实现)<br>
     * 返回fl_person.update_time字段大于指定时间戳( {@code timestamp} )的所有fl_person记录<br>
     * 同时包含fl_feature更新记录引用的fl_person记录
     * @param timestamp
     * @return 返回fl_person.id 列表
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadUpdatedPersons", method = RequestMethod.POST)
    @ApiOperation(value = "(主动更新机制实现)<br>\n"
+" 返回fl_person.update_time字段大于指定时间戳( {@code timestamp} )的所有fl_person记录<br>\n"
+" 同时包含fl_feature更新记录引用的fl_person记录",httpMethod="POST")
    public Response loadUpdatedPersons( @RequestBody LoadUpdatedPersonsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().loadUpdatedPersons(args.timestamp));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-128
    /**
     * 设备申请离线,删除设备令牌
     * <br>{@code DEVICE_ONLY}
     * @param token 当前持有的令牌
     * @throws ServiceSecurityException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/offline", method = RequestMethod.POST)
    @ApiOperation(value = "设备申请离线,删除设备令牌\n"
+" <br>{@code DEVICE_ONLY}",httpMethod="POST")
    public Response offline( @RequestBody OfflineArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().offline(args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-129
    /**
     * 设备申请上线,每次调用都会产生一个新的令牌
     * @param device 上线设备信息，必须提供{@code id, mac, serialNo}字段
     * @return 设备访问令牌
     * @throws ServiceSecurityException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/online", method = RequestMethod.POST)
    @ApiOperation(value = "设备申请上线,每次调用都会产生一个新的令牌",httpMethod="POST")
    public Response online( @RequestBody OnlineArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().online(args.device));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-130
    /**
     * 新设备注册,如果设备已经注册则返回注册设备记录<br>
     * 注册时必须提供设备MAC地址,是否提供序列号,根据应用需要选择
     * @param newDevice 设备记录,_isNew字段必须为{@code true},{@code id}字段不要指定,数据库会自动分配,保存在返回值中
     * @return 
     * @throws ServiceSecurityException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/registerDevice", method = RequestMethod.POST)
    @ApiOperation(value = "新设备注册,如果设备已经注册则返回注册设备记录<br>\n"
+" 注册时必须提供设备MAC地址,是否提供序列号,根据应用需要选择",httpMethod="POST")
    public Response registerDevice( @RequestBody RegisterDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().registerDevice(args.newDevice));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-131
    /**
     * 释放人员访问令牌
     * <br>{@code PERSON_ONLY}
     * @param token 当前持有的令牌
     * @throws ServiceSecurityException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releasePersonToken", method = RequestMethod.POST)
    @ApiOperation(value = "释放人员访问令牌\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response releasePersonToken( @RequestBody ReleasePersonTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().releasePersonToken(args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-132
    /**
     * 释放root访问令牌
     * <br>{@code ROOT_ONLY}
     * @param token 当前持有的令牌
     * @throws ServiceSecurityException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releaseRootToken", method = RequestMethod.POST)
    @ApiOperation(value = "释放root访问令牌\n"
+" <br>{@code ROOT_ONLY}",httpMethod="POST")
    public Response releaseRootToken( @RequestBody ReleaseRootTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().releaseRootToken(args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-133
    /**
     * 释放person/root访问令牌
     * @param token 要释放的令牌,如果令牌类型非{@link net.gdface.facelog.Token.TokenType#PERSON}或{@link net.gdface.facelog.Token.TokenType#ROOT}则抛出{@link ServiceSecurityException}异常
     * @throws ServiceSecurityException
     * @since 2.1.1
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releaseUserToken", method = RequestMethod.POST)
    @ApiOperation(value = "释放person/root访问令牌",httpMethod="POST")
    public Response releaseUserToken( @RequestBody ReleaseUserTokenArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().releaseUserToken(args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-134
    /**
     * 替换personId指定的人员记录的人脸特征数据,同时删除原特征数据记录(fl_feature)及关联的fl_face表记录
     * @param personId 人员记录id,{@code fl_person.id}
     * @param featureMd5 人脸特征数据记录id (已经保存在数据库中)
     * @param deleteOldFeatureImage 是否删除原特征数据记录间接关联的原始图像记录(fl_image)
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/replaceFeature", method = RequestMethod.POST)
    @ApiOperation(value = "替换personId指定的人员记录的人脸特征数据,同时删除原特征数据记录(fl_feature)及关联的fl_face表记录",httpMethod="POST")
    public Response replaceFeature( @RequestBody ReplaceFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().replaceFeature(args.personId,args.featureMd5,args.deleteOldFeatureImage,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-135
    /**
     * 返回deviceId所属的管理边界设备组id<br>
     * 在deviceId所属组的所有父节点中自顶向下查找第一个{@code fl_device_group.root_group}字段不为空的组，返回此记录id<br>
     * 没有找到deviceId指定的记录抛出异常
     * @param deviceId
     * @return {@code fl_device_group.root_group}字段不为空的记录id,没有找到则返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/rootGroupOfDevice", method = RequestMethod.POST)
    @ApiOperation(value = "返回deviceId所属的管理边界设备组id<br>\n"
+" 在deviceId所属组的所有父节点中自顶向下查找第一个{@code fl_device_group.root_group}字段不为空的组，返回此记录id<br>\n"
+" 没有找到deviceId指定的记录抛出异常",httpMethod="POST")
    public Response rootGroupOfDevice( @RequestBody RootGroupOfDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().rootGroupOfDevice(args.deviceId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-136
    /**
     * 返回personId所属的管理边界人员组id<br>
     * 在personId所属组的所有父节点中自顶向下查找第一个{@code fl_person_group.root_group}字段不为空的人员组，返回此记录组id<br>
     * 没有找到personId指定的记录抛出异常
     * @param personId
     * @return {@code fl_person_group.root_group}字段不为空的记录id,没有找到则返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/rootGroupOfPerson", method = RequestMethod.POST)
    @ApiOperation(value = "返回personId所属的管理边界人员组id<br>\n"
+" 在personId所属组的所有父节点中自顶向下查找第一个{@code fl_person_group.root_group}字段不为空的人员组，返回此记录组id<br>\n"
+" 没有找到personId指定的记录抛出异常",httpMethod="POST")
    public Response rootGroupOfPerson( @RequestBody RootGroupOfPersonArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().rootGroupOfPerson(args.personId));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-137
    /**
     * (异步)执行cmdpath指定的设备命令<br>
     * <br>{@code PERSON_ONLY}
     * @param target 命令目标设备/设备组id
     * @param group target中的元素是否为设备组id
     * @param cmdpath 设备命令的dtalk路径
     * @param jsonArgs 设备命令参数(JSON)
     * @param ackChannel 设备命令响应频道,不需要接收命令响应时设置为{@code null}
     * @param token 访问令牌
     * @return 以map形式返回收到命令的客户端数目和命令序列号,如{"client":25,"cmdSn":12309898}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/runCmd", method = RequestMethod.POST)
    @ApiOperation(value = "(异步)执行cmdpath指定的设备命令<br>\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response runCmd( @RequestBody RunCmdArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().runCmd(args.target,args.group,args.cmdpath,args.jsonArgs,args.ackChannel,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-138
    /**
     * (异步)执行cmdpath指定的任务<br>
     * <br>{@code PERSON_ONLY}
     * @param taskQueue 任务队列名称
     * @param cmdpath 设备命令的dtalk路径
     * @param jsonArgs 设备命令参数(JSON)
     * @param ackChannel 设备命令响应频道,不需要接收命令响应时设置为{@code null}
     * @param token 访问令牌
     * @return 成功提交任务返回命令序列号,否则返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/runTask", method = RequestMethod.POST)
    @ApiOperation(value = "(异步)执行cmdpath指定的任务<br>\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response runTask( @RequestBody RunTaskArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().runTask(args.taskQueue,args.cmdpath,args.jsonArgs,args.ackChannel,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-139
    /**
     * 保存设备记录
     * <br>{@code PERSON_ONLY}
     * @param deviceBean
     * @param token 访问令牌
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveDevice", method = RequestMethod.POST)
    @ApiOperation(value = "保存设备记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response saveDevice( @RequestBody SaveDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().saveDevice(args.deviceBean,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-140
    /**
     * 保存设备组记录
     * <br>{@code PERSON_ONLY}
     * @param deviceGroupBean
     * @param token 访问令牌
     * @return 
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveDeviceGroup", method = RequestMethod.POST)
    @ApiOperation(value = "保存设备组记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response saveDeviceGroup( @RequestBody SaveDeviceGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().saveDeviceGroup(args.deviceGroupBean,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-141
    /**
     * 如果记录不存在则创建deviceGroupId和personGroupId之间的MANY TO MANY 联接表(fl_permit)记录,
     * 否则修改指定记录的通行时间安排表<br>
     * <br>{@code PERSON_ONLY}
     * @param deviceGroupId 设备组id
     * @param personGroupId 人员组id
     * @param schedule 通行时间安排表,为{@code null}则不限制通行时间
     * @param token 访问令牌
     * @return (fl_permit)记录
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePermitWithSchedule", method = RequestMethod.POST)
    @ApiOperation(value = "如果记录不存在则创建deviceGroupId和personGroupId之间的MANY TO MANY 联接表(fl_permit)记录,\n"
+" 否则修改指定记录的通行时间安排表<br>\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response savePermit( @RequestBody SavePermitWithScheduleArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePermit(args.deviceGroupId,args.personGroupId,args.schedule,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-142
    /**
     * 保存通行权限(permit)记录
     * <br>{@code PERSON_ONLY}
     * @param permitBean 要修改或增加的fl_permit记录
     * @param token 访问令牌
     * @return 保存的{@link PermitBean}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePermit", method = RequestMethod.POST)
    @ApiOperation(value = "保存通行权限(permit)记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response savePermit( @RequestBody SavePermitArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePermit(args.permitBean,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-143
    /**
     * 保存人员信息记录<br>
     * 适用于单张人脸提取特征算法
     * @param personBean 人员信息对象,{@code fl_person}表记录
     * @param idPhoto 标准照图像,可以为{@code null}
     * @param feature 人脸特征数据,可以为{@code null}
     * @param featureVersion 特征(SDk)版本号
     * @param featureImage 提取特征源图像,为null 时,默认使用idPhoto
     * @param faceBean 人脸位置对象,为null 时,不保存人脸数据,忽略featureImage
     * @param token (设备)访问令牌
     * @return 保存的{@link PersonBean}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonFull", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员信息记录<br>\n"
+" 适用于单张人脸提取特征算法",httpMethod="POST")
    public Response savePerson( @RequestBody SavePersonFullArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePerson(args.personBean,args.idPhoto,args.feature,args.featureVersion,args.featureImage,args.faceBean,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-144
    /**
     * 保存人员信息记录<br>
     * 适用于多张人脸合成特征算法<br>
     * {@code photos}与{@code faces}为提取特征{@code feature}的人脸照片对应的人脸位置对象，必须一一对应,
     * 该方法用于多张照片合成一个人脸特征的算法
     * @param personBean {@code fl_person}表记录
     * @param idPhoto 标准照图像,可为null
     * @param feature 用于验证的人脸特征数据
     * @param featureVersion 特征(SDk)版本号
     * @param photos 检测到人脸的照片列表
     * @param faces 检测人脸信息列表
     * @param token (设备)访问令牌
     * @return 保存的{@link PersonBean}对象
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureMultiImage", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员信息记录<br>\n"
+" 适用于多张人脸合成特征算法<br>\n"
+" {@code photos}与{@code faces}为提取特征{@code feature}的人脸照片对应的人脸位置对象，必须一一对应,\n"
+" 该方法用于多张照片合成一个人脸特征的算法",httpMethod="POST")
    public Response savePerson( @RequestBody SavePersonWithPhotoAndFeatureMultiImageArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePerson(args.personBean,args.idPhoto,args.feature,args.featureVersion,args.photos,args.faces,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-145
    /**
     * 保存人员信息记录<br>
     * 适用于多张人脸合成特征算法
     * @param personBean {@code fl_person}表记录
     * @param idPhoto 标准照图像,可为null
     * @param feature 用于验证的人脸特征数据,不可重复, 参见 {@link #addFeature(byte[], String, Integer, List, String, Token)}
     * @param featureVersion 特征(SDk)版本号
     * @param faceBeans 可为{@code null},参见 {@link #addFeature(byte[], String, Integer, List, String, Token)}
     * @param token 访问令牌
     * @return 保存的{@link PersonBean}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureMultiFaces", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员信息记录<br>\n"
+" 适用于多张人脸合成特征算法",httpMethod="POST")
    public Response savePerson( @RequestBody SavePersonWithPhotoAndFeatureMultiFacesArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePerson(args.personBean,args.idPhoto,args.feature,args.featureVersion,args.faceBeans,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-146
    /**
     * 保存人员信息记录
     * @param personBean {@code fl_person}表记录
     * @param idPhoto 标准照图像对象,可为null
     * @param token 访问令牌
     * @return 保存的{@link PersonBean}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhoto", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员信息记录",httpMethod="POST")
    public Response savePerson( @RequestBody SavePersonWithPhotoArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePerson(args.personBean,args.idPhoto,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-147
    /**
     * 保存人员信息记录<br>
     * 适用于单张人脸提取特征算法
     * @param personBean {@code fl_person}表记录
     * @param idPhoto 标准照图像,可为null
     * @param featureBean 用于验证的人脸特征数据对象,可为null
     * @param token 访问令牌
     * @return 保存的{@link PersonBean}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeature", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员信息记录<br>\n"
+" 适用于单张人脸提取特征算法",httpMethod="POST")
    public Response savePerson( @RequestBody SavePersonWithPhotoAndFeatureArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePerson(args.personBean,args.idPhoto,args.featureBean,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-148
    /**
     * 保存人员信息记录
     * @param personBean {@code fl_person}表记录
     * @param idPhotoMd5 标准照图像对象,可为null
     * @param featureMd5 用于验证的人脸特征数据对象,可为null
     * @param token 访问令牌
     * @return 保存的{@link PersonBean}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureSaved", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员信息记录",httpMethod="POST")
    public Response savePerson( @RequestBody SavePersonWithPhotoAndFeatureSavedArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePerson(args.personBean,args.idPhotoMd5,args.featureMd5,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-149
    /**
     * 保存人员(person)记录
     * @param personBean {@code fl_person}表记录
     * @param token 访问令牌
     * @return 保存的{@link PersonBean}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePerson", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员(person)记录",httpMethod="POST")
    public Response savePerson( @RequestBody SavePersonArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePerson(args.personBean,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-150
    /**
     * 保存人员组记录
     * <br>{@code PERSON_ONLY}
     * @param personGroupBean
     * @param token 访问令牌
     * @return 
     * @throws RuntimeDaoException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonGroup", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员组记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response savePersonGroup( @RequestBody SavePersonGroupArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePersonGroup(args.personGroupBean,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-151
    /**
     * 保存人员信息记录(包含标准照)<br>
     * 每一张照片对应一个{@code PersonBean}记录, {@code photos}元素不可重复
     * {@code photos}与{@code persons}列表一一对应
     * {@code PERSON_ONLY}
     * @param photos 照片列表
     * @param persons 人员记录对象列表
     * @param token 访问令牌
     * @return 保存的{@link PersonBean}记录条数
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonsWithPhoto", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员信息记录(包含标准照)<br>\n"
+" 每一张照片对应一个{@code PersonBean}记录, {@code photos}元素不可重复\n"
+" {@code photos}与{@code persons}列表一一对应\n"
+" {@code PERSON_ONLY}",httpMethod="POST")
    public Response savePersons( @RequestBody SavePersonsWithPhotoArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().savePersons(args.photos,args.persons,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-152
    /**
     * 保存人员(person)记录
     * <br>{@code PERSON_ONLY}
     * @param persons {@code fl_person}表记录
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersons", method = RequestMethod.POST)
    @ApiOperation(value = "保存人员(person)记录\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response savePersons( @RequestBody SavePersonsArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().savePersons(args.persons,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-153
    /**
     * 配置参数持久化<br>
     * 保存修改的配置到自定义配置文件
     * <br>{@code ROOT_ONLY}
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveServiceConfig", method = RequestMethod.POST)
    @ApiOperation(value = "配置参数持久化<br>\n"
+" 保存修改的配置到自定义配置文件\n"
+" <br>{@code ROOT_ONLY}",httpMethod="POST")
    public Response saveServiceConfig( @RequestBody SaveServiceConfigArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().saveServiceConfig(args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-154
    /**
     * 返回sdk任务队列名
     * @param task 任务名,可选值:{@link CommonConstant#TASK_FACEAPI_BASE},{@link CommonConstant#TASK_REGISTER_BASE}
     * @param sdkVersion sdk版本号
     * @param token 访问令牌
     * @return 返回sdk任务队列名，参数错误返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/sdkTaskQueueOf", method = RequestMethod.POST)
    @ApiOperation(value = "返回sdk任务队列名",httpMethod="POST")
    public Response sdkTaskQueueOf( @RequestBody SdkTaskQueueOfArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().sdkTaskQueueOf(args.task,args.sdkVersion,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-155
    /**
     * 修改 personId 指定的人员记录的有效期
     * <br>{@code PERSON_ONLY}
     * @param personId
     * @param expiryDate 失效日期,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setPersonExpiryDateTimeStr", method = RequestMethod.POST)
    @ApiOperation(value = "修改 personId 指定的人员记录的有效期\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response setPersonExpiryDate( @RequestBody SetPersonExpiryDateTimeStrArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().setPersonExpiryDate(args.personId,args.expiryDate,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-156
    /**
     * 修改 personId 指定的人员记录的有效期
     * <br>{@code PERSON_ONLY}
     * @param personId
     * @param expiryDate 失效日期
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setPersonExpiryDate", method = RequestMethod.POST)
    @ApiOperation(value = "修改 personId 指定的人员记录的有效期\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response setPersonExpiryDate( @RequestBody SetPersonExpiryDateArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().setPersonExpiryDate(args.personId,args.expiryDate,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-157
    /**
     * 修改 personIdList 指定的人员记录的有效期
     * <br>{@code PERSON_ONLY}
     * @param personIdList 人员id列表
     * @param expiryDate 失效日期
     * @param token 访问令牌
     * @ 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setPersonExpiryDateList", method = RequestMethod.POST)
    @ApiOperation(value = "修改 personIdList 指定的人员记录的有效期\n"
+" <br>{@code PERSON_ONLY}",httpMethod="POST")
    public Response setPersonExpiryDate( @RequestBody SetPersonExpiryDateListArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().setPersonExpiryDate(args.personIdList,args.expiryDate,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-158
    /**
     * 修改一组配置参数
     * <br>{@code ROOT_ONLY}
     * @param config 参数名-参数值对
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setProperties", method = RequestMethod.POST)
    @ApiOperation(value = "修改一组配置参数\n"
+" <br>{@code ROOT_ONLY}",httpMethod="POST")
    public Response setProperties( @RequestBody SetPropertiesArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().setProperties(args.config,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-159
    /**
     * 修改/增加指定的配置参数
     * <br>{@code ROOT_ONLY}
     * @param key 参数名
     * @param value 参数值
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setProperty", method = RequestMethod.POST)
    @ApiOperation(value = "修改/增加指定的配置参数\n"
+" <br>{@code ROOT_ONLY}",httpMethod="POST")
    public Response setProperty( @RequestBody SetPropertyArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().setProperty(args.key,args.value,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-160
    /**
     * 根据任务名返回redis队列名
     * @param task 任务名
     * @param token 访问令牌
     * @return 返回redis队列名,队列不存在则返回{@code null}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/taskQueueOf", method = RequestMethod.POST)
    @ApiOperation(value = "根据任务名返回redis队列名",httpMethod="POST")
    public Response taskQueueOf( @RequestBody TaskQueueOfArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().taskQueueOf(args.task,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-161
    /**
     * 删除管理边界<br>
     * 删除fl_person_group.root_group和fl_device_group.root_group字段的互相指向,设置为{@code null},
     * 以事务操作方式更新数据库<br>
     * 如果personGroupId和deviceGroupId不存在绑定关系则跳过,
     * 没有找到personGroupId或deviceGroupId指定的记录抛出异常<br>
     * <br>{@link TokenMangement.Enable#ROOT}<br>
     * @param personGroupId 人员组id
     * @param deviceGroupId 设备组id
     * @param token 访问令牌
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/unbindBorder", method = RequestMethod.POST)
    @ApiOperation(value = "删除管理边界<br>\n"
+" 删除fl_person_group.root_group和fl_device_group.root_group字段的互相指向,设置为{@code null},\n"
+" 以事务操作方式更新数据库<br>\n"
+" 如果personGroupId和deviceGroupId不存在绑定关系则跳过,\n"
+" 没有找到personGroupId或deviceGroupId指定的记录抛出异常<br>\n"
+" <br>{@link TokenMangement.Enable#ROOT}<br>",httpMethod="POST")
    public Response unbindBorder( @RequestBody UnbindBorderArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().unbindBorder(args.personGroupId,args.deviceGroupId,args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-162
    /**
     * (设备端)删除当前设备<br>
     * 从fl_device表中删除当前设备记录
     * <br>{@code DEVICE_ONLY}
     * @param token 设备验证令牌
     * @throws ServiceSecurityException
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/unregisterDevice", method = RequestMethod.POST)
    @ApiOperation(value = "(设备端)删除当前设备<br>\n"
+" 从fl_device表中删除当前设备记录\n"
+" <br>{@code DEVICE_ONLY}",httpMethod="POST")
    public Response unregisterDevice( @RequestBody UnregisterDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                delegate().unregisterDevice(args.token);
                response.onComplete();
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-163
    /**
     * 更新设备记录(必须是已经存在的设备记录，否则抛出异常)
     * @param deviceBean
     * @param token 访问令牌
     * @return 返回设备记录
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/updateDevice", method = RequestMethod.POST)
    @ApiOperation(value = "更新设备记录(必须是已经存在的设备记录，否则抛出异常)",httpMethod="POST")
    public Response updateDevice( @RequestBody UpdateDeviceArgs args) 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().updateDevice(args.deviceBean,args.token));
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-164
    /**
     * 返回服务版本号
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/version", method = RequestMethod.POST)
    @ApiOperation(value = "返回服务版本号",httpMethod="POST")
    public Response version() 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().version());
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    // port-165
    /**
     * 返回服务版本的详细信息<br>
     * <ul>
     * <li>{@code VERSION} -- 服务版本号</li>
     * <li>{@code SCM_REVISION} -- GIT修订版本号</li>
     * <li>{@code SCM_BRANCH} -- GIT分支</li>
     * <li>{@code TIMESTAMP} -- 时间戳</li>
     * </ul>
     * @return 
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/versionInfo", method = RequestMethod.POST)
    @ApiOperation(value = "返回服务版本的详细信息<br>\n"
+" <ul>\n"
+" <li>{@code VERSION} -- 服务版本号</li>\n"
+" <li>{@code SCM_REVISION} -- GIT修订版本号</li>\n"
+" <li>{@code SCM_BRANCH} -- GIT分支</li>\n"
+" <li>{@code TIMESTAMP} -- 时间戳</li>\n"
+" </ul>",httpMethod="POST")
    public Response versionInfo() 
    {
            Response response = responseFactory.newIFaceLogResponse();
            try{
                response.onComplete(delegate().versionInfo());
            }
            catch(Exception e){
                logger.error(e.getMessage(),e);
                response.onError(e);
            }
            return response;
    }
    /**
     * argClass-1<br>
     * wrap arguments for method {@link #addFeature(AddFeatureWithImageArgs)}
     */
    public static class AddFeatureWithImageArgs{
        @ApiModelProperty(value ="特征数据" ,required=true ,dataType="byte[]")
        public byte[] feature;
        @ApiModelProperty(value ="特征(SDk)版本号" ,required=true ,dataType="String")
        public String featureVersion;
        @ApiModelProperty(value ="关联的人员id(fl_person.id),可为null" ,required=true ,dataType="Integer")
        public Integer personId;
        @ApiModelProperty(value ="如果{@code personId}指定的记录没指定身份照片,\n"
+" 是否用{@code featurePhoto}作为身份照片,{@code featurePhoto}为{@code null}时无效" ,required=true ,dataType="boolean")
        public boolean asIdPhotoIfAbsent;
        @ApiModelProperty(value ="生成人脸特征的原始照片,如果不要求保留原始照片可为null" ,required=true ,dataType="byte[]")
        public byte[] featurePhoto;
        @ApiModelProperty(value ="生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null" ,required=true ,dataType="FaceBean")
        public FaceBean faceBean;
        @ApiModelProperty(value ="已经存在的特征记录ID(MD5),可为{@code null},不为{@code null}时会先删除指定的特征,记录不存在则抛出异常" ,required=true ,dataType="String")
        public String removed;
        @ApiModelProperty(value ="(设备)访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-2<br>
     * wrap arguments for method {@link #addFeature(AddFeatureArgs)}
     */
    public static class AddFeatureArgs{
        @ApiModelProperty(value ="人脸特征数据" ,required=true ,dataType="byte[]")
        public byte[] feature;
        @ApiModelProperty(value ="特征(SDk)版本号" ,required=true ,dataType="String")
        public String featureVersion;
        @ApiModelProperty(value ="关联的人员id(fl_person.id),可为null" ,required=true ,dataType="Integer")
        public Integer personId;
        @ApiModelProperty(value ="生成特征数据的人脸信息对象(可以是多个人脸对象合成一个特征),可为null" ,required=true ,dataType="List")
        public List<FaceBean> faecBeans;
        @ApiModelProperty(value ="已经存在的特征记录ID(MD5),可为{@code null},不为{@code null}时会先删除指定的特征,记录不存在则抛出异常" ,required=true ,dataType="String")
        public String removed;
        @ApiModelProperty(value ="(设备)访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-3<br>
     * wrap arguments for method {@link #addFeature(AddFeatureMultiArgs)}
     */
    public static class AddFeatureMultiArgs{
        @ApiModelProperty(value ="特征数据" ,required=true ,dataType="byte[]")
        public byte[] feature;
        @ApiModelProperty(value ="特征(SDk)版本号" ,required=true ,dataType="String")
        public String featureVersion;
        @ApiModelProperty(value ="关联的人员id(fl_person.id),可为null" ,required=true ,dataType="Integer")
        public Integer personId;
        @ApiModelProperty(value ="检测到人脸的照片列表" ,required=true ,dataType="List")
        public List<byte[]> photos;
        @ApiModelProperty(value ="检测人脸信息列表" ,required=true ,dataType="List")
        public List<FaceBean> faces;
        @ApiModelProperty(value ="已经存在的特征记录ID(MD5),可为{@code null},不为{@code null}时会先删除指定的特征,记录不存在则抛出异常" ,required=true ,dataType="String")
        public String removed;
        @ApiModelProperty(value ="(设备)访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-4<br>
     * wrap arguments for method {@link #addImage(AddImageArgs)}
     */
    public static class AddImageArgs{
        @ApiModelProperty(value ="图像数据" ,required=true ,dataType="byte[]")
        public byte[] imageData;
        @ApiModelProperty(value ="图像来源设备id,可为null" ,required=true ,dataType="Integer")
        public Integer deviceId;
        @ApiModelProperty(value ="关联的人脸信息对象,可为null" ,required=true ,dataType="FaceBean")
        public FaceBean faceBean;
        @ApiModelProperty(value ="关联的人员id(fl_person.id),可为null" ,required=true ,dataType="Integer")
        public Integer personId;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-5<br>
     * wrap arguments for method {@link #addLog(AddLogArgs)}
     */
    public static class AddLogArgs{
        @ApiModelProperty(value ="日志记录对象" ,required=true ,dataType="LogBean")
        public LogBean logBean;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-6<br>
     * wrap arguments for method {@link #addLog(AddLogFullArgs)}
     */
    public static class AddLogFullArgs{
        @ApiModelProperty(value ="日志记录对象" ,required=true ,dataType="LogBean")
        public LogBean logBean;
        @ApiModelProperty(value ="用于保存到数据库的提取人脸特征的人脸信息对象" ,required=true ,dataType="FaceBean")
        public FaceBean faceBean;
        @ApiModelProperty(value ="用于保存到数据库的现场采集人脸特征的照片" ,required=true ,dataType="byte[]")
        public byte[] featureImage;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-7<br>
     * wrap arguments for method {@link #addLogs(AddLogsFullArgs)}
     */
    public static class AddLogsFullArgs{
        @ApiModelProperty(value ="日志记录对象" ,required=true ,dataType="List")
        public List<LogBean> logBeans;
        @ApiModelProperty(value ="为用于保存到数据库的提取人脸特征的人脸信息对象" ,required=true ,dataType="List")
        public List<FaceBean> faceBeans;
        @ApiModelProperty(value ="用于保存到数据库的现场采集人脸特征的照片" ,required=true ,dataType="List")
        public List<byte[]> featureImages;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-8<br>
     * wrap arguments for method {@link #addLogs(AddLogsArgs)}
     */
    public static class AddLogsArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="List")
        public List<LogBean> beans;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-9<br>
     * wrap arguments for method {@link #applyAckChannel(ApplyAckChannelWithDurationArgs)}
     */
    public static class ApplyAckChannelWithDurationArgs{
        @ApiModelProperty(value ="通道有效时间(秒) 大于0有效,否则使用默认的有效期" ,required=true ,dataType="int")
        public int duration;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-10<br>
     * wrap arguments for method {@link #applyAckChannel(ApplyAckChannelArgs)}
     */
    public static class ApplyAckChannelArgs{
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-11<br>
     * wrap arguments for method {@link #applyCmdSn(ApplyCmdSnArgs)}
     */
    public static class ApplyCmdSnArgs{
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-12<br>
     * wrap arguments for method {@link #applyPersonToken(ApplyPersonTokenArgs)}
     */
    public static class ApplyPersonTokenArgs{
        @ApiModelProperty(value ="用户ID" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="密码" ,required=true ,dataType="String")
        public String password;
        @ApiModelProperty(value ="为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)" ,required=true ,dataType="boolean")
        public boolean isMd5;
    }
    /**
     * argClass-13<br>
     * wrap arguments for method {@link #applyRootToken(ApplyRootTokenArgs)}
     */
    public static class ApplyRootTokenArgs{
        @ApiModelProperty(value ="root用户密码" ,required=true ,dataType="String")
        public String password;
        @ApiModelProperty(value ="为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)" ,required=true ,dataType="boolean")
        public boolean isMd5;
    }
    /**
     * argClass-14<br>
     * wrap arguments for method {@link #applyUserToken(ApplyUserTokenArgs)}
     */
    public static class ApplyUserTokenArgs{
        @ApiModelProperty(value ="用户ID(为-1时为root)" ,required=true ,dataType="int")
        public int userid;
        @ApiModelProperty(value ="用户密码" ,required=true ,dataType="String")
        public String password;
        @ApiModelProperty(value ="为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)" ,required=true ,dataType="boolean")
        public boolean isMd5;
    }
    /**
     * argClass-15<br>
     * wrap arguments for method {@link #bindBorder(BindBorderArgs)}
     */
    public static class BindBorderArgs{
        @ApiModelProperty(value ="人员组id" ,required=true ,dataType="Integer")
        public Integer personGroupId;
        @ApiModelProperty(value ="设备组id" ,required=true ,dataType="Integer")
        public Integer deviceGroupId;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-16<br>
     * wrap arguments for method {@link #childListForDeviceGroup(ChildListForDeviceGroupArgs)}
     */
    public static class ChildListForDeviceGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
    }
    /**
     * argClass-17<br>
     * wrap arguments for method {@link #childListForPersonGroup(ChildListForPersonGroupArgs)}
     */
    public static class ChildListForPersonGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-18<br>
     * wrap arguments for method {@link #countDeviceByWhere(CountDeviceByWhereArgs)}
     */
    public static class CountDeviceByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-19<br>
     * wrap arguments for method {@link #countDeviceGroupByWhere(CountDeviceGroupByWhereArgs)}
     */
    public static class CountDeviceGroupByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-20<br>
     * wrap arguments for method {@link #countLogByWhere(CountLogByWhereArgs)}
     */
    public static class CountLogByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-21<br>
     * wrap arguments for method {@link #countLogLightByVerifyTime(CountLogLightByVerifyTimeTimestrArgs)}
     */
    public static class CountLogLightByVerifyTimeTimestrArgs{
        @ApiModelProperty(value ="时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串" ,required=true ,dataType="String")
        public String timestamp;
    }
    /**
     * argClass-22<br>
     * wrap arguments for method {@link #countLogLightByVerifyTime(CountLogLightByVerifyTimeArgs)}
     */
    public static class CountLogLightByVerifyTimeArgs{
        @ApiModelProperty(value ="时间戳" ,required=true ,dataType="long")
        public long timestamp;
    }
    /**
     * argClass-23<br>
     * wrap arguments for method {@link #countLogLightByWhere(CountLogLightByWhereArgs)}
     */
    public static class CountLogLightByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-24<br>
     * wrap arguments for method {@link #countPersonByWhere(CountPersonByWhereArgs)}
     */
    public static class CountPersonByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-25<br>
     * wrap arguments for method {@link #countPersonGroupByWhere(CountPersonGroupByWhereArgs)}
     */
    public static class CountPersonGroupByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-26<br>
     * wrap arguments for method {@link #countPersonLog(CountPersonLogArgs)}
     */
    public static class CountPersonLogArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="统计起始日期,可为{@code null}" ,required=true ,dataType="Long")
        public Long startDate;
        @ApiModelProperty(value ="统计结束日期,可为{@code null}" ,required=true ,dataType="Long")
        public Long endDate;
    }
    /**
     * argClass-27<br>
     * wrap arguments for method {@link #countPersonLog(CountPersonLogTimeStrArgs)}
     */
    public static class CountPersonLogTimeStrArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="统计起始日期,可为{@code null},日期格式为" ,required=true ,dataType="String")
        public String startDate;
        @ApiModelProperty(value ="统计结束日期,可为{@code null}" ,required=true ,dataType="String")
        public String endDate;
    }
    /**
     * argClass-28<br>
     * wrap arguments for method {@link #deleteAllFeaturesByPersonId(DeleteAllFeaturesByPersonIdArgs)}
     */
    public static class DeleteAllFeaturesByPersonIdArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="是否删除关联的 image记录" ,required=true ,dataType="boolean")
        public boolean deleteImage;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-29<br>
     * wrap arguments for method {@link #deleteDevice(DeleteDeviceArgs)}
     */
    public static class DeleteDeviceArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int id;
        @ApiModelProperty(value ="人员令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-30<br>
     * wrap arguments for method {@link #deleteDeviceByMac(DeleteDeviceByMacArgs)}
     */
    public static class DeleteDeviceByMacArgs{
        @ApiModelProperty(value ="设备MAC地址(12位HEX字符串)" ,required=true ,dataType="String")
        public String mac;
        @ApiModelProperty(value ="人员令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-31<br>
     * wrap arguments for method {@link #deleteDeviceGroup(DeleteDeviceGroupArgs)}
     */
    public static class DeleteDeviceGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-32<br>
     * wrap arguments for method {@link #deleteFeature(DeleteFeatureArgs)}
     */
    public static class DeleteFeatureArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String featureMd5;
        @ApiModelProperty(value ="为{@code true}则删除关联的 image记录(如果该图像还关联其他特征则不删除)" ,required=true ,dataType="boolean")
        public boolean deleteImage;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-33<br>
     * wrap arguments for method {@link #deleteGroupPermitOnDeviceGroup(DeleteGroupPermitOnDeviceGroupArgs)}
     */
    public static class DeleteGroupPermitOnDeviceGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
        @ApiModelProperty(value ="令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-34<br>
     * wrap arguments for method {@link #deleteImage(DeleteImageArgs)}
     */
    public static class DeleteImageArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String imageMd5;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-35<br>
     * wrap arguments for method {@link #deletePermit(DeletePermitByIdArgs)}
     */
    public static class DeletePermitByIdArgs{
        @ApiModelProperty(value ="设备组id" ,required=true ,dataType="int")
        public int deviceGroupId;
        @ApiModelProperty(value ="人员组id" ,required=true ,dataType="int")
        public int personGroupId;
        @ApiModelProperty(value ="" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-36<br>
     * wrap arguments for method {@link #deletePerson(DeletePersonArgs)}
     */
    public static class DeletePersonArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-37<br>
     * wrap arguments for method {@link #deletePersonByPapersNum(DeletePersonByPapersNumArgs)}
     */
    public static class DeletePersonByPapersNumArgs{
        @ApiModelProperty(value ="证件号码" ,required=true ,dataType="String")
        public String papersNum;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-38<br>
     * wrap arguments for method {@link #deletePersonGroup(DeletePersonGroupArgs)}
     */
    public static class DeletePersonGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-39<br>
     * wrap arguments for method {@link #deletePersonGroupPermit(DeletePersonGroupPermitArgs)}
     */
    public static class DeletePersonGroupPermitArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
        @ApiModelProperty(value ="令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-40<br>
     * wrap arguments for method {@link #deletePersons(DeletePersonsArgs)}
     */
    public static class DeletePersonsArgs{
        @ApiModelProperty(value ="人员id列表" ,required=true ,dataType="List")
        public List<Integer> personIdList;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-41<br>
     * wrap arguments for method {@link #deletePersonsByPapersNum(DeletePersonsByPapersNumArgs)}
     */
    public static class DeletePersonsByPapersNumArgs{
        @ApiModelProperty(value ="证件号码列表" ,required=true ,dataType="List")
        public List<String> papersNumlist;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-42<br>
     * wrap arguments for method {@link #disablePerson(DisablePersonArgs)}
     */
    public static class DisablePersonArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="将用户移动到指定的用户组，为{@code null}则不移动" ,required=true ,dataType="Integer")
        public Integer moveToGroupId;
        @ApiModelProperty(value ="为{@code true}删除用户标准照" ,required=true ,dataType="boolean")
        public boolean deletePhoto;
        @ApiModelProperty(value ="为{@code true}删除用户所有的人脸特征数据(包括照片)" ,required=true ,dataType="boolean")
        public boolean deleteFeature;
        @ApiModelProperty(value ="为{@code true}删除用户所有通行日志" ,required=true ,dataType="boolean")
        public boolean deleteLog;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-43<br>
     * wrap arguments for method {@link #disablePerson(DisablePersonListArgs)}
     */
    public static class DisablePersonListArgs{
        @ApiModelProperty(value ="人员id列表" ,required=true ,dataType="List")
        public List<Integer> personIdList;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-44<br>
     * wrap arguments for method {@link #existsDevice(ExistsDeviceArgs)}
     */
    public static class ExistsDeviceArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int id;
    }
    /**
     * argClass-45<br>
     * wrap arguments for method {@link #existsFeature(ExistsFeatureArgs)}
     */
    public static class ExistsFeatureArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String md5;
    }
    /**
     * argClass-46<br>
     * wrap arguments for method {@link #existsImage(ExistsImageArgs)}
     */
    public static class ExistsImageArgs{
        @ApiModelProperty(value ="图像的MD5校验码" ,required=true ,dataType="String")
        public String md5;
    }
    /**
     * argClass-47<br>
     * wrap arguments for method {@link #existsPerson(ExistsPersonArgs)}
     */
    public static class ExistsPersonArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int persionId;
    }
    /**
     * argClass-48<br>
     * wrap arguments for method {@link #getDevice(GetDeviceArgs)}
     */
    public static class GetDeviceArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceId;
    }
    /**
     * argClass-49<br>
     * wrap arguments for method {@link #getDeviceByMac(GetDeviceByMacArgs)}
     */
    public static class GetDeviceByMacArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String mac;
    }
    /**
     * argClass-50<br>
     * wrap arguments for method {@link #getDeviceGroup(GetDeviceGroupArgs)}
     */
    public static class GetDeviceGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
    }
    /**
     * argClass-51<br>
     * wrap arguments for method {@link #getDeviceGroups(GetDeviceGroupsArgs)}
     */
    public static class GetDeviceGroupsArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="List")
        public List<Integer> groupIdList;
    }
    /**
     * argClass-52<br>
     * wrap arguments for method {@link #getDeviceGroupsBelongs(GetDeviceGroupsBelongsArgs)}
     */
    public static class GetDeviceGroupsBelongsArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceId;
    }
    /**
     * argClass-53<br>
     * wrap arguments for method {@link #getDeviceGroupsPermit(GetDeviceGroupsPermitArgs)}
     */
    public static class GetDeviceGroupsPermitArgs{
        @ApiModelProperty(value ="为{@code null}返回空表" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-54<br>
     * wrap arguments for method {@link #getDeviceGroupsPermittedBy(GetDeviceGroupsPermittedByArgs)}
     */
    public static class GetDeviceGroupsPermittedByArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-55<br>
     * wrap arguments for method {@link #getDeviceIdOfFeature(GetDeviceIdOfFeatureArgs)}
     */
    public static class GetDeviceIdOfFeatureArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String featureMd5;
    }
    /**
     * argClass-56<br>
     * wrap arguments for method {@link #getDevices(GetDevicesArgs)}
     */
    public static class GetDevicesArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="List")
        public List<Integer> idList;
    }
    /**
     * argClass-57<br>
     * wrap arguments for method {@link #getDevicesOfGroup(GetDevicesOfGroupArgs)}
     */
    public static class GetDevicesOfGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
    }
    /**
     * argClass-58<br>
     * wrap arguments for method {@link #getFace(GetFaceArgs)}
     */
    public static class GetFaceArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int faceId;
    }
    /**
     * argClass-59<br>
     * wrap arguments for method {@link #getFacesOfFeature(GetFacesOfFeatureArgs)}
     */
    public static class GetFacesOfFeatureArgs{
        @ApiModelProperty(value ="人脸特征记录id(MD校验码),为空或{@code null}或记录不存在返回空表" ,required=true ,dataType="String")
        public String featureMd5;
    }
    /**
     * argClass-60<br>
     * wrap arguments for method {@link #getFacesOfImage(GetFacesOfImageArgs)}
     */
    public static class GetFacesOfImageArgs{
        @ApiModelProperty(value ="图像数据的MD校验码,为空或{@code null}或记录不存在返回空表" ,required=true ,dataType="String")
        public String imageMd5;
    }
    /**
     * argClass-61<br>
     * wrap arguments for method {@link #getFeature(GetFeatureArgs)}
     */
    public static class GetFeatureArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String md5;
    }
    /**
     * argClass-62<br>
     * wrap arguments for method {@link #getFeatureBytes(GetFeatureBytesArgs)}
     */
    public static class GetFeatureBytesArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String md5;
    }
    /**
     * argClass-63<br>
     * wrap arguments for method {@link #getFeatures(GetFeaturesArgs)}
     */
    public static class GetFeaturesArgs{
        @ApiModelProperty(value ="md5列表" ,required=true ,dataType="List")
        public List<String> md5List;
    }
    /**
     * argClass-64<br>
     * wrap arguments for method {@link #getFeaturesByPersonIdAndSdkVersion(GetFeaturesByPersonIdAndSdkVersionArgs)}
     */
    public static class GetFeaturesByPersonIdAndSdkVersionArgs{
        @ApiModelProperty(value ="人员id(fl_person.id)" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="算法(SDK)版本号" ,required=true ,dataType="String")
        public String sdkVersion;
    }
    /**
     * argClass-65<br>
     * wrap arguments for method {@link #getFeaturesOfImage(GetFeaturesOfImageArgs)}
     */
    public static class GetFeaturesOfImageArgs{
        @ApiModelProperty(value ="图像数据的MD校验码,为空或{@code null}或记录不存在返回空表" ,required=true ,dataType="String")
        public String imageMd5;
    }
    /**
     * argClass-66<br>
     * wrap arguments for method {@link #getFeaturesOfPerson(GetFeaturesOfPersonArgs)}
     */
    public static class GetFeaturesOfPersonArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
    }
    /**
     * argClass-67<br>
     * wrap arguments for method {@link #getFeaturesPermittedOnDevice(GetFeaturesPermittedOnDeviceArgs)}
     */
    public static class GetFeaturesPermittedOnDeviceArgs{
        @ApiModelProperty(value ="设备ID" ,required=true ,dataType="int")
        public int deviceId;
        @ApiModelProperty(value ="是否忽略时间过滤器(fl_permit.schedule字段)的限制" ,required=true ,dataType="boolean")
        public boolean ignoreSchedule;
        @ApiModelProperty(value ="特征版本号" ,required=true ,dataType="String")
        public String sdkVersion;
        @ApiModelProperty(value ="要排除的特征记录id(MD5) ,可为{@code null}" ,required=true ,dataType="List")
        public List<String> excludeFeatureIds;
        @ApiModelProperty(value ="不为{@code null}时返回大于指定时间戳的所有fl_feature记录" ,required=true ,dataType="Long")
        public Long timestamp;
    }
    /**
     * argClass-68<br>
     * wrap arguments for method {@link #getGroupPermit(GetGroupPermitArgs)}
     */
    public static class GetGroupPermitArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceId;
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-69<br>
     * wrap arguments for method {@link #getGroupPermitOnDeviceGroup(GetGroupPermitOnDeviceGroupArgs)}
     */
    public static class GetGroupPermitOnDeviceGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-70<br>
     * wrap arguments for method {@link #getGroupPermits(GetGroupPermitsArgs)}
     */
    public static class GetGroupPermitsArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceId;
        @ApiModelProperty(value ="" ,required=true ,dataType="List")
        public List<Integer> personGroupIdList;
    }
    /**
     * argClass-71<br>
     * wrap arguments for method {@link #getImage(GetImageArgs)}
     */
    public static class GetImageArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String imageMD5;
    }
    /**
     * argClass-72<br>
     * wrap arguments for method {@link #getImageBytes(GetImageBytesArgs)}
     */
    public static class GetImageBytesArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String imageMD5;
    }
    /**
     * argClass-73<br>
     * wrap arguments for method {@link #getImagesAssociatedByFeature(GetImagesAssociatedByFeatureArgs)}
     */
    public static class GetImagesAssociatedByFeatureArgs{
        @ApiModelProperty(value ="人脸特征id(MD5)" ,required=true ,dataType="String")
        public String featureMd5;
    }
    /**
     * argClass-74<br>
     * wrap arguments for method {@link #getLogBeansByPersonId(GetLogBeansByPersonIdArgs)}
     */
    public static class GetLogBeansByPersonIdArgs{
        @ApiModelProperty(value ="fl_person.id" ,required=true ,dataType="int")
        public int personId;
    }
    /**
     * argClass-75<br>
     * wrap arguments for method {@link #getPerson(GetPersonArgs)}
     */
    public static class GetPersonArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
    }
    /**
     * argClass-76<br>
     * wrap arguments for method {@link #getPersonByMobilePhone(GetPersonByMobilePhoneArgs)}
     */
    public static class GetPersonByMobilePhoneArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String mobilePhone;
    }
    /**
     * argClass-77<br>
     * wrap arguments for method {@link #getPersonByPapersNum(GetPersonByPapersNumArgs)}
     */
    public static class GetPersonByPapersNumArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String papersNum;
    }
    /**
     * argClass-78<br>
     * wrap arguments for method {@link #getPersonGroup(GetPersonGroupArgs)}
     */
    public static class GetPersonGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-79<br>
     * wrap arguments for method {@link #getPersonGroups(GetPersonGroupsArgs)}
     */
    public static class GetPersonGroupsArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="List")
        public List<Integer> groupIdList;
    }
    /**
     * argClass-80<br>
     * wrap arguments for method {@link #getPersonGroupsBelongs(GetPersonGroupsBelongsArgs)}
     */
    public static class GetPersonGroupsBelongsArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
    }
    /**
     * argClass-81<br>
     * wrap arguments for method {@link #getPersonGroupsPermittedBy(GetPersonGroupsPermittedByArgs)}
     */
    public static class GetPersonGroupsPermittedByArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
    }
    /**
     * argClass-82<br>
     * wrap arguments for method {@link #getPersonPermit(GetPersonPermitArgs)}
     */
    public static class GetPersonPermitArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceId;
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
    }
    /**
     * argClass-83<br>
     * wrap arguments for method {@link #getPersonPermits(GetPersonPermitsArgs)}
     */
    public static class GetPersonPermitsArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceId;
        @ApiModelProperty(value ="" ,required=true ,dataType="List")
        public List<Integer> personIdList;
    }
    /**
     * argClass-84<br>
     * wrap arguments for method {@link #getPersons(GetPersonsArgs)}
     */
    public static class GetPersonsArgs{
        @ApiModelProperty(value ="人员id列表" ,required=true ,dataType="List")
        public List<Integer> idList;
    }
    /**
     * argClass-85<br>
     * wrap arguments for method {@link #getPersonsOfGroup(GetPersonsOfGroupArgs)}
     */
    public static class GetPersonsOfGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-86<br>
     * wrap arguments for method {@link #getPersonsPermittedOnDevice(GetPersonsPermittedOnDeviceArgs)}
     */
    public static class GetPersonsPermittedOnDeviceArgs{
        @ApiModelProperty(value ="设备ID" ,required=true ,dataType="int")
        public int deviceId;
        @ApiModelProperty(value ="是否忽略时间过滤器(fl_permit.schedule字段)的限制" ,required=true ,dataType="boolean")
        public boolean ignoreSchedule;
        @ApiModelProperty(value ="要排除的人员记录id,可为{@code null}" ,required=true ,dataType="List")
        public List<Integer> excludePersonIds;
        @ApiModelProperty(value ="不为{@code null}时返回大于指定时间戳的所有fl_person记录" ,required=true ,dataType="Long")
        public Long timestamp;
    }
    /**
     * argClass-87<br>
     * wrap arguments for method {@link #getProperties(GetPropertiesArgs)}
     */
    public static class GetPropertiesArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String prefix;
        @ApiModelProperty(value ="" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-88<br>
     * wrap arguments for method {@link #getProperty(GetPropertyArgs)}
     */
    public static class GetPropertyArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String key;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-89<br>
     * wrap arguments for method {@link #getRedisParameters(GetRedisParametersArgs)}
     */
    public static class GetRedisParametersArgs{
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-90<br>
     * wrap arguments for method {@link #getServiceConfig(GetServiceConfigArgs)}
     */
    public static class GetServiceConfigArgs{
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-91<br>
     * wrap arguments for method {@link #getSubDeviceGroup(GetSubDeviceGroupArgs)}
     */
    public static class GetSubDeviceGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
    }
    /**
     * argClass-92<br>
     * wrap arguments for method {@link #getSubPersonGroup(GetSubPersonGroupArgs)}
     */
    public static class GetSubPersonGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-93<br>
     * wrap arguments for method {@link #isDisable(IsDisableArgs)}
     */
    public static class IsDisableArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
    }
    /**
     * argClass-95<br>
     * wrap arguments for method {@link #isValidAckChannel(IsValidAckChannelArgs)}
     */
    public static class IsValidAckChannelArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="String")
        public String ackChannel;
    }
    /**
     * argClass-96<br>
     * wrap arguments for method {@link #isValidCmdSn(IsValidCmdSnArgs)}
     */
    public static class IsValidCmdSnArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int cmdSn;
    }
    /**
     * argClass-97<br>
     * wrap arguments for method {@link #isValidDeviceToken(IsValidDeviceTokenArgs)}
     */
    public static class IsValidDeviceTokenArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-98<br>
     * wrap arguments for method {@link #isValidPassword(IsValidPasswordArgs)}
     */
    public static class IsValidPasswordArgs{
        @ApiModelProperty(value ="用户id字符串,root用户id即为{@link CommonConstant#ROOT_NAME}" ,required=true ,dataType="String")
        public String userId;
        @ApiModelProperty(value ="用户密码" ,required=true ,dataType="String")
        public String password;
        @ApiModelProperty(value ="为{@code false}代表{@code password}为明文,{@code true}指定{@code password}为32位MD5密文(小写)" ,required=true ,dataType="boolean")
        public boolean isMd5;
    }
    /**
     * argClass-99<br>
     * wrap arguments for method {@link #isValidPersonToken(IsValidPersonTokenArgs)}
     */
    public static class IsValidPersonTokenArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-100<br>
     * wrap arguments for method {@link #isValidRootToken(IsValidRootTokenArgs)}
     */
    public static class IsValidRootTokenArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-101<br>
     * wrap arguments for method {@link #isValidToken(IsValidTokenArgs)}
     */
    public static class IsValidTokenArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-102<br>
     * wrap arguments for method {@link #isValidUserToken(IsValidUserTokenArgs)}
     */
    public static class IsValidUserTokenArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-103<br>
     * wrap arguments for method {@link #listOfParentForDeviceGroup(ListOfParentForDeviceGroupArgs)}
     */
    public static class ListOfParentForDeviceGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int deviceGroupId;
    }
    /**
     * argClass-104<br>
     * wrap arguments for method {@link #listOfParentForPersonGroup(ListOfParentForPersonGroupArgs)}
     */
    public static class ListOfParentForPersonGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personGroupId;
    }
    /**
     * argClass-106<br>
     * wrap arguments for method {@link #loadDeviceByWhere(LoadDeviceByWhereArgs)}
     */
    public static class LoadDeviceByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
        @ApiModelProperty(value ="记录起始行号 (first row = 1, last row = -1)" ,required=true ,dataType="int")
        public int startRow;
        @ApiModelProperty(value ="返回记录条数 为负值是返回{@code startRow}开始的所有行" ,required=true ,dataType="int")
        public int numRows;
    }
    /**
     * argClass-107<br>
     * wrap arguments for method {@link #loadDeviceGroupByWhere(LoadDeviceGroupByWhereArgs)}
     */
    public static class LoadDeviceGroupByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
        @ApiModelProperty(value ="返回记录的起始行(首行=1,尾行=-1)" ,required=true ,dataType="int")
        public int startRow;
        @ApiModelProperty(value ="返回记录条数(小于0时返回所有记录)" ,required=true ,dataType="int")
        public int numRows;
    }
    /**
     * argClass-108<br>
     * wrap arguments for method {@link #loadDeviceGroupIdByWhere(LoadDeviceGroupIdByWhereArgs)}
     */
    public static class LoadDeviceGroupIdByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-109<br>
     * wrap arguments for method {@link #loadDeviceIdByWhere(LoadDeviceIdByWhereArgs)}
     */
    public static class LoadDeviceIdByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-110<br>
     * wrap arguments for method {@link #loadDistinctIntegerColumn(LoadDistinctIntegerColumnArgs)}
     */
    public static class LoadDistinctIntegerColumnArgs{
        @ApiModelProperty(value ="数据库表名" ,required=true ,dataType="String")
        public String table;
        @ApiModelProperty(value ="有效的table表字段名或{@link LogLightBean} 字段名" ,required=true ,dataType="String")
        public String column;
        @ApiModelProperty(value ="'where'起始的SQL 查询条件语句,可为{@code null}" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-111<br>
     * wrap arguments for method {@link #loadDistinctStringColumn(LoadDistinctStringColumnArgs)}
     */
    public static class LoadDistinctStringColumnArgs{
        @ApiModelProperty(value ="数据库表名" ,required=true ,dataType="String")
        public String table;
        @ApiModelProperty(value ="有效的table表字段名或{@link LogLightBean} 字段名" ,required=true ,dataType="String")
        public String column;
        @ApiModelProperty(value ="'where'起始的SQL 查询条件语句,可为{@code null}" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-112<br>
     * wrap arguments for method {@link #loadFeatureMd5ByUpdate(LoadFeatureMd5ByUpdateTimeStrArgs)}
     */
    public static class LoadFeatureMd5ByUpdateTimeStrArgs{
        @ApiModelProperty(value ="时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串" ,required=true ,dataType="String")
        public String timestamp;
    }
    /**
     * argClass-113<br>
     * wrap arguments for method {@link #loadFeatureMd5ByUpdate(LoadFeatureMd5ByUpdateArgs)}
     */
    public static class LoadFeatureMd5ByUpdateArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="long")
        public long timestamp;
    }
    /**
     * argClass-114<br>
     * wrap arguments for method {@link #loadLogByWhere(LoadLogByWhereArgs)}
     */
    public static class LoadLogByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}时返回所有记录" ,required=true ,dataType="String")
        public String where;
        @ApiModelProperty(value ="记录起始行号 (first row = 1, last row = -1)" ,required=true ,dataType="int")
        public int startRow;
        @ApiModelProperty(value ="返回记录条数 为负值是返回{@code startRow}开始的所有行" ,required=true ,dataType="int")
        public int numRows;
    }
    /**
     * argClass-115<br>
     * wrap arguments for method {@link #loadLogLightByVerifyTime(LoadLogLightByVerifyTimeTimestrArgs)}
     */
    public static class LoadLogLightByVerifyTimeTimestrArgs{
        @ApiModelProperty(value ="时间戳" ,required=true ,dataType="String")
        public String timestamp;
        @ApiModelProperty(value ="记录起始行号 (first row = 1, last row = -1)" ,required=true ,dataType="int")
        public int startRow;
        @ApiModelProperty(value ="返回记录条数 为负值是返回{@code startRow}开始的所有行" ,required=true ,dataType="int")
        public int numRows;
    }
    /**
     * argClass-116<br>
     * wrap arguments for method {@link #loadLogLightByVerifyTime(LoadLogLightByVerifyTimeArgs)}
     */
    public static class LoadLogLightByVerifyTimeArgs{
        @ApiModelProperty(value ="时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串" ,required=true ,dataType="long")
        public long timestamp;
        @ApiModelProperty(value ="记录起始行号 (first row = 1, last row = -1)" ,required=true ,dataType="int")
        public int startRow;
        @ApiModelProperty(value ="返回记录条数 为负值是返回{@code startRow}开始的所有行" ,required=true ,dataType="int")
        public int numRows;
    }
    /**
     * argClass-117<br>
     * wrap arguments for method {@link #loadLogLightByWhere(LoadLogLightByWhereArgs)}
     */
    public static class LoadLogLightByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句" ,required=true ,dataType="String")
        public String where;
        @ApiModelProperty(value ="记录起始行号 (first row = 1, last row = -1)" ,required=true ,dataType="int")
        public int startRow;
        @ApiModelProperty(value ="返回记录条数 为负值是返回{@code startRow}开始的所有行" ,required=true ,dataType="int")
        public int numRows;
    }
    /**
     * argClass-118<br>
     * wrap arguments for method {@link #loadPermitByUpdate(LoadPermitByUpdateTimestrArgs)}
     */
    public static class LoadPermitByUpdateTimestrArgs{
        @ApiModelProperty(value ="时间戳,,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串" ,required=true ,dataType="String")
        public String timestamp;
    }
    /**
     * argClass-119<br>
     * wrap arguments for method {@link #loadPermitByUpdate(LoadPermitByUpdateArgs)}
     */
    public static class LoadPermitByUpdateArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="long")
        public long timestamp;
    }
    /**
     * argClass-120<br>
     * wrap arguments for method {@link #loadPersonByWhere(LoadPersonByWhereArgs)}
     */
    public static class LoadPersonByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录" ,required=true ,dataType="String")
        public String where;
        @ApiModelProperty(value ="记录起始行号 (first row = 1, last row = -1)" ,required=true ,dataType="int")
        public int startRow;
        @ApiModelProperty(value ="返回记录条数 为负值是返回{@code startRow}开始的所有行" ,required=true ,dataType="int")
        public int numRows;
    }
    /**
     * argClass-121<br>
     * wrap arguments for method {@link #loadPersonGroupByWhere(LoadPersonGroupByWhereArgs)}
     */
    public static class LoadPersonGroupByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录" ,required=true ,dataType="String")
        public String where;
        @ApiModelProperty(value ="返回记录的起始行(首行=1,尾行=-1)" ,required=true ,dataType="int")
        public int startRow;
        @ApiModelProperty(value ="返回记录条数(小于0时返回所有记录)" ,required=true ,dataType="int")
        public int numRows;
    }
    /**
     * argClass-122<br>
     * wrap arguments for method {@link #loadPersonGroupIdByWhere(LoadPersonGroupIdByWhereArgs)}
     */
    public static class LoadPersonGroupIdByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-123<br>
     * wrap arguments for method {@link #loadPersonIdByUpdateTime(LoadPersonIdByUpdateTimeTimeStrArgs)}
     */
    public static class LoadPersonIdByUpdateTimeTimeStrArgs{
        @ApiModelProperty(value ="时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串" ,required=true ,dataType="String")
        public String timestamp;
    }
    /**
     * argClass-124<br>
     * wrap arguments for method {@link #loadPersonIdByUpdateTime(LoadPersonIdByUpdateTimeArgs)}
     */
    public static class LoadPersonIdByUpdateTimeArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="long")
        public long timestamp;
    }
    /**
     * argClass-125<br>
     * wrap arguments for method {@link #loadPersonIdByWhere(LoadPersonIdByWhereArgs)}
     */
    public static class LoadPersonIdByWhereArgs{
        @ApiModelProperty(value ="'WHERE'开头的SQL条件语句,为{@code null}或空时加载所有记录" ,required=true ,dataType="String")
        public String where;
    }
    /**
     * argClass-126<br>
     * wrap arguments for method {@link #loadUpdatedPersons(LoadUpdatedPersonsTimestrArgs)}
     */
    public static class LoadUpdatedPersonsTimestrArgs{
        @ApiModelProperty(value ="时间戳,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串" ,required=true ,dataType="String")
        public String timestamp;
    }
    /**
     * argClass-127<br>
     * wrap arguments for method {@link #loadUpdatedPersons(LoadUpdatedPersonsArgs)}
     */
    public static class LoadUpdatedPersonsArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="long")
        public long timestamp;
    }
    /**
     * argClass-128<br>
     * wrap arguments for method {@link #offline(OfflineArgs)}
     */
    public static class OfflineArgs{
        @ApiModelProperty(value ="当前持有的令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-129<br>
     * wrap arguments for method {@link #online(OnlineArgs)}
     */
    public static class OnlineArgs{
        @ApiModelProperty(value ="上线设备信息，必须提供{@code id, mac, serialNo}字段" ,required=true ,dataType="DeviceBean")
        public DeviceBean device;
    }
    /**
     * argClass-130<br>
     * wrap arguments for method {@link #registerDevice(RegisterDeviceArgs)}
     */
    public static class RegisterDeviceArgs{
        @ApiModelProperty(value ="设备记录,_isNew字段必须为{@code true},{@code id}字段不要指定,数据库会自动分配,保存在返回值中" ,required=true ,dataType="DeviceBean")
        public DeviceBean newDevice;
    }
    /**
     * argClass-131<br>
     * wrap arguments for method {@link #releasePersonToken(ReleasePersonTokenArgs)}
     */
    public static class ReleasePersonTokenArgs{
        @ApiModelProperty(value ="当前持有的令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-132<br>
     * wrap arguments for method {@link #releaseRootToken(ReleaseRootTokenArgs)}
     */
    public static class ReleaseRootTokenArgs{
        @ApiModelProperty(value ="当前持有的令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-133<br>
     * wrap arguments for method {@link #releaseUserToken(ReleaseUserTokenArgs)}
     */
    public static class ReleaseUserTokenArgs{
        @ApiModelProperty(value ="要释放的令牌,如果令牌类型非{@link net.gdface.facelog.Token.TokenType#PERSON}或{@link net.gdface.facelog.Token.TokenType#ROOT}则抛出{@link ServiceSecurityException}异常" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-134<br>
     * wrap arguments for method {@link #replaceFeature(ReplaceFeatureArgs)}
     */
    public static class ReplaceFeatureArgs{
        @ApiModelProperty(value ="人员记录id,{@code fl_person.id}" ,required=true ,dataType="Integer")
        public Integer personId;
        @ApiModelProperty(value ="人脸特征数据记录id (已经保存在数据库中)" ,required=true ,dataType="String")
        public String featureMd5;
        @ApiModelProperty(value ="是否删除原特征数据记录间接关联的原始图像记录(fl_image)" ,required=true ,dataType="boolean")
        public boolean deleteOldFeatureImage;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-135<br>
     * wrap arguments for method {@link #rootGroupOfDevice(RootGroupOfDeviceArgs)}
     */
    public static class RootGroupOfDeviceArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="Integer")
        public Integer deviceId;
    }
    /**
     * argClass-136<br>
     * wrap arguments for method {@link #rootGroupOfPerson(RootGroupOfPersonArgs)}
     */
    public static class RootGroupOfPersonArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="Integer")
        public Integer personId;
    }
    /**
     * argClass-137<br>
     * wrap arguments for method {@link #runCmd(RunCmdArgs)}
     */
    public static class RunCmdArgs{
        @ApiModelProperty(value ="命令目标设备/设备组id" ,required=true ,dataType="List")
        public List<Integer> target;
        @ApiModelProperty(value ="target中的元素是否为设备组id" ,required=true ,dataType="boolean")
        public boolean group;
        @ApiModelProperty(value ="设备命令的dtalk路径" ,required=true ,dataType="String")
        public String cmdpath;
        @ApiModelProperty(value ="设备命令参数(JSON)" ,required=true ,dataType="String")
        public String jsonArgs;
        @ApiModelProperty(value ="设备命令响应频道,不需要接收命令响应时设置为{@code null}" ,required=true ,dataType="String")
        public String ackChannel;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-138<br>
     * wrap arguments for method {@link #runTask(RunTaskArgs)}
     */
    public static class RunTaskArgs{
        @ApiModelProperty(value ="任务队列名称" ,required=true ,dataType="String")
        public String taskQueue;
        @ApiModelProperty(value ="设备命令的dtalk路径" ,required=true ,dataType="String")
        public String cmdpath;
        @ApiModelProperty(value ="设备命令参数(JSON)" ,required=true ,dataType="String")
        public String jsonArgs;
        @ApiModelProperty(value ="设备命令响应频道,不需要接收命令响应时设置为{@code null}" ,required=true ,dataType="String")
        public String ackChannel;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-139<br>
     * wrap arguments for method {@link #saveDevice(SaveDeviceArgs)}
     */
    public static class SaveDeviceArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="DeviceBean")
        public DeviceBean deviceBean;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-140<br>
     * wrap arguments for method {@link #saveDeviceGroup(SaveDeviceGroupArgs)}
     */
    public static class SaveDeviceGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="DeviceGroupBean")
        public DeviceGroupBean deviceGroupBean;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-141<br>
     * wrap arguments for method {@link #savePermit(SavePermitWithScheduleArgs)}
     */
    public static class SavePermitWithScheduleArgs{
        @ApiModelProperty(value ="设备组id" ,required=true ,dataType="int")
        public int deviceGroupId;
        @ApiModelProperty(value ="人员组id" ,required=true ,dataType="int")
        public int personGroupId;
        @ApiModelProperty(value ="通行时间安排表,为{@code null}则不限制通行时间" ,required=true ,dataType="String")
        public String schedule;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-142<br>
     * wrap arguments for method {@link #savePermit(SavePermitArgs)}
     */
    public static class SavePermitArgs{
        @ApiModelProperty(value ="要修改或增加的fl_permit记录" ,required=true ,dataType="PermitBean")
        public PermitBean permitBean;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-143<br>
     * wrap arguments for method {@link #savePerson(SavePersonFullArgs)}
     */
    public static class SavePersonFullArgs{
        @ApiModelProperty(value ="人员信息对象,{@code fl_person}表记录" ,required=true ,dataType="PersonBean")
        public PersonBean personBean;
        @ApiModelProperty(value ="标准照图像,可以为{@code null}" ,required=true ,dataType="byte[]")
        public byte[] idPhoto;
        @ApiModelProperty(value ="人脸特征数据,可以为{@code null}" ,required=true ,dataType="byte[]")
        public byte[] feature;
        @ApiModelProperty(value ="特征(SDk)版本号" ,required=true ,dataType="String")
        public String featureVersion;
        @ApiModelProperty(value ="提取特征源图像,为null 时,默认使用idPhoto" ,required=true ,dataType="byte[]")
        public byte[] featureImage;
        @ApiModelProperty(value ="人脸位置对象,为null 时,不保存人脸数据,忽略featureImage" ,required=true ,dataType="FaceBean")
        public FaceBean faceBean;
        @ApiModelProperty(value ="(设备)访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-144<br>
     * wrap arguments for method {@link #savePerson(SavePersonWithPhotoAndFeatureMultiImageArgs)}
     */
    public static class SavePersonWithPhotoAndFeatureMultiImageArgs{
        @ApiModelProperty(value ="{@code fl_person}表记录" ,required=true ,dataType="PersonBean")
        public PersonBean personBean;
        @ApiModelProperty(value ="标准照图像,可为null" ,required=true ,dataType="byte[]")
        public byte[] idPhoto;
        @ApiModelProperty(value ="用于验证的人脸特征数据" ,required=true ,dataType="byte[]")
        public byte[] feature;
        @ApiModelProperty(value ="特征(SDk)版本号" ,required=true ,dataType="String")
        public String featureVersion;
        @ApiModelProperty(value ="检测到人脸的照片列表" ,required=true ,dataType="List")
        public List<byte[]> photos;
        @ApiModelProperty(value ="检测人脸信息列表" ,required=true ,dataType="List")
        public List<FaceBean> faces;
        @ApiModelProperty(value ="(设备)访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-145<br>
     * wrap arguments for method {@link #savePerson(SavePersonWithPhotoAndFeatureMultiFacesArgs)}
     */
    public static class SavePersonWithPhotoAndFeatureMultiFacesArgs{
        @ApiModelProperty(value ="{@code fl_person}表记录" ,required=true ,dataType="PersonBean")
        public PersonBean personBean;
        @ApiModelProperty(value ="标准照图像,可为null" ,required=true ,dataType="byte[]")
        public byte[] idPhoto;
        @ApiModelProperty(value ="用于验证的人脸特征数据,不可重复, 参见 {@link #addFeature(byte[], String, Integer, List, String, Token)}" ,required=true ,dataType="byte[]")
        public byte[] feature;
        @ApiModelProperty(value ="特征(SDk)版本号" ,required=true ,dataType="String")
        public String featureVersion;
        @ApiModelProperty(value ="可为{@code null},参见 {@link #addFeature(byte[], String, Integer, List, String, Token)}" ,required=true ,dataType="List")
        public List<FaceBean> faceBeans;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-146<br>
     * wrap arguments for method {@link #savePerson(SavePersonWithPhotoArgs)}
     */
    public static class SavePersonWithPhotoArgs{
        @ApiModelProperty(value ="{@code fl_person}表记录" ,required=true ,dataType="PersonBean")
        public PersonBean personBean;
        @ApiModelProperty(value ="标准照图像对象,可为null" ,required=true ,dataType="byte[]")
        public byte[] idPhoto;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-147<br>
     * wrap arguments for method {@link #savePerson(SavePersonWithPhotoAndFeatureArgs)}
     */
    public static class SavePersonWithPhotoAndFeatureArgs{
        @ApiModelProperty(value ="{@code fl_person}表记录" ,required=true ,dataType="PersonBean")
        public PersonBean personBean;
        @ApiModelProperty(value ="标准照图像,可为null" ,required=true ,dataType="byte[]")
        public byte[] idPhoto;
        @ApiModelProperty(value ="用于验证的人脸特征数据对象,可为null" ,required=true ,dataType="FeatureBean")
        public FeatureBean featureBean;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-148<br>
     * wrap arguments for method {@link #savePerson(SavePersonWithPhotoAndFeatureSavedArgs)}
     */
    public static class SavePersonWithPhotoAndFeatureSavedArgs{
        @ApiModelProperty(value ="{@code fl_person}表记录" ,required=true ,dataType="PersonBean")
        public PersonBean personBean;
        @ApiModelProperty(value ="标准照图像对象,可为null" ,required=true ,dataType="String")
        public String idPhotoMd5;
        @ApiModelProperty(value ="用于验证的人脸特征数据对象,可为null" ,required=true ,dataType="String")
        public String featureMd5;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-149<br>
     * wrap arguments for method {@link #savePerson(SavePersonArgs)}
     */
    public static class SavePersonArgs{
        @ApiModelProperty(value ="{@code fl_person}表记录" ,required=true ,dataType="PersonBean")
        public PersonBean personBean;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-150<br>
     * wrap arguments for method {@link #savePersonGroup(SavePersonGroupArgs)}
     */
    public static class SavePersonGroupArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="PersonGroupBean")
        public PersonGroupBean personGroupBean;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-151<br>
     * wrap arguments for method {@link #savePersons(SavePersonsWithPhotoArgs)}
     */
    public static class SavePersonsWithPhotoArgs{
        @ApiModelProperty(value ="照片列表" ,required=true ,dataType="List")
        public List<byte[]> photos;
        @ApiModelProperty(value ="人员记录对象列表" ,required=true ,dataType="List")
        public List<PersonBean> persons;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-152<br>
     * wrap arguments for method {@link #savePersons(SavePersonsArgs)}
     */
    public static class SavePersonsArgs{
        @ApiModelProperty(value ="{@code fl_person}表记录" ,required=true ,dataType="List")
        public List<PersonBean> persons;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-153<br>
     * wrap arguments for method {@link #saveServiceConfig(SaveServiceConfigArgs)}
     */
    public static class SaveServiceConfigArgs{
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-154<br>
     * wrap arguments for method {@link #sdkTaskQueueOf(SdkTaskQueueOfArgs)}
     */
    public static class SdkTaskQueueOfArgs{
        @ApiModelProperty(value ="任务名,可选值:{@link CommonConstant#TASK_FACEAPI_BASE},{@link CommonConstant#TASK_REGISTER_BASE}" ,required=true ,dataType="String")
        public String task;
        @ApiModelProperty(value ="sdk版本号" ,required=true ,dataType="String")
        public String sdkVersion;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-155<br>
     * wrap arguments for method {@link #setPersonExpiryDate(SetPersonExpiryDateTimeStrArgs)}
     */
    public static class SetPersonExpiryDateTimeStrArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="失效日期,{@code yyyy-MM-dd}或{@code yyyy-MM-dd HH:mm:ss}或{@code yyyy-MM-dd'T'HH:mm:ss.SSS'Z'}(ISO8601)格式日期字符串" ,required=true ,dataType="String")
        public String expiryDate;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-156<br>
     * wrap arguments for method {@link #setPersonExpiryDate(SetPersonExpiryDateArgs)}
     */
    public static class SetPersonExpiryDateArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="int")
        public int personId;
        @ApiModelProperty(value ="失效日期" ,required=true ,dataType="long")
        public long expiryDate;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-157<br>
     * wrap arguments for method {@link #setPersonExpiryDate(SetPersonExpiryDateListArgs)}
     */
    public static class SetPersonExpiryDateListArgs{
        @ApiModelProperty(value ="人员id列表" ,required=true ,dataType="List")
        public List<Integer> personIdList;
        @ApiModelProperty(value ="失效日期" ,required=true ,dataType="long")
        public long expiryDate;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-158<br>
     * wrap arguments for method {@link #setProperties(SetPropertiesArgs)}
     */
    public static class SetPropertiesArgs{
        @ApiModelProperty(value ="参数名-参数值对" ,required=true ,dataType="Map")
        public Map<String, String> config;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-159<br>
     * wrap arguments for method {@link #setProperty(SetPropertyArgs)}
     */
    public static class SetPropertyArgs{
        @ApiModelProperty(value ="参数名" ,required=true ,dataType="String")
        public String key;
        @ApiModelProperty(value ="参数值" ,required=true ,dataType="String")
        public String value;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-160<br>
     * wrap arguments for method {@link #taskQueueOf(TaskQueueOfArgs)}
     */
    public static class TaskQueueOfArgs{
        @ApiModelProperty(value ="任务名" ,required=true ,dataType="String")
        public String task;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-161<br>
     * wrap arguments for method {@link #unbindBorder(UnbindBorderArgs)}
     */
    public static class UnbindBorderArgs{
        @ApiModelProperty(value ="人员组id" ,required=true ,dataType="Integer")
        public Integer personGroupId;
        @ApiModelProperty(value ="设备组id" ,required=true ,dataType="Integer")
        public Integer deviceGroupId;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-162<br>
     * wrap arguments for method {@link #unregisterDevice(UnregisterDeviceArgs)}
     */
    public static class UnregisterDeviceArgs{
        @ApiModelProperty(value ="设备验证令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * argClass-163<br>
     * wrap arguments for method {@link #updateDevice(UpdateDeviceArgs)}
     */
    public static class UpdateDeviceArgs{
        @ApiModelProperty(value ="" ,required=true ,dataType="DeviceBean")
        public DeviceBean deviceBean;
        @ApiModelProperty(value ="访问令牌" ,required=true ,dataType="Token")
        public Token token;
    }
    /**
     * 获取{@link IFaceLog}实例的接口，
     * 用于应用层SPI方式提供{@link IFaceLog}实例
     * @author guyadong
     *
     */
    public static interface InstanceSupplier{
        IFaceLog instanceOfIFaceLog();
    }
    /**
     * web响应数据接口
     * @author guyadong
     *
     */
    public static interface Response{
        /**
         * 接口方法调用成功
         * @param result 调用返回值
         */
        void onComplete(Object result);
        /**
         * 接口方法调用成功，调用方法返回类型为void
         */
        void onComplete();        
        /**
         * 接口方法调用抛出异常
         * @param e 异常
         */
        void onError(Exception e);
    }
    /**
     * 获取{@link Response}接口实例的工厂类接口
     * @author guyadong
     *
     */
    public static interface ResponseFactory{
        /**
         * @return 返回新的{@link Response}接口实例
         */
        Response newIFaceLogResponse();
    }
    /**
     * {@link Response}默认实现
     * @author guyadong
     *
     */
    public static class DefaultResponse implements Response{
        private static boolean outStrackTrace = false;
        private boolean success;
        /** RPC调用的返回值 */
        private Object result;
        /** 异常信息 */
        private String errorMessage;
        /** 异常堆栈信息 */
        private String stackTrace;
        @Override
        public void onComplete(Object result) {
            this.success = true;
            this.result = result;
        }
        @Override
        public void onComplete() {
            onComplete(null);
        }
        @Override
        public void onError(Exception e) {
            success = false;
            errorMessage = e.getMessage();
            if(errorMessage == null){
                errorMessage = e.getClass().getSimpleName();
            }
            if(outStrackTrace){
                StringWriter writer = new StringWriter();
                e.printStackTrace(new PrintWriter(writer));
                stackTrace = writer.toString();
            }
        }

        public boolean isSuccess() {
            return success;
        }

        public void setSuccess(boolean success) {
            this.success = success;
        }

        public Object getResult() {
            return result;
        }

        public void setResult(Object result) {
            this.result = result;
        }

        public String getErrorMessage() {
            return errorMessage;
        }

        public void setErrorMessage(String errorMessage) {
            this.errorMessage = errorMessage;
        }

        public String getStackTrace() {
            return stackTrace;
        }

        public void setStackTrace(String stackTrace) {
            this.stackTrace = stackTrace;
        }

        public String toString() {
            StringBuilder builder = new StringBuilder();
            builder.append("DefaultResponse [success=");
            builder.append(success);
            builder.append(", ");
            if (result != null) {
                builder.append("result=");
                builder.append(result);
                builder.append(", ");
            }
            if (errorMessage != null) {
                builder.append("errorMessage=");
                builder.append(errorMessage);
                builder.append(", ");
            }
            if (stackTrace != null) {
                builder.append("stackTrace=");
                builder.append(stackTrace);
            }
            builder.append("]");
            return builder.toString();
        }
        /**
         * 开启输出堆栈信息(默认为不开启)<br>
         * 开发时为了调试需要获取详细的异常堆栈信息可以开启
         * @param outStrackTrace 要设置的 outStrackTrace
         */
        public static void enableStrackTrace() {
            outStrackTrace = true;
        }
    }
    /**
     * {@link ResponseFactory}接口默认实现
     * @author guyadong
     *
     */
    public static class DefaultResponseFactory implements ResponseFactory{

        @Override
        public Response newIFaceLogResponse() {
            return new DefaultResponse();
        }
    }
    public static String DESCRIPTION = "FaceLog 服务接口<br>\n"
+" <ul>\n"
+" <li>所有标明为图像数据的参数,是指具有特定图像格式的图像数据(如jpg,png...),而非无格式的原始点阵位图</li>\n"
+" <li>所有{@link RuntimeException}异常会被封装在{@code ServiceRuntimeException}抛出,\n"
+" client端可以通过{@code ServiceRuntimeException#getType()}获取异常类型.<br>\n"
+" 异常类型定义参见{@link CommonConstant.ExceptionType},<br>\n"
+" 例如: 在执行涉及数据库操作的异常{@link RuntimeDaoException}，\n"
+" 被封装到{@code ServiceRuntimeException}抛出时type为{@link ExceptionType#DAO}</li>\n"
+" <li>所有数据库对象(Java Bean,比如 {@link PersonBean}),在执行保存操作(save)时,\n"
+" 如果为新增记录({@link PersonBean#isNew()}为true),则执行insert操作,否则执行update操作,\n"
+" 如果数据库已经存在指定的记录而{@code isNew()}为{@code true},则那么执行insert操作数据库就会抛出异常，\n"
+" 所以请在执行save时特别注意{@code isNew()}状态</li>\n"
+" <li>对于以add为前缀的添加记录方法,在添加记录前会检查数据库中是否有(主键)相同记录,\n"
+" 如果有则会抛出异常{@link DuplicateRecordException}</li>\n"
+" <li>所有带{@link Token}参数的方法都需要提供访问令牌,访问令牌分为人员令牌,设备令牌和root令牌(仅用于root帐户),\n"
+" 注释中标注为{@code PERSON_ONLY}的方法只接受人员令牌,\n"
+" 注释中标注为{@code DEVICE_ONLY}的方法只接受设备令牌,\n"
+" 注释中标注为{@code ROOT_ONLY}的方法只接受root令牌,\n"
+" 关于令牌申请和释放参见{@link #applyPersonToken(int, String, boolean)},{@link #releasePersonToken(Token)},{@link #online(DeviceBean)},{@link #offline(Token)}</li>\n"
+" </ul>";
}