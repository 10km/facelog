package net.gdface.facelog;
import java.util.List;
import java.util.Map;
import net.gdface.facelog.db.DeviceBean;
import net.gdface.facelog.db.DeviceGroupBean;
import net.gdface.facelog.db.FaceBean;
import net.gdface.facelog.db.FeatureBean;
import net.gdface.facelog.db.ImageBean;
import net.gdface.facelog.db.LogBean;
import net.gdface.facelog.db.PersonBean;
import net.gdface.facelog.db.PersonGroupBean;
import java.util.ServiceLoader;
import java.util.Iterator;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.*;
/**
 * decorator pattern 装饰者模式代理{@link IFaceLog}接口<br>
 * 将{@link IFaceLog}实例封装为一个spring controler<br>
 * 计算机生成代码(generated by automated tools DecoratorGenerator @author guyadong)<br>
 * @author guyadong
 *
 */
@RestController
@Api(value = "IFaceLog")
public class IFaceLogSpringDecorator {
    private static final Logger logger = LoggerFactory.getLogger(IFaceLogSpringDecorator.class);
    private final IFaceLog delegate = loadDelegate();
    private final ResponseFactory respFactory = loadRespFactory();
    /**
     * SPI(Service Provider Interface)机制加载 {@link InstanceSupplier}实例,没有找到则抛出异常,
     * 返回{@link InstanceSupplier}提供的{@link IFaceLog}实例
     * @return 返回{@link IFaceLog}实例
     * @throws IllegalStateException 没有找到{@link InstanceSupplier}实例
     * @throws NullPointerException {@link InstanceSupplier}实例返回的{@link IFaceLog}为{@code null}
     */
    private static final IFaceLog loadDelegate() {
            /* SPI(Service Provider Interface)机制加载 {@link InstanceSupplier}实例,没有找到则抛出异常 */
            ServiceLoader<InstanceSupplier> providers = ServiceLoader.load(InstanceSupplier.class);
            Iterator<InstanceSupplier> itor = providers.iterator();
            if(!itor.hasNext()){
                throw new IllegalStateException("NOT FOUND InstanceSupplier instance");
            }
            IFaceLog instance = itor.next().instanceOfIFaceLog();
            if(instance == null){
                throw new NullPointerException("");
            }
            return instance;
    }   
    /**
     * SPI(Service Provider Interface)加载{@link ResponseFactory}接口实例,
     * 没有找到则返回{@link DefaultResponseFactory}实例
     * @return 返回{@link ResponseFactory}实例
     */
    private static final ResponseFactory loadRespFactory() {
            ServiceLoader<ResponseFactory> providers = ServiceLoader.load(ResponseFactory.class);
            Iterator<ResponseFactory> itor = providers.iterator();
            return itor.hasNext() ? itor.next() : new DefaultResponseFactory();
    }  
    public IFaceLogSpringDecorator() {
    }

    /**
     * 返回被装饰的{@link IFaceLog}实例
     * @return
     */
    private IFaceLog delegate() {
        return delegate;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addFeature(byte[],java.lang.Integer,java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addFeature", method = RequestMethod.POST)
    public Response addFeature(@RequestParam("feature") byte[] feature,
        @RequestParam("personId") Integer personId,
        @RequestParam("faecBeans") List<FaceBean> faecBeans,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().addFeature(feature,personId,faecBeans,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addFeature(byte[],java.lang.Integer,java.util.Map,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addFeatureMulti", method = RequestMethod.POST)
    public Response addFeature(@RequestParam("feature") byte[] feature,
        @RequestParam("personId") Integer personId,
        @RequestParam("faceInfo") Map<java.nio.ByteBuffer, FaceBean> faceInfo,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().addFeature(feature,personId,faceInfo,deviceId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addImage(byte[],java.lang.Integer,net.gdface.facelog.db.FaceBean,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addImage", method = RequestMethod.POST)
    public Response addImage(@RequestParam("imageData") byte[] imageData,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("faceBean") FaceBean faceBean,
        @RequestParam("personId") Integer personId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().addImage(imageData,deviceId,faceBean,personId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addLog(net.gdface.facelog.db.LogBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addLog", method = RequestMethod.POST)
    public Response addLog(@RequestParam("bean") LogBean bean,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().addLog(bean,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addLogs(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addLogs", method = RequestMethod.POST)
    public Response addLogs(@RequestParam("beans") List<LogBean> beans,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().addLogs(beans,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addPermit(int,int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addPermitById", method = RequestMethod.POST)
    public Response addPermit(@RequestParam("deviceGroupId") int deviceGroupId,
        @RequestParam("personGroupId") int personGroupId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().addPermit(deviceGroupId,personGroupId,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#addPermit(net.gdface.facelog.db.DeviceGroupBean,net.gdface.facelog.db.PersonGroupBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/addPermit", method = RequestMethod.POST)
    public Response addPermit(@RequestParam("deviceGroup") DeviceGroupBean deviceGroup,
        @RequestParam("personGroup") PersonGroupBean personGroup,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().addPermit(deviceGroup,personGroup,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyAckChannel(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyAckChannel", method = RequestMethod.POST)
    public Response applyAckChannel(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().applyAckChannel(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyAckChannel(net.gdface.facelog.Token,long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyAckChannelWithDuration", method = RequestMethod.POST)
    public Response applyAckChannel(@RequestParam("token") Token token,
        @RequestParam("duration") long duration) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().applyAckChannel(token,duration));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyCmdSn(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyCmdSn", method = RequestMethod.POST)
    public Response applyCmdSn(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().applyCmdSn(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyPersonToken(int,java.lang.String,boolean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyPersonToken", method = RequestMethod.POST)
    public Response applyPersonToken(@RequestParam("personId") int personId,
        @RequestParam("password") String password,
        @RequestParam("isMd5") boolean isMd5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().applyPersonToken(personId,password,isMd5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyRootToken(java.lang.String,boolean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyRootToken", method = RequestMethod.POST)
    public Response applyRootToken(@RequestParam("password") String password,
        @RequestParam("isMd5") boolean isMd5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().applyRootToken(password,isMd5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#applyUserToken(int,java.lang.String,boolean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/applyUserToken", method = RequestMethod.POST)
    public Response applyUserToken(@RequestParam("userid") int userid,
        @RequestParam("password") String password,
        @RequestParam("isMd5") boolean isMd5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().applyUserToken(userid,password,isMd5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#bindBorder(java.lang.Integer,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/bindBorder", method = RequestMethod.POST)
    public Response bindBorder(@RequestParam("personGroupId") Integer personGroupId,
        @RequestParam("deviceGroupId") Integer deviceGroupId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().bindBorder(personGroupId,deviceGroupId,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#childListForDeviceGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/childListForDeviceGroup", method = RequestMethod.POST)
    public Response childListForDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().childListForDeviceGroup(deviceGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#childListForPersonGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/childListForPersonGroup", method = RequestMethod.POST)
    public Response childListForPersonGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().childListForPersonGroup(personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countDeviceByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countDeviceByWhere", method = RequestMethod.POST)
    public Response countDeviceByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().countDeviceByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countDeviceGroupByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countDeviceGroupByWhere", method = RequestMethod.POST)
    public Response countDeviceGroupByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().countDeviceGroupByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countLogByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogByWhere", method = RequestMethod.POST)
    public Response countLogByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().countLogByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countLogLightByVerifyTime(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogLightByVerifyTime", method = RequestMethod.POST)
    public Response countLogLightByVerifyTime(@RequestParam("timestamp") long timestamp) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().countLogLightByVerifyTime(timestamp));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countLogLightByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countLogLightByWhere", method = RequestMethod.POST)
    public Response countLogLightByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().countLogLightByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countPersonByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countPersonByWhere", method = RequestMethod.POST)
    public Response countPersonByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().countPersonByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#countPersonGroupByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/countPersonGroupByWhere", method = RequestMethod.POST)
    public Response countPersonGroupByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().countPersonGroupByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteAllFeaturesByPersonId(int,boolean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteAllFeaturesByPersonId", method = RequestMethod.POST)
    public Response deleteAllFeaturesByPersonId(@RequestParam("personId") int personId,
        @RequestParam("deleteImage") boolean deleteImage,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deleteAllFeaturesByPersonId(personId,deleteImage,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteDeviceGroup(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteDeviceGroup", method = RequestMethod.POST)
    public Response deleteDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deleteDeviceGroup(deviceGroupId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteFeature(java.lang.String,boolean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteFeature", method = RequestMethod.POST)
    public Response deleteFeature(@RequestParam("featureMd5") String featureMd5,
        @RequestParam("deleteImage") boolean deleteImage,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deleteFeature(featureMd5,deleteImage,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteGroupPermitOnDeviceGroup(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteGroupPermitOnDeviceGroup", method = RequestMethod.POST)
    public Response deleteGroupPermitOnDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deleteGroupPermitOnDeviceGroup(deviceGroupId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deleteImage(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deleteImage", method = RequestMethod.POST)
    public Response deleteImage(@RequestParam("imageMd5") String imageMd5,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deleteImage(imageMd5,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePermit(net.gdface.facelog.db.DeviceGroupBean,net.gdface.facelog.db.PersonGroupBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePermit", method = RequestMethod.POST)
    public Response deletePermit(@RequestParam("deviceGroup") DeviceGroupBean deviceGroup,
        @RequestParam("personGroup") PersonGroupBean personGroup,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deletePermit(deviceGroup,personGroup,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePerson(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePerson", method = RequestMethod.POST)
    public Response deletePerson(@RequestParam("personId") int personId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deletePerson(personId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersonByPapersNum(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonByPapersNum", method = RequestMethod.POST)
    public Response deletePersonByPapersNum(@RequestParam("papersNum") String papersNum,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deletePersonByPapersNum(papersNum,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersonGroup(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonGroup", method = RequestMethod.POST)
    public Response deletePersonGroup(@RequestParam("personGroupId") int personGroupId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deletePersonGroup(personGroupId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersonGroupPermit(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonGroupPermit", method = RequestMethod.POST)
    public Response deletePersonGroupPermit(@RequestParam("personGroupId") int personGroupId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deletePersonGroupPermit(personGroupId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersons(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersons", method = RequestMethod.POST)
    public Response deletePersons(@RequestParam("personIdList") List<Integer> personIdList,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deletePersons(personIdList,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#deletePersonsByPapersNum(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/deletePersonsByPapersNum", method = RequestMethod.POST)
    public Response deletePersonsByPapersNum(@RequestParam("papersNumlist") List<String> papersNumlist,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().deletePersonsByPapersNum(papersNumlist,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#disablePerson(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/disablePerson", method = RequestMethod.POST)
    public Response disablePerson(@RequestParam("personId") int personId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().disablePerson(personId,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#disablePerson(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/disablePersonList", method = RequestMethod.POST)
    public Response disablePerson(@RequestParam("personIdList") List<Integer> personIdList,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().disablePerson(personIdList,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#existsDevice(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsDevice", method = RequestMethod.POST)
    public Response existsDevice(@RequestParam("id") int id) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().existsDevice(id));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#existsFeature(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsFeature", method = RequestMethod.POST)
    public Response existsFeature(@RequestParam("md5") String md5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().existsFeature(md5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#existsImage(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsImage", method = RequestMethod.POST)
    public Response existsImage(@RequestParam("md5") String md5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().existsImage(md5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#existsPerson(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/existsPerson", method = RequestMethod.POST)
    public Response existsPerson(@RequestParam("persionId") int persionId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().existsPerson(persionId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDevice(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevice", method = RequestMethod.POST)
    public Response getDevice(@RequestParam("deviceId") int deviceId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDevice(deviceId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroup", method = RequestMethod.POST)
    public Response getDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDeviceGroup(deviceGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroups(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroups", method = RequestMethod.POST)
    public Response getDeviceGroups(@RequestParam("groupIdList") List<Integer> groupIdList) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDeviceGroups(groupIdList));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroupsBelongs(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsBelongs", method = RequestMethod.POST)
    public Response getDeviceGroupsBelongs(@RequestParam("deviceId") int deviceId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDeviceGroupsBelongs(deviceId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroupsPermit(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsPermit", method = RequestMethod.POST)
    public Response getDeviceGroupsPermit(@RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDeviceGroupsPermit(personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceGroupsPermittedBy(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceGroupsPermittedBy", method = RequestMethod.POST)
    public Response getDeviceGroupsPermittedBy(@RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDeviceGroupsPermittedBy(personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDeviceIdOfFeature(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDeviceIdOfFeature", method = RequestMethod.POST)
    public Response getDeviceIdOfFeature(@RequestParam("featureMd5") String featureMd5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDeviceIdOfFeature(featureMd5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDevices(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevices", method = RequestMethod.POST)
    public Response getDevices(@RequestParam("idList") List<Integer> idList) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDevices(idList));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getDevicesOfGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getDevicesOfGroup", method = RequestMethod.POST)
    public Response getDevicesOfGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getDevicesOfGroup(deviceGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeature(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeature", method = RequestMethod.POST)
    public Response getFeature(@RequestParam("md5") String md5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getFeature(md5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeatureBeansByPersonId(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeatureBeansByPersonId", method = RequestMethod.POST)
    public Response getFeatureBeansByPersonId(@RequestParam("personId") int personId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getFeatureBeansByPersonId(personId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeatureBytes(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeatureBytes", method = RequestMethod.POST)
    public Response getFeatureBytes(@RequestParam("md5") String md5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getFeatureBytes(md5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeatures(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeatures", method = RequestMethod.POST)
    public Response getFeatures(@RequestParam("md5") List<String> md5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getFeatures(md5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getFeaturesOfPerson(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getFeaturesOfPerson", method = RequestMethod.POST)
    public Response getFeaturesOfPerson(@RequestParam("personId") int personId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getFeaturesOfPerson(personId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getGroupPermit(int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermit", method = RequestMethod.POST)
    public Response getGroupPermit(@RequestParam("deviceId") int deviceId,
        @RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getGroupPermit(deviceId,personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getGroupPermitOnDeviceGroup(int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermitOnDeviceGroup", method = RequestMethod.POST)
    public Response getGroupPermitOnDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId,
        @RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getGroupPermitOnDeviceGroup(deviceGroupId,personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getGroupPermits(int,java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getGroupPermits", method = RequestMethod.POST)
    public Response getGroupPermits(@RequestParam("deviceId") int deviceId,
        @RequestParam("personGroupIdList") List<Integer> personGroupIdList) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getGroupPermits(deviceId,personGroupIdList));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getImage(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImage", method = RequestMethod.POST)
    public Response getImage(@RequestParam("imageMD5") String imageMD5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getImage(imageMD5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getImageBytes(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImageBytes", method = RequestMethod.POST)
    public Response getImageBytes(@RequestParam("imageMD5") String imageMD5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getImageBytes(imageMD5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getImagesAssociatedByFeature(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getImagesAssociatedByFeature", method = RequestMethod.POST)
    public Response getImagesAssociatedByFeature(@RequestParam("featureMd5") String featureMd5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getImagesAssociatedByFeature(featureMd5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getLogBeansByPersonId(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getLogBeansByPersonId", method = RequestMethod.POST)
    public Response getLogBeansByPersonId(@RequestParam("personId") int personId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getLogBeansByPersonId(personId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPerson(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPerson", method = RequestMethod.POST)
    public Response getPerson(@RequestParam("personId") int personId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPerson(personId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonByPapersNum(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonByPapersNum", method = RequestMethod.POST)
    public Response getPersonByPapersNum(@RequestParam("papersNum") String papersNum) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersonByPapersNum(papersNum));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroup", method = RequestMethod.POST)
    public Response getPersonGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersonGroup(personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonGroups(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroups", method = RequestMethod.POST)
    public Response getPersonGroups(@RequestParam("groupIdList") List<Integer> groupIdList) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersonGroups(groupIdList));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonGroupsBelongs(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroupsBelongs", method = RequestMethod.POST)
    public Response getPersonGroupsBelongs(@RequestParam("personId") int personId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersonGroupsBelongs(personId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonGroupsPermittedBy(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonGroupsPermittedBy", method = RequestMethod.POST)
    public Response getPersonGroupsPermittedBy(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersonGroupsPermittedBy(deviceGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonPermit(int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonPermit", method = RequestMethod.POST)
    public Response getPersonPermit(@RequestParam("deviceId") int deviceId,
        @RequestParam("personId") int personId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersonPermit(deviceId,personId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonPermits(int,java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonPermits", method = RequestMethod.POST)
    public Response getPersonPermits(@RequestParam("deviceId") int deviceId,
        @RequestParam("personIdList") List<Integer> personIdList) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersonPermits(deviceId,personIdList));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersons(java.util.List)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersons", method = RequestMethod.POST)
    public Response getPersons(@RequestParam("idList") List<Integer> idList) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersons(idList));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getPersonsOfGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getPersonsOfGroup", method = RequestMethod.POST)
    public Response getPersonsOfGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getPersonsOfGroup(personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getProperty(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getProperty", method = RequestMethod.POST)
    public Response getProperty(@RequestParam("key") String key,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getProperty(key,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getRedisParameters(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getRedisParameters", method = RequestMethod.POST)
    public Response getRedisParameters(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getRedisParameters(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getServiceConfig(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getServiceConfig", method = RequestMethod.POST)
    public Response getServiceConfig(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getServiceConfig(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getSubDeviceGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getSubDeviceGroup", method = RequestMethod.POST)
    public Response getSubDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getSubDeviceGroup(deviceGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#getSubPersonGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/getSubPersonGroup", method = RequestMethod.POST)
    public Response getSubPersonGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().getSubPersonGroup(personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isDisable(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isDisable", method = RequestMethod.POST)
    public Response isDisable(@RequestParam("personId") int personId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isDisable(personId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isLocal()}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isLocal", method = RequestMethod.POST)
    public Response isLocal() 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isLocal());
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidAckChannel(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidAckChannel", method = RequestMethod.POST)
    public Response isValidAckChannel(@RequestParam("ackChannel") String ackChannel) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isValidAckChannel(ackChannel));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidCmdSn(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidCmdSn", method = RequestMethod.POST)
    public Response isValidCmdSn(@RequestParam("cmdSn") long cmdSn) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isValidCmdSn(cmdSn));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidDeviceToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidDeviceToken", method = RequestMethod.POST)
    public Response isValidDeviceToken(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isValidDeviceToken(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidPassword(java.lang.String,java.lang.String,boolean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidPassword", method = RequestMethod.POST)
    public Response isValidPassword(@RequestParam("userId") String userId,
        @RequestParam("password") String password,
        @RequestParam("isMd5") boolean isMd5) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isValidPassword(userId,password,isMd5));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidPersonToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidPersonToken", method = RequestMethod.POST)
    public Response isValidPersonToken(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isValidPersonToken(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidRootToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidRootToken", method = RequestMethod.POST)
    public Response isValidRootToken(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isValidRootToken(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidToken", method = RequestMethod.POST)
    public Response isValidToken(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isValidToken(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#isValidUserToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/isValidUserToken", method = RequestMethod.POST)
    public Response isValidUserToken(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().isValidUserToken(token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#listOfParentForDeviceGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/listOfParentForDeviceGroup", method = RequestMethod.POST)
    public Response listOfParentForDeviceGroup(@RequestParam("deviceGroupId") int deviceGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().listOfParentForDeviceGroup(deviceGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#listOfParentForPersonGroup(int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/listOfParentForPersonGroup", method = RequestMethod.POST)
    public Response listOfParentForPersonGroup(@RequestParam("personGroupId") int personGroupId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().listOfParentForPersonGroup(personGroupId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadAllPerson()}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadAllPerson", method = RequestMethod.POST)
    public Response loadAllPerson() 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadAllPerson());
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadDeviceByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceByWhere", method = RequestMethod.POST)
    public Response loadDeviceByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadDeviceByWhere(where,startRow,numRows));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadDeviceGroupByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceGroupByWhere", method = RequestMethod.POST)
    public Response loadDeviceGroupByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadDeviceGroupByWhere(where,startRow,numRows));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadDeviceGroupIdByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceGroupIdByWhere", method = RequestMethod.POST)
    public Response loadDeviceGroupIdByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadDeviceGroupIdByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadDeviceIdByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadDeviceIdByWhere", method = RequestMethod.POST)
    public Response loadDeviceIdByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadDeviceIdByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadFeatureMd5ByUpdate(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadFeatureMd5ByUpdate", method = RequestMethod.POST)
    public Response loadFeatureMd5ByUpdate(@RequestParam("timestamp") long timestamp) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadFeatureMd5ByUpdate(timestamp));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadLogByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogByWhere", method = RequestMethod.POST)
    public Response loadLogByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadLogByWhere(where,startRow,numRows));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadLogLightByVerifyTime(long,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogLightByVerifyTime", method = RequestMethod.POST)
    public Response loadLogLightByVerifyTime(@RequestParam("timestamp") long timestamp,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadLogLightByVerifyTime(timestamp,startRow,numRows));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadLogLightByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadLogLightByWhere", method = RequestMethod.POST)
    public Response loadLogLightByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadLogLightByWhere(where,startRow,numRows));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPermitByUpdate(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPermitByUpdate", method = RequestMethod.POST)
    public Response loadPermitByUpdate(@RequestParam("timestamp") long timestamp) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadPermitByUpdate(timestamp));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonByWhere", method = RequestMethod.POST)
    public Response loadPersonByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadPersonByWhere(where,startRow,numRows));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonGroupByWhere(java.lang.String,int,int)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonGroupByWhere", method = RequestMethod.POST)
    public Response loadPersonGroupByWhere(@RequestParam("where") String where,
        @RequestParam("startRow") int startRow,
        @RequestParam("numRows") int numRows) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadPersonGroupByWhere(where,startRow,numRows));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonGroupIdByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonGroupIdByWhere", method = RequestMethod.POST)
    public Response loadPersonGroupIdByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadPersonGroupIdByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonIdByUpdateTime(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonIdByUpdateTime", method = RequestMethod.POST)
    public Response loadPersonIdByUpdateTime(@RequestParam("timestamp") long timestamp) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadPersonIdByUpdateTime(timestamp));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadPersonIdByWhere(java.lang.String)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadPersonIdByWhere", method = RequestMethod.POST)
    public Response loadPersonIdByWhere(@RequestParam("where") String where) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadPersonIdByWhere(where));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#loadUpdatedPersons(long)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/loadUpdatedPersons", method = RequestMethod.POST)
    public Response loadUpdatedPersons(@RequestParam("timestamp") long timestamp) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().loadUpdatedPersons(timestamp));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#offline(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/offline", method = RequestMethod.POST)
    public Response offline(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().offline(token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#online(net.gdface.facelog.db.DeviceBean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/online", method = RequestMethod.POST)
    public Response online(@RequestParam("device") DeviceBean device) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().online(device));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#registerDevice(net.gdface.facelog.db.DeviceBean)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/registerDevice", method = RequestMethod.POST)
    public Response registerDevice(@RequestParam("newDevice") DeviceBean newDevice) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().registerDevice(newDevice));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#releasePersonToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releasePersonToken", method = RequestMethod.POST)
    public Response releasePersonToken(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().releasePersonToken(token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#releaseRootToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releaseRootToken", method = RequestMethod.POST)
    public Response releaseRootToken(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().releaseRootToken(token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#releaseUserToken(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/releaseUserToken", method = RequestMethod.POST)
    public Response releaseUserToken(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().releaseUserToken(token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#replaceFeature(java.lang.Integer,java.lang.String,boolean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/replaceFeature", method = RequestMethod.POST)
    public Response replaceFeature(@RequestParam("personId") Integer personId,
        @RequestParam("featureMd5") String featureMd5,
        @RequestParam("deleteOldFeatureImage") boolean deleteOldFeatureImage,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().replaceFeature(personId,featureMd5,deleteOldFeatureImage,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#rootGroupOfDevice(java.lang.Integer)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/rootGroupOfDevice", method = RequestMethod.POST)
    public Response rootGroupOfDevice(@RequestParam("deviceId") Integer deviceId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().rootGroupOfDevice(deviceId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#rootGroupOfPerson(java.lang.Integer)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/rootGroupOfPerson", method = RequestMethod.POST)
    public Response rootGroupOfPerson(@RequestParam("personId") Integer personId) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().rootGroupOfPerson(personId));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#saveDevice(net.gdface.facelog.db.DeviceBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveDevice", method = RequestMethod.POST)
    public Response saveDevice(@RequestParam("deviceBean") DeviceBean deviceBean,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().saveDevice(deviceBean,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#saveDeviceGroup(net.gdface.facelog.db.DeviceGroupBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveDeviceGroup", method = RequestMethod.POST)
    public Response saveDeviceGroup(@RequestParam("deviceGroupBean") DeviceGroupBean deviceGroupBean,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().saveDeviceGroup(deviceGroupBean,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],byte[],byte[],net.gdface.facelog.db.FaceBean,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonFull", method = RequestMethod.POST)
    public Response savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("feature") byte[] feature,
        @RequestParam("featureImage") byte[] featureImage,
        @RequestParam("featureFaceBean") FaceBean featureFaceBean,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,feature,featureImage,featureFaceBean,deviceId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],byte[],java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureMultiFaces", method = RequestMethod.POST)
    public Response savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("feature") byte[] feature,
        @RequestParam("faceBeans") List<FaceBean> faceBeans,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,feature,faceBeans,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],byte[],java.util.Map,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureMultiImage", method = RequestMethod.POST)
    public Response savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("feature") byte[] feature,
        @RequestParam("faceInfo") Map<java.nio.ByteBuffer, FaceBean> faceInfo,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,feature,faceInfo,deviceId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhoto", method = RequestMethod.POST)
    public Response savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,byte[],net.gdface.facelog.db.FeatureBean,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeature", method = RequestMethod.POST)
    public Response savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhoto") byte[] idPhoto,
        @RequestParam("featureBean") FeatureBean featureBean,
        @RequestParam("deviceId") Integer deviceId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePerson(bean,idPhoto,featureBean,deviceId,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,java.lang.String,java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonWithPhotoAndFeatureSaved", method = RequestMethod.POST)
    public Response savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("idPhotoMd5") String idPhotoMd5,
        @RequestParam("featureMd5") String featureMd5,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePerson(bean,idPhotoMd5,featureMd5,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePerson(net.gdface.facelog.db.PersonBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePerson", method = RequestMethod.POST)
    public Response savePerson(@RequestParam("bean") PersonBean bean,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePerson(bean,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePersonGroup(net.gdface.facelog.db.PersonGroupBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonGroup", method = RequestMethod.POST)
    public Response savePersonGroup(@RequestParam("personGroupBean") PersonGroupBean personGroupBean,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePersonGroup(personGroupBean,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePersons(java.util.List,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersons", method = RequestMethod.POST)
    public Response savePersons(@RequestParam("beans") List<PersonBean> beans,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().savePersons(beans,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#savePersons(java.util.Map,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/savePersonsWithPhoto", method = RequestMethod.POST)
    public Response savePersons(@RequestParam("persons") Map<java.nio.ByteBuffer, PersonBean> persons,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().savePersons(persons,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#saveServiceConfig(net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/saveServiceConfig", method = RequestMethod.POST)
    public Response saveServiceConfig(@RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().saveServiceConfig(token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#setPersonExpiryDate(int,long,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setPersonExpiryDate", method = RequestMethod.POST)
    public Response setPersonExpiryDate(@RequestParam("personId") int personId,
        @RequestParam("expiryDate") long expiryDate,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().setPersonExpiryDate(personId,expiryDate,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#setPersonExpiryDate(java.util.List,long,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setPersonExpiryDateList", method = RequestMethod.POST)
    public Response setPersonExpiryDate(@RequestParam("personIdList") List<Integer> personIdList,
        @RequestParam("expiryDate") long expiryDate,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().setPersonExpiryDate(personIdList,expiryDate,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#setProperties(java.util.Map,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setProperties", method = RequestMethod.POST)
    public Response setProperties(@RequestParam("config") Map<String, String> config,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().setProperties(config,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#setProperty(java.lang.String,java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/setProperty", method = RequestMethod.POST)
    public Response setProperty(@RequestParam("key") String key,
        @RequestParam("value") String value,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().setProperty(key,value,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#taskQueueOf(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/taskQueueOf", method = RequestMethod.POST)
    public Response taskQueueOf(@RequestParam("task") String task,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().taskQueueOf(task,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#taskRegister(java.lang.String,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/taskRegister", method = RequestMethod.POST)
    public Response taskRegister(@RequestParam("task") String task,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().taskRegister(task,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#unbindBorder(java.lang.Integer,java.lang.Integer,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/unbindBorder", method = RequestMethod.POST)
    public Response unbindBorder(@RequestParam("personGroupId") Integer personGroupId,
        @RequestParam("deviceGroupId") Integer deviceGroupId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().unbindBorder(personGroupId,deviceGroupId,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#unregisterDevice(int,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/unregisterDevice", method = RequestMethod.POST)
    public Response unregisterDevice(@RequestParam("deviceId") int deviceId,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            delegate().unregisterDevice(deviceId,token);
            response.onComplete();
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#updateDevice(net.gdface.facelog.db.DeviceBean,net.gdface.facelog.Token)}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/updateDevice", method = RequestMethod.POST)
    public Response updateDevice(@RequestParam("deviceBean") DeviceBean deviceBean,
        @RequestParam("token") Token token) 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().updateDevice(deviceBean,token));
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#version()}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/version", method = RequestMethod.POST)
    public Response version() 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().version());
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * @see {@link net.gdface.facelog.IFaceLog#versionInfo()}
     */
    @ResponseBody
    @RequestMapping(value = "/IFaceLog/versionInfo", method = RequestMethod.POST)
    public Response versionInfo() 
        {
        Response response = respFactory.newIFaceLogResponse();
        try{
            response.onComplete(delegate().versionInfo());
        }
        catch(Exception e){
            logger.error(e.getMessage(),e);
            response.onError(e);
        }
        return response;
    }
    /**
     * 获取{@link IFaceLog}实例的接口，
     * 用于应用层SPI方式提供{@link IFaceLog}实例
     * @author guyadong
     *
     */
    public static interface InstanceSupplier{
        IFaceLog instanceOfIFaceLog();
    }
    /**
     * web响应数据接口
     * @author guyadong
     *
     */
    public static interface Response{
        /**
         * 接口方法调用成功
         * @param result 调用返回值
         */
        void onComplete(Object result);
        /**
         * 接口方法调用成功，调用方法返回类型为void
         */
        void onComplete();        
        /**
         * 接口方法调用抛出异常
         * @param e 异常
         */
        void onError(Exception e);
    }
    /**
     * 获取{@link Response}接口实例的工厂类接口
     * @author guyadong
     *
     */
    public static interface ResponseFactory{
        /**
         * @return 返回新的{@link Response}接口实例
         */
        Response newIFaceLogResponse();
    }
    /**
     * {@link Response}默认实现
     * @author guyadong
     *
     */
    public static class DefaultResponse implements Response{
        private boolean success;
        private Object result;
        private String errorMessage;
        private Exception exception;
        @Override
        public void onComplete(Object result) {
            success = true;
            this.result = result;
        }

        @Override
        public void onError(Exception e) {
            success = true;
            exception = e;
            errorMessage = e.getMessage();
            if(errorMessage == null){
                errorMessage = e.getClass().getSimpleName();
            }
        }
        @Override
        public void onComplete() {            
        }
        public boolean isSuccess() {
            return success;
        }

        public void setSuccess(boolean success) {
            this.success = success;
        }

        public Object getResult() {
            return result;
        }

        public void setResult(Object result) {
            this.result = result;
        }

        public String getErrorMessage() {
            return errorMessage;
        }

        public void setErrorMessage(String errorMessage) {
            this.errorMessage = errorMessage;
        }

        public Exception getException() {
            return exception;
        }

        public void setException(Exception exception) {
            this.exception = exception;
        }

        @Override
        public String toString() {
            StringBuilder builder = new StringBuilder();
            builder.append("DefaultResponse [success=");
            builder.append(success);
            builder.append(", result=");
            builder.append(result);
            builder.append(", errorMessage=");
            builder.append(errorMessage);
            builder.append(", exception=");
            builder.append(exception);
            builder.append("]");
            return builder.toString();
        }
        
    }
    /**
     * {@link ResponseFactory}接口默认实现
     * @author guyadong
     *
     */
    public static class DefaultResponseFactory implements ResponseFactory{

        @Override
        public Response newIFaceLogResponse() {
            return new DefaultResponse();
        }
        
    }
}