// Automatically generated by the Thrifty compiler; do not edit!
// Generated on: 2019-04-01T09:19:05.876Z
// Source: J:\facelog\facelog-service\IFaceLog.thrift at 209:1
package net.gdface.facelog.client.thrift;

import com.microsoft.thrifty.TType;
import com.microsoft.thrifty.ThriftException;
import com.microsoft.thrifty.protocol.FieldMetadata;
import com.microsoft.thrifty.protocol.ListMetadata;
import com.microsoft.thrifty.protocol.MapMetadata;
import com.microsoft.thrifty.protocol.MessageMetadata;
import com.microsoft.thrifty.protocol.Protocol;
import com.microsoft.thrifty.service.AsyncClientBase;
import com.microsoft.thrifty.service.MethodCall;
import com.microsoft.thrifty.service.ServiceMethodCallback;
import com.microsoft.thrifty.service.TMessageType;
import com.microsoft.thrifty.util.ProtocolUtil;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import okio.ByteString;

@Generated(
    value = "com.microsoft.thrifty.gen.ThriftyCodeGenerator",
    comments = "https://github.com/microsoft/thrifty"
)
public class IFaceLogClient extends AsyncClientBase implements IFaceLog {
  public IFaceLogClient(Protocol protocol, AsyncClientBase.Listener listener) {
    super(protocol, listener);
  }

  @Override
  public void addFeature(ByteString feature, Integer personId, List<FaceBean> faecBeans,
      Token token, ServiceMethodCallback<FeatureBean> callback) {
    this.enqueue(new AddFeatureCall(feature, personId, faecBeans, token, callback));
  }

  @Override
  public void addFeatureMulti(ByteString feature, Integer personId,
      Map<ByteString, FaceBean> faceInfo, Integer deviceId, Token token,
      ServiceMethodCallback<FeatureBean> callback) {
    this.enqueue(new AddFeatureMultiCall(feature, personId, faceInfo, deviceId, token, callback));
  }

  @Override
  public void addImage(ByteString imageData, Integer deviceId, FaceBean faceBean, Integer personId,
      Token token, ServiceMethodCallback<ImageBean> callback) {
    this.enqueue(new AddImageCall(imageData, deviceId, faceBean, personId, token, callback));
  }

  @Override
  public void addLog(LogBean bean, Token token, ServiceMethodCallback<Void> callback) {
    this.enqueue(new AddLogCall(bean, token, callback));
  }

  @Override
  public void addLogs(List<LogBean> beans, Token token, ServiceMethodCallback<Void> callback) {
    this.enqueue(new AddLogsCall(beans, token, callback));
  }

  @Override
  public void addPermit(DeviceGroupBean deviceGroup, PersonGroupBean personGroup, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new AddPermitCall(deviceGroup, personGroup, token, callback));
  }

  @Override
  public void addPermitById(Integer deviceGroupId, Integer personGroupId, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new AddPermitByIdCall(deviceGroupId, personGroupId, token, callback));
  }

  @Override
  public void applyAckChannel(Token token, ServiceMethodCallback<String> callback) {
    this.enqueue(new ApplyAckChannelCall(token, callback));
  }

  @Override
  public void applyAckChannelWithDuration(Token token, Long duration,
      ServiceMethodCallback<String> callback) {
    this.enqueue(new ApplyAckChannelWithDurationCall(token, duration, callback));
  }

  @Override
  public void applyCmdSn(Token token, ServiceMethodCallback<Long> callback) {
    this.enqueue(new ApplyCmdSnCall(token, callback));
  }

  @Override
  public void applyPersonToken(Integer personId, String password, Boolean isMd5,
      ServiceMethodCallback<Token> callback) {
    this.enqueue(new ApplyPersonTokenCall(personId, password, isMd5, callback));
  }

  @Override
  public void applyRootToken(String password, Boolean isMd5,
      ServiceMethodCallback<Token> callback) {
    this.enqueue(new ApplyRootTokenCall(password, isMd5, callback));
  }

  @Override
  public void countDeviceByWhere(String where, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new CountDeviceByWhereCall(where, callback));
  }

  @Override
  public void countDeviceGroupByWhere(String where, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new CountDeviceGroupByWhereCall(where, callback));
  }

  @Override
  public void countLogByWhere(String where, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new CountLogByWhereCall(where, callback));
  }

  @Override
  public void countLogLightByVerifyTime(Long timestamp, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new CountLogLightByVerifyTimeCall(timestamp, callback));
  }

  @Override
  public void countLogLightByWhere(String where, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new CountLogLightByWhereCall(where, callback));
  }

  @Override
  public void countPersonByWhere(String where, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new CountPersonByWhereCall(where, callback));
  }

  @Override
  public void countPersonGroupByWhere(String where, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new CountPersonGroupByWhereCall(where, callback));
  }

  @Override
  public void deleteAllFeaturesByPersonId(Integer personId, Boolean deleteImage, Token token,
      ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeleteAllFeaturesByPersonIdCall(personId, deleteImage, token, callback));
  }

  @Override
  public void deleteDeviceGroup(Integer deviceGroupId, Token token,
      ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeleteDeviceGroupCall(deviceGroupId, token, callback));
  }

  @Override
  public void deleteFeature(String featureMd5, Boolean deleteImage, Token token,
      ServiceMethodCallback<List<String>> callback) {
    this.enqueue(new DeleteFeatureCall(featureMd5, deleteImage, token, callback));
  }

  @Override
  public void deleteImage(String imageMd5, Token token, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeleteImageCall(imageMd5, token, callback));
  }

  @Override
  public void deletePermit(DeviceGroupBean deviceGroup, PersonGroupBean personGroup, Token token,
      ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeletePermitCall(deviceGroup, personGroup, token, callback));
  }

  @Override
  public void deletePerson(Integer personId, Token token, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeletePersonCall(personId, token, callback));
  }

  @Override
  public void deletePersonByPapersNum(String papersNum, Token token,
      ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeletePersonByPapersNumCall(papersNum, token, callback));
  }

  @Override
  public void deletePersonGroup(Integer personGroupId, Token token,
      ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeletePersonGroupCall(personGroupId, token, callback));
  }

  @Override
  public void deletePersons(List<Integer> personIdList, Token token,
      ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeletePersonsCall(personIdList, token, callback));
  }

  @Override
  public void deletePersonsByPapersNum(List<String> papersNumlist, Token token,
      ServiceMethodCallback<Integer> callback) {
    this.enqueue(new DeletePersonsByPapersNumCall(papersNumlist, token, callback));
  }

  @Override
  public void disablePerson(Integer personId, Token token, ServiceMethodCallback<Void> callback) {
    this.enqueue(new DisablePersonCall(personId, token, callback));
  }

  @Override
  public void disablePersonList(List<Integer> personIdList, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new DisablePersonListCall(personIdList, token, callback));
  }

  @Override
  public void existsDevice(Integer id, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new ExistsDeviceCall(id, callback));
  }

  @Override
  public void existsFeature(String md5, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new ExistsFeatureCall(md5, callback));
  }

  @Override
  public void existsImage(String md5, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new ExistsImageCall(md5, callback));
  }

  @Override
  public void existsPerson(Integer persionId, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new ExistsPersonCall(persionId, callback));
  }

  @Override
  public void getDevice(Integer deviceId, ServiceMethodCallback<DeviceBean> callback) {
    this.enqueue(new GetDeviceCall(deviceId, callback));
  }

  @Override
  public void getDeviceGroup(Integer deviceGroupId,
      ServiceMethodCallback<DeviceGroupBean> callback) {
    this.enqueue(new GetDeviceGroupCall(deviceGroupId, callback));
  }

  @Override
  public void getDeviceGroups(List<Integer> groupIdList,
      ServiceMethodCallback<List<DeviceGroupBean>> callback) {
    this.enqueue(new GetDeviceGroupsCall(groupIdList, callback));
  }

  @Override
  public void getDeviceGroupsBelongs(Integer deviceId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new GetDeviceGroupsBelongsCall(deviceId, callback));
  }

  @Override
  public void getDeviceGroupsPermit(Integer personGroupId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new GetDeviceGroupsPermitCall(personGroupId, callback));
  }

  @Override
  public void getDeviceIdOfFeature(String featureMd5, ServiceMethodCallback<Integer> callback) {
    this.enqueue(new GetDeviceIdOfFeatureCall(featureMd5, callback));
  }

  @Override
  public void getDevices(List<Integer> idList, ServiceMethodCallback<List<DeviceBean>> callback) {
    this.enqueue(new GetDevicesCall(idList, callback));
  }

  @Override
  public void getDevicesOfGroup(Integer deviceGroupId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new GetDevicesOfGroupCall(deviceGroupId, callback));
  }

  @Override
  public void getFeature(String md5, ServiceMethodCallback<FeatureBean> callback) {
    this.enqueue(new GetFeatureCall(md5, callback));
  }

  @Override
  public void getFeatureBeansByPersonId(Integer personId,
      ServiceMethodCallback<List<String>> callback) {
    this.enqueue(new GetFeatureBeansByPersonIdCall(personId, callback));
  }

  @Override
  public void getFeatureBytes(String md5, ServiceMethodCallback<ByteString> callback) {
    this.enqueue(new GetFeatureBytesCall(md5, callback));
  }

  @Override
  public void getFeatures(List<String> md5, ServiceMethodCallback<List<FeatureBean>> callback) {
    this.enqueue(new GetFeaturesCall(md5, callback));
  }

  @Override
  public void getFeaturesOfPerson(Integer personId, ServiceMethodCallback<List<String>> callback) {
    this.enqueue(new GetFeaturesOfPersonCall(personId, callback));
  }

  @Override
  public void getGroupPermit(Integer deviceId, Integer personGroupId,
      ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new GetGroupPermitCall(deviceId, personGroupId, callback));
  }

  @Override
  public void getGroupPermits(Integer deviceId, List<Integer> personGroupIdList,
      ServiceMethodCallback<List<Boolean>> callback) {
    this.enqueue(new GetGroupPermitsCall(deviceId, personGroupIdList, callback));
  }

  @Override
  public void getImage(String imageMD5, ServiceMethodCallback<ImageBean> callback) {
    this.enqueue(new GetImageCall(imageMD5, callback));
  }

  @Override
  public void getImageBytes(String imageMD5, ServiceMethodCallback<ByteString> callback) {
    this.enqueue(new GetImageBytesCall(imageMD5, callback));
  }

  @Override
  public void getImagesAssociatedByFeature(String featureMd5,
      ServiceMethodCallback<List<String>> callback) {
    this.enqueue(new GetImagesAssociatedByFeatureCall(featureMd5, callback));
  }

  @Override
  public void getLogBeansByPersonId(Integer personId,
      ServiceMethodCallback<List<LogBean>> callback) {
    this.enqueue(new GetLogBeansByPersonIdCall(personId, callback));
  }

  @Override
  public void getPerson(Integer personId, ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new GetPersonCall(personId, callback));
  }

  @Override
  public void getPersonByPapersNum(String papersNum, ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new GetPersonByPapersNumCall(papersNum, callback));
  }

  @Override
  public void getPersonGroup(Integer personGroupId,
      ServiceMethodCallback<PersonGroupBean> callback) {
    this.enqueue(new GetPersonGroupCall(personGroupId, callback));
  }

  @Override
  public void getPersonGroups(List<Integer> groupIdList,
      ServiceMethodCallback<List<PersonGroupBean>> callback) {
    this.enqueue(new GetPersonGroupsCall(groupIdList, callback));
  }

  @Override
  public void getPersonGroupsBelongs(Integer personId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new GetPersonGroupsBelongsCall(personId, callback));
  }

  @Override
  public void getPersonGroupsPermittedBy(Integer deviceGroupId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new GetPersonGroupsPermittedByCall(deviceGroupId, callback));
  }

  @Override
  public void getPersonPermit(Integer deviceId, Integer personId,
      ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new GetPersonPermitCall(deviceId, personId, callback));
  }

  @Override
  public void getPersonPermits(Integer deviceId, List<Integer> personIdList,
      ServiceMethodCallback<List<Boolean>> callback) {
    this.enqueue(new GetPersonPermitsCall(deviceId, personIdList, callback));
  }

  @Override
  public void getPersons(List<Integer> idList, ServiceMethodCallback<List<PersonBean>> callback) {
    this.enqueue(new GetPersonsCall(idList, callback));
  }

  @Override
  public void getPersonsOfGroup(Integer personGroupId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new GetPersonsOfGroupCall(personGroupId, callback));
  }

  @Override
  public void getProperty(String key, Token token, ServiceMethodCallback<String> callback) {
    this.enqueue(new GetPropertyCall(key, token, callback));
  }

  @Override
  public void getRedisParameters(Token token,
      ServiceMethodCallback<Map<MQParam, String>> callback) {
    this.enqueue(new GetRedisParametersCall(token, callback));
  }

  @Override
  public void getServiceConfig(Token token, ServiceMethodCallback<Map<String, String>> callback) {
    this.enqueue(new GetServiceConfigCall(token, callback));
  }

  @Override
  public void getSubDeviceGroup(Integer deviceGroupId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new GetSubDeviceGroupCall(deviceGroupId, callback));
  }

  @Override
  public void getSubPersonGroup(Integer personGroupId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new GetSubPersonGroupCall(personGroupId, callback));
  }

  @Override
  public void isDisable(Integer personId, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new IsDisableCall(personId, callback));
  }

  @Override
  public void isLocal(ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new IsLocalCall(callback));
  }

  @Override
  public void isValidAckChannel(String ackChannel, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new IsValidAckChannelCall(ackChannel, callback));
  }

  @Override
  public void isValidCmdSn(Long cmdSn, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new IsValidCmdSnCall(cmdSn, callback));
  }

  @Override
  public void isValidDeviceToken(Token token, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new IsValidDeviceTokenCall(token, callback));
  }

  @Override
  public void isValidPassword(String userId, String password, Boolean isMd5,
      ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new IsValidPasswordCall(userId, password, isMd5, callback));
  }

  @Override
  public void isValidPersonToken(Token token, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new IsValidPersonTokenCall(token, callback));
  }

  @Override
  public void isValidRootToken(Token token, ServiceMethodCallback<Boolean> callback) {
    this.enqueue(new IsValidRootTokenCall(token, callback));
  }

  @Override
  public void listOfParentForDeviceGroup(Integer deviceGroupId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new ListOfParentForDeviceGroupCall(deviceGroupId, callback));
  }

  @Override
  public void listOfParentForPersonGroup(Integer personGroupId,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new ListOfParentForPersonGroupCall(personGroupId, callback));
  }

  @Override
  public void loadAllPerson(ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadAllPersonCall(callback));
  }

  @Override
  public void loadDeviceByWhere(String where, Integer startRow, Integer numRows,
      ServiceMethodCallback<List<DeviceBean>> callback) {
    this.enqueue(new LoadDeviceByWhereCall(where, startRow, numRows, callback));
  }

  @Override
  public void loadDeviceGroupByWhere(String where, Integer startRow, Integer numRows,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadDeviceGroupByWhereCall(where, startRow, numRows, callback));
  }

  @Override
  public void loadDeviceGroupIdByWhere(String where,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadDeviceGroupIdByWhereCall(where, callback));
  }

  @Override
  public void loadDeviceIdByWhere(String where, ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadDeviceIdByWhereCall(where, callback));
  }

  @Override
  public void loadFeatureMd5ByUpdate(Long timestamp, ServiceMethodCallback<List<String>> callback) {
    this.enqueue(new LoadFeatureMd5ByUpdateCall(timestamp, callback));
  }

  @Override
  public void loadLogByWhere(String where, Integer startRow, Integer numRows,
      ServiceMethodCallback<List<LogBean>> callback) {
    this.enqueue(new LoadLogByWhereCall(where, startRow, numRows, callback));
  }

  @Override
  public void loadLogLightByVerifyTime(Long timestamp, Integer startRow, Integer numRows,
      ServiceMethodCallback<List<LogLightBean>> callback) {
    this.enqueue(new LoadLogLightByVerifyTimeCall(timestamp, startRow, numRows, callback));
  }

  @Override
  public void loadLogLightByWhere(String where, Integer startRow, Integer numRows,
      ServiceMethodCallback<List<LogLightBean>> callback) {
    this.enqueue(new LoadLogLightByWhereCall(where, startRow, numRows, callback));
  }

  @Override
  public void loadPermitByUpdate(Long timestamp, ServiceMethodCallback<List<PermitBean>> callback) {
    this.enqueue(new LoadPermitByUpdateCall(timestamp, callback));
  }

  @Override
  public void loadPersonByWhere(String where, Integer startRow, Integer numRows,
      ServiceMethodCallback<List<PersonBean>> callback) {
    this.enqueue(new LoadPersonByWhereCall(where, startRow, numRows, callback));
  }

  @Override
  public void loadPersonGroupByWhere(String where, Integer startRow, Integer numRows,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadPersonGroupByWhereCall(where, startRow, numRows, callback));
  }

  @Override
  public void loadPersonGroupIdByWhere(String where,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadPersonGroupIdByWhereCall(where, callback));
  }

  @Override
  public void loadPersonIdByUpdateTime(Long timestamp,
      ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadPersonIdByUpdateTimeCall(timestamp, callback));
  }

  @Override
  public void loadPersonIdByWhere(String where, ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadPersonIdByWhereCall(where, callback));
  }

  @Override
  public void loadUpdatedPersons(Long timestamp, ServiceMethodCallback<List<Integer>> callback) {
    this.enqueue(new LoadUpdatedPersonsCall(timestamp, callback));
  }

  @Override
  public void offline(Token token, ServiceMethodCallback<Void> callback) {
    this.enqueue(new OfflineCall(token, callback));
  }

  @Override
  public void online(DeviceBean device, ServiceMethodCallback<Token> callback) {
    this.enqueue(new OnlineCall(device, callback));
  }

  @Override
  public void registerDevice(DeviceBean newDevice, ServiceMethodCallback<DeviceBean> callback) {
    this.enqueue(new RegisterDeviceCall(newDevice, callback));
  }

  @Override
  public void releasePersonToken(Token token, ServiceMethodCallback<Void> callback) {
    this.enqueue(new ReleasePersonTokenCall(token, callback));
  }

  @Override
  public void releaseRootToken(Token token, ServiceMethodCallback<Void> callback) {
    this.enqueue(new ReleaseRootTokenCall(token, callback));
  }

  @Override
  public void replaceFeature(Integer personId, String featureMd5, Boolean deleteOldFeatureImage,
      Token token, ServiceMethodCallback<Void> callback) {
    this.enqueue(new ReplaceFeatureCall(personId, featureMd5, deleteOldFeatureImage, token, callback));
  }

  @Override
  public void saveDevice(DeviceBean deviceBean, Token token,
      ServiceMethodCallback<DeviceBean> callback) {
    this.enqueue(new SaveDeviceCall(deviceBean, token, callback));
  }

  @Override
  public void saveDeviceGroup(DeviceGroupBean deviceGroupBean, Token token,
      ServiceMethodCallback<DeviceGroupBean> callback) {
    this.enqueue(new SaveDeviceGroupCall(deviceGroupBean, token, callback));
  }

  @Override
  public void savePerson(PersonBean bean, Token token, ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new SavePersonCall(bean, token, callback));
  }

  @Override
  public void savePersonFull(PersonBean bean, ByteString idPhoto, ByteString feature,
      ByteString featureImage, FaceBean featureFaceBean, Integer deviceId, Token token,
      ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new SavePersonFullCall(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token, callback));
  }

  @Override
  public void savePersonGroup(PersonGroupBean personGroupBean, Token token,
      ServiceMethodCallback<PersonGroupBean> callback) {
    this.enqueue(new SavePersonGroupCall(personGroupBean, token, callback));
  }

  @Override
  public void savePersonWithPhoto(PersonBean bean, ByteString idPhoto, Token token,
      ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new SavePersonWithPhotoCall(bean, idPhoto, token, callback));
  }

  @Override
  public void savePersonWithPhotoAndFeature(PersonBean bean, ByteString idPhoto,
      FeatureBean featureBean, Integer deviceId, Token token,
      ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new SavePersonWithPhotoAndFeatureCall(bean, idPhoto, featureBean, deviceId, token, callback));
  }

  @Override
  public void savePersonWithPhotoAndFeatureMultiFaces(PersonBean bean, ByteString idPhoto,
      ByteString feature, List<FaceBean> faceBeans, Token token,
      ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new SavePersonWithPhotoAndFeatureMultiFacesCall(bean, idPhoto, feature, faceBeans, token, callback));
  }

  @Override
  public void savePersonWithPhotoAndFeatureMultiImage(PersonBean bean, ByteString idPhoto,
      ByteString feature, Map<ByteString, FaceBean> faceInfo, Integer deviceId, Token token,
      ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new SavePersonWithPhotoAndFeatureMultiImageCall(bean, idPhoto, feature, faceInfo, deviceId, token, callback));
  }

  @Override
  public void savePersonWithPhotoAndFeatureSaved(PersonBean bean, String idPhotoMd5,
      String featureMd5, Token token, ServiceMethodCallback<PersonBean> callback) {
    this.enqueue(new SavePersonWithPhotoAndFeatureSavedCall(bean, idPhotoMd5, featureMd5, token, callback));
  }

  @Override
  public void savePersons(List<PersonBean> beans, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new SavePersonsCall(beans, token, callback));
  }

  @Override
  public void savePersonsWithPhoto(Map<ByteString, PersonBean> persons, Token token,
      ServiceMethodCallback<Integer> callback) {
    this.enqueue(new SavePersonsWithPhotoCall(persons, token, callback));
  }

  @Override
  public void saveServiceConfig(Token token, ServiceMethodCallback<Void> callback) {
    this.enqueue(new SaveServiceConfigCall(token, callback));
  }

  @Override
  public void setPersonExpiryDate(Integer personId, Long expiryDate, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new SetPersonExpiryDateCall(personId, expiryDate, token, callback));
  }

  @Override
  public void setPersonExpiryDateList(List<Integer> personIdList, Long expiryDate, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new SetPersonExpiryDateListCall(personIdList, expiryDate, token, callback));
  }

  @Override
  public void setProperties(Map<String, String> config, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new SetPropertiesCall(config, token, callback));
  }

  @Override
  public void setProperty(String key, String value, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new SetPropertyCall(key, value, token, callback));
  }

  @Override
  public void unregisterDevice(Integer deviceId, Token token,
      ServiceMethodCallback<Void> callback) {
    this.enqueue(new UnregisterDeviceCall(deviceId, token, callback));
  }

  @Override
  public void updateDevice(DeviceBean deviceBean, Token token,
      ServiceMethodCallback<DeviceBean> callback) {
    this.enqueue(new UpdateDeviceCall(deviceBean, token, callback));
  }

  @Override
  public void version(ServiceMethodCallback<String> callback) {
    this.enqueue(new VersionCall(callback));
  }

  @Override
  public void versionInfo(ServiceMethodCallback<Map<String, String>> callback) {
    this.enqueue(new VersionInfoCall(callback));
  }

  private static final class AddFeatureCall extends MethodCall<FeatureBean> {
    private final ByteString feature;

    private final Integer personId;

    private final List<FaceBean> faecBeans;

    private final Token token;

    AddFeatureCall(ByteString feature, Integer personId, List<FaceBean> faecBeans, Token token,
        ServiceMethodCallback<FeatureBean> callback) {
      super("addFeature", TMessageType.CALL, callback);
      this.feature = feature;
      this.personId = personId;
      this.faecBeans = faecBeans;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.feature != null) {
        protocol.writeFieldBegin("feature", 1, TType.STRING);
        protocol.writeBinary(this.feature);
        protocol.writeFieldEnd();
      }
      if (this.personId != null) {
        protocol.writeFieldBegin("personId", 2, TType.I32);
        protocol.writeI32(this.personId);
        protocol.writeFieldEnd();
      }
      if (this.faecBeans != null) {
        protocol.writeFieldBegin("faecBeans", 3, TType.LIST);
        protocol.writeListBegin(TType.STRUCT, this.faecBeans.size());
        for (FaceBean item0 : this.faecBeans) {
          net.gdface.facelog.client.thrift.FaceBean.ADAPTER.write(protocol, item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 4, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected FeatureBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      FeatureBean result = null;
      DuplicateRecordException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.FeatureBean value = net.gdface.facelog.client.thrift.FeatureBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DuplicateRecordException value = net.gdface.facelog.client.thrift.DuplicateRecordException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class AddFeatureMultiCall extends MethodCall<FeatureBean> {
    private final ByteString feature;

    private final Integer personId;

    private final Map<ByteString, FaceBean> faceInfo;

    private final Integer deviceId;

    private final Token token;

    AddFeatureMultiCall(ByteString feature, Integer personId, Map<ByteString, FaceBean> faceInfo,
        Integer deviceId, Token token, ServiceMethodCallback<FeatureBean> callback) {
      super("addFeatureMulti", TMessageType.CALL, callback);
      this.feature = feature;
      this.personId = personId;
      this.faceInfo = faceInfo;
      this.deviceId = deviceId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.feature != null) {
        protocol.writeFieldBegin("feature", 1, TType.STRING);
        protocol.writeBinary(this.feature);
        protocol.writeFieldEnd();
      }
      if (this.personId != null) {
        protocol.writeFieldBegin("personId", 2, TType.I32);
        protocol.writeI32(this.personId);
        protocol.writeFieldEnd();
      }
      if (this.faceInfo != null) {
        protocol.writeFieldBegin("faceInfo", 3, TType.MAP);
        protocol.writeMapBegin(TType.STRING, TType.STRUCT, this.faceInfo.size());
        for (Map.Entry<ByteString, FaceBean> entry0 : this.faceInfo.entrySet()) {
          ByteString key0 = entry0.getKey();
          FaceBean value0 = entry0.getValue();
          protocol.writeBinary(key0);
          net.gdface.facelog.client.thrift.FaceBean.ADAPTER.write(protocol, value0);
        }
        protocol.writeMapEnd();
        protocol.writeFieldEnd();
      }
      if (this.deviceId != null) {
        protocol.writeFieldBegin("deviceId", 4, TType.I32);
        protocol.writeI32(this.deviceId);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 5, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected FeatureBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      FeatureBean result = null;
      DuplicateRecordException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.FeatureBean value = net.gdface.facelog.client.thrift.FeatureBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DuplicateRecordException value = net.gdface.facelog.client.thrift.DuplicateRecordException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class AddImageCall extends MethodCall<ImageBean> {
    private final ByteString imageData;

    private final Integer deviceId;

    private final FaceBean faceBean;

    private final Integer personId;

    private final Token token;

    AddImageCall(ByteString imageData, Integer deviceId, FaceBean faceBean, Integer personId,
        Token token, ServiceMethodCallback<ImageBean> callback) {
      super("addImage", TMessageType.CALL, callback);
      this.imageData = imageData;
      this.deviceId = deviceId;
      this.faceBean = faceBean;
      this.personId = personId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.imageData != null) {
        protocol.writeFieldBegin("imageData", 1, TType.STRING);
        protocol.writeBinary(this.imageData);
        protocol.writeFieldEnd();
      }
      if (this.deviceId != null) {
        protocol.writeFieldBegin("deviceId", 2, TType.I32);
        protocol.writeI32(this.deviceId);
        protocol.writeFieldEnd();
      }
      if (this.faceBean != null) {
        protocol.writeFieldBegin("faceBean", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.FaceBean.ADAPTER.write(protocol, this.faceBean);
        protocol.writeFieldEnd();
      }
      if (this.personId != null) {
        protocol.writeFieldBegin("personId", 4, TType.I32);
        protocol.writeI32(this.personId);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 5, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected ImageBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ImageBean result = null;
      DuplicateRecordException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ImageBean value = net.gdface.facelog.client.thrift.ImageBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DuplicateRecordException value = net.gdface.facelog.client.thrift.DuplicateRecordException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class AddLogCall extends MethodCall<Void> {
    private final LogBean bean;

    private final Token token;

    AddLogCall(LogBean bean, Token token, ServiceMethodCallback<Void> callback) {
      super("addLog", TMessageType.CALL, callback);
      this.bean = bean;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.bean != null) {
        protocol.writeFieldBegin("bean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.LogBean.ADAPTER.write(protocol, this.bean);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      DuplicateRecordException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DuplicateRecordException value = net.gdface.facelog.client.thrift.DuplicateRecordException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        return null;
      }
    }
  }

  private static final class AddLogsCall extends MethodCall<Void> {
    private final List<LogBean> beans;

    private final Token token;

    AddLogsCall(List<LogBean> beans, Token token, ServiceMethodCallback<Void> callback) {
      super("addLogs", TMessageType.CALL, callback);
      this.beans = beans;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.beans != null) {
        protocol.writeFieldBegin("beans", 1, TType.LIST);
        protocol.writeListBegin(TType.STRUCT, this.beans.size());
        for (LogBean item0 : this.beans) {
          net.gdface.facelog.client.thrift.LogBean.ADAPTER.write(protocol, item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      DuplicateRecordException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DuplicateRecordException value = net.gdface.facelog.client.thrift.DuplicateRecordException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        return null;
      }
    }
  }

  private static final class AddPermitCall extends MethodCall<Void> {
    private final DeviceGroupBean deviceGroup;

    private final PersonGroupBean personGroup;

    private final Token token;

    AddPermitCall(DeviceGroupBean deviceGroup, PersonGroupBean personGroup, Token token,
        ServiceMethodCallback<Void> callback) {
      super("addPermit", TMessageType.CALL, callback);
      this.deviceGroup = deviceGroup;
      this.personGroup = personGroup;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.deviceGroup != null) {
        protocol.writeFieldBegin("deviceGroup", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.DeviceGroupBean.ADAPTER.write(protocol, this.deviceGroup);
        protocol.writeFieldEnd();
      }
      if (this.personGroup != null) {
        protocol.writeFieldBegin("personGroup", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonGroupBean.ADAPTER.write(protocol, this.personGroup);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class AddPermitByIdCall extends MethodCall<Void> {
    private final Integer deviceGroupId;

    private final Integer personGroupId;

    private final Token token;

    AddPermitByIdCall(Integer deviceGroupId, Integer personGroupId, Token token,
        ServiceMethodCallback<Void> callback) {
      super("addPermitById", TMessageType.CALL, callback);
      if (deviceGroupId == null) throw new NullPointerException("deviceGroupId");
      this.deviceGroupId = deviceGroupId;
      if (personGroupId == null) throw new NullPointerException("personGroupId");
      this.personGroupId = personGroupId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceGroupId", 1, TType.I32);
      protocol.writeI32(this.deviceGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("personGroupId", 2, TType.I32);
      protocol.writeI32(this.personGroupId);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class ApplyAckChannelCall extends MethodCall<String> {
    private final Token token;

    ApplyAckChannelCall(Token token, ServiceMethodCallback<String> callback) {
      super("applyAckChannel", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected String receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      String result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRING) {
              String value = protocol.readString();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ApplyAckChannelWithDurationCall extends MethodCall<String> {
    private final Token token;

    private final Long duration;

    ApplyAckChannelWithDurationCall(Token token, Long duration,
        ServiceMethodCallback<String> callback) {
      super("applyAckChannelWithDuration", TMessageType.CALL, callback);
      this.token = token;
      if (duration == null) throw new NullPointerException("duration");
      this.duration = duration;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("duration", 2, TType.I64);
      protocol.writeI64(this.duration);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected String receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      String result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRING) {
              String value = protocol.readString();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ApplyCmdSnCall extends MethodCall<Long> {
    private final Token token;

    ApplyCmdSnCall(Token token, ServiceMethodCallback<Long> callback) {
      super("applyCmdSn", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Long receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Long result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I64) {
              long value = protocol.readI64();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ApplyPersonTokenCall extends MethodCall<Token> {
    private final Integer personId;

    private final String password;

    private final Boolean isMd5;

    ApplyPersonTokenCall(Integer personId, String password, Boolean isMd5,
        ServiceMethodCallback<Token> callback) {
      super("applyPersonToken", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
      this.password = password;
      if (isMd5 == null) throw new NullPointerException("isMd5");
      this.isMd5 = isMd5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      if (this.password != null) {
        protocol.writeFieldBegin("password", 2, TType.STRING);
        protocol.writeString(this.password);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("isMd5", 3, TType.BOOL);
      protocol.writeBool(this.isMd5);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Token receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Token result = null;
      ServiceSecurityException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.Token value = net.gdface.facelog.client.thrift.Token.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceSecurityException value = net.gdface.facelog.client.thrift.ServiceSecurityException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ApplyRootTokenCall extends MethodCall<Token> {
    private final String password;

    private final Boolean isMd5;

    ApplyRootTokenCall(String password, Boolean isMd5, ServiceMethodCallback<Token> callback) {
      super("applyRootToken", TMessageType.CALL, callback);
      this.password = password;
      if (isMd5 == null) throw new NullPointerException("isMd5");
      this.isMd5 = isMd5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.password != null) {
        protocol.writeFieldBegin("password", 1, TType.STRING);
        protocol.writeString(this.password);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("isMd5", 2, TType.BOOL);
      protocol.writeBool(this.isMd5);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Token receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Token result = null;
      ServiceSecurityException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.Token value = net.gdface.facelog.client.thrift.Token.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceSecurityException value = net.gdface.facelog.client.thrift.ServiceSecurityException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class CountDeviceByWhereCall extends MethodCall<Integer> {
    private final String where;

    CountDeviceByWhereCall(String where, ServiceMethodCallback<Integer> callback) {
      super("countDeviceByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class CountDeviceGroupByWhereCall extends MethodCall<Integer> {
    private final String where;

    CountDeviceGroupByWhereCall(String where, ServiceMethodCallback<Integer> callback) {
      super("countDeviceGroupByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class CountLogByWhereCall extends MethodCall<Integer> {
    private final String where;

    CountLogByWhereCall(String where, ServiceMethodCallback<Integer> callback) {
      super("countLogByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class CountLogLightByVerifyTimeCall extends MethodCall<Integer> {
    private final Long timestamp;

    CountLogLightByVerifyTimeCall(Long timestamp, ServiceMethodCallback<Integer> callback) {
      super("countLogLightByVerifyTime", TMessageType.CALL, callback);
      if (timestamp == null) throw new NullPointerException("timestamp");
      this.timestamp = timestamp;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("timestamp", 1, TType.I64);
      protocol.writeI64(this.timestamp);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class CountLogLightByWhereCall extends MethodCall<Integer> {
    private final String where;

    CountLogLightByWhereCall(String where, ServiceMethodCallback<Integer> callback) {
      super("countLogLightByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class CountPersonByWhereCall extends MethodCall<Integer> {
    private final String where;

    CountPersonByWhereCall(String where, ServiceMethodCallback<Integer> callback) {
      super("countPersonByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class CountPersonGroupByWhereCall extends MethodCall<Integer> {
    private final String where;

    CountPersonGroupByWhereCall(String where, ServiceMethodCallback<Integer> callback) {
      super("countPersonGroupByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeleteAllFeaturesByPersonIdCall extends MethodCall<Integer> {
    private final Integer personId;

    private final Boolean deleteImage;

    private final Token token;

    DeleteAllFeaturesByPersonIdCall(Integer personId, Boolean deleteImage, Token token,
        ServiceMethodCallback<Integer> callback) {
      super("deleteAllFeaturesByPersonId", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
      if (deleteImage == null) throw new NullPointerException("deleteImage");
      this.deleteImage = deleteImage;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("deleteImage", 2, TType.BOOL);
      protocol.writeBool(this.deleteImage);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeleteDeviceGroupCall extends MethodCall<Integer> {
    private final Integer deviceGroupId;

    private final Token token;

    DeleteDeviceGroupCall(Integer deviceGroupId, Token token,
        ServiceMethodCallback<Integer> callback) {
      super("deleteDeviceGroup", TMessageType.CALL, callback);
      if (deviceGroupId == null) throw new NullPointerException("deviceGroupId");
      this.deviceGroupId = deviceGroupId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceGroupId", 1, TType.I32);
      protocol.writeI32(this.deviceGroupId);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeleteFeatureCall extends MethodCall<List<String>> {
    private final String featureMd5;

    private final Boolean deleteImage;

    private final Token token;

    DeleteFeatureCall(String featureMd5, Boolean deleteImage, Token token,
        ServiceMethodCallback<List<String>> callback) {
      super("deleteFeature", TMessageType.CALL, callback);
      this.featureMd5 = featureMd5;
      if (deleteImage == null) throw new NullPointerException("deleteImage");
      this.deleteImage = deleteImage;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.featureMd5 != null) {
        protocol.writeFieldBegin("featureMd5", 1, TType.STRING);
        protocol.writeString(this.featureMd5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("deleteImage", 2, TType.BOOL);
      protocol.writeBool(this.deleteImage);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<String> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<String> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<String> value = new ArrayList<String>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                String item0 = protocol.readString();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeleteImageCall extends MethodCall<Integer> {
    private final String imageMd5;

    private final Token token;

    DeleteImageCall(String imageMd5, Token token, ServiceMethodCallback<Integer> callback) {
      super("deleteImage", TMessageType.CALL, callback);
      this.imageMd5 = imageMd5;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.imageMd5 != null) {
        protocol.writeFieldBegin("imageMd5", 1, TType.STRING);
        protocol.writeString(this.imageMd5);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeletePermitCall extends MethodCall<Integer> {
    private final DeviceGroupBean deviceGroup;

    private final PersonGroupBean personGroup;

    private final Token token;

    DeletePermitCall(DeviceGroupBean deviceGroup, PersonGroupBean personGroup, Token token,
        ServiceMethodCallback<Integer> callback) {
      super("deletePermit", TMessageType.CALL, callback);
      this.deviceGroup = deviceGroup;
      this.personGroup = personGroup;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.deviceGroup != null) {
        protocol.writeFieldBegin("deviceGroup", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.DeviceGroupBean.ADAPTER.write(protocol, this.deviceGroup);
        protocol.writeFieldEnd();
      }
      if (this.personGroup != null) {
        protocol.writeFieldBegin("personGroup", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonGroupBean.ADAPTER.write(protocol, this.personGroup);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeletePersonCall extends MethodCall<Integer> {
    private final Integer personId;

    private final Token token;

    DeletePersonCall(Integer personId, Token token, ServiceMethodCallback<Integer> callback) {
      super("deletePerson", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeletePersonByPapersNumCall extends MethodCall<Integer> {
    private final String papersNum;

    private final Token token;

    DeletePersonByPapersNumCall(String papersNum, Token token,
        ServiceMethodCallback<Integer> callback) {
      super("deletePersonByPapersNum", TMessageType.CALL, callback);
      this.papersNum = papersNum;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.papersNum != null) {
        protocol.writeFieldBegin("papersNum", 1, TType.STRING);
        protocol.writeString(this.papersNum);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeletePersonGroupCall extends MethodCall<Integer> {
    private final Integer personGroupId;

    private final Token token;

    DeletePersonGroupCall(Integer personGroupId, Token token,
        ServiceMethodCallback<Integer> callback) {
      super("deletePersonGroup", TMessageType.CALL, callback);
      if (personGroupId == null) throw new NullPointerException("personGroupId");
      this.personGroupId = personGroupId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personGroupId", 1, TType.I32);
      protocol.writeI32(this.personGroupId);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeletePersonsCall extends MethodCall<Integer> {
    private final List<Integer> personIdList;

    private final Token token;

    DeletePersonsCall(List<Integer> personIdList, Token token,
        ServiceMethodCallback<Integer> callback) {
      super("deletePersons", TMessageType.CALL, callback);
      this.personIdList = personIdList;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.personIdList != null) {
        protocol.writeFieldBegin("personIdList", 1, TType.LIST);
        protocol.writeListBegin(TType.I32, this.personIdList.size());
        for (Integer item0 : this.personIdList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DeletePersonsByPapersNumCall extends MethodCall<Integer> {
    private final List<String> papersNumlist;

    private final Token token;

    DeletePersonsByPapersNumCall(List<String> papersNumlist, Token token,
        ServiceMethodCallback<Integer> callback) {
      super("deletePersonsByPapersNum", TMessageType.CALL, callback);
      this.papersNumlist = papersNumlist;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.papersNumlist != null) {
        protocol.writeFieldBegin("papersNumlist", 1, TType.LIST);
        protocol.writeListBegin(TType.STRING, this.papersNumlist.size());
        for (String item0 : this.papersNumlist) {
          protocol.writeString(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class DisablePersonCall extends MethodCall<Void> {
    private final Integer personId;

    private final Token token;

    DisablePersonCall(Integer personId, Token token, ServiceMethodCallback<Void> callback) {
      super("disablePerson", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class DisablePersonListCall extends MethodCall<Void> {
    private final List<Integer> personIdList;

    private final Token token;

    DisablePersonListCall(List<Integer> personIdList, Token token,
        ServiceMethodCallback<Void> callback) {
      super("disablePersonList", TMessageType.CALL, callback);
      this.personIdList = personIdList;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.personIdList != null) {
        protocol.writeFieldBegin("personIdList", 1, TType.LIST);
        protocol.writeListBegin(TType.I32, this.personIdList.size());
        for (Integer item0 : this.personIdList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class ExistsDeviceCall extends MethodCall<Boolean> {
    private final Integer id;

    ExistsDeviceCall(Integer id, ServiceMethodCallback<Boolean> callback) {
      super("existsDevice", TMessageType.CALL, callback);
      if (id == null) throw new NullPointerException("id");
      this.id = id;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("id", 1, TType.I32);
      protocol.writeI32(this.id);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ExistsFeatureCall extends MethodCall<Boolean> {
    private final String md5;

    ExistsFeatureCall(String md5, ServiceMethodCallback<Boolean> callback) {
      super("existsFeature", TMessageType.CALL, callback);
      this.md5 = md5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.md5 != null) {
        protocol.writeFieldBegin("md5", 1, TType.STRING);
        protocol.writeString(this.md5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ExistsImageCall extends MethodCall<Boolean> {
    private final String md5;

    ExistsImageCall(String md5, ServiceMethodCallback<Boolean> callback) {
      super("existsImage", TMessageType.CALL, callback);
      this.md5 = md5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.md5 != null) {
        protocol.writeFieldBegin("md5", 1, TType.STRING);
        protocol.writeString(this.md5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ExistsPersonCall extends MethodCall<Boolean> {
    private final Integer persionId;

    ExistsPersonCall(Integer persionId, ServiceMethodCallback<Boolean> callback) {
      super("existsPerson", TMessageType.CALL, callback);
      if (persionId == null) throw new NullPointerException("persionId");
      this.persionId = persionId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("persionId", 1, TType.I32);
      protocol.writeI32(this.persionId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetDeviceCall extends MethodCall<DeviceBean> {
    private final Integer deviceId;

    GetDeviceCall(Integer deviceId, ServiceMethodCallback<DeviceBean> callback) {
      super("getDevice", TMessageType.CALL, callback);
      if (deviceId == null) throw new NullPointerException("deviceId");
      this.deviceId = deviceId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceId", 1, TType.I32);
      protocol.writeI32(this.deviceId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected DeviceBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      DeviceBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DeviceBean value = net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetDeviceGroupCall extends MethodCall<DeviceGroupBean> {
    private final Integer deviceGroupId;

    GetDeviceGroupCall(Integer deviceGroupId, ServiceMethodCallback<DeviceGroupBean> callback) {
      super("getDeviceGroup", TMessageType.CALL, callback);
      if (deviceGroupId == null) throw new NullPointerException("deviceGroupId");
      this.deviceGroupId = deviceGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceGroupId", 1, TType.I32);
      protocol.writeI32(this.deviceGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected DeviceGroupBean receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      DeviceGroupBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DeviceGroupBean value = net.gdface.facelog.client.thrift.DeviceGroupBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetDeviceGroupsCall extends MethodCall<List<DeviceGroupBean>> {
    private final List<Integer> groupIdList;

    GetDeviceGroupsCall(List<Integer> groupIdList,
        ServiceMethodCallback<List<DeviceGroupBean>> callback) {
      super("getDeviceGroups", TMessageType.CALL, callback);
      this.groupIdList = groupIdList;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.groupIdList != null) {
        protocol.writeFieldBegin("groupIdList", 1, TType.LIST);
        protocol.writeListBegin(TType.I32, this.groupIdList.size());
        for (Integer item0 : this.groupIdList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<DeviceGroupBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<DeviceGroupBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<DeviceGroupBean> value = new ArrayList<DeviceGroupBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.DeviceGroupBean item0 = net.gdface.facelog.client.thrift.DeviceGroupBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetDeviceGroupsBelongsCall extends MethodCall<List<Integer>> {
    private final Integer deviceId;

    GetDeviceGroupsBelongsCall(Integer deviceId, ServiceMethodCallback<List<Integer>> callback) {
      super("getDeviceGroupsBelongs", TMessageType.CALL, callback);
      if (deviceId == null) throw new NullPointerException("deviceId");
      this.deviceId = deviceId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceId", 1, TType.I32);
      protocol.writeI32(this.deviceId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetDeviceGroupsPermitCall extends MethodCall<List<Integer>> {
    private final Integer personGroupId;

    GetDeviceGroupsPermitCall(Integer personGroupId,
        ServiceMethodCallback<List<Integer>> callback) {
      super("getDeviceGroupsPermit", TMessageType.CALL, callback);
      this.personGroupId = personGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.personGroupId != null) {
        protocol.writeFieldBegin("personGroupId", 1, TType.I32);
        protocol.writeI32(this.personGroupId);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetDeviceIdOfFeatureCall extends MethodCall<Integer> {
    private final String featureMd5;

    GetDeviceIdOfFeatureCall(String featureMd5, ServiceMethodCallback<Integer> callback) {
      super("getDeviceIdOfFeature", TMessageType.CALL, callback);
      this.featureMd5 = featureMd5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.featureMd5 != null) {
        protocol.writeFieldBegin("featureMd5", 1, TType.STRING);
        protocol.writeString(this.featureMd5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetDevicesCall extends MethodCall<List<DeviceBean>> {
    private final List<Integer> idList;

    GetDevicesCall(List<Integer> idList, ServiceMethodCallback<List<DeviceBean>> callback) {
      super("getDevices", TMessageType.CALL, callback);
      this.idList = idList;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.idList != null) {
        protocol.writeFieldBegin("idList", 1, TType.LIST);
        protocol.writeListBegin(TType.I32, this.idList.size());
        for (Integer item0 : this.idList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<DeviceBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<DeviceBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<DeviceBean> value = new ArrayList<DeviceBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.DeviceBean item0 = net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetDevicesOfGroupCall extends MethodCall<List<Integer>> {
    private final Integer deviceGroupId;

    GetDevicesOfGroupCall(Integer deviceGroupId, ServiceMethodCallback<List<Integer>> callback) {
      super("getDevicesOfGroup", TMessageType.CALL, callback);
      if (deviceGroupId == null) throw new NullPointerException("deviceGroupId");
      this.deviceGroupId = deviceGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceGroupId", 1, TType.I32);
      protocol.writeI32(this.deviceGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetFeatureCall extends MethodCall<FeatureBean> {
    private final String md5;

    GetFeatureCall(String md5, ServiceMethodCallback<FeatureBean> callback) {
      super("getFeature", TMessageType.CALL, callback);
      this.md5 = md5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.md5 != null) {
        protocol.writeFieldBegin("md5", 1, TType.STRING);
        protocol.writeString(this.md5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected FeatureBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      FeatureBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.FeatureBean value = net.gdface.facelog.client.thrift.FeatureBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetFeatureBeansByPersonIdCall extends MethodCall<List<String>> {
    private final Integer personId;

    GetFeatureBeansByPersonIdCall(Integer personId, ServiceMethodCallback<List<String>> callback) {
      super("getFeatureBeansByPersonId", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<String> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<String> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<String> value = new ArrayList<String>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                String item0 = protocol.readString();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetFeatureBytesCall extends MethodCall<ByteString> {
    private final String md5;

    GetFeatureBytesCall(String md5, ServiceMethodCallback<ByteString> callback) {
      super("getFeatureBytes", TMessageType.CALL, callback);
      this.md5 = md5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.md5 != null) {
        protocol.writeFieldBegin("md5", 1, TType.STRING);
        protocol.writeString(this.md5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected ByteString receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ByteString result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRING) {
              ByteString value = protocol.readBinary();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetFeaturesCall extends MethodCall<List<FeatureBean>> {
    private final List<String> md5;

    GetFeaturesCall(List<String> md5, ServiceMethodCallback<List<FeatureBean>> callback) {
      super("getFeatures", TMessageType.CALL, callback);
      this.md5 = md5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.md5 != null) {
        protocol.writeFieldBegin("md5", 1, TType.LIST);
        protocol.writeListBegin(TType.STRING, this.md5.size());
        for (String item0 : this.md5) {
          protocol.writeString(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<FeatureBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<FeatureBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<FeatureBean> value = new ArrayList<FeatureBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.FeatureBean item0 = net.gdface.facelog.client.thrift.FeatureBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetFeaturesOfPersonCall extends MethodCall<List<String>> {
    private final Integer personId;

    GetFeaturesOfPersonCall(Integer personId, ServiceMethodCallback<List<String>> callback) {
      super("getFeaturesOfPerson", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<String> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<String> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<String> value = new ArrayList<String>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                String item0 = protocol.readString();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetGroupPermitCall extends MethodCall<Boolean> {
    private final Integer deviceId;

    private final Integer personGroupId;

    GetGroupPermitCall(Integer deviceId, Integer personGroupId,
        ServiceMethodCallback<Boolean> callback) {
      super("getGroupPermit", TMessageType.CALL, callback);
      if (deviceId == null) throw new NullPointerException("deviceId");
      this.deviceId = deviceId;
      if (personGroupId == null) throw new NullPointerException("personGroupId");
      this.personGroupId = personGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceId", 1, TType.I32);
      protocol.writeI32(this.deviceId);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("personGroupId", 2, TType.I32);
      protocol.writeI32(this.personGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetGroupPermitsCall extends MethodCall<List<Boolean>> {
    private final Integer deviceId;

    private final List<Integer> personGroupIdList;

    GetGroupPermitsCall(Integer deviceId, List<Integer> personGroupIdList,
        ServiceMethodCallback<List<Boolean>> callback) {
      super("getGroupPermits", TMessageType.CALL, callback);
      if (deviceId == null) throw new NullPointerException("deviceId");
      this.deviceId = deviceId;
      this.personGroupIdList = personGroupIdList;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceId", 1, TType.I32);
      protocol.writeI32(this.deviceId);
      protocol.writeFieldEnd();
      if (this.personGroupIdList != null) {
        protocol.writeFieldBegin("personGroupIdList", 2, TType.LIST);
        protocol.writeListBegin(TType.I32, this.personGroupIdList.size());
        for (Integer item0 : this.personGroupIdList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Boolean> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Boolean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Boolean> value = new ArrayList<Boolean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                boolean item0 = protocol.readBool();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetImageCall extends MethodCall<ImageBean> {
    private final String imageMD5;

    GetImageCall(String imageMD5, ServiceMethodCallback<ImageBean> callback) {
      super("getImage", TMessageType.CALL, callback);
      this.imageMD5 = imageMD5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.imageMD5 != null) {
        protocol.writeFieldBegin("imageMD5", 1, TType.STRING);
        protocol.writeString(this.imageMD5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected ImageBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ImageBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ImageBean value = net.gdface.facelog.client.thrift.ImageBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetImageBytesCall extends MethodCall<ByteString> {
    private final String imageMD5;

    GetImageBytesCall(String imageMD5, ServiceMethodCallback<ByteString> callback) {
      super("getImageBytes", TMessageType.CALL, callback);
      this.imageMD5 = imageMD5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.imageMD5 != null) {
        protocol.writeFieldBegin("imageMD5", 1, TType.STRING);
        protocol.writeString(this.imageMD5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected ByteString receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ByteString result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRING) {
              ByteString value = protocol.readBinary();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetImagesAssociatedByFeatureCall extends MethodCall<List<String>> {
    private final String featureMd5;

    GetImagesAssociatedByFeatureCall(String featureMd5,
        ServiceMethodCallback<List<String>> callback) {
      super("getImagesAssociatedByFeature", TMessageType.CALL, callback);
      this.featureMd5 = featureMd5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.featureMd5 != null) {
        protocol.writeFieldBegin("featureMd5", 1, TType.STRING);
        protocol.writeString(this.featureMd5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<String> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<String> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<String> value = new ArrayList<String>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                String item0 = protocol.readString();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetLogBeansByPersonIdCall extends MethodCall<List<LogBean>> {
    private final Integer personId;

    GetLogBeansByPersonIdCall(Integer personId, ServiceMethodCallback<List<LogBean>> callback) {
      super("getLogBeansByPersonId", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<LogBean> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<LogBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<LogBean> value = new ArrayList<LogBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.LogBean item0 = net.gdface.facelog.client.thrift.LogBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonCall extends MethodCall<PersonBean> {
    private final Integer personId;

    GetPersonCall(Integer personId, ServiceMethodCallback<PersonBean> callback) {
      super("getPerson", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonByPapersNumCall extends MethodCall<PersonBean> {
    private final String papersNum;

    GetPersonByPapersNumCall(String papersNum, ServiceMethodCallback<PersonBean> callback) {
      super("getPersonByPapersNum", TMessageType.CALL, callback);
      this.papersNum = papersNum;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.papersNum != null) {
        protocol.writeFieldBegin("papersNum", 1, TType.STRING);
        protocol.writeString(this.papersNum);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonGroupCall extends MethodCall<PersonGroupBean> {
    private final Integer personGroupId;

    GetPersonGroupCall(Integer personGroupId, ServiceMethodCallback<PersonGroupBean> callback) {
      super("getPersonGroup", TMessageType.CALL, callback);
      if (personGroupId == null) throw new NullPointerException("personGroupId");
      this.personGroupId = personGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personGroupId", 1, TType.I32);
      protocol.writeI32(this.personGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonGroupBean receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      PersonGroupBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonGroupBean value = net.gdface.facelog.client.thrift.PersonGroupBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonGroupsCall extends MethodCall<List<PersonGroupBean>> {
    private final List<Integer> groupIdList;

    GetPersonGroupsCall(List<Integer> groupIdList,
        ServiceMethodCallback<List<PersonGroupBean>> callback) {
      super("getPersonGroups", TMessageType.CALL, callback);
      this.groupIdList = groupIdList;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.groupIdList != null) {
        protocol.writeFieldBegin("groupIdList", 1, TType.LIST);
        protocol.writeListBegin(TType.I32, this.groupIdList.size());
        for (Integer item0 : this.groupIdList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<PersonGroupBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<PersonGroupBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<PersonGroupBean> value = new ArrayList<PersonGroupBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.PersonGroupBean item0 = net.gdface.facelog.client.thrift.PersonGroupBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonGroupsBelongsCall extends MethodCall<List<Integer>> {
    private final Integer personId;

    GetPersonGroupsBelongsCall(Integer personId, ServiceMethodCallback<List<Integer>> callback) {
      super("getPersonGroupsBelongs", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonGroupsPermittedByCall extends MethodCall<List<Integer>> {
    private final Integer deviceGroupId;

    GetPersonGroupsPermittedByCall(Integer deviceGroupId,
        ServiceMethodCallback<List<Integer>> callback) {
      super("getPersonGroupsPermittedBy", TMessageType.CALL, callback);
      this.deviceGroupId = deviceGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.deviceGroupId != null) {
        protocol.writeFieldBegin("deviceGroupId", 1, TType.I32);
        protocol.writeI32(this.deviceGroupId);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonPermitCall extends MethodCall<Boolean> {
    private final Integer deviceId;

    private final Integer personId;

    GetPersonPermitCall(Integer deviceId, Integer personId,
        ServiceMethodCallback<Boolean> callback) {
      super("getPersonPermit", TMessageType.CALL, callback);
      if (deviceId == null) throw new NullPointerException("deviceId");
      this.deviceId = deviceId;
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceId", 1, TType.I32);
      protocol.writeI32(this.deviceId);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("personId", 2, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonPermitsCall extends MethodCall<List<Boolean>> {
    private final Integer deviceId;

    private final List<Integer> personIdList;

    GetPersonPermitsCall(Integer deviceId, List<Integer> personIdList,
        ServiceMethodCallback<List<Boolean>> callback) {
      super("getPersonPermits", TMessageType.CALL, callback);
      if (deviceId == null) throw new NullPointerException("deviceId");
      this.deviceId = deviceId;
      this.personIdList = personIdList;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceId", 1, TType.I32);
      protocol.writeI32(this.deviceId);
      protocol.writeFieldEnd();
      if (this.personIdList != null) {
        protocol.writeFieldBegin("personIdList", 2, TType.LIST);
        protocol.writeListBegin(TType.I32, this.personIdList.size());
        for (Integer item0 : this.personIdList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Boolean> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Boolean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Boolean> value = new ArrayList<Boolean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                boolean item0 = protocol.readBool();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonsCall extends MethodCall<List<PersonBean>> {
    private final List<Integer> idList;

    GetPersonsCall(List<Integer> idList, ServiceMethodCallback<List<PersonBean>> callback) {
      super("getPersons", TMessageType.CALL, callback);
      this.idList = idList;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.idList != null) {
        protocol.writeFieldBegin("idList", 1, TType.LIST);
        protocol.writeListBegin(TType.I32, this.idList.size());
        for (Integer item0 : this.idList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<PersonBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<PersonBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<PersonBean> value = new ArrayList<PersonBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.PersonBean item0 = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPersonsOfGroupCall extends MethodCall<List<Integer>> {
    private final Integer personGroupId;

    GetPersonsOfGroupCall(Integer personGroupId, ServiceMethodCallback<List<Integer>> callback) {
      super("getPersonsOfGroup", TMessageType.CALL, callback);
      if (personGroupId == null) throw new NullPointerException("personGroupId");
      this.personGroupId = personGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personGroupId", 1, TType.I32);
      protocol.writeI32(this.personGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetPropertyCall extends MethodCall<String> {
    private final String key;

    private final Token token;

    GetPropertyCall(String key, Token token, ServiceMethodCallback<String> callback) {
      super("getProperty", TMessageType.CALL, callback);
      this.key = key;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.key != null) {
        protocol.writeFieldBegin("key", 1, TType.STRING);
        protocol.writeString(this.key);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected String receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      String result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRING) {
              String value = protocol.readString();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetRedisParametersCall extends MethodCall<Map<MQParam, String>> {
    private final Token token;

    GetRedisParametersCall(Token token, ServiceMethodCallback<Map<MQParam, String>> callback) {
      super("getRedisParameters", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Map<MQParam, String> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      Map<MQParam, String> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.MAP) {
              MapMetadata mapMetadata0 = protocol.readMapBegin();
              Map<MQParam, String> value = new HashMap<MQParam, String>(mapMetadata0.size);
              for (int i0 = 0; i0 < mapMetadata0.size; ++i0) {
                int i32_1 = protocol.readI32();
                net.gdface.facelog.client.thrift.MQParam key0 = net.gdface.facelog.client.thrift.MQParam.findByValue(i32_1);
                if (key0 == null) {
                  throw new ThriftException(ThriftException.Kind.PROTOCOL_ERROR, "Unexpected value for enum-type MQParam: " + i32_1);
                }
                String value0 = protocol.readString();
                value.put(key0, value0);
              }
              protocol.readMapEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetServiceConfigCall extends MethodCall<Map<String, String>> {
    private final Token token;

    GetServiceConfigCall(Token token, ServiceMethodCallback<Map<String, String>> callback) {
      super("getServiceConfig", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Map<String, String> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      Map<String, String> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.MAP) {
              MapMetadata mapMetadata0 = protocol.readMapBegin();
              Map<String, String> value = new HashMap<String, String>(mapMetadata0.size);
              for (int i0 = 0; i0 < mapMetadata0.size; ++i0) {
                String key0 = protocol.readString();
                String value0 = protocol.readString();
                value.put(key0, value0);
              }
              protocol.readMapEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetSubDeviceGroupCall extends MethodCall<List<Integer>> {
    private final Integer deviceGroupId;

    GetSubDeviceGroupCall(Integer deviceGroupId, ServiceMethodCallback<List<Integer>> callback) {
      super("getSubDeviceGroup", TMessageType.CALL, callback);
      if (deviceGroupId == null) throw new NullPointerException("deviceGroupId");
      this.deviceGroupId = deviceGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceGroupId", 1, TType.I32);
      protocol.writeI32(this.deviceGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class GetSubPersonGroupCall extends MethodCall<List<Integer>> {
    private final Integer personGroupId;

    GetSubPersonGroupCall(Integer personGroupId, ServiceMethodCallback<List<Integer>> callback) {
      super("getSubPersonGroup", TMessageType.CALL, callback);
      if (personGroupId == null) throw new NullPointerException("personGroupId");
      this.personGroupId = personGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personGroupId", 1, TType.I32);
      protocol.writeI32(this.personGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class IsDisableCall extends MethodCall<Boolean> {
    private final Integer personId;

    IsDisableCall(Integer personId, ServiceMethodCallback<Boolean> callback) {
      super("isDisable", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class IsLocalCall extends MethodCall<Boolean> {
    IsLocalCall(ServiceMethodCallback<Boolean> callback) {
      super("isLocal", TMessageType.CALL, callback);
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class IsValidAckChannelCall extends MethodCall<Boolean> {
    private final String ackChannel;

    IsValidAckChannelCall(String ackChannel, ServiceMethodCallback<Boolean> callback) {
      super("isValidAckChannel", TMessageType.CALL, callback);
      this.ackChannel = ackChannel;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.ackChannel != null) {
        protocol.writeFieldBegin("ackChannel", 1, TType.STRING);
        protocol.writeString(this.ackChannel);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class IsValidCmdSnCall extends MethodCall<Boolean> {
    private final Long cmdSn;

    IsValidCmdSnCall(Long cmdSn, ServiceMethodCallback<Boolean> callback) {
      super("isValidCmdSn", TMessageType.CALL, callback);
      if (cmdSn == null) throw new NullPointerException("cmdSn");
      this.cmdSn = cmdSn;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("cmdSn", 1, TType.I64);
      protocol.writeI64(this.cmdSn);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class IsValidDeviceTokenCall extends MethodCall<Boolean> {
    private final Token token;

    IsValidDeviceTokenCall(Token token, ServiceMethodCallback<Boolean> callback) {
      super("isValidDeviceToken", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class IsValidPasswordCall extends MethodCall<Boolean> {
    private final String userId;

    private final String password;

    private final Boolean isMd5;

    IsValidPasswordCall(String userId, String password, Boolean isMd5,
        ServiceMethodCallback<Boolean> callback) {
      super("isValidPassword", TMessageType.CALL, callback);
      this.userId = userId;
      this.password = password;
      if (isMd5 == null) throw new NullPointerException("isMd5");
      this.isMd5 = isMd5;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.userId != null) {
        protocol.writeFieldBegin("userId", 1, TType.STRING);
        protocol.writeString(this.userId);
        protocol.writeFieldEnd();
      }
      if (this.password != null) {
        protocol.writeFieldBegin("password", 2, TType.STRING);
        protocol.writeString(this.password);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("isMd5", 3, TType.BOOL);
      protocol.writeBool(this.isMd5);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class IsValidPersonTokenCall extends MethodCall<Boolean> {
    private final Token token;

    IsValidPersonTokenCall(Token token, ServiceMethodCallback<Boolean> callback) {
      super("isValidPersonToken", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class IsValidRootTokenCall extends MethodCall<Boolean> {
    private final Token token;

    IsValidRootTokenCall(Token token, ServiceMethodCallback<Boolean> callback) {
      super("isValidRootToken", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Boolean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Boolean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ListOfParentForDeviceGroupCall extends MethodCall<List<Integer>> {
    private final Integer deviceGroupId;

    ListOfParentForDeviceGroupCall(Integer deviceGroupId,
        ServiceMethodCallback<List<Integer>> callback) {
      super("listOfParentForDeviceGroup", TMessageType.CALL, callback);
      if (deviceGroupId == null) throw new NullPointerException("deviceGroupId");
      this.deviceGroupId = deviceGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceGroupId", 1, TType.I32);
      protocol.writeI32(this.deviceGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ListOfParentForPersonGroupCall extends MethodCall<List<Integer>> {
    private final Integer personGroupId;

    ListOfParentForPersonGroupCall(Integer personGroupId,
        ServiceMethodCallback<List<Integer>> callback) {
      super("listOfParentForPersonGroup", TMessageType.CALL, callback);
      if (personGroupId == null) throw new NullPointerException("personGroupId");
      this.personGroupId = personGroupId;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personGroupId", 1, TType.I32);
      protocol.writeI32(this.personGroupId);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadAllPersonCall extends MethodCall<List<Integer>> {
    LoadAllPersonCall(ServiceMethodCallback<List<Integer>> callback) {
      super("loadAllPerson", TMessageType.CALL, callback);
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadDeviceByWhereCall extends MethodCall<List<DeviceBean>> {
    private final String where;

    private final Integer startRow;

    private final Integer numRows;

    LoadDeviceByWhereCall(String where, Integer startRow, Integer numRows,
        ServiceMethodCallback<List<DeviceBean>> callback) {
      super("loadDeviceByWhere", TMessageType.CALL, callback);
      this.where = where;
      if (startRow == null) throw new NullPointerException("startRow");
      this.startRow = startRow;
      if (numRows == null) throw new NullPointerException("numRows");
      this.numRows = numRows;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("startRow", 2, TType.I32);
      protocol.writeI32(this.startRow);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("numRows", 3, TType.I32);
      protocol.writeI32(this.numRows);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<DeviceBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<DeviceBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<DeviceBean> value = new ArrayList<DeviceBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.DeviceBean item0 = net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadDeviceGroupByWhereCall extends MethodCall<List<Integer>> {
    private final String where;

    private final Integer startRow;

    private final Integer numRows;

    LoadDeviceGroupByWhereCall(String where, Integer startRow, Integer numRows,
        ServiceMethodCallback<List<Integer>> callback) {
      super("loadDeviceGroupByWhere", TMessageType.CALL, callback);
      this.where = where;
      if (startRow == null) throw new NullPointerException("startRow");
      this.startRow = startRow;
      if (numRows == null) throw new NullPointerException("numRows");
      this.numRows = numRows;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("startRow", 2, TType.I32);
      protocol.writeI32(this.startRow);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("numRows", 3, TType.I32);
      protocol.writeI32(this.numRows);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadDeviceGroupIdByWhereCall extends MethodCall<List<Integer>> {
    private final String where;

    LoadDeviceGroupIdByWhereCall(String where, ServiceMethodCallback<List<Integer>> callback) {
      super("loadDeviceGroupIdByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadDeviceIdByWhereCall extends MethodCall<List<Integer>> {
    private final String where;

    LoadDeviceIdByWhereCall(String where, ServiceMethodCallback<List<Integer>> callback) {
      super("loadDeviceIdByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadFeatureMd5ByUpdateCall extends MethodCall<List<String>> {
    private final Long timestamp;

    LoadFeatureMd5ByUpdateCall(Long timestamp, ServiceMethodCallback<List<String>> callback) {
      super("loadFeatureMd5ByUpdate", TMessageType.CALL, callback);
      if (timestamp == null) throw new NullPointerException("timestamp");
      this.timestamp = timestamp;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("timestamp", 1, TType.I64);
      protocol.writeI64(this.timestamp);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<String> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<String> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<String> value = new ArrayList<String>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                String item0 = protocol.readString();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadLogByWhereCall extends MethodCall<List<LogBean>> {
    private final String where;

    private final Integer startRow;

    private final Integer numRows;

    LoadLogByWhereCall(String where, Integer startRow, Integer numRows,
        ServiceMethodCallback<List<LogBean>> callback) {
      super("loadLogByWhere", TMessageType.CALL, callback);
      this.where = where;
      if (startRow == null) throw new NullPointerException("startRow");
      this.startRow = startRow;
      if (numRows == null) throw new NullPointerException("numRows");
      this.numRows = numRows;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("startRow", 2, TType.I32);
      protocol.writeI32(this.startRow);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("numRows", 3, TType.I32);
      protocol.writeI32(this.numRows);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<LogBean> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<LogBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<LogBean> value = new ArrayList<LogBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.LogBean item0 = net.gdface.facelog.client.thrift.LogBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadLogLightByVerifyTimeCall extends MethodCall<List<LogLightBean>> {
    private final Long timestamp;

    private final Integer startRow;

    private final Integer numRows;

    LoadLogLightByVerifyTimeCall(Long timestamp, Integer startRow, Integer numRows,
        ServiceMethodCallback<List<LogLightBean>> callback) {
      super("loadLogLightByVerifyTime", TMessageType.CALL, callback);
      if (timestamp == null) throw new NullPointerException("timestamp");
      this.timestamp = timestamp;
      if (startRow == null) throw new NullPointerException("startRow");
      this.startRow = startRow;
      if (numRows == null) throw new NullPointerException("numRows");
      this.numRows = numRows;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("timestamp", 1, TType.I64);
      protocol.writeI64(this.timestamp);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("startRow", 2, TType.I32);
      protocol.writeI32(this.startRow);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("numRows", 3, TType.I32);
      protocol.writeI32(this.numRows);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<LogLightBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<LogLightBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<LogLightBean> value = new ArrayList<LogLightBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.LogLightBean item0 = net.gdface.facelog.client.thrift.LogLightBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadLogLightByWhereCall extends MethodCall<List<LogLightBean>> {
    private final String where;

    private final Integer startRow;

    private final Integer numRows;

    LoadLogLightByWhereCall(String where, Integer startRow, Integer numRows,
        ServiceMethodCallback<List<LogLightBean>> callback) {
      super("loadLogLightByWhere", TMessageType.CALL, callback);
      this.where = where;
      if (startRow == null) throw new NullPointerException("startRow");
      this.startRow = startRow;
      if (numRows == null) throw new NullPointerException("numRows");
      this.numRows = numRows;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("startRow", 2, TType.I32);
      protocol.writeI32(this.startRow);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("numRows", 3, TType.I32);
      protocol.writeI32(this.numRows);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<LogLightBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<LogLightBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<LogLightBean> value = new ArrayList<LogLightBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.LogLightBean item0 = net.gdface.facelog.client.thrift.LogLightBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadPermitByUpdateCall extends MethodCall<List<PermitBean>> {
    private final Long timestamp;

    LoadPermitByUpdateCall(Long timestamp, ServiceMethodCallback<List<PermitBean>> callback) {
      super("loadPermitByUpdate", TMessageType.CALL, callback);
      if (timestamp == null) throw new NullPointerException("timestamp");
      this.timestamp = timestamp;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("timestamp", 1, TType.I64);
      protocol.writeI64(this.timestamp);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<PermitBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<PermitBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<PermitBean> value = new ArrayList<PermitBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.PermitBean item0 = net.gdface.facelog.client.thrift.PermitBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadPersonByWhereCall extends MethodCall<List<PersonBean>> {
    private final String where;

    private final Integer startRow;

    private final Integer numRows;

    LoadPersonByWhereCall(String where, Integer startRow, Integer numRows,
        ServiceMethodCallback<List<PersonBean>> callback) {
      super("loadPersonByWhere", TMessageType.CALL, callback);
      this.where = where;
      if (startRow == null) throw new NullPointerException("startRow");
      this.startRow = startRow;
      if (numRows == null) throw new NullPointerException("numRows");
      this.numRows = numRows;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("startRow", 2, TType.I32);
      protocol.writeI32(this.startRow);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("numRows", 3, TType.I32);
      protocol.writeI32(this.numRows);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<PersonBean> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      List<PersonBean> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<PersonBean> value = new ArrayList<PersonBean>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                net.gdface.facelog.client.thrift.PersonBean item0 = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadPersonGroupByWhereCall extends MethodCall<List<Integer>> {
    private final String where;

    private final Integer startRow;

    private final Integer numRows;

    LoadPersonGroupByWhereCall(String where, Integer startRow, Integer numRows,
        ServiceMethodCallback<List<Integer>> callback) {
      super("loadPersonGroupByWhere", TMessageType.CALL, callback);
      this.where = where;
      if (startRow == null) throw new NullPointerException("startRow");
      this.startRow = startRow;
      if (numRows == null) throw new NullPointerException("numRows");
      this.numRows = numRows;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("startRow", 2, TType.I32);
      protocol.writeI32(this.startRow);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("numRows", 3, TType.I32);
      protocol.writeI32(this.numRows);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadPersonGroupIdByWhereCall extends MethodCall<List<Integer>> {
    private final String where;

    LoadPersonGroupIdByWhereCall(String where, ServiceMethodCallback<List<Integer>> callback) {
      super("loadPersonGroupIdByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadPersonIdByUpdateTimeCall extends MethodCall<List<Integer>> {
    private final Long timestamp;

    LoadPersonIdByUpdateTimeCall(Long timestamp, ServiceMethodCallback<List<Integer>> callback) {
      super("loadPersonIdByUpdateTime", TMessageType.CALL, callback);
      if (timestamp == null) throw new NullPointerException("timestamp");
      this.timestamp = timestamp;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("timestamp", 1, TType.I64);
      protocol.writeI64(this.timestamp);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadPersonIdByWhereCall extends MethodCall<List<Integer>> {
    private final String where;

    LoadPersonIdByWhereCall(String where, ServiceMethodCallback<List<Integer>> callback) {
      super("loadPersonIdByWhere", TMessageType.CALL, callback);
      this.where = where;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.where != null) {
        protocol.writeFieldBegin("where", 1, TType.STRING);
        protocol.writeString(this.where);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class LoadUpdatedPersonsCall extends MethodCall<List<Integer>> {
    private final Long timestamp;

    LoadUpdatedPersonsCall(Long timestamp, ServiceMethodCallback<List<Integer>> callback) {
      super("loadUpdatedPersons", TMessageType.CALL, callback);
      if (timestamp == null) throw new NullPointerException("timestamp");
      this.timestamp = timestamp;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("timestamp", 1, TType.I64);
      protocol.writeI64(this.timestamp);
      protocol.writeFieldEnd();
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected List<Integer> receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      List<Integer> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.LIST) {
              ListMetadata listMetadata0 = protocol.readListBegin();
              List<Integer> value = new ArrayList<Integer>(listMetadata0.size);
              for (int i0 = 0; i0 < listMetadata0.size; ++i0) {
                int item0 = protocol.readI32();
                value.add(item0);
              }
              protocol.readListEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class OfflineCall extends MethodCall<Void> {
    private final Token token;

    OfflineCall(Token token, ServiceMethodCallback<Void> callback) {
      super("offline", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceSecurityException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceSecurityException value = net.gdface.facelog.client.thrift.ServiceSecurityException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        return null;
      }
    }
  }

  private static final class OnlineCall extends MethodCall<Token> {
    private final DeviceBean device;

    OnlineCall(DeviceBean device, ServiceMethodCallback<Token> callback) {
      super("online", TMessageType.CALL, callback);
      this.device = device;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.device != null) {
        protocol.writeFieldBegin("device", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.write(protocol, this.device);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Token receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Token result = null;
      ServiceSecurityException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.Token value = net.gdface.facelog.client.thrift.Token.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceSecurityException value = net.gdface.facelog.client.thrift.ServiceSecurityException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class RegisterDeviceCall extends MethodCall<DeviceBean> {
    private final DeviceBean newDevice;

    RegisterDeviceCall(DeviceBean newDevice, ServiceMethodCallback<DeviceBean> callback) {
      super("registerDevice", TMessageType.CALL, callback);
      this.newDevice = newDevice;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.newDevice != null) {
        protocol.writeFieldBegin("newDevice", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.write(protocol, this.newDevice);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected DeviceBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      DeviceBean result = null;
      ServiceSecurityException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DeviceBean value = net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceSecurityException value = net.gdface.facelog.client.thrift.ServiceSecurityException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class ReleasePersonTokenCall extends MethodCall<Void> {
    private final Token token;

    ReleasePersonTokenCall(Token token, ServiceMethodCallback<Void> callback) {
      super("releasePersonToken", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceSecurityException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceSecurityException value = net.gdface.facelog.client.thrift.ServiceSecurityException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        return null;
      }
    }
  }

  private static final class ReleaseRootTokenCall extends MethodCall<Void> {
    private final Token token;

    ReleaseRootTokenCall(Token token, ServiceMethodCallback<Void> callback) {
      super("releaseRootToken", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceSecurityException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceSecurityException value = net.gdface.facelog.client.thrift.ServiceSecurityException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        return null;
      }
    }
  }

  private static final class ReplaceFeatureCall extends MethodCall<Void> {
    private final Integer personId;

    private final String featureMd5;

    private final Boolean deleteOldFeatureImage;

    private final Token token;

    ReplaceFeatureCall(Integer personId, String featureMd5, Boolean deleteOldFeatureImage,
        Token token, ServiceMethodCallback<Void> callback) {
      super("replaceFeature", TMessageType.CALL, callback);
      this.personId = personId;
      this.featureMd5 = featureMd5;
      if (deleteOldFeatureImage == null) throw new NullPointerException("deleteOldFeatureImage");
      this.deleteOldFeatureImage = deleteOldFeatureImage;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.personId != null) {
        protocol.writeFieldBegin("personId", 1, TType.I32);
        protocol.writeI32(this.personId);
        protocol.writeFieldEnd();
      }
      if (this.featureMd5 != null) {
        protocol.writeFieldBegin("featureMd5", 2, TType.STRING);
        protocol.writeString(this.featureMd5);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("deleteOldFeatureImage", 3, TType.BOOL);
      protocol.writeBool(this.deleteOldFeatureImage);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 4, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class SaveDeviceCall extends MethodCall<DeviceBean> {
    private final DeviceBean deviceBean;

    private final Token token;

    SaveDeviceCall(DeviceBean deviceBean, Token token, ServiceMethodCallback<DeviceBean> callback) {
      super("saveDevice", TMessageType.CALL, callback);
      this.deviceBean = deviceBean;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.deviceBean != null) {
        protocol.writeFieldBegin("deviceBean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.write(protocol, this.deviceBean);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected DeviceBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      DeviceBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DeviceBean value = net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SaveDeviceGroupCall extends MethodCall<DeviceGroupBean> {
    private final DeviceGroupBean deviceGroupBean;

    private final Token token;

    SaveDeviceGroupCall(DeviceGroupBean deviceGroupBean, Token token,
        ServiceMethodCallback<DeviceGroupBean> callback) {
      super("saveDeviceGroup", TMessageType.CALL, callback);
      this.deviceGroupBean = deviceGroupBean;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.deviceGroupBean != null) {
        protocol.writeFieldBegin("deviceGroupBean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.DeviceGroupBean.ADAPTER.write(protocol, this.deviceGroupBean);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected DeviceGroupBean receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      DeviceGroupBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DeviceGroupBean value = net.gdface.facelog.client.thrift.DeviceGroupBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonCall extends MethodCall<PersonBean> {
    private final PersonBean bean;

    private final Token token;

    SavePersonCall(PersonBean bean, Token token, ServiceMethodCallback<PersonBean> callback) {
      super("savePerson", TMessageType.CALL, callback);
      this.bean = bean;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.bean != null) {
        protocol.writeFieldBegin("bean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, this.bean);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonFullCall extends MethodCall<PersonBean> {
    private final PersonBean bean;

    private final ByteString idPhoto;

    private final ByteString feature;

    private final ByteString featureImage;

    private final FaceBean featureFaceBean;

    private final Integer deviceId;

    private final Token token;

    SavePersonFullCall(PersonBean bean, ByteString idPhoto, ByteString feature,
        ByteString featureImage, FaceBean featureFaceBean, Integer deviceId, Token token,
        ServiceMethodCallback<PersonBean> callback) {
      super("savePersonFull", TMessageType.CALL, callback);
      this.bean = bean;
      this.idPhoto = idPhoto;
      this.feature = feature;
      this.featureImage = featureImage;
      this.featureFaceBean = featureFaceBean;
      this.deviceId = deviceId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.bean != null) {
        protocol.writeFieldBegin("bean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, this.bean);
        protocol.writeFieldEnd();
      }
      if (this.idPhoto != null) {
        protocol.writeFieldBegin("idPhoto", 2, TType.STRING);
        protocol.writeBinary(this.idPhoto);
        protocol.writeFieldEnd();
      }
      if (this.feature != null) {
        protocol.writeFieldBegin("feature", 3, TType.STRING);
        protocol.writeBinary(this.feature);
        protocol.writeFieldEnd();
      }
      if (this.featureImage != null) {
        protocol.writeFieldBegin("featureImage", 4, TType.STRING);
        protocol.writeBinary(this.featureImage);
        protocol.writeFieldEnd();
      }
      if (this.featureFaceBean != null) {
        protocol.writeFieldBegin("featureFaceBean", 5, TType.STRUCT);
        net.gdface.facelog.client.thrift.FaceBean.ADAPTER.write(protocol, this.featureFaceBean);
        protocol.writeFieldEnd();
      }
      if (this.deviceId != null) {
        protocol.writeFieldBegin("deviceId", 6, TType.I32);
        protocol.writeI32(this.deviceId);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 7, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonGroupCall extends MethodCall<PersonGroupBean> {
    private final PersonGroupBean personGroupBean;

    private final Token token;

    SavePersonGroupCall(PersonGroupBean personGroupBean, Token token,
        ServiceMethodCallback<PersonGroupBean> callback) {
      super("savePersonGroup", TMessageType.CALL, callback);
      this.personGroupBean = personGroupBean;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.personGroupBean != null) {
        protocol.writeFieldBegin("personGroupBean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonGroupBean.ADAPTER.write(protocol, this.personGroupBean);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonGroupBean receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      PersonGroupBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonGroupBean value = net.gdface.facelog.client.thrift.PersonGroupBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonWithPhotoCall extends MethodCall<PersonBean> {
    private final PersonBean bean;

    private final ByteString idPhoto;

    private final Token token;

    SavePersonWithPhotoCall(PersonBean bean, ByteString idPhoto, Token token,
        ServiceMethodCallback<PersonBean> callback) {
      super("savePersonWithPhoto", TMessageType.CALL, callback);
      this.bean = bean;
      this.idPhoto = idPhoto;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.bean != null) {
        protocol.writeFieldBegin("bean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, this.bean);
        protocol.writeFieldEnd();
      }
      if (this.idPhoto != null) {
        protocol.writeFieldBegin("idPhoto", 2, TType.STRING);
        protocol.writeBinary(this.idPhoto);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonWithPhotoAndFeatureCall extends MethodCall<PersonBean> {
    private final PersonBean bean;

    private final ByteString idPhoto;

    private final FeatureBean featureBean;

    private final Integer deviceId;

    private final Token token;

    SavePersonWithPhotoAndFeatureCall(PersonBean bean, ByteString idPhoto, FeatureBean featureBean,
        Integer deviceId, Token token, ServiceMethodCallback<PersonBean> callback) {
      super("savePersonWithPhotoAndFeature", TMessageType.CALL, callback);
      this.bean = bean;
      this.idPhoto = idPhoto;
      this.featureBean = featureBean;
      this.deviceId = deviceId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.bean != null) {
        protocol.writeFieldBegin("bean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, this.bean);
        protocol.writeFieldEnd();
      }
      if (this.idPhoto != null) {
        protocol.writeFieldBegin("idPhoto", 2, TType.STRING);
        protocol.writeBinary(this.idPhoto);
        protocol.writeFieldEnd();
      }
      if (this.featureBean != null) {
        protocol.writeFieldBegin("featureBean", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.FeatureBean.ADAPTER.write(protocol, this.featureBean);
        protocol.writeFieldEnd();
      }
      if (this.deviceId != null) {
        protocol.writeFieldBegin("deviceId", 4, TType.I32);
        protocol.writeI32(this.deviceId);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 5, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonWithPhotoAndFeatureMultiFacesCall extends MethodCall<PersonBean> {
    private final PersonBean bean;

    private final ByteString idPhoto;

    private final ByteString feature;

    private final List<FaceBean> faceBeans;

    private final Token token;

    SavePersonWithPhotoAndFeatureMultiFacesCall(PersonBean bean, ByteString idPhoto,
        ByteString feature, List<FaceBean> faceBeans, Token token,
        ServiceMethodCallback<PersonBean> callback) {
      super("savePersonWithPhotoAndFeatureMultiFaces", TMessageType.CALL, callback);
      this.bean = bean;
      this.idPhoto = idPhoto;
      this.feature = feature;
      this.faceBeans = faceBeans;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.bean != null) {
        protocol.writeFieldBegin("bean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, this.bean);
        protocol.writeFieldEnd();
      }
      if (this.idPhoto != null) {
        protocol.writeFieldBegin("idPhoto", 2, TType.STRING);
        protocol.writeBinary(this.idPhoto);
        protocol.writeFieldEnd();
      }
      if (this.feature != null) {
        protocol.writeFieldBegin("feature", 3, TType.STRING);
        protocol.writeBinary(this.feature);
        protocol.writeFieldEnd();
      }
      if (this.faceBeans != null) {
        protocol.writeFieldBegin("faceBeans", 4, TType.LIST);
        protocol.writeListBegin(TType.STRUCT, this.faceBeans.size());
        for (FaceBean item0 : this.faceBeans) {
          net.gdface.facelog.client.thrift.FaceBean.ADAPTER.write(protocol, item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 5, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonWithPhotoAndFeatureMultiImageCall extends MethodCall<PersonBean> {
    private final PersonBean bean;

    private final ByteString idPhoto;

    private final ByteString feature;

    private final Map<ByteString, FaceBean> faceInfo;

    private final Integer deviceId;

    private final Token token;

    SavePersonWithPhotoAndFeatureMultiImageCall(PersonBean bean, ByteString idPhoto,
        ByteString feature, Map<ByteString, FaceBean> faceInfo, Integer deviceId, Token token,
        ServiceMethodCallback<PersonBean> callback) {
      super("savePersonWithPhotoAndFeatureMultiImage", TMessageType.CALL, callback);
      this.bean = bean;
      this.idPhoto = idPhoto;
      this.feature = feature;
      this.faceInfo = faceInfo;
      this.deviceId = deviceId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.bean != null) {
        protocol.writeFieldBegin("bean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, this.bean);
        protocol.writeFieldEnd();
      }
      if (this.idPhoto != null) {
        protocol.writeFieldBegin("idPhoto", 2, TType.STRING);
        protocol.writeBinary(this.idPhoto);
        protocol.writeFieldEnd();
      }
      if (this.feature != null) {
        protocol.writeFieldBegin("feature", 3, TType.STRING);
        protocol.writeBinary(this.feature);
        protocol.writeFieldEnd();
      }
      if (this.faceInfo != null) {
        protocol.writeFieldBegin("faceInfo", 4, TType.MAP);
        protocol.writeMapBegin(TType.STRING, TType.STRUCT, this.faceInfo.size());
        for (Map.Entry<ByteString, FaceBean> entry0 : this.faceInfo.entrySet()) {
          ByteString key0 = entry0.getKey();
          FaceBean value0 = entry0.getValue();
          protocol.writeBinary(key0);
          net.gdface.facelog.client.thrift.FaceBean.ADAPTER.write(protocol, value0);
        }
        protocol.writeMapEnd();
        protocol.writeFieldEnd();
      }
      if (this.deviceId != null) {
        protocol.writeFieldBegin("deviceId", 5, TType.I32);
        protocol.writeI32(this.deviceId);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 6, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonWithPhotoAndFeatureSavedCall extends MethodCall<PersonBean> {
    private final PersonBean bean;

    private final String idPhotoMd5;

    private final String featureMd5;

    private final Token token;

    SavePersonWithPhotoAndFeatureSavedCall(PersonBean bean, String idPhotoMd5, String featureMd5,
        Token token, ServiceMethodCallback<PersonBean> callback) {
      super("savePersonWithPhotoAndFeatureSaved", TMessageType.CALL, callback);
      this.bean = bean;
      this.idPhotoMd5 = idPhotoMd5;
      this.featureMd5 = featureMd5;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.bean != null) {
        protocol.writeFieldBegin("bean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, this.bean);
        protocol.writeFieldEnd();
      }
      if (this.idPhotoMd5 != null) {
        protocol.writeFieldBegin("idPhotoMd5", 2, TType.STRING);
        protocol.writeString(this.idPhotoMd5);
        protocol.writeFieldEnd();
      }
      if (this.featureMd5 != null) {
        protocol.writeFieldBegin("featureMd5", 3, TType.STRING);
        protocol.writeString(this.featureMd5);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 4, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected PersonBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      PersonBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.PersonBean value = net.gdface.facelog.client.thrift.PersonBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SavePersonsCall extends MethodCall<Void> {
    private final List<PersonBean> beans;

    private final Token token;

    SavePersonsCall(List<PersonBean> beans, Token token, ServiceMethodCallback<Void> callback) {
      super("savePersons", TMessageType.CALL, callback);
      this.beans = beans;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.beans != null) {
        protocol.writeFieldBegin("beans", 1, TType.LIST);
        protocol.writeListBegin(TType.STRUCT, this.beans.size());
        for (PersonBean item0 : this.beans) {
          net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class SavePersonsWithPhotoCall extends MethodCall<Integer> {
    private final Map<ByteString, PersonBean> persons;

    private final Token token;

    SavePersonsWithPhotoCall(Map<ByteString, PersonBean> persons, Token token,
        ServiceMethodCallback<Integer> callback) {
      super("savePersonsWithPhoto", TMessageType.CALL, callback);
      this.persons = persons;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.persons != null) {
        protocol.writeFieldBegin("persons", 1, TType.MAP);
        protocol.writeMapBegin(TType.STRING, TType.STRUCT, this.persons.size());
        for (Map.Entry<ByteString, PersonBean> entry0 : this.persons.entrySet()) {
          ByteString key0 = entry0.getKey();
          PersonBean value0 = entry0.getValue();
          protocol.writeBinary(key0);
          net.gdface.facelog.client.thrift.PersonBean.ADAPTER.write(protocol, value0);
        }
        protocol.writeMapEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Integer receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      Integer result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.I32) {
              int value = protocol.readI32();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class SaveServiceConfigCall extends MethodCall<Void> {
    private final Token token;

    SaveServiceConfigCall(Token token, ServiceMethodCallback<Void> callback) {
      super("saveServiceConfig", TMessageType.CALL, callback);
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.token != null) {
        protocol.writeFieldBegin("token", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class SetPersonExpiryDateCall extends MethodCall<Void> {
    private final Integer personId;

    private final Long expiryDate;

    private final Token token;

    SetPersonExpiryDateCall(Integer personId, Long expiryDate, Token token,
        ServiceMethodCallback<Void> callback) {
      super("setPersonExpiryDate", TMessageType.CALL, callback);
      if (personId == null) throw new NullPointerException("personId");
      this.personId = personId;
      if (expiryDate == null) throw new NullPointerException("expiryDate");
      this.expiryDate = expiryDate;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("personId", 1, TType.I32);
      protocol.writeI32(this.personId);
      protocol.writeFieldEnd();
      protocol.writeFieldBegin("expiryDate", 2, TType.I64);
      protocol.writeI64(this.expiryDate);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class SetPersonExpiryDateListCall extends MethodCall<Void> {
    private final List<Integer> personIdList;

    private final Long expiryDate;

    private final Token token;

    SetPersonExpiryDateListCall(List<Integer> personIdList, Long expiryDate, Token token,
        ServiceMethodCallback<Void> callback) {
      super("setPersonExpiryDateList", TMessageType.CALL, callback);
      this.personIdList = personIdList;
      if (expiryDate == null) throw new NullPointerException("expiryDate");
      this.expiryDate = expiryDate;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.personIdList != null) {
        protocol.writeFieldBegin("personIdList", 1, TType.LIST);
        protocol.writeListBegin(TType.I32, this.personIdList.size());
        for (Integer item0 : this.personIdList) {
          protocol.writeI32(item0);
        }
        protocol.writeListEnd();
        protocol.writeFieldEnd();
      }
      protocol.writeFieldBegin("expiryDate", 2, TType.I64);
      protocol.writeI64(this.expiryDate);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class SetPropertiesCall extends MethodCall<Void> {
    private final Map<String, String> config;

    private final Token token;

    SetPropertiesCall(Map<String, String> config, Token token,
        ServiceMethodCallback<Void> callback) {
      super("setProperties", TMessageType.CALL, callback);
      this.config = config;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.config != null) {
        protocol.writeFieldBegin("config", 1, TType.MAP);
        protocol.writeMapBegin(TType.STRING, TType.STRING, this.config.size());
        for (Map.Entry<String, String> entry0 : this.config.entrySet()) {
          String key0 = entry0.getKey();
          String value0 = entry0.getValue();
          protocol.writeString(key0);
          protocol.writeString(value0);
        }
        protocol.writeMapEnd();
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class SetPropertyCall extends MethodCall<Void> {
    private final String key;

    private final String value;

    private final Token token;

    SetPropertyCall(String key, String value, Token token, ServiceMethodCallback<Void> callback) {
      super("setProperty", TMessageType.CALL, callback);
      this.key = key;
      this.value = value;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.key != null) {
        protocol.writeFieldBegin("key", 1, TType.STRING);
        protocol.writeString(this.key);
        protocol.writeFieldEnd();
      }
      if (this.value != null) {
        protocol.writeFieldBegin("value", 2, TType.STRING);
        protocol.writeString(this.value);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 3, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else {
        return null;
      }
    }
  }

  private static final class UnregisterDeviceCall extends MethodCall<Void> {
    private final Integer deviceId;

    private final Token token;

    UnregisterDeviceCall(Integer deviceId, Token token, ServiceMethodCallback<Void> callback) {
      super("unregisterDevice", TMessageType.CALL, callback);
      if (deviceId == null) throw new NullPointerException("deviceId");
      this.deviceId = deviceId;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldBegin("deviceId", 1, TType.I32);
      protocol.writeI32(this.deviceId);
      protocol.writeFieldEnd();
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Void receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      ServiceSecurityException ex1 = null;
      ServiceRuntimeException ex2 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceSecurityException value = net.gdface.facelog.client.thrift.ServiceSecurityException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex2 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (ex1 != null) {
        throw ex1;
      } else if (ex2 != null) {
        throw ex2;
      } else {
        return null;
      }
    }
  }

  private static final class UpdateDeviceCall extends MethodCall<DeviceBean> {
    private final DeviceBean deviceBean;

    private final Token token;

    UpdateDeviceCall(DeviceBean deviceBean, Token token,
        ServiceMethodCallback<DeviceBean> callback) {
      super("updateDevice", TMessageType.CALL, callback);
      this.deviceBean = deviceBean;
      this.token = token;
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      if (this.deviceBean != null) {
        protocol.writeFieldBegin("deviceBean", 1, TType.STRUCT);
        net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.write(protocol, this.deviceBean);
        protocol.writeFieldEnd();
      }
      if (this.token != null) {
        protocol.writeFieldBegin("token", 2, TType.STRUCT);
        net.gdface.facelog.client.thrift.Token.ADAPTER.write(protocol, this.token);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected DeviceBean receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      DeviceBean result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.DeviceBean value = net.gdface.facelog.client.thrift.DeviceBean.ADAPTER.read(protocol);
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class VersionCall extends MethodCall<String> {
    VersionCall(ServiceMethodCallback<String> callback) {
      super("version", TMessageType.CALL, callback);
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected String receive(Protocol protocol, MessageMetadata metadata) throws Exception {
      String result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.STRING) {
              String value = protocol.readString();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }

  private static final class VersionInfoCall extends MethodCall<Map<String, String>> {
    VersionInfoCall(ServiceMethodCallback<Map<String, String>> callback) {
      super("versionInfo", TMessageType.CALL, callback);
    }

    @Override
    protected void send(Protocol protocol) throws IOException {
      protocol.writeStructBegin("args");
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    protected Map<String, String> receive(Protocol protocol, MessageMetadata metadata) throws
        Exception {
      Map<String, String> result = null;
      ServiceRuntimeException ex1 = null;
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 0: {
            if (field.typeId == TType.MAP) {
              MapMetadata mapMetadata0 = protocol.readMapBegin();
              Map<String, String> value = new HashMap<String, String>(mapMetadata0.size);
              for (int i0 = 0; i0 < mapMetadata0.size; ++i0) {
                String key0 = protocol.readString();
                String value0 = protocol.readString();
                value.put(key0, value0);
              }
              protocol.readMapEnd();
              result = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 1: {
            if (field.typeId == TType.STRUCT) {
              net.gdface.facelog.client.thrift.ServiceRuntimeException value = net.gdface.facelog.client.thrift.ServiceRuntimeException.ADAPTER.read(protocol);
              ex1 = value;
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: ProtocolUtil.skip(protocol, field.typeId); break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      if (result != null) {
        return result;
      } else if (ex1 != null) {
        throw ex1;
      } else {
        throw new ThriftException(ThriftException.Kind.MISSING_RESULT, "Missing result");
      }
    }
  }
}
