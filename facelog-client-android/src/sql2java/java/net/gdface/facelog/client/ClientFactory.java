// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: client.factory.vm
// ______________________________________________________
package net.gdface.facelog.client;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.logging.Logger;

import com.google.common.base.Throwables;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.net.HostAndPort;
import com.google.common.util.concurrent.ListenableFuture;

import static com.google.common.net.HostAndPort.fromParts;
import static com.google.common.net.HostAndPort.fromString;
import static com.google.common.base.Preconditions.*;
import com.microsoft.thrifty.protocol.BinaryProtocol;
import com.microsoft.thrifty.protocol.Protocol;
import com.microsoft.thrifty.service.AsyncClientBase;
import com.microsoft.thrifty.transport.SocketTransport;

/**
 * Factory class for creating client instance of IFaceLog<br>
 * Example:<br>
 * <pre>
 * // get a asynchronous instance
 * IFaceLogClientAsync client = ClientFactory.builder()
 * .setHostAndPort("127.0.0.1",9090)
 * .setTimeout(10,TimeUnit.SECONDS)
 * .build();
 * </pre>
 * @author guyadong
 *
 */
public class ClientFactory {
    //private static final Logger logger = Logger.getLogger(ClientFactory.class.getSimpleName());
    private static final Cache<HostAndPort, net.gdface.facelog.client.thrift.IFaceLogClient> THRIFTY_CLIENT_CACHE = CacheBuilder.newBuilder().softValues().build();
    private final AsyncClientBase.Listener DEFAULT_CLOSE_LISTENER = new AsyncClientBase.Listener(){
        @Override
        public void onTransportClosed() {
            THRIFTY_CLIENT_CACHE.asMap().remove(hostAndPort);
        }
        @Override
        public void onError(Throwable error) {
            THRIFTY_CLIENT_CACHE.asMap().remove(hostAndPort);
        }
    };
    private HostAndPort hostAndPort;
    private long readTimeout;
    private long connectTimeout;
    private volatile IFaceLogClientAsync asyncClientInstance;
    private volatile IFaceLogClient clientInstance;
    protected ClientFactory() {
    }

    /**
     * set all timeout arguments
     * @param time
     * @param unit
     * @return
     * @see #setConnectTimeout(long time,TimeUnit unit)
     * @see #setReadTimeout(long time,TimeUnit unit)
     */
    public ClientFactory setTimeout(long time,TimeUnit unit){
        setConnectTimeout(time,unit);
        setReadTimeout(time,unit);
        return this;
    }
    public ClientFactory setConnectTimeout(long connectTimeout,TimeUnit unit) {
        this.connectTimeout = unit.toMillis(connectTimeout);
        return this;
    }
    public ClientFactory setReadTimeout(long readTimeout,TimeUnit unit) {
        this.readTimeout = unit.toMillis(readTimeout);
        return this;
    }
    public ClientFactory setHostAndPort(HostAndPort hostAndPort) {
        if(null == this.hostAndPort){
            synchronized(this){
                if(null == this.hostAndPort){
                    this.hostAndPort = checkNotNull(hostAndPort,"hostAndPort must not be null");
                }
            }
        }else{
            throw new IllegalStateException("the memeber hostAndPort be initialized always");
        }
        return this;
    }
    public ClientFactory setHostAndPort(String host,int port) {
        return setHostAndPort(fromParts(host, port));
    }
    public ClientFactory setHostAndPort(String host) {
        return setHostAndPort(fromString(host));
    }
    /**
     * return instance of {@link net.gdface.facelog.client.thrift.IFaceLogClient}
     * @return
     */
    public net.gdface.facelog.client.thrift.IFaceLogClient applyInstance() {
        try {
            return THRIFTY_CLIENT_CACHE.get(hostAndPort, new Callable<net.gdface.facelog.client.thrift.IFaceLogClient>(){
                @Override
                public net.gdface.facelog.client.thrift.IFaceLogClient call() throws Exception {
				            SocketTransport transport = 
				                    new SocketTransport.Builder(hostAndPort.getHost(),hostAndPort.getPort())
				                        .connectTimeout((int) connectTimeout)
				                        .readTimeout((int) readTimeout).build();
				            transport.connect();
				            Protocol protocol = new BinaryProtocol(transport);
                    return new net.gdface.facelog.client.thrift.IFaceLogClient(protocol,DEFAULT_CLOSE_LISTENER);
                }});
        } catch (Exception e) {
            Throwables.throwIfUnchecked(e);
            throw new RuntimeException(e);
        }
    }
    public static ClientFactory builder() {
        return new ClientFactory();
    }
    /** get asynchronous instance of IFaceLog */ 
    public IFaceLogClientAsync  buildAsync(){
        if(null == asyncClientInstance){
            synchronized(this){
                if(null == asyncClientInstance){
                    asyncClientInstance = new IFaceLogClientAsync(this);
                }
            }
        }
        return asyncClientInstance;
    }
    /** get synchronized instance of IFaceLog */ 
    public IFaceLogClient build(){
        if(null == clientInstance){
            synchronized(this){
                if(null == clientInstance){
                    clientInstance = new IFaceLogClient(this);
                }
            }
        }
        return clientInstance;
    }
    public class ListenableFutureDecorator<A,V> implements ListenableFuture<V>{
        private final ListenableFuture<V> future;
        public ListenableFutureDecorator(net.gdface.facelog.client.thrift.IFaceLogClient async, ListenableFuture<V> future) {
            this.future = checkNotNull(future,"future is null");
        }
        @Override
        public boolean cancel(boolean mayInterruptIfRunning) {
            return future.cancel(mayInterruptIfRunning);
        }

        @Override
        public V get() throws InterruptedException, ExecutionException {
            return future.get();
        }

        @Override
        public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
            return future.get(timeout, unit);
        }

        @Override
        public boolean isCancelled() {
            return future.isCancelled();
        }

        @Override
        public boolean isDone() {
            return future.isDone();
        }

        @Override
        public void addListener(Runnable listener, Executor executor) {
            future.addListener(listener, executor);            
        }        
    }}
