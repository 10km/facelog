// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: command.adapter.container.java.vm
// ______________________________________________________

package net.gdface.facelog.client;

import java.net.URL;
import java.util.Collections;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * 设备命令执行器容器对象<br>
 * 允许应用项目用不同的{@link CommandAdapter}对象分别实现设备命令,并支持命令执行器的动态的更新<br>
 * 内部实现为通过命令执行器控制表(Map)管理每个命令对应的执行器.
 * @author guyadong
 *
 */
public class CommandAdapterContainer extends CommandAdapter{
    /** 命令执行器控制表,每一个设备命令对应一个执行器对象,默认为空 */
    private final Map<Cmd, CommandAdapter> adapters= Collections.synchronizedMap(new EnumMap<Cmd, CommandAdapter>(Cmd.class));
    
    public CommandAdapterContainer() {
        this(null);
    }
    /**
     * 用指定的一组命令执行器初始化命令执行器控制表,为{@code null}则忽略
     */
    public CommandAdapterContainer(Map<Cmd, CommandAdapter> adapters) {
        if(null != adapters){
            for(Entry<Cmd, CommandAdapter> entry:adapters.entrySet()){
            	register(entry.getKey(),entry.getValue());
            }
        }
    }
    /**
     * 返回{@code cmd}注册的命令执行器对象,如果没有返回{@code null}
     * @param cmd
     * @return
     */
    public CommandAdapter adapterOf(Cmd cmd) {
        return adapters.get(cmd);
    }
    /**
     * 注册指定命令({@code cmd})的命令执行器
     * @param cmd 设备命令类型,不可为{@code null}
     * @param adapter  命令执行器,不可为{@code null},也不可为容器对象{@link CommandAdapterContainer}
     * @return
     * @see EnumMap#put(Enum, Object)
     */
    public CommandAdapterContainer register(Cmd cmd, CommandAdapter adapter) {
        checkArgument(null != cmd && null != adapter,"key or adapter is null");
        checkArgument(!(adapter instanceof CommandAdapterContainer),"adapter for %s must not be container",cmd);
        adapters.put(cmd, adapter);
        return this;
    }
    /**
     * 注销{@code cmd}指定的命令执行器
     * @param cmd
     * @return 返回被删除的命令执行器
     * @see EnumMap#remove(Object)
     */
    public CommandAdapterContainer unregister(Cmd cmd) {
        adapters.remove(cmd);
        return this;
    }
    
    /**
     * 删除所有命令执行器
     * @see EnumMap#clear()
     */
    public CommandAdapterContainer clear() {
        adapters.clear();
        return this;
    }
    /** 
     * 调用注册的 {@code parameter} 命令执行器<br>
     * 如果没有为 {@code parameter} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public void parameter(String key,String value)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.parameter);
        if(null != adapter){
            adapter.parameter(key,value);
        }else{
            super.parameter(key,value);
        }
    }
    /** 
     * 调用注册的 {@code config} 命令执行器<br>
     * 如果没有为 {@code config} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public void config(Map<String,String> properties)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.config);
        if(null != adapter){
            adapter.config(properties);
        }else{
            super.config(properties);
        }
    }
    /** 
     * 调用注册的 {@code status} 命令执行器<br>
     * 如果没有为 {@code status} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public Object status(String name)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.status);
        if(null != adapter){
            return adapter.status(name);
        }else{
            return super.status(name);
        }
    }
    /** 
     * 调用注册的 {@code report} 命令执行器<br>
     * 如果没有为 {@code report} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public Map<String,Object> report(List<String> names)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.report);
        if(null != adapter){
            return adapter.report(names);
        }else{
            return super.report(names);
        }
    }
    /** 
     * 调用注册的 {@code version} 命令执行器<br>
     * 如果没有为 {@code version} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public String version()throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.version);
        if(null != adapter){
            return adapter.version();
        }else{
            return super.version();
        }
    }
    /** 
     * 调用注册的 {@code enable} 命令执行器<br>
     * 如果没有为 {@code enable} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public void enable(Boolean enable,String message)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.enable);
        if(null != adapter){
            adapter.enable(enable,message);
        }else{
            super.enable(enable,message);
        }
    }
    /** 
     * 调用注册的 {@code isEnable} 命令执行器<br>
     * 如果没有为 {@code isEnable} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public Boolean isEnable()throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.isEnable);
        if(null != adapter){
            return adapter.isEnable();
        }else{
            return super.isEnable();
        }
    }
    /** 
     * 调用注册的 {@code reset} 命令执行器<br>
     * 如果没有为 {@code reset} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public void reset(Long schedule)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.reset);
        if(null != adapter){
            adapter.reset(schedule);
        }else{
            super.reset(schedule);
        }
    }
    /** 
     * 调用注册的 {@code time} 命令执行器<br>
     * 如果没有为 {@code time} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public void time(Long unixTimestamp)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.time);
        if(null != adapter){
            adapter.time(unixTimestamp);
        }else{
            super.time(unixTimestamp);
        }
    }
    /** 
     * 调用注册的 {@code update} 命令执行器<br>
     * 如果没有为 {@code update} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public void update(URL url,String version,Long schedule)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.update);
        if(null != adapter){
            adapter.update(url,version,schedule);
        }else{
            super.update(url,version,schedule);
        }
    }
    /** 
     * 调用注册的 {@code idleMessage} 命令执行器<br>
     * 如果没有为 {@code idleMessage} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public void idleMessage(String message,Long duration)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.idleMessage);
        if(null != adapter){
            adapter.idleMessage(message,duration);
        }else{
            super.idleMessage(message,duration);
        }
    }
    /** 
     * 调用注册的 {@code personMessage} 命令执行器<br>
     * 如果没有为 {@code personMessage} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public void personMessage(String message,Integer id,Boolean group,Boolean onceOnly,Long duration)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.personMessage);
        if(null != adapter){
            adapter.personMessage(message,id,group,onceOnly,duration);
        }else{
            super.personMessage(message,id,group,onceOnly,duration);
        }
    }
    /** 
     * 调用注册的 {@code custom} 命令执行器<br>
     * 如果没有为 {@code custom} 注册命令执行器,则调用父类方法抛出{@link UnsupportCmdException}异常
     */
    @Override
    public Object custom(String cmdName,Map<String,Object> parameters)throws DeviceCmdException{
        CommandAdapter adapter = this.adapters.get(Cmd.custom);
        if(null != adapter){
            return adapter.custom(cmdName,parameters);
        }else{
            return super.custom(cmdName,parameters);
        }
    }
}