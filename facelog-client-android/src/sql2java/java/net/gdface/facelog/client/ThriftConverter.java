// ______________________________________________________
// Generated by sql2java - https://github.com/10km/sql2java-2-6-7 (custom branch) 
// modified by guyadong from
// sql2java original version https://sourceforge.net/projects/sql2java/ 
// JDBC driver used at code generation time: com.mysql.jdbc.Driver
// template: thriftconverter.java.vm
// ______________________________________________________
package net.gdface.facelog.client;

import java.lang.reflect.Field;
import okio.ByteString;

/**
 * {@link IBeanConverter} implementation classes for thrift class 
 * @author guyadong
 *
 */
public class ThriftConverter implements Constant{
        private static void setField(Object obj,String name,Object value)
        {
            try {
                Field field = obj.getClass().getField(name);
                field.setAccessible(true);
                field.set(obj, value);
            } catch ( IllegalAccessException | NoSuchFieldException  e) {
                throw new RuntimeException(e);
            }
        }
    /** {@link IBeanConverter} implementation for convert between {@link DeviceBean} and thrift beans {@link net.gdface.facelog.client.thrift.DeviceBean} */
    public static final IBeanConverter<DeviceBean,net.gdface.facelog.client.thrift.DeviceBean> CONVERTER_DEVICEBEAN
            = new IBeanConverter.AbstractHandle<DeviceBean,net.gdface.facelog.client.thrift.DeviceBean>(){
        @Override
        protected void doFromRight(DeviceBean left, net.gdface.facelog.client.thrift.DeviceBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_DEVICE_ID_ID_MASK)){
                left.setId(right.id);
            }
            if(0L !=  (initialized & FL_DEVICE_ID_GROUP_ID_MASK)){
                left.setGroupId(right.groupId);
            }
            if(0L !=  (initialized & FL_DEVICE_ID_NAME_MASK)){
                left.setName(right.name);
            }
            if(0L !=  (initialized & FL_DEVICE_ID_VERSION_MASK)){
                left.setVersion(right.version);
            }
            if(0L !=  (initialized & FL_DEVICE_ID_SERIAL_NO_MASK)){
                left.setSerialNo(right.serialNo);
            }
            if(0L !=  (initialized & FL_DEVICE_ID_MAC_MASK)){
                left.setMac(right.mac);
            }
            if(0L !=  (initialized & FL_DEVICE_ID_REMARK_MASK)){
                left.setRemark(right.remark);
            }
            if(0L !=  (initialized & FL_DEVICE_ID_CREATE_TIME_MASK)){
                left.setCreateTime(right.createTime);
            }
            if(0L !=  (initialized & FL_DEVICE_ID_UPDATE_TIME_MASK)){
                left.setUpdateTime(right.updateTime);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(DeviceBean left, net.gdface.facelog.client.thrift.DeviceBean right) {
            if(left.checkIdInitialized() ){
                setField(right, "id", left.getId());                
            }
            if(left.checkGroupIdInitialized() ){
                setField(right, "groupId", left.getGroupId());                
            }
            if(left.checkNameInitialized() ){
                setField(right, "name", left.getName());                
            }
            if(left.checkVersionInitialized() ){
                setField(right, "version", left.getVersion());                
            }
            if(left.checkSerialNoInitialized() ){
                setField(right, "serialNo", left.getSerialNo());                
            }
            if(left.checkMacInitialized() ){
                setField(right, "mac", left.getMac());                
            }
            if(left.checkRemarkInitialized() ){
                setField(right, "remark", left.getRemark());                
            }
// IGNORE field fl_device.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkCreateTimeInitialized() ){
                setField(right, "createTime", left.getCreateTime().getTime());
            }
*/
// IGNORE field fl_device.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkUpdateTimeInitialized() ){
                setField(right, "updateTime", left.getUpdateTime().getTime());
            }
*/
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link DeviceGroupBean} and thrift beans {@link net.gdface.facelog.client.thrift.DeviceGroupBean} */
    public static final IBeanConverter<DeviceGroupBean,net.gdface.facelog.client.thrift.DeviceGroupBean> CONVERTER_DEVICEGROUPBEAN
            = new IBeanConverter.AbstractHandle<DeviceGroupBean,net.gdface.facelog.client.thrift.DeviceGroupBean>(){
        @Override
        protected void doFromRight(DeviceGroupBean left, net.gdface.facelog.client.thrift.DeviceGroupBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_ID_MASK)){
                left.setId(right.id);
            }
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_NAME_MASK)){
                left.setName(right.name);
            }
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_LEAF_MASK)){
                left.setLeaf(right.leaf);
            }
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_PARENT_MASK)){
                left.setParent(right.parent);
            }
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_REMARK_MASK)){
                left.setRemark(right.remark);
            }
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_EXT_BIN_MASK)){
                left.setExtBin(right.extBin.toByteArray());
            }
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_EXT_TXT_MASK)){
                left.setExtTxt(right.extTxt);
            }
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_CREATE_TIME_MASK)){
                left.setCreateTime(right.createTime);
            }
            if(0L !=  (initialized & FL_DEVICE_GROUP_ID_UPDATE_TIME_MASK)){
                left.setUpdateTime(right.updateTime);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(DeviceGroupBean left, net.gdface.facelog.client.thrift.DeviceGroupBean right) {
            if(left.checkIdInitialized() ){
                setField(right, "id", left.getId());                
            }
            if(left.checkNameInitialized() ){
                setField(right, "name", left.getName());                
            }
            if(left.checkLeafInitialized() ){
                setField(right, "leaf", left.getLeaf());                
            }
            if(left.checkParentInitialized() ){
                setField(right, "parent", left.getParent());                
            }
            if(left.checkRemarkInitialized() ){
                setField(right, "remark", left.getRemark());                
            }
            if(left.checkExtBinInitialized() ){
                setField(right, "extBin", ByteString.of(left.getExtBin()));
            }
            if(left.checkExtTxtInitialized() ){
                setField(right, "extTxt", left.getExtTxt());                
            }
// IGNORE field fl_device_group.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkCreateTimeInitialized() ){
                setField(right, "createTime", left.getCreateTime().getTime());
            }
*/
// IGNORE field fl_device_group.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkUpdateTimeInitialized() ){
                setField(right, "updateTime", left.getUpdateTime().getTime());
            }
*/
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link FaceBean} and thrift beans {@link net.gdface.facelog.client.thrift.FaceBean} */
    public static final IBeanConverter<FaceBean,net.gdface.facelog.client.thrift.FaceBean> CONVERTER_FACEBEAN
            = new IBeanConverter.AbstractHandle<FaceBean,net.gdface.facelog.client.thrift.FaceBean>(){
        @Override
        protected void doFromRight(FaceBean left, net.gdface.facelog.client.thrift.FaceBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_FACE_ID_ID_MASK)){
                left.setId(right.id);
            }
            if(0L !=  (initialized & FL_FACE_ID_IMAGE_MD5_MASK)){
                left.setImageMd5(right.imageMd5);
            }
            if(0L !=  (initialized & FL_FACE_ID_FACE_LEFT_MASK)){
                left.setFaceLeft(right.faceLeft);
            }
            if(0L !=  (initialized & FL_FACE_ID_FACE_TOP_MASK)){
                left.setFaceTop(right.faceTop);
            }
            if(0L !=  (initialized & FL_FACE_ID_FACE_WIDTH_MASK)){
                left.setFaceWidth(right.faceWidth);
            }
            if(0L !=  (initialized & FL_FACE_ID_FACE_HEIGHT_MASK)){
                left.setFaceHeight(right.faceHeight);
            }
            if(0L !=  (initialized & FL_FACE_ID_EYE_LEFTX_MASK)){
                left.setEyeLeftx(right.eyeLeftx);
            }
            if(0L !=  (initialized & FL_FACE_ID_EYE_LEFTY_MASK)){
                left.setEyeLefty(right.eyeLefty);
            }
            if(0L !=  (initialized & FL_FACE_ID_EYE_RIGHTX_MASK)){
                left.setEyeRightx(right.eyeRightx);
            }
            if(0L !=  (initialized & FL_FACE_ID_EYE_RIGHTY_MASK)){
                left.setEyeRighty(right.eyeRighty);
            }
            if(0L !=  (initialized & FL_FACE_ID_MOUTH_X_MASK)){
                left.setMouthX(right.mouthX);
            }
            if(0L !=  (initialized & FL_FACE_ID_MOUTH_Y_MASK)){
                left.setMouthY(right.mouthY);
            }
            if(0L !=  (initialized & FL_FACE_ID_NOSE_X_MASK)){
                left.setNoseX(right.noseX);
            }
            if(0L !=  (initialized & FL_FACE_ID_NOSE_Y_MASK)){
                left.setNoseY(right.noseY);
            }
            if(0L !=  (initialized & FL_FACE_ID_ANGLE_YAW_MASK)){
                left.setAngleYaw(right.angleYaw);
            }
            if(0L !=  (initialized & FL_FACE_ID_ANGLE_PITCH_MASK)){
                left.setAnglePitch(right.anglePitch);
            }
            if(0L !=  (initialized & FL_FACE_ID_ANGLE_ROLL_MASK)){
                left.setAngleRoll(right.angleRoll);
            }
            if(0L !=  (initialized & FL_FACE_ID_EXT_INFO_MASK)){
                left.setExtInfo(right.extInfo.toByteArray());
            }
            if(0L !=  (initialized & FL_FACE_ID_FEATURE_MD5_MASK)){
                left.setFeatureMd5(right.featureMd5);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(FaceBean left, net.gdface.facelog.client.thrift.FaceBean right) {
            if(left.checkIdInitialized() ){
                setField(right, "id", left.getId());                
            }
            if(left.checkImageMd5Initialized() ){
                setField(right, "imageMd5", left.getImageMd5());                
            }
            if(left.checkFaceLeftInitialized() ){
                setField(right, "faceLeft", left.getFaceLeft());                
            }
            if(left.checkFaceTopInitialized() ){
                setField(right, "faceTop", left.getFaceTop());                
            }
            if(left.checkFaceWidthInitialized() ){
                setField(right, "faceWidth", left.getFaceWidth());                
            }
            if(left.checkFaceHeightInitialized() ){
                setField(right, "faceHeight", left.getFaceHeight());                
            }
            if(left.checkEyeLeftxInitialized() ){
                setField(right, "eyeLeftx", left.getEyeLeftx());                
            }
            if(left.checkEyeLeftyInitialized() ){
                setField(right, "eyeLefty", left.getEyeLefty());                
            }
            if(left.checkEyeRightxInitialized() ){
                setField(right, "eyeRightx", left.getEyeRightx());                
            }
            if(left.checkEyeRightyInitialized() ){
                setField(right, "eyeRighty", left.getEyeRighty());                
            }
            if(left.checkMouthXInitialized() ){
                setField(right, "mouthX", left.getMouthX());                
            }
            if(left.checkMouthYInitialized() ){
                setField(right, "mouthY", left.getMouthY());                
            }
            if(left.checkNoseXInitialized() ){
                setField(right, "noseX", left.getNoseX());                
            }
            if(left.checkNoseYInitialized() ){
                setField(right, "noseY", left.getNoseY());                
            }
            if(left.checkAngleYawInitialized() ){
                setField(right, "angleYaw", left.getAngleYaw());                
            }
            if(left.checkAnglePitchInitialized() ){
                setField(right, "anglePitch", left.getAnglePitch());                
            }
            if(left.checkAngleRollInitialized() ){
                setField(right, "angleRoll", left.getAngleRoll());                
            }
            if(left.checkExtInfoInitialized() ){
                setField(right, "extInfo", ByteString.of(left.getExtInfo()));
            }
            if(left.checkFeatureMd5Initialized() ){
                setField(right, "featureMd5", left.getFeatureMd5());                
            }
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link FeatureBean} and thrift beans {@link net.gdface.facelog.client.thrift.FeatureBean} */
    public static final IBeanConverter<FeatureBean,net.gdface.facelog.client.thrift.FeatureBean> CONVERTER_FEATUREBEAN
            = new IBeanConverter.AbstractHandle<FeatureBean,net.gdface.facelog.client.thrift.FeatureBean>(){
        @Override
        protected void doFromRight(FeatureBean left, net.gdface.facelog.client.thrift.FeatureBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_FEATURE_ID_MD5_MASK)){
                left.setMd5(right.md5);
            }
            if(0L !=  (initialized & FL_FEATURE_ID_PERSON_ID_MASK)){
                left.setPersonId(right.personId);
            }
            if(0L !=  (initialized & FL_FEATURE_ID_FEATURE_MASK)){
                left.setFeature(right.feature.toByteArray());
            }
            if(0L !=  (initialized & FL_FEATURE_ID_UPDATE_TIME_MASK)){
                left.setUpdateTime(right.updateTime);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(FeatureBean left, net.gdface.facelog.client.thrift.FeatureBean right) {
            if(left.checkMd5Initialized() ){
                setField(right, "md5", left.getMd5());                
            }
            if(left.checkPersonIdInitialized() ){
                setField(right, "personId", left.getPersonId());                
            }
            if(left.checkFeatureInitialized() ){
                setField(right, "feature", ByteString.of(left.getFeature()));
            }
// IGNORE field fl_feature.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkUpdateTimeInitialized() ){
                setField(right, "updateTime", left.getUpdateTime().getTime());
            }
*/
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link ImageBean} and thrift beans {@link net.gdface.facelog.client.thrift.ImageBean} */
    public static final IBeanConverter<ImageBean,net.gdface.facelog.client.thrift.ImageBean> CONVERTER_IMAGEBEAN
            = new IBeanConverter.AbstractHandle<ImageBean,net.gdface.facelog.client.thrift.ImageBean>(){
        @Override
        protected void doFromRight(ImageBean left, net.gdface.facelog.client.thrift.ImageBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_IMAGE_ID_MD5_MASK)){
                left.setMd5(right.md5);
            }
            if(0L !=  (initialized & FL_IMAGE_ID_FORMAT_MASK)){
                left.setFormat(right.format);
            }
            if(0L !=  (initialized & FL_IMAGE_ID_WIDTH_MASK)){
                left.setWidth(right.width);
            }
            if(0L !=  (initialized & FL_IMAGE_ID_HEIGHT_MASK)){
                left.setHeight(right.height);
            }
            if(0L !=  (initialized & FL_IMAGE_ID_DEPTH_MASK)){
                left.setDepth(right.depth);
            }
            if(0L !=  (initialized & FL_IMAGE_ID_FACE_NUM_MASK)){
                left.setFaceNum(right.faceNum);
            }
            if(0L !=  (initialized & FL_IMAGE_ID_THUMB_MD5_MASK)){
                left.setThumbMd5(right.thumbMd5);
            }
            if(0L !=  (initialized & FL_IMAGE_ID_DEVICE_ID_MASK)){
                left.setDeviceId(right.deviceId);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(ImageBean left, net.gdface.facelog.client.thrift.ImageBean right) {
            if(left.checkMd5Initialized() ){
                setField(right, "md5", left.getMd5());                
            }
            if(left.checkFormatInitialized() ){
                setField(right, "format", left.getFormat());                
            }
            if(left.checkWidthInitialized() ){
                setField(right, "width", left.getWidth());                
            }
            if(left.checkHeightInitialized() ){
                setField(right, "height", left.getHeight());                
            }
            if(left.checkDepthInitialized() ){
                setField(right, "depth", left.getDepth());                
            }
            if(left.checkFaceNumInitialized() ){
                setField(right, "faceNum", left.getFaceNum());                
            }
            if(left.checkThumbMd5Initialized() ){
                setField(right, "thumbMd5", left.getThumbMd5());                
            }
            if(left.checkDeviceIdInitialized() ){
                setField(right, "deviceId", left.getDeviceId());                
            }
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link LogBean} and thrift beans {@link net.gdface.facelog.client.thrift.LogBean} */
    public static final IBeanConverter<LogBean,net.gdface.facelog.client.thrift.LogBean> CONVERTER_LOGBEAN
            = new IBeanConverter.AbstractHandle<LogBean,net.gdface.facelog.client.thrift.LogBean>(){
        @Override
        protected void doFromRight(LogBean left, net.gdface.facelog.client.thrift.LogBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_LOG_ID_ID_MASK)){
                left.setId(right.id);
            }
            if(0L !=  (initialized & FL_LOG_ID_PERSON_ID_MASK)){
                left.setPersonId(right.personId);
            }
            if(0L !=  (initialized & FL_LOG_ID_DEVICE_ID_MASK)){
                left.setDeviceId(right.deviceId);
            }
            if(0L !=  (initialized & FL_LOG_ID_VERIFY_FEATURE_MASK)){
                left.setVerifyFeature(right.verifyFeature);
            }
            if(0L !=  (initialized & FL_LOG_ID_COMPARE_FACE_MASK)){
                left.setCompareFace(right.compareFace);
            }
            if(0L !=  (initialized & FL_LOG_ID_VERIFY_STATUS_MASK)){
                left.setVerifyStatus(right.verifyStatus);
            }
            if(0L !=  (initialized & FL_LOG_ID_SIMILARTY_MASK)){
                left.setSimilarty(right.similarty);
            }
            if(0L !=  (initialized & FL_LOG_ID_VERIFY_TIME_MASK)){
                left.setVerifyTime(right.verifyTime);
            }
            if(0L !=  (initialized & FL_LOG_ID_CREATE_TIME_MASK)){
                left.setCreateTime(right.createTime);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(LogBean left, net.gdface.facelog.client.thrift.LogBean right) {
            if(left.checkIdInitialized() ){
                setField(right, "id", left.getId());                
            }
            if(left.checkPersonIdInitialized() ){
                setField(right, "personId", left.getPersonId());                
            }
            if(left.checkDeviceIdInitialized() ){
                setField(right, "deviceId", left.getDeviceId());                
            }
            if(left.checkVerifyFeatureInitialized() ){
                setField(right, "verifyFeature", left.getVerifyFeature());                
            }
            if(left.checkCompareFaceInitialized() ){
                setField(right, "compareFace", left.getCompareFace());                
            }
            if(left.checkVerifyStatusInitialized() ){
                setField(right, "verifyStatus", left.getVerifyStatus());                
            }
            if(left.checkSimilartyInitialized() ){
                setField(right, "similarty", left.getSimilarty());                
            }
            if(left.checkVerifyTimeInitialized() ){
                setField(right, "verifyTime", left.getVerifyTime().getTime());
            }
// IGNORE field fl_log.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkCreateTimeInitialized() ){
                setField(right, "createTime", left.getCreateTime().getTime());
            }
*/
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link PermitBean} and thrift beans {@link net.gdface.facelog.client.thrift.PermitBean} */
    public static final IBeanConverter<PermitBean,net.gdface.facelog.client.thrift.PermitBean> CONVERTER_PERMITBEAN
            = new IBeanConverter.AbstractHandle<PermitBean,net.gdface.facelog.client.thrift.PermitBean>(){
        @Override
        protected void doFromRight(PermitBean left, net.gdface.facelog.client.thrift.PermitBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_PERMIT_ID_DEVICE_GROUP_ID_MASK)){
                left.setDeviceGroupId(right.deviceGroupId);
            }
            if(0L !=  (initialized & FL_PERMIT_ID_PERSON_GROUP_ID_MASK)){
                left.setPersonGroupId(right.personGroupId);
            }
            if(0L !=  (initialized & FL_PERMIT_ID_REMARK_MASK)){
                left.setRemark(right.remark);
            }
            if(0L !=  (initialized & FL_PERMIT_ID_EXT_BIN_MASK)){
                left.setExtBin(right.extBin.toByteArray());
            }
            if(0L !=  (initialized & FL_PERMIT_ID_EXT_TXT_MASK)){
                left.setExtTxt(right.extTxt);
            }
            if(0L !=  (initialized & FL_PERMIT_ID_CREATE_TIME_MASK)){
                left.setCreateTime(right.createTime);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(PermitBean left, net.gdface.facelog.client.thrift.PermitBean right) {
            if(left.checkDeviceGroupIdInitialized() ){
                setField(right, "deviceGroupId", left.getDeviceGroupId());                
            }
            if(left.checkPersonGroupIdInitialized() ){
                setField(right, "personGroupId", left.getPersonGroupId());                
            }
            if(left.checkRemarkInitialized() ){
                setField(right, "remark", left.getRemark());                
            }
            if(left.checkExtBinInitialized() ){
                setField(right, "extBin", ByteString.of(left.getExtBin()));
            }
            if(left.checkExtTxtInitialized() ){
                setField(right, "extTxt", left.getExtTxt());                
            }
// IGNORE field fl_permit.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkCreateTimeInitialized() ){
                setField(right, "createTime", left.getCreateTime().getTime());
            }
*/
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link PersonBean} and thrift beans {@link net.gdface.facelog.client.thrift.PersonBean} */
    public static final IBeanConverter<PersonBean,net.gdface.facelog.client.thrift.PersonBean> CONVERTER_PERSONBEAN
            = new IBeanConverter.AbstractHandle<PersonBean,net.gdface.facelog.client.thrift.PersonBean>(){
        @Override
        protected void doFromRight(PersonBean left, net.gdface.facelog.client.thrift.PersonBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_PERSON_ID_ID_MASK)){
                left.setId(right.id);
            }
            if(0L !=  (initialized & FL_PERSON_ID_GROUP_ID_MASK)){
                left.setGroupId(right.groupId);
            }
            if(0L !=  (initialized & FL_PERSON_ID_NAME_MASK)){
                left.setName(right.name);
            }
            if(0L !=  (initialized & FL_PERSON_ID_SEX_MASK)){
                left.setSex(right.sex);
            }
            if(0L !=  (initialized & FL_PERSON_ID_RANK_MASK)){
                left.setRank(right.rank);
            }
            if(0L !=  (initialized & FL_PERSON_ID_PASSWORD_MASK)){
                left.setPassword(right.password);
            }
            if(0L !=  (initialized & FL_PERSON_ID_BIRTHDATE_MASK)){
                left.setBirthdate(right.birthdate);
            }
            if(0L !=  (initialized & FL_PERSON_ID_MOBILE_PHONE_MASK)){
                left.setMobilePhone(right.mobilePhone);
            }
            if(0L !=  (initialized & FL_PERSON_ID_PAPERS_TYPE_MASK)){
                left.setPapersType(right.papersType);
            }
            if(0L !=  (initialized & FL_PERSON_ID_PAPERS_NUM_MASK)){
                left.setPapersNum(right.papersNum);
            }
            if(0L !=  (initialized & FL_PERSON_ID_IMAGE_MD5_MASK)){
                left.setImageMd5(right.imageMd5);
            }
            if(0L !=  (initialized & FL_PERSON_ID_EXPIRY_DATE_MASK)){
                left.setExpiryDate(right.expiryDate);
            }
            if(0L !=  (initialized & FL_PERSON_ID_REMARK_MASK)){
                left.setRemark(right.remark);
            }
            if(0L !=  (initialized & FL_PERSON_ID_CREATE_TIME_MASK)){
                left.setCreateTime(right.createTime);
            }
            if(0L !=  (initialized & FL_PERSON_ID_UPDATE_TIME_MASK)){
                left.setUpdateTime(right.updateTime);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(PersonBean left, net.gdface.facelog.client.thrift.PersonBean right) {
            if(left.checkIdInitialized() ){
                setField(right, "id", left.getId());                
            }
            if(left.checkGroupIdInitialized() ){
                setField(right, "groupId", left.getGroupId());                
            }
            if(left.checkNameInitialized() ){
                setField(right, "name", left.getName());                
            }
            if(left.checkSexInitialized() ){
                setField(right, "sex", left.getSex());                
            }
            if(left.checkRankInitialized() ){
                setField(right, "rank", left.getRank());                
            }
            if(left.checkPasswordInitialized() ){
                setField(right, "password", left.getPassword());                
            }
            if(left.checkBirthdateInitialized() ){
                setField(right, "birthdate", left.getBirthdate().getTime());
            }
            if(left.checkMobilePhoneInitialized() ){
                setField(right, "mobilePhone", left.getMobilePhone());                
            }
            if(left.checkPapersTypeInitialized() ){
                setField(right, "papersType", left.getPapersType());                
            }
            if(left.checkPapersNumInitialized() ){
                setField(right, "papersNum", left.getPapersNum());                
            }
            if(left.checkImageMd5Initialized() ){
                setField(right, "imageMd5", left.getImageMd5());                
            }
            if(left.checkExpiryDateInitialized() ){
                setField(right, "expiryDate", left.getExpiryDate().getTime());
            }
            if(left.checkRemarkInitialized() ){
                setField(right, "remark", left.getRemark());                
            }
// IGNORE field fl_person.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkCreateTimeInitialized() ){
                setField(right, "createTime", left.getCreateTime().getTime());
            }
*/
// IGNORE field fl_person.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkUpdateTimeInitialized() ){
                setField(right, "updateTime", left.getUpdateTime().getTime());
            }
*/
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link PersonGroupBean} and thrift beans {@link net.gdface.facelog.client.thrift.PersonGroupBean} */
    public static final IBeanConverter<PersonGroupBean,net.gdface.facelog.client.thrift.PersonGroupBean> CONVERTER_PERSONGROUPBEAN
            = new IBeanConverter.AbstractHandle<PersonGroupBean,net.gdface.facelog.client.thrift.PersonGroupBean>(){
        @Override
        protected void doFromRight(PersonGroupBean left, net.gdface.facelog.client.thrift.PersonGroupBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_ID_MASK)){
                left.setId(right.id);
            }
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_NAME_MASK)){
                left.setName(right.name);
            }
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_LEAF_MASK)){
                left.setLeaf(right.leaf);
            }
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_PARENT_MASK)){
                left.setParent(right.parent);
            }
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_REMARK_MASK)){
                left.setRemark(right.remark);
            }
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_EXT_BIN_MASK)){
                left.setExtBin(right.extBin.toByteArray());
            }
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_EXT_TXT_MASK)){
                left.setExtTxt(right.extTxt);
            }
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_CREATE_TIME_MASK)){
                left.setCreateTime(right.createTime);
            }
            if(0L !=  (initialized & FL_PERSON_GROUP_ID_UPDATE_TIME_MASK)){
                left.setUpdateTime(right.updateTime);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(PersonGroupBean left, net.gdface.facelog.client.thrift.PersonGroupBean right) {
            if(left.checkIdInitialized() ){
                setField(right, "id", left.getId());                
            }
            if(left.checkNameInitialized() ){
                setField(right, "name", left.getName());                
            }
            if(left.checkLeafInitialized() ){
                setField(right, "leaf", left.getLeaf());                
            }
            if(left.checkParentInitialized() ){
                setField(right, "parent", left.getParent());                
            }
            if(left.checkRemarkInitialized() ){
                setField(right, "remark", left.getRemark());                
            }
            if(left.checkExtBinInitialized() ){
                setField(right, "extBin", ByteString.of(left.getExtBin()));
            }
            if(left.checkExtTxtInitialized() ){
                setField(right, "extTxt", left.getExtTxt());                
            }
// IGNORE field fl_person_group.create_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkCreateTimeInitialized() ){
                setField(right, "createTime", left.getCreateTime().getTime());
            }
*/
// IGNORE field fl_person_group.update_time , controlled by 'general.beanconverter.tonative.ignore' in properties file
/*
            if(left.checkUpdateTimeInitialized() ){
                setField(right, "updateTime", left.getUpdateTime().getTime());
            }
*/
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
    /** {@link IBeanConverter} implementation for convert between {@link LogLightBean} and thrift beans {@link net.gdface.facelog.client.thrift.LogLightBean} */
    public static final IBeanConverter<LogLightBean,net.gdface.facelog.client.thrift.LogLightBean> CONVERTER_LOGLIGHTBEAN
            = new IBeanConverter.AbstractHandle<LogLightBean,net.gdface.facelog.client.thrift.LogLightBean>(){
        @Override
        protected void doFromRight(LogLightBean left, net.gdface.facelog.client.thrift.LogLightBean right) {
            long initialized = right.initialized;
            if(0L !=  (initialized & FL_LOG_LIGHT_ID_ID_MASK)){
                left.setId(right.id);
            }
            if(0L !=  (initialized & FL_LOG_LIGHT_ID_PERSON_ID_MASK)){
                left.setPersonId(right.personId);
            }
            if(0L !=  (initialized & FL_LOG_LIGHT_ID_NAME_MASK)){
                left.setName(right.name);
            }
            if(0L !=  (initialized & FL_LOG_LIGHT_ID_PAPERS_TYPE_MASK)){
                left.setPapersType(right.papersType);
            }
            if(0L !=  (initialized & FL_LOG_LIGHT_ID_PAPERS_NUM_MASK)){
                left.setPapersNum(right.papersNum);
            }
            if(0L !=  (initialized & FL_LOG_LIGHT_ID_VERIFY_TIME_MASK)){
                left.setVerifyTime(right.verifyTime);
            }
            left.setNew(right._new);
            left.setModified(right.modified);
        }

        @Override
        protected void doToRight(LogLightBean left, net.gdface.facelog.client.thrift.LogLightBean right) {
            if(left.checkIdInitialized() ){
                setField(right, "id", left.getId());                
            }
            if(left.checkPersonIdInitialized() ){
                setField(right, "personId", left.getPersonId());                
            }
            if(left.checkNameInitialized() ){
                setField(right, "name", left.getName());                
            }
            if(left.checkPapersTypeInitialized() ){
                setField(right, "papersType", left.getPapersType());                
            }
            if(left.checkPapersNumInitialized() ){
                setField(right, "papersNum", left.getPapersNum());                
            }
            if(left.checkVerifyTimeInitialized() ){
                setField(right, "verifyTime", left.getVerifyTime().getTime());
            }
            setField(right,"_new",left.isNew());
            setField(right,"modified",left.getModified());
            setField(right,"initialized",left.getInitialized());

        }};
}
