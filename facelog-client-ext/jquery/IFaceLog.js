//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

IFaceLog_addFeature_args = function(args) {
  this.feature = null;
  this.personId = null;
  this.faecBeans = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.faecBeans !== undefined && args.faecBeans !== null) {
      this.faecBeans = Thrift.copyList(args.faecBeans, [FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_addFeature_args.prototype = {};
IFaceLog_addFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.faecBeans = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new FaceBean();
          elem6.read(input);
          this.faecBeans.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeature_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 2);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.faecBeans !== null && this.faecBeans !== undefined) {
    output.writeFieldBegin('faecBeans', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.faecBeans.length);
    for (var iter7 in this.faecBeans)
    {
      if (this.faecBeans.hasOwnProperty(iter7))
      {
        iter7 = this.faecBeans[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeature_result.prototype = {};
IFaceLog_addFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addFeatureMulti_args = function(args) {
  this.feature = null;
  this.personId = null;
  this.faceInfo = null;
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.faceInfo !== undefined && args.faceInfo !== null) {
      this.faceInfo = Thrift.copyMap(args.faceInfo, [FaceBean]);
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_addFeatureMulti_args.prototype = {};
IFaceLog_addFeatureMulti_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.faceInfo = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readBinary().value;
          val15 = new FaceBean();
          val15.read(input);
          this.faceInfo[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureMulti_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureMulti_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 2);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.faceInfo !== null && this.faceInfo !== undefined) {
    output.writeFieldBegin('faceInfo', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.faceInfo));
    for (var kiter16 in this.faceInfo)
    {
      if (this.faceInfo.hasOwnProperty(kiter16))
      {
        var viter17 = this.faceInfo[kiter16];
        output.writeBinary(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 4);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addFeatureMulti_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeatureMulti_result.prototype = {};
IFaceLog_addFeatureMulti_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureMulti_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureMulti_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addImage_args = function(args) {
  this.imageData = null;
  this.deviceId = null;
  this.faceBean = null;
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.imageData !== undefined && args.imageData !== null) {
      this.imageData = args.imageData;
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new FaceBean(args.faceBean);
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_addImage_args.prototype = {};
IFaceLog_addImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageData = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addImage_args');
  if (this.imageData !== null && this.imageData !== undefined) {
    output.writeFieldBegin('imageData', Thrift.Type.STRING, 1);
    output.writeBinary(this.imageData);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 3);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 4);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ImageBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addImage_result.prototype = {};
IFaceLog_addImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ImageBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addLog_args = function(args) {
  this.bean = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new LogBean(args.bean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_addLog_args.prototype = {};
IFaceLog_addLog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new LogBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLog_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLog_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addLog_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLog_result.prototype = {};
IFaceLog_addLog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLog_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLog_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addLogs_args = function(args) {
  this.beans = null;
  this.token = null;
  if (args) {
    if (args.beans !== undefined && args.beans !== null) {
      this.beans = Thrift.copyList(args.beans, [LogBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_addLogs_args.prototype = {};
IFaceLog_addLogs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.beans = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new LogBean();
          elem24.read(input);
          this.beans.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogs_args');
  if (this.beans !== null && this.beans !== undefined) {
    output.writeFieldBegin('beans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.beans.length);
    for (var iter25 in this.beans)
    {
      if (this.beans.hasOwnProperty(iter25))
      {
        iter25 = this.beans[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addLogs_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLogs_result.prototype = {};
IFaceLog_addLogs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogs_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addPermit_args = function(args) {
  this.deviceGroup = null;
  this.personGroup = null;
  this.token = null;
  if (args) {
    if (args.deviceGroup !== undefined && args.deviceGroup !== null) {
      this.deviceGroup = new DeviceGroupBean(args.deviceGroup);
    }
    if (args.personGroup !== undefined && args.personGroup !== null) {
      this.personGroup = new PersonGroupBean(args.personGroup);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_addPermit_args.prototype = {};
IFaceLog_addPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceGroup = new DeviceGroupBean();
        this.deviceGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.personGroup = new PersonGroupBean();
        this.personGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addPermit_args');
  if (this.deviceGroup !== null && this.deviceGroup !== undefined) {
    output.writeFieldBegin('deviceGroup', Thrift.Type.STRUCT, 1);
    this.deviceGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.personGroup !== null && this.personGroup !== undefined) {
    output.writeFieldBegin('personGroup', Thrift.Type.STRUCT, 2);
    this.personGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addPermit_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_addPermit_result.prototype = {};
IFaceLog_addPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addPermit_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addPermitById_args = function(args) {
  this.deviceGroupId = null;
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_addPermitById_args.prototype = {};
IFaceLog_addPermitById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addPermitById_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addPermitById_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_addPermitById_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_addPermitById_result.prototype = {};
IFaceLog_addPermitById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addPermitById_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addPermitById_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyAckChannel_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_applyAckChannel_args.prototype = {};
IFaceLog_applyAckChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannel_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannel_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyAckChannel_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyAckChannel_result.prototype = {};
IFaceLog_applyAckChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannel_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_args = function(args) {
  this.token = null;
  this.duration = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field duration is unset!');
    }
  }
};
IFaceLog_applyAckChannelWithDuration_args.prototype = {};
IFaceLog_applyAckChannelWithDuration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannelWithDuration_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 2);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyAckChannelWithDuration_result.prototype = {};
IFaceLog_applyAckChannelWithDuration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannelWithDuration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyCmdSn_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_applyCmdSn_args.prototype = {};
IFaceLog_applyCmdSn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyCmdSn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyCmdSn_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyCmdSn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyCmdSn_result.prototype = {};
IFaceLog_applyCmdSn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyCmdSn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyCmdSn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyPersonToken_args = function(args) {
  this.personId = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyPersonToken_args.prototype = {};
IFaceLog_applyPersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyPersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyPersonToken_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyPersonToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyPersonToken_result.prototype = {};
IFaceLog_applyPersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyPersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyPersonToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyRootToken_args = function(args) {
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyRootToken_args.prototype = {};
IFaceLog_applyRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyRootToken_args');
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 1);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 2);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_applyRootToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyRootToken_result.prototype = {};
IFaceLog_applyRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyRootToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_bindBorder_args = function(args) {
  this.personGroupId = null;
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_bindBorder_args.prototype = {};
IFaceLog_bindBorder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_bindBorder_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_bindBorder_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_bindBorder_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_bindBorder_result.prototype = {};
IFaceLog_bindBorder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_bindBorder_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_bindBorder_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countDeviceByWhere_args.prototype = {};
IFaceLog_countDeviceByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countDeviceByWhere_result.prototype = {};
IFaceLog_countDeviceByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countDeviceGroupByWhere_args.prototype = {};
IFaceLog_countDeviceGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countDeviceGroupByWhere_result.prototype = {};
IFaceLog_countDeviceGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countLogByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countLogByWhere_args.prototype = {};
IFaceLog_countLogByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countLogByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogByWhere_result.prototype = {};
IFaceLog_countLogByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_countLogLightByVerifyTime_args.prototype = {};
IFaceLog_countLogLightByVerifyTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByVerifyTime_result.prototype = {};
IFaceLog_countLogLightByVerifyTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countLogLightByWhere_args.prototype = {};
IFaceLog_countLogLightByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByWhere_result.prototype = {};
IFaceLog_countLogLightByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countPersonByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countPersonByWhere_args.prototype = {};
IFaceLog_countPersonByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countPersonByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonByWhere_result.prototype = {};
IFaceLog_countPersonByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countPersonGroupByWhere_args.prototype = {};
IFaceLog_countPersonGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonGroupByWhere_result.prototype = {};
IFaceLog_countPersonGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_args = function(args) {
  this.personId = null;
  this.deleteImage = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.deleteImage !== undefined && args.deleteImage !== null) {
      this.deleteImage = args.deleteImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deleteAllFeaturesByPersonId_args.prototype = {};
IFaceLog_deleteAllFeaturesByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteImage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteAllFeaturesByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.deleteImage !== null && this.deleteImage !== undefined) {
    output.writeFieldBegin('deleteImage', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteAllFeaturesByPersonId_result.prototype = {};
IFaceLog_deleteAllFeaturesByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteAllFeaturesByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deleteDeviceGroup_args.prototype = {};
IFaceLog_deleteDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteDeviceGroup_result.prototype = {};
IFaceLog_deleteDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deleteFeature_args = function(args) {
  this.featureMd5 = null;
  this.deleteImage = null;
  this.token = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.deleteImage !== undefined && args.deleteImage !== null) {
      this.deleteImage = args.deleteImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deleteFeature_args.prototype = {};
IFaceLog_deleteFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteImage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.deleteImage !== null && this.deleteImage !== undefined) {
    output.writeFieldBegin('deleteImage', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deleteFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteFeature_result.prototype = {};
IFaceLog_deleteFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.success = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString().value;
          this.success.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter33 in this.success)
    {
      if (this.success.hasOwnProperty(iter33))
      {
        iter33 = this.success[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deleteImage_args = function(args) {
  this.imageMd5 = null;
  this.token = null;
  if (args) {
    if (args.imageMd5 !== undefined && args.imageMd5 !== null) {
      this.imageMd5 = args.imageMd5;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deleteImage_args.prototype = {};
IFaceLog_deleteImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteImage_args');
  if (this.imageMd5 !== null && this.imageMd5 !== undefined) {
    output.writeFieldBegin('imageMd5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMd5);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deleteImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteImage_result.prototype = {};
IFaceLog_deleteImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePermit_args = function(args) {
  this.deviceGroup = null;
  this.personGroup = null;
  this.token = null;
  if (args) {
    if (args.deviceGroup !== undefined && args.deviceGroup !== null) {
      this.deviceGroup = new DeviceGroupBean(args.deviceGroup);
    }
    if (args.personGroup !== undefined && args.personGroup !== null) {
      this.personGroup = new PersonGroupBean(args.personGroup);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deletePermit_args.prototype = {};
IFaceLog_deletePermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceGroup = new DeviceGroupBean();
        this.deviceGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.personGroup = new PersonGroupBean();
        this.personGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePermit_args');
  if (this.deviceGroup !== null && this.deviceGroup !== undefined) {
    output.writeFieldBegin('deviceGroup', Thrift.Type.STRUCT, 1);
    this.deviceGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.personGroup !== null && this.personGroup !== undefined) {
    output.writeFieldBegin('personGroup', Thrift.Type.STRUCT, 2);
    this.personGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePermit_result.prototype = {};
IFaceLog_deletePermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePerson_args = function(args) {
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deletePerson_args.prototype = {};
IFaceLog_deletePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePerson_result.prototype = {};
IFaceLog_deletePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_args = function(args) {
  this.papersNum = null;
  this.token = null;
  if (args) {
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deletePersonByPapersNum_args.prototype = {};
IFaceLog_deletePersonByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonByPapersNum_args');
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 1);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonByPapersNum_result.prototype = {};
IFaceLog_deletePersonByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePersonGroup_args = function(args) {
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deletePersonGroup_args.prototype = {};
IFaceLog_deletePersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonGroup_result.prototype = {};
IFaceLog_deletePersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePersons_args = function(args) {
  this.personIdList = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deletePersons_args.prototype = {};
IFaceLog_deletePersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.personIdList = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readI32().value;
          this.personIdList.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersons_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter41 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter41))
      {
        iter41 = this.personIdList[iter41];
        output.writeI32(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersons_result.prototype = {};
IFaceLog_deletePersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_args = function(args) {
  this.papersNumlist = null;
  this.token = null;
  if (args) {
    if (args.papersNumlist !== undefined && args.papersNumlist !== null) {
      this.papersNumlist = Thrift.copyList(args.papersNumlist, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_deletePersonsByPapersNum_args.prototype = {};
IFaceLog_deletePersonsByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.papersNumlist = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString().value;
          this.papersNumlist.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonsByPapersNum_args');
  if (this.papersNumlist !== null && this.papersNumlist !== undefined) {
    output.writeFieldBegin('papersNumlist', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.papersNumlist.length);
    for (var iter49 in this.papersNumlist)
    {
      if (this.papersNumlist.hasOwnProperty(iter49))
      {
        iter49 = this.papersNumlist[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonsByPapersNum_result.prototype = {};
IFaceLog_deletePersonsByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonsByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_disablePerson_args = function(args) {
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_disablePerson_args.prototype = {};
IFaceLog_disablePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_disablePerson_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_disablePerson_result.prototype = {};
IFaceLog_disablePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePerson_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_disablePersonList_args = function(args) {
  this.personIdList = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_disablePersonList_args.prototype = {};
IFaceLog_disablePersonList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.personIdList = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readI32().value;
          this.personIdList.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePersonList_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePersonList_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter57 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter57))
      {
        iter57 = this.personIdList[iter57];
        output.writeI32(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_disablePersonList_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_disablePersonList_result.prototype = {};
IFaceLog_disablePersonList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePersonList_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePersonList_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_existsDevice_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
IFaceLog_existsDevice_args.prototype = {};
IFaceLog_existsDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsDevice_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_existsDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsDevice_result.prototype = {};
IFaceLog_existsDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_existsFeature_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_existsFeature_args.prototype = {};
IFaceLog_existsFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsFeature_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_existsFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsFeature_result.prototype = {};
IFaceLog_existsFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_existsImage_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_existsImage_args.prototype = {};
IFaceLog_existsImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsImage_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_existsImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsImage_result.prototype = {};
IFaceLog_existsImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_existsPerson_args = function(args) {
  this.persionId = null;
  if (args) {
    if (args.persionId !== undefined && args.persionId !== null) {
      this.persionId = args.persionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field persionId is unset!');
    }
  }
};
IFaceLog_existsPerson_args.prototype = {};
IFaceLog_existsPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.persionId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsPerson_args');
  if (this.persionId !== null && this.persionId !== undefined) {
    output.writeFieldBegin('persionId', Thrift.Type.I32, 1);
    output.writeI32(this.persionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_existsPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsPerson_result.prototype = {};
IFaceLog_existsPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
  }
};
IFaceLog_getDevice_args.prototype = {};
IFaceLog_getDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevice_result.prototype = {};
IFaceLog_getDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getDeviceGroup_args.prototype = {};
IFaceLog_getDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeviceGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroup_result.prototype = {};
IFaceLog_getDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeviceGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceGroups_args = function(args) {
  this.groupIdList = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
  }
};
IFaceLog_getDeviceGroups_args.prototype = {};
IFaceLog_getDeviceGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.groupIdList = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readI32().value;
          this.groupIdList.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroups_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.groupIdList.length);
    for (var iter65 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter65))
      {
        iter65 = this.groupIdList[iter65];
        output.writeI32(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceGroups_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DeviceGroupBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroups_result.prototype = {};
IFaceLog_getDeviceGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.success = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = new DeviceGroupBean();
          elem72.read(input);
          this.success.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroups_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter73 in this.success)
    {
      if (this.success.hasOwnProperty(iter73))
      {
        iter73 = this.success[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
  }
};
IFaceLog_getDeviceGroupsBelongs_args.prototype = {};
IFaceLog_getDeviceGroupsBelongs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsBelongs_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsBelongs_result.prototype = {};
IFaceLog_getDeviceGroupsBelongs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.success = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = input.readI32().value;
          this.success.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsBelongs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter81 in this.success)
    {
      if (this.success.hasOwnProperty(iter81))
      {
        iter81 = this.success[iter81];
        output.writeI32(iter81);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
  }
};
IFaceLog_getDeviceGroupsPermit_args.prototype = {};
IFaceLog_getDeviceGroupsPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermit_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsPermit_result.prototype = {};
IFaceLog_getDeviceGroupsPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.success = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = input.readI32().value;
          this.success.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter89 in this.success)
    {
      if (this.success.hasOwnProperty(iter89))
      {
        iter89 = this.success[iter89];
        output.writeI32(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getDeviceIdOfFeature_args.prototype = {};
IFaceLog_getDeviceIdOfFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceIdOfFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceIdOfFeature_result.prototype = {};
IFaceLog_getDeviceIdOfFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceIdOfFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDevices_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined && args.idList !== null) {
      this.idList = Thrift.copyList(args.idList, [null]);
    }
  }
};
IFaceLog_getDevices_args.prototype = {};
IFaceLog_getDevices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size90 = 0;
        var _rtmp394;
        this.idList = [];
        var _etype93 = 0;
        _rtmp394 = input.readListBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = input.readI32().value;
          this.idList.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevices_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevices_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter97 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter97))
      {
        iter97 = this.idList[iter97];
        output.writeI32(iter97);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDevices_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DeviceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevices_result.prototype = {};
IFaceLog_getDevices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.success = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = new DeviceBean();
          elem104.read(input);
          this.success.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevices_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter105 in this.success)
    {
      if (this.success.hasOwnProperty(iter105))
      {
        iter105 = this.success[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getDevicesOfGroup_args.prototype = {};
IFaceLog_getDevicesOfGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevicesOfGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevicesOfGroup_result.prototype = {};
IFaceLog_getDevicesOfGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.success = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = input.readI32().value;
          this.success.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevicesOfGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter113 in this.success)
    {
      if (this.success.hasOwnProperty(iter113))
      {
        iter113 = this.success[iter113];
        output.writeI32(iter113);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeature_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_getFeature_args.prototype = {};
IFaceLog_getFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeature_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeature_result.prototype = {};
IFaceLog_getFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeatureBeansByPersonId_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getFeatureBeansByPersonId_args.prototype = {};
IFaceLog_getFeatureBeansByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBeansByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBeansByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeatureBeansByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatureBeansByPersonId_result.prototype = {};
IFaceLog_getFeatureBeansByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readString().value;
          this.success.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBeansByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBeansByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter121 in this.success)
    {
      if (this.success.hasOwnProperty(iter121))
      {
        iter121 = this.success[iter121];
        output.writeString(iter121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeatureBytes_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_getFeatureBytes_args.prototype = {};
IFaceLog_getFeatureBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBytes_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBytes_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeatureBytes_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatureBytes_result.prototype = {};
IFaceLog_getFeatureBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBytes_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBytes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeatures_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = Thrift.copyList(args.md5, [null]);
    }
  }
};
IFaceLog_getFeatures_args.prototype = {};
IFaceLog_getFeatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size122 = 0;
        var _rtmp3126;
        this.md5 = [];
        var _etype125 = 0;
        _rtmp3126 = input.readListBegin();
        _etype125 = _rtmp3126.etype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var elem128 = null;
          elem128 = input.readString().value;
          this.md5.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatures_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatures_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.md5.length);
    for (var iter129 in this.md5)
    {
      if (this.md5.hasOwnProperty(iter129))
      {
        iter129 = this.md5[iter129];
        output.writeString(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeatures_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [FeatureBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatures_result.prototype = {};
IFaceLog_getFeatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.success = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = new FeatureBean();
          elem136.read(input);
          this.success.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatures_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter137 in this.success)
    {
      if (this.success.hasOwnProperty(iter137))
      {
        iter137 = this.success[iter137];
        iter137.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getFeaturesOfPerson_args.prototype = {};
IFaceLog_getFeaturesOfPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesOfPerson_result.prototype = {};
IFaceLog_getFeaturesOfPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.success = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = input.readString().value;
          this.success.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter145 in this.success)
    {
      if (this.success.hasOwnProperty(iter145))
      {
        iter145 = this.success[iter145];
        output.writeString(iter145);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getGroupPermit_args = function(args) {
  this.deviceId = null;
  this.personGroupId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getGroupPermit_args.prototype = {};
IFaceLog_getGroupPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermit_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getGroupPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermit_result.prototype = {};
IFaceLog_getGroupPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getGroupPermits_args = function(args) {
  this.deviceId = null;
  this.personGroupIdList = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personGroupIdList !== undefined && args.personGroupIdList !== null) {
      this.personGroupIdList = Thrift.copyList(args.personGroupIdList, [null]);
    }
  }
};
IFaceLog_getGroupPermits_args.prototype = {};
IFaceLog_getGroupPermits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.personGroupIdList = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = input.readI32().value;
          this.personGroupIdList.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermits_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermits_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personGroupIdList !== null && this.personGroupIdList !== undefined) {
    output.writeFieldBegin('personGroupIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.personGroupIdList.length);
    for (var iter153 in this.personGroupIdList)
    {
      if (this.personGroupIdList.hasOwnProperty(iter153))
      {
        iter153 = this.personGroupIdList[iter153];
        output.writeI32(iter153);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getGroupPermits_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermits_result.prototype = {};
IFaceLog_getGroupPermits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.success = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = input.readBool().value;
          this.success.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermits_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.BOOL, this.success.length);
    for (var iter161 in this.success)
    {
      if (this.success.hasOwnProperty(iter161))
      {
        iter161 = this.success[iter161];
        output.writeBool(iter161);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getImage_args = function(args) {
  this.imageMD5 = null;
  if (args) {
    if (args.imageMD5 !== undefined && args.imageMD5 !== null) {
      this.imageMD5 = args.imageMD5;
    }
  }
};
IFaceLog_getImage_args.prototype = {};
IFaceLog_getImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMD5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImage_args');
  if (this.imageMD5 !== null && this.imageMD5 !== undefined) {
    output.writeFieldBegin('imageMD5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMD5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ImageBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImage_result.prototype = {};
IFaceLog_getImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ImageBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getImageBytes_args = function(args) {
  this.imageMD5 = null;
  if (args) {
    if (args.imageMD5 !== undefined && args.imageMD5 !== null) {
      this.imageMD5 = args.imageMD5;
    }
  }
};
IFaceLog_getImageBytes_args.prototype = {};
IFaceLog_getImageBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMD5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImageBytes_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImageBytes_args');
  if (this.imageMD5 !== null && this.imageMD5 !== undefined) {
    output.writeFieldBegin('imageMD5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMD5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getImageBytes_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImageBytes_result.prototype = {};
IFaceLog_getImageBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImageBytes_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImageBytes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getImagesAssociatedByFeature_args.prototype = {};
IFaceLog_getImagesAssociatedByFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImagesAssociatedByFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImagesAssociatedByFeature_result.prototype = {};
IFaceLog_getImagesAssociatedByFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size162 = 0;
        var _rtmp3166;
        this.success = [];
        var _etype165 = 0;
        _rtmp3166 = input.readListBegin();
        _etype165 = _rtmp3166.etype;
        _size162 = _rtmp3166.size;
        for (var _i167 = 0; _i167 < _size162; ++_i167)
        {
          var elem168 = null;
          elem168 = input.readString().value;
          this.success.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImagesAssociatedByFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter169 in this.success)
    {
      if (this.success.hasOwnProperty(iter169))
      {
        iter169 = this.success[iter169];
        output.writeString(iter169);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getLogBeansByPersonId_args.prototype = {};
IFaceLog_getLogBeansByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getLogBeansByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [LogBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getLogBeansByPersonId_result.prototype = {};
IFaceLog_getLogBeansByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size170 = 0;
        var _rtmp3174;
        this.success = [];
        var _etype173 = 0;
        _rtmp3174 = input.readListBegin();
        _etype173 = _rtmp3174.etype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          var elem176 = null;
          elem176 = new LogBean();
          elem176.read(input);
          this.success.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getLogBeansByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter177 in this.success)
    {
      if (this.success.hasOwnProperty(iter177))
      {
        iter177 = this.success[iter177];
        iter177.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPerson_args.prototype = {};
IFaceLog_getPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPerson_result.prototype = {};
IFaceLog_getPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_args = function(args) {
  this.papersNum = null;
  if (args) {
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
  }
};
IFaceLog_getPersonByPapersNum_args.prototype = {};
IFaceLog_getPersonByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByPapersNum_args');
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 1);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonByPapersNum_result.prototype = {};
IFaceLog_getPersonByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getPersonGroup_args.prototype = {};
IFaceLog_getPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroup_result.prototype = {};
IFaceLog_getPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonGroups_args = function(args) {
  this.groupIdList = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
  }
};
IFaceLog_getPersonGroups_args.prototype = {};
IFaceLog_getPersonGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.groupIdList = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = input.readI32().value;
          this.groupIdList.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroups_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.groupIdList.length);
    for (var iter185 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter185))
      {
        iter185 = this.groupIdList[iter185];
        output.writeI32(iter185);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonGroups_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PersonGroupBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroups_result.prototype = {};
IFaceLog_getPersonGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size186 = 0;
        var _rtmp3190;
        this.success = [];
        var _etype189 = 0;
        _rtmp3190 = input.readListBegin();
        _etype189 = _rtmp3190.etype;
        _size186 = _rtmp3190.size;
        for (var _i191 = 0; _i191 < _size186; ++_i191)
        {
          var elem192 = null;
          elem192 = new PersonGroupBean();
          elem192.read(input);
          this.success.push(elem192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroups_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter193 in this.success)
    {
      if (this.success.hasOwnProperty(iter193))
      {
        iter193 = this.success[iter193];
        iter193.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPersonGroupsBelongs_args.prototype = {};
IFaceLog_getPersonGroupsBelongs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsBelongs_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroupsBelongs_result.prototype = {};
IFaceLog_getPersonGroupsBelongs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size194 = 0;
        var _rtmp3198;
        this.success = [];
        var _etype197 = 0;
        _rtmp3198 = input.readListBegin();
        _etype197 = _rtmp3198.etype;
        _size194 = _rtmp3198.size;
        for (var _i199 = 0; _i199 < _size194; ++_i199)
        {
          var elem200 = null;
          elem200 = input.readI32().value;
          this.success.push(elem200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsBelongs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter201 in this.success)
    {
      if (this.success.hasOwnProperty(iter201))
      {
        iter201 = this.success[iter201];
        output.writeI32(iter201);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
  }
};
IFaceLog_getPersonGroupsPermittedBy_args.prototype = {};
IFaceLog_getPersonGroupsPermittedBy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsPermittedBy_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroupsPermittedBy_result.prototype = {};
IFaceLog_getPersonGroupsPermittedBy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size202 = 0;
        var _rtmp3206;
        this.success = [];
        var _etype205 = 0;
        _rtmp3206 = input.readListBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = input.readI32().value;
          this.success.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsPermittedBy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter209 in this.success)
    {
      if (this.success.hasOwnProperty(iter209))
      {
        iter209 = this.success[iter209];
        output.writeI32(iter209);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonPermit_args = function(args) {
  this.deviceId = null;
  this.personId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPersonPermit_args.prototype = {};
IFaceLog_getPersonPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermit_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 2);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonPermit_result.prototype = {};
IFaceLog_getPersonPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonPermits_args = function(args) {
  this.deviceId = null;
  this.personIdList = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
  }
};
IFaceLog_getPersonPermits_args.prototype = {};
IFaceLog_getPersonPermits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.personIdList = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = input.readI32().value;
          this.personIdList.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermits_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermits_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter217 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter217))
      {
        iter217 = this.personIdList[iter217];
        output.writeI32(iter217);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonPermits_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonPermits_result.prototype = {};
IFaceLog_getPersonPermits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size218 = 0;
        var _rtmp3222;
        this.success = [];
        var _etype221 = 0;
        _rtmp3222 = input.readListBegin();
        _etype221 = _rtmp3222.etype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          var elem224 = null;
          elem224 = input.readBool().value;
          this.success.push(elem224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermits_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.BOOL, this.success.length);
    for (var iter225 in this.success)
    {
      if (this.success.hasOwnProperty(iter225))
      {
        iter225 = this.success[iter225];
        output.writeBool(iter225);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersons_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined && args.idList !== null) {
      this.idList = Thrift.copyList(args.idList, [null]);
    }
  }
};
IFaceLog_getPersons_args.prototype = {};
IFaceLog_getPersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.idList = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = input.readI32().value;
          this.idList.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersons_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter233 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter233))
      {
        iter233 = this.idList[iter233];
        output.writeI32(iter233);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PersonBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersons_result.prototype = {};
IFaceLog_getPersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size234 = 0;
        var _rtmp3238;
        this.success = [];
        var _etype237 = 0;
        _rtmp3238 = input.readListBegin();
        _etype237 = _rtmp3238.etype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var elem240 = null;
          elem240 = new PersonBean();
          elem240.read(input);
          this.success.push(elem240);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter241 in this.success)
    {
      if (this.success.hasOwnProperty(iter241))
      {
        iter241 = this.success[iter241];
        iter241.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getPersonsOfGroup_args.prototype = {};
IFaceLog_getPersonsOfGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsOfGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonsOfGroup_result.prototype = {};
IFaceLog_getPersonsOfGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size242 = 0;
        var _rtmp3246;
        this.success = [];
        var _etype245 = 0;
        _rtmp3246 = input.readListBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = input.readI32().value;
          this.success.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsOfGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter249 in this.success)
    {
      if (this.success.hasOwnProperty(iter249))
      {
        iter249 = this.success[iter249];
        output.writeI32(iter249);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getProperty_args = function(args) {
  this.key = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_getProperty_args.prototype = {};
IFaceLog_getProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperty_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperty_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getProperty_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getProperty_result.prototype = {};
IFaceLog_getProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperty_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getRedisParameters_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_getRedisParameters_args.prototype = {};
IFaceLog_getRedisParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getRedisParameters_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getRedisParameters_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getRedisParameters_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getRedisParameters_result.prototype = {};
IFaceLog_getRedisParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size250 = 0;
        var _rtmp3254;
        this.success = {};
        var _ktype251 = 0;
        var _vtype252 = 0;
        _rtmp3254 = input.readMapBegin();
        _ktype251 = _rtmp3254.ktype;
        _vtype252 = _rtmp3254.vtype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          if (_i255 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key256 = null;
          var val257 = null;
          key256 = input.readI32().value;
          val257 = input.readString().value;
          this.success[key256] = val257;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getRedisParameters_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getRedisParameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter258 in this.success)
    {
      if (this.success.hasOwnProperty(kiter258))
      {
        var viter259 = this.success[kiter258];
        output.writeI32(kiter258);
        output.writeString(viter259);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getServiceConfig_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_getServiceConfig_args.prototype = {};
IFaceLog_getServiceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getServiceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getServiceConfig_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getServiceConfig_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getServiceConfig_result.prototype = {};
IFaceLog_getServiceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size260 = 0;
        var _rtmp3264;
        this.success = {};
        var _ktype261 = 0;
        var _vtype262 = 0;
        _rtmp3264 = input.readMapBegin();
        _ktype261 = _rtmp3264.ktype;
        _vtype262 = _rtmp3264.vtype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          if (_i265 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key266 = null;
          var val267 = null;
          key266 = input.readString().value;
          val267 = input.readString().value;
          this.success[key266] = val267;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getServiceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getServiceConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter268 in this.success)
    {
      if (this.success.hasOwnProperty(kiter268))
      {
        var viter269 = this.success[kiter268];
        output.writeString(kiter268);
        output.writeString(viter269);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getSubDeviceGroup_args.prototype = {};
IFaceLog_getSubDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getSubDeviceGroup_result.prototype = {};
IFaceLog_getSubDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size270 = 0;
        var _rtmp3274;
        this.success = [];
        var _etype273 = 0;
        _rtmp3274 = input.readListBegin();
        _etype273 = _rtmp3274.etype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          var elem276 = null;
          elem276 = input.readI32().value;
          this.success.push(elem276);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter277 in this.success)
    {
      if (this.success.hasOwnProperty(iter277))
      {
        iter277 = this.success[iter277];
        output.writeI32(iter277);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getSubPersonGroup_args.prototype = {};
IFaceLog_getSubPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getSubPersonGroup_result.prototype = {};
IFaceLog_getSubPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = input.readI32().value;
          this.success.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter285 in this.success)
    {
      if (this.success.hasOwnProperty(iter285))
      {
        iter285 = this.success[iter285];
        output.writeI32(iter285);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isDisable_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_isDisable_args.prototype = {};
IFaceLog_isDisable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isDisable_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isDisable_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isDisable_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isDisable_result.prototype = {};
IFaceLog_isDisable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isDisable_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isDisable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isLocal_args = function(args) {
};
IFaceLog_isLocal_args.prototype = {};
IFaceLog_isLocal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isLocal_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isLocal_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isLocal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isLocal_result.prototype = {};
IFaceLog_isLocal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isLocal_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isLocal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidAckChannel_args = function(args) {
  this.ackChannel = null;
  if (args) {
    if (args.ackChannel !== undefined && args.ackChannel !== null) {
      this.ackChannel = args.ackChannel;
    }
  }
};
IFaceLog_isValidAckChannel_args.prototype = {};
IFaceLog_isValidAckChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ackChannel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidAckChannel_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidAckChannel_args');
  if (this.ackChannel !== null && this.ackChannel !== undefined) {
    output.writeFieldBegin('ackChannel', Thrift.Type.STRING, 1);
    output.writeString(this.ackChannel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidAckChannel_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidAckChannel_result.prototype = {};
IFaceLog_isValidAckChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidAckChannel_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidAckChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidCmdSn_args = function(args) {
  this.cmdSn = null;
  if (args) {
    if (args.cmdSn !== undefined && args.cmdSn !== null) {
      this.cmdSn = args.cmdSn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cmdSn is unset!');
    }
  }
};
IFaceLog_isValidCmdSn_args.prototype = {};
IFaceLog_isValidCmdSn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.cmdSn = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidCmdSn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidCmdSn_args');
  if (this.cmdSn !== null && this.cmdSn !== undefined) {
    output.writeFieldBegin('cmdSn', Thrift.Type.I64, 1);
    output.writeI64(this.cmdSn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidCmdSn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidCmdSn_result.prototype = {};
IFaceLog_isValidCmdSn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidCmdSn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidCmdSn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_isValidDeviceToken_args.prototype = {};
IFaceLog_isValidDeviceToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidDeviceToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidDeviceToken_result.prototype = {};
IFaceLog_isValidDeviceToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidDeviceToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidPassword_args = function(args) {
  this.userId = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_isValidPassword_args.prototype = {};
IFaceLog_isValidPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPassword_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPassword_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidPassword_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidPassword_result.prototype = {};
IFaceLog_isValidPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPassword_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidPersonToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_isValidPersonToken_args.prototype = {};
IFaceLog_isValidPersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPersonToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidPersonToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidPersonToken_result.prototype = {};
IFaceLog_isValidPersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPersonToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidRootToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_isValidRootToken_args.prototype = {};
IFaceLog_isValidRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidRootToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_isValidRootToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidRootToken_result.prototype = {};
IFaceLog_isValidRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidRootToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_listOfParentForDeviceGroup_args.prototype = {};
IFaceLog_listOfParentForDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_listOfParentForDeviceGroup_result.prototype = {};
IFaceLog_listOfParentForDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size286 = 0;
        var _rtmp3290;
        this.success = [];
        var _etype289 = 0;
        _rtmp3290 = input.readListBegin();
        _etype289 = _rtmp3290.etype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          var elem292 = null;
          elem292 = input.readI32().value;
          this.success.push(elem292);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter293 in this.success)
    {
      if (this.success.hasOwnProperty(iter293))
      {
        iter293 = this.success[iter293];
        output.writeI32(iter293);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_listOfParentForPersonGroup_args.prototype = {};
IFaceLog_listOfParentForPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_listOfParentForPersonGroup_result.prototype = {};
IFaceLog_listOfParentForPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size294 = 0;
        var _rtmp3298;
        this.success = [];
        var _etype297 = 0;
        _rtmp3298 = input.readListBegin();
        _etype297 = _rtmp3298.etype;
        _size294 = _rtmp3298.size;
        for (var _i299 = 0; _i299 < _size294; ++_i299)
        {
          var elem300 = null;
          elem300 = input.readI32().value;
          this.success.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter301 in this.success)
    {
      if (this.success.hasOwnProperty(iter301))
      {
        iter301 = this.success[iter301];
        output.writeI32(iter301);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadAllPerson_args = function(args) {
};
IFaceLog_loadAllPerson_args.prototype = {};
IFaceLog_loadAllPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadAllPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadAllPerson_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadAllPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadAllPerson_result.prototype = {};
IFaceLog_loadAllPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size302 = 0;
        var _rtmp3306;
        this.success = [];
        var _etype305 = 0;
        _rtmp3306 = input.readListBegin();
        _etype305 = _rtmp3306.etype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          var elem308 = null;
          elem308 = input.readI32().value;
          this.success.push(elem308);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadAllPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadAllPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter309 in this.success)
    {
      if (this.success.hasOwnProperty(iter309))
      {
        iter309 = this.success[iter309];
        output.writeI32(iter309);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadDeviceByWhere_args.prototype = {};
IFaceLog_loadDeviceByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DeviceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceByWhere_result.prototype = {};
IFaceLog_loadDeviceByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size310 = 0;
        var _rtmp3314;
        this.success = [];
        var _etype313 = 0;
        _rtmp3314 = input.readListBegin();
        _etype313 = _rtmp3314.etype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var elem316 = null;
          elem316 = new DeviceBean();
          elem316.read(input);
          this.success.push(elem316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter317 in this.success)
    {
      if (this.success.hasOwnProperty(iter317))
      {
        iter317 = this.success[iter317];
        iter317.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadDeviceGroupByWhere_args.prototype = {};
IFaceLog_loadDeviceGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceGroupByWhere_result.prototype = {};
IFaceLog_loadDeviceGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size318 = 0;
        var _rtmp3322;
        this.success = [];
        var _etype321 = 0;
        _rtmp3322 = input.readListBegin();
        _etype321 = _rtmp3322.etype;
        _size318 = _rtmp3322.size;
        for (var _i323 = 0; _i323 < _size318; ++_i323)
        {
          var elem324 = null;
          elem324 = input.readI32().value;
          this.success.push(elem324);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter325 in this.success)
    {
      if (this.success.hasOwnProperty(iter325))
      {
        iter325 = this.success[iter325];
        output.writeI32(iter325);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDeviceGroupIdByWhere_args.prototype = {};
IFaceLog_loadDeviceGroupIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceGroupIdByWhere_result.prototype = {};
IFaceLog_loadDeviceGroupIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size326 = 0;
        var _rtmp3330;
        this.success = [];
        var _etype329 = 0;
        _rtmp3330 = input.readListBegin();
        _etype329 = _rtmp3330.etype;
        _size326 = _rtmp3330.size;
        for (var _i331 = 0; _i331 < _size326; ++_i331)
        {
          var elem332 = null;
          elem332 = input.readI32().value;
          this.success.push(elem332);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter333 in this.success)
    {
      if (this.success.hasOwnProperty(iter333))
      {
        iter333 = this.success[iter333];
        output.writeI32(iter333);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDeviceIdByWhere_args.prototype = {};
IFaceLog_loadDeviceIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceIdByWhere_result.prototype = {};
IFaceLog_loadDeviceIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size334 = 0;
        var _rtmp3338;
        this.success = [];
        var _etype337 = 0;
        _rtmp3338 = input.readListBegin();
        _etype337 = _rtmp3338.etype;
        _size334 = _rtmp3338.size;
        for (var _i339 = 0; _i339 < _size334; ++_i339)
        {
          var elem340 = null;
          elem340 = input.readI32().value;
          this.success.push(elem340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter341 in this.success)
    {
      if (this.success.hasOwnProperty(iter341))
      {
        iter341 = this.success[iter341];
        output.writeI32(iter341);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdate_args.prototype = {};
IFaceLog_loadFeatureMd5ByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdate_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdate_result.prototype = {};
IFaceLog_loadFeatureMd5ByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size342 = 0;
        var _rtmp3346;
        this.success = [];
        var _etype345 = 0;
        _rtmp3346 = input.readListBegin();
        _etype345 = _rtmp3346.etype;
        _size342 = _rtmp3346.size;
        for (var _i347 = 0; _i347 < _size342; ++_i347)
        {
          var elem348 = null;
          elem348 = input.readString().value;
          this.success.push(elem348);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter349 in this.success)
    {
      if (this.success.hasOwnProperty(iter349))
      {
        iter349 = this.success[iter349];
        output.writeString(iter349);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadLogByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogByWhere_args.prototype = {};
IFaceLog_loadLogByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadLogByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [LogBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogByWhere_result.prototype = {};
IFaceLog_loadLogByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size350 = 0;
        var _rtmp3354;
        this.success = [];
        var _etype353 = 0;
        _rtmp3354 = input.readListBegin();
        _etype353 = _rtmp3354.etype;
        _size350 = _rtmp3354.size;
        for (var _i355 = 0; _i355 < _size350; ++_i355)
        {
          var elem356 = null;
          elem356 = new LogBean();
          elem356.read(input);
          this.success.push(elem356);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter357 in this.success)
    {
      if (this.success.hasOwnProperty(iter357))
      {
        iter357 = this.success[iter357];
        iter357.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_args = function(args) {
  this.timestamp = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByVerifyTime_args.prototype = {};
IFaceLog_loadLogLightByVerifyTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByVerifyTime_result.prototype = {};
IFaceLog_loadLogLightByVerifyTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size358 = 0;
        var _rtmp3362;
        this.success = [];
        var _etype361 = 0;
        _rtmp3362 = input.readListBegin();
        _etype361 = _rtmp3362.etype;
        _size358 = _rtmp3362.size;
        for (var _i363 = 0; _i363 < _size358; ++_i363)
        {
          var elem364 = null;
          elem364 = new LogLightBean();
          elem364.read(input);
          this.success.push(elem364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter365 in this.success)
    {
      if (this.success.hasOwnProperty(iter365))
      {
        iter365 = this.success[iter365];
        iter365.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByWhere_args.prototype = {};
IFaceLog_loadLogLightByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByWhere_result.prototype = {};
IFaceLog_loadLogLightByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.success = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = new LogLightBean();
          elem372.read(input);
          this.success.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter373 in this.success)
    {
      if (this.success.hasOwnProperty(iter373))
      {
        iter373 = this.success[iter373];
        iter373.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadPermitByUpdate_args.prototype = {};
IFaceLog_loadPermitByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdate_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPermitByUpdate_result.prototype = {};
IFaceLog_loadPermitByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size374 = 0;
        var _rtmp3378;
        this.success = [];
        var _etype377 = 0;
        _rtmp3378 = input.readListBegin();
        _etype377 = _rtmp3378.etype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          var elem380 = null;
          elem380 = new PermitBean();
          elem380.read(input);
          this.success.push(elem380);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter381 in this.success)
    {
      if (this.success.hasOwnProperty(iter381))
      {
        iter381 = this.success[iter381];
        iter381.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadPersonByWhere_args.prototype = {};
IFaceLog_loadPersonByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PersonBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonByWhere_result.prototype = {};
IFaceLog_loadPersonByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.success = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = new PersonBean();
          elem388.read(input);
          this.success.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter389 in this.success)
    {
      if (this.success.hasOwnProperty(iter389))
      {
        iter389 = this.success[iter389];
        iter389.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadPersonGroupByWhere_args.prototype = {};
IFaceLog_loadPersonGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonGroupByWhere_result.prototype = {};
IFaceLog_loadPersonGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size390 = 0;
        var _rtmp3394;
        this.success = [];
        var _etype393 = 0;
        _rtmp3394 = input.readListBegin();
        _etype393 = _rtmp3394.etype;
        _size390 = _rtmp3394.size;
        for (var _i395 = 0; _i395 < _size390; ++_i395)
        {
          var elem396 = null;
          elem396 = input.readI32().value;
          this.success.push(elem396);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter397 in this.success)
    {
      if (this.success.hasOwnProperty(iter397))
      {
        iter397 = this.success[iter397];
        output.writeI32(iter397);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadPersonGroupIdByWhere_args.prototype = {};
IFaceLog_loadPersonGroupIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonGroupIdByWhere_result.prototype = {};
IFaceLog_loadPersonGroupIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size398 = 0;
        var _rtmp3402;
        this.success = [];
        var _etype401 = 0;
        _rtmp3402 = input.readListBegin();
        _etype401 = _rtmp3402.etype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var elem404 = null;
          elem404 = input.readI32().value;
          this.success.push(elem404);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter405 in this.success)
    {
      if (this.success.hasOwnProperty(iter405))
      {
        iter405 = this.success[iter405];
        output.writeI32(iter405);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadPersonIdByUpdateTime_args.prototype = {};
IFaceLog_loadPersonIdByUpdateTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByUpdateTime_result.prototype = {};
IFaceLog_loadPersonIdByUpdateTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size406 = 0;
        var _rtmp3410;
        this.success = [];
        var _etype409 = 0;
        _rtmp3410 = input.readListBegin();
        _etype409 = _rtmp3410.etype;
        _size406 = _rtmp3410.size;
        for (var _i411 = 0; _i411 < _size406; ++_i411)
        {
          var elem412 = null;
          elem412 = input.readI32().value;
          this.success.push(elem412);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter413 in this.success)
    {
      if (this.success.hasOwnProperty(iter413))
      {
        iter413 = this.success[iter413];
        output.writeI32(iter413);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadPersonIdByWhere_args.prototype = {};
IFaceLog_loadPersonIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByWhere_result.prototype = {};
IFaceLog_loadPersonIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size414 = 0;
        var _rtmp3418;
        this.success = [];
        var _etype417 = 0;
        _rtmp3418 = input.readListBegin();
        _etype417 = _rtmp3418.etype;
        _size414 = _rtmp3418.size;
        for (var _i419 = 0; _i419 < _size414; ++_i419)
        {
          var elem420 = null;
          elem420 = input.readI32().value;
          this.success.push(elem420);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter421 in this.success)
    {
      if (this.success.hasOwnProperty(iter421))
      {
        iter421 = this.success[iter421];
        output.writeI32(iter421);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadUpdatedPersons_args.prototype = {};
IFaceLog_loadUpdatedPersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersons_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadUpdatedPersons_result.prototype = {};
IFaceLog_loadUpdatedPersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size422 = 0;
        var _rtmp3426;
        this.success = [];
        var _etype425 = 0;
        _rtmp3426 = input.readListBegin();
        _etype425 = _rtmp3426.etype;
        _size422 = _rtmp3426.size;
        for (var _i427 = 0; _i427 < _size422; ++_i427)
        {
          var elem428 = null;
          elem428 = input.readI32().value;
          this.success.push(elem428);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter429 in this.success)
    {
      if (this.success.hasOwnProperty(iter429))
      {
        iter429 = this.success[iter429];
        output.writeI32(iter429);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_offline_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_offline_args.prototype = {};
IFaceLog_offline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_offline_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_offline_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_offline_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_offline_result.prototype = {};
IFaceLog_offline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_offline_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_offline_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_online_args = function(args) {
  this.device = null;
  if (args) {
    if (args.device !== undefined && args.device !== null) {
      this.device = new DeviceBean(args.device);
    }
  }
};
IFaceLog_online_args.prototype = {};
IFaceLog_online_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.device = new DeviceBean();
        this.device.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_online_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_online_args');
  if (this.device !== null && this.device !== undefined) {
    output.writeFieldBegin('device', Thrift.Type.STRUCT, 1);
    this.device.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_online_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_online_result.prototype = {};
IFaceLog_online_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_online_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_online_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_registerDevice_args = function(args) {
  this.newDevice = null;
  if (args) {
    if (args.newDevice !== undefined && args.newDevice !== null) {
      this.newDevice = new DeviceBean(args.newDevice);
    }
  }
};
IFaceLog_registerDevice_args.prototype = {};
IFaceLog_registerDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.newDevice = new DeviceBean();
        this.newDevice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_registerDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_registerDevice_args');
  if (this.newDevice !== null && this.newDevice !== undefined) {
    output.writeFieldBegin('newDevice', Thrift.Type.STRUCT, 1);
    this.newDevice.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_registerDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_registerDevice_result.prototype = {};
IFaceLog_registerDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_registerDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_registerDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_releasePersonToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_releasePersonToken_args.prototype = {};
IFaceLog_releasePersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releasePersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releasePersonToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_releasePersonToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releasePersonToken_result.prototype = {};
IFaceLog_releasePersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releasePersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releasePersonToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_releaseRootToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_releaseRootToken_args.prototype = {};
IFaceLog_releaseRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseRootToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_releaseRootToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releaseRootToken_result.prototype = {};
IFaceLog_releaseRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseRootToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_replaceFeature_args = function(args) {
  this.personId = null;
  this.featureMd5 = null;
  this.deleteOldFeatureImage = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.deleteOldFeatureImage !== undefined && args.deleteOldFeatureImage !== null) {
      this.deleteOldFeatureImage = args.deleteOldFeatureImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteOldFeatureImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_replaceFeature_args.prototype = {};
IFaceLog_replaceFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteOldFeatureImage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_replaceFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_replaceFeature_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 2);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.deleteOldFeatureImage !== null && this.deleteOldFeatureImage !== undefined) {
    output.writeFieldBegin('deleteOldFeatureImage', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteOldFeatureImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_replaceFeature_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_replaceFeature_result.prototype = {};
IFaceLog_replaceFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_replaceFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_replaceFeature_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
  }
};
IFaceLog_rootGroupOfDevice_args.prototype = {};
IFaceLog_rootGroupOfDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_rootGroupOfDevice_result.prototype = {};
IFaceLog_rootGroupOfDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
  }
};
IFaceLog_rootGroupOfPerson_args.prototype = {};
IFaceLog_rootGroupOfPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_rootGroupOfPerson_result.prototype = {};
IFaceLog_rootGroupOfPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_saveDevice_args = function(args) {
  this.deviceBean = null;
  this.token = null;
  if (args) {
    if (args.deviceBean !== undefined && args.deviceBean !== null) {
      this.deviceBean = new DeviceBean(args.deviceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_saveDevice_args.prototype = {};
IFaceLog_saveDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceBean = new DeviceBean();
        this.deviceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDevice_args');
  if (this.deviceBean !== null && this.deviceBean !== undefined) {
    output.writeFieldBegin('deviceBean', Thrift.Type.STRUCT, 1);
    this.deviceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_saveDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveDevice_result.prototype = {};
IFaceLog_saveDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_args = function(args) {
  this.deviceGroupBean = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupBean !== undefined && args.deviceGroupBean !== null) {
      this.deviceGroupBean = new DeviceGroupBean(args.deviceGroupBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_saveDeviceGroup_args.prototype = {};
IFaceLog_saveDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceGroupBean = new DeviceGroupBean();
        this.deviceGroupBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDeviceGroup_args');
  if (this.deviceGroupBean !== null && this.deviceGroupBean !== undefined) {
    output.writeFieldBegin('deviceGroupBean', Thrift.Type.STRUCT, 1);
    this.deviceGroupBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeviceGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveDeviceGroup_result.prototype = {};
IFaceLog_saveDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeviceGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePerson_args = function(args) {
  this.bean = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new PersonBean(args.bean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePerson_args.prototype = {};
IFaceLog_savePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePerson_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePerson_result.prototype = {};
IFaceLog_savePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonFull_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.feature = null;
  this.featureImage = null;
  this.featureFaceBean = null;
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureImage !== undefined && args.featureImage !== null) {
      this.featureImage = args.featureImage;
    }
    if (args.featureFaceBean !== undefined && args.featureFaceBean !== null) {
      this.featureFaceBean = new FaceBean(args.featureFaceBean);
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersonFull_args.prototype = {};
IFaceLog_savePersonFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.featureImage = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.featureFaceBean = new FaceBean();
        this.featureFaceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonFull_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonFull_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureImage !== null && this.featureImage !== undefined) {
    output.writeFieldBegin('featureImage', Thrift.Type.STRING, 4);
    output.writeBinary(this.featureImage);
    output.writeFieldEnd();
  }
  if (this.featureFaceBean !== null && this.featureFaceBean !== undefined) {
    output.writeFieldBegin('featureFaceBean', Thrift.Type.STRUCT, 5);
    this.featureFaceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 6);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 7);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonFull_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonFull_result.prototype = {};
IFaceLog_savePersonFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonFull_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonFull_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonGroup_args = function(args) {
  this.personGroupBean = null;
  this.token = null;
  if (args) {
    if (args.personGroupBean !== undefined && args.personGroupBean !== null) {
      this.personGroupBean = new PersonGroupBean(args.personGroupBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersonGroup_args.prototype = {};
IFaceLog_savePersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personGroupBean = new PersonGroupBean();
        this.personGroupBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonGroup_args');
  if (this.personGroupBean !== null && this.personGroupBean !== undefined) {
    output.writeFieldBegin('personGroupBean', Thrift.Type.STRUCT, 1);
    this.personGroupBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonGroup_result.prototype = {};
IFaceLog_savePersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhoto_args.prototype = {};
IFaceLog_savePersonWithPhoto_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhoto_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhoto_result.prototype = {};
IFaceLog_savePersonWithPhoto_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhoto_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.featureBean = null;
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.featureBean !== undefined && args.featureBean !== null) {
      this.featureBean = new FeatureBean(args.featureBean);
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeature_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.featureBean = new FeatureBean();
        this.featureBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeature_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.featureBean !== null && this.featureBean !== undefined) {
    output.writeFieldBegin('featureBean', Thrift.Type.STRUCT, 3);
    this.featureBean.write(output);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 4);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeature_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.feature = null;
  this.faceBeans = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.faceBeans !== undefined && args.faceBeans !== null) {
      this.faceBeans = Thrift.copyList(args.faceBeans, [FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size430 = 0;
        var _rtmp3434;
        this.faceBeans = [];
        var _etype433 = 0;
        _rtmp3434 = input.readListBegin();
        _etype433 = _rtmp3434.etype;
        _size430 = _rtmp3434.size;
        for (var _i435 = 0; _i435 < _size430; ++_i435)
        {
          var elem436 = null;
          elem436 = new FaceBean();
          elem436.read(input);
          this.faceBeans.push(elem436);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.faceBeans !== null && this.faceBeans !== undefined) {
    output.writeFieldBegin('faceBeans', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.faceBeans.length);
    for (var iter437 in this.faceBeans)
    {
      if (this.faceBeans.hasOwnProperty(iter437))
      {
        iter437 = this.faceBeans[iter437];
        iter437.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args = function(args) {
  this.bean = null;
  this.idPhoto = null;
  this.feature = null;
  this.faceInfo = null;
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new PersonBean(args.bean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.faceInfo !== undefined && args.faceInfo !== null) {
      this.faceInfo = Thrift.copyMap(args.faceInfo, [FaceBean]);
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size438 = 0;
        var _rtmp3442;
        this.faceInfo = {};
        var _ktype439 = 0;
        var _vtype440 = 0;
        _rtmp3442 = input.readMapBegin();
        _ktype439 = _rtmp3442.ktype;
        _vtype440 = _rtmp3442.vtype;
        _size438 = _rtmp3442.size;
        for (var _i443 = 0; _i443 < _size438; ++_i443)
        {
          if (_i443 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key444 = null;
          var val445 = null;
          key444 = input.readBinary().value;
          val445 = new FaceBean();
          val445.read(input);
          this.faceInfo[key444] = val445;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.faceInfo !== null && this.faceInfo !== undefined) {
    output.writeFieldBegin('faceInfo', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.faceInfo));
    for (var kiter446 in this.faceInfo)
    {
      if (this.faceInfo.hasOwnProperty(kiter446))
      {
        var viter447 = this.faceInfo[kiter446];
        output.writeBinary(kiter446);
        viter447.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 5);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_args = function(args) {
  this.bean = null;
  this.idPhotoMd5 = null;
  this.featureMd5 = null;
  this.token = null;
  if (args) {
    if (args.bean !== undefined && args.bean !== null) {
      this.bean = new PersonBean(args.bean);
    }
    if (args.idPhotoMd5 !== undefined && args.idPhotoMd5 !== null) {
      this.idPhotoMd5 = args.idPhotoMd5;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bean = new PersonBean();
        this.bean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhotoMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureSaved_args');
  if (this.bean !== null && this.bean !== undefined) {
    output.writeFieldBegin('bean', Thrift.Type.STRUCT, 1);
    this.bean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhotoMd5 !== null && this.idPhotoMd5 !== undefined) {
    output.writeFieldBegin('idPhotoMd5', Thrift.Type.STRING, 2);
    output.writeString(this.idPhotoMd5);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 3);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureSaved_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersons_args = function(args) {
  this.beans = null;
  this.token = null;
  if (args) {
    if (args.beans !== undefined && args.beans !== null) {
      this.beans = Thrift.copyList(args.beans, [PersonBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersons_args.prototype = {};
IFaceLog_savePersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size448 = 0;
        var _rtmp3452;
        this.beans = [];
        var _etype451 = 0;
        _rtmp3452 = input.readListBegin();
        _etype451 = _rtmp3452.etype;
        _size448 = _rtmp3452.size;
        for (var _i453 = 0; _i453 < _size448; ++_i453)
        {
          var elem454 = null;
          elem454 = new PersonBean();
          elem454.read(input);
          this.beans.push(elem454);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersons_args');
  if (this.beans !== null && this.beans !== undefined) {
    output.writeFieldBegin('beans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.beans.length);
    for (var iter455 in this.beans)
    {
      if (this.beans.hasOwnProperty(iter455))
      {
        iter455 = this.beans[iter455];
        iter455.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersons_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersons_result.prototype = {};
IFaceLog_savePersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersons_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_args = function(args) {
  this.persons = null;
  this.token = null;
  if (args) {
    if (args.persons !== undefined && args.persons !== null) {
      this.persons = Thrift.copyMap(args.persons, [PersonBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_savePersonsWithPhoto_args.prototype = {};
IFaceLog_savePersonsWithPhoto_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size456 = 0;
        var _rtmp3460;
        this.persons = {};
        var _ktype457 = 0;
        var _vtype458 = 0;
        _rtmp3460 = input.readMapBegin();
        _ktype457 = _rtmp3460.ktype;
        _vtype458 = _rtmp3460.vtype;
        _size456 = _rtmp3460.size;
        for (var _i461 = 0; _i461 < _size456; ++_i461)
        {
          if (_i461 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key462 = null;
          var val463 = null;
          key462 = input.readBinary().value;
          val463 = new PersonBean();
          val463.read(input);
          this.persons[key462] = val463;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonsWithPhoto_args');
  if (this.persons !== null && this.persons !== undefined) {
    output.writeFieldBegin('persons', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.persons));
    for (var kiter464 in this.persons)
    {
      if (this.persons.hasOwnProperty(kiter464))
      {
        var viter465 = this.persons[kiter464];
        output.writeBinary(kiter464);
        viter465.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonsWithPhoto_result.prototype = {};
IFaceLog_savePersonsWithPhoto_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonsWithPhoto_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_saveServiceConfig_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_saveServiceConfig_args.prototype = {};
IFaceLog_saveServiceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveServiceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveServiceConfig_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_saveServiceConfig_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveServiceConfig_result.prototype = {};
IFaceLog_saveServiceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveServiceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveServiceConfig_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_args = function(args) {
  this.personId = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryDate is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDate_args.prototype = {};
IFaceLog_setPersonExpiryDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDate_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 2);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDate_result.prototype = {};
IFaceLog_setPersonExpiryDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDate_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_args = function(args) {
  this.personIdList = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryDate is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDateList_args.prototype = {};
IFaceLog_setPersonExpiryDateList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size466 = 0;
        var _rtmp3470;
        this.personIdList = [];
        var _etype469 = 0;
        _rtmp3470 = input.readListBegin();
        _etype469 = _rtmp3470.etype;
        _size466 = _rtmp3470.size;
        for (var _i471 = 0; _i471 < _size466; ++_i471)
        {
          var elem472 = null;
          elem472 = input.readI32().value;
          this.personIdList.push(elem472);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateList_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter473 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter473))
      {
        iter473 = this.personIdList[iter473];
        output.writeI32(iter473);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 2);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDateList_result.prototype = {};
IFaceLog_setPersonExpiryDateList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateList_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_setProperties_args = function(args) {
  this.config = null;
  this.token = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = Thrift.copyMap(args.config, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_setProperties_args.prototype = {};
IFaceLog_setProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size474 = 0;
        var _rtmp3478;
        this.config = {};
        var _ktype475 = 0;
        var _vtype476 = 0;
        _rtmp3478 = input.readMapBegin();
        _ktype475 = _rtmp3478.ktype;
        _vtype476 = _rtmp3478.vtype;
        _size474 = _rtmp3478.size;
        for (var _i479 = 0; _i479 < _size474; ++_i479)
        {
          if (_i479 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key480 = null;
          var val481 = null;
          key480 = input.readString().value;
          val481 = input.readString().value;
          this.config[key480] = val481;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperties_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperties_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.config));
    for (var kiter482 in this.config)
    {
      if (this.config.hasOwnProperty(kiter482))
      {
        var viter483 = this.config[kiter482];
        output.writeString(kiter482);
        output.writeString(viter483);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_setProperties_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setProperties_result.prototype = {};
IFaceLog_setProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperties_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperties_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_setProperty_args = function(args) {
  this.key = null;
  this.value = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_setProperty_args.prototype = {};
IFaceLog_setProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperty_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperty_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_setProperty_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setProperty_result.prototype = {};
IFaceLog_setProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperty_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperty_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_taskQueueOf_args = function(args) {
  this.task = null;
  this.token = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_taskQueueOf_args.prototype = {};
IFaceLog_taskQueueOf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.task = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskQueueOf_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskQueueOf_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRING, 1);
    output.writeString(this.task);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_taskQueueOf_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_taskQueueOf_result.prototype = {};
IFaceLog_taskQueueOf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskQueueOf_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskQueueOf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_taskRegister_args = function(args) {
  this.task = null;
  this.token = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_taskRegister_args.prototype = {};
IFaceLog_taskRegister_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.task = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskRegister_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskRegister_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRING, 1);
    output.writeString(this.task);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_taskRegister_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_taskRegister_result.prototype = {};
IFaceLog_taskRegister_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskRegister_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskRegister_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_unbindBorder_args = function(args) {
  this.personGroupId = null;
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_unbindBorder_args.prototype = {};
IFaceLog_unbindBorder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unbindBorder_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unbindBorder_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_unbindBorder_result = function(args) {
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_unbindBorder_result.prototype = {};
IFaceLog_unbindBorder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unbindBorder_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unbindBorder_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_unregisterDevice_args = function(args) {
  this.deviceId = null;
  this.token = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_unregisterDevice_args.prototype = {};
IFaceLog_unregisterDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unregisterDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unregisterDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_unregisterDevice_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_unregisterDevice_result.prototype = {};
IFaceLog_unregisterDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unregisterDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unregisterDevice_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_updateDevice_args = function(args) {
  this.deviceBean = null;
  this.token = null;
  if (args) {
    if (args.deviceBean !== undefined && args.deviceBean !== null) {
      this.deviceBean = new DeviceBean(args.deviceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
  }
};
IFaceLog_updateDevice_args.prototype = {};
IFaceLog_updateDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceBean = new DeviceBean();
        this.deviceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_updateDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_updateDevice_args');
  if (this.deviceBean !== null && this.deviceBean !== undefined) {
    output.writeFieldBegin('deviceBean', Thrift.Type.STRUCT, 1);
    this.deviceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_updateDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_updateDevice_result.prototype = {};
IFaceLog_updateDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_updateDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_updateDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_version_args = function(args) {
};
IFaceLog_version_args.prototype = {};
IFaceLog_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_version_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_version_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_version_result.prototype = {};
IFaceLog_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_version_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_versionInfo_args = function(args) {
};
IFaceLog_versionInfo_args.prototype = {};
IFaceLog_versionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_versionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_versionInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLog_versionInfo_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_versionInfo_result.prototype = {};
IFaceLog_versionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size484 = 0;
        var _rtmp3488;
        this.success = {};
        var _ktype485 = 0;
        var _vtype486 = 0;
        _rtmp3488 = input.readMapBegin();
        _ktype485 = _rtmp3488.ktype;
        _vtype486 = _rtmp3488.vtype;
        _size484 = _rtmp3488.size;
        for (var _i489 = 0; _i489 < _size484; ++_i489)
        {
          if (_i489 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key490 = null;
          var val491 = null;
          key490 = input.readString().value;
          val491 = input.readString().value;
          this.success[key490] = val491;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_versionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_versionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter492 in this.success)
    {
      if (this.success.hasOwnProperty(kiter492))
      {
        var viter493 = this.success[kiter492];
        output.writeString(kiter492);
        output.writeString(viter493);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IFaceLogClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
IFaceLogClient.prototype = {};
IFaceLogClient.prototype.addFeature = function(feature, personId, faecBeans, token, callback) {
  if (callback === undefined) {
    this.send_addFeature(feature, personId, faecBeans, token);
    return this.recv_addFeature();
  } else {
    var postData = this.send_addFeature(feature, personId, faecBeans, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addFeature);
  }
};

IFaceLogClient.prototype.send_addFeature = function(feature, personId, faecBeans, token, callback) {
  this.output.writeMessageBegin('addFeature', Thrift.MessageType.CALL, this.seqid);
  var params = {
    feature: feature,
    personId: personId,
    faecBeans: faecBeans,
    token: token
  };
  var args = new IFaceLog_addFeature_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_addFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_addFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addFeature failed: unknown result';
};
IFaceLogClient.prototype.addFeatureMulti = function(feature, personId, faceInfo, deviceId, token, callback) {
  if (callback === undefined) {
    this.send_addFeatureMulti(feature, personId, faceInfo, deviceId, token);
    return this.recv_addFeatureMulti();
  } else {
    var postData = this.send_addFeatureMulti(feature, personId, faceInfo, deviceId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addFeatureMulti);
  }
};

IFaceLogClient.prototype.send_addFeatureMulti = function(feature, personId, faceInfo, deviceId, token, callback) {
  this.output.writeMessageBegin('addFeatureMulti', Thrift.MessageType.CALL, this.seqid);
  var params = {
    feature: feature,
    personId: personId,
    faceInfo: faceInfo,
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_addFeatureMulti_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_addFeatureMulti = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_addFeatureMulti_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addFeatureMulti failed: unknown result';
};
IFaceLogClient.prototype.addImage = function(imageData, deviceId, faceBean, personId, token, callback) {
  if (callback === undefined) {
    this.send_addImage(imageData, deviceId, faceBean, personId, token);
    return this.recv_addImage();
  } else {
    var postData = this.send_addImage(imageData, deviceId, faceBean, personId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addImage);
  }
};

IFaceLogClient.prototype.send_addImage = function(imageData, deviceId, faceBean, personId, token, callback) {
  this.output.writeMessageBegin('addImage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    imageData: imageData,
    deviceId: deviceId,
    faceBean: faceBean,
    personId: personId,
    token: token
  };
  var args = new IFaceLog_addImage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_addImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_addImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addImage failed: unknown result';
};
IFaceLogClient.prototype.addLog = function(bean, token, callback) {
  if (callback === undefined) {
    this.send_addLog(bean, token);
    this.recv_addLog();
  } else {
    var postData = this.send_addLog(bean, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addLog);
  }
};

IFaceLogClient.prototype.send_addLog = function(bean, token, callback) {
  this.output.writeMessageBegin('addLog', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bean: bean,
    token: token
  };
  var args = new IFaceLog_addLog_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_addLog = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_addLog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  return;
};
IFaceLogClient.prototype.addLogs = function(beans, token, callback) {
  if (callback === undefined) {
    this.send_addLogs(beans, token);
    this.recv_addLogs();
  } else {
    var postData = this.send_addLogs(beans, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addLogs);
  }
};

IFaceLogClient.prototype.send_addLogs = function(beans, token, callback) {
  this.output.writeMessageBegin('addLogs', Thrift.MessageType.CALL, this.seqid);
  var params = {
    beans: beans,
    token: token
  };
  var args = new IFaceLog_addLogs_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_addLogs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_addLogs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  return;
};
IFaceLogClient.prototype.addPermit = function(deviceGroup, personGroup, token, callback) {
  if (callback === undefined) {
    this.send_addPermit(deviceGroup, personGroup, token);
    this.recv_addPermit();
  } else {
    var postData = this.send_addPermit(deviceGroup, personGroup, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addPermit);
  }
};

IFaceLogClient.prototype.send_addPermit = function(deviceGroup, personGroup, token, callback) {
  this.output.writeMessageBegin('addPermit', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroup: deviceGroup,
    personGroup: personGroup,
    token: token
  };
  var args = new IFaceLog_addPermit_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_addPermit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_addPermit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.addPermitById = function(deviceGroupId, personGroupId, token, callback) {
  if (callback === undefined) {
    this.send_addPermitById(deviceGroupId, personGroupId, token);
    this.recv_addPermitById();
  } else {
    var postData = this.send_addPermitById(deviceGroupId, personGroupId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addPermitById);
  }
};

IFaceLogClient.prototype.send_addPermitById = function(deviceGroupId, personGroupId, token, callback) {
  this.output.writeMessageBegin('addPermitById', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroupId: deviceGroupId,
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_addPermitById_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_addPermitById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_addPermitById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.applyAckChannel = function(token, callback) {
  if (callback === undefined) {
    this.send_applyAckChannel(token);
    return this.recv_applyAckChannel();
  } else {
    var postData = this.send_applyAckChannel(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_applyAckChannel);
  }
};

IFaceLogClient.prototype.send_applyAckChannel = function(token, callback) {
  this.output.writeMessageBegin('applyAckChannel', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_applyAckChannel_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_applyAckChannel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_applyAckChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'applyAckChannel failed: unknown result';
};
IFaceLogClient.prototype.applyAckChannelWithDuration = function(token, duration, callback) {
  if (callback === undefined) {
    this.send_applyAckChannelWithDuration(token, duration);
    return this.recv_applyAckChannelWithDuration();
  } else {
    var postData = this.send_applyAckChannelWithDuration(token, duration, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_applyAckChannelWithDuration);
  }
};

IFaceLogClient.prototype.send_applyAckChannelWithDuration = function(token, duration, callback) {
  this.output.writeMessageBegin('applyAckChannelWithDuration', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    duration: duration
  };
  var args = new IFaceLog_applyAckChannelWithDuration_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_applyAckChannelWithDuration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_applyAckChannelWithDuration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'applyAckChannelWithDuration failed: unknown result';
};
IFaceLogClient.prototype.applyCmdSn = function(token, callback) {
  if (callback === undefined) {
    this.send_applyCmdSn(token);
    return this.recv_applyCmdSn();
  } else {
    var postData = this.send_applyCmdSn(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_applyCmdSn);
  }
};

IFaceLogClient.prototype.send_applyCmdSn = function(token, callback) {
  this.output.writeMessageBegin('applyCmdSn', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_applyCmdSn_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_applyCmdSn = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_applyCmdSn_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'applyCmdSn failed: unknown result';
};
IFaceLogClient.prototype.applyPersonToken = function(personId, password, isMd5, callback) {
  if (callback === undefined) {
    this.send_applyPersonToken(personId, password, isMd5);
    return this.recv_applyPersonToken();
  } else {
    var postData = this.send_applyPersonToken(personId, password, isMd5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_applyPersonToken);
  }
};

IFaceLogClient.prototype.send_applyPersonToken = function(personId, password, isMd5, callback) {
  this.output.writeMessageBegin('applyPersonToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyPersonToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_applyPersonToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_applyPersonToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'applyPersonToken failed: unknown result';
};
IFaceLogClient.prototype.applyRootToken = function(password, isMd5, callback) {
  if (callback === undefined) {
    this.send_applyRootToken(password, isMd5);
    return this.recv_applyRootToken();
  } else {
    var postData = this.send_applyRootToken(password, isMd5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_applyRootToken);
  }
};

IFaceLogClient.prototype.send_applyRootToken = function(password, isMd5, callback) {
  this.output.writeMessageBegin('applyRootToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyRootToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_applyRootToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_applyRootToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'applyRootToken failed: unknown result';
};
IFaceLogClient.prototype.bindBorder = function(personGroupId, deviceGroupId, token, callback) {
  if (callback === undefined) {
    this.send_bindBorder(personGroupId, deviceGroupId, token);
    this.recv_bindBorder();
  } else {
    var postData = this.send_bindBorder(personGroupId, deviceGroupId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_bindBorder);
  }
};

IFaceLogClient.prototype.send_bindBorder = function(personGroupId, deviceGroupId, token, callback) {
  this.output.writeMessageBegin('bindBorder', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupId: personGroupId,
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_bindBorder_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_bindBorder = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_bindBorder_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.countDeviceByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_countDeviceByWhere(where);
    return this.recv_countDeviceByWhere();
  } else {
    var postData = this.send_countDeviceByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_countDeviceByWhere);
  }
};

IFaceLogClient.prototype.send_countDeviceByWhere = function(where, callback) {
  this.output.writeMessageBegin('countDeviceByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_countDeviceByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_countDeviceByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_countDeviceByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'countDeviceByWhere failed: unknown result';
};
IFaceLogClient.prototype.countDeviceGroupByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_countDeviceGroupByWhere(where);
    return this.recv_countDeviceGroupByWhere();
  } else {
    var postData = this.send_countDeviceGroupByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_countDeviceGroupByWhere);
  }
};

IFaceLogClient.prototype.send_countDeviceGroupByWhere = function(where, callback) {
  this.output.writeMessageBegin('countDeviceGroupByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_countDeviceGroupByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_countDeviceGroupByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_countDeviceGroupByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'countDeviceGroupByWhere failed: unknown result';
};
IFaceLogClient.prototype.countLogByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_countLogByWhere(where);
    return this.recv_countLogByWhere();
  } else {
    var postData = this.send_countLogByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_countLogByWhere);
  }
};

IFaceLogClient.prototype.send_countLogByWhere = function(where, callback) {
  this.output.writeMessageBegin('countLogByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_countLogByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_countLogByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_countLogByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'countLogByWhere failed: unknown result';
};
IFaceLogClient.prototype.countLogLightByVerifyTime = function(timestamp, callback) {
  if (callback === undefined) {
    this.send_countLogLightByVerifyTime(timestamp);
    return this.recv_countLogLightByVerifyTime();
  } else {
    var postData = this.send_countLogLightByVerifyTime(timestamp, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_countLogLightByVerifyTime);
  }
};

IFaceLogClient.prototype.send_countLogLightByVerifyTime = function(timestamp, callback) {
  this.output.writeMessageBegin('countLogLightByVerifyTime', Thrift.MessageType.CALL, this.seqid);
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_countLogLightByVerifyTime_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_countLogLightByVerifyTime = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_countLogLightByVerifyTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'countLogLightByVerifyTime failed: unknown result';
};
IFaceLogClient.prototype.countLogLightByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_countLogLightByWhere(where);
    return this.recv_countLogLightByWhere();
  } else {
    var postData = this.send_countLogLightByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_countLogLightByWhere);
  }
};

IFaceLogClient.prototype.send_countLogLightByWhere = function(where, callback) {
  this.output.writeMessageBegin('countLogLightByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_countLogLightByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_countLogLightByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_countLogLightByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'countLogLightByWhere failed: unknown result';
};
IFaceLogClient.prototype.countPersonByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_countPersonByWhere(where);
    return this.recv_countPersonByWhere();
  } else {
    var postData = this.send_countPersonByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_countPersonByWhere);
  }
};

IFaceLogClient.prototype.send_countPersonByWhere = function(where, callback) {
  this.output.writeMessageBegin('countPersonByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_countPersonByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_countPersonByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_countPersonByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'countPersonByWhere failed: unknown result';
};
IFaceLogClient.prototype.countPersonGroupByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_countPersonGroupByWhere(where);
    return this.recv_countPersonGroupByWhere();
  } else {
    var postData = this.send_countPersonGroupByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_countPersonGroupByWhere);
  }
};

IFaceLogClient.prototype.send_countPersonGroupByWhere = function(where, callback) {
  this.output.writeMessageBegin('countPersonGroupByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_countPersonGroupByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_countPersonGroupByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_countPersonGroupByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'countPersonGroupByWhere failed: unknown result';
};
IFaceLogClient.prototype.deleteAllFeaturesByPersonId = function(personId, deleteImage, token, callback) {
  if (callback === undefined) {
    this.send_deleteAllFeaturesByPersonId(personId, deleteImage, token);
    return this.recv_deleteAllFeaturesByPersonId();
  } else {
    var postData = this.send_deleteAllFeaturesByPersonId(personId, deleteImage, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteAllFeaturesByPersonId);
  }
};

IFaceLogClient.prototype.send_deleteAllFeaturesByPersonId = function(personId, deleteImage, token, callback) {
  this.output.writeMessageBegin('deleteAllFeaturesByPersonId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId,
    deleteImage: deleteImage,
    token: token
  };
  var args = new IFaceLog_deleteAllFeaturesByPersonId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deleteAllFeaturesByPersonId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deleteAllFeaturesByPersonId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteAllFeaturesByPersonId failed: unknown result';
};
IFaceLogClient.prototype.deleteDeviceGroup = function(deviceGroupId, token, callback) {
  if (callback === undefined) {
    this.send_deleteDeviceGroup(deviceGroupId, token);
    return this.recv_deleteDeviceGroup();
  } else {
    var postData = this.send_deleteDeviceGroup(deviceGroupId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDeviceGroup);
  }
};

IFaceLogClient.prototype.send_deleteDeviceGroup = function(deviceGroupId, token, callback) {
  this.output.writeMessageBegin('deleteDeviceGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_deleteDeviceGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deleteDeviceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deleteDeviceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDeviceGroup failed: unknown result';
};
IFaceLogClient.prototype.deleteFeature = function(featureMd5, deleteImage, token, callback) {
  if (callback === undefined) {
    this.send_deleteFeature(featureMd5, deleteImage, token);
    return this.recv_deleteFeature();
  } else {
    var postData = this.send_deleteFeature(featureMd5, deleteImage, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteFeature);
  }
};

IFaceLogClient.prototype.send_deleteFeature = function(featureMd5, deleteImage, token, callback) {
  this.output.writeMessageBegin('deleteFeature', Thrift.MessageType.CALL, this.seqid);
  var params = {
    featureMd5: featureMd5,
    deleteImage: deleteImage,
    token: token
  };
  var args = new IFaceLog_deleteFeature_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deleteFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deleteFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteFeature failed: unknown result';
};
IFaceLogClient.prototype.deleteImage = function(imageMd5, token, callback) {
  if (callback === undefined) {
    this.send_deleteImage(imageMd5, token);
    return this.recv_deleteImage();
  } else {
    var postData = this.send_deleteImage(imageMd5, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteImage);
  }
};

IFaceLogClient.prototype.send_deleteImage = function(imageMd5, token, callback) {
  this.output.writeMessageBegin('deleteImage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    imageMd5: imageMd5,
    token: token
  };
  var args = new IFaceLog_deleteImage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deleteImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deleteImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteImage failed: unknown result';
};
IFaceLogClient.prototype.deletePermit = function(deviceGroup, personGroup, token, callback) {
  if (callback === undefined) {
    this.send_deletePermit(deviceGroup, personGroup, token);
    return this.recv_deletePermit();
  } else {
    var postData = this.send_deletePermit(deviceGroup, personGroup, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deletePermit);
  }
};

IFaceLogClient.prototype.send_deletePermit = function(deviceGroup, personGroup, token, callback) {
  this.output.writeMessageBegin('deletePermit', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroup: deviceGroup,
    personGroup: personGroup,
    token: token
  };
  var args = new IFaceLog_deletePermit_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deletePermit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deletePermit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deletePermit failed: unknown result';
};
IFaceLogClient.prototype.deletePerson = function(personId, token, callback) {
  if (callback === undefined) {
    this.send_deletePerson(personId, token);
    return this.recv_deletePerson();
  } else {
    var postData = this.send_deletePerson(personId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deletePerson);
  }
};

IFaceLogClient.prototype.send_deletePerson = function(personId, token, callback) {
  this.output.writeMessageBegin('deletePerson', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId,
    token: token
  };
  var args = new IFaceLog_deletePerson_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deletePerson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deletePerson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deletePerson failed: unknown result';
};
IFaceLogClient.prototype.deletePersonByPapersNum = function(papersNum, token, callback) {
  if (callback === undefined) {
    this.send_deletePersonByPapersNum(papersNum, token);
    return this.recv_deletePersonByPapersNum();
  } else {
    var postData = this.send_deletePersonByPapersNum(papersNum, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deletePersonByPapersNum);
  }
};

IFaceLogClient.prototype.send_deletePersonByPapersNum = function(papersNum, token, callback) {
  this.output.writeMessageBegin('deletePersonByPapersNum', Thrift.MessageType.CALL, this.seqid);
  var params = {
    papersNum: papersNum,
    token: token
  };
  var args = new IFaceLog_deletePersonByPapersNum_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deletePersonByPapersNum = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deletePersonByPapersNum_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deletePersonByPapersNum failed: unknown result';
};
IFaceLogClient.prototype.deletePersonGroup = function(personGroupId, token, callback) {
  if (callback === undefined) {
    this.send_deletePersonGroup(personGroupId, token);
    return this.recv_deletePersonGroup();
  } else {
    var postData = this.send_deletePersonGroup(personGroupId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deletePersonGroup);
  }
};

IFaceLogClient.prototype.send_deletePersonGroup = function(personGroupId, token, callback) {
  this.output.writeMessageBegin('deletePersonGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_deletePersonGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deletePersonGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deletePersonGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deletePersonGroup failed: unknown result';
};
IFaceLogClient.prototype.deletePersons = function(personIdList, token, callback) {
  if (callback === undefined) {
    this.send_deletePersons(personIdList, token);
    return this.recv_deletePersons();
  } else {
    var postData = this.send_deletePersons(personIdList, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deletePersons);
  }
};

IFaceLogClient.prototype.send_deletePersons = function(personIdList, token, callback) {
  this.output.writeMessageBegin('deletePersons', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personIdList: personIdList,
    token: token
  };
  var args = new IFaceLog_deletePersons_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deletePersons = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deletePersons_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deletePersons failed: unknown result';
};
IFaceLogClient.prototype.deletePersonsByPapersNum = function(papersNumlist, token, callback) {
  if (callback === undefined) {
    this.send_deletePersonsByPapersNum(papersNumlist, token);
    return this.recv_deletePersonsByPapersNum();
  } else {
    var postData = this.send_deletePersonsByPapersNum(papersNumlist, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deletePersonsByPapersNum);
  }
};

IFaceLogClient.prototype.send_deletePersonsByPapersNum = function(papersNumlist, token, callback) {
  this.output.writeMessageBegin('deletePersonsByPapersNum', Thrift.MessageType.CALL, this.seqid);
  var params = {
    papersNumlist: papersNumlist,
    token: token
  };
  var args = new IFaceLog_deletePersonsByPapersNum_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_deletePersonsByPapersNum = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_deletePersonsByPapersNum_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deletePersonsByPapersNum failed: unknown result';
};
IFaceLogClient.prototype.disablePerson = function(personId, token, callback) {
  if (callback === undefined) {
    this.send_disablePerson(personId, token);
    this.recv_disablePerson();
  } else {
    var postData = this.send_disablePerson(personId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_disablePerson);
  }
};

IFaceLogClient.prototype.send_disablePerson = function(personId, token, callback) {
  this.output.writeMessageBegin('disablePerson', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId,
    token: token
  };
  var args = new IFaceLog_disablePerson_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_disablePerson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_disablePerson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.disablePersonList = function(personIdList, token, callback) {
  if (callback === undefined) {
    this.send_disablePersonList(personIdList, token);
    this.recv_disablePersonList();
  } else {
    var postData = this.send_disablePersonList(personIdList, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_disablePersonList);
  }
};

IFaceLogClient.prototype.send_disablePersonList = function(personIdList, token, callback) {
  this.output.writeMessageBegin('disablePersonList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personIdList: personIdList,
    token: token
  };
  var args = new IFaceLog_disablePersonList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_disablePersonList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_disablePersonList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.existsDevice = function(id, callback) {
  if (callback === undefined) {
    this.send_existsDevice(id);
    return this.recv_existsDevice();
  } else {
    var postData = this.send_existsDevice(id, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_existsDevice);
  }
};

IFaceLogClient.prototype.send_existsDevice = function(id, callback) {
  this.output.writeMessageBegin('existsDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    id: id
  };
  var args = new IFaceLog_existsDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_existsDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_existsDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'existsDevice failed: unknown result';
};
IFaceLogClient.prototype.existsFeature = function(md5, callback) {
  if (callback === undefined) {
    this.send_existsFeature(md5);
    return this.recv_existsFeature();
  } else {
    var postData = this.send_existsFeature(md5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_existsFeature);
  }
};

IFaceLogClient.prototype.send_existsFeature = function(md5, callback) {
  this.output.writeMessageBegin('existsFeature', Thrift.MessageType.CALL, this.seqid);
  var params = {
    md5: md5
  };
  var args = new IFaceLog_existsFeature_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_existsFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_existsFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'existsFeature failed: unknown result';
};
IFaceLogClient.prototype.existsImage = function(md5, callback) {
  if (callback === undefined) {
    this.send_existsImage(md5);
    return this.recv_existsImage();
  } else {
    var postData = this.send_existsImage(md5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_existsImage);
  }
};

IFaceLogClient.prototype.send_existsImage = function(md5, callback) {
  this.output.writeMessageBegin('existsImage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    md5: md5
  };
  var args = new IFaceLog_existsImage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_existsImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_existsImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'existsImage failed: unknown result';
};
IFaceLogClient.prototype.existsPerson = function(persionId, callback) {
  if (callback === undefined) {
    this.send_existsPerson(persionId);
    return this.recv_existsPerson();
  } else {
    var postData = this.send_existsPerson(persionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_existsPerson);
  }
};

IFaceLogClient.prototype.send_existsPerson = function(persionId, callback) {
  this.output.writeMessageBegin('existsPerson', Thrift.MessageType.CALL, this.seqid);
  var params = {
    persionId: persionId
  };
  var args = new IFaceLog_existsPerson_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_existsPerson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_existsPerson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'existsPerson failed: unknown result';
};
IFaceLogClient.prototype.getDevice = function(deviceId, callback) {
  if (callback === undefined) {
    this.send_getDevice(deviceId);
    return this.recv_getDevice();
  } else {
    var postData = this.send_getDevice(deviceId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDevice);
  }
};

IFaceLogClient.prototype.send_getDevice = function(deviceId, callback) {
  this.output.writeMessageBegin('getDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_getDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDevice failed: unknown result';
};
IFaceLogClient.prototype.getDeviceGroup = function(deviceGroupId, callback) {
  if (callback === undefined) {
    this.send_getDeviceGroup(deviceGroupId);
    return this.recv_getDeviceGroup();
  } else {
    var postData = this.send_getDeviceGroup(deviceGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDeviceGroup);
  }
};

IFaceLogClient.prototype.send_getDeviceGroup = function(deviceGroupId, callback) {
  this.output.writeMessageBegin('getDeviceGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getDeviceGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getDeviceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getDeviceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceGroup failed: unknown result';
};
IFaceLogClient.prototype.getDeviceGroups = function(groupIdList, callback) {
  if (callback === undefined) {
    this.send_getDeviceGroups(groupIdList);
    return this.recv_getDeviceGroups();
  } else {
    var postData = this.send_getDeviceGroups(groupIdList, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDeviceGroups);
  }
};

IFaceLogClient.prototype.send_getDeviceGroups = function(groupIdList, callback) {
  this.output.writeMessageBegin('getDeviceGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    groupIdList: groupIdList
  };
  var args = new IFaceLog_getDeviceGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getDeviceGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getDeviceGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceGroups failed: unknown result';
};
IFaceLogClient.prototype.getDeviceGroupsBelongs = function(deviceId, callback) {
  if (callback === undefined) {
    this.send_getDeviceGroupsBelongs(deviceId);
    return this.recv_getDeviceGroupsBelongs();
  } else {
    var postData = this.send_getDeviceGroupsBelongs(deviceId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDeviceGroupsBelongs);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsBelongs = function(deviceId, callback) {
  this.output.writeMessageBegin('getDeviceGroupsBelongs', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_getDeviceGroupsBelongs_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getDeviceGroupsBelongs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getDeviceGroupsBelongs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceGroupsBelongs failed: unknown result';
};
IFaceLogClient.prototype.getDeviceGroupsPermit = function(personGroupId, callback) {
  if (callback === undefined) {
    this.send_getDeviceGroupsPermit(personGroupId);
    return this.recv_getDeviceGroupsPermit();
  } else {
    var postData = this.send_getDeviceGroupsPermit(personGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDeviceGroupsPermit);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsPermit = function(personGroupId, callback) {
  this.output.writeMessageBegin('getDeviceGroupsPermit', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getDeviceGroupsPermit_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getDeviceGroupsPermit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getDeviceGroupsPermit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceGroupsPermit failed: unknown result';
};
IFaceLogClient.prototype.getDeviceIdOfFeature = function(featureMd5, callback) {
  if (callback === undefined) {
    this.send_getDeviceIdOfFeature(featureMd5);
    return this.recv_getDeviceIdOfFeature();
  } else {
    var postData = this.send_getDeviceIdOfFeature(featureMd5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDeviceIdOfFeature);
  }
};

IFaceLogClient.prototype.send_getDeviceIdOfFeature = function(featureMd5, callback) {
  this.output.writeMessageBegin('getDeviceIdOfFeature', Thrift.MessageType.CALL, this.seqid);
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getDeviceIdOfFeature_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getDeviceIdOfFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getDeviceIdOfFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceIdOfFeature failed: unknown result';
};
IFaceLogClient.prototype.getDevices = function(idList, callback) {
  if (callback === undefined) {
    this.send_getDevices(idList);
    return this.recv_getDevices();
  } else {
    var postData = this.send_getDevices(idList, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDevices);
  }
};

IFaceLogClient.prototype.send_getDevices = function(idList, callback) {
  this.output.writeMessageBegin('getDevices', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idList: idList
  };
  var args = new IFaceLog_getDevices_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getDevices = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getDevices_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDevices failed: unknown result';
};
IFaceLogClient.prototype.getDevicesOfGroup = function(deviceGroupId, callback) {
  if (callback === undefined) {
    this.send_getDevicesOfGroup(deviceGroupId);
    return this.recv_getDevicesOfGroup();
  } else {
    var postData = this.send_getDevicesOfGroup(deviceGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDevicesOfGroup);
  }
};

IFaceLogClient.prototype.send_getDevicesOfGroup = function(deviceGroupId, callback) {
  this.output.writeMessageBegin('getDevicesOfGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getDevicesOfGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getDevicesOfGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getDevicesOfGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDevicesOfGroup failed: unknown result';
};
IFaceLogClient.prototype.getFeature = function(md5, callback) {
  if (callback === undefined) {
    this.send_getFeature(md5);
    return this.recv_getFeature();
  } else {
    var postData = this.send_getFeature(md5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFeature);
  }
};

IFaceLogClient.prototype.send_getFeature = function(md5, callback) {
  this.output.writeMessageBegin('getFeature', Thrift.MessageType.CALL, this.seqid);
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeature_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFeature failed: unknown result';
};
IFaceLogClient.prototype.getFeatureBeansByPersonId = function(personId, callback) {
  if (callback === undefined) {
    this.send_getFeatureBeansByPersonId(personId);
    return this.recv_getFeatureBeansByPersonId();
  } else {
    var postData = this.send_getFeatureBeansByPersonId(personId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFeatureBeansByPersonId);
  }
};

IFaceLogClient.prototype.send_getFeatureBeansByPersonId = function(personId, callback) {
  this.output.writeMessageBegin('getFeatureBeansByPersonId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getFeatureBeansByPersonId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getFeatureBeansByPersonId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getFeatureBeansByPersonId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFeatureBeansByPersonId failed: unknown result';
};
IFaceLogClient.prototype.getFeatureBytes = function(md5, callback) {
  if (callback === undefined) {
    this.send_getFeatureBytes(md5);
    return this.recv_getFeatureBytes();
  } else {
    var postData = this.send_getFeatureBytes(md5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFeatureBytes);
  }
};

IFaceLogClient.prototype.send_getFeatureBytes = function(md5, callback) {
  this.output.writeMessageBegin('getFeatureBytes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeatureBytes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getFeatureBytes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getFeatureBytes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFeatureBytes failed: unknown result';
};
IFaceLogClient.prototype.getFeatures = function(md5, callback) {
  if (callback === undefined) {
    this.send_getFeatures(md5);
    return this.recv_getFeatures();
  } else {
    var postData = this.send_getFeatures(md5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFeatures);
  }
};

IFaceLogClient.prototype.send_getFeatures = function(md5, callback) {
  this.output.writeMessageBegin('getFeatures', Thrift.MessageType.CALL, this.seqid);
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeatures_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getFeatures = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getFeatures_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFeatures failed: unknown result';
};
IFaceLogClient.prototype.getFeaturesOfPerson = function(personId, callback) {
  if (callback === undefined) {
    this.send_getFeaturesOfPerson(personId);
    return this.recv_getFeaturesOfPerson();
  } else {
    var postData = this.send_getFeaturesOfPerson(personId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFeaturesOfPerson);
  }
};

IFaceLogClient.prototype.send_getFeaturesOfPerson = function(personId, callback) {
  this.output.writeMessageBegin('getFeaturesOfPerson', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getFeaturesOfPerson_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getFeaturesOfPerson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getFeaturesOfPerson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFeaturesOfPerson failed: unknown result';
};
IFaceLogClient.prototype.getGroupPermit = function(deviceId, personGroupId, callback) {
  if (callback === undefined) {
    this.send_getGroupPermit(deviceId, personGroupId);
    return this.recv_getGroupPermit();
  } else {
    var postData = this.send_getGroupPermit(deviceId, personGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getGroupPermit);
  }
};

IFaceLogClient.prototype.send_getGroupPermit = function(deviceId, personGroupId, callback) {
  this.output.writeMessageBegin('getGroupPermit', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceId: deviceId,
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getGroupPermit_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getGroupPermit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getGroupPermit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupPermit failed: unknown result';
};
IFaceLogClient.prototype.getGroupPermits = function(deviceId, personGroupIdList, callback) {
  if (callback === undefined) {
    this.send_getGroupPermits(deviceId, personGroupIdList);
    return this.recv_getGroupPermits();
  } else {
    var postData = this.send_getGroupPermits(deviceId, personGroupIdList, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getGroupPermits);
  }
};

IFaceLogClient.prototype.send_getGroupPermits = function(deviceId, personGroupIdList, callback) {
  this.output.writeMessageBegin('getGroupPermits', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceId: deviceId,
    personGroupIdList: personGroupIdList
  };
  var args = new IFaceLog_getGroupPermits_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getGroupPermits = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getGroupPermits_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getGroupPermits failed: unknown result';
};
IFaceLogClient.prototype.getImage = function(imageMD5, callback) {
  if (callback === undefined) {
    this.send_getImage(imageMD5);
    return this.recv_getImage();
  } else {
    var postData = this.send_getImage(imageMD5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getImage);
  }
};

IFaceLogClient.prototype.send_getImage = function(imageMD5, callback) {
  this.output.writeMessageBegin('getImage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    imageMD5: imageMD5
  };
  var args = new IFaceLog_getImage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getImage failed: unknown result';
};
IFaceLogClient.prototype.getImageBytes = function(imageMD5, callback) {
  if (callback === undefined) {
    this.send_getImageBytes(imageMD5);
    return this.recv_getImageBytes();
  } else {
    var postData = this.send_getImageBytes(imageMD5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getImageBytes);
  }
};

IFaceLogClient.prototype.send_getImageBytes = function(imageMD5, callback) {
  this.output.writeMessageBegin('getImageBytes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    imageMD5: imageMD5
  };
  var args = new IFaceLog_getImageBytes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getImageBytes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getImageBytes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getImageBytes failed: unknown result';
};
IFaceLogClient.prototype.getImagesAssociatedByFeature = function(featureMd5, callback) {
  if (callback === undefined) {
    this.send_getImagesAssociatedByFeature(featureMd5);
    return this.recv_getImagesAssociatedByFeature();
  } else {
    var postData = this.send_getImagesAssociatedByFeature(featureMd5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getImagesAssociatedByFeature);
  }
};

IFaceLogClient.prototype.send_getImagesAssociatedByFeature = function(featureMd5, callback) {
  this.output.writeMessageBegin('getImagesAssociatedByFeature', Thrift.MessageType.CALL, this.seqid);
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getImagesAssociatedByFeature_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getImagesAssociatedByFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getImagesAssociatedByFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getImagesAssociatedByFeature failed: unknown result';
};
IFaceLogClient.prototype.getLogBeansByPersonId = function(personId, callback) {
  if (callback === undefined) {
    this.send_getLogBeansByPersonId(personId);
    return this.recv_getLogBeansByPersonId();
  } else {
    var postData = this.send_getLogBeansByPersonId(personId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getLogBeansByPersonId);
  }
};

IFaceLogClient.prototype.send_getLogBeansByPersonId = function(personId, callback) {
  this.output.writeMessageBegin('getLogBeansByPersonId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getLogBeansByPersonId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getLogBeansByPersonId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getLogBeansByPersonId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLogBeansByPersonId failed: unknown result';
};
IFaceLogClient.prototype.getPerson = function(personId, callback) {
  if (callback === undefined) {
    this.send_getPerson(personId);
    return this.recv_getPerson();
  } else {
    var postData = this.send_getPerson(personId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPerson);
  }
};

IFaceLogClient.prototype.send_getPerson = function(personId, callback) {
  this.output.writeMessageBegin('getPerson', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getPerson_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPerson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPerson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPerson failed: unknown result';
};
IFaceLogClient.prototype.getPersonByPapersNum = function(papersNum, callback) {
  if (callback === undefined) {
    this.send_getPersonByPapersNum(papersNum);
    return this.recv_getPersonByPapersNum();
  } else {
    var postData = this.send_getPersonByPapersNum(papersNum, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersonByPapersNum);
  }
};

IFaceLogClient.prototype.send_getPersonByPapersNum = function(papersNum, callback) {
  this.output.writeMessageBegin('getPersonByPapersNum', Thrift.MessageType.CALL, this.seqid);
  var params = {
    papersNum: papersNum
  };
  var args = new IFaceLog_getPersonByPapersNum_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersonByPapersNum = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersonByPapersNum_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonByPapersNum failed: unknown result';
};
IFaceLogClient.prototype.getPersonGroup = function(personGroupId, callback) {
  if (callback === undefined) {
    this.send_getPersonGroup(personGroupId);
    return this.recv_getPersonGroup();
  } else {
    var postData = this.send_getPersonGroup(personGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersonGroup);
  }
};

IFaceLogClient.prototype.send_getPersonGroup = function(personGroupId, callback) {
  this.output.writeMessageBegin('getPersonGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getPersonGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersonGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersonGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonGroup failed: unknown result';
};
IFaceLogClient.prototype.getPersonGroups = function(groupIdList, callback) {
  if (callback === undefined) {
    this.send_getPersonGroups(groupIdList);
    return this.recv_getPersonGroups();
  } else {
    var postData = this.send_getPersonGroups(groupIdList, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersonGroups);
  }
};

IFaceLogClient.prototype.send_getPersonGroups = function(groupIdList, callback) {
  this.output.writeMessageBegin('getPersonGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    groupIdList: groupIdList
  };
  var args = new IFaceLog_getPersonGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersonGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersonGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonGroups failed: unknown result';
};
IFaceLogClient.prototype.getPersonGroupsBelongs = function(personId, callback) {
  if (callback === undefined) {
    this.send_getPersonGroupsBelongs(personId);
    return this.recv_getPersonGroupsBelongs();
  } else {
    var postData = this.send_getPersonGroupsBelongs(personId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersonGroupsBelongs);
  }
};

IFaceLogClient.prototype.send_getPersonGroupsBelongs = function(personId, callback) {
  this.output.writeMessageBegin('getPersonGroupsBelongs', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getPersonGroupsBelongs_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersonGroupsBelongs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersonGroupsBelongs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonGroupsBelongs failed: unknown result';
};
IFaceLogClient.prototype.getPersonGroupsPermittedBy = function(deviceGroupId, callback) {
  if (callback === undefined) {
    this.send_getPersonGroupsPermittedBy(deviceGroupId);
    return this.recv_getPersonGroupsPermittedBy();
  } else {
    var postData = this.send_getPersonGroupsPermittedBy(deviceGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersonGroupsPermittedBy);
  }
};

IFaceLogClient.prototype.send_getPersonGroupsPermittedBy = function(deviceGroupId, callback) {
  this.output.writeMessageBegin('getPersonGroupsPermittedBy', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getPersonGroupsPermittedBy_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersonGroupsPermittedBy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersonGroupsPermittedBy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonGroupsPermittedBy failed: unknown result';
};
IFaceLogClient.prototype.getPersonPermit = function(deviceId, personId, callback) {
  if (callback === undefined) {
    this.send_getPersonPermit(deviceId, personId);
    return this.recv_getPersonPermit();
  } else {
    var postData = this.send_getPersonPermit(deviceId, personId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersonPermit);
  }
};

IFaceLogClient.prototype.send_getPersonPermit = function(deviceId, personId, callback) {
  this.output.writeMessageBegin('getPersonPermit', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceId: deviceId,
    personId: personId
  };
  var args = new IFaceLog_getPersonPermit_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersonPermit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersonPermit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonPermit failed: unknown result';
};
IFaceLogClient.prototype.getPersonPermits = function(deviceId, personIdList, callback) {
  if (callback === undefined) {
    this.send_getPersonPermits(deviceId, personIdList);
    return this.recv_getPersonPermits();
  } else {
    var postData = this.send_getPersonPermits(deviceId, personIdList, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersonPermits);
  }
};

IFaceLogClient.prototype.send_getPersonPermits = function(deviceId, personIdList, callback) {
  this.output.writeMessageBegin('getPersonPermits', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceId: deviceId,
    personIdList: personIdList
  };
  var args = new IFaceLog_getPersonPermits_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersonPermits = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersonPermits_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonPermits failed: unknown result';
};
IFaceLogClient.prototype.getPersons = function(idList, callback) {
  if (callback === undefined) {
    this.send_getPersons(idList);
    return this.recv_getPersons();
  } else {
    var postData = this.send_getPersons(idList, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersons);
  }
};

IFaceLogClient.prototype.send_getPersons = function(idList, callback) {
  this.output.writeMessageBegin('getPersons', Thrift.MessageType.CALL, this.seqid);
  var params = {
    idList: idList
  };
  var args = new IFaceLog_getPersons_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersons = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersons_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersons failed: unknown result';
};
IFaceLogClient.prototype.getPersonsOfGroup = function(personGroupId, callback) {
  if (callback === undefined) {
    this.send_getPersonsOfGroup(personGroupId);
    return this.recv_getPersonsOfGroup();
  } else {
    var postData = this.send_getPersonsOfGroup(personGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPersonsOfGroup);
  }
};

IFaceLogClient.prototype.send_getPersonsOfGroup = function(personGroupId, callback) {
  this.output.writeMessageBegin('getPersonsOfGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getPersonsOfGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getPersonsOfGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getPersonsOfGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPersonsOfGroup failed: unknown result';
};
IFaceLogClient.prototype.getProperty = function(key, token, callback) {
  if (callback === undefined) {
    this.send_getProperty(key, token);
    return this.recv_getProperty();
  } else {
    var postData = this.send_getProperty(key, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getProperty);
  }
};

IFaceLogClient.prototype.send_getProperty = function(key, token, callback) {
  this.output.writeMessageBegin('getProperty', Thrift.MessageType.CALL, this.seqid);
  var params = {
    key: key,
    token: token
  };
  var args = new IFaceLog_getProperty_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getProperty = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getProperty_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProperty failed: unknown result';
};
IFaceLogClient.prototype.getRedisParameters = function(token, callback) {
  if (callback === undefined) {
    this.send_getRedisParameters(token);
    return this.recv_getRedisParameters();
  } else {
    var postData = this.send_getRedisParameters(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRedisParameters);
  }
};

IFaceLogClient.prototype.send_getRedisParameters = function(token, callback) {
  this.output.writeMessageBegin('getRedisParameters', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_getRedisParameters_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getRedisParameters = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getRedisParameters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRedisParameters failed: unknown result';
};
IFaceLogClient.prototype.getServiceConfig = function(token, callback) {
  if (callback === undefined) {
    this.send_getServiceConfig(token);
    return this.recv_getServiceConfig();
  } else {
    var postData = this.send_getServiceConfig(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getServiceConfig);
  }
};

IFaceLogClient.prototype.send_getServiceConfig = function(token, callback) {
  this.output.writeMessageBegin('getServiceConfig', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_getServiceConfig_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getServiceConfig = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getServiceConfig_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getServiceConfig failed: unknown result';
};
IFaceLogClient.prototype.getSubDeviceGroup = function(deviceGroupId, callback) {
  if (callback === undefined) {
    this.send_getSubDeviceGroup(deviceGroupId);
    return this.recv_getSubDeviceGroup();
  } else {
    var postData = this.send_getSubDeviceGroup(deviceGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSubDeviceGroup);
  }
};

IFaceLogClient.prototype.send_getSubDeviceGroup = function(deviceGroupId, callback) {
  this.output.writeMessageBegin('getSubDeviceGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getSubDeviceGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getSubDeviceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getSubDeviceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSubDeviceGroup failed: unknown result';
};
IFaceLogClient.prototype.getSubPersonGroup = function(personGroupId, callback) {
  if (callback === undefined) {
    this.send_getSubPersonGroup(personGroupId);
    return this.recv_getSubPersonGroup();
  } else {
    var postData = this.send_getSubPersonGroup(personGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSubPersonGroup);
  }
};

IFaceLogClient.prototype.send_getSubPersonGroup = function(personGroupId, callback) {
  this.output.writeMessageBegin('getSubPersonGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getSubPersonGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_getSubPersonGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_getSubPersonGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSubPersonGroup failed: unknown result';
};
IFaceLogClient.prototype.isDisable = function(personId, callback) {
  if (callback === undefined) {
    this.send_isDisable(personId);
    return this.recv_isDisable();
  } else {
    var postData = this.send_isDisable(personId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isDisable);
  }
};

IFaceLogClient.prototype.send_isDisable = function(personId, callback) {
  this.output.writeMessageBegin('isDisable', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId
  };
  var args = new IFaceLog_isDisable_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_isDisable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_isDisable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isDisable failed: unknown result';
};
IFaceLogClient.prototype.isLocal = function(callback) {
  if (callback === undefined) {
    this.send_isLocal();
    return this.recv_isLocal();
  } else {
    var postData = this.send_isLocal(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isLocal);
  }
};

IFaceLogClient.prototype.send_isLocal = function(callback) {
  this.output.writeMessageBegin('isLocal', Thrift.MessageType.CALL, this.seqid);
  var args = new IFaceLog_isLocal_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_isLocal = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_isLocal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isLocal failed: unknown result';
};
IFaceLogClient.prototype.isValidAckChannel = function(ackChannel, callback) {
  if (callback === undefined) {
    this.send_isValidAckChannel(ackChannel);
    return this.recv_isValidAckChannel();
  } else {
    var postData = this.send_isValidAckChannel(ackChannel, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isValidAckChannel);
  }
};

IFaceLogClient.prototype.send_isValidAckChannel = function(ackChannel, callback) {
  this.output.writeMessageBegin('isValidAckChannel', Thrift.MessageType.CALL, this.seqid);
  var params = {
    ackChannel: ackChannel
  };
  var args = new IFaceLog_isValidAckChannel_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_isValidAckChannel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_isValidAckChannel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isValidAckChannel failed: unknown result';
};
IFaceLogClient.prototype.isValidCmdSn = function(cmdSn, callback) {
  if (callback === undefined) {
    this.send_isValidCmdSn(cmdSn);
    return this.recv_isValidCmdSn();
  } else {
    var postData = this.send_isValidCmdSn(cmdSn, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isValidCmdSn);
  }
};

IFaceLogClient.prototype.send_isValidCmdSn = function(cmdSn, callback) {
  this.output.writeMessageBegin('isValidCmdSn', Thrift.MessageType.CALL, this.seqid);
  var params = {
    cmdSn: cmdSn
  };
  var args = new IFaceLog_isValidCmdSn_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_isValidCmdSn = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_isValidCmdSn_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isValidCmdSn failed: unknown result';
};
IFaceLogClient.prototype.isValidDeviceToken = function(token, callback) {
  if (callback === undefined) {
    this.send_isValidDeviceToken(token);
    return this.recv_isValidDeviceToken();
  } else {
    var postData = this.send_isValidDeviceToken(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isValidDeviceToken);
  }
};

IFaceLogClient.prototype.send_isValidDeviceToken = function(token, callback) {
  this.output.writeMessageBegin('isValidDeviceToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidDeviceToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_isValidDeviceToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_isValidDeviceToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isValidDeviceToken failed: unknown result';
};
IFaceLogClient.prototype.isValidPassword = function(userId, password, isMd5, callback) {
  if (callback === undefined) {
    this.send_isValidPassword(userId, password, isMd5);
    return this.recv_isValidPassword();
  } else {
    var postData = this.send_isValidPassword(userId, password, isMd5, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isValidPassword);
  }
};

IFaceLogClient.prototype.send_isValidPassword = function(userId, password, isMd5, callback) {
  this.output.writeMessageBegin('isValidPassword', Thrift.MessageType.CALL, this.seqid);
  var params = {
    userId: userId,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_isValidPassword_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_isValidPassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_isValidPassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isValidPassword failed: unknown result';
};
IFaceLogClient.prototype.isValidPersonToken = function(token, callback) {
  if (callback === undefined) {
    this.send_isValidPersonToken(token);
    return this.recv_isValidPersonToken();
  } else {
    var postData = this.send_isValidPersonToken(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isValidPersonToken);
  }
};

IFaceLogClient.prototype.send_isValidPersonToken = function(token, callback) {
  this.output.writeMessageBegin('isValidPersonToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidPersonToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_isValidPersonToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_isValidPersonToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isValidPersonToken failed: unknown result';
};
IFaceLogClient.prototype.isValidRootToken = function(token, callback) {
  if (callback === undefined) {
    this.send_isValidRootToken(token);
    return this.recv_isValidRootToken();
  } else {
    var postData = this.send_isValidRootToken(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isValidRootToken);
  }
};

IFaceLogClient.prototype.send_isValidRootToken = function(token, callback) {
  this.output.writeMessageBegin('isValidRootToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidRootToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_isValidRootToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_isValidRootToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isValidRootToken failed: unknown result';
};
IFaceLogClient.prototype.listOfParentForDeviceGroup = function(deviceGroupId, callback) {
  if (callback === undefined) {
    this.send_listOfParentForDeviceGroup(deviceGroupId);
    return this.recv_listOfParentForDeviceGroup();
  } else {
    var postData = this.send_listOfParentForDeviceGroup(deviceGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listOfParentForDeviceGroup);
  }
};

IFaceLogClient.prototype.send_listOfParentForDeviceGroup = function(deviceGroupId, callback) {
  this.output.writeMessageBegin('listOfParentForDeviceGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_listOfParentForDeviceGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_listOfParentForDeviceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_listOfParentForDeviceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listOfParentForDeviceGroup failed: unknown result';
};
IFaceLogClient.prototype.listOfParentForPersonGroup = function(personGroupId, callback) {
  if (callback === undefined) {
    this.send_listOfParentForPersonGroup(personGroupId);
    return this.recv_listOfParentForPersonGroup();
  } else {
    var postData = this.send_listOfParentForPersonGroup(personGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listOfParentForPersonGroup);
  }
};

IFaceLogClient.prototype.send_listOfParentForPersonGroup = function(personGroupId, callback) {
  this.output.writeMessageBegin('listOfParentForPersonGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_listOfParentForPersonGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_listOfParentForPersonGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_listOfParentForPersonGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listOfParentForPersonGroup failed: unknown result';
};
IFaceLogClient.prototype.loadAllPerson = function(callback) {
  if (callback === undefined) {
    this.send_loadAllPerson();
    return this.recv_loadAllPerson();
  } else {
    var postData = this.send_loadAllPerson(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadAllPerson);
  }
};

IFaceLogClient.prototype.send_loadAllPerson = function(callback) {
  this.output.writeMessageBegin('loadAllPerson', Thrift.MessageType.CALL, this.seqid);
  var args = new IFaceLog_loadAllPerson_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadAllPerson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadAllPerson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadAllPerson failed: unknown result';
};
IFaceLogClient.prototype.loadDeviceByWhere = function(where, startRow, numRows, callback) {
  if (callback === undefined) {
    this.send_loadDeviceByWhere(where, startRow, numRows);
    return this.recv_loadDeviceByWhere();
  } else {
    var postData = this.send_loadDeviceByWhere(where, startRow, numRows, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadDeviceByWhere);
  }
};

IFaceLogClient.prototype.send_loadDeviceByWhere = function(where, startRow, numRows, callback) {
  this.output.writeMessageBegin('loadDeviceByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadDeviceByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadDeviceByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadDeviceByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadDeviceByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadDeviceGroupByWhere = function(where, startRow, numRows, callback) {
  if (callback === undefined) {
    this.send_loadDeviceGroupByWhere(where, startRow, numRows);
    return this.recv_loadDeviceGroupByWhere();
  } else {
    var postData = this.send_loadDeviceGroupByWhere(where, startRow, numRows, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadDeviceGroupByWhere);
  }
};

IFaceLogClient.prototype.send_loadDeviceGroupByWhere = function(where, startRow, numRows, callback) {
  this.output.writeMessageBegin('loadDeviceGroupByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadDeviceGroupByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadDeviceGroupByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadDeviceGroupByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadDeviceGroupByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadDeviceGroupIdByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_loadDeviceGroupIdByWhere(where);
    return this.recv_loadDeviceGroupIdByWhere();
  } else {
    var postData = this.send_loadDeviceGroupIdByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadDeviceGroupIdByWhere);
  }
};

IFaceLogClient.prototype.send_loadDeviceGroupIdByWhere = function(where, callback) {
  this.output.writeMessageBegin('loadDeviceGroupIdByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_loadDeviceGroupIdByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadDeviceGroupIdByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadDeviceGroupIdByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadDeviceGroupIdByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadDeviceIdByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_loadDeviceIdByWhere(where);
    return this.recv_loadDeviceIdByWhere();
  } else {
    var postData = this.send_loadDeviceIdByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadDeviceIdByWhere);
  }
};

IFaceLogClient.prototype.send_loadDeviceIdByWhere = function(where, callback) {
  this.output.writeMessageBegin('loadDeviceIdByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_loadDeviceIdByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadDeviceIdByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadDeviceIdByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadDeviceIdByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadFeatureMd5ByUpdate = function(timestamp, callback) {
  if (callback === undefined) {
    this.send_loadFeatureMd5ByUpdate(timestamp);
    return this.recv_loadFeatureMd5ByUpdate();
  } else {
    var postData = this.send_loadFeatureMd5ByUpdate(timestamp, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadFeatureMd5ByUpdate);
  }
};

IFaceLogClient.prototype.send_loadFeatureMd5ByUpdate = function(timestamp, callback) {
  this.output.writeMessageBegin('loadFeatureMd5ByUpdate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadFeatureMd5ByUpdate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadFeatureMd5ByUpdate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadFeatureMd5ByUpdate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadFeatureMd5ByUpdate failed: unknown result';
};
IFaceLogClient.prototype.loadLogByWhere = function(where, startRow, numRows, callback) {
  if (callback === undefined) {
    this.send_loadLogByWhere(where, startRow, numRows);
    return this.recv_loadLogByWhere();
  } else {
    var postData = this.send_loadLogByWhere(where, startRow, numRows, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadLogByWhere);
  }
};

IFaceLogClient.prototype.send_loadLogByWhere = function(where, startRow, numRows, callback) {
  this.output.writeMessageBegin('loadLogByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadLogByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadLogByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadLogByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadLogLightByVerifyTime = function(timestamp, startRow, numRows, callback) {
  if (callback === undefined) {
    this.send_loadLogLightByVerifyTime(timestamp, startRow, numRows);
    return this.recv_loadLogLightByVerifyTime();
  } else {
    var postData = this.send_loadLogLightByVerifyTime(timestamp, startRow, numRows, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadLogLightByVerifyTime);
  }
};

IFaceLogClient.prototype.send_loadLogLightByVerifyTime = function(timestamp, startRow, numRows, callback) {
  this.output.writeMessageBegin('loadLogLightByVerifyTime', Thrift.MessageType.CALL, this.seqid);
  var params = {
    timestamp: timestamp,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByVerifyTime_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadLogLightByVerifyTime = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadLogLightByVerifyTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadLogLightByVerifyTime failed: unknown result';
};
IFaceLogClient.prototype.loadLogLightByWhere = function(where, startRow, numRows, callback) {
  if (callback === undefined) {
    this.send_loadLogLightByWhere(where, startRow, numRows);
    return this.recv_loadLogLightByWhere();
  } else {
    var postData = this.send_loadLogLightByWhere(where, startRow, numRows, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadLogLightByWhere);
  }
};

IFaceLogClient.prototype.send_loadLogLightByWhere = function(where, startRow, numRows, callback) {
  this.output.writeMessageBegin('loadLogLightByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadLogLightByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadLogLightByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadLogLightByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadPermitByUpdate = function(timestamp, callback) {
  if (callback === undefined) {
    this.send_loadPermitByUpdate(timestamp);
    return this.recv_loadPermitByUpdate();
  } else {
    var postData = this.send_loadPermitByUpdate(timestamp, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadPermitByUpdate);
  }
};

IFaceLogClient.prototype.send_loadPermitByUpdate = function(timestamp, callback) {
  this.output.writeMessageBegin('loadPermitByUpdate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPermitByUpdate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadPermitByUpdate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadPermitByUpdate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadPermitByUpdate failed: unknown result';
};
IFaceLogClient.prototype.loadPersonByWhere = function(where, startRow, numRows, callback) {
  if (callback === undefined) {
    this.send_loadPersonByWhere(where, startRow, numRows);
    return this.recv_loadPersonByWhere();
  } else {
    var postData = this.send_loadPersonByWhere(where, startRow, numRows, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadPersonByWhere);
  }
};

IFaceLogClient.prototype.send_loadPersonByWhere = function(where, startRow, numRows, callback) {
  this.output.writeMessageBegin('loadPersonByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadPersonByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadPersonByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadPersonByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadPersonByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadPersonGroupByWhere = function(where, startRow, numRows, callback) {
  if (callback === undefined) {
    this.send_loadPersonGroupByWhere(where, startRow, numRows);
    return this.recv_loadPersonGroupByWhere();
  } else {
    var postData = this.send_loadPersonGroupByWhere(where, startRow, numRows, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadPersonGroupByWhere);
  }
};

IFaceLogClient.prototype.send_loadPersonGroupByWhere = function(where, startRow, numRows, callback) {
  this.output.writeMessageBegin('loadPersonGroupByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadPersonGroupByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadPersonGroupByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadPersonGroupByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadPersonGroupByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadPersonGroupIdByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_loadPersonGroupIdByWhere(where);
    return this.recv_loadPersonGroupIdByWhere();
  } else {
    var postData = this.send_loadPersonGroupIdByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadPersonGroupIdByWhere);
  }
};

IFaceLogClient.prototype.send_loadPersonGroupIdByWhere = function(where, callback) {
  this.output.writeMessageBegin('loadPersonGroupIdByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_loadPersonGroupIdByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadPersonGroupIdByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadPersonGroupIdByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadPersonGroupIdByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadPersonIdByUpdateTime = function(timestamp, callback) {
  if (callback === undefined) {
    this.send_loadPersonIdByUpdateTime(timestamp);
    return this.recv_loadPersonIdByUpdateTime();
  } else {
    var postData = this.send_loadPersonIdByUpdateTime(timestamp, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadPersonIdByUpdateTime);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByUpdateTime = function(timestamp, callback) {
  this.output.writeMessageBegin('loadPersonIdByUpdateTime', Thrift.MessageType.CALL, this.seqid);
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPersonIdByUpdateTime_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadPersonIdByUpdateTime = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadPersonIdByUpdateTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadPersonIdByUpdateTime failed: unknown result';
};
IFaceLogClient.prototype.loadPersonIdByWhere = function(where, callback) {
  if (callback === undefined) {
    this.send_loadPersonIdByWhere(where);
    return this.recv_loadPersonIdByWhere();
  } else {
    var postData = this.send_loadPersonIdByWhere(where, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadPersonIdByWhere);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByWhere = function(where, callback) {
  this.output.writeMessageBegin('loadPersonIdByWhere', Thrift.MessageType.CALL, this.seqid);
  var params = {
    where: where
  };
  var args = new IFaceLog_loadPersonIdByWhere_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadPersonIdByWhere = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadPersonIdByWhere_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadPersonIdByWhere failed: unknown result';
};
IFaceLogClient.prototype.loadUpdatedPersons = function(timestamp, callback) {
  if (callback === undefined) {
    this.send_loadUpdatedPersons(timestamp);
    return this.recv_loadUpdatedPersons();
  } else {
    var postData = this.send_loadUpdatedPersons(timestamp, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadUpdatedPersons);
  }
};

IFaceLogClient.prototype.send_loadUpdatedPersons = function(timestamp, callback) {
  this.output.writeMessageBegin('loadUpdatedPersons', Thrift.MessageType.CALL, this.seqid);
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadUpdatedPersons_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_loadUpdatedPersons = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_loadUpdatedPersons_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadUpdatedPersons failed: unknown result';
};
IFaceLogClient.prototype.offline = function(token, callback) {
  if (callback === undefined) {
    this.send_offline(token);
    this.recv_offline();
  } else {
    var postData = this.send_offline(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_offline);
  }
};

IFaceLogClient.prototype.send_offline = function(token, callback) {
  this.output.writeMessageBegin('offline', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_offline_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_offline = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_offline_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  return;
};
IFaceLogClient.prototype.online = function(device, callback) {
  if (callback === undefined) {
    this.send_online(device);
    return this.recv_online();
  } else {
    var postData = this.send_online(device, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_online);
  }
};

IFaceLogClient.prototype.send_online = function(device, callback) {
  this.output.writeMessageBegin('online', Thrift.MessageType.CALL, this.seqid);
  var params = {
    device: device
  };
  var args = new IFaceLog_online_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_online = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_online_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'online failed: unknown result';
};
IFaceLogClient.prototype.registerDevice = function(newDevice, callback) {
  if (callback === undefined) {
    this.send_registerDevice(newDevice);
    return this.recv_registerDevice();
  } else {
    var postData = this.send_registerDevice(newDevice, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_registerDevice);
  }
};

IFaceLogClient.prototype.send_registerDevice = function(newDevice, callback) {
  this.output.writeMessageBegin('registerDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    newDevice: newDevice
  };
  var args = new IFaceLog_registerDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_registerDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_registerDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerDevice failed: unknown result';
};
IFaceLogClient.prototype.releasePersonToken = function(token, callback) {
  if (callback === undefined) {
    this.send_releasePersonToken(token);
    this.recv_releasePersonToken();
  } else {
    var postData = this.send_releasePersonToken(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_releasePersonToken);
  }
};

IFaceLogClient.prototype.send_releasePersonToken = function(token, callback) {
  this.output.writeMessageBegin('releasePersonToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_releasePersonToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_releasePersonToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_releasePersonToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  return;
};
IFaceLogClient.prototype.releaseRootToken = function(token, callback) {
  if (callback === undefined) {
    this.send_releaseRootToken(token);
    this.recv_releaseRootToken();
  } else {
    var postData = this.send_releaseRootToken(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_releaseRootToken);
  }
};

IFaceLogClient.prototype.send_releaseRootToken = function(token, callback) {
  this.output.writeMessageBegin('releaseRootToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_releaseRootToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_releaseRootToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_releaseRootToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  return;
};
IFaceLogClient.prototype.replaceFeature = function(personId, featureMd5, deleteOldFeatureImage, token, callback) {
  if (callback === undefined) {
    this.send_replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
    this.recv_replaceFeature();
  } else {
    var postData = this.send_replaceFeature(personId, featureMd5, deleteOldFeatureImage, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_replaceFeature);
  }
};

IFaceLogClient.prototype.send_replaceFeature = function(personId, featureMd5, deleteOldFeatureImage, token, callback) {
  this.output.writeMessageBegin('replaceFeature', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId,
    featureMd5: featureMd5,
    deleteOldFeatureImage: deleteOldFeatureImage,
    token: token
  };
  var args = new IFaceLog_replaceFeature_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_replaceFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_replaceFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.rootGroupOfDevice = function(deviceId, callback) {
  if (callback === undefined) {
    this.send_rootGroupOfDevice(deviceId);
    return this.recv_rootGroupOfDevice();
  } else {
    var postData = this.send_rootGroupOfDevice(deviceId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_rootGroupOfDevice);
  }
};

IFaceLogClient.prototype.send_rootGroupOfDevice = function(deviceId, callback) {
  this.output.writeMessageBegin('rootGroupOfDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_rootGroupOfDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_rootGroupOfDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_rootGroupOfDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'rootGroupOfDevice failed: unknown result';
};
IFaceLogClient.prototype.rootGroupOfPerson = function(personId, callback) {
  if (callback === undefined) {
    this.send_rootGroupOfPerson(personId);
    return this.recv_rootGroupOfPerson();
  } else {
    var postData = this.send_rootGroupOfPerson(personId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_rootGroupOfPerson);
  }
};

IFaceLogClient.prototype.send_rootGroupOfPerson = function(personId, callback) {
  this.output.writeMessageBegin('rootGroupOfPerson', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId
  };
  var args = new IFaceLog_rootGroupOfPerson_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_rootGroupOfPerson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_rootGroupOfPerson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'rootGroupOfPerson failed: unknown result';
};
IFaceLogClient.prototype.saveDevice = function(deviceBean, token, callback) {
  if (callback === undefined) {
    this.send_saveDevice(deviceBean, token);
    return this.recv_saveDevice();
  } else {
    var postData = this.send_saveDevice(deviceBean, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_saveDevice);
  }
};

IFaceLogClient.prototype.send_saveDevice = function(deviceBean, token, callback) {
  this.output.writeMessageBegin('saveDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceBean: deviceBean,
    token: token
  };
  var args = new IFaceLog_saveDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_saveDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_saveDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'saveDevice failed: unknown result';
};
IFaceLogClient.prototype.saveDeviceGroup = function(deviceGroupBean, token, callback) {
  if (callback === undefined) {
    this.send_saveDeviceGroup(deviceGroupBean, token);
    return this.recv_saveDeviceGroup();
  } else {
    var postData = this.send_saveDeviceGroup(deviceGroupBean, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_saveDeviceGroup);
  }
};

IFaceLogClient.prototype.send_saveDeviceGroup = function(deviceGroupBean, token, callback) {
  this.output.writeMessageBegin('saveDeviceGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceGroupBean: deviceGroupBean,
    token: token
  };
  var args = new IFaceLog_saveDeviceGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_saveDeviceGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_saveDeviceGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'saveDeviceGroup failed: unknown result';
};
IFaceLogClient.prototype.savePerson = function(bean, token, callback) {
  if (callback === undefined) {
    this.send_savePerson(bean, token);
    return this.recv_savePerson();
  } else {
    var postData = this.send_savePerson(bean, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePerson);
  }
};

IFaceLogClient.prototype.send_savePerson = function(bean, token, callback) {
  this.output.writeMessageBegin('savePerson', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bean: bean,
    token: token
  };
  var args = new IFaceLog_savePerson_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePerson = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePerson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePerson failed: unknown result';
};
IFaceLogClient.prototype.savePersonFull = function(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token, callback) {
  if (callback === undefined) {
    this.send_savePersonFull(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token);
    return this.recv_savePersonFull();
  } else {
    var postData = this.send_savePersonFull(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersonFull);
  }
};

IFaceLogClient.prototype.send_savePersonFull = function(bean, idPhoto, feature, featureImage, featureFaceBean, deviceId, token, callback) {
  this.output.writeMessageBegin('savePersonFull', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    feature: feature,
    featureImage: featureImage,
    featureFaceBean: featureFaceBean,
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_savePersonFull_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersonFull = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersonFull_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePersonFull failed: unknown result';
};
IFaceLogClient.prototype.savePersonGroup = function(personGroupBean, token, callback) {
  if (callback === undefined) {
    this.send_savePersonGroup(personGroupBean, token);
    return this.recv_savePersonGroup();
  } else {
    var postData = this.send_savePersonGroup(personGroupBean, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersonGroup);
  }
};

IFaceLogClient.prototype.send_savePersonGroup = function(personGroupBean, token, callback) {
  this.output.writeMessageBegin('savePersonGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupBean: personGroupBean,
    token: token
  };
  var args = new IFaceLog_savePersonGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersonGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersonGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePersonGroup failed: unknown result';
};
IFaceLogClient.prototype.savePersonWithPhoto = function(bean, idPhoto, token, callback) {
  if (callback === undefined) {
    this.send_savePersonWithPhoto(bean, idPhoto, token);
    return this.recv_savePersonWithPhoto();
  } else {
    var postData = this.send_savePersonWithPhoto(bean, idPhoto, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersonWithPhoto);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhoto = function(bean, idPhoto, token, callback) {
  this.output.writeMessageBegin('savePersonWithPhoto', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhoto_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersonWithPhoto = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersonWithPhoto_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePersonWithPhoto failed: unknown result';
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeature = function(bean, idPhoto, featureBean, deviceId, token, callback) {
  if (callback === undefined) {
    this.send_savePersonWithPhotoAndFeature(bean, idPhoto, featureBean, deviceId, token);
    return this.recv_savePersonWithPhotoAndFeature();
  } else {
    var postData = this.send_savePersonWithPhotoAndFeature(bean, idPhoto, featureBean, deviceId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersonWithPhotoAndFeature);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeature = function(bean, idPhoto, featureBean, deviceId, token, callback) {
  this.output.writeMessageBegin('savePersonWithPhotoAndFeature', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    featureBean: featureBean,
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeature_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeature = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeature_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePersonWithPhotoAndFeature failed: unknown result';
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureMultiFaces = function(bean, idPhoto, feature, faceBeans, token, callback) {
  if (callback === undefined) {
    this.send_savePersonWithPhotoAndFeatureMultiFaces(bean, idPhoto, feature, faceBeans, token);
    return this.recv_savePersonWithPhotoAndFeatureMultiFaces();
  } else {
    var postData = this.send_savePersonWithPhotoAndFeatureMultiFaces(bean, idPhoto, feature, faceBeans, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersonWithPhotoAndFeatureMultiFaces);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureMultiFaces = function(bean, idPhoto, feature, faceBeans, token, callback) {
  this.output.writeMessageBegin('savePersonWithPhotoAndFeatureMultiFaces', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    feature: feature,
    faceBeans: faceBeans,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureMultiFaces = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePersonWithPhotoAndFeatureMultiFaces failed: unknown result';
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureMultiImage = function(bean, idPhoto, feature, faceInfo, deviceId, token, callback) {
  if (callback === undefined) {
    this.send_savePersonWithPhotoAndFeatureMultiImage(bean, idPhoto, feature, faceInfo, deviceId, token);
    return this.recv_savePersonWithPhotoAndFeatureMultiImage();
  } else {
    var postData = this.send_savePersonWithPhotoAndFeatureMultiImage(bean, idPhoto, feature, faceInfo, deviceId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersonWithPhotoAndFeatureMultiImage);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureMultiImage = function(bean, idPhoto, feature, faceInfo, deviceId, token, callback) {
  this.output.writeMessageBegin('savePersonWithPhotoAndFeatureMultiImage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bean: bean,
    idPhoto: idPhoto,
    feature: feature,
    faceInfo: faceInfo,
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureMultiImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePersonWithPhotoAndFeatureMultiImage failed: unknown result';
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureSaved = function(bean, idPhotoMd5, featureMd5, token, callback) {
  if (callback === undefined) {
    this.send_savePersonWithPhotoAndFeatureSaved(bean, idPhotoMd5, featureMd5, token);
    return this.recv_savePersonWithPhotoAndFeatureSaved();
  } else {
    var postData = this.send_savePersonWithPhotoAndFeatureSaved(bean, idPhotoMd5, featureMd5, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersonWithPhotoAndFeatureSaved);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureSaved = function(bean, idPhotoMd5, featureMd5, token, callback) {
  this.output.writeMessageBegin('savePersonWithPhotoAndFeatureSaved', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bean: bean,
    idPhotoMd5: idPhotoMd5,
    featureMd5: featureMd5,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureSaved_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureSaved = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePersonWithPhotoAndFeatureSaved failed: unknown result';
};
IFaceLogClient.prototype.savePersons = function(beans, token, callback) {
  if (callback === undefined) {
    this.send_savePersons(beans, token);
    this.recv_savePersons();
  } else {
    var postData = this.send_savePersons(beans, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersons);
  }
};

IFaceLogClient.prototype.send_savePersons = function(beans, token, callback) {
  this.output.writeMessageBegin('savePersons', Thrift.MessageType.CALL, this.seqid);
  var params = {
    beans: beans,
    token: token
  };
  var args = new IFaceLog_savePersons_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersons = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersons_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.savePersonsWithPhoto = function(persons, token, callback) {
  if (callback === undefined) {
    this.send_savePersonsWithPhoto(persons, token);
    return this.recv_savePersonsWithPhoto();
  } else {
    var postData = this.send_savePersonsWithPhoto(persons, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_savePersonsWithPhoto);
  }
};

IFaceLogClient.prototype.send_savePersonsWithPhoto = function(persons, token, callback) {
  this.output.writeMessageBegin('savePersonsWithPhoto', Thrift.MessageType.CALL, this.seqid);
  var params = {
    persons: persons,
    token: token
  };
  var args = new IFaceLog_savePersonsWithPhoto_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_savePersonsWithPhoto = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_savePersonsWithPhoto_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'savePersonsWithPhoto failed: unknown result';
};
IFaceLogClient.prototype.saveServiceConfig = function(token, callback) {
  if (callback === undefined) {
    this.send_saveServiceConfig(token);
    this.recv_saveServiceConfig();
  } else {
    var postData = this.send_saveServiceConfig(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_saveServiceConfig);
  }
};

IFaceLogClient.prototype.send_saveServiceConfig = function(token, callback) {
  this.output.writeMessageBegin('saveServiceConfig', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new IFaceLog_saveServiceConfig_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_saveServiceConfig = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_saveServiceConfig_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.setPersonExpiryDate = function(personId, expiryDate, token, callback) {
  if (callback === undefined) {
    this.send_setPersonExpiryDate(personId, expiryDate, token);
    this.recv_setPersonExpiryDate();
  } else {
    var postData = this.send_setPersonExpiryDate(personId, expiryDate, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setPersonExpiryDate);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDate = function(personId, expiryDate, token, callback) {
  this.output.writeMessageBegin('setPersonExpiryDate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personId: personId,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_setPersonExpiryDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_setPersonExpiryDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.setPersonExpiryDateList = function(personIdList, expiryDate, token, callback) {
  if (callback === undefined) {
    this.send_setPersonExpiryDateList(personIdList, expiryDate, token);
    this.recv_setPersonExpiryDateList();
  } else {
    var postData = this.send_setPersonExpiryDateList(personIdList, expiryDate, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setPersonExpiryDateList);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDateList = function(personIdList, expiryDate, token, callback) {
  this.output.writeMessageBegin('setPersonExpiryDateList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personIdList: personIdList,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDateList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_setPersonExpiryDateList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_setPersonExpiryDateList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.setProperties = function(config, token, callback) {
  if (callback === undefined) {
    this.send_setProperties(config, token);
    this.recv_setProperties();
  } else {
    var postData = this.send_setProperties(config, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setProperties);
  }
};

IFaceLogClient.prototype.send_setProperties = function(config, token, callback) {
  this.output.writeMessageBegin('setProperties', Thrift.MessageType.CALL, this.seqid);
  var params = {
    config: config,
    token: token
  };
  var args = new IFaceLog_setProperties_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_setProperties = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_setProperties_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.setProperty = function(key, value, token, callback) {
  if (callback === undefined) {
    this.send_setProperty(key, value, token);
    this.recv_setProperty();
  } else {
    var postData = this.send_setProperty(key, value, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setProperty);
  }
};

IFaceLogClient.prototype.send_setProperty = function(key, value, token, callback) {
  this.output.writeMessageBegin('setProperty', Thrift.MessageType.CALL, this.seqid);
  var params = {
    key: key,
    value: value,
    token: token
  };
  var args = new IFaceLog_setProperty_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_setProperty = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_setProperty_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.taskQueueOf = function(task, token, callback) {
  if (callback === undefined) {
    this.send_taskQueueOf(task, token);
    return this.recv_taskQueueOf();
  } else {
    var postData = this.send_taskQueueOf(task, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_taskQueueOf);
  }
};

IFaceLogClient.prototype.send_taskQueueOf = function(task, token, callback) {
  this.output.writeMessageBegin('taskQueueOf', Thrift.MessageType.CALL, this.seqid);
  var params = {
    task: task,
    token: token
  };
  var args = new IFaceLog_taskQueueOf_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_taskQueueOf = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_taskQueueOf_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'taskQueueOf failed: unknown result';
};
IFaceLogClient.prototype.taskRegister = function(task, token, callback) {
  if (callback === undefined) {
    this.send_taskRegister(task, token);
    return this.recv_taskRegister();
  } else {
    var postData = this.send_taskRegister(task, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_taskRegister);
  }
};

IFaceLogClient.prototype.send_taskRegister = function(task, token, callback) {
  this.output.writeMessageBegin('taskRegister', Thrift.MessageType.CALL, this.seqid);
  var params = {
    task: task,
    token: token
  };
  var args = new IFaceLog_taskRegister_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_taskRegister = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_taskRegister_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'taskRegister failed: unknown result';
};
IFaceLogClient.prototype.unbindBorder = function(personGroupId, deviceGroupId, token, callback) {
  if (callback === undefined) {
    this.send_unbindBorder(personGroupId, deviceGroupId, token);
    this.recv_unbindBorder();
  } else {
    var postData = this.send_unbindBorder(personGroupId, deviceGroupId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_unbindBorder);
  }
};

IFaceLogClient.prototype.send_unbindBorder = function(personGroupId, deviceGroupId, token, callback) {
  this.output.writeMessageBegin('unbindBorder', Thrift.MessageType.CALL, this.seqid);
  var params = {
    personGroupId: personGroupId,
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_unbindBorder_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_unbindBorder = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_unbindBorder_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  return;
};
IFaceLogClient.prototype.unregisterDevice = function(deviceId, token, callback) {
  if (callback === undefined) {
    this.send_unregisterDevice(deviceId, token);
    this.recv_unregisterDevice();
  } else {
    var postData = this.send_unregisterDevice(deviceId, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_unregisterDevice);
  }
};

IFaceLogClient.prototype.send_unregisterDevice = function(deviceId, token, callback) {
  this.output.writeMessageBegin('unregisterDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceId: deviceId,
    token: token
  };
  var args = new IFaceLog_unregisterDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_unregisterDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_unregisterDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  return;
};
IFaceLogClient.prototype.updateDevice = function(deviceBean, token, callback) {
  if (callback === undefined) {
    this.send_updateDevice(deviceBean, token);
    return this.recv_updateDevice();
  } else {
    var postData = this.send_updateDevice(deviceBean, token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateDevice);
  }
};

IFaceLogClient.prototype.send_updateDevice = function(deviceBean, token, callback) {
  this.output.writeMessageBegin('updateDevice', Thrift.MessageType.CALL, this.seqid);
  var params = {
    deviceBean: deviceBean,
    token: token
  };
  var args = new IFaceLog_updateDevice_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_updateDevice = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_updateDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateDevice failed: unknown result';
};
IFaceLogClient.prototype.version = function(callback) {
  if (callback === undefined) {
    this.send_version();
    return this.recv_version();
  } else {
    var postData = this.send_version(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_version);
  }
};

IFaceLogClient.prototype.send_version = function(callback) {
  this.output.writeMessageBegin('version', Thrift.MessageType.CALL, this.seqid);
  var args = new IFaceLog_version_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_version = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_version_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'version failed: unknown result';
};
IFaceLogClient.prototype.versionInfo = function(callback) {
  if (callback === undefined) {
    this.send_versionInfo();
    return this.recv_versionInfo();
  } else {
    var postData = this.send_versionInfo(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_versionInfo);
  }
};

IFaceLogClient.prototype.send_versionInfo = function(callback) {
  this.output.writeMessageBegin('versionInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new IFaceLog_versionInfo_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

IFaceLogClient.prototype.recv_versionInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IFaceLog_versionInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'versionInfo failed: unknown result';
};
