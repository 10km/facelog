/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef I_FACE_LOG_H
#define I_FACE_LOG_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "i_face_log_types.h"

/* IFaceLog service interface */
typedef struct _IFaceLogIf IFaceLogIf;  /* dummy object */

struct _IFaceLogIfInterface
{
  GTypeInterface parent;

  gboolean (*add_feature) (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * faecBeans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_feature_multi) (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * photos, const GPtrArray * faces, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_feature_with_image) (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const gboolean asIdPhotoIfAbsent, const GByteArray * featurePhoto, const FaceBean * faceBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_image) (IFaceLogIf *iface, ImageBean ** _return, const GByteArray * imageData, const gint32 deviceId, const FaceBean * faceBean, const gint32 personId, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_log) (IFaceLogIf *iface, const LogBean * logBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_log_full) (IFaceLogIf *iface, const LogBean * logBean, const FaceBean * faceBean, const GByteArray * featureImage, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_logs) (IFaceLogIf *iface, const GPtrArray * beans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_logs_full) (IFaceLogIf *iface, const GPtrArray * logBeans, const GPtrArray * faceBeans, const GPtrArray * featureImages, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*apply_ack_channel) (IFaceLogIf *iface, gchar ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*apply_ack_channel_with_duration) (IFaceLogIf *iface, gchar ** _return, const gint32 duration, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*apply_cmd_sn) (IFaceLogIf *iface, gint32* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*apply_person_token) (IFaceLogIf *iface, Token ** _return, const gint32 personId, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*apply_root_token) (IFaceLogIf *iface, Token ** _return, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*apply_user_token) (IFaceLogIf *iface, Token ** _return, const gint32 userid, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*bind_border) (IFaceLogIf *iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*child_list_for_device_group) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*child_list_for_person_group) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_device_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_device_group_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_log_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_log_light_by_verify_time) (IFaceLogIf *iface, gint32* _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_log_light_by_verify_time_timestr) (IFaceLogIf *iface, gint32* _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_log_light_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_person_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_person_group_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_all_features_by_person_id) (IFaceLogIf *iface, gint32* _return, const gint32 personId, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_device_group) (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_feature) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * featureMd5, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_group_permit_on_device_group) (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_image) (IFaceLogIf *iface, gint32* _return, const gchar * imageMd5, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_permit_by_id) (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_person) (IFaceLogIf *iface, gint32* _return, const gint32 personId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_person_by_papers_num) (IFaceLogIf *iface, gint32* _return, const gchar * papersNum, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_person_group) (IFaceLogIf *iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_person_group_permit) (IFaceLogIf *iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_persons) (IFaceLogIf *iface, gint32* _return, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_persons_by_papers_num) (IFaceLogIf *iface, gint32* _return, const GPtrArray * papersNumlist, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*disable_person) (IFaceLogIf *iface, const gint32 personId, const gint32 moveToGroupId, const gboolean deletePhoto, const gboolean deleteFeature, const gboolean deleteLog, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*disable_person_list) (IFaceLogIf *iface, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*exists_device) (IFaceLogIf *iface, gboolean* _return, const gint32 id, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*exists_feature) (IFaceLogIf *iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*exists_image) (IFaceLogIf *iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*exists_person) (IFaceLogIf *iface, gboolean* _return, const gint32 persionId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device) (IFaceLogIf *iface, DeviceBean ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_group) (IFaceLogIf *iface, DeviceGroupBean ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_groups) (IFaceLogIf *iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_groups_belongs) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_groups_permit) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_groups_permitted_by) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_id_of_feature) (IFaceLogIf *iface, gint32* _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_devices) (IFaceLogIf *iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_devices_of_group) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_face) (IFaceLogIf *iface, FaceBean ** _return, const gint32 faceId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_feature) (IFaceLogIf *iface, FeatureBean ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_feature_bytes) (IFaceLogIf *iface, GByteArray ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features) (IFaceLogIf *iface, GPtrArray ** _return, const GPtrArray * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features_by_person_id) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features_by_person_id_and_sdk_version) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, const gchar * sdkVersion, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features_of_person) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features_permitted_on_device) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const gboolean ignoreSchedule, const gchar * sdkVersion, const GPtrArray * excludeFeatureIds, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_group_permit) (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_group_permit_on_device_group) (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_group_permits) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personGroupIdList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_image) (IFaceLogIf *iface, ImageBean ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_image_bytes) (IFaceLogIf *iface, GByteArray ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_images_associated_by_feature) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_log_beans_by_person_id) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person) (IFaceLogIf *iface, PersonBean ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_by_papers_num) (IFaceLogIf *iface, PersonBean ** _return, const gchar * papersNum, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_group) (IFaceLogIf *iface, PersonGroupBean ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_groups) (IFaceLogIf *iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_groups_belongs) (IFaceLogIf *iface, GArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_groups_permitted_by) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_permit) (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceId, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_permits) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personIdList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_persons) (IFaceLogIf *iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_persons_of_group) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_property) (IFaceLogIf *iface, gchar ** _return, const gchar * key, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_redis_parameters) (IFaceLogIf *iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_service_config) (IFaceLogIf *iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_sub_device_group) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_sub_person_group) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_disable) (IFaceLogIf *iface, gboolean* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_local) (IFaceLogIf *iface, gboolean* _return, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_ack_channel) (IFaceLogIf *iface, gboolean* _return, const gchar * ackChannel, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_cmd_sn) (IFaceLogIf *iface, gboolean* _return, const gint32 cmdSn, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_device_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_password) (IFaceLogIf *iface, gboolean* _return, const gchar * userId, const gchar * password, const gboolean isMd5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_person_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_root_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_user_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*list_of_parent_for_device_group) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*list_of_parent_for_person_group) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_all_person) (IFaceLogIf *iface, GArray ** _return, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_device_by_where) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_device_group_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_device_group_id_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_device_id_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_feature_md5_by_update) (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_feature_md5_by_update_time_str) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_log_by_where) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_log_light_by_verify_time) (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_log_light_by_verify_time_timestr) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_log_light_by_where) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_permit_by_update) (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_permit_by_update_timestr) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_by_where) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_group_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_group_id_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_id_by_update_time) (IFaceLogIf *iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_id_by_update_time_time_str) (IFaceLogIf *iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_id_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_updated_persons) (IFaceLogIf *iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_updated_persons_timestr) (IFaceLogIf *iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*offline) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*online) (IFaceLogIf *iface, Token ** _return, const DeviceBean * device, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*register_device) (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * newDevice, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*release_person_token) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*release_root_token) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*release_user_token) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*replace_feature) (IFaceLogIf *iface, const gint32 personId, const gchar * featureMd5, const gboolean deleteOldFeatureImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*root_group_of_device) (IFaceLogIf *iface, gint32* _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*root_group_of_person) (IFaceLogIf *iface, gint32* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*run_cmd) (IFaceLogIf *iface, gint32* _return, const GArray * target, const gboolean group, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*run_task) (IFaceLogIf *iface, gboolean* _return, const gchar * taskQueue, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_device) (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_device_group) (IFaceLogIf *iface, DeviceGroupBean ** _return, const DeviceGroupBean * deviceGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_permit) (IFaceLogIf *iface, PermitBean ** _return, const PermitBean * permitBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_permit_with_schedule) (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, const gchar * schedule, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_full) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GByteArray * featureImage, const FaceBean * featureFaceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_group) (IFaceLogIf *iface, PersonGroupBean ** _return, const PersonGroupBean * personGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo_and_feature) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const FeatureBean * featureBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo_and_feature_multi_faces) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * faceBeans, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo_and_feature_multi_image) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * photos, const GPtrArray * faces, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo_and_feature_saved) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const gchar * idPhotoMd5, const gchar * featureMd5, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_persons) (IFaceLogIf *iface, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_persons_with_photo) (IFaceLogIf *iface, gint32* _return, const GPtrArray * photos, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_service_config) (IFaceLogIf *iface, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*sdk_task_queue_of) (IFaceLogIf *iface, gchar ** _return, const gchar * task, const gchar * sdkVersion, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_person_expiry_date) (IFaceLogIf *iface, const gint32 personId, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_person_expiry_date_list) (IFaceLogIf *iface, const GArray * personIdList, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_person_expiry_date_time_str) (IFaceLogIf *iface, const gint32 personId, const gchar * expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_properties) (IFaceLogIf *iface, const GHashTable * config, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_property) (IFaceLogIf *iface, const gchar * key, const gchar * value, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*task_queue_of) (IFaceLogIf *iface, gchar ** _return, const gchar * task, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*unbind_border) (IFaceLogIf *iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*unregister_device) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*update_device) (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*version) (IFaceLogIf *iface, gchar ** _return, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*version_info) (IFaceLogIf *iface, GHashTable ** _return, ServiceRuntimeException ** ex1, GError **error);
};
typedef struct _IFaceLogIfInterface IFaceLogIfInterface;

GType i_face_log_if_get_type (void);
#define TYPE_I_FACE_LOG_IF (i_face_log_if_get_type())
#define I_FACE_LOG_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_FACE_LOG_IF, IFaceLogIf))
#define IS_I_FACE_LOG_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_FACE_LOG_IF))
#define I_FACE_LOG_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_I_FACE_LOG_IF, IFaceLogIfInterface))

gboolean i_face_log_if_add_feature (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * faecBeans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_add_feature_multi (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * photos, const GPtrArray * faces, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_add_feature_with_image (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const gboolean asIdPhotoIfAbsent, const GByteArray * featurePhoto, const FaceBean * faceBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_add_image (IFaceLogIf *iface, ImageBean ** _return, const GByteArray * imageData, const gint32 deviceId, const FaceBean * faceBean, const gint32 personId, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_add_log (IFaceLogIf *iface, const LogBean * logBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_add_log_full (IFaceLogIf *iface, const LogBean * logBean, const FaceBean * faceBean, const GByteArray * featureImage, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_add_logs (IFaceLogIf *iface, const GPtrArray * beans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_add_logs_full (IFaceLogIf *iface, const GPtrArray * logBeans, const GPtrArray * faceBeans, const GPtrArray * featureImages, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_apply_ack_channel (IFaceLogIf *iface, gchar ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_apply_ack_channel_with_duration (IFaceLogIf *iface, gchar ** _return, const gint32 duration, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_apply_cmd_sn (IFaceLogIf *iface, gint32* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_apply_person_token (IFaceLogIf *iface, Token ** _return, const gint32 personId, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_apply_root_token (IFaceLogIf *iface, Token ** _return, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_apply_user_token (IFaceLogIf *iface, Token ** _return, const gint32 userid, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_bind_border (IFaceLogIf *iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_child_list_for_device_group (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_child_list_for_person_group (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_count_device_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_count_device_group_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_count_log_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_count_log_light_by_verify_time (IFaceLogIf *iface, gint32* _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_count_log_light_by_verify_time_timestr (IFaceLogIf *iface, gint32* _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_count_log_light_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_count_person_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_count_person_group_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_all_features_by_person_id (IFaceLogIf *iface, gint32* _return, const gint32 personId, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_device_group (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_feature (IFaceLogIf *iface, GPtrArray ** _return, const gchar * featureMd5, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_group_permit_on_device_group (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_image (IFaceLogIf *iface, gint32* _return, const gchar * imageMd5, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_permit_by_id (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_person (IFaceLogIf *iface, gint32* _return, const gint32 personId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_person_by_papers_num (IFaceLogIf *iface, gint32* _return, const gchar * papersNum, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_person_group (IFaceLogIf *iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_person_group_permit (IFaceLogIf *iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_persons (IFaceLogIf *iface, gint32* _return, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_delete_persons_by_papers_num (IFaceLogIf *iface, gint32* _return, const GPtrArray * papersNumlist, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_disable_person (IFaceLogIf *iface, const gint32 personId, const gint32 moveToGroupId, const gboolean deletePhoto, const gboolean deleteFeature, const gboolean deleteLog, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_disable_person_list (IFaceLogIf *iface, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_exists_device (IFaceLogIf *iface, gboolean* _return, const gint32 id, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_exists_feature (IFaceLogIf *iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_exists_image (IFaceLogIf *iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_exists_person (IFaceLogIf *iface, gboolean* _return, const gint32 persionId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_device (IFaceLogIf *iface, DeviceBean ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_device_group (IFaceLogIf *iface, DeviceGroupBean ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_device_groups (IFaceLogIf *iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_device_groups_belongs (IFaceLogIf *iface, GArray ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_device_groups_permit (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_device_groups_permitted_by (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_device_id_of_feature (IFaceLogIf *iface, gint32* _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_devices (IFaceLogIf *iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_devices_of_group (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_face (IFaceLogIf *iface, FaceBean ** _return, const gint32 faceId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_feature (IFaceLogIf *iface, FeatureBean ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_feature_bytes (IFaceLogIf *iface, GByteArray ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_features (IFaceLogIf *iface, GPtrArray ** _return, const GPtrArray * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_features_by_person_id (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_features_by_person_id_and_sdk_version (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, const gchar * sdkVersion, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_features_of_person (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_features_permitted_on_device (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const gboolean ignoreSchedule, const gchar * sdkVersion, const GPtrArray * excludeFeatureIds, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_group_permit (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_group_permit_on_device_group (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_group_permits (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personGroupIdList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_image (IFaceLogIf *iface, ImageBean ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_image_bytes (IFaceLogIf *iface, GByteArray ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_images_associated_by_feature (IFaceLogIf *iface, GPtrArray ** _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_log_beans_by_person_id (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_person (IFaceLogIf *iface, PersonBean ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_person_by_papers_num (IFaceLogIf *iface, PersonBean ** _return, const gchar * papersNum, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_person_group (IFaceLogIf *iface, PersonGroupBean ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_person_groups (IFaceLogIf *iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_person_groups_belongs (IFaceLogIf *iface, GArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_person_groups_permitted_by (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_person_permit (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceId, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_person_permits (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personIdList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_persons (IFaceLogIf *iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_persons_of_group (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_property (IFaceLogIf *iface, gchar ** _return, const gchar * key, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_redis_parameters (IFaceLogIf *iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_service_config (IFaceLogIf *iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_sub_device_group (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_get_sub_person_group (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_disable (IFaceLogIf *iface, gboolean* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_local (IFaceLogIf *iface, gboolean* _return, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_valid_ack_channel (IFaceLogIf *iface, gboolean* _return, const gchar * ackChannel, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_valid_cmd_sn (IFaceLogIf *iface, gboolean* _return, const gint32 cmdSn, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_valid_device_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_valid_password (IFaceLogIf *iface, gboolean* _return, const gchar * userId, const gchar * password, const gboolean isMd5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_valid_person_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_valid_root_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_valid_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_is_valid_user_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_list_of_parent_for_device_group (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_list_of_parent_for_person_group (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_all_person (IFaceLogIf *iface, GArray ** _return, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_device_by_where (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_device_group_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_device_group_id_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_device_id_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_feature_md5_by_update (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_feature_md5_by_update_time_str (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_log_by_where (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_log_light_by_verify_time (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_log_light_by_verify_time_timestr (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_log_light_by_where (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_permit_by_update (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_permit_by_update_timestr (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_person_by_where (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_person_group_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_person_group_id_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_person_id_by_update_time (IFaceLogIf *iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_person_id_by_update_time_time_str (IFaceLogIf *iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_person_id_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_updated_persons (IFaceLogIf *iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_load_updated_persons_timestr (IFaceLogIf *iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_offline (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_online (IFaceLogIf *iface, Token ** _return, const DeviceBean * device, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_register_device (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * newDevice, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_release_person_token (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_release_root_token (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_release_user_token (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_replace_feature (IFaceLogIf *iface, const gint32 personId, const gchar * featureMd5, const gboolean deleteOldFeatureImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_root_group_of_device (IFaceLogIf *iface, gint32* _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_root_group_of_person (IFaceLogIf *iface, gint32* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_run_cmd (IFaceLogIf *iface, gint32* _return, const GArray * target, const gboolean group, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_run_task (IFaceLogIf *iface, gboolean* _return, const gchar * taskQueue, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_device (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_device_group (IFaceLogIf *iface, DeviceGroupBean ** _return, const DeviceGroupBean * deviceGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_permit (IFaceLogIf *iface, PermitBean ** _return, const PermitBean * permitBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_permit_with_schedule (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, const gchar * schedule, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_person (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_person_full (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GByteArray * featureImage, const FaceBean * featureFaceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_person_group (IFaceLogIf *iface, PersonGroupBean ** _return, const PersonGroupBean * personGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_person_with_photo (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_person_with_photo_and_feature (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const FeatureBean * featureBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_person_with_photo_and_feature_multi_faces (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * faceBeans, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_person_with_photo_and_feature_multi_image (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * photos, const GPtrArray * faces, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_person_with_photo_and_feature_saved (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const gchar * idPhotoMd5, const gchar * featureMd5, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_persons (IFaceLogIf *iface, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_persons_with_photo (IFaceLogIf *iface, gint32* _return, const GPtrArray * photos, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_save_service_config (IFaceLogIf *iface, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_sdk_task_queue_of (IFaceLogIf *iface, gchar ** _return, const gchar * task, const gchar * sdkVersion, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_set_person_expiry_date (IFaceLogIf *iface, const gint32 personId, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_set_person_expiry_date_list (IFaceLogIf *iface, const GArray * personIdList, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_set_person_expiry_date_time_str (IFaceLogIf *iface, const gint32 personId, const gchar * expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_set_properties (IFaceLogIf *iface, const GHashTable * config, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_set_property (IFaceLogIf *iface, const gchar * key, const gchar * value, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_task_queue_of (IFaceLogIf *iface, gchar ** _return, const gchar * task, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_unbind_border (IFaceLogIf *iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_unregister_device (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_if_update_device (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_version (IFaceLogIf *iface, gchar ** _return, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_if_version_info (IFaceLogIf *iface, GHashTable ** _return, ServiceRuntimeException ** ex1, GError **error);

/* IFaceLog service client */
struct _IFaceLogClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _IFaceLogClient IFaceLogClient;

struct _IFaceLogClientClass
{
  GObjectClass parent;
};
typedef struct _IFaceLogClientClass IFaceLogClientClass;

GType i_face_log_client_get_type (void);
#define TYPE_I_FACE_LOG_CLIENT (i_face_log_client_get_type())
#define I_FACE_LOG_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_FACE_LOG_CLIENT, IFaceLogClient))
#define I_FACE_LOG_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_FACE_LOG_CLIENT, IFaceLogClientClass))
#define I_FACE_LOG_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_FACE_LOG_CLIENT))
#define I_FACE_LOG_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_FACE_LOG_CLIENT))
#define I_FACE_LOG_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_FACE_LOG_CLIENT, IFaceLogClientClass))

gboolean i_face_log_client_add_feature (IFaceLogIf * iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * faecBeans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_add_feature (IFaceLogIf * iface, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * faecBeans, const Token * token, GError ** error);
gboolean i_face_log_client_recv_add_feature (IFaceLogIf * iface, FeatureBean ** _return, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_add_feature_multi (IFaceLogIf * iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * photos, const GPtrArray * faces, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_add_feature_multi (IFaceLogIf * iface, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * photos, const GPtrArray * faces, const Token * token, GError ** error);
gboolean i_face_log_client_recv_add_feature_multi (IFaceLogIf * iface, FeatureBean ** _return, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_add_feature_with_image (IFaceLogIf * iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const gboolean asIdPhotoIfAbsent, const GByteArray * featurePhoto, const FaceBean * faceBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_add_feature_with_image (IFaceLogIf * iface, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const gboolean asIdPhotoIfAbsent, const GByteArray * featurePhoto, const FaceBean * faceBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_add_feature_with_image (IFaceLogIf * iface, FeatureBean ** _return, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_add_image (IFaceLogIf * iface, ImageBean ** _return, const GByteArray * imageData, const gint32 deviceId, const FaceBean * faceBean, const gint32 personId, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_add_image (IFaceLogIf * iface, const GByteArray * imageData, const gint32 deviceId, const FaceBean * faceBean, const gint32 personId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_add_image (IFaceLogIf * iface, ImageBean ** _return, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_add_log (IFaceLogIf * iface, const LogBean * logBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_add_log (IFaceLogIf * iface, const LogBean * logBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_add_log (IFaceLogIf * iface, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_add_log_full (IFaceLogIf * iface, const LogBean * logBean, const FaceBean * faceBean, const GByteArray * featureImage, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_add_log_full (IFaceLogIf * iface, const LogBean * logBean, const FaceBean * faceBean, const GByteArray * featureImage, const Token * token, GError ** error);
gboolean i_face_log_client_recv_add_log_full (IFaceLogIf * iface, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_add_logs (IFaceLogIf * iface, const GPtrArray * beans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_add_logs (IFaceLogIf * iface, const GPtrArray * beans, const Token * token, GError ** error);
gboolean i_face_log_client_recv_add_logs (IFaceLogIf * iface, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_add_logs_full (IFaceLogIf * iface, const GPtrArray * logBeans, const GPtrArray * faceBeans, const GPtrArray * featureImages, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_add_logs_full (IFaceLogIf * iface, const GPtrArray * logBeans, const GPtrArray * faceBeans, const GPtrArray * featureImages, const Token * token, GError ** error);
gboolean i_face_log_client_recv_add_logs_full (IFaceLogIf * iface, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_apply_ack_channel (IFaceLogIf * iface, gchar ** _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_apply_ack_channel (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_apply_ack_channel (IFaceLogIf * iface, gchar ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_apply_ack_channel_with_duration (IFaceLogIf * iface, gchar ** _return, const gint32 duration, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_apply_ack_channel_with_duration (IFaceLogIf * iface, const gint32 duration, const Token * token, GError ** error);
gboolean i_face_log_client_recv_apply_ack_channel_with_duration (IFaceLogIf * iface, gchar ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_apply_cmd_sn (IFaceLogIf * iface, gint32* _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_apply_cmd_sn (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_apply_cmd_sn (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_apply_person_token (IFaceLogIf * iface, Token ** _return, const gint32 personId, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_apply_person_token (IFaceLogIf * iface, const gint32 personId, const gchar * password, const gboolean isMd5, GError ** error);
gboolean i_face_log_client_recv_apply_person_token (IFaceLogIf * iface, Token ** _return, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_apply_root_token (IFaceLogIf * iface, Token ** _return, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_apply_root_token (IFaceLogIf * iface, const gchar * password, const gboolean isMd5, GError ** error);
gboolean i_face_log_client_recv_apply_root_token (IFaceLogIf * iface, Token ** _return, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_apply_user_token (IFaceLogIf * iface, Token ** _return, const gint32 userid, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_apply_user_token (IFaceLogIf * iface, const gint32 userid, const gchar * password, const gboolean isMd5, GError ** error);
gboolean i_face_log_client_recv_apply_user_token (IFaceLogIf * iface, Token ** _return, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_bind_border (IFaceLogIf * iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_bind_border (IFaceLogIf * iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_bind_border (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_child_list_for_device_group (IFaceLogIf * iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_child_list_for_device_group (IFaceLogIf * iface, const gint32 deviceGroupId, GError ** error);
gboolean i_face_log_client_recv_child_list_for_device_group (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_child_list_for_person_group (IFaceLogIf * iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_child_list_for_person_group (IFaceLogIf * iface, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_child_list_for_person_group (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_count_device_by_where (IFaceLogIf * iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_count_device_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_count_device_by_where (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_count_device_group_by_where (IFaceLogIf * iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_count_device_group_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_count_device_group_by_where (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_count_log_by_where (IFaceLogIf * iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_count_log_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_count_log_by_where (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_count_log_light_by_verify_time (IFaceLogIf * iface, gint32* _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_count_log_light_by_verify_time (IFaceLogIf * iface, const gint64 timestamp, GError ** error);
gboolean i_face_log_client_recv_count_log_light_by_verify_time (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_count_log_light_by_verify_time_timestr (IFaceLogIf * iface, gint32* _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_count_log_light_by_verify_time_timestr (IFaceLogIf * iface, const gchar * timestamp, GError ** error);
gboolean i_face_log_client_recv_count_log_light_by_verify_time_timestr (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_count_log_light_by_where (IFaceLogIf * iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_count_log_light_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_count_log_light_by_where (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_count_person_by_where (IFaceLogIf * iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_count_person_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_count_person_by_where (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_count_person_group_by_where (IFaceLogIf * iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_count_person_group_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_count_person_group_by_where (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_all_features_by_person_id (IFaceLogIf * iface, gint32* _return, const gint32 personId, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_all_features_by_person_id (IFaceLogIf * iface, const gint32 personId, const gboolean deleteImage, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_all_features_by_person_id (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_device_group (IFaceLogIf * iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_device_group (IFaceLogIf * iface, const gint32 deviceGroupId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_device_group (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_feature (IFaceLogIf * iface, GPtrArray ** _return, const gchar * featureMd5, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_feature (IFaceLogIf * iface, const gchar * featureMd5, const gboolean deleteImage, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_feature (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_group_permit_on_device_group (IFaceLogIf * iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_group_permit_on_device_group (IFaceLogIf * iface, const gint32 deviceGroupId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_group_permit_on_device_group (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_image (IFaceLogIf * iface, gint32* _return, const gchar * imageMd5, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_image (IFaceLogIf * iface, const gchar * imageMd5, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_image (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_permit_by_id (IFaceLogIf * iface, gint32* _return, const gint32 deviceGroupId, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_permit_by_id (IFaceLogIf * iface, const gint32 deviceGroupId, const gint32 personGroupId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_permit_by_id (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_person (IFaceLogIf * iface, gint32* _return, const gint32 personId, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_person (IFaceLogIf * iface, const gint32 personId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_person (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_person_by_papers_num (IFaceLogIf * iface, gint32* _return, const gchar * papersNum, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_person_by_papers_num (IFaceLogIf * iface, const gchar * papersNum, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_person_by_papers_num (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_person_group (IFaceLogIf * iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_person_group (IFaceLogIf * iface, const gint32 personGroupId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_person_group (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_person_group_permit (IFaceLogIf * iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_person_group_permit (IFaceLogIf * iface, const gint32 personGroupId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_person_group_permit (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_persons (IFaceLogIf * iface, gint32* _return, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_persons (IFaceLogIf * iface, const GArray * personIdList, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_persons (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_delete_persons_by_papers_num (IFaceLogIf * iface, gint32* _return, const GPtrArray * papersNumlist, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_delete_persons_by_papers_num (IFaceLogIf * iface, const GPtrArray * papersNumlist, const Token * token, GError ** error);
gboolean i_face_log_client_recv_delete_persons_by_papers_num (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_disable_person (IFaceLogIf * iface, const gint32 personId, const gint32 moveToGroupId, const gboolean deletePhoto, const gboolean deleteFeature, const gboolean deleteLog, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_disable_person (IFaceLogIf * iface, const gint32 personId, const gint32 moveToGroupId, const gboolean deletePhoto, const gboolean deleteFeature, const gboolean deleteLog, const Token * token, GError ** error);
gboolean i_face_log_client_recv_disable_person (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_disable_person_list (IFaceLogIf * iface, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_disable_person_list (IFaceLogIf * iface, const GArray * personIdList, const Token * token, GError ** error);
gboolean i_face_log_client_recv_disable_person_list (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_exists_device (IFaceLogIf * iface, gboolean* _return, const gint32 id, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_exists_device (IFaceLogIf * iface, const gint32 id, GError ** error);
gboolean i_face_log_client_recv_exists_device (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_exists_feature (IFaceLogIf * iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_exists_feature (IFaceLogIf * iface, const gchar * md5, GError ** error);
gboolean i_face_log_client_recv_exists_feature (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_exists_image (IFaceLogIf * iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_exists_image (IFaceLogIf * iface, const gchar * md5, GError ** error);
gboolean i_face_log_client_recv_exists_image (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_exists_person (IFaceLogIf * iface, gboolean* _return, const gint32 persionId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_exists_person (IFaceLogIf * iface, const gint32 persionId, GError ** error);
gboolean i_face_log_client_recv_exists_person (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_device (IFaceLogIf * iface, DeviceBean ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_device (IFaceLogIf * iface, const gint32 deviceId, GError ** error);
gboolean i_face_log_client_recv_get_device (IFaceLogIf * iface, DeviceBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_device_group (IFaceLogIf * iface, DeviceGroupBean ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_device_group (IFaceLogIf * iface, const gint32 deviceGroupId, GError ** error);
gboolean i_face_log_client_recv_get_device_group (IFaceLogIf * iface, DeviceGroupBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_device_groups (IFaceLogIf * iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_device_groups (IFaceLogIf * iface, const GArray * groupIdList, GError ** error);
gboolean i_face_log_client_recv_get_device_groups (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_device_groups_belongs (IFaceLogIf * iface, GArray ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_device_groups_belongs (IFaceLogIf * iface, const gint32 deviceId, GError ** error);
gboolean i_face_log_client_recv_get_device_groups_belongs (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_device_groups_permit (IFaceLogIf * iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_device_groups_permit (IFaceLogIf * iface, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_get_device_groups_permit (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_device_groups_permitted_by (IFaceLogIf * iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_device_groups_permitted_by (IFaceLogIf * iface, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_get_device_groups_permitted_by (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_device_id_of_feature (IFaceLogIf * iface, gint32* _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_device_id_of_feature (IFaceLogIf * iface, const gchar * featureMd5, GError ** error);
gboolean i_face_log_client_recv_get_device_id_of_feature (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_devices (IFaceLogIf * iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_devices (IFaceLogIf * iface, const GArray * idList, GError ** error);
gboolean i_face_log_client_recv_get_devices (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_devices_of_group (IFaceLogIf * iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_devices_of_group (IFaceLogIf * iface, const gint32 deviceGroupId, GError ** error);
gboolean i_face_log_client_recv_get_devices_of_group (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_face (IFaceLogIf * iface, FaceBean ** _return, const gint32 faceId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_face (IFaceLogIf * iface, const gint32 faceId, GError ** error);
gboolean i_face_log_client_recv_get_face (IFaceLogIf * iface, FaceBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_feature (IFaceLogIf * iface, FeatureBean ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_feature (IFaceLogIf * iface, const gchar * md5, GError ** error);
gboolean i_face_log_client_recv_get_feature (IFaceLogIf * iface, FeatureBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_feature_bytes (IFaceLogIf * iface, GByteArray ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_feature_bytes (IFaceLogIf * iface, const gchar * md5, GError ** error);
gboolean i_face_log_client_recv_get_feature_bytes (IFaceLogIf * iface, GByteArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_features (IFaceLogIf * iface, GPtrArray ** _return, const GPtrArray * md5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_features (IFaceLogIf * iface, const GPtrArray * md5, GError ** error);
gboolean i_face_log_client_recv_get_features (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_features_by_person_id (IFaceLogIf * iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_features_by_person_id (IFaceLogIf * iface, const gint32 personId, GError ** error);
gboolean i_face_log_client_recv_get_features_by_person_id (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_features_by_person_id_and_sdk_version (IFaceLogIf * iface, GPtrArray ** _return, const gint32 personId, const gchar * sdkVersion, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_features_by_person_id_and_sdk_version (IFaceLogIf * iface, const gint32 personId, const gchar * sdkVersion, GError ** error);
gboolean i_face_log_client_recv_get_features_by_person_id_and_sdk_version (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_features_of_person (IFaceLogIf * iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_features_of_person (IFaceLogIf * iface, const gint32 personId, GError ** error);
gboolean i_face_log_client_recv_get_features_of_person (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_features_permitted_on_device (IFaceLogIf * iface, GPtrArray ** _return, const gint32 deviceId, const gboolean ignoreSchedule, const gchar * sdkVersion, const GPtrArray * excludeFeatureIds, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_features_permitted_on_device (IFaceLogIf * iface, const gint32 deviceId, const gboolean ignoreSchedule, const gchar * sdkVersion, const GPtrArray * excludeFeatureIds, GError ** error);
gboolean i_face_log_client_recv_get_features_permitted_on_device (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_group_permit (IFaceLogIf * iface, PermitBean ** _return, const gint32 deviceId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_group_permit (IFaceLogIf * iface, const gint32 deviceId, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_get_group_permit (IFaceLogIf * iface, PermitBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_group_permit_on_device_group (IFaceLogIf * iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_group_permit_on_device_group (IFaceLogIf * iface, const gint32 deviceGroupId, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_get_group_permit_on_device_group (IFaceLogIf * iface, PermitBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_group_permits (IFaceLogIf * iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personGroupIdList, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_group_permits (IFaceLogIf * iface, const gint32 deviceId, const GArray * personGroupIdList, GError ** error);
gboolean i_face_log_client_recv_get_group_permits (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_image (IFaceLogIf * iface, ImageBean ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_image (IFaceLogIf * iface, const gchar * imageMD5, GError ** error);
gboolean i_face_log_client_recv_get_image (IFaceLogIf * iface, ImageBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_image_bytes (IFaceLogIf * iface, GByteArray ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_image_bytes (IFaceLogIf * iface, const gchar * imageMD5, GError ** error);
gboolean i_face_log_client_recv_get_image_bytes (IFaceLogIf * iface, GByteArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_images_associated_by_feature (IFaceLogIf * iface, GPtrArray ** _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_images_associated_by_feature (IFaceLogIf * iface, const gchar * featureMd5, GError ** error);
gboolean i_face_log_client_recv_get_images_associated_by_feature (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_log_beans_by_person_id (IFaceLogIf * iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_log_beans_by_person_id (IFaceLogIf * iface, const gint32 personId, GError ** error);
gboolean i_face_log_client_recv_get_log_beans_by_person_id (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_person (IFaceLogIf * iface, PersonBean ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_person (IFaceLogIf * iface, const gint32 personId, GError ** error);
gboolean i_face_log_client_recv_get_person (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_person_by_papers_num (IFaceLogIf * iface, PersonBean ** _return, const gchar * papersNum, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_person_by_papers_num (IFaceLogIf * iface, const gchar * papersNum, GError ** error);
gboolean i_face_log_client_recv_get_person_by_papers_num (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_person_group (IFaceLogIf * iface, PersonGroupBean ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_person_group (IFaceLogIf * iface, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_get_person_group (IFaceLogIf * iface, PersonGroupBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_person_groups (IFaceLogIf * iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_person_groups (IFaceLogIf * iface, const GArray * groupIdList, GError ** error);
gboolean i_face_log_client_recv_get_person_groups (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_person_groups_belongs (IFaceLogIf * iface, GArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_person_groups_belongs (IFaceLogIf * iface, const gint32 personId, GError ** error);
gboolean i_face_log_client_recv_get_person_groups_belongs (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_person_groups_permitted_by (IFaceLogIf * iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_person_groups_permitted_by (IFaceLogIf * iface, const gint32 deviceGroupId, GError ** error);
gboolean i_face_log_client_recv_get_person_groups_permitted_by (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_person_permit (IFaceLogIf * iface, PermitBean ** _return, const gint32 deviceId, const gint32 personId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_person_permit (IFaceLogIf * iface, const gint32 deviceId, const gint32 personId, GError ** error);
gboolean i_face_log_client_recv_get_person_permit (IFaceLogIf * iface, PermitBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_person_permits (IFaceLogIf * iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personIdList, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_person_permits (IFaceLogIf * iface, const gint32 deviceId, const GArray * personIdList, GError ** error);
gboolean i_face_log_client_recv_get_person_permits (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_persons (IFaceLogIf * iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_persons (IFaceLogIf * iface, const GArray * idList, GError ** error);
gboolean i_face_log_client_recv_get_persons (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_persons_of_group (IFaceLogIf * iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_persons_of_group (IFaceLogIf * iface, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_get_persons_of_group (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_property (IFaceLogIf * iface, gchar ** _return, const gchar * key, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_property (IFaceLogIf * iface, const gchar * key, const Token * token, GError ** error);
gboolean i_face_log_client_recv_get_property (IFaceLogIf * iface, gchar ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_redis_parameters (IFaceLogIf * iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_redis_parameters (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_get_redis_parameters (IFaceLogIf * iface, GHashTable ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_service_config (IFaceLogIf * iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_service_config (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_get_service_config (IFaceLogIf * iface, GHashTable ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_sub_device_group (IFaceLogIf * iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_sub_device_group (IFaceLogIf * iface, const gint32 deviceGroupId, GError ** error);
gboolean i_face_log_client_recv_get_sub_device_group (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_get_sub_person_group (IFaceLogIf * iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_get_sub_person_group (IFaceLogIf * iface, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_get_sub_person_group (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_disable (IFaceLogIf * iface, gboolean* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_disable (IFaceLogIf * iface, const gint32 personId, GError ** error);
gboolean i_face_log_client_recv_is_disable (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_local (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_local (IFaceLogIf * iface, GError ** error);
gboolean i_face_log_client_recv_is_local (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_valid_ack_channel (IFaceLogIf * iface, gboolean* _return, const gchar * ackChannel, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_valid_ack_channel (IFaceLogIf * iface, const gchar * ackChannel, GError ** error);
gboolean i_face_log_client_recv_is_valid_ack_channel (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_valid_cmd_sn (IFaceLogIf * iface, gboolean* _return, const gint32 cmdSn, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_valid_cmd_sn (IFaceLogIf * iface, const gint32 cmdSn, GError ** error);
gboolean i_face_log_client_recv_is_valid_cmd_sn (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_valid_device_token (IFaceLogIf * iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_valid_device_token (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_is_valid_device_token (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_valid_password (IFaceLogIf * iface, gboolean* _return, const gchar * userId, const gchar * password, const gboolean isMd5, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_valid_password (IFaceLogIf * iface, const gchar * userId, const gchar * password, const gboolean isMd5, GError ** error);
gboolean i_face_log_client_recv_is_valid_password (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_valid_person_token (IFaceLogIf * iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_valid_person_token (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_is_valid_person_token (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_valid_root_token (IFaceLogIf * iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_valid_root_token (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_is_valid_root_token (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_valid_token (IFaceLogIf * iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_valid_token (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_is_valid_token (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_is_valid_user_token (IFaceLogIf * iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_is_valid_user_token (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_is_valid_user_token (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_list_of_parent_for_device_group (IFaceLogIf * iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_list_of_parent_for_device_group (IFaceLogIf * iface, const gint32 deviceGroupId, GError ** error);
gboolean i_face_log_client_recv_list_of_parent_for_device_group (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_list_of_parent_for_person_group (IFaceLogIf * iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_list_of_parent_for_person_group (IFaceLogIf * iface, const gint32 personGroupId, GError ** error);
gboolean i_face_log_client_recv_list_of_parent_for_person_group (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_all_person (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_all_person (IFaceLogIf * iface, GError ** error);
gboolean i_face_log_client_recv_load_all_person (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_device_by_where (IFaceLogIf * iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_device_by_where (IFaceLogIf * iface, const gchar * where, const gint32 startRow, const gint32 numRows, GError ** error);
gboolean i_face_log_client_recv_load_device_by_where (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_device_group_by_where (IFaceLogIf * iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_device_group_by_where (IFaceLogIf * iface, const gchar * where, const gint32 startRow, const gint32 numRows, GError ** error);
gboolean i_face_log_client_recv_load_device_group_by_where (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_device_group_id_by_where (IFaceLogIf * iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_device_group_id_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_load_device_group_id_by_where (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_device_id_by_where (IFaceLogIf * iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_device_id_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_load_device_id_by_where (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_feature_md5_by_update (IFaceLogIf * iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_feature_md5_by_update (IFaceLogIf * iface, const gint64 timestamp, GError ** error);
gboolean i_face_log_client_recv_load_feature_md5_by_update (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_feature_md5_by_update_time_str (IFaceLogIf * iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_feature_md5_by_update_time_str (IFaceLogIf * iface, const gchar * timestamp, GError ** error);
gboolean i_face_log_client_recv_load_feature_md5_by_update_time_str (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_log_by_where (IFaceLogIf * iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_log_by_where (IFaceLogIf * iface, const gchar * where, const gint32 startRow, const gint32 numRows, GError ** error);
gboolean i_face_log_client_recv_load_log_by_where (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_log_light_by_verify_time (IFaceLogIf * iface, GPtrArray ** _return, const gint64 timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_log_light_by_verify_time (IFaceLogIf * iface, const gint64 timestamp, const gint32 startRow, const gint32 numRows, GError ** error);
gboolean i_face_log_client_recv_load_log_light_by_verify_time (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_log_light_by_verify_time_timestr (IFaceLogIf * iface, GPtrArray ** _return, const gchar * timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_log_light_by_verify_time_timestr (IFaceLogIf * iface, const gchar * timestamp, const gint32 startRow, const gint32 numRows, GError ** error);
gboolean i_face_log_client_recv_load_log_light_by_verify_time_timestr (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_log_light_by_where (IFaceLogIf * iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_log_light_by_where (IFaceLogIf * iface, const gchar * where, const gint32 startRow, const gint32 numRows, GError ** error);
gboolean i_face_log_client_recv_load_log_light_by_where (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_permit_by_update (IFaceLogIf * iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_permit_by_update (IFaceLogIf * iface, const gint64 timestamp, GError ** error);
gboolean i_face_log_client_recv_load_permit_by_update (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_permit_by_update_timestr (IFaceLogIf * iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_permit_by_update_timestr (IFaceLogIf * iface, const gchar * timestamp, GError ** error);
gboolean i_face_log_client_recv_load_permit_by_update_timestr (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_person_by_where (IFaceLogIf * iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_person_by_where (IFaceLogIf * iface, const gchar * where, const gint32 startRow, const gint32 numRows, GError ** error);
gboolean i_face_log_client_recv_load_person_by_where (IFaceLogIf * iface, GPtrArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_person_group_by_where (IFaceLogIf * iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_person_group_by_where (IFaceLogIf * iface, const gchar * where, const gint32 startRow, const gint32 numRows, GError ** error);
gboolean i_face_log_client_recv_load_person_group_by_where (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_person_group_id_by_where (IFaceLogIf * iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_person_group_id_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_load_person_group_id_by_where (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_person_id_by_update_time (IFaceLogIf * iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_person_id_by_update_time (IFaceLogIf * iface, const gint64 timestamp, GError ** error);
gboolean i_face_log_client_recv_load_person_id_by_update_time (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_person_id_by_update_time_time_str (IFaceLogIf * iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_person_id_by_update_time_time_str (IFaceLogIf * iface, const gchar * timestamp, GError ** error);
gboolean i_face_log_client_recv_load_person_id_by_update_time_time_str (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_person_id_by_where (IFaceLogIf * iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_person_id_by_where (IFaceLogIf * iface, const gchar * where, GError ** error);
gboolean i_face_log_client_recv_load_person_id_by_where (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_updated_persons (IFaceLogIf * iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_updated_persons (IFaceLogIf * iface, const gint64 timestamp, GError ** error);
gboolean i_face_log_client_recv_load_updated_persons (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_load_updated_persons_timestr (IFaceLogIf * iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_load_updated_persons_timestr (IFaceLogIf * iface, const gchar * timestamp, GError ** error);
gboolean i_face_log_client_recv_load_updated_persons_timestr (IFaceLogIf * iface, GArray ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_offline (IFaceLogIf * iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_offline (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_offline (IFaceLogIf * iface, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_online (IFaceLogIf * iface, Token ** _return, const DeviceBean * device, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_online (IFaceLogIf * iface, const DeviceBean * device, GError ** error);
gboolean i_face_log_client_recv_online (IFaceLogIf * iface, Token ** _return, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_register_device (IFaceLogIf * iface, DeviceBean ** _return, const DeviceBean * newDevice, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_register_device (IFaceLogIf * iface, const DeviceBean * newDevice, GError ** error);
gboolean i_face_log_client_recv_register_device (IFaceLogIf * iface, DeviceBean ** _return, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_release_person_token (IFaceLogIf * iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_release_person_token (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_release_person_token (IFaceLogIf * iface, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_release_root_token (IFaceLogIf * iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_release_root_token (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_release_root_token (IFaceLogIf * iface, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_release_user_token (IFaceLogIf * iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_release_user_token (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_release_user_token (IFaceLogIf * iface, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_replace_feature (IFaceLogIf * iface, const gint32 personId, const gchar * featureMd5, const gboolean deleteOldFeatureImage, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_replace_feature (IFaceLogIf * iface, const gint32 personId, const gchar * featureMd5, const gboolean deleteOldFeatureImage, const Token * token, GError ** error);
gboolean i_face_log_client_recv_replace_feature (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_root_group_of_device (IFaceLogIf * iface, gint32* _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_root_group_of_device (IFaceLogIf * iface, const gint32 deviceId, GError ** error);
gboolean i_face_log_client_recv_root_group_of_device (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_root_group_of_person (IFaceLogIf * iface, gint32* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_root_group_of_person (IFaceLogIf * iface, const gint32 personId, GError ** error);
gboolean i_face_log_client_recv_root_group_of_person (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_run_cmd (IFaceLogIf * iface, gint32* _return, const GArray * target, const gboolean group, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_run_cmd (IFaceLogIf * iface, const GArray * target, const gboolean group, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, GError ** error);
gboolean i_face_log_client_recv_run_cmd (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_run_task (IFaceLogIf * iface, gboolean* _return, const gchar * taskQueue, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_run_task (IFaceLogIf * iface, const gchar * taskQueue, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, GError ** error);
gboolean i_face_log_client_recv_run_task (IFaceLogIf * iface, gboolean* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_device (IFaceLogIf * iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_device (IFaceLogIf * iface, const DeviceBean * deviceBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_device (IFaceLogIf * iface, DeviceBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_device_group (IFaceLogIf * iface, DeviceGroupBean ** _return, const DeviceGroupBean * deviceGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_device_group (IFaceLogIf * iface, const DeviceGroupBean * deviceGroupBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_device_group (IFaceLogIf * iface, DeviceGroupBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_permit (IFaceLogIf * iface, PermitBean ** _return, const PermitBean * permitBean, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_permit (IFaceLogIf * iface, const PermitBean * permitBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_permit (IFaceLogIf * iface, PermitBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_permit_with_schedule (IFaceLogIf * iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, const gchar * schedule, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_permit_with_schedule (IFaceLogIf * iface, const gint32 deviceGroupId, const gint32 personGroupId, const gchar * schedule, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_permit_with_schedule (IFaceLogIf * iface, PermitBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_person (IFaceLogIf * iface, PersonBean ** _return, const PersonBean * personBean, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_person (IFaceLogIf * iface, const PersonBean * personBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_person (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_person_full (IFaceLogIf * iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GByteArray * featureImage, const FaceBean * featureFaceBean, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_person_full (IFaceLogIf * iface, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GByteArray * featureImage, const FaceBean * featureFaceBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_person_full (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_person_group (IFaceLogIf * iface, PersonGroupBean ** _return, const PersonGroupBean * personGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_person_group (IFaceLogIf * iface, const PersonGroupBean * personGroupBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_person_group (IFaceLogIf * iface, PersonGroupBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_person_with_photo (IFaceLogIf * iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_person_with_photo (IFaceLogIf * iface, const PersonBean * personBean, const GByteArray * idPhoto, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_person_with_photo (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_person_with_photo_and_feature (IFaceLogIf * iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const FeatureBean * featureBean, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_person_with_photo_and_feature (IFaceLogIf * iface, const PersonBean * personBean, const GByteArray * idPhoto, const FeatureBean * featureBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_person_with_photo_and_feature (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_person_with_photo_and_feature_multi_faces (IFaceLogIf * iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * faceBeans, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_person_with_photo_and_feature_multi_faces (IFaceLogIf * iface, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * faceBeans, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_person_with_photo_and_feature_multi_faces (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_person_with_photo_and_feature_multi_image (IFaceLogIf * iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * photos, const GPtrArray * faces, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_person_with_photo_and_feature_multi_image (IFaceLogIf * iface, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * photos, const GPtrArray * faces, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_person_with_photo_and_feature_multi_image (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_person_with_photo_and_feature_saved (IFaceLogIf * iface, PersonBean ** _return, const PersonBean * personBean, const gchar * idPhotoMd5, const gchar * featureMd5, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_person_with_photo_and_feature_saved (IFaceLogIf * iface, const PersonBean * personBean, const gchar * idPhotoMd5, const gchar * featureMd5, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_person_with_photo_and_feature_saved (IFaceLogIf * iface, PersonBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_persons (IFaceLogIf * iface, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_persons (IFaceLogIf * iface, const GPtrArray * persons, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_persons (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_persons_with_photo (IFaceLogIf * iface, gint32* _return, const GPtrArray * photos, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_persons_with_photo (IFaceLogIf * iface, const GPtrArray * photos, const GPtrArray * persons, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_persons_with_photo (IFaceLogIf * iface, gint32* _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_save_service_config (IFaceLogIf * iface, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_save_service_config (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_save_service_config (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_sdk_task_queue_of (IFaceLogIf * iface, gchar ** _return, const gchar * task, const gchar * sdkVersion, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_sdk_task_queue_of (IFaceLogIf * iface, const gchar * task, const gchar * sdkVersion, const Token * token, GError ** error);
gboolean i_face_log_client_recv_sdk_task_queue_of (IFaceLogIf * iface, gchar ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_set_person_expiry_date (IFaceLogIf * iface, const gint32 personId, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_set_person_expiry_date (IFaceLogIf * iface, const gint32 personId, const gint64 expiryDate, const Token * token, GError ** error);
gboolean i_face_log_client_recv_set_person_expiry_date (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_set_person_expiry_date_list (IFaceLogIf * iface, const GArray * personIdList, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_set_person_expiry_date_list (IFaceLogIf * iface, const GArray * personIdList, const gint64 expiryDate, const Token * token, GError ** error);
gboolean i_face_log_client_recv_set_person_expiry_date_list (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_set_person_expiry_date_time_str (IFaceLogIf * iface, const gint32 personId, const gchar * expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_set_person_expiry_date_time_str (IFaceLogIf * iface, const gint32 personId, const gchar * expiryDate, const Token * token, GError ** error);
gboolean i_face_log_client_recv_set_person_expiry_date_time_str (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_set_properties (IFaceLogIf * iface, const GHashTable * config, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_set_properties (IFaceLogIf * iface, const GHashTable * config, const Token * token, GError ** error);
gboolean i_face_log_client_recv_set_properties (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_set_property (IFaceLogIf * iface, const gchar * key, const gchar * value, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_set_property (IFaceLogIf * iface, const gchar * key, const gchar * value, const Token * token, GError ** error);
gboolean i_face_log_client_recv_set_property (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_task_queue_of (IFaceLogIf * iface, gchar ** _return, const gchar * task, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_task_queue_of (IFaceLogIf * iface, const gchar * task, const Token * token, GError ** error);
gboolean i_face_log_client_recv_task_queue_of (IFaceLogIf * iface, gchar ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_unbind_border (IFaceLogIf * iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_unbind_border (IFaceLogIf * iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, GError ** error);
gboolean i_face_log_client_recv_unbind_border (IFaceLogIf * iface, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_unregister_device (IFaceLogIf * iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_send_unregister_device (IFaceLogIf * iface, const Token * token, GError ** error);
gboolean i_face_log_client_recv_unregister_device (IFaceLogIf * iface, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError ** error);
gboolean i_face_log_client_update_device (IFaceLogIf * iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_update_device (IFaceLogIf * iface, const DeviceBean * deviceBean, const Token * token, GError ** error);
gboolean i_face_log_client_recv_update_device (IFaceLogIf * iface, DeviceBean ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_version (IFaceLogIf * iface, gchar ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_version (IFaceLogIf * iface, GError ** error);
gboolean i_face_log_client_recv_version (IFaceLogIf * iface, gchar ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_version_info (IFaceLogIf * iface, GHashTable ** _return, ServiceRuntimeException ** ex1, GError ** error);
gboolean i_face_log_client_send_version_info (IFaceLogIf * iface, GError ** error);
gboolean i_face_log_client_recv_version_info (IFaceLogIf * iface, GHashTable ** _return, ServiceRuntimeException ** ex1, GError ** error);
void i_face_log_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void i_face_log_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* IFaceLog handler (abstract base class) */
struct _IFaceLogHandler
{
  GObject parent;
};
typedef struct _IFaceLogHandler IFaceLogHandler;

struct _IFaceLogHandlerClass
{
  GObjectClass parent;

  gboolean (*add_feature) (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * faecBeans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_feature_multi) (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * photos, const GPtrArray * faces, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_feature_with_image) (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const gboolean asIdPhotoIfAbsent, const GByteArray * featurePhoto, const FaceBean * faceBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_image) (IFaceLogIf *iface, ImageBean ** _return, const GByteArray * imageData, const gint32 deviceId, const FaceBean * faceBean, const gint32 personId, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_log) (IFaceLogIf *iface, const LogBean * logBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_log_full) (IFaceLogIf *iface, const LogBean * logBean, const FaceBean * faceBean, const GByteArray * featureImage, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_logs) (IFaceLogIf *iface, const GPtrArray * beans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*add_logs_full) (IFaceLogIf *iface, const GPtrArray * logBeans, const GPtrArray * faceBeans, const GPtrArray * featureImages, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*apply_ack_channel) (IFaceLogIf *iface, gchar ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*apply_ack_channel_with_duration) (IFaceLogIf *iface, gchar ** _return, const gint32 duration, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*apply_cmd_sn) (IFaceLogIf *iface, gint32* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*apply_person_token) (IFaceLogIf *iface, Token ** _return, const gint32 personId, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*apply_root_token) (IFaceLogIf *iface, Token ** _return, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*apply_user_token) (IFaceLogIf *iface, Token ** _return, const gint32 userid, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*bind_border) (IFaceLogIf *iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*child_list_for_device_group) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*child_list_for_person_group) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_device_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_device_group_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_log_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_log_light_by_verify_time) (IFaceLogIf *iface, gint32* _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_log_light_by_verify_time_timestr) (IFaceLogIf *iface, gint32* _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_log_light_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_person_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*count_person_group_by_where) (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_all_features_by_person_id) (IFaceLogIf *iface, gint32* _return, const gint32 personId, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_device_group) (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_feature) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * featureMd5, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_group_permit_on_device_group) (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_image) (IFaceLogIf *iface, gint32* _return, const gchar * imageMd5, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_permit_by_id) (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_person) (IFaceLogIf *iface, gint32* _return, const gint32 personId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_person_by_papers_num) (IFaceLogIf *iface, gint32* _return, const gchar * papersNum, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_person_group) (IFaceLogIf *iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_person_group_permit) (IFaceLogIf *iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_persons) (IFaceLogIf *iface, gint32* _return, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*delete_persons_by_papers_num) (IFaceLogIf *iface, gint32* _return, const GPtrArray * papersNumlist, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*disable_person) (IFaceLogIf *iface, const gint32 personId, const gint32 moveToGroupId, const gboolean deletePhoto, const gboolean deleteFeature, const gboolean deleteLog, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*disable_person_list) (IFaceLogIf *iface, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*exists_device) (IFaceLogIf *iface, gboolean* _return, const gint32 id, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*exists_feature) (IFaceLogIf *iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*exists_image) (IFaceLogIf *iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*exists_person) (IFaceLogIf *iface, gboolean* _return, const gint32 persionId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device) (IFaceLogIf *iface, DeviceBean ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_group) (IFaceLogIf *iface, DeviceGroupBean ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_groups) (IFaceLogIf *iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_groups_belongs) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_groups_permit) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_groups_permitted_by) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_device_id_of_feature) (IFaceLogIf *iface, gint32* _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_devices) (IFaceLogIf *iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_devices_of_group) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_face) (IFaceLogIf *iface, FaceBean ** _return, const gint32 faceId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_feature) (IFaceLogIf *iface, FeatureBean ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_feature_bytes) (IFaceLogIf *iface, GByteArray ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features) (IFaceLogIf *iface, GPtrArray ** _return, const GPtrArray * md5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features_by_person_id) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features_by_person_id_and_sdk_version) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, const gchar * sdkVersion, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features_of_person) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_features_permitted_on_device) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const gboolean ignoreSchedule, const gchar * sdkVersion, const GPtrArray * excludeFeatureIds, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_group_permit) (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_group_permit_on_device_group) (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_group_permits) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personGroupIdList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_image) (IFaceLogIf *iface, ImageBean ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_image_bytes) (IFaceLogIf *iface, GByteArray ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_images_associated_by_feature) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_log_beans_by_person_id) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person) (IFaceLogIf *iface, PersonBean ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_by_papers_num) (IFaceLogIf *iface, PersonBean ** _return, const gchar * papersNum, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_group) (IFaceLogIf *iface, PersonGroupBean ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_groups) (IFaceLogIf *iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_groups_belongs) (IFaceLogIf *iface, GArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_groups_permitted_by) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_permit) (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceId, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_person_permits) (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personIdList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_persons) (IFaceLogIf *iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_persons_of_group) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_property) (IFaceLogIf *iface, gchar ** _return, const gchar * key, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_redis_parameters) (IFaceLogIf *iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_service_config) (IFaceLogIf *iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_sub_device_group) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*get_sub_person_group) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_disable) (IFaceLogIf *iface, gboolean* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_local) (IFaceLogIf *iface, gboolean* _return, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_ack_channel) (IFaceLogIf *iface, gboolean* _return, const gchar * ackChannel, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_cmd_sn) (IFaceLogIf *iface, gboolean* _return, const gint32 cmdSn, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_device_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_password) (IFaceLogIf *iface, gboolean* _return, const gchar * userId, const gchar * password, const gboolean isMd5, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_person_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_root_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*is_valid_user_token) (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*list_of_parent_for_device_group) (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*list_of_parent_for_person_group) (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_all_person) (IFaceLogIf *iface, GArray ** _return, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_device_by_where) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_device_group_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_device_group_id_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_device_id_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_feature_md5_by_update) (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_feature_md5_by_update_time_str) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_log_by_where) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_log_light_by_verify_time) (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_log_light_by_verify_time_timestr) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_log_light_by_where) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_permit_by_update) (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_permit_by_update_timestr) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_by_where) (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_group_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_group_id_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_id_by_update_time) (IFaceLogIf *iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_id_by_update_time_time_str) (IFaceLogIf *iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_person_id_by_where) (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_updated_persons) (IFaceLogIf *iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*load_updated_persons_timestr) (IFaceLogIf *iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*offline) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*online) (IFaceLogIf *iface, Token ** _return, const DeviceBean * device, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*register_device) (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * newDevice, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*release_person_token) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*release_root_token) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*release_user_token) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*replace_feature) (IFaceLogIf *iface, const gint32 personId, const gchar * featureMd5, const gboolean deleteOldFeatureImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*root_group_of_device) (IFaceLogIf *iface, gint32* _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*root_group_of_person) (IFaceLogIf *iface, gint32* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*run_cmd) (IFaceLogIf *iface, gint32* _return, const GArray * target, const gboolean group, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*run_task) (IFaceLogIf *iface, gboolean* _return, const gchar * taskQueue, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_device) (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_device_group) (IFaceLogIf *iface, DeviceGroupBean ** _return, const DeviceGroupBean * deviceGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_permit) (IFaceLogIf *iface, PermitBean ** _return, const PermitBean * permitBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_permit_with_schedule) (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, const gchar * schedule, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_full) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GByteArray * featureImage, const FaceBean * featureFaceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_group) (IFaceLogIf *iface, PersonGroupBean ** _return, const PersonGroupBean * personGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo_and_feature) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const FeatureBean * featureBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo_and_feature_multi_faces) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * faceBeans, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo_and_feature_multi_image) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * photos, const GPtrArray * faces, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_person_with_photo_and_feature_saved) (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const gchar * idPhotoMd5, const gchar * featureMd5, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_persons) (IFaceLogIf *iface, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_persons_with_photo) (IFaceLogIf *iface, gint32* _return, const GPtrArray * photos, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*save_service_config) (IFaceLogIf *iface, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*sdk_task_queue_of) (IFaceLogIf *iface, gchar ** _return, const gchar * task, const gchar * sdkVersion, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_person_expiry_date) (IFaceLogIf *iface, const gint32 personId, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_person_expiry_date_list) (IFaceLogIf *iface, const GArray * personIdList, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_person_expiry_date_time_str) (IFaceLogIf *iface, const gint32 personId, const gchar * expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_properties) (IFaceLogIf *iface, const GHashTable * config, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*set_property) (IFaceLogIf *iface, const gchar * key, const gchar * value, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*task_queue_of) (IFaceLogIf *iface, gchar ** _return, const gchar * task, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*unbind_border) (IFaceLogIf *iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*unregister_device) (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
  gboolean (*update_device) (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*version) (IFaceLogIf *iface, gchar ** _return, ServiceRuntimeException ** ex1, GError **error);
  gboolean (*version_info) (IFaceLogIf *iface, GHashTable ** _return, ServiceRuntimeException ** ex1, GError **error);
};
typedef struct _IFaceLogHandlerClass IFaceLogHandlerClass;

GType i_face_log_handler_get_type (void);
#define TYPE_I_FACE_LOG_HANDLER (i_face_log_handler_get_type())
#define I_FACE_LOG_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_FACE_LOG_HANDLER, IFaceLogHandler))
#define IS_I_FACE_LOG_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_FACE_LOG_HANDLER))
#define I_FACE_LOG_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_FACE_LOG_HANDLER, IFaceLogHandlerClass))
#define IS_I_FACE_LOG_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_FACE_LOG_HANDLER))
#define I_FACE_LOG_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_FACE_LOG_HANDLER, IFaceLogHandlerClass))

gboolean i_face_log_handler_add_feature (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * faecBeans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_add_feature_multi (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const GPtrArray * photos, const GPtrArray * faces, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_add_feature_with_image (IFaceLogIf *iface, FeatureBean ** _return, const GByteArray * feature, const gchar * featureVersion, const gint32 personId, const gboolean asIdPhotoIfAbsent, const GByteArray * featurePhoto, const FaceBean * faceBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_add_image (IFaceLogIf *iface, ImageBean ** _return, const GByteArray * imageData, const gint32 deviceId, const FaceBean * faceBean, const gint32 personId, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_add_log (IFaceLogIf *iface, const LogBean * logBean, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_add_log_full (IFaceLogIf *iface, const LogBean * logBean, const FaceBean * faceBean, const GByteArray * featureImage, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_add_logs (IFaceLogIf *iface, const GPtrArray * beans, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_add_logs_full (IFaceLogIf *iface, const GPtrArray * logBeans, const GPtrArray * faceBeans, const GPtrArray * featureImages, const Token * token, DuplicateRecordException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_apply_ack_channel (IFaceLogIf *iface, gchar ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_apply_ack_channel_with_duration (IFaceLogIf *iface, gchar ** _return, const gint32 duration, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_apply_cmd_sn (IFaceLogIf *iface, gint32* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_apply_person_token (IFaceLogIf *iface, Token ** _return, const gint32 personId, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_apply_root_token (IFaceLogIf *iface, Token ** _return, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_apply_user_token (IFaceLogIf *iface, Token ** _return, const gint32 userid, const gchar * password, const gboolean isMd5, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_bind_border (IFaceLogIf *iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_child_list_for_device_group (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_child_list_for_person_group (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_count_device_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_count_device_group_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_count_log_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_count_log_light_by_verify_time (IFaceLogIf *iface, gint32* _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_count_log_light_by_verify_time_timestr (IFaceLogIf *iface, gint32* _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_count_log_light_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_count_person_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_count_person_group_by_where (IFaceLogIf *iface, gint32* _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_all_features_by_person_id (IFaceLogIf *iface, gint32* _return, const gint32 personId, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_device_group (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_feature (IFaceLogIf *iface, GPtrArray ** _return, const gchar * featureMd5, const gboolean deleteImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_group_permit_on_device_group (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_image (IFaceLogIf *iface, gint32* _return, const gchar * imageMd5, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_permit_by_id (IFaceLogIf *iface, gint32* _return, const gint32 deviceGroupId, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_person (IFaceLogIf *iface, gint32* _return, const gint32 personId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_person_by_papers_num (IFaceLogIf *iface, gint32* _return, const gchar * papersNum, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_person_group (IFaceLogIf *iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_person_group_permit (IFaceLogIf *iface, gint32* _return, const gint32 personGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_persons (IFaceLogIf *iface, gint32* _return, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_delete_persons_by_papers_num (IFaceLogIf *iface, gint32* _return, const GPtrArray * papersNumlist, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_disable_person (IFaceLogIf *iface, const gint32 personId, const gint32 moveToGroupId, const gboolean deletePhoto, const gboolean deleteFeature, const gboolean deleteLog, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_disable_person_list (IFaceLogIf *iface, const GArray * personIdList, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_exists_device (IFaceLogIf *iface, gboolean* _return, const gint32 id, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_exists_feature (IFaceLogIf *iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_exists_image (IFaceLogIf *iface, gboolean* _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_exists_person (IFaceLogIf *iface, gboolean* _return, const gint32 persionId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_device (IFaceLogIf *iface, DeviceBean ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_device_group (IFaceLogIf *iface, DeviceGroupBean ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_device_groups (IFaceLogIf *iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_device_groups_belongs (IFaceLogIf *iface, GArray ** _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_device_groups_permit (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_device_groups_permitted_by (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_device_id_of_feature (IFaceLogIf *iface, gint32* _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_devices (IFaceLogIf *iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_devices_of_group (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_face (IFaceLogIf *iface, FaceBean ** _return, const gint32 faceId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_feature (IFaceLogIf *iface, FeatureBean ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_feature_bytes (IFaceLogIf *iface, GByteArray ** _return, const gchar * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_features (IFaceLogIf *iface, GPtrArray ** _return, const GPtrArray * md5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_features_by_person_id (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_features_by_person_id_and_sdk_version (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, const gchar * sdkVersion, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_features_of_person (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_features_permitted_on_device (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const gboolean ignoreSchedule, const gchar * sdkVersion, const GPtrArray * excludeFeatureIds, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_group_permit (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_group_permit_on_device_group (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_group_permits (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personGroupIdList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_image (IFaceLogIf *iface, ImageBean ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_image_bytes (IFaceLogIf *iface, GByteArray ** _return, const gchar * imageMD5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_images_associated_by_feature (IFaceLogIf *iface, GPtrArray ** _return, const gchar * featureMd5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_log_beans_by_person_id (IFaceLogIf *iface, GPtrArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_person (IFaceLogIf *iface, PersonBean ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_person_by_papers_num (IFaceLogIf *iface, PersonBean ** _return, const gchar * papersNum, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_person_group (IFaceLogIf *iface, PersonGroupBean ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_person_groups (IFaceLogIf *iface, GPtrArray ** _return, const GArray * groupIdList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_person_groups_belongs (IFaceLogIf *iface, GArray ** _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_person_groups_permitted_by (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_person_permit (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceId, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_person_permits (IFaceLogIf *iface, GPtrArray ** _return, const gint32 deviceId, const GArray * personIdList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_persons (IFaceLogIf *iface, GPtrArray ** _return, const GArray * idList, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_persons_of_group (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_property (IFaceLogIf *iface, gchar ** _return, const gchar * key, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_redis_parameters (IFaceLogIf *iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_service_config (IFaceLogIf *iface, GHashTable ** _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_sub_device_group (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_get_sub_person_group (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_disable (IFaceLogIf *iface, gboolean* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_local (IFaceLogIf *iface, gboolean* _return, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_valid_ack_channel (IFaceLogIf *iface, gboolean* _return, const gchar * ackChannel, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_valid_cmd_sn (IFaceLogIf *iface, gboolean* _return, const gint32 cmdSn, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_valid_device_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_valid_password (IFaceLogIf *iface, gboolean* _return, const gchar * userId, const gchar * password, const gboolean isMd5, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_valid_person_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_valid_root_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_valid_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_is_valid_user_token (IFaceLogIf *iface, gboolean* _return, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_list_of_parent_for_device_group (IFaceLogIf *iface, GArray ** _return, const gint32 deviceGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_list_of_parent_for_person_group (IFaceLogIf *iface, GArray ** _return, const gint32 personGroupId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_all_person (IFaceLogIf *iface, GArray ** _return, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_device_by_where (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_device_group_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_device_group_id_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_device_id_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_feature_md5_by_update (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_feature_md5_by_update_time_str (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_log_by_where (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_log_light_by_verify_time (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_log_light_by_verify_time_timestr (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_log_light_by_where (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_permit_by_update (IFaceLogIf *iface, GPtrArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_permit_by_update_timestr (IFaceLogIf *iface, GPtrArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_person_by_where (IFaceLogIf *iface, GPtrArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_person_group_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, const gint32 startRow, const gint32 numRows, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_person_group_id_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_person_id_by_update_time (IFaceLogIf *iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_person_id_by_update_time_time_str (IFaceLogIf *iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_person_id_by_where (IFaceLogIf *iface, GArray ** _return, const gchar * where, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_updated_persons (IFaceLogIf *iface, GArray ** _return, const gint64 timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_load_updated_persons_timestr (IFaceLogIf *iface, GArray ** _return, const gchar * timestamp, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_offline (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_online (IFaceLogIf *iface, Token ** _return, const DeviceBean * device, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_register_device (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * newDevice, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_release_person_token (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_release_root_token (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_release_user_token (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_replace_feature (IFaceLogIf *iface, const gint32 personId, const gchar * featureMd5, const gboolean deleteOldFeatureImage, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_root_group_of_device (IFaceLogIf *iface, gint32* _return, const gint32 deviceId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_root_group_of_person (IFaceLogIf *iface, gint32* _return, const gint32 personId, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_run_cmd (IFaceLogIf *iface, gint32* _return, const GArray * target, const gboolean group, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_run_task (IFaceLogIf *iface, gboolean* _return, const gchar * taskQueue, const gchar * cmdpath, const gchar * jsonArgs, const gchar * ackChannel, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_device (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_device_group (IFaceLogIf *iface, DeviceGroupBean ** _return, const DeviceGroupBean * deviceGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_permit (IFaceLogIf *iface, PermitBean ** _return, const PermitBean * permitBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_permit_with_schedule (IFaceLogIf *iface, PermitBean ** _return, const gint32 deviceGroupId, const gint32 personGroupId, const gchar * schedule, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_person (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_person_full (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GByteArray * featureImage, const FaceBean * featureFaceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_person_group (IFaceLogIf *iface, PersonGroupBean ** _return, const PersonGroupBean * personGroupBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_person_with_photo (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_person_with_photo_and_feature (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const FeatureBean * featureBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_person_with_photo_and_feature_multi_faces (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * faceBeans, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_person_with_photo_and_feature_multi_image (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const GByteArray * idPhoto, const GByteArray * feature, const gchar * featureVersion, const GPtrArray * photos, const GPtrArray * faces, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_person_with_photo_and_feature_saved (IFaceLogIf *iface, PersonBean ** _return, const PersonBean * personBean, const gchar * idPhotoMd5, const gchar * featureMd5, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_persons (IFaceLogIf *iface, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_persons_with_photo (IFaceLogIf *iface, gint32* _return, const GPtrArray * photos, const GPtrArray * persons, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_save_service_config (IFaceLogIf *iface, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_sdk_task_queue_of (IFaceLogIf *iface, gchar ** _return, const gchar * task, const gchar * sdkVersion, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_set_person_expiry_date (IFaceLogIf *iface, const gint32 personId, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_set_person_expiry_date_list (IFaceLogIf *iface, const GArray * personIdList, const gint64 expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_set_person_expiry_date_time_str (IFaceLogIf *iface, const gint32 personId, const gchar * expiryDate, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_set_properties (IFaceLogIf *iface, const GHashTable * config, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_set_property (IFaceLogIf *iface, const gchar * key, const gchar * value, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_task_queue_of (IFaceLogIf *iface, gchar ** _return, const gchar * task, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_unbind_border (IFaceLogIf *iface, const gint32 personGroupId, const gint32 deviceGroupId, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_unregister_device (IFaceLogIf *iface, const Token * token, ServiceSecurityException ** ex1, ServiceRuntimeException ** ex2, GError **error);
gboolean i_face_log_handler_update_device (IFaceLogIf *iface, DeviceBean ** _return, const DeviceBean * deviceBean, const Token * token, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_version (IFaceLogIf *iface, gchar ** _return, ServiceRuntimeException ** ex1, GError **error);
gboolean i_face_log_handler_version_info (IFaceLogIf *iface, GHashTable ** _return, ServiceRuntimeException ** ex1, GError **error);

/* IFaceLog processor */
struct _IFaceLogProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  IFaceLogHandler *handler;
  GHashTable *process_map;
};
typedef struct _IFaceLogProcessor IFaceLogProcessor;

struct _IFaceLogProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _IFaceLogProcessorClass IFaceLogProcessorClass;

GType i_face_log_processor_get_type (void);
#define TYPE_I_FACE_LOG_PROCESSOR (i_face_log_processor_get_type())
#define I_FACE_LOG_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_FACE_LOG_PROCESSOR, IFaceLogProcessor))
#define IS_I_FACE_LOG_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_FACE_LOG_PROCESSOR))
#define I_FACE_LOG_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_FACE_LOG_PROCESSOR, IFaceLogProcessorClass))
#define IS_I_FACE_LOG_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_FACE_LOG_PROCESSOR))
#define I_FACE_LOG_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_FACE_LOG_PROCESSOR, IFaceLogProcessorClass))

#endif /* I_FACE_LOG_H */
