//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./IFaceLog_types');
//HELPER FUNCTIONS AND STRUCTURES

var IFaceLog_addFeature_args = function(args) {
  this.feature = null;
  this.featureVersion = null;
  this.personId = null;
  this.faecBeans = null;
  this.removed = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.faecBeans !== undefined && args.faecBeans !== null) {
      this.faecBeans = Thrift.copyList(args.faecBeans, [ttypes.FaceBean]);
    }
    if (args.removed !== undefined && args.removed !== null) {
      this.removed = args.removed;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addFeature_args.prototype = {};
IFaceLog_addFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.faecBeans = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.FaceBean();
          elem6.read(input);
          this.faecBeans.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.removed = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeature_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 2);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 3);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.faecBeans !== null && this.faecBeans !== undefined) {
    output.writeFieldBegin('faecBeans', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.faecBeans.length);
    for (var iter7 in this.faecBeans)
    {
      if (this.faecBeans.hasOwnProperty(iter7))
      {
        iter7 = this.faecBeans[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.removed !== null && this.removed !== undefined) {
    output.writeFieldBegin('removed', Thrift.Type.STRING, 5);
    output.writeString(this.removed);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeature_result.prototype = {};
IFaceLog_addFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureMulti_args = function(args) {
  this.feature = null;
  this.featureVersion = null;
  this.personId = null;
  this.photos = null;
  this.faces = null;
  this.removed = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.photos !== undefined && args.photos !== null) {
      this.photos = Thrift.copyList(args.photos, [null]);
    }
    if (args.faces !== undefined && args.faces !== null) {
      this.faces = Thrift.copyList(args.faces, [ttypes.FaceBean]);
    }
    if (args.removed !== undefined && args.removed !== null) {
      this.removed = args.removed;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addFeatureMulti_args.prototype = {};
IFaceLog_addFeatureMulti_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.photos = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readBinary();
          this.photos.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.faces = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new ttypes.FaceBean();
          elem21.read(input);
          this.faces.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.removed = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureMulti_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureMulti_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 2);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 3);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.photos !== null && this.photos !== undefined) {
    output.writeFieldBegin('photos', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.photos.length);
    for (var iter22 in this.photos)
    {
      if (this.photos.hasOwnProperty(iter22))
      {
        iter22 = this.photos[iter22];
        output.writeBinary(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.faces !== null && this.faces !== undefined) {
    output.writeFieldBegin('faces', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.faces.length);
    for (var iter23 in this.faces)
    {
      if (this.faces.hasOwnProperty(iter23))
      {
        iter23 = this.faces[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.removed !== null && this.removed !== undefined) {
    output.writeFieldBegin('removed', Thrift.Type.STRING, 6);
    output.writeString(this.removed);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 7);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureMulti_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeatureMulti_result.prototype = {};
IFaceLog_addFeatureMulti_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureMulti_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureMulti_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureWithImage_args = function(args) {
  this.feature = null;
  this.featureVersion = null;
  this.personId = null;
  this.asIdPhotoIfAbsent = null;
  this.featurePhoto = null;
  this.faceBean = null;
  this.removed = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.asIdPhotoIfAbsent !== undefined && args.asIdPhotoIfAbsent !== null) {
      this.asIdPhotoIfAbsent = args.asIdPhotoIfAbsent;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field asIdPhotoIfAbsent is unset!');
    }
    if (args.featurePhoto !== undefined && args.featurePhoto !== null) {
      this.featurePhoto = args.featurePhoto;
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new ttypes.FaceBean(args.faceBean);
    }
    if (args.removed !== undefined && args.removed !== null) {
      this.removed = args.removed;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addFeatureWithImage_args.prototype = {};
IFaceLog_addFeatureWithImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.asIdPhotoIfAbsent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.featurePhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new ttypes.FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.removed = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureWithImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureWithImage_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 2);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 3);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.asIdPhotoIfAbsent !== null && this.asIdPhotoIfAbsent !== undefined) {
    output.writeFieldBegin('asIdPhotoIfAbsent', Thrift.Type.BOOL, 4);
    output.writeBool(this.asIdPhotoIfAbsent);
    output.writeFieldEnd();
  }
  if (this.featurePhoto !== null && this.featurePhoto !== undefined) {
    output.writeFieldBegin('featurePhoto', Thrift.Type.STRING, 5);
    output.writeBinary(this.featurePhoto);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 6);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.removed !== null && this.removed !== undefined) {
    output.writeFieldBegin('removed', Thrift.Type.STRING, 7);
    output.writeString(this.removed);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 8);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureWithImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeatureWithImage_result.prototype = {};
IFaceLog_addFeatureWithImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureWithImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureWithImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addImage_args = function(args) {
  this.imageData = null;
  this.deviceId = null;
  this.faceBean = null;
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.imageData !== undefined && args.imageData !== null) {
      this.imageData = args.imageData;
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new ttypes.FaceBean(args.faceBean);
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addImage_args.prototype = {};
IFaceLog_addImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new ttypes.FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addImage_args');
  if (this.imageData !== null && this.imageData !== undefined) {
    output.writeFieldBegin('imageData', Thrift.Type.STRING, 1);
    output.writeBinary(this.imageData);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 3);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 4);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ImageBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addImage_result.prototype = {};
IFaceLog_addImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ImageBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLog_args = function(args) {
  this.logBean = null;
  this.token = null;
  if (args) {
    if (args.logBean !== undefined && args.logBean !== null) {
      this.logBean = new ttypes.LogBean(args.logBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLog_args.prototype = {};
IFaceLog_addLog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.logBean = new ttypes.LogBean();
        this.logBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLog_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLog_args');
  if (this.logBean !== null && this.logBean !== undefined) {
    output.writeFieldBegin('logBean', Thrift.Type.STRUCT, 1);
    this.logBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLog_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLog_result.prototype = {};
IFaceLog_addLog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLog_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLog_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogFull_args = function(args) {
  this.logBean = null;
  this.faceBean = null;
  this.featureImage = null;
  this.token = null;
  if (args) {
    if (args.logBean !== undefined && args.logBean !== null) {
      this.logBean = new ttypes.LogBean(args.logBean);
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new ttypes.FaceBean(args.faceBean);
    }
    if (args.featureImage !== undefined && args.featureImage !== null) {
      this.featureImage = args.featureImage;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLogFull_args.prototype = {};
IFaceLog_addLogFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.logBean = new ttypes.LogBean();
        this.logBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new ttypes.FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.featureImage = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogFull_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogFull_args');
  if (this.logBean !== null && this.logBean !== undefined) {
    output.writeFieldBegin('logBean', Thrift.Type.STRUCT, 1);
    this.logBean.write(output);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 2);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.featureImage !== null && this.featureImage !== undefined) {
    output.writeFieldBegin('featureImage', Thrift.Type.STRING, 3);
    output.writeBinary(this.featureImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogFull_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLogFull_result.prototype = {};
IFaceLog_addLogFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogFull_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogFull_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogs_args = function(args) {
  this.beans = null;
  this.token = null;
  if (args) {
    if (args.beans !== undefined && args.beans !== null) {
      this.beans = Thrift.copyList(args.beans, [ttypes.LogBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLogs_args.prototype = {};
IFaceLog_addLogs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.beans = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.LogBean();
          elem30.read(input);
          this.beans.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogs_args');
  if (this.beans !== null && this.beans !== undefined) {
    output.writeFieldBegin('beans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.beans.length);
    for (var iter31 in this.beans)
    {
      if (this.beans.hasOwnProperty(iter31))
      {
        iter31 = this.beans[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogs_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLogs_result.prototype = {};
IFaceLog_addLogs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogs_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogsFull_args = function(args) {
  this.logBeans = null;
  this.faceBeans = null;
  this.featureImages = null;
  this.token = null;
  if (args) {
    if (args.logBeans !== undefined && args.logBeans !== null) {
      this.logBeans = Thrift.copyList(args.logBeans, [ttypes.LogBean]);
    }
    if (args.faceBeans !== undefined && args.faceBeans !== null) {
      this.faceBeans = Thrift.copyList(args.faceBeans, [ttypes.FaceBean]);
    }
    if (args.featureImages !== undefined && args.featureImages !== null) {
      this.featureImages = Thrift.copyList(args.featureImages, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLogsFull_args.prototype = {};
IFaceLog_addLogsFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.logBeans = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.LogBean();
          elem38.read(input);
          this.logBeans.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.faceBeans = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.FaceBean();
          elem45.read(input);
          this.faceBeans.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.featureImages = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = input.readBinary();
          this.featureImages.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogsFull_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogsFull_args');
  if (this.logBeans !== null && this.logBeans !== undefined) {
    output.writeFieldBegin('logBeans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.logBeans.length);
    for (var iter53 in this.logBeans)
    {
      if (this.logBeans.hasOwnProperty(iter53))
      {
        iter53 = this.logBeans[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.faceBeans !== null && this.faceBeans !== undefined) {
    output.writeFieldBegin('faceBeans', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.faceBeans.length);
    for (var iter54 in this.faceBeans)
    {
      if (this.faceBeans.hasOwnProperty(iter54))
      {
        iter54 = this.faceBeans[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.featureImages !== null && this.featureImages !== undefined) {
    output.writeFieldBegin('featureImages', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.featureImages.length);
    for (var iter55 in this.featureImages)
    {
      if (this.featureImages.hasOwnProperty(iter55))
      {
        iter55 = this.featureImages[iter55];
        output.writeBinary(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogsFull_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLogsFull_result.prototype = {};
IFaceLog_addLogsFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogsFull_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogsFull_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannel_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_applyAckChannel_args.prototype = {};
IFaceLog_applyAckChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannel_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannel_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannel_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyAckChannel_result.prototype = {};
IFaceLog_applyAckChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannel_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannelWithDuration_args = function(args) {
  this.duration = null;
  this.token = null;
  if (args) {
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field duration is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_applyAckChannelWithDuration_args.prototype = {};
IFaceLog_applyAckChannelWithDuration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.duration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannelWithDuration_args');
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I32, 1);
    output.writeI32(this.duration);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannelWithDuration_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyAckChannelWithDuration_result.prototype = {};
IFaceLog_applyAckChannelWithDuration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannelWithDuration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyCmdSn_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_applyCmdSn_args.prototype = {};
IFaceLog_applyCmdSn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyCmdSn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyCmdSn_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyCmdSn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyCmdSn_result.prototype = {};
IFaceLog_applyCmdSn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyCmdSn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyCmdSn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyPersonToken_args = function(args) {
  this.personId = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyPersonToken_args.prototype = {};
IFaceLog_applyPersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyPersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyPersonToken_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyPersonToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyPersonToken_result.prototype = {};
IFaceLog_applyPersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyPersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyPersonToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyRootToken_args = function(args) {
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyRootToken_args.prototype = {};
IFaceLog_applyRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyRootToken_args');
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 1);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 2);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyRootToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyRootToken_result.prototype = {};
IFaceLog_applyRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyRootToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyUserToken_args = function(args) {
  this.userid = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userid is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyUserToken_args.prototype = {};
IFaceLog_applyUserToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyUserToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyUserToken_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.I32, 1);
    output.writeI32(this.userid);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyUserToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyUserToken_result.prototype = {};
IFaceLog_applyUserToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyUserToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyUserToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_bindBorder_args = function(args) {
  this.personGroupId = null;
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_bindBorder_args.prototype = {};
IFaceLog_bindBorder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_bindBorder_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_bindBorder_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_bindBorder_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_bindBorder_result.prototype = {};
IFaceLog_bindBorder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_bindBorder_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_bindBorder_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_childListForDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_childListForDeviceGroup_args.prototype = {};
IFaceLog_childListForDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_childListForDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_childListForDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_childListForDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_childListForDeviceGroup_result.prototype = {};
IFaceLog_childListForDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI32();
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_childListForDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_childListForDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_childListForPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_childListForPersonGroup_args.prototype = {};
IFaceLog_childListForPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_childListForPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_childListForPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_childListForPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_childListForPersonGroup_result.prototype = {};
IFaceLog_childListForPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readI32();
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_childListForPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_childListForPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        output.writeI32(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countDeviceByWhere_args.prototype = {};
IFaceLog_countDeviceByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countDeviceByWhere_result.prototype = {};
IFaceLog_countDeviceByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceGroupByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countDeviceGroupByWhere_args.prototype = {};
IFaceLog_countDeviceGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countDeviceGroupByWhere_result.prototype = {};
IFaceLog_countDeviceGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countLogByWhere_args.prototype = {};
IFaceLog_countLogByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogByWhere_result.prototype = {};
IFaceLog_countLogByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTime_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_countLogLightByVerifyTime_args.prototype = {};
IFaceLog_countLogLightByVerifyTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByVerifyTime_result.prototype = {};
IFaceLog_countLogLightByVerifyTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTimeTimestr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_countLogLightByVerifyTimeTimestr_args.prototype = {};
IFaceLog_countLogLightByVerifyTimeTimestr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTimeTimestr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTimeTimestr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTimeTimestr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByVerifyTimeTimestr_result.prototype = {};
IFaceLog_countLogLightByVerifyTimeTimestr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTimeTimestr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTimeTimestr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countLogLightByWhere_args.prototype = {};
IFaceLog_countLogLightByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByWhere_result.prototype = {};
IFaceLog_countLogLightByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countPersonByWhere_args.prototype = {};
IFaceLog_countPersonByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonByWhere_result.prototype = {};
IFaceLog_countPersonByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonGroupByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countPersonGroupByWhere_args.prototype = {};
IFaceLog_countPersonGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonGroupByWhere_result.prototype = {};
IFaceLog_countPersonGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonLog_args = function(args) {
  this.personId = null;
  this.startDate = null;
  this.endDate = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.startDate !== undefined && args.startDate !== null) {
      this.startDate = args.startDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
  }
};
IFaceLog_countPersonLog_args.prototype = {};
IFaceLog_countPersonLog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonLog_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonLog_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.I64, 2);
    output.writeI64(this.startDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 3);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonLog_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonLog_result.prototype = {};
IFaceLog_countPersonLog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size72 = 0;
        var _rtmp376;
        this.success = {};
        var _ktype73 = 0;
        var _vtype74 = 0;
        _rtmp376 = input.readMapBegin();
        _ktype73 = _rtmp376.ktype;
        _vtype74 = _rtmp376.vtype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var key78 = null;
          var val79 = null;
          key78 = input.readString();
          val79 = input.readI32();
          this.success[key78] = val79;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonLog_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonLog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter80 in this.success)
    {
      if (this.success.hasOwnProperty(kiter80))
      {
        var viter81 = this.success[kiter80];
        output.writeString(kiter80);
        output.writeI32(viter81);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonLogTimeStr_args = function(args) {
  this.personId = null;
  this.startDate = null;
  this.endDate = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.startDate !== undefined && args.startDate !== null) {
      this.startDate = args.startDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
  }
};
IFaceLog_countPersonLogTimeStr_args.prototype = {};
IFaceLog_countPersonLogTimeStr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonLogTimeStr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonLogTimeStr_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.STRING, 2);
    output.writeString(this.startDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.STRING, 3);
    output.writeString(this.endDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonLogTimeStr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonLogTimeStr_result.prototype = {};
IFaceLog_countPersonLogTimeStr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size82 = 0;
        var _rtmp386;
        this.success = {};
        var _ktype83 = 0;
        var _vtype84 = 0;
        _rtmp386 = input.readMapBegin();
        _ktype83 = _rtmp386.ktype;
        _vtype84 = _rtmp386.vtype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var key88 = null;
          var val89 = null;
          key88 = input.readString();
          val89 = input.readI32();
          this.success[key88] = val89;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonLogTimeStr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonLogTimeStr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter90 in this.success)
    {
      if (this.success.hasOwnProperty(kiter90))
      {
        var viter91 = this.success[kiter90];
        output.writeString(kiter90);
        output.writeI32(viter91);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteAllFeaturesByPersonId_args = function(args) {
  this.personId = null;
  this.deleteImage = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.deleteImage !== undefined && args.deleteImage !== null) {
      this.deleteImage = args.deleteImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteAllFeaturesByPersonId_args.prototype = {};
IFaceLog_deleteAllFeaturesByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteAllFeaturesByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.deleteImage !== null && this.deleteImage !== undefined) {
    output.writeFieldBegin('deleteImage', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteAllFeaturesByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteAllFeaturesByPersonId_result.prototype = {};
IFaceLog_deleteAllFeaturesByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteAllFeaturesByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDevice_args = function(args) {
  this.id = null;
  this.token = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteDevice_args.prototype = {};
IFaceLog_deleteDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDevice_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteDevice_result.prototype = {};
IFaceLog_deleteDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDeviceByMac_args = function(args) {
  this.mac = null;
  this.token = null;
  if (args) {
    if (args.mac !== undefined && args.mac !== null) {
      this.mac = args.mac;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteDeviceByMac_args.prototype = {};
IFaceLog_deleteDeviceByMac_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceByMac_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceByMac_args');
  if (this.mac !== null && this.mac !== undefined) {
    output.writeFieldBegin('mac', Thrift.Type.STRING, 1);
    output.writeString(this.mac);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDeviceByMac_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteDeviceByMac_result.prototype = {};
IFaceLog_deleteDeviceByMac_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceByMac_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceByMac_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteDeviceGroup_args.prototype = {};
IFaceLog_deleteDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteDeviceGroup_result.prototype = {};
IFaceLog_deleteDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteFeature_args = function(args) {
  this.featureMd5 = null;
  this.deleteImage = null;
  this.token = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.deleteImage !== undefined && args.deleteImage !== null) {
      this.deleteImage = args.deleteImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteFeature_args.prototype = {};
IFaceLog_deleteFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.deleteImage !== null && this.deleteImage !== undefined) {
    output.writeFieldBegin('deleteImage', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteFeature_result.prototype = {};
IFaceLog_deleteFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.success = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = input.readString();
          this.success.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter99 in this.success)
    {
      if (this.success.hasOwnProperty(iter99))
      {
        iter99 = this.success[iter99];
        output.writeString(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteGroupPermitOnDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteGroupPermitOnDeviceGroup_args.prototype = {};
IFaceLog_deleteGroupPermitOnDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteGroupPermitOnDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteGroupPermitOnDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteGroupPermitOnDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteGroupPermitOnDeviceGroup_result.prototype = {};
IFaceLog_deleteGroupPermitOnDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteGroupPermitOnDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteGroupPermitOnDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteImage_args = function(args) {
  this.imageMd5 = null;
  this.token = null;
  if (args) {
    if (args.imageMd5 !== undefined && args.imageMd5 !== null) {
      this.imageMd5 = args.imageMd5;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteImage_args.prototype = {};
IFaceLog_deleteImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteImage_args');
  if (this.imageMd5 !== null && this.imageMd5 !== undefined) {
    output.writeFieldBegin('imageMd5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMd5);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteImage_result.prototype = {};
IFaceLog_deleteImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePermitById_args = function(args) {
  this.deviceGroupId = null;
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePermitById_args.prototype = {};
IFaceLog_deletePermitById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePermitById_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePermitById_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePermitById_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePermitById_result.prototype = {};
IFaceLog_deletePermitById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePermitById_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePermitById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePerson_args = function(args) {
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePerson_args.prototype = {};
IFaceLog_deletePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePerson_result.prototype = {};
IFaceLog_deletePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonByPapersNum_args = function(args) {
  this.papersNum = null;
  this.token = null;
  if (args) {
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonByPapersNum_args.prototype = {};
IFaceLog_deletePersonByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonByPapersNum_args');
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 1);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonByPapersNum_result.prototype = {};
IFaceLog_deletePersonByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroup_args = function(args) {
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonGroup_args.prototype = {};
IFaceLog_deletePersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonGroup_result.prototype = {};
IFaceLog_deletePersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroupPermit_args = function(args) {
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonGroupPermit_args.prototype = {};
IFaceLog_deletePersonGroupPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroupPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroupPermit_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroupPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonGroupPermit_result.prototype = {};
IFaceLog_deletePersonGroupPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroupPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroupPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersons_args = function(args) {
  this.personIdList = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersons_args.prototype = {};
IFaceLog_deletePersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.personIdList = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = input.readI32();
          this.personIdList.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersons_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter107 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter107))
      {
        iter107 = this.personIdList[iter107];
        output.writeI32(iter107);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersons_result.prototype = {};
IFaceLog_deletePersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonsByPapersNum_args = function(args) {
  this.papersNumlist = null;
  this.token = null;
  if (args) {
    if (args.papersNumlist !== undefined && args.papersNumlist !== null) {
      this.papersNumlist = Thrift.copyList(args.papersNumlist, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonsByPapersNum_args.prototype = {};
IFaceLog_deletePersonsByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.papersNumlist = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = input.readString();
          this.papersNumlist.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonsByPapersNum_args');
  if (this.papersNumlist !== null && this.papersNumlist !== undefined) {
    output.writeFieldBegin('papersNumlist', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.papersNumlist.length);
    for (var iter115 in this.papersNumlist)
    {
      if (this.papersNumlist.hasOwnProperty(iter115))
      {
        iter115 = this.papersNumlist[iter115];
        output.writeString(iter115);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonsByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonsByPapersNum_result.prototype = {};
IFaceLog_deletePersonsByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonsByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePerson_args = function(args) {
  this.personId = null;
  this.moveToGroupId = null;
  this.deletePhoto = null;
  this.deleteFeature = null;
  this.deleteLog = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.moveToGroupId !== undefined && args.moveToGroupId !== null) {
      this.moveToGroupId = args.moveToGroupId;
    }
    if (args.deletePhoto !== undefined && args.deletePhoto !== null) {
      this.deletePhoto = args.deletePhoto;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deletePhoto is unset!');
    }
    if (args.deleteFeature !== undefined && args.deleteFeature !== null) {
      this.deleteFeature = args.deleteFeature;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteFeature is unset!');
    }
    if (args.deleteLog !== undefined && args.deleteLog !== null) {
      this.deleteLog = args.deleteLog;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteLog is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_disablePerson_args.prototype = {};
IFaceLog_disablePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.moveToGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deletePhoto = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteFeature = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteLog = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.moveToGroupId !== null && this.moveToGroupId !== undefined) {
    output.writeFieldBegin('moveToGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.moveToGroupId);
    output.writeFieldEnd();
  }
  if (this.deletePhoto !== null && this.deletePhoto !== undefined) {
    output.writeFieldBegin('deletePhoto', Thrift.Type.BOOL, 3);
    output.writeBool(this.deletePhoto);
    output.writeFieldEnd();
  }
  if (this.deleteFeature !== null && this.deleteFeature !== undefined) {
    output.writeFieldBegin('deleteFeature', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteFeature);
    output.writeFieldEnd();
  }
  if (this.deleteLog !== null && this.deleteLog !== undefined) {
    output.writeFieldBegin('deleteLog', Thrift.Type.BOOL, 5);
    output.writeBool(this.deleteLog);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePerson_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_disablePerson_result.prototype = {};
IFaceLog_disablePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePerson_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePersonList_args = function(args) {
  this.personIdList = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_disablePersonList_args.prototype = {};
IFaceLog_disablePersonList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.personIdList = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = input.readI32();
          this.personIdList.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePersonList_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePersonList_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter123 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter123))
      {
        iter123 = this.personIdList[iter123];
        output.writeI32(iter123);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePersonList_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_disablePersonList_result.prototype = {};
IFaceLog_disablePersonList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePersonList_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePersonList_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsDevice_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
IFaceLog_existsDevice_args.prototype = {};
IFaceLog_existsDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsDevice_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsDevice_result.prototype = {};
IFaceLog_existsDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsFeature_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_existsFeature_args.prototype = {};
IFaceLog_existsFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsFeature_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsFeature_result.prototype = {};
IFaceLog_existsFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsImage_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_existsImage_args.prototype = {};
IFaceLog_existsImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsImage_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsImage_result.prototype = {};
IFaceLog_existsImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsPerson_args = function(args) {
  this.persionId = null;
  if (args) {
    if (args.persionId !== undefined && args.persionId !== null) {
      this.persionId = args.persionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field persionId is unset!');
    }
  }
};
IFaceLog_existsPerson_args.prototype = {};
IFaceLog_existsPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.persionId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsPerson_args');
  if (this.persionId !== null && this.persionId !== undefined) {
    output.writeFieldBegin('persionId', Thrift.Type.I32, 1);
    output.writeI32(this.persionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsPerson_result.prototype = {};
IFaceLog_existsPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
  }
};
IFaceLog_getDevice_args.prototype = {};
IFaceLog_getDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevice_result.prototype = {};
IFaceLog_getDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceByMac_args = function(args) {
  this.mac = null;
  if (args) {
    if (args.mac !== undefined && args.mac !== null) {
      this.mac = args.mac;
    }
  }
};
IFaceLog_getDeviceByMac_args.prototype = {};
IFaceLog_getDeviceByMac_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceByMac_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceByMac_args');
  if (this.mac !== null && this.mac !== undefined) {
    output.writeFieldBegin('mac', Thrift.Type.STRING, 1);
    output.writeString(this.mac);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceByMac_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceByMac_result.prototype = {};
IFaceLog_getDeviceByMac_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceByMac_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceByMac_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getDeviceGroup_args.prototype = {};
IFaceLog_getDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroup_result.prototype = {};
IFaceLog_getDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroups_args = function(args) {
  this.groupIdList = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
  }
};
IFaceLog_getDeviceGroups_args.prototype = {};
IFaceLog_getDeviceGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.groupIdList = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = input.readI32();
          this.groupIdList.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroups_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.groupIdList.length);
    for (var iter131 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter131))
      {
        iter131 = this.groupIdList[iter131];
        output.writeI32(iter131);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroups_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceGroupBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroups_result.prototype = {};
IFaceLog_getDeviceGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.success = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.DeviceGroupBean();
          elem138.read(input);
          this.success.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroups_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter139 in this.success)
    {
      if (this.success.hasOwnProperty(iter139))
      {
        iter139 = this.success[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsBelongs_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
  }
};
IFaceLog_getDeviceGroupsBelongs_args.prototype = {};
IFaceLog_getDeviceGroupsBelongs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsBelongs_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsBelongs_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsBelongs_result.prototype = {};
IFaceLog_getDeviceGroupsBelongs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.success = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readI32();
          this.success.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsBelongs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter147 in this.success)
    {
      if (this.success.hasOwnProperty(iter147))
      {
        iter147 = this.success[iter147];
        output.writeI32(iter147);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermit_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getDeviceGroupsPermit_args.prototype = {};
IFaceLog_getDeviceGroupsPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermit_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsPermit_result.prototype = {};
IFaceLog_getDeviceGroupsPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.success = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = input.readI32();
          this.success.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter155 in this.success)
    {
      if (this.success.hasOwnProperty(iter155))
      {
        iter155 = this.success[iter155];
        output.writeI32(iter155);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermittedBy_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getDeviceGroupsPermittedBy_args.prototype = {};
IFaceLog_getDeviceGroupsPermittedBy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermittedBy_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermittedBy_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermittedBy_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsPermittedBy_result.prototype = {};
IFaceLog_getDeviceGroupsPermittedBy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.success = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = input.readI32();
          this.success.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermittedBy_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermittedBy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter163 in this.success)
    {
      if (this.success.hasOwnProperty(iter163))
      {
        iter163 = this.success[iter163];
        output.writeI32(iter163);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceIdOfFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getDeviceIdOfFeature_args.prototype = {};
IFaceLog_getDeviceIdOfFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceIdOfFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceIdOfFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceIdOfFeature_result.prototype = {};
IFaceLog_getDeviceIdOfFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceIdOfFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevices_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined && args.idList !== null) {
      this.idList = Thrift.copyList(args.idList, [null]);
    }
  }
};
IFaceLog_getDevices_args.prototype = {};
IFaceLog_getDevices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.idList = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = input.readI32();
          this.idList.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevices_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevices_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter171 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter171))
      {
        iter171 = this.idList[iter171];
        output.writeI32(iter171);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevices_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevices_result.prototype = {};
IFaceLog_getDevices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.success = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = new ttypes.DeviceBean();
          elem178.read(input);
          this.success.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevices_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter179 in this.success)
    {
      if (this.success.hasOwnProperty(iter179))
      {
        iter179 = this.success[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevicesOfGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getDevicesOfGroup_args.prototype = {};
IFaceLog_getDevicesOfGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevicesOfGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevicesOfGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevicesOfGroup_result.prototype = {};
IFaceLog_getDevicesOfGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.success = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          elem186 = input.readI32();
          this.success.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevicesOfGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter187 in this.success)
    {
      if (this.success.hasOwnProperty(iter187))
      {
        iter187 = this.success[iter187];
        output.writeI32(iter187);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFace_args = function(args) {
  this.faceId = null;
  if (args) {
    if (args.faceId !== undefined && args.faceId !== null) {
      this.faceId = args.faceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field faceId is unset!');
    }
  }
};
IFaceLog_getFace_args.prototype = {};
IFaceLog_getFace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.faceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFace_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFace_args');
  if (this.faceId !== null && this.faceId !== undefined) {
    output.writeFieldBegin('faceId', Thrift.Type.I32, 1);
    output.writeI32(this.faceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFace_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FaceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFace_result.prototype = {};
IFaceLog_getFace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FaceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFace_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFacesOfFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getFacesOfFeature_args.prototype = {};
IFaceLog_getFacesOfFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFacesOfFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFacesOfFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFacesOfFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FaceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFacesOfFeature_result.prototype = {};
IFaceLog_getFacesOfFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size188 = 0;
        var _rtmp3192;
        this.success = [];
        var _etype191 = 0;
        _rtmp3192 = input.readListBegin();
        _etype191 = _rtmp3192.etype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var elem194 = null;
          elem194 = new ttypes.FaceBean();
          elem194.read(input);
          this.success.push(elem194);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFacesOfFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFacesOfFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter195 in this.success)
    {
      if (this.success.hasOwnProperty(iter195))
      {
        iter195 = this.success[iter195];
        iter195.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFacesOfImage_args = function(args) {
  this.imageMd5 = null;
  if (args) {
    if (args.imageMd5 !== undefined && args.imageMd5 !== null) {
      this.imageMd5 = args.imageMd5;
    }
  }
};
IFaceLog_getFacesOfImage_args.prototype = {};
IFaceLog_getFacesOfImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFacesOfImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFacesOfImage_args');
  if (this.imageMd5 !== null && this.imageMd5 !== undefined) {
    output.writeFieldBegin('imageMd5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFacesOfImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FaceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFacesOfImage_result.prototype = {};
IFaceLog_getFacesOfImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.success = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new ttypes.FaceBean();
          elem202.read(input);
          this.success.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFacesOfImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFacesOfImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter203 in this.success)
    {
      if (this.success.hasOwnProperty(iter203))
      {
        iter203 = this.success[iter203];
        iter203.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeature_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_getFeature_args.prototype = {};
IFaceLog_getFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeature_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeature_result.prototype = {};
IFaceLog_getFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatureBytes_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_getFeatureBytes_args.prototype = {};
IFaceLog_getFeatureBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBytes_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBytes_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatureBytes_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatureBytes_result.prototype = {};
IFaceLog_getFeatureBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBytes_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBytes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatures_args = function(args) {
  this.md5List = null;
  if (args) {
    if (args.md5List !== undefined && args.md5List !== null) {
      this.md5List = Thrift.copyList(args.md5List, [null]);
    }
  }
};
IFaceLog_getFeatures_args.prototype = {};
IFaceLog_getFeatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.md5List = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          elem210 = input.readString();
          this.md5List.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatures_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatures_args');
  if (this.md5List !== null && this.md5List !== undefined) {
    output.writeFieldBegin('md5List', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.md5List.length);
    for (var iter211 in this.md5List)
    {
      if (this.md5List.hasOwnProperty(iter211))
      {
        iter211 = this.md5List[iter211];
        output.writeString(iter211);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatures_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FeatureBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatures_result.prototype = {};
IFaceLog_getFeatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size212 = 0;
        var _rtmp3216;
        this.success = [];
        var _etype215 = 0;
        _rtmp3216 = input.readListBegin();
        _etype215 = _rtmp3216.etype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          var elem218 = null;
          elem218 = new ttypes.FeatureBean();
          elem218.read(input);
          this.success.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatures_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter219 in this.success)
    {
      if (this.success.hasOwnProperty(iter219))
      {
        iter219 = this.success[iter219];
        iter219.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesByPersonIdAndSdkVersion_args = function(args) {
  this.personId = null;
  this.sdkVersion = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.sdkVersion !== undefined && args.sdkVersion !== null) {
      this.sdkVersion = args.sdkVersion;
    }
  }
};
IFaceLog_getFeaturesByPersonIdAndSdkVersion_args.prototype = {};
IFaceLog_getFeaturesByPersonIdAndSdkVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesByPersonIdAndSdkVersion_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesByPersonIdAndSdkVersion_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 2);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesByPersonIdAndSdkVersion_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesByPersonIdAndSdkVersion_result.prototype = {};
IFaceLog_getFeaturesByPersonIdAndSdkVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size220 = 0;
        var _rtmp3224;
        this.success = [];
        var _etype223 = 0;
        _rtmp3224 = input.readListBegin();
        _etype223 = _rtmp3224.etype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          var elem226 = null;
          elem226 = input.readString();
          this.success.push(elem226);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesByPersonIdAndSdkVersion_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesByPersonIdAndSdkVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter227 in this.success)
    {
      if (this.success.hasOwnProperty(iter227))
      {
        iter227 = this.success[iter227];
        output.writeString(iter227);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesOfImage_args = function(args) {
  this.imageMd5 = null;
  if (args) {
    if (args.imageMd5 !== undefined && args.imageMd5 !== null) {
      this.imageMd5 = args.imageMd5;
    }
  }
};
IFaceLog_getFeaturesOfImage_args.prototype = {};
IFaceLog_getFeaturesOfImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfImage_args');
  if (this.imageMd5 !== null && this.imageMd5 !== undefined) {
    output.writeFieldBegin('imageMd5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesOfImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesOfImage_result.prototype = {};
IFaceLog_getFeaturesOfImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size228 = 0;
        var _rtmp3232;
        this.success = [];
        var _etype231 = 0;
        _rtmp3232 = input.readListBegin();
        _etype231 = _rtmp3232.etype;
        _size228 = _rtmp3232.size;
        for (var _i233 = 0; _i233 < _size228; ++_i233)
        {
          var elem234 = null;
          elem234 = input.readString();
          this.success.push(elem234);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter235 in this.success)
    {
      if (this.success.hasOwnProperty(iter235))
      {
        iter235 = this.success[iter235];
        output.writeString(iter235);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesOfPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getFeaturesOfPerson_args.prototype = {};
IFaceLog_getFeaturesOfPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesOfPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesOfPerson_result.prototype = {};
IFaceLog_getFeaturesOfPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size236 = 0;
        var _rtmp3240;
        this.success = [];
        var _etype239 = 0;
        _rtmp3240 = input.readListBegin();
        _etype239 = _rtmp3240.etype;
        _size236 = _rtmp3240.size;
        for (var _i241 = 0; _i241 < _size236; ++_i241)
        {
          var elem242 = null;
          elem242 = input.readString();
          this.success.push(elem242);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter243 in this.success)
    {
      if (this.success.hasOwnProperty(iter243))
      {
        iter243 = this.success[iter243];
        output.writeString(iter243);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesPermittedOnDevice_args = function(args) {
  this.deviceId = null;
  this.ignoreSchedule = null;
  this.sdkVersion = null;
  this.excludeFeatureIds = null;
  this.timestamp = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.ignoreSchedule !== undefined && args.ignoreSchedule !== null) {
      this.ignoreSchedule = args.ignoreSchedule;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ignoreSchedule is unset!');
    }
    if (args.sdkVersion !== undefined && args.sdkVersion !== null) {
      this.sdkVersion = args.sdkVersion;
    }
    if (args.excludeFeatureIds !== undefined && args.excludeFeatureIds !== null) {
      this.excludeFeatureIds = Thrift.copyList(args.excludeFeatureIds, [null]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_getFeaturesPermittedOnDevice_args.prototype = {};
IFaceLog_getFeaturesPermittedOnDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreSchedule = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size244 = 0;
        var _rtmp3248;
        this.excludeFeatureIds = [];
        var _etype247 = 0;
        _rtmp3248 = input.readListBegin();
        _etype247 = _rtmp3248.etype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var elem250 = null;
          elem250 = input.readString();
          this.excludeFeatureIds.push(elem250);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesPermittedOnDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesPermittedOnDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.ignoreSchedule !== null && this.ignoreSchedule !== undefined) {
    output.writeFieldBegin('ignoreSchedule', Thrift.Type.BOOL, 2);
    output.writeBool(this.ignoreSchedule);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 3);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  if (this.excludeFeatureIds !== null && this.excludeFeatureIds !== undefined) {
    output.writeFieldBegin('excludeFeatureIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.excludeFeatureIds.length);
    for (var iter251 in this.excludeFeatureIds)
    {
      if (this.excludeFeatureIds.hasOwnProperty(iter251))
      {
        iter251 = this.excludeFeatureIds[iter251];
        output.writeString(iter251);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesPermittedOnDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesPermittedOnDevice_result.prototype = {};
IFaceLog_getFeaturesPermittedOnDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size252 = 0;
        var _rtmp3256;
        this.success = [];
        var _etype255 = 0;
        _rtmp3256 = input.readListBegin();
        _etype255 = _rtmp3256.etype;
        _size252 = _rtmp3256.size;
        for (var _i257 = 0; _i257 < _size252; ++_i257)
        {
          var elem258 = null;
          elem258 = input.readString();
          this.success.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesPermittedOnDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesPermittedOnDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter259 in this.success)
    {
      if (this.success.hasOwnProperty(iter259))
      {
        iter259 = this.success[iter259];
        output.writeString(iter259);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermit_args = function(args) {
  this.deviceId = null;
  this.personGroupId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getGroupPermit_args.prototype = {};
IFaceLog_getGroupPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermit_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermit_result.prototype = {};
IFaceLog_getGroupPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermitOnDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  this.personGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getGroupPermitOnDeviceGroup_args.prototype = {};
IFaceLog_getGroupPermitOnDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermitOnDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermitOnDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermitOnDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermitOnDeviceGroup_result.prototype = {};
IFaceLog_getGroupPermitOnDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermitOnDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermitOnDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermits_args = function(args) {
  this.deviceId = null;
  this.personGroupIdList = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personGroupIdList !== undefined && args.personGroupIdList !== null) {
      this.personGroupIdList = Thrift.copyList(args.personGroupIdList, [null]);
    }
  }
};
IFaceLog_getGroupPermits_args.prototype = {};
IFaceLog_getGroupPermits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size260 = 0;
        var _rtmp3264;
        this.personGroupIdList = [];
        var _etype263 = 0;
        _rtmp3264 = input.readListBegin();
        _etype263 = _rtmp3264.etype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var elem266 = null;
          elem266 = input.readI32();
          this.personGroupIdList.push(elem266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermits_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermits_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personGroupIdList !== null && this.personGroupIdList !== undefined) {
    output.writeFieldBegin('personGroupIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.personGroupIdList.length);
    for (var iter267 in this.personGroupIdList)
    {
      if (this.personGroupIdList.hasOwnProperty(iter267))
      {
        iter267 = this.personGroupIdList[iter267];
        output.writeI32(iter267);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermits_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermits_result.prototype = {};
IFaceLog_getGroupPermits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size268 = 0;
        var _rtmp3272;
        this.success = [];
        var _etype271 = 0;
        _rtmp3272 = input.readListBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = new ttypes.PermitBean();
          elem274.read(input);
          this.success.push(elem274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermits_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter275 in this.success)
    {
      if (this.success.hasOwnProperty(iter275))
      {
        iter275 = this.success[iter275];
        iter275.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImage_args = function(args) {
  this.imageMD5 = null;
  if (args) {
    if (args.imageMD5 !== undefined && args.imageMD5 !== null) {
      this.imageMD5 = args.imageMD5;
    }
  }
};
IFaceLog_getImage_args.prototype = {};
IFaceLog_getImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMD5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImage_args');
  if (this.imageMD5 !== null && this.imageMD5 !== undefined) {
    output.writeFieldBegin('imageMD5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMD5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ImageBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImage_result.prototype = {};
IFaceLog_getImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ImageBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImageBytes_args = function(args) {
  this.imageMD5 = null;
  if (args) {
    if (args.imageMD5 !== undefined && args.imageMD5 !== null) {
      this.imageMD5 = args.imageMD5;
    }
  }
};
IFaceLog_getImageBytes_args.prototype = {};
IFaceLog_getImageBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMD5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImageBytes_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImageBytes_args');
  if (this.imageMD5 !== null && this.imageMD5 !== undefined) {
    output.writeFieldBegin('imageMD5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMD5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImageBytes_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImageBytes_result.prototype = {};
IFaceLog_getImageBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImageBytes_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImageBytes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImagesAssociatedByFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getImagesAssociatedByFeature_args.prototype = {};
IFaceLog_getImagesAssociatedByFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImagesAssociatedByFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImagesAssociatedByFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImagesAssociatedByFeature_result.prototype = {};
IFaceLog_getImagesAssociatedByFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size276 = 0;
        var _rtmp3280;
        this.success = [];
        var _etype279 = 0;
        _rtmp3280 = input.readListBegin();
        _etype279 = _rtmp3280.etype;
        _size276 = _rtmp3280.size;
        for (var _i281 = 0; _i281 < _size276; ++_i281)
        {
          var elem282 = null;
          elem282 = input.readString();
          this.success.push(elem282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImagesAssociatedByFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter283 in this.success)
    {
      if (this.success.hasOwnProperty(iter283))
      {
        iter283 = this.success[iter283];
        output.writeString(iter283);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getLogBeansByPersonId_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getLogBeansByPersonId_args.prototype = {};
IFaceLog_getLogBeansByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getLogBeansByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getLogBeansByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getLogBeansByPersonId_result.prototype = {};
IFaceLog_getLogBeansByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size284 = 0;
        var _rtmp3288;
        this.success = [];
        var _etype287 = 0;
        _rtmp3288 = input.readListBegin();
        _etype287 = _rtmp3288.etype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          var elem290 = null;
          elem290 = new ttypes.LogBean();
          elem290.read(input);
          this.success.push(elem290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getLogBeansByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter291 in this.success)
    {
      if (this.success.hasOwnProperty(iter291))
      {
        iter291 = this.success[iter291];
        iter291.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPerson_args.prototype = {};
IFaceLog_getPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPerson_result.prototype = {};
IFaceLog_getPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonByMobilePhone_args = function(args) {
  this.mobilePhone = null;
  if (args) {
    if (args.mobilePhone !== undefined && args.mobilePhone !== null) {
      this.mobilePhone = args.mobilePhone;
    }
  }
};
IFaceLog_getPersonByMobilePhone_args.prototype = {};
IFaceLog_getPersonByMobilePhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mobilePhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByMobilePhone_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByMobilePhone_args');
  if (this.mobilePhone !== null && this.mobilePhone !== undefined) {
    output.writeFieldBegin('mobilePhone', Thrift.Type.STRING, 1);
    output.writeString(this.mobilePhone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonByMobilePhone_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonByMobilePhone_result.prototype = {};
IFaceLog_getPersonByMobilePhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByMobilePhone_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByMobilePhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonByPapersNum_args = function(args) {
  this.papersNum = null;
  if (args) {
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
  }
};
IFaceLog_getPersonByPapersNum_args.prototype = {};
IFaceLog_getPersonByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByPapersNum_args');
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 1);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonByPapersNum_result.prototype = {};
IFaceLog_getPersonByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getPersonGroup_args.prototype = {};
IFaceLog_getPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroup_result.prototype = {};
IFaceLog_getPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroups_args = function(args) {
  this.groupIdList = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
  }
};
IFaceLog_getPersonGroups_args.prototype = {};
IFaceLog_getPersonGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size292 = 0;
        var _rtmp3296;
        this.groupIdList = [];
        var _etype295 = 0;
        _rtmp3296 = input.readListBegin();
        _etype295 = _rtmp3296.etype;
        _size292 = _rtmp3296.size;
        for (var _i297 = 0; _i297 < _size292; ++_i297)
        {
          var elem298 = null;
          elem298 = input.readI32();
          this.groupIdList.push(elem298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroups_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.groupIdList.length);
    for (var iter299 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter299))
      {
        iter299 = this.groupIdList[iter299];
        output.writeI32(iter299);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroups_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonGroupBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroups_result.prototype = {};
IFaceLog_getPersonGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size300 = 0;
        var _rtmp3304;
        this.success = [];
        var _etype303 = 0;
        _rtmp3304 = input.readListBegin();
        _etype303 = _rtmp3304.etype;
        _size300 = _rtmp3304.size;
        for (var _i305 = 0; _i305 < _size300; ++_i305)
        {
          var elem306 = null;
          elem306 = new ttypes.PersonGroupBean();
          elem306.read(input);
          this.success.push(elem306);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroups_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter307 in this.success)
    {
      if (this.success.hasOwnProperty(iter307))
      {
        iter307 = this.success[iter307];
        iter307.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsBelongs_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPersonGroupsBelongs_args.prototype = {};
IFaceLog_getPersonGroupsBelongs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsBelongs_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsBelongs_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroupsBelongs_result.prototype = {};
IFaceLog_getPersonGroupsBelongs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size308 = 0;
        var _rtmp3312;
        this.success = [];
        var _etype311 = 0;
        _rtmp3312 = input.readListBegin();
        _etype311 = _rtmp3312.etype;
        _size308 = _rtmp3312.size;
        for (var _i313 = 0; _i313 < _size308; ++_i313)
        {
          var elem314 = null;
          elem314 = input.readI32();
          this.success.push(elem314);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsBelongs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter315 in this.success)
    {
      if (this.success.hasOwnProperty(iter315))
      {
        iter315 = this.success[iter315];
        output.writeI32(iter315);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsPermittedBy_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getPersonGroupsPermittedBy_args.prototype = {};
IFaceLog_getPersonGroupsPermittedBy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsPermittedBy_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsPermittedBy_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroupsPermittedBy_result.prototype = {};
IFaceLog_getPersonGroupsPermittedBy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size316 = 0;
        var _rtmp3320;
        this.success = [];
        var _etype319 = 0;
        _rtmp3320 = input.readListBegin();
        _etype319 = _rtmp3320.etype;
        _size316 = _rtmp3320.size;
        for (var _i321 = 0; _i321 < _size316; ++_i321)
        {
          var elem322 = null;
          elem322 = input.readI32();
          this.success.push(elem322);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsPermittedBy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter323 in this.success)
    {
      if (this.success.hasOwnProperty(iter323))
      {
        iter323 = this.success[iter323];
        output.writeI32(iter323);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermit_args = function(args) {
  this.deviceId = null;
  this.personId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPersonPermit_args.prototype = {};
IFaceLog_getPersonPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermit_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 2);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonPermit_result.prototype = {};
IFaceLog_getPersonPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermits_args = function(args) {
  this.deviceId = null;
  this.personIdList = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
  }
};
IFaceLog_getPersonPermits_args.prototype = {};
IFaceLog_getPersonPermits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size324 = 0;
        var _rtmp3328;
        this.personIdList = [];
        var _etype327 = 0;
        _rtmp3328 = input.readListBegin();
        _etype327 = _rtmp3328.etype;
        _size324 = _rtmp3328.size;
        for (var _i329 = 0; _i329 < _size324; ++_i329)
        {
          var elem330 = null;
          elem330 = input.readI32();
          this.personIdList.push(elem330);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermits_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermits_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter331 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter331))
      {
        iter331 = this.personIdList[iter331];
        output.writeI32(iter331);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermits_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonPermits_result.prototype = {};
IFaceLog_getPersonPermits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size332 = 0;
        var _rtmp3336;
        this.success = [];
        var _etype335 = 0;
        _rtmp3336 = input.readListBegin();
        _etype335 = _rtmp3336.etype;
        _size332 = _rtmp3336.size;
        for (var _i337 = 0; _i337 < _size332; ++_i337)
        {
          var elem338 = null;
          elem338 = new ttypes.PermitBean();
          elem338.read(input);
          this.success.push(elem338);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermits_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter339 in this.success)
    {
      if (this.success.hasOwnProperty(iter339))
      {
        iter339 = this.success[iter339];
        iter339.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersons_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined && args.idList !== null) {
      this.idList = Thrift.copyList(args.idList, [null]);
    }
  }
};
IFaceLog_getPersons_args.prototype = {};
IFaceLog_getPersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size340 = 0;
        var _rtmp3344;
        this.idList = [];
        var _etype343 = 0;
        _rtmp3344 = input.readListBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = input.readI32();
          this.idList.push(elem346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersons_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter347 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter347))
      {
        iter347 = this.idList[iter347];
        output.writeI32(iter347);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersons_result.prototype = {};
IFaceLog_getPersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size348 = 0;
        var _rtmp3352;
        this.success = [];
        var _etype351 = 0;
        _rtmp3352 = input.readListBegin();
        _etype351 = _rtmp3352.etype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var elem354 = null;
          elem354 = new ttypes.PersonBean();
          elem354.read(input);
          this.success.push(elem354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter355 in this.success)
    {
      if (this.success.hasOwnProperty(iter355))
      {
        iter355 = this.success[iter355];
        iter355.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonsOfGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getPersonsOfGroup_args.prototype = {};
IFaceLog_getPersonsOfGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsOfGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonsOfGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonsOfGroup_result.prototype = {};
IFaceLog_getPersonsOfGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size356 = 0;
        var _rtmp3360;
        this.success = [];
        var _etype359 = 0;
        _rtmp3360 = input.readListBegin();
        _etype359 = _rtmp3360.etype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var elem362 = null;
          elem362 = input.readI32();
          this.success.push(elem362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsOfGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter363 in this.success)
    {
      if (this.success.hasOwnProperty(iter363))
      {
        iter363 = this.success[iter363];
        output.writeI32(iter363);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonsPermittedOnDevice_args = function(args) {
  this.deviceId = null;
  this.ignoreSchedule = null;
  this.excludePersonIds = null;
  this.timestamp = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.ignoreSchedule !== undefined && args.ignoreSchedule !== null) {
      this.ignoreSchedule = args.ignoreSchedule;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ignoreSchedule is unset!');
    }
    if (args.excludePersonIds !== undefined && args.excludePersonIds !== null) {
      this.excludePersonIds = Thrift.copyList(args.excludePersonIds, [null]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_getPersonsPermittedOnDevice_args.prototype = {};
IFaceLog_getPersonsPermittedOnDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreSchedule = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size364 = 0;
        var _rtmp3368;
        this.excludePersonIds = [];
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = input.readI32();
          this.excludePersonIds.push(elem370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsPermittedOnDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsPermittedOnDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.ignoreSchedule !== null && this.ignoreSchedule !== undefined) {
    output.writeFieldBegin('ignoreSchedule', Thrift.Type.BOOL, 2);
    output.writeBool(this.ignoreSchedule);
    output.writeFieldEnd();
  }
  if (this.excludePersonIds !== null && this.excludePersonIds !== undefined) {
    output.writeFieldBegin('excludePersonIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.excludePersonIds.length);
    for (var iter371 in this.excludePersonIds)
    {
      if (this.excludePersonIds.hasOwnProperty(iter371))
      {
        iter371 = this.excludePersonIds[iter371];
        output.writeI32(iter371);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonsPermittedOnDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonsPermittedOnDevice_result.prototype = {};
IFaceLog_getPersonsPermittedOnDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size372 = 0;
        var _rtmp3376;
        this.success = [];
        var _etype375 = 0;
        _rtmp3376 = input.readListBegin();
        _etype375 = _rtmp3376.etype;
        _size372 = _rtmp3376.size;
        for (var _i377 = 0; _i377 < _size372; ++_i377)
        {
          var elem378 = null;
          elem378 = input.readI32();
          this.success.push(elem378);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsPermittedOnDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsPermittedOnDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter379 in this.success)
    {
      if (this.success.hasOwnProperty(iter379))
      {
        iter379 = this.success[iter379];
        output.writeI32(iter379);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getProperties_args = function(args) {
  this.prefix = null;
  this.token = null;
  if (args) {
    if (args.prefix !== undefined && args.prefix !== null) {
      this.prefix = args.prefix;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getProperties_args.prototype = {};
IFaceLog_getProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperties_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperties_args');
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 1);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getProperties_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getProperties_result.prototype = {};
IFaceLog_getProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size380 = 0;
        var _rtmp3384;
        this.success = {};
        var _ktype381 = 0;
        var _vtype382 = 0;
        _rtmp3384 = input.readMapBegin();
        _ktype381 = _rtmp3384.ktype;
        _vtype382 = _rtmp3384.vtype;
        _size380 = _rtmp3384.size;
        for (var _i385 = 0; _i385 < _size380; ++_i385)
        {
          var key386 = null;
          var val387 = null;
          key386 = input.readString();
          val387 = input.readString();
          this.success[key386] = val387;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperties_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperties_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter388 in this.success)
    {
      if (this.success.hasOwnProperty(kiter388))
      {
        var viter389 = this.success[kiter388];
        output.writeString(kiter388);
        output.writeString(viter389);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getProperty_args = function(args) {
  this.key = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getProperty_args.prototype = {};
IFaceLog_getProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperty_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperty_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getProperty_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getProperty_result.prototype = {};
IFaceLog_getProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperty_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getRedisParameters_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getRedisParameters_args.prototype = {};
IFaceLog_getRedisParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getRedisParameters_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getRedisParameters_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getRedisParameters_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getRedisParameters_result.prototype = {};
IFaceLog_getRedisParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size390 = 0;
        var _rtmp3394;
        this.success = {};
        var _ktype391 = 0;
        var _vtype392 = 0;
        _rtmp3394 = input.readMapBegin();
        _ktype391 = _rtmp3394.ktype;
        _vtype392 = _rtmp3394.vtype;
        _size390 = _rtmp3394.size;
        for (var _i395 = 0; _i395 < _size390; ++_i395)
        {
          var key396 = null;
          var val397 = null;
          key396 = input.readI32();
          val397 = input.readString();
          this.success[key396] = val397;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getRedisParameters_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getRedisParameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter398 in this.success)
    {
      if (this.success.hasOwnProperty(kiter398))
      {
        var viter399 = this.success[kiter398];
        output.writeI32(kiter398);
        output.writeString(viter399);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getServiceConfig_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getServiceConfig_args.prototype = {};
IFaceLog_getServiceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getServiceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getServiceConfig_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getServiceConfig_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getServiceConfig_result.prototype = {};
IFaceLog_getServiceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size400 = 0;
        var _rtmp3404;
        this.success = {};
        var _ktype401 = 0;
        var _vtype402 = 0;
        _rtmp3404 = input.readMapBegin();
        _ktype401 = _rtmp3404.ktype;
        _vtype402 = _rtmp3404.vtype;
        _size400 = _rtmp3404.size;
        for (var _i405 = 0; _i405 < _size400; ++_i405)
        {
          var key406 = null;
          var val407 = null;
          key406 = input.readString();
          val407 = input.readString();
          this.success[key406] = val407;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getServiceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getServiceConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter408 in this.success)
    {
      if (this.success.hasOwnProperty(kiter408))
      {
        var viter409 = this.success[kiter408];
        output.writeString(kiter408);
        output.writeString(viter409);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getSubDeviceGroup_args.prototype = {};
IFaceLog_getSubDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getSubDeviceGroup_result.prototype = {};
IFaceLog_getSubDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size410 = 0;
        var _rtmp3414;
        this.success = [];
        var _etype413 = 0;
        _rtmp3414 = input.readListBegin();
        _etype413 = _rtmp3414.etype;
        _size410 = _rtmp3414.size;
        for (var _i415 = 0; _i415 < _size410; ++_i415)
        {
          var elem416 = null;
          elem416 = input.readI32();
          this.success.push(elem416);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter417 in this.success)
    {
      if (this.success.hasOwnProperty(iter417))
      {
        iter417 = this.success[iter417];
        output.writeI32(iter417);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getSubPersonGroup_args.prototype = {};
IFaceLog_getSubPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getSubPersonGroup_result.prototype = {};
IFaceLog_getSubPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size418 = 0;
        var _rtmp3422;
        this.success = [];
        var _etype421 = 0;
        _rtmp3422 = input.readListBegin();
        _etype421 = _rtmp3422.etype;
        _size418 = _rtmp3422.size;
        for (var _i423 = 0; _i423 < _size418; ++_i423)
        {
          var elem424 = null;
          elem424 = input.readI32();
          this.success.push(elem424);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter425 in this.success)
    {
      if (this.success.hasOwnProperty(iter425))
      {
        iter425 = this.success[iter425];
        output.writeI32(iter425);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isDisable_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_isDisable_args.prototype = {};
IFaceLog_isDisable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isDisable_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isDisable_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isDisable_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isDisable_result.prototype = {};
IFaceLog_isDisable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isDisable_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isDisable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isLocal_args = function(args) {
};
IFaceLog_isLocal_args.prototype = {};
IFaceLog_isLocal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isLocal_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isLocal_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isLocal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isLocal_result.prototype = {};
IFaceLog_isLocal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isLocal_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isLocal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidAckChannel_args = function(args) {
  this.ackChannel = null;
  if (args) {
    if (args.ackChannel !== undefined && args.ackChannel !== null) {
      this.ackChannel = args.ackChannel;
    }
  }
};
IFaceLog_isValidAckChannel_args.prototype = {};
IFaceLog_isValidAckChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ackChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidAckChannel_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidAckChannel_args');
  if (this.ackChannel !== null && this.ackChannel !== undefined) {
    output.writeFieldBegin('ackChannel', Thrift.Type.STRING, 1);
    output.writeString(this.ackChannel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidAckChannel_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidAckChannel_result.prototype = {};
IFaceLog_isValidAckChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidAckChannel_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidAckChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidCmdSn_args = function(args) {
  this.cmdSn = null;
  if (args) {
    if (args.cmdSn !== undefined && args.cmdSn !== null) {
      this.cmdSn = args.cmdSn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cmdSn is unset!');
    }
  }
};
IFaceLog_isValidCmdSn_args.prototype = {};
IFaceLog_isValidCmdSn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cmdSn = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidCmdSn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidCmdSn_args');
  if (this.cmdSn !== null && this.cmdSn !== undefined) {
    output.writeFieldBegin('cmdSn', Thrift.Type.I32, 1);
    output.writeI32(this.cmdSn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidCmdSn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidCmdSn_result.prototype = {};
IFaceLog_isValidCmdSn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidCmdSn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidCmdSn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidDeviceToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidDeviceToken_args.prototype = {};
IFaceLog_isValidDeviceToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidDeviceToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidDeviceToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidDeviceToken_result.prototype = {};
IFaceLog_isValidDeviceToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidDeviceToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPassword_args = function(args) {
  this.userId = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_isValidPassword_args.prototype = {};
IFaceLog_isValidPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPassword_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPassword_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPassword_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidPassword_result.prototype = {};
IFaceLog_isValidPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPassword_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPersonToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidPersonToken_args.prototype = {};
IFaceLog_isValidPersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPersonToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPersonToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidPersonToken_result.prototype = {};
IFaceLog_isValidPersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPersonToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidRootToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidRootToken_args.prototype = {};
IFaceLog_isValidRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidRootToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidRootToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidRootToken_result.prototype = {};
IFaceLog_isValidRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidRootToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidToken_args.prototype = {};
IFaceLog_isValidToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidToken_result.prototype = {};
IFaceLog_isValidToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidUserToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidUserToken_args.prototype = {};
IFaceLog_isValidUserToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidUserToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidUserToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidUserToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidUserToken_result.prototype = {};
IFaceLog_isValidUserToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidUserToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidUserToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_listOfParentForDeviceGroup_args.prototype = {};
IFaceLog_listOfParentForDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_listOfParentForDeviceGroup_result.prototype = {};
IFaceLog_listOfParentForDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size426 = 0;
        var _rtmp3430;
        this.success = [];
        var _etype429 = 0;
        _rtmp3430 = input.readListBegin();
        _etype429 = _rtmp3430.etype;
        _size426 = _rtmp3430.size;
        for (var _i431 = 0; _i431 < _size426; ++_i431)
        {
          var elem432 = null;
          elem432 = input.readI32();
          this.success.push(elem432);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter433 in this.success)
    {
      if (this.success.hasOwnProperty(iter433))
      {
        iter433 = this.success[iter433];
        output.writeI32(iter433);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_listOfParentForPersonGroup_args.prototype = {};
IFaceLog_listOfParentForPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_listOfParentForPersonGroup_result.prototype = {};
IFaceLog_listOfParentForPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size434 = 0;
        var _rtmp3438;
        this.success = [];
        var _etype437 = 0;
        _rtmp3438 = input.readListBegin();
        _etype437 = _rtmp3438.etype;
        _size434 = _rtmp3438.size;
        for (var _i439 = 0; _i439 < _size434; ++_i439)
        {
          var elem440 = null;
          elem440 = input.readI32();
          this.success.push(elem440);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter441 in this.success)
    {
      if (this.success.hasOwnProperty(iter441))
      {
        iter441 = this.success[iter441];
        output.writeI32(iter441);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadAllPerson_args = function(args) {
};
IFaceLog_loadAllPerson_args.prototype = {};
IFaceLog_loadAllPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadAllPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadAllPerson_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadAllPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadAllPerson_result.prototype = {};
IFaceLog_loadAllPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size442 = 0;
        var _rtmp3446;
        this.success = [];
        var _etype445 = 0;
        _rtmp3446 = input.readListBegin();
        _etype445 = _rtmp3446.etype;
        _size442 = _rtmp3446.size;
        for (var _i447 = 0; _i447 < _size442; ++_i447)
        {
          var elem448 = null;
          elem448 = input.readI32();
          this.success.push(elem448);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadAllPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadAllPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter449 in this.success)
    {
      if (this.success.hasOwnProperty(iter449))
      {
        iter449 = this.success[iter449];
        output.writeI32(iter449);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadDeviceByWhere_args.prototype = {};
IFaceLog_loadDeviceByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceByWhere_result.prototype = {};
IFaceLog_loadDeviceByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size450 = 0;
        var _rtmp3454;
        this.success = [];
        var _etype453 = 0;
        _rtmp3454 = input.readListBegin();
        _etype453 = _rtmp3454.etype;
        _size450 = _rtmp3454.size;
        for (var _i455 = 0; _i455 < _size450; ++_i455)
        {
          var elem456 = null;
          elem456 = new ttypes.DeviceBean();
          elem456.read(input);
          this.success.push(elem456);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter457 in this.success)
    {
      if (this.success.hasOwnProperty(iter457))
      {
        iter457 = this.success[iter457];
        iter457.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadDeviceGroupByWhere_args.prototype = {};
IFaceLog_loadDeviceGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceGroupByWhere_result.prototype = {};
IFaceLog_loadDeviceGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size458 = 0;
        var _rtmp3462;
        this.success = [];
        var _etype461 = 0;
        _rtmp3462 = input.readListBegin();
        _etype461 = _rtmp3462.etype;
        _size458 = _rtmp3462.size;
        for (var _i463 = 0; _i463 < _size458; ++_i463)
        {
          var elem464 = null;
          elem464 = input.readI32();
          this.success.push(elem464);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter465 in this.success)
    {
      if (this.success.hasOwnProperty(iter465))
      {
        iter465 = this.success[iter465];
        output.writeI32(iter465);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDeviceGroupIdByWhere_args.prototype = {};
IFaceLog_loadDeviceGroupIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceGroupIdByWhere_result.prototype = {};
IFaceLog_loadDeviceGroupIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size466 = 0;
        var _rtmp3470;
        this.success = [];
        var _etype469 = 0;
        _rtmp3470 = input.readListBegin();
        _etype469 = _rtmp3470.etype;
        _size466 = _rtmp3470.size;
        for (var _i471 = 0; _i471 < _size466; ++_i471)
        {
          var elem472 = null;
          elem472 = input.readI32();
          this.success.push(elem472);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter473 in this.success)
    {
      if (this.success.hasOwnProperty(iter473))
      {
        iter473 = this.success[iter473];
        output.writeI32(iter473);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDeviceIdByWhere_args.prototype = {};
IFaceLog_loadDeviceIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceIdByWhere_result.prototype = {};
IFaceLog_loadDeviceIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size474 = 0;
        var _rtmp3478;
        this.success = [];
        var _etype477 = 0;
        _rtmp3478 = input.readListBegin();
        _etype477 = _rtmp3478.etype;
        _size474 = _rtmp3478.size;
        for (var _i479 = 0; _i479 < _size474; ++_i479)
        {
          var elem480 = null;
          elem480 = input.readI32();
          this.success.push(elem480);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter481 in this.success)
    {
      if (this.success.hasOwnProperty(iter481))
      {
        iter481 = this.success[iter481];
        output.writeI32(iter481);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDistinctIntegerColumn_args = function(args) {
  this.table = null;
  this.column = null;
  this.where = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDistinctIntegerColumn_args.prototype = {};
IFaceLog_loadDistinctIntegerColumn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDistinctIntegerColumn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDistinctIntegerColumn_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 2);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 3);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDistinctIntegerColumn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDistinctIntegerColumn_result.prototype = {};
IFaceLog_loadDistinctIntegerColumn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size482 = 0;
        var _rtmp3486;
        this.success = [];
        var _etype485 = 0;
        _rtmp3486 = input.readListBegin();
        _etype485 = _rtmp3486.etype;
        _size482 = _rtmp3486.size;
        for (var _i487 = 0; _i487 < _size482; ++_i487)
        {
          var elem488 = null;
          elem488 = input.readI32();
          this.success.push(elem488);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDistinctIntegerColumn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDistinctIntegerColumn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter489 in this.success)
    {
      if (this.success.hasOwnProperty(iter489))
      {
        iter489 = this.success[iter489];
        output.writeI32(iter489);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDistinctStringColumn_args = function(args) {
  this.table = null;
  this.column = null;
  this.where = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDistinctStringColumn_args.prototype = {};
IFaceLog_loadDistinctStringColumn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDistinctStringColumn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDistinctStringColumn_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 2);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 3);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDistinctStringColumn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDistinctStringColumn_result.prototype = {};
IFaceLog_loadDistinctStringColumn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size490 = 0;
        var _rtmp3494;
        this.success = [];
        var _etype493 = 0;
        _rtmp3494 = input.readListBegin();
        _etype493 = _rtmp3494.etype;
        _size490 = _rtmp3494.size;
        for (var _i495 = 0; _i495 < _size490; ++_i495)
        {
          var elem496 = null;
          elem496 = input.readString();
          this.success.push(elem496);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDistinctStringColumn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDistinctStringColumn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter497 in this.success)
    {
      if (this.success.hasOwnProperty(iter497))
      {
        iter497 = this.success[iter497];
        output.writeString(iter497);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdate_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdate_args.prototype = {};
IFaceLog_loadFeatureMd5ByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdate_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdate_result.prototype = {};
IFaceLog_loadFeatureMd5ByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size498 = 0;
        var _rtmp3502;
        this.success = [];
        var _etype501 = 0;
        _rtmp3502 = input.readListBegin();
        _etype501 = _rtmp3502.etype;
        _size498 = _rtmp3502.size;
        for (var _i503 = 0; _i503 < _size498; ++_i503)
        {
          var elem504 = null;
          elem504 = input.readString();
          this.success.push(elem504);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter505 in this.success)
    {
      if (this.success.hasOwnProperty(iter505))
      {
        iter505 = this.success[iter505];
        output.writeString(iter505);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdateTimeStr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdateTimeStr_args.prototype = {};
IFaceLog_loadFeatureMd5ByUpdateTimeStr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdateTimeStr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdateTimeStr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdateTimeStr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdateTimeStr_result.prototype = {};
IFaceLog_loadFeatureMd5ByUpdateTimeStr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size506 = 0;
        var _rtmp3510;
        this.success = [];
        var _etype509 = 0;
        _rtmp3510 = input.readListBegin();
        _etype509 = _rtmp3510.etype;
        _size506 = _rtmp3510.size;
        for (var _i511 = 0; _i511 < _size506; ++_i511)
        {
          var elem512 = null;
          elem512 = input.readString();
          this.success.push(elem512);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdateTimeStr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdateTimeStr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter513 in this.success)
    {
      if (this.success.hasOwnProperty(iter513))
      {
        iter513 = this.success[iter513];
        output.writeString(iter513);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogByWhere_args.prototype = {};
IFaceLog_loadLogByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogByWhere_result.prototype = {};
IFaceLog_loadLogByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size514 = 0;
        var _rtmp3518;
        this.success = [];
        var _etype517 = 0;
        _rtmp3518 = input.readListBegin();
        _etype517 = _rtmp3518.etype;
        _size514 = _rtmp3518.size;
        for (var _i519 = 0; _i519 < _size514; ++_i519)
        {
          var elem520 = null;
          elem520 = new ttypes.LogBean();
          elem520.read(input);
          this.success.push(elem520);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter521 in this.success)
    {
      if (this.success.hasOwnProperty(iter521))
      {
        iter521 = this.success[iter521];
        iter521.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTime_args = function(args) {
  this.timestamp = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByVerifyTime_args.prototype = {};
IFaceLog_loadLogLightByVerifyTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByVerifyTime_result.prototype = {};
IFaceLog_loadLogLightByVerifyTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size522 = 0;
        var _rtmp3526;
        this.success = [];
        var _etype525 = 0;
        _rtmp3526 = input.readListBegin();
        _etype525 = _rtmp3526.etype;
        _size522 = _rtmp3526.size;
        for (var _i527 = 0; _i527 < _size522; ++_i527)
        {
          var elem528 = null;
          elem528 = new ttypes.LogLightBean();
          elem528.read(input);
          this.success.push(elem528);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter529 in this.success)
    {
      if (this.success.hasOwnProperty(iter529))
      {
        iter529 = this.success[iter529];
        iter529.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTimeTimestr_args = function(args) {
  this.timestamp = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByVerifyTimeTimestr_args.prototype = {};
IFaceLog_loadLogLightByVerifyTimeTimestr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTimeTimestr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTimeTimestr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTimeTimestr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByVerifyTimeTimestr_result.prototype = {};
IFaceLog_loadLogLightByVerifyTimeTimestr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size530 = 0;
        var _rtmp3534;
        this.success = [];
        var _etype533 = 0;
        _rtmp3534 = input.readListBegin();
        _etype533 = _rtmp3534.etype;
        _size530 = _rtmp3534.size;
        for (var _i535 = 0; _i535 < _size530; ++_i535)
        {
          var elem536 = null;
          elem536 = new ttypes.LogLightBean();
          elem536.read(input);
          this.success.push(elem536);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTimeTimestr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTimeTimestr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter537 in this.success)
    {
      if (this.success.hasOwnProperty(iter537))
      {
        iter537 = this.success[iter537];
        iter537.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByWhere_args.prototype = {};
IFaceLog_loadLogLightByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByWhere_result.prototype = {};
IFaceLog_loadLogLightByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size538 = 0;
        var _rtmp3542;
        this.success = [];
        var _etype541 = 0;
        _rtmp3542 = input.readListBegin();
        _etype541 = _rtmp3542.etype;
        _size538 = _rtmp3542.size;
        for (var _i543 = 0; _i543 < _size538; ++_i543)
        {
          var elem544 = null;
          elem544 = new ttypes.LogLightBean();
          elem544.read(input);
          this.success.push(elem544);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter545 in this.success)
    {
      if (this.success.hasOwnProperty(iter545))
      {
        iter545 = this.success[iter545];
        iter545.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdate_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadPermitByUpdate_args.prototype = {};
IFaceLog_loadPermitByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdate_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPermitByUpdate_result.prototype = {};
IFaceLog_loadPermitByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size546 = 0;
        var _rtmp3550;
        this.success = [];
        var _etype549 = 0;
        _rtmp3550 = input.readListBegin();
        _etype549 = _rtmp3550.etype;
        _size546 = _rtmp3550.size;
        for (var _i551 = 0; _i551 < _size546; ++_i551)
        {
          var elem552 = null;
          elem552 = new ttypes.PermitBean();
          elem552.read(input);
          this.success.push(elem552);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter553 in this.success)
    {
      if (this.success.hasOwnProperty(iter553))
      {
        iter553 = this.success[iter553];
        iter553.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdateTimestr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_loadPermitByUpdateTimestr_args.prototype = {};
IFaceLog_loadPermitByUpdateTimestr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdateTimestr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdateTimestr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdateTimestr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPermitByUpdateTimestr_result.prototype = {};
IFaceLog_loadPermitByUpdateTimestr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size554 = 0;
        var _rtmp3558;
        this.success = [];
        var _etype557 = 0;
        _rtmp3558 = input.readListBegin();
        _etype557 = _rtmp3558.etype;
        _size554 = _rtmp3558.size;
        for (var _i559 = 0; _i559 < _size554; ++_i559)
        {
          var elem560 = null;
          elem560 = new ttypes.PermitBean();
          elem560.read(input);
          this.success.push(elem560);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdateTimestr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdateTimestr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter561 in this.success)
    {
      if (this.success.hasOwnProperty(iter561))
      {
        iter561 = this.success[iter561];
        iter561.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadPersonByWhere_args.prototype = {};
IFaceLog_loadPersonByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonByWhere_result.prototype = {};
IFaceLog_loadPersonByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size562 = 0;
        var _rtmp3566;
        this.success = [];
        var _etype565 = 0;
        _rtmp3566 = input.readListBegin();
        _etype565 = _rtmp3566.etype;
        _size562 = _rtmp3566.size;
        for (var _i567 = 0; _i567 < _size562; ++_i567)
        {
          var elem568 = null;
          elem568 = new ttypes.PersonBean();
          elem568.read(input);
          this.success.push(elem568);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter569 in this.success)
    {
      if (this.success.hasOwnProperty(iter569))
      {
        iter569 = this.success[iter569];
        iter569.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadPersonGroupByWhere_args.prototype = {};
IFaceLog_loadPersonGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonGroupByWhere_result.prototype = {};
IFaceLog_loadPersonGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size570 = 0;
        var _rtmp3574;
        this.success = [];
        var _etype573 = 0;
        _rtmp3574 = input.readListBegin();
        _etype573 = _rtmp3574.etype;
        _size570 = _rtmp3574.size;
        for (var _i575 = 0; _i575 < _size570; ++_i575)
        {
          var elem576 = null;
          elem576 = input.readI32();
          this.success.push(elem576);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter577 in this.success)
    {
      if (this.success.hasOwnProperty(iter577))
      {
        iter577 = this.success[iter577];
        output.writeI32(iter577);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadPersonGroupIdByWhere_args.prototype = {};
IFaceLog_loadPersonGroupIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonGroupIdByWhere_result.prototype = {};
IFaceLog_loadPersonGroupIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size578 = 0;
        var _rtmp3582;
        this.success = [];
        var _etype581 = 0;
        _rtmp3582 = input.readListBegin();
        _etype581 = _rtmp3582.etype;
        _size578 = _rtmp3582.size;
        for (var _i583 = 0; _i583 < _size578; ++_i583)
        {
          var elem584 = null;
          elem584 = input.readI32();
          this.success.push(elem584);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter585 in this.success)
    {
      if (this.success.hasOwnProperty(iter585))
      {
        iter585 = this.success[iter585];
        output.writeI32(iter585);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTime_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadPersonIdByUpdateTime_args.prototype = {};
IFaceLog_loadPersonIdByUpdateTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByUpdateTime_result.prototype = {};
IFaceLog_loadPersonIdByUpdateTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size586 = 0;
        var _rtmp3590;
        this.success = [];
        var _etype589 = 0;
        _rtmp3590 = input.readListBegin();
        _etype589 = _rtmp3590.etype;
        _size586 = _rtmp3590.size;
        for (var _i591 = 0; _i591 < _size586; ++_i591)
        {
          var elem592 = null;
          elem592 = input.readI32();
          this.success.push(elem592);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter593 in this.success)
    {
      if (this.success.hasOwnProperty(iter593))
      {
        iter593 = this.success[iter593];
        output.writeI32(iter593);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTimeTimeStr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_loadPersonIdByUpdateTimeTimeStr_args.prototype = {};
IFaceLog_loadPersonIdByUpdateTimeTimeStr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTimeTimeStr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTimeTimeStr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTimeTimeStr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByUpdateTimeTimeStr_result.prototype = {};
IFaceLog_loadPersonIdByUpdateTimeTimeStr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size594 = 0;
        var _rtmp3598;
        this.success = [];
        var _etype597 = 0;
        _rtmp3598 = input.readListBegin();
        _etype597 = _rtmp3598.etype;
        _size594 = _rtmp3598.size;
        for (var _i599 = 0; _i599 < _size594; ++_i599)
        {
          var elem600 = null;
          elem600 = input.readI32();
          this.success.push(elem600);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTimeTimeStr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTimeTimeStr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter601 in this.success)
    {
      if (this.success.hasOwnProperty(iter601))
      {
        iter601 = this.success[iter601];
        output.writeI32(iter601);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadPersonIdByWhere_args.prototype = {};
IFaceLog_loadPersonIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByWhere_result.prototype = {};
IFaceLog_loadPersonIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size602 = 0;
        var _rtmp3606;
        this.success = [];
        var _etype605 = 0;
        _rtmp3606 = input.readListBegin();
        _etype605 = _rtmp3606.etype;
        _size602 = _rtmp3606.size;
        for (var _i607 = 0; _i607 < _size602; ++_i607)
        {
          var elem608 = null;
          elem608 = input.readI32();
          this.success.push(elem608);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter609 in this.success)
    {
      if (this.success.hasOwnProperty(iter609))
      {
        iter609 = this.success[iter609];
        output.writeI32(iter609);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersons_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadUpdatedPersons_args.prototype = {};
IFaceLog_loadUpdatedPersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersons_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadUpdatedPersons_result.prototype = {};
IFaceLog_loadUpdatedPersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size610 = 0;
        var _rtmp3614;
        this.success = [];
        var _etype613 = 0;
        _rtmp3614 = input.readListBegin();
        _etype613 = _rtmp3614.etype;
        _size610 = _rtmp3614.size;
        for (var _i615 = 0; _i615 < _size610; ++_i615)
        {
          var elem616 = null;
          elem616 = input.readI32();
          this.success.push(elem616);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter617 in this.success)
    {
      if (this.success.hasOwnProperty(iter617))
      {
        iter617 = this.success[iter617];
        output.writeI32(iter617);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersonsTimestr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_loadUpdatedPersonsTimestr_args.prototype = {};
IFaceLog_loadUpdatedPersonsTimestr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersonsTimestr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersonsTimestr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersonsTimestr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadUpdatedPersonsTimestr_result.prototype = {};
IFaceLog_loadUpdatedPersonsTimestr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size618 = 0;
        var _rtmp3622;
        this.success = [];
        var _etype621 = 0;
        _rtmp3622 = input.readListBegin();
        _etype621 = _rtmp3622.etype;
        _size618 = _rtmp3622.size;
        for (var _i623 = 0; _i623 < _size618; ++_i623)
        {
          var elem624 = null;
          elem624 = input.readI32();
          this.success.push(elem624);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersonsTimestr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersonsTimestr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter625 in this.success)
    {
      if (this.success.hasOwnProperty(iter625))
      {
        iter625 = this.success[iter625];
        output.writeI32(iter625);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_offline_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_offline_args.prototype = {};
IFaceLog_offline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_offline_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_offline_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_offline_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_offline_result.prototype = {};
IFaceLog_offline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_offline_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_offline_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_online_args = function(args) {
  this.device = null;
  if (args) {
    if (args.device !== undefined && args.device !== null) {
      this.device = new ttypes.DeviceBean(args.device);
    }
  }
};
IFaceLog_online_args.prototype = {};
IFaceLog_online_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.device = new ttypes.DeviceBean();
        this.device.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_online_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_online_args');
  if (this.device !== null && this.device !== undefined) {
    output.writeFieldBegin('device', Thrift.Type.STRUCT, 1);
    this.device.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_online_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_online_result.prototype = {};
IFaceLog_online_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_online_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_online_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_registerDevice_args = function(args) {
  this.newDevice = null;
  if (args) {
    if (args.newDevice !== undefined && args.newDevice !== null) {
      this.newDevice = new ttypes.DeviceBean(args.newDevice);
    }
  }
};
IFaceLog_registerDevice_args.prototype = {};
IFaceLog_registerDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.newDevice = new ttypes.DeviceBean();
        this.newDevice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_registerDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_registerDevice_args');
  if (this.newDevice !== null && this.newDevice !== undefined) {
    output.writeFieldBegin('newDevice', Thrift.Type.STRUCT, 1);
    this.newDevice.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_registerDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_registerDevice_result.prototype = {};
IFaceLog_registerDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_registerDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_registerDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releasePersonToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_releasePersonToken_args.prototype = {};
IFaceLog_releasePersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releasePersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releasePersonToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releasePersonToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releasePersonToken_result.prototype = {};
IFaceLog_releasePersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releasePersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releasePersonToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseRootToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_releaseRootToken_args.prototype = {};
IFaceLog_releaseRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseRootToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseRootToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releaseRootToken_result.prototype = {};
IFaceLog_releaseRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseRootToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseUserToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_releaseUserToken_args.prototype = {};
IFaceLog_releaseUserToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseUserToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseUserToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseUserToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releaseUserToken_result.prototype = {};
IFaceLog_releaseUserToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseUserToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseUserToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_replaceFeature_args = function(args) {
  this.personId = null;
  this.featureMd5 = null;
  this.deleteOldFeatureImage = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.deleteOldFeatureImage !== undefined && args.deleteOldFeatureImage !== null) {
      this.deleteOldFeatureImage = args.deleteOldFeatureImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteOldFeatureImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_replaceFeature_args.prototype = {};
IFaceLog_replaceFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteOldFeatureImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_replaceFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_replaceFeature_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 2);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.deleteOldFeatureImage !== null && this.deleteOldFeatureImage !== undefined) {
    output.writeFieldBegin('deleteOldFeatureImage', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteOldFeatureImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_replaceFeature_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_replaceFeature_result.prototype = {};
IFaceLog_replaceFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_replaceFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_replaceFeature_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
  }
};
IFaceLog_rootGroupOfDevice_args.prototype = {};
IFaceLog_rootGroupOfDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_rootGroupOfDevice_result.prototype = {};
IFaceLog_rootGroupOfDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
  }
};
IFaceLog_rootGroupOfPerson_args.prototype = {};
IFaceLog_rootGroupOfPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_rootGroupOfPerson_result.prototype = {};
IFaceLog_rootGroupOfPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_runCmd_args = function(args) {
  this.target = null;
  this.group = null;
  this.cmdpath = null;
  this.jsonArgs = null;
  this.ackChannel = null;
  this.token = null;
  if (args) {
    if (args.target !== undefined && args.target !== null) {
      this.target = Thrift.copyList(args.target, [null]);
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field group is unset!');
    }
    if (args.cmdpath !== undefined && args.cmdpath !== null) {
      this.cmdpath = args.cmdpath;
    }
    if (args.jsonArgs !== undefined && args.jsonArgs !== null) {
      this.jsonArgs = args.jsonArgs;
    }
    if (args.ackChannel !== undefined && args.ackChannel !== null) {
      this.ackChannel = args.ackChannel;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_runCmd_args.prototype = {};
IFaceLog_runCmd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size626 = 0;
        var _rtmp3630;
        this.target = [];
        var _etype629 = 0;
        _rtmp3630 = input.readListBegin();
        _etype629 = _rtmp3630.etype;
        _size626 = _rtmp3630.size;
        for (var _i631 = 0; _i631 < _size626; ++_i631)
        {
          var elem632 = null;
          elem632 = input.readI32();
          this.target.push(elem632);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.group = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cmdpath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.jsonArgs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ackChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_runCmd_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_runCmd_args');
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.target.length);
    for (var iter633 in this.target)
    {
      if (this.target.hasOwnProperty(iter633))
      {
        iter633 = this.target[iter633];
        output.writeI32(iter633);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.BOOL, 2);
    output.writeBool(this.group);
    output.writeFieldEnd();
  }
  if (this.cmdpath !== null && this.cmdpath !== undefined) {
    output.writeFieldBegin('cmdpath', Thrift.Type.STRING, 3);
    output.writeString(this.cmdpath);
    output.writeFieldEnd();
  }
  if (this.jsonArgs !== null && this.jsonArgs !== undefined) {
    output.writeFieldBegin('jsonArgs', Thrift.Type.STRING, 4);
    output.writeString(this.jsonArgs);
    output.writeFieldEnd();
  }
  if (this.ackChannel !== null && this.ackChannel !== undefined) {
    output.writeFieldBegin('ackChannel', Thrift.Type.STRING, 5);
    output.writeString(this.ackChannel);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_runCmd_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_runCmd_result.prototype = {};
IFaceLog_runCmd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_runCmd_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_runCmd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_runTask_args = function(args) {
  this.taskQueue = null;
  this.cmdpath = null;
  this.jsonArgs = null;
  this.ackChannel = null;
  this.token = null;
  if (args) {
    if (args.taskQueue !== undefined && args.taskQueue !== null) {
      this.taskQueue = args.taskQueue;
    }
    if (args.cmdpath !== undefined && args.cmdpath !== null) {
      this.cmdpath = args.cmdpath;
    }
    if (args.jsonArgs !== undefined && args.jsonArgs !== null) {
      this.jsonArgs = args.jsonArgs;
    }
    if (args.ackChannel !== undefined && args.ackChannel !== null) {
      this.ackChannel = args.ackChannel;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_runTask_args.prototype = {};
IFaceLog_runTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskQueue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cmdpath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jsonArgs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ackChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_runTask_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_runTask_args');
  if (this.taskQueue !== null && this.taskQueue !== undefined) {
    output.writeFieldBegin('taskQueue', Thrift.Type.STRING, 1);
    output.writeString(this.taskQueue);
    output.writeFieldEnd();
  }
  if (this.cmdpath !== null && this.cmdpath !== undefined) {
    output.writeFieldBegin('cmdpath', Thrift.Type.STRING, 2);
    output.writeString(this.cmdpath);
    output.writeFieldEnd();
  }
  if (this.jsonArgs !== null && this.jsonArgs !== undefined) {
    output.writeFieldBegin('jsonArgs', Thrift.Type.STRING, 3);
    output.writeString(this.jsonArgs);
    output.writeFieldEnd();
  }
  if (this.ackChannel !== null && this.ackChannel !== undefined) {
    output.writeFieldBegin('ackChannel', Thrift.Type.STRING, 4);
    output.writeString(this.ackChannel);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_runTask_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_runTask_result.prototype = {};
IFaceLog_runTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_runTask_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_runTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDevice_args = function(args) {
  this.deviceBean = null;
  this.token = null;
  if (args) {
    if (args.deviceBean !== undefined && args.deviceBean !== null) {
      this.deviceBean = new ttypes.DeviceBean(args.deviceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveDevice_args.prototype = {};
IFaceLog_saveDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceBean = new ttypes.DeviceBean();
        this.deviceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDevice_args');
  if (this.deviceBean !== null && this.deviceBean !== undefined) {
    output.writeFieldBegin('deviceBean', Thrift.Type.STRUCT, 1);
    this.deviceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveDevice_result.prototype = {};
IFaceLog_saveDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDeviceGroup_args = function(args) {
  this.deviceGroupBean = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupBean !== undefined && args.deviceGroupBean !== null) {
      this.deviceGroupBean = new ttypes.DeviceGroupBean(args.deviceGroupBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveDeviceGroup_args.prototype = {};
IFaceLog_saveDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceGroupBean = new ttypes.DeviceGroupBean();
        this.deviceGroupBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDeviceGroup_args');
  if (this.deviceGroupBean !== null && this.deviceGroupBean !== undefined) {
    output.writeFieldBegin('deviceGroupBean', Thrift.Type.STRUCT, 1);
    this.deviceGroupBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveDeviceGroup_result.prototype = {};
IFaceLog_saveDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePermit_args = function(args) {
  this.permitBean = null;
  this.token = null;
  if (args) {
    if (args.permitBean !== undefined && args.permitBean !== null) {
      this.permitBean = new ttypes.PermitBean(args.permitBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePermit_args.prototype = {};
IFaceLog_savePermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.permitBean = new ttypes.PermitBean();
        this.permitBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePermit_args');
  if (this.permitBean !== null && this.permitBean !== undefined) {
    output.writeFieldBegin('permitBean', Thrift.Type.STRUCT, 1);
    this.permitBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePermit_result.prototype = {};
IFaceLog_savePermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePermitWithSchedule_args = function(args) {
  this.deviceGroupId = null;
  this.personGroupId = null;
  this.schedule = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = args.schedule;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePermitWithSchedule_args.prototype = {};
IFaceLog_savePermitWithSchedule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schedule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePermitWithSchedule_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePermitWithSchedule_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRING, 3);
    output.writeString(this.schedule);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePermitWithSchedule_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePermitWithSchedule_result.prototype = {};
IFaceLog_savePermitWithSchedule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePermitWithSchedule_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePermitWithSchedule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePerson_args = function(args) {
  this.personBean = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePerson_args.prototype = {};
IFaceLog_savePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePerson_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePerson_result.prototype = {};
IFaceLog_savePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonFull_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.feature = null;
  this.featureVersion = null;
  this.featureImage = null;
  this.faceBean = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.featureImage !== undefined && args.featureImage !== null) {
      this.featureImage = args.featureImage;
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new ttypes.FaceBean(args.faceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonFull_args.prototype = {};
IFaceLog_savePersonFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.featureImage = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new ttypes.FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonFull_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonFull_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 4);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.featureImage !== null && this.featureImage !== undefined) {
    output.writeFieldBegin('featureImage', Thrift.Type.STRING, 5);
    output.writeBinary(this.featureImage);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 6);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 7);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonFull_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonFull_result.prototype = {};
IFaceLog_savePersonFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonFull_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonFull_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonGroup_args = function(args) {
  this.personGroupBean = null;
  this.token = null;
  if (args) {
    if (args.personGroupBean !== undefined && args.personGroupBean !== null) {
      this.personGroupBean = new ttypes.PersonGroupBean(args.personGroupBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonGroup_args.prototype = {};
IFaceLog_savePersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personGroupBean = new ttypes.PersonGroupBean();
        this.personGroupBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonGroup_args');
  if (this.personGroupBean !== null && this.personGroupBean !== undefined) {
    output.writeFieldBegin('personGroupBean', Thrift.Type.STRUCT, 1);
    this.personGroupBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonGroup_result.prototype = {};
IFaceLog_savePersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhoto_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhoto_args.prototype = {};
IFaceLog_savePersonWithPhoto_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhoto_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhoto_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhoto_result.prototype = {};
IFaceLog_savePersonWithPhoto_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhoto_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeature_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.featureBean = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.featureBean !== undefined && args.featureBean !== null) {
      this.featureBean = new ttypes.FeatureBean(args.featureBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeature_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.featureBean = new ttypes.FeatureBean();
        this.featureBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeature_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.featureBean !== null && this.featureBean !== undefined) {
    output.writeFieldBegin('featureBean', Thrift.Type.STRUCT, 3);
    this.featureBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeature_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.feature = null;
  this.featureVersion = null;
  this.faceBeans = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.faceBeans !== undefined && args.faceBeans !== null) {
      this.faceBeans = Thrift.copyList(args.faceBeans, [ttypes.FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size634 = 0;
        var _rtmp3638;
        this.faceBeans = [];
        var _etype637 = 0;
        _rtmp3638 = input.readListBegin();
        _etype637 = _rtmp3638.etype;
        _size634 = _rtmp3638.size;
        for (var _i639 = 0; _i639 < _size634; ++_i639)
        {
          var elem640 = null;
          elem640 = new ttypes.FaceBean();
          elem640.read(input);
          this.faceBeans.push(elem640);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 4);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.faceBeans !== null && this.faceBeans !== undefined) {
    output.writeFieldBegin('faceBeans', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.faceBeans.length);
    for (var iter641 in this.faceBeans)
    {
      if (this.faceBeans.hasOwnProperty(iter641))
      {
        iter641 = this.faceBeans[iter641];
        iter641.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.feature = null;
  this.featureVersion = null;
  this.photos = null;
  this.faces = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.photos !== undefined && args.photos !== null) {
      this.photos = Thrift.copyList(args.photos, [null]);
    }
    if (args.faces !== undefined && args.faces !== null) {
      this.faces = Thrift.copyList(args.faces, [ttypes.FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size642 = 0;
        var _rtmp3646;
        this.photos = [];
        var _etype645 = 0;
        _rtmp3646 = input.readListBegin();
        _etype645 = _rtmp3646.etype;
        _size642 = _rtmp3646.size;
        for (var _i647 = 0; _i647 < _size642; ++_i647)
        {
          var elem648 = null;
          elem648 = input.readBinary();
          this.photos.push(elem648);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size649 = 0;
        var _rtmp3653;
        this.faces = [];
        var _etype652 = 0;
        _rtmp3653 = input.readListBegin();
        _etype652 = _rtmp3653.etype;
        _size649 = _rtmp3653.size;
        for (var _i654 = 0; _i654 < _size649; ++_i654)
        {
          var elem655 = null;
          elem655 = new ttypes.FaceBean();
          elem655.read(input);
          this.faces.push(elem655);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 4);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.photos !== null && this.photos !== undefined) {
    output.writeFieldBegin('photos', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.photos.length);
    for (var iter656 in this.photos)
    {
      if (this.photos.hasOwnProperty(iter656))
      {
        iter656 = this.photos[iter656];
        output.writeBinary(iter656);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.faces !== null && this.faces !== undefined) {
    output.writeFieldBegin('faces', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.faces.length);
    for (var iter657 in this.faces)
    {
      if (this.faces.hasOwnProperty(iter657))
      {
        iter657 = this.faces[iter657];
        iter657.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 7);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureSaved_args = function(args) {
  this.personBean = null;
  this.idPhotoMd5 = null;
  this.featureMd5 = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhotoMd5 !== undefined && args.idPhotoMd5 !== null) {
      this.idPhotoMd5 = args.idPhotoMd5;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhotoMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureSaved_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhotoMd5 !== null && this.idPhotoMd5 !== undefined) {
    output.writeFieldBegin('idPhotoMd5', Thrift.Type.STRING, 2);
    output.writeString(this.idPhotoMd5);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 3);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureSaved_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureSaved_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersons_args = function(args) {
  this.persons = null;
  this.token = null;
  if (args) {
    if (args.persons !== undefined && args.persons !== null) {
      this.persons = Thrift.copyList(args.persons, [ttypes.PersonBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersons_args.prototype = {};
IFaceLog_savePersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size658 = 0;
        var _rtmp3662;
        this.persons = [];
        var _etype661 = 0;
        _rtmp3662 = input.readListBegin();
        _etype661 = _rtmp3662.etype;
        _size658 = _rtmp3662.size;
        for (var _i663 = 0; _i663 < _size658; ++_i663)
        {
          var elem664 = null;
          elem664 = new ttypes.PersonBean();
          elem664.read(input);
          this.persons.push(elem664);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersons_args');
  if (this.persons !== null && this.persons !== undefined) {
    output.writeFieldBegin('persons', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.persons.length);
    for (var iter665 in this.persons)
    {
      if (this.persons.hasOwnProperty(iter665))
      {
        iter665 = this.persons[iter665];
        iter665.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersons_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersons_result.prototype = {};
IFaceLog_savePersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersons_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonsWithPhoto_args = function(args) {
  this.photos = null;
  this.persons = null;
  this.token = null;
  if (args) {
    if (args.photos !== undefined && args.photos !== null) {
      this.photos = Thrift.copyList(args.photos, [null]);
    }
    if (args.persons !== undefined && args.persons !== null) {
      this.persons = Thrift.copyList(args.persons, [ttypes.PersonBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonsWithPhoto_args.prototype = {};
IFaceLog_savePersonsWithPhoto_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size666 = 0;
        var _rtmp3670;
        this.photos = [];
        var _etype669 = 0;
        _rtmp3670 = input.readListBegin();
        _etype669 = _rtmp3670.etype;
        _size666 = _rtmp3670.size;
        for (var _i671 = 0; _i671 < _size666; ++_i671)
        {
          var elem672 = null;
          elem672 = input.readBinary();
          this.photos.push(elem672);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size673 = 0;
        var _rtmp3677;
        this.persons = [];
        var _etype676 = 0;
        _rtmp3677 = input.readListBegin();
        _etype676 = _rtmp3677.etype;
        _size673 = _rtmp3677.size;
        for (var _i678 = 0; _i678 < _size673; ++_i678)
        {
          var elem679 = null;
          elem679 = new ttypes.PersonBean();
          elem679.read(input);
          this.persons.push(elem679);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonsWithPhoto_args');
  if (this.photos !== null && this.photos !== undefined) {
    output.writeFieldBegin('photos', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.photos.length);
    for (var iter680 in this.photos)
    {
      if (this.photos.hasOwnProperty(iter680))
      {
        iter680 = this.photos[iter680];
        output.writeBinary(iter680);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.persons !== null && this.persons !== undefined) {
    output.writeFieldBegin('persons', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.persons.length);
    for (var iter681 in this.persons)
    {
      if (this.persons.hasOwnProperty(iter681))
      {
        iter681 = this.persons[iter681];
        iter681.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonsWithPhoto_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonsWithPhoto_result.prototype = {};
IFaceLog_savePersonsWithPhoto_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonsWithPhoto_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveServiceConfig_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveServiceConfig_args.prototype = {};
IFaceLog_saveServiceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveServiceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveServiceConfig_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveServiceConfig_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveServiceConfig_result.prototype = {};
IFaceLog_saveServiceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveServiceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveServiceConfig_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_sdkTaskQueueOf_args = function(args) {
  this.task = null;
  this.sdkVersion = null;
  this.token = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
    if (args.sdkVersion !== undefined && args.sdkVersion !== null) {
      this.sdkVersion = args.sdkVersion;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_sdkTaskQueueOf_args.prototype = {};
IFaceLog_sdkTaskQueueOf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.task = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_sdkTaskQueueOf_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_sdkTaskQueueOf_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRING, 1);
    output.writeString(this.task);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 2);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_sdkTaskQueueOf_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_sdkTaskQueueOf_result.prototype = {};
IFaceLog_sdkTaskQueueOf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_sdkTaskQueueOf_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_sdkTaskQueueOf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDate_args = function(args) {
  this.personId = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryDate is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDate_args.prototype = {};
IFaceLog_setPersonExpiryDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDate_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 2);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDate_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDate_result.prototype = {};
IFaceLog_setPersonExpiryDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDate_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateList_args = function(args) {
  this.personIdList = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryDate is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDateList_args.prototype = {};
IFaceLog_setPersonExpiryDateList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size682 = 0;
        var _rtmp3686;
        this.personIdList = [];
        var _etype685 = 0;
        _rtmp3686 = input.readListBegin();
        _etype685 = _rtmp3686.etype;
        _size682 = _rtmp3686.size;
        for (var _i687 = 0; _i687 < _size682; ++_i687)
        {
          var elem688 = null;
          elem688 = input.readI32();
          this.personIdList.push(elem688);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateList_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter689 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter689))
      {
        iter689 = this.personIdList[iter689];
        output.writeI32(iter689);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 2);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateList_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDateList_result.prototype = {};
IFaceLog_setPersonExpiryDateList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateList_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateTimeStr_args = function(args) {
  this.personId = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDateTimeStr_args.prototype = {};
IFaceLog_setPersonExpiryDateTimeStr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expiryDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateTimeStr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateTimeStr_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.STRING, 2);
    output.writeString(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateTimeStr_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDateTimeStr_result.prototype = {};
IFaceLog_setPersonExpiryDateTimeStr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateTimeStr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateTimeStr_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperties_args = function(args) {
  this.config = null;
  this.token = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = Thrift.copyMap(args.config, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setProperties_args.prototype = {};
IFaceLog_setProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size690 = 0;
        var _rtmp3694;
        this.config = {};
        var _ktype691 = 0;
        var _vtype692 = 0;
        _rtmp3694 = input.readMapBegin();
        _ktype691 = _rtmp3694.ktype;
        _vtype692 = _rtmp3694.vtype;
        _size690 = _rtmp3694.size;
        for (var _i695 = 0; _i695 < _size690; ++_i695)
        {
          var key696 = null;
          var val697 = null;
          key696 = input.readString();
          val697 = input.readString();
          this.config[key696] = val697;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperties_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperties_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.config));
    for (var kiter698 in this.config)
    {
      if (this.config.hasOwnProperty(kiter698))
      {
        var viter699 = this.config[kiter698];
        output.writeString(kiter698);
        output.writeString(viter699);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperties_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setProperties_result.prototype = {};
IFaceLog_setProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperties_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperties_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperty_args = function(args) {
  this.key = null;
  this.value = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setProperty_args.prototype = {};
IFaceLog_setProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperty_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperty_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperty_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setProperty_result.prototype = {};
IFaceLog_setProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperty_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperty_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_taskQueueOf_args = function(args) {
  this.task = null;
  this.token = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_taskQueueOf_args.prototype = {};
IFaceLog_taskQueueOf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.task = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskQueueOf_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskQueueOf_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRING, 1);
    output.writeString(this.task);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_taskQueueOf_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_taskQueueOf_result.prototype = {};
IFaceLog_taskQueueOf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskQueueOf_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskQueueOf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unbindBorder_args = function(args) {
  this.personGroupId = null;
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_unbindBorder_args.prototype = {};
IFaceLog_unbindBorder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unbindBorder_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unbindBorder_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unbindBorder_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_unbindBorder_result.prototype = {};
IFaceLog_unbindBorder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unbindBorder_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unbindBorder_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unregisterDevice_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_unregisterDevice_args.prototype = {};
IFaceLog_unregisterDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unregisterDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unregisterDevice_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unregisterDevice_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_unregisterDevice_result.prototype = {};
IFaceLog_unregisterDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unregisterDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unregisterDevice_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_updateDevice_args = function(args) {
  this.deviceBean = null;
  this.token = null;
  if (args) {
    if (args.deviceBean !== undefined && args.deviceBean !== null) {
      this.deviceBean = new ttypes.DeviceBean(args.deviceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_updateDevice_args.prototype = {};
IFaceLog_updateDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceBean = new ttypes.DeviceBean();
        this.deviceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_updateDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_updateDevice_args');
  if (this.deviceBean !== null && this.deviceBean !== undefined) {
    output.writeFieldBegin('deviceBean', Thrift.Type.STRUCT, 1);
    this.deviceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_updateDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_updateDevice_result.prototype = {};
IFaceLog_updateDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_updateDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_updateDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_version_args = function(args) {
};
IFaceLog_version_args.prototype = {};
IFaceLog_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_version_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_version_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_version_result.prototype = {};
IFaceLog_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_version_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_versionInfo_args = function(args) {
};
IFaceLog_versionInfo_args.prototype = {};
IFaceLog_versionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_versionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_versionInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_versionInfo_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_versionInfo_result.prototype = {};
IFaceLog_versionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size700 = 0;
        var _rtmp3704;
        this.success = {};
        var _ktype701 = 0;
        var _vtype702 = 0;
        _rtmp3704 = input.readMapBegin();
        _ktype701 = _rtmp3704.ktype;
        _vtype702 = _rtmp3704.vtype;
        _size700 = _rtmp3704.size;
        for (var _i705 = 0; _i705 < _size700; ++_i705)
        {
          var key706 = null;
          var val707 = null;
          key706 = input.readString();
          val707 = input.readString();
          this.success[key706] = val707;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_versionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_versionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter708 in this.success)
    {
      if (this.success.hasOwnProperty(kiter708))
      {
        var viter709 = this.success[kiter708];
        output.writeString(kiter708);
        output.writeString(viter709);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLogClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
IFaceLogClient.prototype = {};
IFaceLogClient.prototype.seqid = function() { return this._seqid; };
IFaceLogClient.prototype.new_seqid = function() { return this._seqid += 1; };
IFaceLogClient.prototype.addFeature = function(feature, featureVersion, personId, faecBeans, removed, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFeature(feature, featureVersion, personId, faecBeans, removed, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFeature(feature, featureVersion, personId, faecBeans, removed, token);
  }
};

IFaceLogClient.prototype.send_addFeature = function(feature, featureVersion, personId, faecBeans, removed, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    feature: feature,
    featureVersion: featureVersion,
    personId: personId,
    faecBeans: faecBeans,
    removed: removed,
    token: token
  };
  var args = new IFaceLog_addFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFeature failed: unknown result');
};
IFaceLogClient.prototype.addFeatureMulti = function(feature, featureVersion, personId, photos, faces, removed, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFeatureMulti(feature, featureVersion, personId, photos, faces, removed, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFeatureMulti(feature, featureVersion, personId, photos, faces, removed, token);
  }
};

IFaceLogClient.prototype.send_addFeatureMulti = function(feature, featureVersion, personId, photos, faces, removed, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFeatureMulti', Thrift.MessageType.CALL, this.seqid());
  var params = {
    feature: feature,
    featureVersion: featureVersion,
    personId: personId,
    photos: photos,
    faces: faces,
    removed: removed,
    token: token
  };
  var args = new IFaceLog_addFeatureMulti_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addFeatureMulti = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addFeatureMulti_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFeatureMulti failed: unknown result');
};
IFaceLogClient.prototype.addFeatureWithImage = function(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, removed, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFeatureWithImage(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, removed, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFeatureWithImage(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, removed, token);
  }
};

IFaceLogClient.prototype.send_addFeatureWithImage = function(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, removed, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFeatureWithImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    feature: feature,
    featureVersion: featureVersion,
    personId: personId,
    asIdPhotoIfAbsent: asIdPhotoIfAbsent,
    featurePhoto: featurePhoto,
    faceBean: faceBean,
    removed: removed,
    token: token
  };
  var args = new IFaceLog_addFeatureWithImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addFeatureWithImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addFeatureWithImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFeatureWithImage failed: unknown result');
};
IFaceLogClient.prototype.addImage = function(imageData, deviceId, faceBean, personId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addImage(imageData, deviceId, faceBean, personId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addImage(imageData, deviceId, faceBean, personId, token);
  }
};

IFaceLogClient.prototype.send_addImage = function(imageData, deviceId, faceBean, personId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageData: imageData,
    deviceId: deviceId,
    faceBean: faceBean,
    personId: personId,
    token: token
  };
  var args = new IFaceLog_addImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addImage failed: unknown result');
};
IFaceLogClient.prototype.addLog = function(logBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLog(logBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLog(logBean, token);
  }
};

IFaceLogClient.prototype.send_addLog = function(logBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLog', Thrift.MessageType.CALL, this.seqid());
  var params = {
    logBean: logBean,
    token: token
  };
  var args = new IFaceLog_addLog_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLog_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.addLogFull = function(logBean, faceBean, featureImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLogFull(logBean, faceBean, featureImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLogFull(logBean, faceBean, featureImage, token);
  }
};

IFaceLogClient.prototype.send_addLogFull = function(logBean, faceBean, featureImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLogFull', Thrift.MessageType.CALL, this.seqid());
  var params = {
    logBean: logBean,
    faceBean: faceBean,
    featureImage: featureImage,
    token: token
  };
  var args = new IFaceLog_addLogFull_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLogFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLogFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.addLogs = function(beans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLogs(beans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLogs(beans, token);
  }
};

IFaceLogClient.prototype.send_addLogs = function(beans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLogs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    beans: beans,
    token: token
  };
  var args = new IFaceLog_addLogs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLogs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLogs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.addLogsFull = function(logBeans, faceBeans, featureImages, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLogsFull(logBeans, faceBeans, featureImages, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLogsFull(logBeans, faceBeans, featureImages, token);
  }
};

IFaceLogClient.prototype.send_addLogsFull = function(logBeans, faceBeans, featureImages, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLogsFull', Thrift.MessageType.CALL, this.seqid());
  var params = {
    logBeans: logBeans,
    faceBeans: faceBeans,
    featureImages: featureImages,
    token: token
  };
  var args = new IFaceLog_addLogsFull_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLogsFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLogsFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.applyAckChannel = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyAckChannel(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyAckChannel(token);
  }
};

IFaceLogClient.prototype.send_applyAckChannel = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyAckChannel', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_applyAckChannel_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyAckChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyAckChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyAckChannel failed: unknown result');
};
IFaceLogClient.prototype.applyAckChannelWithDuration = function(duration, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyAckChannelWithDuration(duration, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyAckChannelWithDuration(duration, token);
  }
};

IFaceLogClient.prototype.send_applyAckChannelWithDuration = function(duration, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyAckChannelWithDuration', Thrift.MessageType.CALL, this.seqid());
  var params = {
    duration: duration,
    token: token
  };
  var args = new IFaceLog_applyAckChannelWithDuration_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyAckChannelWithDuration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyAckChannelWithDuration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyAckChannelWithDuration failed: unknown result');
};
IFaceLogClient.prototype.applyCmdSn = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyCmdSn(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyCmdSn(token);
  }
};

IFaceLogClient.prototype.send_applyCmdSn = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyCmdSn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_applyCmdSn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyCmdSn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyCmdSn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyCmdSn failed: unknown result');
};
IFaceLogClient.prototype.applyPersonToken = function(personId, password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyPersonToken(personId, password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyPersonToken(personId, password, isMd5);
  }
};

IFaceLogClient.prototype.send_applyPersonToken = function(personId, password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyPersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyPersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyPersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyPersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyPersonToken failed: unknown result');
};
IFaceLogClient.prototype.applyRootToken = function(password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyRootToken(password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyRootToken(password, isMd5);
  }
};

IFaceLogClient.prototype.send_applyRootToken = function(password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyRootToken failed: unknown result');
};
IFaceLogClient.prototype.applyUserToken = function(userid, password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyUserToken(userid, password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyUserToken(userid, password, isMd5);
  }
};

IFaceLogClient.prototype.send_applyUserToken = function(userid, password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyUserToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    userid: userid,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyUserToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyUserToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyUserToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyUserToken failed: unknown result');
};
IFaceLogClient.prototype.bindBorder = function(personGroupId, deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_bindBorder(personGroupId, deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_bindBorder(personGroupId, deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_bindBorder = function(personGroupId, deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('bindBorder', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_bindBorder_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_bindBorder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_bindBorder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.childListForDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_childListForDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_childListForDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_childListForDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('childListForDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_childListForDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_childListForDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_childListForDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('childListForDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.childListForPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_childListForPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_childListForPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_childListForPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('childListForPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_childListForPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_childListForPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_childListForPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('childListForPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.countDeviceByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countDeviceByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countDeviceByWhere(where);
  }
};

IFaceLogClient.prototype.send_countDeviceByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countDeviceByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countDeviceByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countDeviceByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countDeviceByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countDeviceByWhere failed: unknown result');
};
IFaceLogClient.prototype.countDeviceGroupByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countDeviceGroupByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countDeviceGroupByWhere(where);
  }
};

IFaceLogClient.prototype.send_countDeviceGroupByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countDeviceGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countDeviceGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countDeviceGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countDeviceGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countDeviceGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.countLogByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogByWhere(where);
  }
};

IFaceLogClient.prototype.send_countLogByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countLogByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogByWhere failed: unknown result');
};
IFaceLogClient.prototype.countLogLightByVerifyTime = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogLightByVerifyTime(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogLightByVerifyTime(timestamp);
  }
};

IFaceLogClient.prototype.send_countLogLightByVerifyTime = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogLightByVerifyTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_countLogLightByVerifyTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogLightByVerifyTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogLightByVerifyTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogLightByVerifyTime failed: unknown result');
};
IFaceLogClient.prototype.countLogLightByVerifyTimeTimestr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogLightByVerifyTimeTimestr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogLightByVerifyTimeTimestr(timestamp);
  }
};

IFaceLogClient.prototype.send_countLogLightByVerifyTimeTimestr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogLightByVerifyTimeTimestr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_countLogLightByVerifyTimeTimestr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogLightByVerifyTimeTimestr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogLightByVerifyTimeTimestr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogLightByVerifyTimeTimestr failed: unknown result');
};
IFaceLogClient.prototype.countLogLightByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogLightByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogLightByWhere(where);
  }
};

IFaceLogClient.prototype.send_countLogLightByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogLightByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countLogLightByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogLightByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogLightByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogLightByWhere failed: unknown result');
};
IFaceLogClient.prototype.countPersonByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countPersonByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countPersonByWhere(where);
  }
};

IFaceLogClient.prototype.send_countPersonByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countPersonByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countPersonByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countPersonByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countPersonByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countPersonByWhere failed: unknown result');
};
IFaceLogClient.prototype.countPersonGroupByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countPersonGroupByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countPersonGroupByWhere(where);
  }
};

IFaceLogClient.prototype.send_countPersonGroupByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countPersonGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countPersonGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countPersonGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countPersonGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countPersonGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.countPersonLog = function(personId, startDate, endDate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countPersonLog(personId, startDate, endDate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countPersonLog(personId, startDate, endDate);
  }
};

IFaceLogClient.prototype.send_countPersonLog = function(personId, startDate, endDate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countPersonLog', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    startDate: startDate,
    endDate: endDate
  };
  var args = new IFaceLog_countPersonLog_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countPersonLog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countPersonLog_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countPersonLog failed: unknown result');
};
IFaceLogClient.prototype.countPersonLogTimeStr = function(personId, startDate, endDate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countPersonLogTimeStr(personId, startDate, endDate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countPersonLogTimeStr(personId, startDate, endDate);
  }
};

IFaceLogClient.prototype.send_countPersonLogTimeStr = function(personId, startDate, endDate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countPersonLogTimeStr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    startDate: startDate,
    endDate: endDate
  };
  var args = new IFaceLog_countPersonLogTimeStr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countPersonLogTimeStr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countPersonLogTimeStr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countPersonLogTimeStr failed: unknown result');
};
IFaceLogClient.prototype.deleteAllFeaturesByPersonId = function(personId, deleteImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllFeaturesByPersonId(personId, deleteImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllFeaturesByPersonId(personId, deleteImage, token);
  }
};

IFaceLogClient.prototype.send_deleteAllFeaturesByPersonId = function(personId, deleteImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllFeaturesByPersonId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    deleteImage: deleteImage,
    token: token
  };
  var args = new IFaceLog_deleteAllFeaturesByPersonId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteAllFeaturesByPersonId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteAllFeaturesByPersonId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteAllFeaturesByPersonId failed: unknown result');
};
IFaceLogClient.prototype.deleteDevice = function(id, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteDevice(id, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteDevice(id, token);
  }
};

IFaceLogClient.prototype.send_deleteDevice = function(id, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id,
    token: token
  };
  var args = new IFaceLog_deleteDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteDevice failed: unknown result');
};
IFaceLogClient.prototype.deleteDeviceByMac = function(mac, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteDeviceByMac(mac, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteDeviceByMac(mac, token);
  }
};

IFaceLogClient.prototype.send_deleteDeviceByMac = function(mac, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteDeviceByMac', Thrift.MessageType.CALL, this.seqid());
  var params = {
    mac: mac,
    token: token
  };
  var args = new IFaceLog_deleteDeviceByMac_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteDeviceByMac = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteDeviceByMac_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteDeviceByMac failed: unknown result');
};
IFaceLogClient.prototype.deleteDeviceGroup = function(deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteDeviceGroup(deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteDeviceGroup(deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_deleteDeviceGroup = function(deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_deleteDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.deleteFeature = function(featureMd5, deleteImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteFeature(featureMd5, deleteImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteFeature(featureMd5, deleteImage, token);
  }
};

IFaceLogClient.prototype.send_deleteFeature = function(featureMd5, deleteImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5,
    deleteImage: deleteImage,
    token: token
  };
  var args = new IFaceLog_deleteFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteFeature failed: unknown result');
};
IFaceLogClient.prototype.deleteGroupPermitOnDeviceGroup = function(deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteGroupPermitOnDeviceGroup(deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteGroupPermitOnDeviceGroup(deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_deleteGroupPermitOnDeviceGroup = function(deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteGroupPermitOnDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_deleteGroupPermitOnDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteGroupPermitOnDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteGroupPermitOnDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteGroupPermitOnDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.deleteImage = function(imageMd5, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteImage(imageMd5, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteImage(imageMd5, token);
  }
};

IFaceLogClient.prototype.send_deleteImage = function(imageMd5, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMd5: imageMd5,
    token: token
  };
  var args = new IFaceLog_deleteImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteImage failed: unknown result');
};
IFaceLogClient.prototype.deletePermitById = function(deviceGroupId, personGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePermitById(deviceGroupId, personGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePermitById(deviceGroupId, personGroupId, token);
  }
};

IFaceLogClient.prototype.send_deletePermitById = function(deviceGroupId, personGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePermitById', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_deletePermitById_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePermitById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePermitById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePermitById failed: unknown result');
};
IFaceLogClient.prototype.deletePerson = function(personId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePerson(personId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePerson(personId, token);
  }
};

IFaceLogClient.prototype.send_deletePerson = function(personId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    token: token
  };
  var args = new IFaceLog_deletePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePerson failed: unknown result');
};
IFaceLogClient.prototype.deletePersonByPapersNum = function(papersNum, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonByPapersNum(papersNum, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonByPapersNum(papersNum, token);
  }
};

IFaceLogClient.prototype.send_deletePersonByPapersNum = function(papersNum, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNum: papersNum,
    token: token
  };
  var args = new IFaceLog_deletePersonByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.deletePersonGroup = function(personGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonGroup(personGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonGroup(personGroupId, token);
  }
};

IFaceLogClient.prototype.send_deletePersonGroup = function(personGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_deletePersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonGroup failed: unknown result');
};
IFaceLogClient.prototype.deletePersonGroupPermit = function(personGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonGroupPermit(personGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonGroupPermit(personGroupId, token);
  }
};

IFaceLogClient.prototype.send_deletePersonGroupPermit = function(personGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonGroupPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_deletePersonGroupPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonGroupPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonGroupPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonGroupPermit failed: unknown result');
};
IFaceLogClient.prototype.deletePersons = function(personIdList, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersons(personIdList, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersons(personIdList, token);
  }
};

IFaceLogClient.prototype.send_deletePersons = function(personIdList, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    token: token
  };
  var args = new IFaceLog_deletePersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersons failed: unknown result');
};
IFaceLogClient.prototype.deletePersonsByPapersNum = function(papersNumlist, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonsByPapersNum(papersNumlist, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonsByPapersNum(papersNumlist, token);
  }
};

IFaceLogClient.prototype.send_deletePersonsByPapersNum = function(papersNumlist, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonsByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNumlist: papersNumlist,
    token: token
  };
  var args = new IFaceLog_deletePersonsByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonsByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonsByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonsByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.disablePerson = function(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disablePerson(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disablePerson(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
  }
};

IFaceLogClient.prototype.send_disablePerson = function(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disablePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    moveToGroupId: moveToGroupId,
    deletePhoto: deletePhoto,
    deleteFeature: deleteFeature,
    deleteLog: deleteLog,
    token: token
  };
  var args = new IFaceLog_disablePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_disablePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_disablePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.disablePersonList = function(personIdList, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disablePersonList(personIdList, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disablePersonList(personIdList, token);
  }
};

IFaceLogClient.prototype.send_disablePersonList = function(personIdList, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disablePersonList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    token: token
  };
  var args = new IFaceLog_disablePersonList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_disablePersonList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_disablePersonList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.existsDevice = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsDevice(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsDevice(id);
  }
};

IFaceLogClient.prototype.send_existsDevice = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id
  };
  var args = new IFaceLog_existsDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsDevice failed: unknown result');
};
IFaceLogClient.prototype.existsFeature = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsFeature(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsFeature(md5);
  }
};

IFaceLogClient.prototype.send_existsFeature = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_existsFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsFeature failed: unknown result');
};
IFaceLogClient.prototype.existsImage = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsImage(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsImage(md5);
  }
};

IFaceLogClient.prototype.send_existsImage = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_existsImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsImage failed: unknown result');
};
IFaceLogClient.prototype.existsPerson = function(persionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsPerson(persionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsPerson(persionId);
  }
};

IFaceLogClient.prototype.send_existsPerson = function(persionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    persionId: persionId
  };
  var args = new IFaceLog_existsPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsPerson failed: unknown result');
};
IFaceLogClient.prototype.getDevice = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevice(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevice(deviceId);
  }
};

IFaceLogClient.prototype.send_getDevice = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_getDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevice failed: unknown result');
};
IFaceLogClient.prototype.getDeviceByMac = function(mac, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceByMac(mac);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceByMac(mac);
  }
};

IFaceLogClient.prototype.send_getDeviceByMac = function(mac) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceByMac', Thrift.MessageType.CALL, this.seqid());
  var params = {
    mac: mac
  };
  var args = new IFaceLog_getDeviceByMac_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceByMac = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceByMac_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceByMac failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroups = function(groupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroups(groupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroups(groupIdList);
  }
};

IFaceLogClient.prototype.send_getDeviceGroups = function(groupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroups', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupIdList: groupIdList
  };
  var args = new IFaceLog_getDeviceGroups_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroups failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsBelongs = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsBelongs(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsBelongs(deviceId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsBelongs = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsBelongs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_getDeviceGroupsBelongs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsBelongs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsBelongs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsBelongs failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsPermit = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsPermit(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsPermit(personGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsPermit = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getDeviceGroupsPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsPermit failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsPermittedBy = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsPermittedBy(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsPermittedBy(personGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsPermittedBy = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsPermittedBy', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getDeviceGroupsPermittedBy_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsPermittedBy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsPermittedBy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsPermittedBy failed: unknown result');
};
IFaceLogClient.prototype.getDeviceIdOfFeature = function(featureMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceIdOfFeature(featureMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceIdOfFeature(featureMd5);
  }
};

IFaceLogClient.prototype.send_getDeviceIdOfFeature = function(featureMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceIdOfFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getDeviceIdOfFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceIdOfFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceIdOfFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceIdOfFeature failed: unknown result');
};
IFaceLogClient.prototype.getDevices = function(idList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevices(idList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevices(idList);
  }
};

IFaceLogClient.prototype.send_getDevices = function(idList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevices', Thrift.MessageType.CALL, this.seqid());
  var params = {
    idList: idList
  };
  var args = new IFaceLog_getDevices_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevices failed: unknown result');
};
IFaceLogClient.prototype.getDevicesOfGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevicesOfGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevicesOfGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getDevicesOfGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevicesOfGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getDevicesOfGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevicesOfGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevicesOfGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevicesOfGroup failed: unknown result');
};
IFaceLogClient.prototype.getFace = function(faceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFace(faceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFace(faceId);
  }
};

IFaceLogClient.prototype.send_getFace = function(faceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFace', Thrift.MessageType.CALL, this.seqid());
  var params = {
    faceId: faceId
  };
  var args = new IFaceLog_getFace_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFace failed: unknown result');
};
IFaceLogClient.prototype.getFacesOfFeature = function(featureMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFacesOfFeature(featureMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFacesOfFeature(featureMd5);
  }
};

IFaceLogClient.prototype.send_getFacesOfFeature = function(featureMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFacesOfFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getFacesOfFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFacesOfFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFacesOfFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFacesOfFeature failed: unknown result');
};
IFaceLogClient.prototype.getFacesOfImage = function(imageMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFacesOfImage(imageMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFacesOfImage(imageMd5);
  }
};

IFaceLogClient.prototype.send_getFacesOfImage = function(imageMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFacesOfImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMd5: imageMd5
  };
  var args = new IFaceLog_getFacesOfImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFacesOfImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFacesOfImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFacesOfImage failed: unknown result');
};
IFaceLogClient.prototype.getFeature = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeature(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeature(md5);
  }
};

IFaceLogClient.prototype.send_getFeature = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeature failed: unknown result');
};
IFaceLogClient.prototype.getFeatureBytes = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeatureBytes(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeatureBytes(md5);
  }
};

IFaceLogClient.prototype.send_getFeatureBytes = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeatureBytes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeatureBytes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeatureBytes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeatureBytes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeatureBytes failed: unknown result');
};
IFaceLogClient.prototype.getFeatures = function(md5List, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeatures(md5List);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeatures(md5List);
  }
};

IFaceLogClient.prototype.send_getFeatures = function(md5List) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeatures', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5List: md5List
  };
  var args = new IFaceLog_getFeatures_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeatures = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeatures_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeatures failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesByPersonIdAndSdkVersion = function(personId, sdkVersion, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesByPersonIdAndSdkVersion(personId, sdkVersion);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesByPersonIdAndSdkVersion(personId, sdkVersion);
  }
};

IFaceLogClient.prototype.send_getFeaturesByPersonIdAndSdkVersion = function(personId, sdkVersion) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesByPersonIdAndSdkVersion', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    sdkVersion: sdkVersion
  };
  var args = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesByPersonIdAndSdkVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesByPersonIdAndSdkVersion failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesOfImage = function(imageMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesOfImage(imageMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesOfImage(imageMd5);
  }
};

IFaceLogClient.prototype.send_getFeaturesOfImage = function(imageMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesOfImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMd5: imageMd5
  };
  var args = new IFaceLog_getFeaturesOfImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesOfImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesOfImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesOfImage failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesOfPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesOfPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesOfPerson(personId);
  }
};

IFaceLogClient.prototype.send_getFeaturesOfPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesOfPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getFeaturesOfPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesOfPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesOfPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesOfPerson failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesPermittedOnDevice = function(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds, timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesPermittedOnDevice(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds, timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesPermittedOnDevice(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds, timestamp);
  }
};

IFaceLogClient.prototype.send_getFeaturesPermittedOnDevice = function(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesPermittedOnDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    ignoreSchedule: ignoreSchedule,
    sdkVersion: sdkVersion,
    excludeFeatureIds: excludeFeatureIds,
    timestamp: timestamp
  };
  var args = new IFaceLog_getFeaturesPermittedOnDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesPermittedOnDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesPermittedOnDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesPermittedOnDevice failed: unknown result');
};
IFaceLogClient.prototype.getGroupPermit = function(deviceId, personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupPermit(deviceId, personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupPermit(deviceId, personGroupId);
  }
};

IFaceLogClient.prototype.send_getGroupPermit = function(deviceId, personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getGroupPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getGroupPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getGroupPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupPermit failed: unknown result');
};
IFaceLogClient.prototype.getGroupPermitOnDeviceGroup = function(deviceGroupId, personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupPermitOnDeviceGroup(deviceGroupId, personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupPermitOnDeviceGroup(deviceGroupId, personGroupId);
  }
};

IFaceLogClient.prototype.send_getGroupPermitOnDeviceGroup = function(deviceGroupId, personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupPermitOnDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getGroupPermitOnDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getGroupPermitOnDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getGroupPermitOnDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupPermitOnDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.getGroupPermits = function(deviceId, personGroupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupPermits(deviceId, personGroupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupPermits(deviceId, personGroupIdList);
  }
};

IFaceLogClient.prototype.send_getGroupPermits = function(deviceId, personGroupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupPermits', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personGroupIdList: personGroupIdList
  };
  var args = new IFaceLog_getGroupPermits_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getGroupPermits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getGroupPermits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupPermits failed: unknown result');
};
IFaceLogClient.prototype.getImage = function(imageMD5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImage(imageMD5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImage(imageMD5);
  }
};

IFaceLogClient.prototype.send_getImage = function(imageMD5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMD5: imageMD5
  };
  var args = new IFaceLog_getImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImage failed: unknown result');
};
IFaceLogClient.prototype.getImageBytes = function(imageMD5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImageBytes(imageMD5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImageBytes(imageMD5);
  }
};

IFaceLogClient.prototype.send_getImageBytes = function(imageMD5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImageBytes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMD5: imageMD5
  };
  var args = new IFaceLog_getImageBytes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImageBytes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImageBytes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImageBytes failed: unknown result');
};
IFaceLogClient.prototype.getImagesAssociatedByFeature = function(featureMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImagesAssociatedByFeature(featureMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImagesAssociatedByFeature(featureMd5);
  }
};

IFaceLogClient.prototype.send_getImagesAssociatedByFeature = function(featureMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImagesAssociatedByFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getImagesAssociatedByFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImagesAssociatedByFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImagesAssociatedByFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImagesAssociatedByFeature failed: unknown result');
};
IFaceLogClient.prototype.getLogBeansByPersonId = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLogBeansByPersonId(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLogBeansByPersonId(personId);
  }
};

IFaceLogClient.prototype.send_getLogBeansByPersonId = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLogBeansByPersonId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getLogBeansByPersonId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getLogBeansByPersonId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getLogBeansByPersonId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLogBeansByPersonId failed: unknown result');
};
IFaceLogClient.prototype.getPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPerson(personId);
  }
};

IFaceLogClient.prototype.send_getPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPerson failed: unknown result');
};
IFaceLogClient.prototype.getPersonByMobilePhone = function(mobilePhone, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonByMobilePhone(mobilePhone);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonByMobilePhone(mobilePhone);
  }
};

IFaceLogClient.prototype.send_getPersonByMobilePhone = function(mobilePhone) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonByMobilePhone', Thrift.MessageType.CALL, this.seqid());
  var params = {
    mobilePhone: mobilePhone
  };
  var args = new IFaceLog_getPersonByMobilePhone_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonByMobilePhone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonByMobilePhone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonByMobilePhone failed: unknown result');
};
IFaceLogClient.prototype.getPersonByPapersNum = function(papersNum, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonByPapersNum(papersNum);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonByPapersNum(papersNum);
  }
};

IFaceLogClient.prototype.send_getPersonByPapersNum = function(papersNum) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNum: papersNum
  };
  var args = new IFaceLog_getPersonByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroups = function(groupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroups(groupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroups(groupIdList);
  }
};

IFaceLogClient.prototype.send_getPersonGroups = function(groupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroups', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupIdList: groupIdList
  };
  var args = new IFaceLog_getPersonGroups_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroups failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroupsBelongs = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroupsBelongs(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroupsBelongs(personId);
  }
};

IFaceLogClient.prototype.send_getPersonGroupsBelongs = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroupsBelongs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getPersonGroupsBelongs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroupsBelongs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroupsBelongs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroupsBelongs failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroupsPermittedBy = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroupsPermittedBy(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroupsPermittedBy(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonGroupsPermittedBy = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroupsPermittedBy', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getPersonGroupsPermittedBy_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroupsPermittedBy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroupsPermittedBy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroupsPermittedBy failed: unknown result');
};
IFaceLogClient.prototype.getPersonPermit = function(deviceId, personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonPermit(deviceId, personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonPermit(deviceId, personId);
  }
};

IFaceLogClient.prototype.send_getPersonPermit = function(deviceId, personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personId: personId
  };
  var args = new IFaceLog_getPersonPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonPermit failed: unknown result');
};
IFaceLogClient.prototype.getPersonPermits = function(deviceId, personIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonPermits(deviceId, personIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonPermits(deviceId, personIdList);
  }
};

IFaceLogClient.prototype.send_getPersonPermits = function(deviceId, personIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonPermits', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personIdList: personIdList
  };
  var args = new IFaceLog_getPersonPermits_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonPermits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonPermits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonPermits failed: unknown result');
};
IFaceLogClient.prototype.getPersons = function(idList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersons(idList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersons(idList);
  }
};

IFaceLogClient.prototype.send_getPersons = function(idList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    idList: idList
  };
  var args = new IFaceLog_getPersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersons failed: unknown result');
};
IFaceLogClient.prototype.getPersonsOfGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonsOfGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonsOfGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonsOfGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonsOfGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getPersonsOfGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonsOfGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonsOfGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonsOfGroup failed: unknown result');
};
IFaceLogClient.prototype.getPersonsPermittedOnDevice = function(deviceId, ignoreSchedule, excludePersonIds, timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonsPermittedOnDevice(deviceId, ignoreSchedule, excludePersonIds, timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonsPermittedOnDevice(deviceId, ignoreSchedule, excludePersonIds, timestamp);
  }
};

IFaceLogClient.prototype.send_getPersonsPermittedOnDevice = function(deviceId, ignoreSchedule, excludePersonIds, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonsPermittedOnDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    ignoreSchedule: ignoreSchedule,
    excludePersonIds: excludePersonIds,
    timestamp: timestamp
  };
  var args = new IFaceLog_getPersonsPermittedOnDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonsPermittedOnDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonsPermittedOnDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonsPermittedOnDevice failed: unknown result');
};
IFaceLogClient.prototype.getProperties = function(prefix, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProperties(prefix, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProperties(prefix, token);
  }
};

IFaceLogClient.prototype.send_getProperties = function(prefix, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProperties', Thrift.MessageType.CALL, this.seqid());
  var params = {
    prefix: prefix,
    token: token
  };
  var args = new IFaceLog_getProperties_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getProperties = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getProperties_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProperties failed: unknown result');
};
IFaceLogClient.prototype.getProperty = function(key, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProperty(key, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProperty(key, token);
  }
};

IFaceLogClient.prototype.send_getProperty = function(key, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProperty', Thrift.MessageType.CALL, this.seqid());
  var params = {
    key: key,
    token: token
  };
  var args = new IFaceLog_getProperty_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProperty failed: unknown result');
};
IFaceLogClient.prototype.getRedisParameters = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRedisParameters(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRedisParameters(token);
  }
};

IFaceLogClient.prototype.send_getRedisParameters = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRedisParameters', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_getRedisParameters_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getRedisParameters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getRedisParameters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRedisParameters failed: unknown result');
};
IFaceLogClient.prototype.getServiceConfig = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getServiceConfig(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getServiceConfig(token);
  }
};

IFaceLogClient.prototype.send_getServiceConfig = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getServiceConfig', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_getServiceConfig_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getServiceConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getServiceConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServiceConfig failed: unknown result');
};
IFaceLogClient.prototype.getSubDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getSubDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getSubDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getSubDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getSubDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.getSubPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getSubPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getSubPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getSubPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getSubPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.isDisable = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isDisable(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isDisable(personId);
  }
};

IFaceLogClient.prototype.send_isDisable = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isDisable', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_isDisable_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isDisable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isDisable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isDisable failed: unknown result');
};
IFaceLogClient.prototype.isLocal = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isLocal();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isLocal();
  }
};

IFaceLogClient.prototype.send_isLocal = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isLocal', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_isLocal_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isLocal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isLocal_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isLocal failed: unknown result');
};
IFaceLogClient.prototype.isValidAckChannel = function(ackChannel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidAckChannel(ackChannel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidAckChannel(ackChannel);
  }
};

IFaceLogClient.prototype.send_isValidAckChannel = function(ackChannel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidAckChannel', Thrift.MessageType.CALL, this.seqid());
  var params = {
    ackChannel: ackChannel
  };
  var args = new IFaceLog_isValidAckChannel_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidAckChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidAckChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidAckChannel failed: unknown result');
};
IFaceLogClient.prototype.isValidCmdSn = function(cmdSn, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidCmdSn(cmdSn);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidCmdSn(cmdSn);
  }
};

IFaceLogClient.prototype.send_isValidCmdSn = function(cmdSn) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidCmdSn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    cmdSn: cmdSn
  };
  var args = new IFaceLog_isValidCmdSn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidCmdSn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidCmdSn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidCmdSn failed: unknown result');
};
IFaceLogClient.prototype.isValidDeviceToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidDeviceToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidDeviceToken(token);
  }
};

IFaceLogClient.prototype.send_isValidDeviceToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidDeviceToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidDeviceToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidDeviceToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidDeviceToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidDeviceToken failed: unknown result');
};
IFaceLogClient.prototype.isValidPassword = function(userId, password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidPassword(userId, password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidPassword(userId, password, isMd5);
  }
};

IFaceLogClient.prototype.send_isValidPassword = function(userId, password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidPassword', Thrift.MessageType.CALL, this.seqid());
  var params = {
    userId: userId,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_isValidPassword_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidPassword failed: unknown result');
};
IFaceLogClient.prototype.isValidPersonToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidPersonToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidPersonToken(token);
  }
};

IFaceLogClient.prototype.send_isValidPersonToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidPersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidPersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidPersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidPersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidPersonToken failed: unknown result');
};
IFaceLogClient.prototype.isValidRootToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidRootToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidRootToken(token);
  }
};

IFaceLogClient.prototype.send_isValidRootToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidRootToken failed: unknown result');
};
IFaceLogClient.prototype.isValidToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidToken(token);
  }
};

IFaceLogClient.prototype.send_isValidToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidToken failed: unknown result');
};
IFaceLogClient.prototype.isValidUserToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidUserToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidUserToken(token);
  }
};

IFaceLogClient.prototype.send_isValidUserToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidUserToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidUserToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidUserToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidUserToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidUserToken failed: unknown result');
};
IFaceLogClient.prototype.listOfParentForDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listOfParentForDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listOfParentForDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_listOfParentForDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listOfParentForDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_listOfParentForDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_listOfParentForDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_listOfParentForDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listOfParentForDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.listOfParentForPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listOfParentForPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listOfParentForPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_listOfParentForPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listOfParentForPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_listOfParentForPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_listOfParentForPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_listOfParentForPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listOfParentForPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.loadAllPerson = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadAllPerson();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadAllPerson();
  }
};

IFaceLogClient.prototype.send_loadAllPerson = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadAllPerson', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_loadAllPerson_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadAllPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadAllPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadAllPerson failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadDeviceByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadDeviceByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceGroupByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceGroupByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceGroupByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadDeviceGroupByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadDeviceGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceGroupIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceGroupIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceGroupIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadDeviceGroupIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceGroupIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadDeviceGroupIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceGroupIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceGroupIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceGroupIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadDeviceIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadDeviceIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDistinctIntegerColumn = function(table, column, where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDistinctIntegerColumn(table, column, where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDistinctIntegerColumn(table, column, where);
  }
};

IFaceLogClient.prototype.send_loadDistinctIntegerColumn = function(table, column, where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDistinctIntegerColumn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    table: table,
    column: column,
    where: where
  };
  var args = new IFaceLog_loadDistinctIntegerColumn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDistinctIntegerColumn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDistinctIntegerColumn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDistinctIntegerColumn failed: unknown result');
};
IFaceLogClient.prototype.loadDistinctStringColumn = function(table, column, where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDistinctStringColumn(table, column, where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDistinctStringColumn(table, column, where);
  }
};

IFaceLogClient.prototype.send_loadDistinctStringColumn = function(table, column, where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDistinctStringColumn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    table: table,
    column: column,
    where: where
  };
  var args = new IFaceLog_loadDistinctStringColumn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDistinctStringColumn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDistinctStringColumn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDistinctStringColumn failed: unknown result');
};
IFaceLogClient.prototype.loadFeatureMd5ByUpdate = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadFeatureMd5ByUpdate(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadFeatureMd5ByUpdate(timestamp);
  }
};

IFaceLogClient.prototype.send_loadFeatureMd5ByUpdate = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadFeatureMd5ByUpdate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadFeatureMd5ByUpdate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadFeatureMd5ByUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadFeatureMd5ByUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadFeatureMd5ByUpdate failed: unknown result');
};
IFaceLogClient.prototype.loadFeatureMd5ByUpdateTimeStr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadFeatureMd5ByUpdateTimeStr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadFeatureMd5ByUpdateTimeStr(timestamp);
  }
};

IFaceLogClient.prototype.send_loadFeatureMd5ByUpdateTimeStr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadFeatureMd5ByUpdateTimeStr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadFeatureMd5ByUpdateTimeStr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadFeatureMd5ByUpdateTimeStr failed: unknown result');
};
IFaceLogClient.prototype.loadLogByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadLogLightByVerifyTime = function(timestamp, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogLightByVerifyTime(timestamp, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogLightByVerifyTime(timestamp, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogLightByVerifyTime = function(timestamp, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogLightByVerifyTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByVerifyTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogLightByVerifyTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogLightByVerifyTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogLightByVerifyTime failed: unknown result');
};
IFaceLogClient.prototype.loadLogLightByVerifyTimeTimestr = function(timestamp, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogLightByVerifyTimeTimestr(timestamp, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogLightByVerifyTimeTimestr(timestamp, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogLightByVerifyTimeTimestr = function(timestamp, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogLightByVerifyTimeTimestr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByVerifyTimeTimestr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogLightByVerifyTimeTimestr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogLightByVerifyTimeTimestr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogLightByVerifyTimeTimestr failed: unknown result');
};
IFaceLogClient.prototype.loadLogLightByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogLightByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogLightByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogLightByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogLightByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogLightByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogLightByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogLightByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPermitByUpdate = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPermitByUpdate(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPermitByUpdate(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPermitByUpdate = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPermitByUpdate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPermitByUpdate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPermitByUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPermitByUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPermitByUpdate failed: unknown result');
};
IFaceLogClient.prototype.loadPermitByUpdateTimestr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPermitByUpdateTimestr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPermitByUpdateTimestr(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPermitByUpdateTimestr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPermitByUpdateTimestr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPermitByUpdateTimestr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPermitByUpdateTimestr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPermitByUpdateTimestr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPermitByUpdateTimestr failed: unknown result');
};
IFaceLogClient.prototype.loadPersonByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadPersonByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadPersonByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonGroupByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonGroupByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonGroupByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadPersonGroupByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadPersonGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonGroupIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonGroupIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonGroupIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadPersonGroupIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonGroupIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadPersonGroupIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonGroupIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonGroupIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonGroupIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonIdByUpdateTime = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonIdByUpdateTime(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonIdByUpdateTime(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByUpdateTime = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonIdByUpdateTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPersonIdByUpdateTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonIdByUpdateTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonIdByUpdateTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonIdByUpdateTime failed: unknown result');
};
IFaceLogClient.prototype.loadPersonIdByUpdateTimeTimeStr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonIdByUpdateTimeTimeStr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonIdByUpdateTimeTimeStr(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByUpdateTimeTimeStr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonIdByUpdateTimeTimeStr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonIdByUpdateTimeTimeStr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonIdByUpdateTimeTimeStr failed: unknown result');
};
IFaceLogClient.prototype.loadPersonIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadPersonIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadUpdatedPersons = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadUpdatedPersons(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadUpdatedPersons(timestamp);
  }
};

IFaceLogClient.prototype.send_loadUpdatedPersons = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadUpdatedPersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadUpdatedPersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadUpdatedPersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadUpdatedPersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadUpdatedPersons failed: unknown result');
};
IFaceLogClient.prototype.loadUpdatedPersonsTimestr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadUpdatedPersonsTimestr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadUpdatedPersonsTimestr(timestamp);
  }
};

IFaceLogClient.prototype.send_loadUpdatedPersonsTimestr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadUpdatedPersonsTimestr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadUpdatedPersonsTimestr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadUpdatedPersonsTimestr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadUpdatedPersonsTimestr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadUpdatedPersonsTimestr failed: unknown result');
};
IFaceLogClient.prototype.offline = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offline(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offline(token);
  }
};

IFaceLogClient.prototype.send_offline = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offline', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_offline_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_offline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_offline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.online = function(device, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_online(device);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_online(device);
  }
};

IFaceLogClient.prototype.send_online = function(device) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('online', Thrift.MessageType.CALL, this.seqid());
  var params = {
    device: device
  };
  var args = new IFaceLog_online_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_online = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_online_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('online failed: unknown result');
};
IFaceLogClient.prototype.registerDevice = function(newDevice, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerDevice(newDevice);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerDevice(newDevice);
  }
};

IFaceLogClient.prototype.send_registerDevice = function(newDevice) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    newDevice: newDevice
  };
  var args = new IFaceLog_registerDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_registerDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_registerDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerDevice failed: unknown result');
};
IFaceLogClient.prototype.releasePersonToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releasePersonToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releasePersonToken(token);
  }
};

IFaceLogClient.prototype.send_releasePersonToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releasePersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_releasePersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_releasePersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_releasePersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.releaseRootToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseRootToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseRootToken(token);
  }
};

IFaceLogClient.prototype.send_releaseRootToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_releaseRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_releaseRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_releaseRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.releaseUserToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseUserToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseUserToken(token);
  }
};

IFaceLogClient.prototype.send_releaseUserToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseUserToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_releaseUserToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_releaseUserToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_releaseUserToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.replaceFeature = function(personId, featureMd5, deleteOldFeatureImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
  }
};

IFaceLogClient.prototype.send_replaceFeature = function(personId, featureMd5, deleteOldFeatureImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('replaceFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    featureMd5: featureMd5,
    deleteOldFeatureImage: deleteOldFeatureImage,
    token: token
  };
  var args = new IFaceLog_replaceFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_replaceFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_replaceFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.rootGroupOfDevice = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rootGroupOfDevice(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rootGroupOfDevice(deviceId);
  }
};

IFaceLogClient.prototype.send_rootGroupOfDevice = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rootGroupOfDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_rootGroupOfDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_rootGroupOfDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_rootGroupOfDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rootGroupOfDevice failed: unknown result');
};
IFaceLogClient.prototype.rootGroupOfPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rootGroupOfPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rootGroupOfPerson(personId);
  }
};

IFaceLogClient.prototype.send_rootGroupOfPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rootGroupOfPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_rootGroupOfPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_rootGroupOfPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_rootGroupOfPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rootGroupOfPerson failed: unknown result');
};
IFaceLogClient.prototype.runCmd = function(target, group, cmdpath, jsonArgs, ackChannel, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_runCmd(target, group, cmdpath, jsonArgs, ackChannel, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_runCmd(target, group, cmdpath, jsonArgs, ackChannel, token);
  }
};

IFaceLogClient.prototype.send_runCmd = function(target, group, cmdpath, jsonArgs, ackChannel, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('runCmd', Thrift.MessageType.CALL, this.seqid());
  var params = {
    target: target,
    group: group,
    cmdpath: cmdpath,
    jsonArgs: jsonArgs,
    ackChannel: ackChannel,
    token: token
  };
  var args = new IFaceLog_runCmd_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_runCmd = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_runCmd_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('runCmd failed: unknown result');
};
IFaceLogClient.prototype.runTask = function(taskQueue, cmdpath, jsonArgs, ackChannel, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_runTask(taskQueue, cmdpath, jsonArgs, ackChannel, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_runTask(taskQueue, cmdpath, jsonArgs, ackChannel, token);
  }
};

IFaceLogClient.prototype.send_runTask = function(taskQueue, cmdpath, jsonArgs, ackChannel, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('runTask', Thrift.MessageType.CALL, this.seqid());
  var params = {
    taskQueue: taskQueue,
    cmdpath: cmdpath,
    jsonArgs: jsonArgs,
    ackChannel: ackChannel,
    token: token
  };
  var args = new IFaceLog_runTask_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_runTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_runTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('runTask failed: unknown result');
};
IFaceLogClient.prototype.saveDevice = function(deviceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveDevice(deviceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveDevice(deviceBean, token);
  }
};

IFaceLogClient.prototype.send_saveDevice = function(deviceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceBean: deviceBean,
    token: token
  };
  var args = new IFaceLog_saveDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveDevice failed: unknown result');
};
IFaceLogClient.prototype.saveDeviceGroup = function(deviceGroupBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveDeviceGroup(deviceGroupBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveDeviceGroup(deviceGroupBean, token);
  }
};

IFaceLogClient.prototype.send_saveDeviceGroup = function(deviceGroupBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupBean: deviceGroupBean,
    token: token
  };
  var args = new IFaceLog_saveDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.savePermit = function(permitBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePermit(permitBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePermit(permitBean, token);
  }
};

IFaceLogClient.prototype.send_savePermit = function(permitBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    permitBean: permitBean,
    token: token
  };
  var args = new IFaceLog_savePermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePermit failed: unknown result');
};
IFaceLogClient.prototype.savePermitWithSchedule = function(deviceGroupId, personGroupId, schedule, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePermitWithSchedule(deviceGroupId, personGroupId, schedule, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePermitWithSchedule(deviceGroupId, personGroupId, schedule, token);
  }
};

IFaceLogClient.prototype.send_savePermitWithSchedule = function(deviceGroupId, personGroupId, schedule, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePermitWithSchedule', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    personGroupId: personGroupId,
    schedule: schedule,
    token: token
  };
  var args = new IFaceLog_savePermitWithSchedule_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePermitWithSchedule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePermitWithSchedule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePermitWithSchedule failed: unknown result');
};
IFaceLogClient.prototype.savePerson = function(personBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePerson(personBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePerson(personBean, token);
  }
};

IFaceLogClient.prototype.send_savePerson = function(personBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    token: token
  };
  var args = new IFaceLog_savePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePerson failed: unknown result');
};
IFaceLogClient.prototype.savePersonFull = function(personBean, idPhoto, feature, featureVersion, featureImage, faceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonFull(personBean, idPhoto, feature, featureVersion, featureImage, faceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonFull(personBean, idPhoto, feature, featureVersion, featureImage, faceBean, token);
  }
};

IFaceLogClient.prototype.send_savePersonFull = function(personBean, idPhoto, feature, featureVersion, featureImage, faceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonFull', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    feature: feature,
    featureVersion: featureVersion,
    featureImage: featureImage,
    faceBean: faceBean,
    token: token
  };
  var args = new IFaceLog_savePersonFull_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonFull failed: unknown result');
};
IFaceLogClient.prototype.savePersonGroup = function(personGroupBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonGroup(personGroupBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonGroup(personGroupBean, token);
  }
};

IFaceLogClient.prototype.send_savePersonGroup = function(personGroupBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupBean: personGroupBean,
    token: token
  };
  var args = new IFaceLog_savePersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonGroup failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhoto = function(personBean, idPhoto, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhoto(personBean, idPhoto, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhoto(personBean, idPhoto, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhoto = function(personBean, idPhoto, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhoto', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhoto_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhoto = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhoto_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhoto failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeature = function(personBean, idPhoto, featureBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeature(personBean, idPhoto, featureBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeature(personBean, idPhoto, featureBean, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeature = function(personBean, idPhoto, featureBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    featureBean: featureBean,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeature failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureMultiFaces = function(personBean, idPhoto, feature, featureVersion, faceBeans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureMultiFaces(personBean, idPhoto, feature, featureVersion, faceBeans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureMultiFaces(personBean, idPhoto, feature, featureVersion, faceBeans, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureMultiFaces = function(personBean, idPhoto, feature, featureVersion, faceBeans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureMultiFaces', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    feature: feature,
    featureVersion: featureVersion,
    faceBeans: faceBeans,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureMultiFaces = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureMultiFaces failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureMultiImage = function(personBean, idPhoto, feature, featureVersion, photos, faces, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureMultiImage(personBean, idPhoto, feature, featureVersion, photos, faces, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureMultiImage(personBean, idPhoto, feature, featureVersion, photos, faces, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureMultiImage = function(personBean, idPhoto, feature, featureVersion, photos, faces, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureMultiImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    feature: feature,
    featureVersion: featureVersion,
    photos: photos,
    faces: faces,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureMultiImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureMultiImage failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureSaved = function(personBean, idPhotoMd5, featureMd5, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureSaved(personBean, idPhotoMd5, featureMd5, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureSaved(personBean, idPhotoMd5, featureMd5, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureSaved = function(personBean, idPhotoMd5, featureMd5, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureSaved', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhotoMd5: idPhotoMd5,
    featureMd5: featureMd5,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureSaved_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureSaved = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureSaved failed: unknown result');
};
IFaceLogClient.prototype.savePersons = function(persons, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersons(persons, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersons(persons, token);
  }
};

IFaceLogClient.prototype.send_savePersons = function(persons, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    persons: persons,
    token: token
  };
  var args = new IFaceLog_savePersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.savePersonsWithPhoto = function(photos, persons, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonsWithPhoto(photos, persons, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonsWithPhoto(photos, persons, token);
  }
};

IFaceLogClient.prototype.send_savePersonsWithPhoto = function(photos, persons, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonsWithPhoto', Thrift.MessageType.CALL, this.seqid());
  var params = {
    photos: photos,
    persons: persons,
    token: token
  };
  var args = new IFaceLog_savePersonsWithPhoto_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonsWithPhoto = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonsWithPhoto_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonsWithPhoto failed: unknown result');
};
IFaceLogClient.prototype.saveServiceConfig = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveServiceConfig(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveServiceConfig(token);
  }
};

IFaceLogClient.prototype.send_saveServiceConfig = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveServiceConfig', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_saveServiceConfig_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveServiceConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveServiceConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.sdkTaskQueueOf = function(task, sdkVersion, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sdkTaskQueueOf(task, sdkVersion, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sdkTaskQueueOf(task, sdkVersion, token);
  }
};

IFaceLogClient.prototype.send_sdkTaskQueueOf = function(task, sdkVersion, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sdkTaskQueueOf', Thrift.MessageType.CALL, this.seqid());
  var params = {
    task: task,
    sdkVersion: sdkVersion,
    token: token
  };
  var args = new IFaceLog_sdkTaskQueueOf_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_sdkTaskQueueOf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_sdkTaskQueueOf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sdkTaskQueueOf failed: unknown result');
};
IFaceLogClient.prototype.setPersonExpiryDate = function(personId, expiryDate, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPersonExpiryDate(personId, expiryDate, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPersonExpiryDate(personId, expiryDate, token);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDate = function(personId, expiryDate, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPersonExpiryDate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setPersonExpiryDate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setPersonExpiryDate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setPersonExpiryDateList = function(personIdList, expiryDate, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPersonExpiryDateList(personIdList, expiryDate, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPersonExpiryDateList(personIdList, expiryDate, token);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDateList = function(personIdList, expiryDate, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPersonExpiryDateList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDateList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setPersonExpiryDateList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setPersonExpiryDateList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setPersonExpiryDateTimeStr = function(personId, expiryDate, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPersonExpiryDateTimeStr(personId, expiryDate, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPersonExpiryDateTimeStr(personId, expiryDate, token);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDateTimeStr = function(personId, expiryDate, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPersonExpiryDateTimeStr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDateTimeStr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setPersonExpiryDateTimeStr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setPersonExpiryDateTimeStr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setProperties = function(config, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setProperties(config, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setProperties(config, token);
  }
};

IFaceLogClient.prototype.send_setProperties = function(config, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setProperties', Thrift.MessageType.CALL, this.seqid());
  var params = {
    config: config,
    token: token
  };
  var args = new IFaceLog_setProperties_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setProperties = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setProperties_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setProperty = function(key, value, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setProperty(key, value, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setProperty(key, value, token);
  }
};

IFaceLogClient.prototype.send_setProperty = function(key, value, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setProperty', Thrift.MessageType.CALL, this.seqid());
  var params = {
    key: key,
    value: value,
    token: token
  };
  var args = new IFaceLog_setProperty_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.taskQueueOf = function(task, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_taskQueueOf(task, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_taskQueueOf(task, token);
  }
};

IFaceLogClient.prototype.send_taskQueueOf = function(task, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('taskQueueOf', Thrift.MessageType.CALL, this.seqid());
  var params = {
    task: task,
    token: token
  };
  var args = new IFaceLog_taskQueueOf_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_taskQueueOf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_taskQueueOf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('taskQueueOf failed: unknown result');
};
IFaceLogClient.prototype.unbindBorder = function(personGroupId, deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unbindBorder(personGroupId, deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unbindBorder(personGroupId, deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_unbindBorder = function(personGroupId, deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unbindBorder', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_unbindBorder_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_unbindBorder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_unbindBorder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.unregisterDevice = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregisterDevice(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregisterDevice(token);
  }
};

IFaceLogClient.prototype.send_unregisterDevice = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unregisterDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_unregisterDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_unregisterDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_unregisterDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.updateDevice = function(deviceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDevice(deviceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDevice(deviceBean, token);
  }
};

IFaceLogClient.prototype.send_updateDevice = function(deviceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceBean: deviceBean,
    token: token
  };
  var args = new IFaceLog_updateDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_updateDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_updateDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateDevice failed: unknown result');
};
IFaceLogClient.prototype.version = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_version();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_version();
  }
};

IFaceLogClient.prototype.send_version = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('version', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_version_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('version failed: unknown result');
};
IFaceLogClient.prototype.versionInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionInfo();
  }
};

IFaceLogClient.prototype.send_versionInfo = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_versionInfo_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_versionInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_versionInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionInfo failed: unknown result');
};
var IFaceLogProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
IFaceLogProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
IFaceLogProcessor.prototype.process_addFeature = function(seqid, input, output) {
  var args = new IFaceLog_addFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFeature.length === 6) {
    Q.fcall(this._handler.addFeature.bind(this._handler), args.feature, args.featureVersion, args.personId, args.faecBeans, args.removed, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addFeature_result({success: result});
        output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addFeature_result(err);
          output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFeature(args.feature, args.featureVersion, args.personId, args.faecBeans, args.removed, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addFeatureMulti = function(seqid, input, output) {
  var args = new IFaceLog_addFeatureMulti_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFeatureMulti.length === 7) {
    Q.fcall(this._handler.addFeatureMulti.bind(this._handler), args.feature, args.featureVersion, args.personId, args.photos, args.faces, args.removed, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addFeatureMulti_result({success: result});
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addFeatureMulti_result(err);
          output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFeatureMulti(args.feature, args.featureVersion, args.personId, args.photos, args.faces, args.removed, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addFeatureMulti_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addFeatureWithImage = function(seqid, input, output) {
  var args = new IFaceLog_addFeatureWithImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFeatureWithImage.length === 8) {
    Q.fcall(this._handler.addFeatureWithImage.bind(this._handler), args.feature, args.featureVersion, args.personId, args.asIdPhotoIfAbsent, args.featurePhoto, args.faceBean, args.removed, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addFeatureWithImage_result({success: result});
        output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addFeatureWithImage_result(err);
          output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFeatureWithImage(args.feature, args.featureVersion, args.personId, args.asIdPhotoIfAbsent, args.featurePhoto, args.faceBean, args.removed, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addFeatureWithImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addImage = function(seqid, input, output) {
  var args = new IFaceLog_addImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addImage.length === 5) {
    Q.fcall(this._handler.addImage.bind(this._handler), args.imageData, args.deviceId, args.faceBean, args.personId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addImage_result({success: result});
        output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addImage_result(err);
          output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addImage(args.imageData, args.deviceId, args.faceBean, args.personId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLog = function(seqid, input, output) {
  var args = new IFaceLog_addLog_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLog.length === 2) {
    Q.fcall(this._handler.addLog.bind(this._handler), args.logBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLog_result({success: result});
        output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLog_result(err);
          output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLog", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLog(args.logBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLog_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLog", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLogFull = function(seqid, input, output) {
  var args = new IFaceLog_addLogFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLogFull.length === 4) {
    Q.fcall(this._handler.addLogFull.bind(this._handler), args.logBean, args.faceBean, args.featureImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLogFull_result({success: result});
        output.writeMessageBegin("addLogFull", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLogFull_result(err);
          output.writeMessageBegin("addLogFull", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLogFull", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLogFull(args.logBean, args.faceBean, args.featureImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLogFull_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLogFull", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLogFull", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLogs = function(seqid, input, output) {
  var args = new IFaceLog_addLogs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLogs.length === 2) {
    Q.fcall(this._handler.addLogs.bind(this._handler), args.beans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLogs_result({success: result});
        output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLogs_result(err);
          output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLogs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLogs(args.beans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLogs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLogs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLogsFull = function(seqid, input, output) {
  var args = new IFaceLog_addLogsFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLogsFull.length === 4) {
    Q.fcall(this._handler.addLogsFull.bind(this._handler), args.logBeans, args.faceBeans, args.featureImages, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLogsFull_result({success: result});
        output.writeMessageBegin("addLogsFull", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLogsFull_result(err);
          output.writeMessageBegin("addLogsFull", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLogsFull", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLogsFull(args.logBeans, args.faceBeans, args.featureImages, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLogsFull_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLogsFull", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLogsFull", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyAckChannel = function(seqid, input, output) {
  var args = new IFaceLog_applyAckChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyAckChannel.length === 1) {
    Q.fcall(this._handler.applyAckChannel.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_applyAckChannel_result({success: result});
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyAckChannel_result(err);
          output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyAckChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyAckChannel(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyAckChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyAckChannelWithDuration = function(seqid, input, output) {
  var args = new IFaceLog_applyAckChannelWithDuration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyAckChannelWithDuration.length === 2) {
    Q.fcall(this._handler.applyAckChannelWithDuration.bind(this._handler), args.duration, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_applyAckChannelWithDuration_result({success: result});
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyAckChannelWithDuration_result(err);
          output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyAckChannelWithDuration(args.duration, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyAckChannelWithDuration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyCmdSn = function(seqid, input, output) {
  var args = new IFaceLog_applyCmdSn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyCmdSn.length === 1) {
    Q.fcall(this._handler.applyCmdSn.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_applyCmdSn_result({success: result});
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyCmdSn_result(err);
          output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyCmdSn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyCmdSn(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyCmdSn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyPersonToken = function(seqid, input, output) {
  var args = new IFaceLog_applyPersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyPersonToken.length === 3) {
    Q.fcall(this._handler.applyPersonToken.bind(this._handler), args.personId, args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_applyPersonToken_result({success: result});
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyPersonToken_result(err);
          output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyPersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyPersonToken(args.personId, args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyPersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyRootToken = function(seqid, input, output) {
  var args = new IFaceLog_applyRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyRootToken.length === 2) {
    Q.fcall(this._handler.applyRootToken.bind(this._handler), args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_applyRootToken_result({success: result});
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyRootToken_result(err);
          output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyRootToken(args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyUserToken = function(seqid, input, output) {
  var args = new IFaceLog_applyUserToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyUserToken.length === 3) {
    Q.fcall(this._handler.applyUserToken.bind(this._handler), args.userid, args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_applyUserToken_result({success: result});
        output.writeMessageBegin("applyUserToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyUserToken_result(err);
          output.writeMessageBegin("applyUserToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyUserToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyUserToken(args.userid, args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyUserToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyUserToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyUserToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_bindBorder = function(seqid, input, output) {
  var args = new IFaceLog_bindBorder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.bindBorder.length === 3) {
    Q.fcall(this._handler.bindBorder.bind(this._handler), args.personGroupId, args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_bindBorder_result({success: result});
        output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_bindBorder_result(err);
          output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("bindBorder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.bindBorder(args.personGroupId, args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_bindBorder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("bindBorder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_childListForDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_childListForDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.childListForDeviceGroup.length === 1) {
    Q.fcall(this._handler.childListForDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_childListForDeviceGroup_result({success: result});
        output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_childListForDeviceGroup_result(err);
          output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.childListForDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_childListForDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_childListForPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_childListForPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.childListForPersonGroup.length === 1) {
    Q.fcall(this._handler.childListForPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_childListForPersonGroup_result({success: result});
        output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_childListForPersonGroup_result(err);
          output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.childListForPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_childListForPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countDeviceByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countDeviceByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countDeviceByWhere.length === 1) {
    Q.fcall(this._handler.countDeviceByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countDeviceByWhere_result({success: result});
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countDeviceByWhere_result(err);
          output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countDeviceByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countDeviceByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countDeviceGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countDeviceGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countDeviceGroupByWhere.length === 1) {
    Q.fcall(this._handler.countDeviceGroupByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countDeviceGroupByWhere_result({success: result});
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countDeviceGroupByWhere_result(err);
          output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countDeviceGroupByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countDeviceGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countLogByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogByWhere.length === 1) {
    Q.fcall(this._handler.countLogByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogByWhere_result({success: result});
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogByWhere_result(err);
          output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogLightByVerifyTime = function(seqid, input, output) {
  var args = new IFaceLog_countLogLightByVerifyTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogLightByVerifyTime.length === 1) {
    Q.fcall(this._handler.countLogLightByVerifyTime.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogLightByVerifyTime_result({success: result});
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogLightByVerifyTime_result(err);
          output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogLightByVerifyTime(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogLightByVerifyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogLightByVerifyTimeTimestr = function(seqid, input, output) {
  var args = new IFaceLog_countLogLightByVerifyTimeTimestr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogLightByVerifyTimeTimestr.length === 1) {
    Q.fcall(this._handler.countLogLightByVerifyTimeTimestr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogLightByVerifyTimeTimestr_result({success: result});
        output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogLightByVerifyTimeTimestr_result(err);
          output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogLightByVerifyTimeTimestr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogLightByVerifyTimeTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogLightByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countLogLightByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogLightByWhere.length === 1) {
    Q.fcall(this._handler.countLogLightByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogLightByWhere_result({success: result});
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogLightByWhere_result(err);
          output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogLightByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogLightByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countPersonByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countPersonByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countPersonByWhere.length === 1) {
    Q.fcall(this._handler.countPersonByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countPersonByWhere_result({success: result});
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countPersonByWhere_result(err);
          output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countPersonByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countPersonByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countPersonGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countPersonGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countPersonGroupByWhere.length === 1) {
    Q.fcall(this._handler.countPersonGroupByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countPersonGroupByWhere_result({success: result});
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countPersonGroupByWhere_result(err);
          output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countPersonGroupByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countPersonGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countPersonLog = function(seqid, input, output) {
  var args = new IFaceLog_countPersonLog_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countPersonLog.length === 3) {
    Q.fcall(this._handler.countPersonLog.bind(this._handler), args.personId, args.startDate, args.endDate)
      .then(function(result) {
        var result_obj = new IFaceLog_countPersonLog_result({success: result});
        output.writeMessageBegin("countPersonLog", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countPersonLog_result(err);
          output.writeMessageBegin("countPersonLog", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countPersonLog", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countPersonLog(args.personId, args.startDate, args.endDate, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countPersonLog_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countPersonLog", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countPersonLog", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countPersonLogTimeStr = function(seqid, input, output) {
  var args = new IFaceLog_countPersonLogTimeStr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countPersonLogTimeStr.length === 3) {
    Q.fcall(this._handler.countPersonLogTimeStr.bind(this._handler), args.personId, args.startDate, args.endDate)
      .then(function(result) {
        var result_obj = new IFaceLog_countPersonLogTimeStr_result({success: result});
        output.writeMessageBegin("countPersonLogTimeStr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countPersonLogTimeStr_result(err);
          output.writeMessageBegin("countPersonLogTimeStr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countPersonLogTimeStr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countPersonLogTimeStr(args.personId, args.startDate, args.endDate, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countPersonLogTimeStr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countPersonLogTimeStr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countPersonLogTimeStr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteAllFeaturesByPersonId = function(seqid, input, output) {
  var args = new IFaceLog_deleteAllFeaturesByPersonId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllFeaturesByPersonId.length === 3) {
    Q.fcall(this._handler.deleteAllFeaturesByPersonId.bind(this._handler), args.personId, args.deleteImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteAllFeaturesByPersonId_result({success: result});
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteAllFeaturesByPersonId_result(err);
          output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAllFeaturesByPersonId(args.personId, args.deleteImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteAllFeaturesByPersonId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteDevice = function(seqid, input, output) {
  var args = new IFaceLog_deleteDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteDevice.length === 2) {
    Q.fcall(this._handler.deleteDevice.bind(this._handler), args.id, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteDevice_result({success: result});
        output.writeMessageBegin("deleteDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteDevice_result(err);
          output.writeMessageBegin("deleteDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteDevice(args.id, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteDeviceByMac = function(seqid, input, output) {
  var args = new IFaceLog_deleteDeviceByMac_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteDeviceByMac.length === 2) {
    Q.fcall(this._handler.deleteDeviceByMac.bind(this._handler), args.mac, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteDeviceByMac_result({success: result});
        output.writeMessageBegin("deleteDeviceByMac", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteDeviceByMac_result(err);
          output.writeMessageBegin("deleteDeviceByMac", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteDeviceByMac", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteDeviceByMac(args.mac, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteDeviceByMac_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteDeviceByMac", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteDeviceByMac", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_deleteDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteDeviceGroup.length === 2) {
    Q.fcall(this._handler.deleteDeviceGroup.bind(this._handler), args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteDeviceGroup_result({success: result});
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteDeviceGroup_result(err);
          output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteDeviceGroup(args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteFeature = function(seqid, input, output) {
  var args = new IFaceLog_deleteFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteFeature.length === 3) {
    Q.fcall(this._handler.deleteFeature.bind(this._handler), args.featureMd5, args.deleteImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteFeature_result({success: result});
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteFeature_result(err);
          output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteFeature(args.featureMd5, args.deleteImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteGroupPermitOnDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_deleteGroupPermitOnDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteGroupPermitOnDeviceGroup.length === 2) {
    Q.fcall(this._handler.deleteGroupPermitOnDeviceGroup.bind(this._handler), args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteGroupPermitOnDeviceGroup_result({success: result});
        output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteGroupPermitOnDeviceGroup_result(err);
          output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteGroupPermitOnDeviceGroup(args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteGroupPermitOnDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteImage = function(seqid, input, output) {
  var args = new IFaceLog_deleteImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteImage.length === 2) {
    Q.fcall(this._handler.deleteImage.bind(this._handler), args.imageMd5, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteImage_result({success: result});
        output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteImage_result(err);
          output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteImage(args.imageMd5, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePermitById = function(seqid, input, output) {
  var args = new IFaceLog_deletePermitById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePermitById.length === 3) {
    Q.fcall(this._handler.deletePermitById.bind(this._handler), args.deviceGroupId, args.personGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePermitById_result({success: result});
        output.writeMessageBegin("deletePermitById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePermitById_result(err);
          output.writeMessageBegin("deletePermitById", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePermitById", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePermitById(args.deviceGroupId, args.personGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePermitById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePermitById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePermitById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePerson = function(seqid, input, output) {
  var args = new IFaceLog_deletePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePerson.length === 2) {
    Q.fcall(this._handler.deletePerson.bind(this._handler), args.personId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePerson_result({success: result});
        output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePerson_result(err);
          output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePerson(args.personId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonByPapersNum.length === 2) {
    Q.fcall(this._handler.deletePersonByPapersNum.bind(this._handler), args.papersNum, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonByPapersNum_result({success: result});
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonByPapersNum_result(err);
          output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonByPapersNum(args.papersNum, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonGroup.length === 2) {
    Q.fcall(this._handler.deletePersonGroup.bind(this._handler), args.personGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonGroup_result({success: result});
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonGroup_result(err);
          output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonGroup(args.personGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonGroupPermit = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonGroupPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonGroupPermit.length === 2) {
    Q.fcall(this._handler.deletePersonGroupPermit.bind(this._handler), args.personGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonGroupPermit_result({success: result});
        output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonGroupPermit_result(err);
          output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonGroupPermit(args.personGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonGroupPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersons = function(seqid, input, output) {
  var args = new IFaceLog_deletePersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersons.length === 2) {
    Q.fcall(this._handler.deletePersons.bind(this._handler), args.personIdList, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersons_result({success: result});
        output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersons_result(err);
          output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersons(args.personIdList, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonsByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonsByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonsByPapersNum.length === 2) {
    Q.fcall(this._handler.deletePersonsByPapersNum.bind(this._handler), args.papersNumlist, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonsByPapersNum_result({success: result});
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonsByPapersNum_result(err);
          output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonsByPapersNum(args.papersNumlist, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonsByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_disablePerson = function(seqid, input, output) {
  var args = new IFaceLog_disablePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disablePerson.length === 6) {
    Q.fcall(this._handler.disablePerson.bind(this._handler), args.personId, args.moveToGroupId, args.deletePhoto, args.deleteFeature, args.deleteLog, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_disablePerson_result({success: result});
        output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_disablePerson_result(err);
          output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disablePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disablePerson(args.personId, args.moveToGroupId, args.deletePhoto, args.deleteFeature, args.deleteLog, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_disablePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disablePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_disablePersonList = function(seqid, input, output) {
  var args = new IFaceLog_disablePersonList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disablePersonList.length === 2) {
    Q.fcall(this._handler.disablePersonList.bind(this._handler), args.personIdList, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_disablePersonList_result({success: result});
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_disablePersonList_result(err);
          output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disablePersonList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disablePersonList(args.personIdList, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_disablePersonList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsDevice = function(seqid, input, output) {
  var args = new IFaceLog_existsDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsDevice.length === 1) {
    Q.fcall(this._handler.existsDevice.bind(this._handler), args.id)
      .then(function(result) {
        var result_obj = new IFaceLog_existsDevice_result({success: result});
        output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsDevice_result(err);
          output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsDevice(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsFeature = function(seqid, input, output) {
  var args = new IFaceLog_existsFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsFeature.length === 1) {
    Q.fcall(this._handler.existsFeature.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_existsFeature_result({success: result});
        output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsFeature_result(err);
          output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsFeature(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsImage = function(seqid, input, output) {
  var args = new IFaceLog_existsImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsImage.length === 1) {
    Q.fcall(this._handler.existsImage.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_existsImage_result({success: result});
        output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsImage_result(err);
          output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsImage(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsPerson = function(seqid, input, output) {
  var args = new IFaceLog_existsPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsPerson.length === 1) {
    Q.fcall(this._handler.existsPerson.bind(this._handler), args.persionId)
      .then(function(result) {
        var result_obj = new IFaceLog_existsPerson_result({success: result});
        output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsPerson_result(err);
          output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsPerson(args.persionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevice = function(seqid, input, output) {
  var args = new IFaceLog_getDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevice.length === 1) {
    Q.fcall(this._handler.getDevice.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevice_result({success: result});
        output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevice_result(err);
          output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevice(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceByMac = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceByMac_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceByMac.length === 1) {
    Q.fcall(this._handler.getDeviceByMac.bind(this._handler), args.mac)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceByMac_result({success: result});
        output.writeMessageBegin("getDeviceByMac", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceByMac_result(err);
          output.writeMessageBegin("getDeviceByMac", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceByMac", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceByMac(args.mac, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceByMac_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceByMac", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceByMac", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroup.length === 1) {
    Q.fcall(this._handler.getDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroup_result({success: result});
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroup_result(err);
          output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroups = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroups.length === 1) {
    Q.fcall(this._handler.getDeviceGroups.bind(this._handler), args.groupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroups_result({success: result});
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroups_result(err);
          output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroups(args.groupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsBelongs = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsBelongs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsBelongs.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsBelongs.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsBelongs_result({success: result});
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsBelongs_result(err);
          output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsBelongs(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsBelongs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsPermit = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsPermit.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsPermit.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsPermit_result({success: result});
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsPermit_result(err);
          output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsPermit(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsPermittedBy = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsPermittedBy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsPermittedBy.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsPermittedBy.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsPermittedBy_result({success: result});
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsPermittedBy_result(err);
          output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsPermittedBy(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsPermittedBy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceIdOfFeature = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceIdOfFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceIdOfFeature.length === 1) {
    Q.fcall(this._handler.getDeviceIdOfFeature.bind(this._handler), args.featureMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceIdOfFeature_result({success: result});
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceIdOfFeature_result(err);
          output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceIdOfFeature(args.featureMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceIdOfFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevices = function(seqid, input, output) {
  var args = new IFaceLog_getDevices_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevices.length === 1) {
    Q.fcall(this._handler.getDevices.bind(this._handler), args.idList)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevices_result({success: result});
        output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevices_result(err);
          output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevices", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevices(args.idList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevices_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevices", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevicesOfGroup = function(seqid, input, output) {
  var args = new IFaceLog_getDevicesOfGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevicesOfGroup.length === 1) {
    Q.fcall(this._handler.getDevicesOfGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevicesOfGroup_result({success: result});
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevicesOfGroup_result(err);
          output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevicesOfGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevicesOfGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFace = function(seqid, input, output) {
  var args = new IFaceLog_getFace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFace.length === 1) {
    Q.fcall(this._handler.getFace.bind(this._handler), args.faceId)
      .then(function(result) {
        var result_obj = new IFaceLog_getFace_result({success: result});
        output.writeMessageBegin("getFace", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFace_result(err);
          output.writeMessageBegin("getFace", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFace", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFace(args.faceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFacesOfFeature = function(seqid, input, output) {
  var args = new IFaceLog_getFacesOfFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFacesOfFeature.length === 1) {
    Q.fcall(this._handler.getFacesOfFeature.bind(this._handler), args.featureMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFacesOfFeature_result({success: result});
        output.writeMessageBegin("getFacesOfFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFacesOfFeature_result(err);
          output.writeMessageBegin("getFacesOfFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFacesOfFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFacesOfFeature(args.featureMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFacesOfFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFacesOfFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFacesOfFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFacesOfImage = function(seqid, input, output) {
  var args = new IFaceLog_getFacesOfImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFacesOfImage.length === 1) {
    Q.fcall(this._handler.getFacesOfImage.bind(this._handler), args.imageMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFacesOfImage_result({success: result});
        output.writeMessageBegin("getFacesOfImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFacesOfImage_result(err);
          output.writeMessageBegin("getFacesOfImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFacesOfImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFacesOfImage(args.imageMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFacesOfImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFacesOfImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFacesOfImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeature = function(seqid, input, output) {
  var args = new IFaceLog_getFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeature.length === 1) {
    Q.fcall(this._handler.getFeature.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeature_result({success: result});
        output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeature_result(err);
          output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeature(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeatureBytes = function(seqid, input, output) {
  var args = new IFaceLog_getFeatureBytes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeatureBytes.length === 1) {
    Q.fcall(this._handler.getFeatureBytes.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeatureBytes_result({success: result});
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeatureBytes_result(err);
          output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeatureBytes(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeatureBytes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeatures = function(seqid, input, output) {
  var args = new IFaceLog_getFeatures_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeatures.length === 1) {
    Q.fcall(this._handler.getFeatures.bind(this._handler), args.md5List)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeatures_result({success: result});
        output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeatures_result(err);
          output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeatures", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeatures(args.md5List, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeatures_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeatures", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesByPersonIdAndSdkVersion = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesByPersonIdAndSdkVersion.length === 2) {
    Q.fcall(this._handler.getFeaturesByPersonIdAndSdkVersion.bind(this._handler), args.personId, args.sdkVersion)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_result({success: result});
        output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_result(err);
          output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesByPersonIdAndSdkVersion(args.personId, args.sdkVersion, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesOfImage = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesOfImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesOfImage.length === 1) {
    Q.fcall(this._handler.getFeaturesOfImage.bind(this._handler), args.imageMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesOfImage_result({success: result});
        output.writeMessageBegin("getFeaturesOfImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesOfImage_result(err);
          output.writeMessageBegin("getFeaturesOfImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesOfImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesOfImage(args.imageMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesOfImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesOfImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesOfImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesOfPerson = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesOfPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesOfPerson.length === 1) {
    Q.fcall(this._handler.getFeaturesOfPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesOfPerson_result({success: result});
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesOfPerson_result(err);
          output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesOfPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesOfPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesPermittedOnDevice = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesPermittedOnDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesPermittedOnDevice.length === 5) {
    Q.fcall(this._handler.getFeaturesPermittedOnDevice.bind(this._handler), args.deviceId, args.ignoreSchedule, args.sdkVersion, args.excludeFeatureIds, args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesPermittedOnDevice_result({success: result});
        output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesPermittedOnDevice_result(err);
          output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesPermittedOnDevice(args.deviceId, args.ignoreSchedule, args.sdkVersion, args.excludeFeatureIds, args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesPermittedOnDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getGroupPermit = function(seqid, input, output) {
  var args = new IFaceLog_getGroupPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupPermit.length === 2) {
    Q.fcall(this._handler.getGroupPermit.bind(this._handler), args.deviceId, args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getGroupPermit_result({success: result});
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getGroupPermit_result(err);
          output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupPermit(args.deviceId, args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getGroupPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getGroupPermitOnDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_getGroupPermitOnDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupPermitOnDeviceGroup.length === 2) {
    Q.fcall(this._handler.getGroupPermitOnDeviceGroup.bind(this._handler), args.deviceGroupId, args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getGroupPermitOnDeviceGroup_result({success: result});
        output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getGroupPermitOnDeviceGroup_result(err);
          output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupPermitOnDeviceGroup(args.deviceGroupId, args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getGroupPermitOnDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getGroupPermits = function(seqid, input, output) {
  var args = new IFaceLog_getGroupPermits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupPermits.length === 2) {
    Q.fcall(this._handler.getGroupPermits.bind(this._handler), args.deviceId, args.personGroupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getGroupPermits_result({success: result});
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getGroupPermits_result(err);
          output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupPermits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupPermits(args.deviceId, args.personGroupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getGroupPermits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImage = function(seqid, input, output) {
  var args = new IFaceLog_getImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImage.length === 1) {
    Q.fcall(this._handler.getImage.bind(this._handler), args.imageMD5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImage_result({success: result});
        output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImage_result(err);
          output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImage(args.imageMD5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImageBytes = function(seqid, input, output) {
  var args = new IFaceLog_getImageBytes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImageBytes.length === 1) {
    Q.fcall(this._handler.getImageBytes.bind(this._handler), args.imageMD5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImageBytes_result({success: result});
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImageBytes_result(err);
          output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImageBytes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImageBytes(args.imageMD5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImageBytes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImagesAssociatedByFeature = function(seqid, input, output) {
  var args = new IFaceLog_getImagesAssociatedByFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImagesAssociatedByFeature.length === 1) {
    Q.fcall(this._handler.getImagesAssociatedByFeature.bind(this._handler), args.featureMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImagesAssociatedByFeature_result({success: result});
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImagesAssociatedByFeature_result(err);
          output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImagesAssociatedByFeature(args.featureMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImagesAssociatedByFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getLogBeansByPersonId = function(seqid, input, output) {
  var args = new IFaceLog_getLogBeansByPersonId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLogBeansByPersonId.length === 1) {
    Q.fcall(this._handler.getLogBeansByPersonId.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getLogBeansByPersonId_result({success: result});
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getLogBeansByPersonId_result(err);
          output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLogBeansByPersonId(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getLogBeansByPersonId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPerson = function(seqid, input, output) {
  var args = new IFaceLog_getPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPerson.length === 1) {
    Q.fcall(this._handler.getPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPerson_result({success: result});
        output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPerson_result(err);
          output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonByMobilePhone = function(seqid, input, output) {
  var args = new IFaceLog_getPersonByMobilePhone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonByMobilePhone.length === 1) {
    Q.fcall(this._handler.getPersonByMobilePhone.bind(this._handler), args.mobilePhone)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonByMobilePhone_result({success: result});
        output.writeMessageBegin("getPersonByMobilePhone", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonByMobilePhone_result(err);
          output.writeMessageBegin("getPersonByMobilePhone", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonByMobilePhone", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonByMobilePhone(args.mobilePhone, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonByMobilePhone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonByMobilePhone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonByMobilePhone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_getPersonByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonByPapersNum.length === 1) {
    Q.fcall(this._handler.getPersonByPapersNum.bind(this._handler), args.papersNum)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonByPapersNum_result({success: result});
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonByPapersNum_result(err);
          output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonByPapersNum(args.papersNum, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroup.length === 1) {
    Q.fcall(this._handler.getPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroup_result({success: result});
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroup_result(err);
          output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroups = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroups.length === 1) {
    Q.fcall(this._handler.getPersonGroups.bind(this._handler), args.groupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroups_result({success: result});
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroups_result(err);
          output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroups(args.groupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroupsBelongs = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroupsBelongs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroupsBelongs.length === 1) {
    Q.fcall(this._handler.getPersonGroupsBelongs.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroupsBelongs_result({success: result});
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroupsBelongs_result(err);
          output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroupsBelongs(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroupsBelongs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroupsPermittedBy = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroupsPermittedBy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroupsPermittedBy.length === 1) {
    Q.fcall(this._handler.getPersonGroupsPermittedBy.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroupsPermittedBy_result({success: result});
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroupsPermittedBy_result(err);
          output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroupsPermittedBy(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroupsPermittedBy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonPermit = function(seqid, input, output) {
  var args = new IFaceLog_getPersonPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonPermit.length === 2) {
    Q.fcall(this._handler.getPersonPermit.bind(this._handler), args.deviceId, args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonPermit_result({success: result});
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonPermit_result(err);
          output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonPermit(args.deviceId, args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonPermits = function(seqid, input, output) {
  var args = new IFaceLog_getPersonPermits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonPermits.length === 2) {
    Q.fcall(this._handler.getPersonPermits.bind(this._handler), args.deviceId, args.personIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonPermits_result({success: result});
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonPermits_result(err);
          output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonPermits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonPermits(args.deviceId, args.personIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonPermits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersons = function(seqid, input, output) {
  var args = new IFaceLog_getPersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersons.length === 1) {
    Q.fcall(this._handler.getPersons.bind(this._handler), args.idList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersons_result({success: result});
        output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersons_result(err);
          output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersons(args.idList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonsOfGroup = function(seqid, input, output) {
  var args = new IFaceLog_getPersonsOfGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonsOfGroup.length === 1) {
    Q.fcall(this._handler.getPersonsOfGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonsOfGroup_result({success: result});
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonsOfGroup_result(err);
          output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonsOfGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonsOfGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonsPermittedOnDevice = function(seqid, input, output) {
  var args = new IFaceLog_getPersonsPermittedOnDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonsPermittedOnDevice.length === 4) {
    Q.fcall(this._handler.getPersonsPermittedOnDevice.bind(this._handler), args.deviceId, args.ignoreSchedule, args.excludePersonIds, args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonsPermittedOnDevice_result({success: result});
        output.writeMessageBegin("getPersonsPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonsPermittedOnDevice_result(err);
          output.writeMessageBegin("getPersonsPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonsPermittedOnDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonsPermittedOnDevice(args.deviceId, args.ignoreSchedule, args.excludePersonIds, args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonsPermittedOnDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonsPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonsPermittedOnDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getProperties = function(seqid, input, output) {
  var args = new IFaceLog_getProperties_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProperties.length === 2) {
    Q.fcall(this._handler.getProperties.bind(this._handler), args.prefix, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getProperties_result({success: result});
        output.writeMessageBegin("getProperties", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getProperties_result(err);
          output.writeMessageBegin("getProperties", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProperties", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProperties(args.prefix, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getProperties_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getProperties", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProperties", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getProperty = function(seqid, input, output) {
  var args = new IFaceLog_getProperty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProperty.length === 2) {
    Q.fcall(this._handler.getProperty.bind(this._handler), args.key, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getProperty_result({success: result});
        output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getProperty_result(err);
          output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProperty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProperty(args.key, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getProperty_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProperty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getRedisParameters = function(seqid, input, output) {
  var args = new IFaceLog_getRedisParameters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRedisParameters.length === 1) {
    Q.fcall(this._handler.getRedisParameters.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getRedisParameters_result({success: result});
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getRedisParameters_result(err);
          output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRedisParameters", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRedisParameters(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getRedisParameters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getServiceConfig = function(seqid, input, output) {
  var args = new IFaceLog_getServiceConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getServiceConfig.length === 1) {
    Q.fcall(this._handler.getServiceConfig.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getServiceConfig_result({success: result});
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getServiceConfig_result(err);
          output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getServiceConfig(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getServiceConfig_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getSubDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_getSubDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubDeviceGroup.length === 1) {
    Q.fcall(this._handler.getSubDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getSubDeviceGroup_result({success: result});
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getSubDeviceGroup_result(err);
          output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getSubDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getSubPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_getSubPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubPersonGroup.length === 1) {
    Q.fcall(this._handler.getSubPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getSubPersonGroup_result({success: result});
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getSubPersonGroup_result(err);
          output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getSubPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isDisable = function(seqid, input, output) {
  var args = new IFaceLog_isDisable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isDisable.length === 1) {
    Q.fcall(this._handler.isDisable.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_isDisable_result({success: result});
        output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isDisable_result(err);
          output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isDisable", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isDisable(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isDisable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isDisable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isLocal = function(seqid, input, output) {
  var args = new IFaceLog_isLocal_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isLocal.length === 0) {
    Q.fcall(this._handler.isLocal.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_isLocal_result({success: result});
        output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isLocal_result(err);
          output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isLocal", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isLocal(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isLocal_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isLocal", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidAckChannel = function(seqid, input, output) {
  var args = new IFaceLog_isValidAckChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidAckChannel.length === 1) {
    Q.fcall(this._handler.isValidAckChannel.bind(this._handler), args.ackChannel)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidAckChannel_result({success: result});
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidAckChannel_result(err);
          output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidAckChannel(args.ackChannel, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidAckChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidCmdSn = function(seqid, input, output) {
  var args = new IFaceLog_isValidCmdSn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidCmdSn.length === 1) {
    Q.fcall(this._handler.isValidCmdSn.bind(this._handler), args.cmdSn)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidCmdSn_result({success: result});
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidCmdSn_result(err);
          output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidCmdSn(args.cmdSn, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidCmdSn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidDeviceToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidDeviceToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidDeviceToken.length === 1) {
    Q.fcall(this._handler.isValidDeviceToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidDeviceToken_result({success: result});
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidDeviceToken_result(err);
          output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidDeviceToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidDeviceToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidPassword = function(seqid, input, output) {
  var args = new IFaceLog_isValidPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidPassword.length === 3) {
    Q.fcall(this._handler.isValidPassword.bind(this._handler), args.userId, args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidPassword_result({success: result});
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidPassword_result(err);
          output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidPassword", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidPassword(args.userId, args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidPassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidPersonToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidPersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidPersonToken.length === 1) {
    Q.fcall(this._handler.isValidPersonToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidPersonToken_result({success: result});
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidPersonToken_result(err);
          output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidPersonToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidPersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidRootToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidRootToken.length === 1) {
    Q.fcall(this._handler.isValidRootToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidRootToken_result({success: result});
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidRootToken_result(err);
          output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidRootToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidToken.length === 1) {
    Q.fcall(this._handler.isValidToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidToken_result({success: result});
        output.writeMessageBegin("isValidToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidToken_result(err);
          output.writeMessageBegin("isValidToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidUserToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidUserToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidUserToken.length === 1) {
    Q.fcall(this._handler.isValidUserToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidUserToken_result({success: result});
        output.writeMessageBegin("isValidUserToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidUserToken_result(err);
          output.writeMessageBegin("isValidUserToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidUserToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidUserToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidUserToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidUserToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidUserToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_listOfParentForDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_listOfParentForDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listOfParentForDeviceGroup.length === 1) {
    Q.fcall(this._handler.listOfParentForDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_listOfParentForDeviceGroup_result({success: result});
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_listOfParentForDeviceGroup_result(err);
          output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listOfParentForDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_listOfParentForDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_listOfParentForPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_listOfParentForPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listOfParentForPersonGroup.length === 1) {
    Q.fcall(this._handler.listOfParentForPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_listOfParentForPersonGroup_result({success: result});
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_listOfParentForPersonGroup_result(err);
          output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listOfParentForPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_listOfParentForPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadAllPerson = function(seqid, input, output) {
  var args = new IFaceLog_loadAllPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadAllPerson.length === 0) {
    Q.fcall(this._handler.loadAllPerson.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_loadAllPerson_result({success: result});
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadAllPerson_result(err);
          output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadAllPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadAllPerson(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadAllPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceByWhere.length === 3) {
    Q.fcall(this._handler.loadDeviceByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceByWhere_result(err);
          output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceGroupByWhere.length === 3) {
    Q.fcall(this._handler.loadDeviceGroupByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceGroupByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceGroupByWhere_result(err);
          output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceGroupByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceGroupIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceGroupIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceGroupIdByWhere.length === 1) {
    Q.fcall(this._handler.loadDeviceGroupIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceGroupIdByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceGroupIdByWhere_result(err);
          output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceGroupIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceGroupIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceIdByWhere.length === 1) {
    Q.fcall(this._handler.loadDeviceIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceIdByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceIdByWhere_result(err);
          output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDistinctIntegerColumn = function(seqid, input, output) {
  var args = new IFaceLog_loadDistinctIntegerColumn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDistinctIntegerColumn.length === 3) {
    Q.fcall(this._handler.loadDistinctIntegerColumn.bind(this._handler), args.table, args.column, args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDistinctIntegerColumn_result({success: result});
        output.writeMessageBegin("loadDistinctIntegerColumn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDistinctIntegerColumn_result(err);
          output.writeMessageBegin("loadDistinctIntegerColumn", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDistinctIntegerColumn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDistinctIntegerColumn(args.table, args.column, args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDistinctIntegerColumn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDistinctIntegerColumn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDistinctIntegerColumn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDistinctStringColumn = function(seqid, input, output) {
  var args = new IFaceLog_loadDistinctStringColumn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDistinctStringColumn.length === 3) {
    Q.fcall(this._handler.loadDistinctStringColumn.bind(this._handler), args.table, args.column, args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDistinctStringColumn_result({success: result});
        output.writeMessageBegin("loadDistinctStringColumn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDistinctStringColumn_result(err);
          output.writeMessageBegin("loadDistinctStringColumn", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDistinctStringColumn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDistinctStringColumn(args.table, args.column, args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDistinctStringColumn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDistinctStringColumn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDistinctStringColumn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadFeatureMd5ByUpdate = function(seqid, input, output) {
  var args = new IFaceLog_loadFeatureMd5ByUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadFeatureMd5ByUpdate.length === 1) {
    Q.fcall(this._handler.loadFeatureMd5ByUpdate.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadFeatureMd5ByUpdate_result({success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadFeatureMd5ByUpdate_result(err);
          output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadFeatureMd5ByUpdate(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadFeatureMd5ByUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadFeatureMd5ByUpdateTimeStr = function(seqid, input, output) {
  var args = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadFeatureMd5ByUpdateTimeStr.length === 1) {
    Q.fcall(this._handler.loadFeatureMd5ByUpdateTimeStr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_result({success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_result(err);
          output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadFeatureMd5ByUpdateTimeStr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadLogByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogByWhere.length === 3) {
    Q.fcall(this._handler.loadLogByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogByWhere_result({success: result});
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogByWhere_result(err);
          output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogLightByVerifyTime = function(seqid, input, output) {
  var args = new IFaceLog_loadLogLightByVerifyTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogLightByVerifyTime.length === 3) {
    Q.fcall(this._handler.loadLogLightByVerifyTime.bind(this._handler), args.timestamp, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogLightByVerifyTime_result({success: result});
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogLightByVerifyTime_result(err);
          output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogLightByVerifyTime(args.timestamp, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogLightByVerifyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogLightByVerifyTimeTimestr = function(seqid, input, output) {
  var args = new IFaceLog_loadLogLightByVerifyTimeTimestr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogLightByVerifyTimeTimestr.length === 3) {
    Q.fcall(this._handler.loadLogLightByVerifyTimeTimestr.bind(this._handler), args.timestamp, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogLightByVerifyTimeTimestr_result({success: result});
        output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogLightByVerifyTimeTimestr_result(err);
          output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogLightByVerifyTimeTimestr(args.timestamp, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogLightByVerifyTimeTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogLightByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadLogLightByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogLightByWhere.length === 3) {
    Q.fcall(this._handler.loadLogLightByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogLightByWhere_result({success: result});
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogLightByWhere_result(err);
          output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogLightByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogLightByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPermitByUpdate = function(seqid, input, output) {
  var args = new IFaceLog_loadPermitByUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPermitByUpdate.length === 1) {
    Q.fcall(this._handler.loadPermitByUpdate.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPermitByUpdate_result({success: result});
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPermitByUpdate_result(err);
          output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPermitByUpdate(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPermitByUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPermitByUpdateTimestr = function(seqid, input, output) {
  var args = new IFaceLog_loadPermitByUpdateTimestr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPermitByUpdateTimestr.length === 1) {
    Q.fcall(this._handler.loadPermitByUpdateTimestr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPermitByUpdateTimestr_result({success: result});
        output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPermitByUpdateTimestr_result(err);
          output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPermitByUpdateTimestr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPermitByUpdateTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonByWhere.length === 3) {
    Q.fcall(this._handler.loadPersonByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonByWhere_result({success: result});
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonByWhere_result(err);
          output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonGroupByWhere.length === 3) {
    Q.fcall(this._handler.loadPersonGroupByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonGroupByWhere_result({success: result});
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonGroupByWhere_result(err);
          output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonGroupByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonGroupIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonGroupIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonGroupIdByWhere.length === 1) {
    Q.fcall(this._handler.loadPersonGroupIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonGroupIdByWhere_result({success: result});
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonGroupIdByWhere_result(err);
          output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonGroupIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonGroupIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonIdByUpdateTime = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonIdByUpdateTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonIdByUpdateTime.length === 1) {
    Q.fcall(this._handler.loadPersonIdByUpdateTime.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonIdByUpdateTime_result({success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonIdByUpdateTime_result(err);
          output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonIdByUpdateTime(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonIdByUpdateTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonIdByUpdateTimeTimeStr = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonIdByUpdateTimeTimeStr.length === 1) {
    Q.fcall(this._handler.loadPersonIdByUpdateTimeTimeStr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_result({success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_result(err);
          output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonIdByUpdateTimeTimeStr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonIdByWhere.length === 1) {
    Q.fcall(this._handler.loadPersonIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonIdByWhere_result({success: result});
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonIdByWhere_result(err);
          output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadUpdatedPersons = function(seqid, input, output) {
  var args = new IFaceLog_loadUpdatedPersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadUpdatedPersons.length === 1) {
    Q.fcall(this._handler.loadUpdatedPersons.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadUpdatedPersons_result({success: result});
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadUpdatedPersons_result(err);
          output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadUpdatedPersons(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadUpdatedPersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadUpdatedPersonsTimestr = function(seqid, input, output) {
  var args = new IFaceLog_loadUpdatedPersonsTimestr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadUpdatedPersonsTimestr.length === 1) {
    Q.fcall(this._handler.loadUpdatedPersonsTimestr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadUpdatedPersonsTimestr_result({success: result});
        output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadUpdatedPersonsTimestr_result(err);
          output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadUpdatedPersonsTimestr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadUpdatedPersonsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_offline = function(seqid, input, output) {
  var args = new IFaceLog_offline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offline.length === 1) {
    Q.fcall(this._handler.offline.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_offline_result({success: result});
        output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_offline_result(err);
          output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("offline", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.offline(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_offline_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_online = function(seqid, input, output) {
  var args = new IFaceLog_online_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.online.length === 1) {
    Q.fcall(this._handler.online.bind(this._handler), args.device)
      .then(function(result) {
        var result_obj = new IFaceLog_online_result({success: result});
        output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_online_result(err);
          output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("online", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.online(args.device, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_online_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("online", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_registerDevice = function(seqid, input, output) {
  var args = new IFaceLog_registerDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerDevice.length === 1) {
    Q.fcall(this._handler.registerDevice.bind(this._handler), args.newDevice)
      .then(function(result) {
        var result_obj = new IFaceLog_registerDevice_result({success: result});
        output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_registerDevice_result(err);
          output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerDevice(args.newDevice, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_registerDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_releasePersonToken = function(seqid, input, output) {
  var args = new IFaceLog_releasePersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releasePersonToken.length === 1) {
    Q.fcall(this._handler.releasePersonToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_releasePersonToken_result({success: result});
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_releasePersonToken_result(err);
          output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releasePersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releasePersonToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_releasePersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_releaseRootToken = function(seqid, input, output) {
  var args = new IFaceLog_releaseRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseRootToken.length === 1) {
    Q.fcall(this._handler.releaseRootToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_releaseRootToken_result({success: result});
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_releaseRootToken_result(err);
          output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releaseRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseRootToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_releaseRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_releaseUserToken = function(seqid, input, output) {
  var args = new IFaceLog_releaseUserToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseUserToken.length === 1) {
    Q.fcall(this._handler.releaseUserToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_releaseUserToken_result({success: result});
        output.writeMessageBegin("releaseUserToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_releaseUserToken_result(err);
          output.writeMessageBegin("releaseUserToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releaseUserToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseUserToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_releaseUserToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("releaseUserToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releaseUserToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_replaceFeature = function(seqid, input, output) {
  var args = new IFaceLog_replaceFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.replaceFeature.length === 4) {
    Q.fcall(this._handler.replaceFeature.bind(this._handler), args.personId, args.featureMd5, args.deleteOldFeatureImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_replaceFeature_result({success: result});
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_replaceFeature_result(err);
          output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("replaceFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.replaceFeature(args.personId, args.featureMd5, args.deleteOldFeatureImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_replaceFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_rootGroupOfDevice = function(seqid, input, output) {
  var args = new IFaceLog_rootGroupOfDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rootGroupOfDevice.length === 1) {
    Q.fcall(this._handler.rootGroupOfDevice.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_rootGroupOfDevice_result({success: result});
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_rootGroupOfDevice_result(err);
          output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rootGroupOfDevice(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_rootGroupOfDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_rootGroupOfPerson = function(seqid, input, output) {
  var args = new IFaceLog_rootGroupOfPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rootGroupOfPerson.length === 1) {
    Q.fcall(this._handler.rootGroupOfPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_rootGroupOfPerson_result({success: result});
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_rootGroupOfPerson_result(err);
          output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rootGroupOfPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_rootGroupOfPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_runCmd = function(seqid, input, output) {
  var args = new IFaceLog_runCmd_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.runCmd.length === 6) {
    Q.fcall(this._handler.runCmd.bind(this._handler), args.target, args.group, args.cmdpath, args.jsonArgs, args.ackChannel, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_runCmd_result({success: result});
        output.writeMessageBegin("runCmd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_runCmd_result(err);
          output.writeMessageBegin("runCmd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runCmd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.runCmd(args.target, args.group, args.cmdpath, args.jsonArgs, args.ackChannel, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_runCmd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("runCmd", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runCmd", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_runTask = function(seqid, input, output) {
  var args = new IFaceLog_runTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.runTask.length === 5) {
    Q.fcall(this._handler.runTask.bind(this._handler), args.taskQueue, args.cmdpath, args.jsonArgs, args.ackChannel, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_runTask_result({success: result});
        output.writeMessageBegin("runTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_runTask_result(err);
          output.writeMessageBegin("runTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.runTask(args.taskQueue, args.cmdpath, args.jsonArgs, args.ackChannel, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_runTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("runTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveDevice = function(seqid, input, output) {
  var args = new IFaceLog_saveDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveDevice.length === 2) {
    Q.fcall(this._handler.saveDevice.bind(this._handler), args.deviceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveDevice_result({success: result});
        output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveDevice_result(err);
          output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveDevice(args.deviceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_saveDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveDeviceGroup.length === 2) {
    Q.fcall(this._handler.saveDeviceGroup.bind(this._handler), args.deviceGroupBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveDeviceGroup_result({success: result});
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveDeviceGroup_result(err);
          output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveDeviceGroup(args.deviceGroupBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePermit = function(seqid, input, output) {
  var args = new IFaceLog_savePermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePermit.length === 2) {
    Q.fcall(this._handler.savePermit.bind(this._handler), args.permitBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePermit_result({success: result});
        output.writeMessageBegin("savePermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePermit_result(err);
          output.writeMessageBegin("savePermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePermit(args.permitBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePermitWithSchedule = function(seqid, input, output) {
  var args = new IFaceLog_savePermitWithSchedule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePermitWithSchedule.length === 4) {
    Q.fcall(this._handler.savePermitWithSchedule.bind(this._handler), args.deviceGroupId, args.personGroupId, args.schedule, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePermitWithSchedule_result({success: result});
        output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePermitWithSchedule_result(err);
          output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePermitWithSchedule(args.deviceGroupId, args.personGroupId, args.schedule, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePermitWithSchedule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePerson = function(seqid, input, output) {
  var args = new IFaceLog_savePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePerson.length === 2) {
    Q.fcall(this._handler.savePerson.bind(this._handler), args.personBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePerson_result({success: result});
        output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePerson_result(err);
          output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePerson(args.personBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonFull = function(seqid, input, output) {
  var args = new IFaceLog_savePersonFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonFull.length === 7) {
    Q.fcall(this._handler.savePersonFull.bind(this._handler), args.personBean, args.idPhoto, args.feature, args.featureVersion, args.featureImage, args.faceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonFull_result({success: result});
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonFull_result(err);
          output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonFull", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonFull(args.personBean, args.idPhoto, args.feature, args.featureVersion, args.featureImage, args.faceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonFull_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_savePersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonGroup.length === 2) {
    Q.fcall(this._handler.savePersonGroup.bind(this._handler), args.personGroupBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonGroup_result({success: result});
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonGroup_result(err);
          output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonGroup(args.personGroupBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhoto = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhoto_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhoto.length === 3) {
    Q.fcall(this._handler.savePersonWithPhoto.bind(this._handler), args.personBean, args.idPhoto, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhoto_result({success: result});
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhoto_result(err);
          output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhoto(args.personBean, args.idPhoto, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhoto_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeature = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeature.length === 4) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeature.bind(this._handler), args.personBean, args.idPhoto, args.featureBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeature_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeature_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeature(args.personBean, args.idPhoto, args.featureBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureMultiFaces = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureMultiFaces.length === 6) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureMultiFaces.bind(this._handler), args.personBean, args.idPhoto, args.feature, args.featureVersion, args.faceBeans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureMultiFaces(args.personBean, args.idPhoto, args.feature, args.featureVersion, args.faceBeans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureMultiImage = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureMultiImage.length === 7) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureMultiImage.bind(this._handler), args.personBean, args.idPhoto, args.feature, args.featureVersion, args.photos, args.faces, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureMultiImage(args.personBean, args.idPhoto, args.feature, args.featureVersion, args.photos, args.faces, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureSaved = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureSaved_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureSaved.length === 4) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureSaved.bind(this._handler), args.personBean, args.idPhotoMd5, args.featureMd5, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureSaved(args.personBean, args.idPhotoMd5, args.featureMd5, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersons = function(seqid, input, output) {
  var args = new IFaceLog_savePersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersons.length === 2) {
    Q.fcall(this._handler.savePersons.bind(this._handler), args.persons, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersons_result({success: result});
        output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersons_result(err);
          output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersons(args.persons, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonsWithPhoto = function(seqid, input, output) {
  var args = new IFaceLog_savePersonsWithPhoto_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonsWithPhoto.length === 3) {
    Q.fcall(this._handler.savePersonsWithPhoto.bind(this._handler), args.photos, args.persons, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonsWithPhoto_result({success: result});
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonsWithPhoto_result(err);
          output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonsWithPhoto(args.photos, args.persons, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonsWithPhoto_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveServiceConfig = function(seqid, input, output) {
  var args = new IFaceLog_saveServiceConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveServiceConfig.length === 1) {
    Q.fcall(this._handler.saveServiceConfig.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveServiceConfig_result({success: result});
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveServiceConfig_result(err);
          output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveServiceConfig(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveServiceConfig_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_sdkTaskQueueOf = function(seqid, input, output) {
  var args = new IFaceLog_sdkTaskQueueOf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sdkTaskQueueOf.length === 3) {
    Q.fcall(this._handler.sdkTaskQueueOf.bind(this._handler), args.task, args.sdkVersion, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_sdkTaskQueueOf_result({success: result});
        output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_sdkTaskQueueOf_result(err);
          output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sdkTaskQueueOf(args.task, args.sdkVersion, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_sdkTaskQueueOf_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setPersonExpiryDate = function(seqid, input, output) {
  var args = new IFaceLog_setPersonExpiryDate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPersonExpiryDate.length === 3) {
    Q.fcall(this._handler.setPersonExpiryDate.bind(this._handler), args.personId, args.expiryDate, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setPersonExpiryDate_result({success: result});
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setPersonExpiryDate_result(err);
          output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPersonExpiryDate(args.personId, args.expiryDate, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setPersonExpiryDate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setPersonExpiryDateList = function(seqid, input, output) {
  var args = new IFaceLog_setPersonExpiryDateList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPersonExpiryDateList.length === 3) {
    Q.fcall(this._handler.setPersonExpiryDateList.bind(this._handler), args.personIdList, args.expiryDate, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setPersonExpiryDateList_result({success: result});
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setPersonExpiryDateList_result(err);
          output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPersonExpiryDateList(args.personIdList, args.expiryDate, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setPersonExpiryDateList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setPersonExpiryDateTimeStr = function(seqid, input, output) {
  var args = new IFaceLog_setPersonExpiryDateTimeStr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPersonExpiryDateTimeStr.length === 3) {
    Q.fcall(this._handler.setPersonExpiryDateTimeStr.bind(this._handler), args.personId, args.expiryDate, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setPersonExpiryDateTimeStr_result({success: result});
        output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setPersonExpiryDateTimeStr_result(err);
          output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPersonExpiryDateTimeStr(args.personId, args.expiryDate, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setPersonExpiryDateTimeStr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setProperties = function(seqid, input, output) {
  var args = new IFaceLog_setProperties_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setProperties.length === 2) {
    Q.fcall(this._handler.setProperties.bind(this._handler), args.config, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setProperties_result({success: result});
        output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setProperties_result(err);
          output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setProperties", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setProperties(args.config, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setProperties_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setProperties", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setProperty = function(seqid, input, output) {
  var args = new IFaceLog_setProperty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setProperty.length === 3) {
    Q.fcall(this._handler.setProperty.bind(this._handler), args.key, args.value, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setProperty_result({success: result});
        output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setProperty_result(err);
          output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setProperty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setProperty(args.key, args.value, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setProperty_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setProperty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_taskQueueOf = function(seqid, input, output) {
  var args = new IFaceLog_taskQueueOf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.taskQueueOf.length === 2) {
    Q.fcall(this._handler.taskQueueOf.bind(this._handler), args.task, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_taskQueueOf_result({success: result});
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_taskQueueOf_result(err);
          output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("taskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.taskQueueOf(args.task, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_taskQueueOf_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_unbindBorder = function(seqid, input, output) {
  var args = new IFaceLog_unbindBorder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unbindBorder.length === 3) {
    Q.fcall(this._handler.unbindBorder.bind(this._handler), args.personGroupId, args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_unbindBorder_result({success: result});
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_unbindBorder_result(err);
          output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unbindBorder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unbindBorder(args.personGroupId, args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_unbindBorder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_unregisterDevice = function(seqid, input, output) {
  var args = new IFaceLog_unregisterDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregisterDevice.length === 1) {
    Q.fcall(this._handler.unregisterDevice.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_unregisterDevice_result({success: result});
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_unregisterDevice_result(err);
          output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unregisterDevice(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_unregisterDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_updateDevice = function(seqid, input, output) {
  var args = new IFaceLog_updateDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDevice.length === 2) {
    Q.fcall(this._handler.updateDevice.bind(this._handler), args.deviceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_updateDevice_result({success: result});
        output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_updateDevice_result(err);
          output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDevice(args.deviceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_updateDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_version = function(seqid, input, output) {
  var args = new IFaceLog_version_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.version.length === 0) {
    Q.fcall(this._handler.version.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_version_result({success: result});
        output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_version_result(err);
          output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("version", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.version(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_version_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("version", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_versionInfo = function(seqid, input, output) {
  var args = new IFaceLog_versionInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionInfo.length === 0) {
    Q.fcall(this._handler.versionInfo.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_versionInfo_result({success: result});
        output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_versionInfo_result(err);
          output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("versionInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_versionInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
