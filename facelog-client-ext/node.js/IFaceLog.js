//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./IFaceLog_types');
//HELPER FUNCTIONS AND STRUCTURES

var IFaceLog_addFeature_args = function(args) {
  this.feature = null;
  this.featureVersion = null;
  this.personId = null;
  this.faecBeans = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.faecBeans !== undefined && args.faecBeans !== null) {
      this.faecBeans = Thrift.copyList(args.faecBeans, [ttypes.FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addFeature_args.prototype = {};
IFaceLog_addFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.faecBeans = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.FaceBean();
          elem6.read(input);
          this.faecBeans.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeature_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 2);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 3);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.faecBeans !== null && this.faecBeans !== undefined) {
    output.writeFieldBegin('faecBeans', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.faecBeans.length);
    for (var iter7 in this.faecBeans)
    {
      if (this.faecBeans.hasOwnProperty(iter7))
      {
        iter7 = this.faecBeans[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeature_result.prototype = {};
IFaceLog_addFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureMulti_args = function(args) {
  this.feature = null;
  this.featureVersion = null;
  this.personId = null;
  this.photos = null;
  this.faces = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.photos !== undefined && args.photos !== null) {
      this.photos = Thrift.copyList(args.photos, [null]);
    }
    if (args.faces !== undefined && args.faces !== null) {
      this.faces = Thrift.copyList(args.faces, [ttypes.FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addFeatureMulti_args.prototype = {};
IFaceLog_addFeatureMulti_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.photos = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readBinary();
          this.photos.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.faces = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new ttypes.FaceBean();
          elem21.read(input);
          this.faces.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureMulti_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureMulti_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 2);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 3);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.photos !== null && this.photos !== undefined) {
    output.writeFieldBegin('photos', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.photos.length);
    for (var iter22 in this.photos)
    {
      if (this.photos.hasOwnProperty(iter22))
      {
        iter22 = this.photos[iter22];
        output.writeBinary(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.faces !== null && this.faces !== undefined) {
    output.writeFieldBegin('faces', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.faces.length);
    for (var iter23 in this.faces)
    {
      if (this.faces.hasOwnProperty(iter23))
      {
        iter23 = this.faces[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureMulti_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeatureMulti_result.prototype = {};
IFaceLog_addFeatureMulti_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureMulti_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureMulti_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureWithImage_args = function(args) {
  this.feature = null;
  this.featureVersion = null;
  this.personId = null;
  this.asIdPhotoIfAbsent = null;
  this.featurePhoto = null;
  this.faceBean = null;
  this.token = null;
  if (args) {
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.asIdPhotoIfAbsent !== undefined && args.asIdPhotoIfAbsent !== null) {
      this.asIdPhotoIfAbsent = args.asIdPhotoIfAbsent;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field asIdPhotoIfAbsent is unset!');
    }
    if (args.featurePhoto !== undefined && args.featurePhoto !== null) {
      this.featurePhoto = args.featurePhoto;
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new ttypes.FaceBean(args.faceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addFeatureWithImage_args.prototype = {};
IFaceLog_addFeatureWithImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.asIdPhotoIfAbsent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.featurePhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new ttypes.FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureWithImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureWithImage_args');
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 1);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 2);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 3);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.asIdPhotoIfAbsent !== null && this.asIdPhotoIfAbsent !== undefined) {
    output.writeFieldBegin('asIdPhotoIfAbsent', Thrift.Type.BOOL, 4);
    output.writeBool(this.asIdPhotoIfAbsent);
    output.writeFieldEnd();
  }
  if (this.featurePhoto !== null && this.featurePhoto !== undefined) {
    output.writeFieldBegin('featurePhoto', Thrift.Type.STRING, 5);
    output.writeBinary(this.featurePhoto);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 6);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 7);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addFeatureWithImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addFeatureWithImage_result.prototype = {};
IFaceLog_addFeatureWithImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addFeatureWithImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addFeatureWithImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addImage_args = function(args) {
  this.imageData = null;
  this.deviceId = null;
  this.faceBean = null;
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.imageData !== undefined && args.imageData !== null) {
      this.imageData = args.imageData;
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new ttypes.FaceBean(args.faceBean);
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addImage_args.prototype = {};
IFaceLog_addImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new ttypes.FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addImage_args');
  if (this.imageData !== null && this.imageData !== undefined) {
    output.writeFieldBegin('imageData', Thrift.Type.STRING, 1);
    output.writeBinary(this.imageData);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 3);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 4);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ImageBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addImage_result.prototype = {};
IFaceLog_addImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ImageBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLog_args = function(args) {
  this.logBean = null;
  this.token = null;
  if (args) {
    if (args.logBean !== undefined && args.logBean !== null) {
      this.logBean = new ttypes.LogBean(args.logBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLog_args.prototype = {};
IFaceLog_addLog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.logBean = new ttypes.LogBean();
        this.logBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLog_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLog_args');
  if (this.logBean !== null && this.logBean !== undefined) {
    output.writeFieldBegin('logBean', Thrift.Type.STRUCT, 1);
    this.logBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLog_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLog_result.prototype = {};
IFaceLog_addLog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLog_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLog_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogFull_args = function(args) {
  this.logBean = null;
  this.faceBean = null;
  this.featureImage = null;
  this.token = null;
  if (args) {
    if (args.logBean !== undefined && args.logBean !== null) {
      this.logBean = new ttypes.LogBean(args.logBean);
    }
    if (args.faceBean !== undefined && args.faceBean !== null) {
      this.faceBean = new ttypes.FaceBean(args.faceBean);
    }
    if (args.featureImage !== undefined && args.featureImage !== null) {
      this.featureImage = args.featureImage;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLogFull_args.prototype = {};
IFaceLog_addLogFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.logBean = new ttypes.LogBean();
        this.logBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.faceBean = new ttypes.FaceBean();
        this.faceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.featureImage = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogFull_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogFull_args');
  if (this.logBean !== null && this.logBean !== undefined) {
    output.writeFieldBegin('logBean', Thrift.Type.STRUCT, 1);
    this.logBean.write(output);
    output.writeFieldEnd();
  }
  if (this.faceBean !== null && this.faceBean !== undefined) {
    output.writeFieldBegin('faceBean', Thrift.Type.STRUCT, 2);
    this.faceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.featureImage !== null && this.featureImage !== undefined) {
    output.writeFieldBegin('featureImage', Thrift.Type.STRING, 3);
    output.writeBinary(this.featureImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogFull_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLogFull_result.prototype = {};
IFaceLog_addLogFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogFull_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogFull_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogs_args = function(args) {
  this.beans = null;
  this.token = null;
  if (args) {
    if (args.beans !== undefined && args.beans !== null) {
      this.beans = Thrift.copyList(args.beans, [ttypes.LogBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLogs_args.prototype = {};
IFaceLog_addLogs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.beans = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.LogBean();
          elem30.read(input);
          this.beans.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogs_args');
  if (this.beans !== null && this.beans !== undefined) {
    output.writeFieldBegin('beans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.beans.length);
    for (var iter31 in this.beans)
    {
      if (this.beans.hasOwnProperty(iter31))
      {
        iter31 = this.beans[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogs_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLogs_result.prototype = {};
IFaceLog_addLogs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogs_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogsFull_args = function(args) {
  this.logBeans = null;
  this.faceBeans = null;
  this.featureImages = null;
  this.token = null;
  if (args) {
    if (args.logBeans !== undefined && args.logBeans !== null) {
      this.logBeans = Thrift.copyList(args.logBeans, [ttypes.LogBean]);
    }
    if (args.faceBeans !== undefined && args.faceBeans !== null) {
      this.faceBeans = Thrift.copyList(args.faceBeans, [ttypes.FaceBean]);
    }
    if (args.featureImages !== undefined && args.featureImages !== null) {
      this.featureImages = Thrift.copyList(args.featureImages, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_addLogsFull_args.prototype = {};
IFaceLog_addLogsFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.logBeans = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.LogBean();
          elem38.read(input);
          this.logBeans.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.faceBeans = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.FaceBean();
          elem45.read(input);
          this.faceBeans.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.featureImages = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = input.readBinary();
          this.featureImages.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogsFull_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogsFull_args');
  if (this.logBeans !== null && this.logBeans !== undefined) {
    output.writeFieldBegin('logBeans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.logBeans.length);
    for (var iter53 in this.logBeans)
    {
      if (this.logBeans.hasOwnProperty(iter53))
      {
        iter53 = this.logBeans[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.faceBeans !== null && this.faceBeans !== undefined) {
    output.writeFieldBegin('faceBeans', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.faceBeans.length);
    for (var iter54 in this.faceBeans)
    {
      if (this.faceBeans.hasOwnProperty(iter54))
      {
        iter54 = this.faceBeans[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.featureImages !== null && this.featureImages !== undefined) {
    output.writeFieldBegin('featureImages', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.featureImages.length);
    for (var iter55 in this.featureImages)
    {
      if (this.featureImages.hasOwnProperty(iter55))
      {
        iter55 = this.featureImages[iter55];
        output.writeBinary(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_addLogsFull_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.DuplicateRecordException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_addLogsFull_result.prototype = {};
IFaceLog_addLogsFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.DuplicateRecordException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_addLogsFull_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_addLogsFull_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannel_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_applyAckChannel_args.prototype = {};
IFaceLog_applyAckChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannel_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannel_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannel_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyAckChannel_result.prototype = {};
IFaceLog_applyAckChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannel_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannelWithDuration_args = function(args) {
  this.duration = null;
  this.token = null;
  if (args) {
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field duration is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_applyAckChannelWithDuration_args.prototype = {};
IFaceLog_applyAckChannelWithDuration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.duration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannelWithDuration_args');
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I32, 1);
    output.writeI32(this.duration);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyAckChannelWithDuration_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyAckChannelWithDuration_result.prototype = {};
IFaceLog_applyAckChannelWithDuration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyAckChannelWithDuration_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyAckChannelWithDuration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyCmdSn_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_applyCmdSn_args.prototype = {};
IFaceLog_applyCmdSn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyCmdSn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyCmdSn_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyCmdSn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_applyCmdSn_result.prototype = {};
IFaceLog_applyCmdSn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyCmdSn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyCmdSn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyPersonToken_args = function(args) {
  this.personId = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyPersonToken_args.prototype = {};
IFaceLog_applyPersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyPersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyPersonToken_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyPersonToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyPersonToken_result.prototype = {};
IFaceLog_applyPersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyPersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyPersonToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyRootToken_args = function(args) {
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyRootToken_args.prototype = {};
IFaceLog_applyRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyRootToken_args');
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 1);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 2);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyRootToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyRootToken_result.prototype = {};
IFaceLog_applyRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyRootToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyUserToken_args = function(args) {
  this.userid = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userid is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_applyUserToken_args.prototype = {};
IFaceLog_applyUserToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyUserToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyUserToken_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.I32, 1);
    output.writeI32(this.userid);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_applyUserToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_applyUserToken_result.prototype = {};
IFaceLog_applyUserToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_applyUserToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_applyUserToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_bindBorder_args = function(args) {
  this.personGroupId = null;
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_bindBorder_args.prototype = {};
IFaceLog_bindBorder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_bindBorder_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_bindBorder_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_bindBorder_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_bindBorder_result.prototype = {};
IFaceLog_bindBorder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_bindBorder_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_bindBorder_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_childListForDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_childListForDeviceGroup_args.prototype = {};
IFaceLog_childListForDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_childListForDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_childListForDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_childListForDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_childListForDeviceGroup_result.prototype = {};
IFaceLog_childListForDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI32();
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_childListForDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_childListForDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_childListForPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_childListForPersonGroup_args.prototype = {};
IFaceLog_childListForPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_childListForPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_childListForPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_childListForPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_childListForPersonGroup_result.prototype = {};
IFaceLog_childListForPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readI32();
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_childListForPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_childListForPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        output.writeI32(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countDeviceByWhere_args.prototype = {};
IFaceLog_countDeviceByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countDeviceByWhere_result.prototype = {};
IFaceLog_countDeviceByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceGroupByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countDeviceGroupByWhere_args.prototype = {};
IFaceLog_countDeviceGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countDeviceGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countDeviceGroupByWhere_result.prototype = {};
IFaceLog_countDeviceGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countDeviceGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countDeviceGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countLogByWhere_args.prototype = {};
IFaceLog_countLogByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogByWhere_result.prototype = {};
IFaceLog_countLogByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTime_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_countLogLightByVerifyTime_args.prototype = {};
IFaceLog_countLogLightByVerifyTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByVerifyTime_result.prototype = {};
IFaceLog_countLogLightByVerifyTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTimeTimestr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_countLogLightByVerifyTimeTimestr_args.prototype = {};
IFaceLog_countLogLightByVerifyTimeTimestr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTimeTimestr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTimeTimestr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByVerifyTimeTimestr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByVerifyTimeTimestr_result.prototype = {};
IFaceLog_countLogLightByVerifyTimeTimestr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByVerifyTimeTimestr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByVerifyTimeTimestr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countLogLightByWhere_args.prototype = {};
IFaceLog_countLogLightByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countLogLightByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countLogLightByWhere_result.prototype = {};
IFaceLog_countLogLightByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countLogLightByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countLogLightByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countPersonByWhere_args.prototype = {};
IFaceLog_countPersonByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonByWhere_result.prototype = {};
IFaceLog_countPersonByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonGroupByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_countPersonGroupByWhere_args.prototype = {};
IFaceLog_countPersonGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_countPersonGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_countPersonGroupByWhere_result.prototype = {};
IFaceLog_countPersonGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_countPersonGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_countPersonGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteAllFeaturesByPersonId_args = function(args) {
  this.personId = null;
  this.deleteImage = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.deleteImage !== undefined && args.deleteImage !== null) {
      this.deleteImage = args.deleteImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteAllFeaturesByPersonId_args.prototype = {};
IFaceLog_deleteAllFeaturesByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteAllFeaturesByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.deleteImage !== null && this.deleteImage !== undefined) {
    output.writeFieldBegin('deleteImage', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteAllFeaturesByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteAllFeaturesByPersonId_result.prototype = {};
IFaceLog_deleteAllFeaturesByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteAllFeaturesByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteAllFeaturesByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteDeviceGroup_args.prototype = {};
IFaceLog_deleteDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteDeviceGroup_result.prototype = {};
IFaceLog_deleteDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteFeature_args = function(args) {
  this.featureMd5 = null;
  this.deleteImage = null;
  this.token = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.deleteImage !== undefined && args.deleteImage !== null) {
      this.deleteImage = args.deleteImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteFeature_args.prototype = {};
IFaceLog_deleteFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.deleteImage !== null && this.deleteImage !== undefined) {
    output.writeFieldBegin('deleteImage', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteFeature_result.prototype = {};
IFaceLog_deleteFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readString();
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteGroupPermitOnDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteGroupPermitOnDeviceGroup_args.prototype = {};
IFaceLog_deleteGroupPermitOnDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteGroupPermitOnDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteGroupPermitOnDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteGroupPermitOnDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteGroupPermitOnDeviceGroup_result.prototype = {};
IFaceLog_deleteGroupPermitOnDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteGroupPermitOnDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteGroupPermitOnDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteImage_args = function(args) {
  this.imageMd5 = null;
  this.token = null;
  if (args) {
    if (args.imageMd5 !== undefined && args.imageMd5 !== null) {
      this.imageMd5 = args.imageMd5;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deleteImage_args.prototype = {};
IFaceLog_deleteImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteImage_args');
  if (this.imageMd5 !== null && this.imageMd5 !== undefined) {
    output.writeFieldBegin('imageMd5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMd5);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deleteImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deleteImage_result.prototype = {};
IFaceLog_deleteImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deleteImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deleteImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePermitById_args = function(args) {
  this.deviceGroupId = null;
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePermitById_args.prototype = {};
IFaceLog_deletePermitById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePermitById_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePermitById_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePermitById_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePermitById_result.prototype = {};
IFaceLog_deletePermitById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePermitById_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePermitById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePerson_args = function(args) {
  this.personId = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePerson_args.prototype = {};
IFaceLog_deletePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePerson_result.prototype = {};
IFaceLog_deletePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonByPapersNum_args = function(args) {
  this.papersNum = null;
  this.token = null;
  if (args) {
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonByPapersNum_args.prototype = {};
IFaceLog_deletePersonByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonByPapersNum_args');
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 1);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonByPapersNum_result.prototype = {};
IFaceLog_deletePersonByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroup_args = function(args) {
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonGroup_args.prototype = {};
IFaceLog_deletePersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonGroup_result.prototype = {};
IFaceLog_deletePersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroupPermit_args = function(args) {
  this.personGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonGroupPermit_args.prototype = {};
IFaceLog_deletePersonGroupPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroupPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroupPermit_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonGroupPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonGroupPermit_result.prototype = {};
IFaceLog_deletePersonGroupPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonGroupPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonGroupPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersons_args = function(args) {
  this.personIdList = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersons_args.prototype = {};
IFaceLog_deletePersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.personIdList = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readI32();
          this.personIdList.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersons_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter87 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter87))
      {
        iter87 = this.personIdList[iter87];
        output.writeI32(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersons_result.prototype = {};
IFaceLog_deletePersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonsByPapersNum_args = function(args) {
  this.papersNumlist = null;
  this.token = null;
  if (args) {
    if (args.papersNumlist !== undefined && args.papersNumlist !== null) {
      this.papersNumlist = Thrift.copyList(args.papersNumlist, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_deletePersonsByPapersNum_args.prototype = {};
IFaceLog_deletePersonsByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.papersNumlist = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.papersNumlist.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonsByPapersNum_args');
  if (this.papersNumlist !== null && this.papersNumlist !== undefined) {
    output.writeFieldBegin('papersNumlist', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.papersNumlist.length);
    for (var iter95 in this.papersNumlist)
    {
      if (this.papersNumlist.hasOwnProperty(iter95))
      {
        iter95 = this.papersNumlist[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_deletePersonsByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_deletePersonsByPapersNum_result.prototype = {};
IFaceLog_deletePersonsByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_deletePersonsByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_deletePersonsByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePerson_args = function(args) {
  this.personId = null;
  this.moveToGroupId = null;
  this.deletePhoto = null;
  this.deleteFeature = null;
  this.deleteLog = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.moveToGroupId !== undefined && args.moveToGroupId !== null) {
      this.moveToGroupId = args.moveToGroupId;
    }
    if (args.deletePhoto !== undefined && args.deletePhoto !== null) {
      this.deletePhoto = args.deletePhoto;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deletePhoto is unset!');
    }
    if (args.deleteFeature !== undefined && args.deleteFeature !== null) {
      this.deleteFeature = args.deleteFeature;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteFeature is unset!');
    }
    if (args.deleteLog !== undefined && args.deleteLog !== null) {
      this.deleteLog = args.deleteLog;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteLog is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_disablePerson_args.prototype = {};
IFaceLog_disablePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.moveToGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deletePhoto = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteFeature = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteLog = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.moveToGroupId !== null && this.moveToGroupId !== undefined) {
    output.writeFieldBegin('moveToGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.moveToGroupId);
    output.writeFieldEnd();
  }
  if (this.deletePhoto !== null && this.deletePhoto !== undefined) {
    output.writeFieldBegin('deletePhoto', Thrift.Type.BOOL, 3);
    output.writeBool(this.deletePhoto);
    output.writeFieldEnd();
  }
  if (this.deleteFeature !== null && this.deleteFeature !== undefined) {
    output.writeFieldBegin('deleteFeature', Thrift.Type.BOOL, 4);
    output.writeBool(this.deleteFeature);
    output.writeFieldEnd();
  }
  if (this.deleteLog !== null && this.deleteLog !== undefined) {
    output.writeFieldBegin('deleteLog', Thrift.Type.BOOL, 5);
    output.writeBool(this.deleteLog);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePerson_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_disablePerson_result.prototype = {};
IFaceLog_disablePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePerson_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePersonList_args = function(args) {
  this.personIdList = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_disablePersonList_args.prototype = {};
IFaceLog_disablePersonList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.personIdList = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readI32();
          this.personIdList.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePersonList_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePersonList_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter103 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter103))
      {
        iter103 = this.personIdList[iter103];
        output.writeI32(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_disablePersonList_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_disablePersonList_result.prototype = {};
IFaceLog_disablePersonList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_disablePersonList_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_disablePersonList_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsDevice_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
IFaceLog_existsDevice_args.prototype = {};
IFaceLog_existsDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsDevice_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsDevice_result.prototype = {};
IFaceLog_existsDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsFeature_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_existsFeature_args.prototype = {};
IFaceLog_existsFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsFeature_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsFeature_result.prototype = {};
IFaceLog_existsFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsImage_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_existsImage_args.prototype = {};
IFaceLog_existsImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsImage_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsImage_result.prototype = {};
IFaceLog_existsImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsPerson_args = function(args) {
  this.persionId = null;
  if (args) {
    if (args.persionId !== undefined && args.persionId !== null) {
      this.persionId = args.persionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field persionId is unset!');
    }
  }
};
IFaceLog_existsPerson_args.prototype = {};
IFaceLog_existsPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.persionId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsPerson_args');
  if (this.persionId !== null && this.persionId !== undefined) {
    output.writeFieldBegin('persionId', Thrift.Type.I32, 1);
    output.writeI32(this.persionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_existsPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_existsPerson_result.prototype = {};
IFaceLog_existsPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_existsPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_existsPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
  }
};
IFaceLog_getDevice_args.prototype = {};
IFaceLog_getDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevice_result.prototype = {};
IFaceLog_getDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getDeviceGroup_args.prototype = {};
IFaceLog_getDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroup_result.prototype = {};
IFaceLog_getDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroups_args = function(args) {
  this.groupIdList = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
  }
};
IFaceLog_getDeviceGroups_args.prototype = {};
IFaceLog_getDeviceGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.groupIdList = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readI32();
          this.groupIdList.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroups_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.groupIdList.length);
    for (var iter111 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter111))
      {
        iter111 = this.groupIdList[iter111];
        output.writeI32(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroups_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceGroupBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroups_result.prototype = {};
IFaceLog_getDeviceGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.DeviceGroupBean();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroups_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsBelongs_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
  }
};
IFaceLog_getDeviceGroupsBelongs_args.prototype = {};
IFaceLog_getDeviceGroupsBelongs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsBelongs_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsBelongs_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsBelongs_result.prototype = {};
IFaceLog_getDeviceGroupsBelongs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = input.readI32();
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsBelongs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsBelongs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        output.writeI32(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermit_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getDeviceGroupsPermit_args.prototype = {};
IFaceLog_getDeviceGroupsPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermit_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsPermit_result.prototype = {};
IFaceLog_getDeviceGroupsPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.success = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readI32();
          this.success.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter135 in this.success)
    {
      if (this.success.hasOwnProperty(iter135))
      {
        iter135 = this.success[iter135];
        output.writeI32(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermittedBy_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getDeviceGroupsPermittedBy_args.prototype = {};
IFaceLog_getDeviceGroupsPermittedBy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermittedBy_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermittedBy_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceGroupsPermittedBy_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceGroupsPermittedBy_result.prototype = {};
IFaceLog_getDeviceGroupsPermittedBy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readI32();
          this.success.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceGroupsPermittedBy_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceGroupsPermittedBy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        output.writeI32(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceIdOfFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getDeviceIdOfFeature_args.prototype = {};
IFaceLog_getDeviceIdOfFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceIdOfFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDeviceIdOfFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDeviceIdOfFeature_result.prototype = {};
IFaceLog_getDeviceIdOfFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDeviceIdOfFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDeviceIdOfFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevices_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined && args.idList !== null) {
      this.idList = Thrift.copyList(args.idList, [null]);
    }
  }
};
IFaceLog_getDevices_args.prototype = {};
IFaceLog_getDevices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.idList = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = input.readI32();
          this.idList.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevices_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevices_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter151 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter151))
      {
        iter151 = this.idList[iter151];
        output.writeI32(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevices_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevices_result.prototype = {};
IFaceLog_getDevices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.success = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new ttypes.DeviceBean();
          elem158.read(input);
          this.success.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevices_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter159 in this.success)
    {
      if (this.success.hasOwnProperty(iter159))
      {
        iter159 = this.success[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevicesOfGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getDevicesOfGroup_args.prototype = {};
IFaceLog_getDevicesOfGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevicesOfGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getDevicesOfGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getDevicesOfGroup_result.prototype = {};
IFaceLog_getDevicesOfGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.success = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readI32();
          this.success.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getDevicesOfGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getDevicesOfGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter167 in this.success)
    {
      if (this.success.hasOwnProperty(iter167))
      {
        iter167 = this.success[iter167];
        output.writeI32(iter167);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFace_args = function(args) {
  this.faceId = null;
  if (args) {
    if (args.faceId !== undefined && args.faceId !== null) {
      this.faceId = args.faceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field faceId is unset!');
    }
  }
};
IFaceLog_getFace_args.prototype = {};
IFaceLog_getFace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.faceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFace_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFace_args');
  if (this.faceId !== null && this.faceId !== undefined) {
    output.writeFieldBegin('faceId', Thrift.Type.I32, 1);
    output.writeI32(this.faceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFace_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FaceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFace_result.prototype = {};
IFaceLog_getFace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FaceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFace_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeature_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_getFeature_args.prototype = {};
IFaceLog_getFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeature_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FeatureBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeature_result.prototype = {};
IFaceLog_getFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FeatureBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatureBytes_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
  }
};
IFaceLog_getFeatureBytes_args.prototype = {};
IFaceLog_getFeatureBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBytes_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBytes_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatureBytes_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatureBytes_result.prototype = {};
IFaceLog_getFeatureBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatureBytes_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatureBytes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatures_args = function(args) {
  this.md5 = null;
  if (args) {
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = Thrift.copyList(args.md5, [null]);
    }
  }
};
IFaceLog_getFeatures_args.prototype = {};
IFaceLog_getFeatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.md5 = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = input.readString();
          this.md5.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatures_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatures_args');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.md5.length);
    for (var iter175 in this.md5)
    {
      if (this.md5.hasOwnProperty(iter175))
      {
        iter175 = this.md5[iter175];
        output.writeString(iter175);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeatures_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FeatureBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeatures_result.prototype = {};
IFaceLog_getFeatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.success = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = new ttypes.FeatureBean();
          elem182.read(input);
          this.success.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeatures_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter183 in this.success)
    {
      if (this.success.hasOwnProperty(iter183))
      {
        iter183 = this.success[iter183];
        iter183.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesByPersonId_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getFeaturesByPersonId_args.prototype = {};
IFaceLog_getFeaturesByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesByPersonId_result.prototype = {};
IFaceLog_getFeaturesByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.success = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = input.readString();
          this.success.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter191 in this.success)
    {
      if (this.success.hasOwnProperty(iter191))
      {
        iter191 = this.success[iter191];
        output.writeString(iter191);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesByPersonIdAndSdkVersion_args = function(args) {
  this.personId = null;
  this.sdkVersion = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.sdkVersion !== undefined && args.sdkVersion !== null) {
      this.sdkVersion = args.sdkVersion;
    }
  }
};
IFaceLog_getFeaturesByPersonIdAndSdkVersion_args.prototype = {};
IFaceLog_getFeaturesByPersonIdAndSdkVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesByPersonIdAndSdkVersion_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesByPersonIdAndSdkVersion_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 2);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesByPersonIdAndSdkVersion_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesByPersonIdAndSdkVersion_result.prototype = {};
IFaceLog_getFeaturesByPersonIdAndSdkVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.success = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = input.readString();
          this.success.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesByPersonIdAndSdkVersion_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesByPersonIdAndSdkVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter199 in this.success)
    {
      if (this.success.hasOwnProperty(iter199))
      {
        iter199 = this.success[iter199];
        output.writeString(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesOfPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getFeaturesOfPerson_args.prototype = {};
IFaceLog_getFeaturesOfPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesOfPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesOfPerson_result.prototype = {};
IFaceLog_getFeaturesOfPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.success = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = input.readString();
          this.success.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesOfPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesOfPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter207 in this.success)
    {
      if (this.success.hasOwnProperty(iter207))
      {
        iter207 = this.success[iter207];
        output.writeString(iter207);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesPermittedOnDevice_args = function(args) {
  this.deviceId = null;
  this.ignoreSchedule = null;
  this.sdkVersion = null;
  this.excludeFeatureIds = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.ignoreSchedule !== undefined && args.ignoreSchedule !== null) {
      this.ignoreSchedule = args.ignoreSchedule;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ignoreSchedule is unset!');
    }
    if (args.sdkVersion !== undefined && args.sdkVersion !== null) {
      this.sdkVersion = args.sdkVersion;
    }
    if (args.excludeFeatureIds !== undefined && args.excludeFeatureIds !== null) {
      this.excludeFeatureIds = Thrift.copyList(args.excludeFeatureIds, [null]);
    }
  }
};
IFaceLog_getFeaturesPermittedOnDevice_args.prototype = {};
IFaceLog_getFeaturesPermittedOnDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreSchedule = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.excludeFeatureIds = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = input.readString();
          this.excludeFeatureIds.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesPermittedOnDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesPermittedOnDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.ignoreSchedule !== null && this.ignoreSchedule !== undefined) {
    output.writeFieldBegin('ignoreSchedule', Thrift.Type.BOOL, 2);
    output.writeBool(this.ignoreSchedule);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 3);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  if (this.excludeFeatureIds !== null && this.excludeFeatureIds !== undefined) {
    output.writeFieldBegin('excludeFeatureIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.excludeFeatureIds.length);
    for (var iter215 in this.excludeFeatureIds)
    {
      if (this.excludeFeatureIds.hasOwnProperty(iter215))
      {
        iter215 = this.excludeFeatureIds[iter215];
        output.writeString(iter215);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getFeaturesPermittedOnDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FeatureBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getFeaturesPermittedOnDevice_result.prototype = {};
IFaceLog_getFeaturesPermittedOnDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.success = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = new ttypes.FeatureBean();
          elem222.read(input);
          this.success.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getFeaturesPermittedOnDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getFeaturesPermittedOnDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter223 in this.success)
    {
      if (this.success.hasOwnProperty(iter223))
      {
        iter223 = this.success[iter223];
        iter223.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermit_args = function(args) {
  this.deviceId = null;
  this.personGroupId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getGroupPermit_args.prototype = {};
IFaceLog_getGroupPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermit_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermit_result.prototype = {};
IFaceLog_getGroupPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermitOnDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  this.personGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getGroupPermitOnDeviceGroup_args.prototype = {};
IFaceLog_getGroupPermitOnDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermitOnDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermitOnDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermitOnDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermitOnDeviceGroup_result.prototype = {};
IFaceLog_getGroupPermitOnDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermitOnDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermitOnDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermits_args = function(args) {
  this.deviceId = null;
  this.personGroupIdList = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personGroupIdList !== undefined && args.personGroupIdList !== null) {
      this.personGroupIdList = Thrift.copyList(args.personGroupIdList, [null]);
    }
  }
};
IFaceLog_getGroupPermits_args.prototype = {};
IFaceLog_getGroupPermits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.personGroupIdList = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readI32();
          this.personGroupIdList.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermits_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermits_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personGroupIdList !== null && this.personGroupIdList !== undefined) {
    output.writeFieldBegin('personGroupIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.personGroupIdList.length);
    for (var iter231 in this.personGroupIdList)
    {
      if (this.personGroupIdList.hasOwnProperty(iter231))
      {
        iter231 = this.personGroupIdList[iter231];
        output.writeI32(iter231);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getGroupPermits_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getGroupPermits_result.prototype = {};
IFaceLog_getGroupPermits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size232 = 0;
        var _rtmp3236;
        this.success = [];
        var _etype235 = 0;
        _rtmp3236 = input.readListBegin();
        _etype235 = _rtmp3236.etype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var elem238 = null;
          elem238 = new ttypes.PermitBean();
          elem238.read(input);
          this.success.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getGroupPermits_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getGroupPermits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter239 in this.success)
    {
      if (this.success.hasOwnProperty(iter239))
      {
        iter239 = this.success[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImage_args = function(args) {
  this.imageMD5 = null;
  if (args) {
    if (args.imageMD5 !== undefined && args.imageMD5 !== null) {
      this.imageMD5 = args.imageMD5;
    }
  }
};
IFaceLog_getImage_args.prototype = {};
IFaceLog_getImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMD5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImage_args');
  if (this.imageMD5 !== null && this.imageMD5 !== undefined) {
    output.writeFieldBegin('imageMD5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMD5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ImageBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImage_result.prototype = {};
IFaceLog_getImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ImageBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImageBytes_args = function(args) {
  this.imageMD5 = null;
  if (args) {
    if (args.imageMD5 !== undefined && args.imageMD5 !== null) {
      this.imageMD5 = args.imageMD5;
    }
  }
};
IFaceLog_getImageBytes_args.prototype = {};
IFaceLog_getImageBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageMD5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImageBytes_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImageBytes_args');
  if (this.imageMD5 !== null && this.imageMD5 !== undefined) {
    output.writeFieldBegin('imageMD5', Thrift.Type.STRING, 1);
    output.writeString(this.imageMD5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImageBytes_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImageBytes_result.prototype = {};
IFaceLog_getImageBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImageBytes_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImageBytes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImagesAssociatedByFeature_args = function(args) {
  this.featureMd5 = null;
  if (args) {
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
IFaceLog_getImagesAssociatedByFeature_args.prototype = {};
IFaceLog_getImagesAssociatedByFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImagesAssociatedByFeature_args');
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 1);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getImagesAssociatedByFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getImagesAssociatedByFeature_result.prototype = {};
IFaceLog_getImagesAssociatedByFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.success = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = input.readString();
          this.success.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getImagesAssociatedByFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getImagesAssociatedByFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter247 in this.success)
    {
      if (this.success.hasOwnProperty(iter247))
      {
        iter247 = this.success[iter247];
        output.writeString(iter247);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getLogBeansByPersonId_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getLogBeansByPersonId_args.prototype = {};
IFaceLog_getLogBeansByPersonId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getLogBeansByPersonId_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getLogBeansByPersonId_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getLogBeansByPersonId_result.prototype = {};
IFaceLog_getLogBeansByPersonId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.success = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = new ttypes.LogBean();
          elem254.read(input);
          this.success.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getLogBeansByPersonId_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getLogBeansByPersonId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter255 in this.success)
    {
      if (this.success.hasOwnProperty(iter255))
      {
        iter255 = this.success[iter255];
        iter255.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPerson_args.prototype = {};
IFaceLog_getPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPerson_result.prototype = {};
IFaceLog_getPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonByPapersNum_args = function(args) {
  this.papersNum = null;
  if (args) {
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
  }
};
IFaceLog_getPersonByPapersNum_args.prototype = {};
IFaceLog_getPersonByPapersNum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByPapersNum_args');
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 1);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonByPapersNum_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonByPapersNum_result.prototype = {};
IFaceLog_getPersonByPapersNum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonByPapersNum_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonByPapersNum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getPersonGroup_args.prototype = {};
IFaceLog_getPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroup_result.prototype = {};
IFaceLog_getPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroups_args = function(args) {
  this.groupIdList = null;
  if (args) {
    if (args.groupIdList !== undefined && args.groupIdList !== null) {
      this.groupIdList = Thrift.copyList(args.groupIdList, [null]);
    }
  }
};
IFaceLog_getPersonGroups_args.prototype = {};
IFaceLog_getPersonGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.groupIdList = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readI32();
          this.groupIdList.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroups_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroups_args');
  if (this.groupIdList !== null && this.groupIdList !== undefined) {
    output.writeFieldBegin('groupIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.groupIdList.length);
    for (var iter263 in this.groupIdList)
    {
      if (this.groupIdList.hasOwnProperty(iter263))
      {
        iter263 = this.groupIdList[iter263];
        output.writeI32(iter263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroups_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonGroupBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroups_result.prototype = {};
IFaceLog_getPersonGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.success = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = new ttypes.PersonGroupBean();
          elem270.read(input);
          this.success.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroups_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter271 in this.success)
    {
      if (this.success.hasOwnProperty(iter271))
      {
        iter271 = this.success[iter271];
        iter271.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsBelongs_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPersonGroupsBelongs_args.prototype = {};
IFaceLog_getPersonGroupsBelongs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsBelongs_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsBelongs_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroupsBelongs_result.prototype = {};
IFaceLog_getPersonGroupsBelongs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.success = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = input.readI32();
          this.success.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsBelongs_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsBelongs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter279 in this.success)
    {
      if (this.success.hasOwnProperty(iter279))
      {
        iter279 = this.success[iter279];
        output.writeI32(iter279);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsPermittedBy_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getPersonGroupsPermittedBy_args.prototype = {};
IFaceLog_getPersonGroupsPermittedBy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsPermittedBy_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonGroupsPermittedBy_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonGroupsPermittedBy_result.prototype = {};
IFaceLog_getPersonGroupsPermittedBy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.success = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readI32();
          this.success.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonGroupsPermittedBy_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonGroupsPermittedBy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter287 in this.success)
    {
      if (this.success.hasOwnProperty(iter287))
      {
        iter287 = this.success[iter287];
        output.writeI32(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermit_args = function(args) {
  this.deviceId = null;
  this.personId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_getPersonPermit_args.prototype = {};
IFaceLog_getPersonPermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermit_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 2);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonPermit_result.prototype = {};
IFaceLog_getPersonPermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermits_args = function(args) {
  this.deviceId = null;
  this.personIdList = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceId is unset!');
    }
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
  }
};
IFaceLog_getPersonPermits_args.prototype = {};
IFaceLog_getPersonPermits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.personIdList = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = input.readI32();
          this.personIdList.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermits_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermits_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter295 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter295))
      {
        iter295 = this.personIdList[iter295];
        output.writeI32(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonPermits_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonPermits_result.prototype = {};
IFaceLog_getPersonPermits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.success = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = new ttypes.PermitBean();
          elem302.read(input);
          this.success.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonPermits_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonPermits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter303 in this.success)
    {
      if (this.success.hasOwnProperty(iter303))
      {
        iter303 = this.success[iter303];
        iter303.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersons_args = function(args) {
  this.idList = null;
  if (args) {
    if (args.idList !== undefined && args.idList !== null) {
      this.idList = Thrift.copyList(args.idList, [null]);
    }
  }
};
IFaceLog_getPersons_args.prototype = {};
IFaceLog_getPersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.idList = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = input.readI32();
          this.idList.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersons_args');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter311 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter311))
      {
        iter311 = this.idList[iter311];
        output.writeI32(iter311);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersons_result.prototype = {};
IFaceLog_getPersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.success = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = new ttypes.PersonBean();
          elem318.read(input);
          this.success.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter319 in this.success)
    {
      if (this.success.hasOwnProperty(iter319))
      {
        iter319 = this.success[iter319];
        iter319.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonsOfGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getPersonsOfGroup_args.prototype = {};
IFaceLog_getPersonsOfGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsOfGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getPersonsOfGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getPersonsOfGroup_result.prototype = {};
IFaceLog_getPersonsOfGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.success = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = input.readI32();
          this.success.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getPersonsOfGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getPersonsOfGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter327 in this.success)
    {
      if (this.success.hasOwnProperty(iter327))
      {
        iter327 = this.success[iter327];
        output.writeI32(iter327);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getProperty_args = function(args) {
  this.key = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getProperty_args.prototype = {};
IFaceLog_getProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperty_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperty_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getProperty_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getProperty_result.prototype = {};
IFaceLog_getProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getProperty_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getProperty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getRedisParameters_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getRedisParameters_args.prototype = {};
IFaceLog_getRedisParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getRedisParameters_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getRedisParameters_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getRedisParameters_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getRedisParameters_result.prototype = {};
IFaceLog_getRedisParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size328 = 0;
        var _rtmp3332;
        this.success = {};
        var _ktype329 = 0;
        var _vtype330 = 0;
        _rtmp3332 = input.readMapBegin();
        _ktype329 = _rtmp3332.ktype;
        _vtype330 = _rtmp3332.vtype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var key334 = null;
          var val335 = null;
          key334 = input.readI32();
          val335 = input.readString();
          this.success[key334] = val335;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getRedisParameters_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getRedisParameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter336 in this.success)
    {
      if (this.success.hasOwnProperty(kiter336))
      {
        var viter337 = this.success[kiter336];
        output.writeI32(kiter336);
        output.writeString(viter337);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getServiceConfig_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_getServiceConfig_args.prototype = {};
IFaceLog_getServiceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getServiceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getServiceConfig_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getServiceConfig_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getServiceConfig_result.prototype = {};
IFaceLog_getServiceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size338 = 0;
        var _rtmp3342;
        this.success = {};
        var _ktype339 = 0;
        var _vtype340 = 0;
        _rtmp3342 = input.readMapBegin();
        _ktype339 = _rtmp3342.ktype;
        _vtype340 = _rtmp3342.vtype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var key344 = null;
          var val345 = null;
          key344 = input.readString();
          val345 = input.readString();
          this.success[key344] = val345;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getServiceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getServiceConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter346 in this.success)
    {
      if (this.success.hasOwnProperty(kiter346))
      {
        var viter347 = this.success[kiter346];
        output.writeString(kiter346);
        output.writeString(viter347);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_getSubDeviceGroup_args.prototype = {};
IFaceLog_getSubDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getSubDeviceGroup_result.prototype = {};
IFaceLog_getSubDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size348 = 0;
        var _rtmp3352;
        this.success = [];
        var _etype351 = 0;
        _rtmp3352 = input.readListBegin();
        _etype351 = _rtmp3352.etype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var elem354 = null;
          elem354 = input.readI32();
          this.success.push(elem354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter355 in this.success)
    {
      if (this.success.hasOwnProperty(iter355))
      {
        iter355 = this.success[iter355];
        output.writeI32(iter355);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_getSubPersonGroup_args.prototype = {};
IFaceLog_getSubPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_getSubPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_getSubPersonGroup_result.prototype = {};
IFaceLog_getSubPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size356 = 0;
        var _rtmp3360;
        this.success = [];
        var _etype359 = 0;
        _rtmp3360 = input.readListBegin();
        _etype359 = _rtmp3360.etype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var elem362 = null;
          elem362 = input.readI32();
          this.success.push(elem362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_getSubPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_getSubPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter363 in this.success)
    {
      if (this.success.hasOwnProperty(iter363))
      {
        iter363 = this.success[iter363];
        output.writeI32(iter363);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isDisable_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
  }
};
IFaceLog_isDisable_args.prototype = {};
IFaceLog_isDisable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isDisable_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isDisable_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isDisable_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isDisable_result.prototype = {};
IFaceLog_isDisable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isDisable_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isDisable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isLocal_args = function(args) {
};
IFaceLog_isLocal_args.prototype = {};
IFaceLog_isLocal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isLocal_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isLocal_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isLocal_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isLocal_result.prototype = {};
IFaceLog_isLocal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isLocal_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isLocal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidAckChannel_args = function(args) {
  this.ackChannel = null;
  if (args) {
    if (args.ackChannel !== undefined && args.ackChannel !== null) {
      this.ackChannel = args.ackChannel;
    }
  }
};
IFaceLog_isValidAckChannel_args.prototype = {};
IFaceLog_isValidAckChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ackChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidAckChannel_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidAckChannel_args');
  if (this.ackChannel !== null && this.ackChannel !== undefined) {
    output.writeFieldBegin('ackChannel', Thrift.Type.STRING, 1);
    output.writeString(this.ackChannel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidAckChannel_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidAckChannel_result.prototype = {};
IFaceLog_isValidAckChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidAckChannel_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidAckChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidCmdSn_args = function(args) {
  this.cmdSn = null;
  if (args) {
    if (args.cmdSn !== undefined && args.cmdSn !== null) {
      this.cmdSn = args.cmdSn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cmdSn is unset!');
    }
  }
};
IFaceLog_isValidCmdSn_args.prototype = {};
IFaceLog_isValidCmdSn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cmdSn = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidCmdSn_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidCmdSn_args');
  if (this.cmdSn !== null && this.cmdSn !== undefined) {
    output.writeFieldBegin('cmdSn', Thrift.Type.I32, 1);
    output.writeI32(this.cmdSn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidCmdSn_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidCmdSn_result.prototype = {};
IFaceLog_isValidCmdSn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidCmdSn_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidCmdSn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidDeviceToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidDeviceToken_args.prototype = {};
IFaceLog_isValidDeviceToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidDeviceToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidDeviceToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidDeviceToken_result.prototype = {};
IFaceLog_isValidDeviceToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidDeviceToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidDeviceToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPassword_args = function(args) {
  this.userId = null;
  this.password = null;
  this.isMd5 = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.isMd5 !== undefined && args.isMd5 !== null) {
      this.isMd5 = args.isMd5;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isMd5 is unset!');
    }
  }
};
IFaceLog_isValidPassword_args.prototype = {};
IFaceLog_isValidPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isMd5 = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPassword_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPassword_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.isMd5 !== null && this.isMd5 !== undefined) {
    output.writeFieldBegin('isMd5', Thrift.Type.BOOL, 3);
    output.writeBool(this.isMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPassword_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidPassword_result.prototype = {};
IFaceLog_isValidPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPassword_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPersonToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidPersonToken_args.prototype = {};
IFaceLog_isValidPersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPersonToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidPersonToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidPersonToken_result.prototype = {};
IFaceLog_isValidPersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidPersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidPersonToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidRootToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidRootToken_args.prototype = {};
IFaceLog_isValidRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidRootToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidRootToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidRootToken_result.prototype = {};
IFaceLog_isValidRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidRootToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidToken_args.prototype = {};
IFaceLog_isValidToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidToken_result.prototype = {};
IFaceLog_isValidToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidUserToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_isValidUserToken_args.prototype = {};
IFaceLog_isValidUserToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidUserToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidUserToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_isValidUserToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_isValidUserToken_result.prototype = {};
IFaceLog_isValidUserToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_isValidUserToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_isValidUserToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForDeviceGroup_args = function(args) {
  this.deviceGroupId = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
  }
};
IFaceLog_listOfParentForDeviceGroup_args.prototype = {};
IFaceLog_listOfParentForDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForDeviceGroup_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_listOfParentForDeviceGroup_result.prototype = {};
IFaceLog_listOfParentForDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size364 = 0;
        var _rtmp3368;
        this.success = [];
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = input.readI32();
          this.success.push(elem370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter371 in this.success)
    {
      if (this.success.hasOwnProperty(iter371))
      {
        iter371 = this.success[iter371];
        output.writeI32(iter371);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForPersonGroup_args = function(args) {
  this.personGroupId = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
  }
};
IFaceLog_listOfParentForPersonGroup_args.prototype = {};
IFaceLog_listOfParentForPersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForPersonGroup_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_listOfParentForPersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_listOfParentForPersonGroup_result.prototype = {};
IFaceLog_listOfParentForPersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size372 = 0;
        var _rtmp3376;
        this.success = [];
        var _etype375 = 0;
        _rtmp3376 = input.readListBegin();
        _etype375 = _rtmp3376.etype;
        _size372 = _rtmp3376.size;
        for (var _i377 = 0; _i377 < _size372; ++_i377)
        {
          var elem378 = null;
          elem378 = input.readI32();
          this.success.push(elem378);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_listOfParentForPersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_listOfParentForPersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter379 in this.success)
    {
      if (this.success.hasOwnProperty(iter379))
      {
        iter379 = this.success[iter379];
        output.writeI32(iter379);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadAllPerson_args = function(args) {
};
IFaceLog_loadAllPerson_args.prototype = {};
IFaceLog_loadAllPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadAllPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadAllPerson_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadAllPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadAllPerson_result.prototype = {};
IFaceLog_loadAllPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size380 = 0;
        var _rtmp3384;
        this.success = [];
        var _etype383 = 0;
        _rtmp3384 = input.readListBegin();
        _etype383 = _rtmp3384.etype;
        _size380 = _rtmp3384.size;
        for (var _i385 = 0; _i385 < _size380; ++_i385)
        {
          var elem386 = null;
          elem386 = input.readI32();
          this.success.push(elem386);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadAllPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadAllPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter387 in this.success)
    {
      if (this.success.hasOwnProperty(iter387))
      {
        iter387 = this.success[iter387];
        output.writeI32(iter387);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadDeviceByWhere_args.prototype = {};
IFaceLog_loadDeviceByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DeviceBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceByWhere_result.prototype = {};
IFaceLog_loadDeviceByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size388 = 0;
        var _rtmp3392;
        this.success = [];
        var _etype391 = 0;
        _rtmp3392 = input.readListBegin();
        _etype391 = _rtmp3392.etype;
        _size388 = _rtmp3392.size;
        for (var _i393 = 0; _i393 < _size388; ++_i393)
        {
          var elem394 = null;
          elem394 = new ttypes.DeviceBean();
          elem394.read(input);
          this.success.push(elem394);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter395 in this.success)
    {
      if (this.success.hasOwnProperty(iter395))
      {
        iter395 = this.success[iter395];
        iter395.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadDeviceGroupByWhere_args.prototype = {};
IFaceLog_loadDeviceGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceGroupByWhere_result.prototype = {};
IFaceLog_loadDeviceGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size396 = 0;
        var _rtmp3400;
        this.success = [];
        var _etype399 = 0;
        _rtmp3400 = input.readListBegin();
        _etype399 = _rtmp3400.etype;
        _size396 = _rtmp3400.size;
        for (var _i401 = 0; _i401 < _size396; ++_i401)
        {
          var elem402 = null;
          elem402 = input.readI32();
          this.success.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter403 in this.success)
    {
      if (this.success.hasOwnProperty(iter403))
      {
        iter403 = this.success[iter403];
        output.writeI32(iter403);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDeviceGroupIdByWhere_args.prototype = {};
IFaceLog_loadDeviceGroupIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceGroupIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceGroupIdByWhere_result.prototype = {};
IFaceLog_loadDeviceGroupIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size404 = 0;
        var _rtmp3408;
        this.success = [];
        var _etype407 = 0;
        _rtmp3408 = input.readListBegin();
        _etype407 = _rtmp3408.etype;
        _size404 = _rtmp3408.size;
        for (var _i409 = 0; _i409 < _size404; ++_i409)
        {
          var elem410 = null;
          elem410 = input.readI32();
          this.success.push(elem410);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceGroupIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceGroupIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter411 in this.success)
    {
      if (this.success.hasOwnProperty(iter411))
      {
        iter411 = this.success[iter411];
        output.writeI32(iter411);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadDeviceIdByWhere_args.prototype = {};
IFaceLog_loadDeviceIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadDeviceIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadDeviceIdByWhere_result.prototype = {};
IFaceLog_loadDeviceIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size412 = 0;
        var _rtmp3416;
        this.success = [];
        var _etype415 = 0;
        _rtmp3416 = input.readListBegin();
        _etype415 = _rtmp3416.etype;
        _size412 = _rtmp3416.size;
        for (var _i417 = 0; _i417 < _size412; ++_i417)
        {
          var elem418 = null;
          elem418 = input.readI32();
          this.success.push(elem418);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadDeviceIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadDeviceIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter419 in this.success)
    {
      if (this.success.hasOwnProperty(iter419))
      {
        iter419 = this.success[iter419];
        output.writeI32(iter419);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdate_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdate_args.prototype = {};
IFaceLog_loadFeatureMd5ByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdate_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdate_result.prototype = {};
IFaceLog_loadFeatureMd5ByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size420 = 0;
        var _rtmp3424;
        this.success = [];
        var _etype423 = 0;
        _rtmp3424 = input.readListBegin();
        _etype423 = _rtmp3424.etype;
        _size420 = _rtmp3424.size;
        for (var _i425 = 0; _i425 < _size420; ++_i425)
        {
          var elem426 = null;
          elem426 = input.readString();
          this.success.push(elem426);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter427 in this.success)
    {
      if (this.success.hasOwnProperty(iter427))
      {
        iter427 = this.success[iter427];
        output.writeString(iter427);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdateTimeStr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdateTimeStr_args.prototype = {};
IFaceLog_loadFeatureMd5ByUpdateTimeStr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdateTimeStr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdateTimeStr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadFeatureMd5ByUpdateTimeStr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadFeatureMd5ByUpdateTimeStr_result.prototype = {};
IFaceLog_loadFeatureMd5ByUpdateTimeStr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size428 = 0;
        var _rtmp3432;
        this.success = [];
        var _etype431 = 0;
        _rtmp3432 = input.readListBegin();
        _etype431 = _rtmp3432.etype;
        _size428 = _rtmp3432.size;
        for (var _i433 = 0; _i433 < _size428; ++_i433)
        {
          var elem434 = null;
          elem434 = input.readString();
          this.success.push(elem434);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadFeatureMd5ByUpdateTimeStr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadFeatureMd5ByUpdateTimeStr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter435 in this.success)
    {
      if (this.success.hasOwnProperty(iter435))
      {
        iter435 = this.success[iter435];
        output.writeString(iter435);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogByWhere_args.prototype = {};
IFaceLog_loadLogByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogByWhere_result.prototype = {};
IFaceLog_loadLogByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size436 = 0;
        var _rtmp3440;
        this.success = [];
        var _etype439 = 0;
        _rtmp3440 = input.readListBegin();
        _etype439 = _rtmp3440.etype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          var elem442 = null;
          elem442 = new ttypes.LogBean();
          elem442.read(input);
          this.success.push(elem442);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter443 in this.success)
    {
      if (this.success.hasOwnProperty(iter443))
      {
        iter443 = this.success[iter443];
        iter443.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTime_args = function(args) {
  this.timestamp = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByVerifyTime_args.prototype = {};
IFaceLog_loadLogLightByVerifyTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByVerifyTime_result.prototype = {};
IFaceLog_loadLogLightByVerifyTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size444 = 0;
        var _rtmp3448;
        this.success = [];
        var _etype447 = 0;
        _rtmp3448 = input.readListBegin();
        _etype447 = _rtmp3448.etype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          var elem450 = null;
          elem450 = new ttypes.LogLightBean();
          elem450.read(input);
          this.success.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter451 in this.success)
    {
      if (this.success.hasOwnProperty(iter451))
      {
        iter451 = this.success[iter451];
        iter451.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTimeTimestr_args = function(args) {
  this.timestamp = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByVerifyTimeTimestr_args.prototype = {};
IFaceLog_loadLogLightByVerifyTimeTimestr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTimeTimestr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTimeTimestr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByVerifyTimeTimestr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByVerifyTimeTimestr_result.prototype = {};
IFaceLog_loadLogLightByVerifyTimeTimestr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size452 = 0;
        var _rtmp3456;
        this.success = [];
        var _etype455 = 0;
        _rtmp3456 = input.readListBegin();
        _etype455 = _rtmp3456.etype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var elem458 = null;
          elem458 = new ttypes.LogLightBean();
          elem458.read(input);
          this.success.push(elem458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByVerifyTimeTimestr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByVerifyTimeTimestr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter459 in this.success)
    {
      if (this.success.hasOwnProperty(iter459))
      {
        iter459 = this.success[iter459];
        iter459.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadLogLightByWhere_args.prototype = {};
IFaceLog_loadLogLightByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadLogLightByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LogLightBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadLogLightByWhere_result.prototype = {};
IFaceLog_loadLogLightByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size460 = 0;
        var _rtmp3464;
        this.success = [];
        var _etype463 = 0;
        _rtmp3464 = input.readListBegin();
        _etype463 = _rtmp3464.etype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var elem466 = null;
          elem466 = new ttypes.LogLightBean();
          elem466.read(input);
          this.success.push(elem466);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadLogLightByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadLogLightByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter467 in this.success)
    {
      if (this.success.hasOwnProperty(iter467))
      {
        iter467 = this.success[iter467];
        iter467.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdate_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadPermitByUpdate_args.prototype = {};
IFaceLog_loadPermitByUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdate_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPermitByUpdate_result.prototype = {};
IFaceLog_loadPermitByUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size468 = 0;
        var _rtmp3472;
        this.success = [];
        var _etype471 = 0;
        _rtmp3472 = input.readListBegin();
        _etype471 = _rtmp3472.etype;
        _size468 = _rtmp3472.size;
        for (var _i473 = 0; _i473 < _size468; ++_i473)
        {
          var elem474 = null;
          elem474 = new ttypes.PermitBean();
          elem474.read(input);
          this.success.push(elem474);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter475 in this.success)
    {
      if (this.success.hasOwnProperty(iter475))
      {
        iter475 = this.success[iter475];
        iter475.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdateTimestr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_loadPermitByUpdateTimestr_args.prototype = {};
IFaceLog_loadPermitByUpdateTimestr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdateTimestr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdateTimestr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPermitByUpdateTimestr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PermitBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPermitByUpdateTimestr_result.prototype = {};
IFaceLog_loadPermitByUpdateTimestr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size476 = 0;
        var _rtmp3480;
        this.success = [];
        var _etype479 = 0;
        _rtmp3480 = input.readListBegin();
        _etype479 = _rtmp3480.etype;
        _size476 = _rtmp3480.size;
        for (var _i481 = 0; _i481 < _size476; ++_i481)
        {
          var elem482 = null;
          elem482 = new ttypes.PermitBean();
          elem482.read(input);
          this.success.push(elem482);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPermitByUpdateTimestr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPermitByUpdateTimestr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter483 in this.success)
    {
      if (this.success.hasOwnProperty(iter483))
      {
        iter483 = this.success[iter483];
        iter483.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadPersonByWhere_args.prototype = {};
IFaceLog_loadPersonByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PersonBean]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonByWhere_result.prototype = {};
IFaceLog_loadPersonByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size484 = 0;
        var _rtmp3488;
        this.success = [];
        var _etype487 = 0;
        _rtmp3488 = input.readListBegin();
        _etype487 = _rtmp3488.etype;
        _size484 = _rtmp3488.size;
        for (var _i489 = 0; _i489 < _size484; ++_i489)
        {
          var elem490 = null;
          elem490 = new ttypes.PersonBean();
          elem490.read(input);
          this.success.push(elem490);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter491 in this.success)
    {
      if (this.success.hasOwnProperty(iter491))
      {
        iter491 = this.success[iter491];
        iter491.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupByWhere_args = function(args) {
  this.where = null;
  this.startRow = null;
  this.numRows = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRow is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numRows is unset!');
    }
  }
};
IFaceLog_loadPersonGroupByWhere_args.prototype = {};
IFaceLog_loadPersonGroupByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.I32, 2);
    output.writeI32(this.startRow);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonGroupByWhere_result.prototype = {};
IFaceLog_loadPersonGroupByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size492 = 0;
        var _rtmp3496;
        this.success = [];
        var _etype495 = 0;
        _rtmp3496 = input.readListBegin();
        _etype495 = _rtmp3496.etype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var elem498 = null;
          elem498 = input.readI32();
          this.success.push(elem498);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter499 in this.success)
    {
      if (this.success.hasOwnProperty(iter499))
      {
        iter499 = this.success[iter499];
        output.writeI32(iter499);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadPersonGroupIdByWhere_args.prototype = {};
IFaceLog_loadPersonGroupIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonGroupIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonGroupIdByWhere_result.prototype = {};
IFaceLog_loadPersonGroupIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size500 = 0;
        var _rtmp3504;
        this.success = [];
        var _etype503 = 0;
        _rtmp3504 = input.readListBegin();
        _etype503 = _rtmp3504.etype;
        _size500 = _rtmp3504.size;
        for (var _i505 = 0; _i505 < _size500; ++_i505)
        {
          var elem506 = null;
          elem506 = input.readI32();
          this.success.push(elem506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonGroupIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonGroupIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter507 in this.success)
    {
      if (this.success.hasOwnProperty(iter507))
      {
        iter507 = this.success[iter507];
        output.writeI32(iter507);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTime_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadPersonIdByUpdateTime_args.prototype = {};
IFaceLog_loadPersonIdByUpdateTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTime_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTime_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByUpdateTime_result.prototype = {};
IFaceLog_loadPersonIdByUpdateTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size508 = 0;
        var _rtmp3512;
        this.success = [];
        var _etype511 = 0;
        _rtmp3512 = input.readListBegin();
        _etype511 = _rtmp3512.etype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          var elem514 = null;
          elem514 = input.readI32();
          this.success.push(elem514);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTime_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter515 in this.success)
    {
      if (this.success.hasOwnProperty(iter515))
      {
        iter515 = this.success[iter515];
        output.writeI32(iter515);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTimeTimeStr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_loadPersonIdByUpdateTimeTimeStr_args.prototype = {};
IFaceLog_loadPersonIdByUpdateTimeTimeStr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTimeTimeStr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTimeTimeStr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByUpdateTimeTimeStr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByUpdateTimeTimeStr_result.prototype = {};
IFaceLog_loadPersonIdByUpdateTimeTimeStr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size516 = 0;
        var _rtmp3520;
        this.success = [];
        var _etype519 = 0;
        _rtmp3520 = input.readListBegin();
        _etype519 = _rtmp3520.etype;
        _size516 = _rtmp3520.size;
        for (var _i521 = 0; _i521 < _size516; ++_i521)
        {
          var elem522 = null;
          elem522 = input.readI32();
          this.success.push(elem522);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByUpdateTimeTimeStr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByUpdateTimeTimeStr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter523 in this.success)
    {
      if (this.success.hasOwnProperty(iter523))
      {
        iter523 = this.success[iter523];
        output.writeI32(iter523);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByWhere_args = function(args) {
  this.where = null;
  if (args) {
    if (args.where !== undefined && args.where !== null) {
      this.where = args.where;
    }
  }
};
IFaceLog_loadPersonIdByWhere_args.prototype = {};
IFaceLog_loadPersonIdByWhere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.where = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByWhere_args');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRING, 1);
    output.writeString(this.where);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadPersonIdByWhere_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadPersonIdByWhere_result.prototype = {};
IFaceLog_loadPersonIdByWhere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size524 = 0;
        var _rtmp3528;
        this.success = [];
        var _etype527 = 0;
        _rtmp3528 = input.readListBegin();
        _etype527 = _rtmp3528.etype;
        _size524 = _rtmp3528.size;
        for (var _i529 = 0; _i529 < _size524; ++_i529)
        {
          var elem530 = null;
          elem530 = input.readI32();
          this.success.push(elem530);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadPersonIdByWhere_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadPersonIdByWhere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter531 in this.success)
    {
      if (this.success.hasOwnProperty(iter531))
      {
        iter531 = this.success[iter531];
        output.writeI32(iter531);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersons_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
IFaceLog_loadUpdatedPersons_args.prototype = {};
IFaceLog_loadUpdatedPersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersons_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersons_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadUpdatedPersons_result.prototype = {};
IFaceLog_loadUpdatedPersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size532 = 0;
        var _rtmp3536;
        this.success = [];
        var _etype535 = 0;
        _rtmp3536 = input.readListBegin();
        _etype535 = _rtmp3536.etype;
        _size532 = _rtmp3536.size;
        for (var _i537 = 0; _i537 < _size532; ++_i537)
        {
          var elem538 = null;
          elem538 = input.readI32();
          this.success.push(elem538);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersons_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter539 in this.success)
    {
      if (this.success.hasOwnProperty(iter539))
      {
        iter539 = this.success[iter539];
        output.writeI32(iter539);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersonsTimestr_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
IFaceLog_loadUpdatedPersonsTimestr_args.prototype = {};
IFaceLog_loadUpdatedPersonsTimestr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersonsTimestr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersonsTimestr_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_loadUpdatedPersonsTimestr_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_loadUpdatedPersonsTimestr_result.prototype = {};
IFaceLog_loadUpdatedPersonsTimestr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size540 = 0;
        var _rtmp3544;
        this.success = [];
        var _etype543 = 0;
        _rtmp3544 = input.readListBegin();
        _etype543 = _rtmp3544.etype;
        _size540 = _rtmp3544.size;
        for (var _i545 = 0; _i545 < _size540; ++_i545)
        {
          var elem546 = null;
          elem546 = input.readI32();
          this.success.push(elem546);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_loadUpdatedPersonsTimestr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_loadUpdatedPersonsTimestr_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter547 in this.success)
    {
      if (this.success.hasOwnProperty(iter547))
      {
        iter547 = this.success[iter547];
        output.writeI32(iter547);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_offline_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_offline_args.prototype = {};
IFaceLog_offline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_offline_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_offline_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_offline_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_offline_result.prototype = {};
IFaceLog_offline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_offline_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_offline_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_online_args = function(args) {
  this.device = null;
  if (args) {
    if (args.device !== undefined && args.device !== null) {
      this.device = new ttypes.DeviceBean(args.device);
    }
  }
};
IFaceLog_online_args.prototype = {};
IFaceLog_online_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.device = new ttypes.DeviceBean();
        this.device.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_online_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_online_args');
  if (this.device !== null && this.device !== undefined) {
    output.writeFieldBegin('device', Thrift.Type.STRUCT, 1);
    this.device.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_online_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Token(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_online_result.prototype = {};
IFaceLog_online_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Token();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_online_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_online_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_registerDevice_args = function(args) {
  this.newDevice = null;
  if (args) {
    if (args.newDevice !== undefined && args.newDevice !== null) {
      this.newDevice = new ttypes.DeviceBean(args.newDevice);
    }
  }
};
IFaceLog_registerDevice_args.prototype = {};
IFaceLog_registerDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.newDevice = new ttypes.DeviceBean();
        this.newDevice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_registerDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_registerDevice_args');
  if (this.newDevice !== null && this.newDevice !== undefined) {
    output.writeFieldBegin('newDevice', Thrift.Type.STRUCT, 1);
    this.newDevice.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_registerDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_registerDevice_result.prototype = {};
IFaceLog_registerDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_registerDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_registerDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releasePersonToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_releasePersonToken_args.prototype = {};
IFaceLog_releasePersonToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releasePersonToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releasePersonToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releasePersonToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releasePersonToken_result.prototype = {};
IFaceLog_releasePersonToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releasePersonToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releasePersonToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseRootToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_releaseRootToken_args.prototype = {};
IFaceLog_releaseRootToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseRootToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseRootToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseRootToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releaseRootToken_result.prototype = {};
IFaceLog_releaseRootToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseRootToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseRootToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseUserToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_releaseUserToken_args.prototype = {};
IFaceLog_releaseUserToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseUserToken_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseUserToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_releaseUserToken_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_releaseUserToken_result.prototype = {};
IFaceLog_releaseUserToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_releaseUserToken_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_releaseUserToken_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_replaceFeature_args = function(args) {
  this.personId = null;
  this.featureMd5 = null;
  this.deleteOldFeatureImage = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.deleteOldFeatureImage !== undefined && args.deleteOldFeatureImage !== null) {
      this.deleteOldFeatureImage = args.deleteOldFeatureImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deleteOldFeatureImage is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_replaceFeature_args.prototype = {};
IFaceLog_replaceFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteOldFeatureImage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_replaceFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_replaceFeature_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 2);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.deleteOldFeatureImage !== null && this.deleteOldFeatureImage !== undefined) {
    output.writeFieldBegin('deleteOldFeatureImage', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteOldFeatureImage);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_replaceFeature_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_replaceFeature_result.prototype = {};
IFaceLog_replaceFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_replaceFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_replaceFeature_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
  }
};
IFaceLog_rootGroupOfDevice_args.prototype = {};
IFaceLog_rootGroupOfDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_rootGroupOfDevice_result.prototype = {};
IFaceLog_rootGroupOfDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfPerson_args = function(args) {
  this.personId = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
  }
};
IFaceLog_rootGroupOfPerson_args.prototype = {};
IFaceLog_rootGroupOfPerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfPerson_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_rootGroupOfPerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_rootGroupOfPerson_result.prototype = {};
IFaceLog_rootGroupOfPerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_rootGroupOfPerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_rootGroupOfPerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_runCmd_args = function(args) {
  this.target = null;
  this.group = null;
  this.cmdpath = null;
  this.jsonArgs = null;
  this.ackChannel = null;
  this.token = null;
  if (args) {
    if (args.target !== undefined && args.target !== null) {
      this.target = Thrift.copyList(args.target, [null]);
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field group is unset!');
    }
    if (args.cmdpath !== undefined && args.cmdpath !== null) {
      this.cmdpath = args.cmdpath;
    }
    if (args.jsonArgs !== undefined && args.jsonArgs !== null) {
      this.jsonArgs = args.jsonArgs;
    }
    if (args.ackChannel !== undefined && args.ackChannel !== null) {
      this.ackChannel = args.ackChannel;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_runCmd_args.prototype = {};
IFaceLog_runCmd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size548 = 0;
        var _rtmp3552;
        this.target = [];
        var _etype551 = 0;
        _rtmp3552 = input.readListBegin();
        _etype551 = _rtmp3552.etype;
        _size548 = _rtmp3552.size;
        for (var _i553 = 0; _i553 < _size548; ++_i553)
        {
          var elem554 = null;
          elem554 = input.readI32();
          this.target.push(elem554);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.group = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cmdpath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.jsonArgs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ackChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_runCmd_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_runCmd_args');
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.target.length);
    for (var iter555 in this.target)
    {
      if (this.target.hasOwnProperty(iter555))
      {
        iter555 = this.target[iter555];
        output.writeI32(iter555);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.BOOL, 2);
    output.writeBool(this.group);
    output.writeFieldEnd();
  }
  if (this.cmdpath !== null && this.cmdpath !== undefined) {
    output.writeFieldBegin('cmdpath', Thrift.Type.STRING, 3);
    output.writeString(this.cmdpath);
    output.writeFieldEnd();
  }
  if (this.jsonArgs !== null && this.jsonArgs !== undefined) {
    output.writeFieldBegin('jsonArgs', Thrift.Type.STRING, 4);
    output.writeString(this.jsonArgs);
    output.writeFieldEnd();
  }
  if (this.ackChannel !== null && this.ackChannel !== undefined) {
    output.writeFieldBegin('ackChannel', Thrift.Type.STRING, 5);
    output.writeString(this.ackChannel);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_runCmd_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_runCmd_result.prototype = {};
IFaceLog_runCmd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_runCmd_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_runCmd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_runTask_args = function(args) {
  this.taskQueue = null;
  this.cmdpath = null;
  this.jsonArgs = null;
  this.ackChannel = null;
  this.token = null;
  if (args) {
    if (args.taskQueue !== undefined && args.taskQueue !== null) {
      this.taskQueue = args.taskQueue;
    }
    if (args.cmdpath !== undefined && args.cmdpath !== null) {
      this.cmdpath = args.cmdpath;
    }
    if (args.jsonArgs !== undefined && args.jsonArgs !== null) {
      this.jsonArgs = args.jsonArgs;
    }
    if (args.ackChannel !== undefined && args.ackChannel !== null) {
      this.ackChannel = args.ackChannel;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_runTask_args.prototype = {};
IFaceLog_runTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskQueue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cmdpath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jsonArgs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ackChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_runTask_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_runTask_args');
  if (this.taskQueue !== null && this.taskQueue !== undefined) {
    output.writeFieldBegin('taskQueue', Thrift.Type.STRING, 1);
    output.writeString(this.taskQueue);
    output.writeFieldEnd();
  }
  if (this.cmdpath !== null && this.cmdpath !== undefined) {
    output.writeFieldBegin('cmdpath', Thrift.Type.STRING, 2);
    output.writeString(this.cmdpath);
    output.writeFieldEnd();
  }
  if (this.jsonArgs !== null && this.jsonArgs !== undefined) {
    output.writeFieldBegin('jsonArgs', Thrift.Type.STRING, 3);
    output.writeString(this.jsonArgs);
    output.writeFieldEnd();
  }
  if (this.ackChannel !== null && this.ackChannel !== undefined) {
    output.writeFieldBegin('ackChannel', Thrift.Type.STRING, 4);
    output.writeString(this.ackChannel);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 5);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_runTask_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_runTask_result.prototype = {};
IFaceLog_runTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_runTask_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_runTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDevice_args = function(args) {
  this.deviceBean = null;
  this.token = null;
  if (args) {
    if (args.deviceBean !== undefined && args.deviceBean !== null) {
      this.deviceBean = new ttypes.DeviceBean(args.deviceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveDevice_args.prototype = {};
IFaceLog_saveDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceBean = new ttypes.DeviceBean();
        this.deviceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDevice_args');
  if (this.deviceBean !== null && this.deviceBean !== undefined) {
    output.writeFieldBegin('deviceBean', Thrift.Type.STRUCT, 1);
    this.deviceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveDevice_result.prototype = {};
IFaceLog_saveDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDeviceGroup_args = function(args) {
  this.deviceGroupBean = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupBean !== undefined && args.deviceGroupBean !== null) {
      this.deviceGroupBean = new ttypes.DeviceGroupBean(args.deviceGroupBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveDeviceGroup_args.prototype = {};
IFaceLog_saveDeviceGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceGroupBean = new ttypes.DeviceGroupBean();
        this.deviceGroupBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDeviceGroup_args');
  if (this.deviceGroupBean !== null && this.deviceGroupBean !== undefined) {
    output.writeFieldBegin('deviceGroupBean', Thrift.Type.STRUCT, 1);
    this.deviceGroupBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveDeviceGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveDeviceGroup_result.prototype = {};
IFaceLog_saveDeviceGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveDeviceGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveDeviceGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePermit_args = function(args) {
  this.permitBean = null;
  this.token = null;
  if (args) {
    if (args.permitBean !== undefined && args.permitBean !== null) {
      this.permitBean = new ttypes.PermitBean(args.permitBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePermit_args.prototype = {};
IFaceLog_savePermit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.permitBean = new ttypes.PermitBean();
        this.permitBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePermit_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePermit_args');
  if (this.permitBean !== null && this.permitBean !== undefined) {
    output.writeFieldBegin('permitBean', Thrift.Type.STRUCT, 1);
    this.permitBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePermit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePermit_result.prototype = {};
IFaceLog_savePermit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePermit_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePermit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePermitWithSchedule_args = function(args) {
  this.deviceGroupId = null;
  this.personGroupId = null;
  this.schedule = null;
  this.token = null;
  if (args) {
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field deviceGroupId is unset!');
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personGroupId is unset!');
    }
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = args.schedule;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePermitWithSchedule_args.prototype = {};
IFaceLog_savePermitWithSchedule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schedule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePermitWithSchedule_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePermitWithSchedule_args');
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRING, 3);
    output.writeString(this.schedule);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePermitWithSchedule_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PermitBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePermitWithSchedule_result.prototype = {};
IFaceLog_savePermitWithSchedule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PermitBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePermitWithSchedule_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePermitWithSchedule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePerson_args = function(args) {
  this.personBean = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePerson_args.prototype = {};
IFaceLog_savePerson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePerson_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePerson_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePerson_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePerson_result.prototype = {};
IFaceLog_savePerson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePerson_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePerson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonFull_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.feature = null;
  this.featureVersion = null;
  this.featureImage = null;
  this.featureFaceBean = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.featureImage !== undefined && args.featureImage !== null) {
      this.featureImage = args.featureImage;
    }
    if (args.featureFaceBean !== undefined && args.featureFaceBean !== null) {
      this.featureFaceBean = new ttypes.FaceBean(args.featureFaceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonFull_args.prototype = {};
IFaceLog_savePersonFull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.featureImage = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.featureFaceBean = new ttypes.FaceBean();
        this.featureFaceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonFull_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonFull_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 4);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.featureImage !== null && this.featureImage !== undefined) {
    output.writeFieldBegin('featureImage', Thrift.Type.STRING, 5);
    output.writeBinary(this.featureImage);
    output.writeFieldEnd();
  }
  if (this.featureFaceBean !== null && this.featureFaceBean !== undefined) {
    output.writeFieldBegin('featureFaceBean', Thrift.Type.STRUCT, 6);
    this.featureFaceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 7);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonFull_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonFull_result.prototype = {};
IFaceLog_savePersonFull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonFull_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonFull_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonGroup_args = function(args) {
  this.personGroupBean = null;
  this.token = null;
  if (args) {
    if (args.personGroupBean !== undefined && args.personGroupBean !== null) {
      this.personGroupBean = new ttypes.PersonGroupBean(args.personGroupBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonGroup_args.prototype = {};
IFaceLog_savePersonGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personGroupBean = new ttypes.PersonGroupBean();
        this.personGroupBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonGroup_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonGroup_args');
  if (this.personGroupBean !== null && this.personGroupBean !== undefined) {
    output.writeFieldBegin('personGroupBean', Thrift.Type.STRUCT, 1);
    this.personGroupBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonGroupBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonGroup_result.prototype = {};
IFaceLog_savePersonGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonGroupBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonGroup_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhoto_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhoto_args.prototype = {};
IFaceLog_savePersonWithPhoto_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhoto_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhoto_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhoto_result.prototype = {};
IFaceLog_savePersonWithPhoto_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhoto_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhoto_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeature_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.featureBean = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.featureBean !== undefined && args.featureBean !== null) {
      this.featureBean = new ttypes.FeatureBean(args.featureBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeature_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.featureBean = new ttypes.FeatureBean();
        this.featureBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeature_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.featureBean !== null && this.featureBean !== undefined) {
    output.writeFieldBegin('featureBean', Thrift.Type.STRUCT, 3);
    this.featureBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeature_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeature_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeature_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.feature = null;
  this.featureVersion = null;
  this.faceBeans = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.faceBeans !== undefined && args.faceBeans !== null) {
      this.faceBeans = Thrift.copyList(args.faceBeans, [ttypes.FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size556 = 0;
        var _rtmp3560;
        this.faceBeans = [];
        var _etype559 = 0;
        _rtmp3560 = input.readListBegin();
        _etype559 = _rtmp3560.etype;
        _size556 = _rtmp3560.size;
        for (var _i561 = 0; _i561 < _size556; ++_i561)
        {
          var elem562 = null;
          elem562 = new ttypes.FaceBean();
          elem562.read(input);
          this.faceBeans.push(elem562);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 4);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.faceBeans !== null && this.faceBeans !== undefined) {
    output.writeFieldBegin('faceBeans', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.faceBeans.length);
    for (var iter563 in this.faceBeans)
    {
      if (this.faceBeans.hasOwnProperty(iter563))
      {
        iter563 = this.faceBeans[iter563];
        iter563.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 6);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args = function(args) {
  this.personBean = null;
  this.idPhoto = null;
  this.feature = null;
  this.featureVersion = null;
  this.photos = null;
  this.faces = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhoto !== undefined && args.idPhoto !== null) {
      this.idPhoto = args.idPhoto;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.featureVersion !== undefined && args.featureVersion !== null) {
      this.featureVersion = args.featureVersion;
    }
    if (args.photos !== undefined && args.photos !== null) {
      this.photos = Thrift.copyList(args.photos, [null]);
    }
    if (args.faces !== undefined && args.faces !== null) {
      this.faces = Thrift.copyList(args.faces, [ttypes.FaceBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhoto = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.featureVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size564 = 0;
        var _rtmp3568;
        this.photos = [];
        var _etype567 = 0;
        _rtmp3568 = input.readListBegin();
        _etype567 = _rtmp3568.etype;
        _size564 = _rtmp3568.size;
        for (var _i569 = 0; _i569 < _size564; ++_i569)
        {
          var elem570 = null;
          elem570 = input.readBinary();
          this.photos.push(elem570);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size571 = 0;
        var _rtmp3575;
        this.faces = [];
        var _etype574 = 0;
        _rtmp3575 = input.readListBegin();
        _etype574 = _rtmp3575.etype;
        _size571 = _rtmp3575.size;
        for (var _i576 = 0; _i576 < _size571; ++_i576)
        {
          var elem577 = null;
          elem577 = new ttypes.FaceBean();
          elem577.read(input);
          this.faces.push(elem577);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhoto !== null && this.idPhoto !== undefined) {
    output.writeFieldBegin('idPhoto', Thrift.Type.STRING, 2);
    output.writeBinary(this.idPhoto);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 3);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.featureVersion !== null && this.featureVersion !== undefined) {
    output.writeFieldBegin('featureVersion', Thrift.Type.STRING, 4);
    output.writeString(this.featureVersion);
    output.writeFieldEnd();
  }
  if (this.photos !== null && this.photos !== undefined) {
    output.writeFieldBegin('photos', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.photos.length);
    for (var iter578 in this.photos)
    {
      if (this.photos.hasOwnProperty(iter578))
      {
        iter578 = this.photos[iter578];
        output.writeBinary(iter578);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.faces !== null && this.faces !== undefined) {
    output.writeFieldBegin('faces', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.faces.length);
    for (var iter579 in this.faces)
    {
      if (this.faces.hasOwnProperty(iter579))
      {
        iter579 = this.faces[iter579];
        iter579.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 7);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureSaved_args = function(args) {
  this.personBean = null;
  this.idPhotoMd5 = null;
  this.featureMd5 = null;
  this.token = null;
  if (args) {
    if (args.personBean !== undefined && args.personBean !== null) {
      this.personBean = new ttypes.PersonBean(args.personBean);
    }
    if (args.idPhotoMd5 !== undefined && args.idPhotoMd5 !== null) {
      this.idPhotoMd5 = args.idPhotoMd5;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.personBean = new ttypes.PersonBean();
        this.personBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idPhotoMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureSaved_args');
  if (this.personBean !== null && this.personBean !== undefined) {
    output.writeFieldBegin('personBean', Thrift.Type.STRUCT, 1);
    this.personBean.write(output);
    output.writeFieldEnd();
  }
  if (this.idPhotoMd5 !== null && this.idPhotoMd5 !== undefined) {
    output.writeFieldBegin('idPhotoMd5', Thrift.Type.STRING, 2);
    output.writeString(this.idPhotoMd5);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 3);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 4);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonWithPhotoAndFeatureSaved_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PersonBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype = {};
IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PersonBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonWithPhotoAndFeatureSaved_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonWithPhotoAndFeatureSaved_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersons_args = function(args) {
  this.persons = null;
  this.token = null;
  if (args) {
    if (args.persons !== undefined && args.persons !== null) {
      this.persons = Thrift.copyList(args.persons, [ttypes.PersonBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersons_args.prototype = {};
IFaceLog_savePersons_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size580 = 0;
        var _rtmp3584;
        this.persons = [];
        var _etype583 = 0;
        _rtmp3584 = input.readListBegin();
        _etype583 = _rtmp3584.etype;
        _size580 = _rtmp3584.size;
        for (var _i585 = 0; _i585 < _size580; ++_i585)
        {
          var elem586 = null;
          elem586 = new ttypes.PersonBean();
          elem586.read(input);
          this.persons.push(elem586);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersons_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersons_args');
  if (this.persons !== null && this.persons !== undefined) {
    output.writeFieldBegin('persons', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.persons.length);
    for (var iter587 in this.persons)
    {
      if (this.persons.hasOwnProperty(iter587))
      {
        iter587 = this.persons[iter587];
        iter587.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersons_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersons_result.prototype = {};
IFaceLog_savePersons_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersons_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersons_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonsWithPhoto_args = function(args) {
  this.photos = null;
  this.persons = null;
  this.token = null;
  if (args) {
    if (args.photos !== undefined && args.photos !== null) {
      this.photos = Thrift.copyList(args.photos, [null]);
    }
    if (args.persons !== undefined && args.persons !== null) {
      this.persons = Thrift.copyList(args.persons, [ttypes.PersonBean]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_savePersonsWithPhoto_args.prototype = {};
IFaceLog_savePersonsWithPhoto_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size588 = 0;
        var _rtmp3592;
        this.photos = [];
        var _etype591 = 0;
        _rtmp3592 = input.readListBegin();
        _etype591 = _rtmp3592.etype;
        _size588 = _rtmp3592.size;
        for (var _i593 = 0; _i593 < _size588; ++_i593)
        {
          var elem594 = null;
          elem594 = input.readBinary();
          this.photos.push(elem594);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size595 = 0;
        var _rtmp3599;
        this.persons = [];
        var _etype598 = 0;
        _rtmp3599 = input.readListBegin();
        _etype598 = _rtmp3599.etype;
        _size595 = _rtmp3599.size;
        for (var _i600 = 0; _i600 < _size595; ++_i600)
        {
          var elem601 = null;
          elem601 = new ttypes.PersonBean();
          elem601.read(input);
          this.persons.push(elem601);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonsWithPhoto_args');
  if (this.photos !== null && this.photos !== undefined) {
    output.writeFieldBegin('photos', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.photos.length);
    for (var iter602 in this.photos)
    {
      if (this.photos.hasOwnProperty(iter602))
      {
        iter602 = this.photos[iter602];
        output.writeBinary(iter602);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.persons !== null && this.persons !== undefined) {
    output.writeFieldBegin('persons', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.persons.length);
    for (var iter603 in this.persons)
    {
      if (this.persons.hasOwnProperty(iter603))
      {
        iter603 = this.persons[iter603];
        iter603.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_savePersonsWithPhoto_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_savePersonsWithPhoto_result.prototype = {};
IFaceLog_savePersonsWithPhoto_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_savePersonsWithPhoto_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_savePersonsWithPhoto_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveServiceConfig_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_saveServiceConfig_args.prototype = {};
IFaceLog_saveServiceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveServiceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveServiceConfig_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_saveServiceConfig_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_saveServiceConfig_result.prototype = {};
IFaceLog_saveServiceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_saveServiceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_saveServiceConfig_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_sdkTaskQueueOf_args = function(args) {
  this.task = null;
  this.sdkVersion = null;
  this.token = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
    if (args.sdkVersion !== undefined && args.sdkVersion !== null) {
      this.sdkVersion = args.sdkVersion;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_sdkTaskQueueOf_args.prototype = {};
IFaceLog_sdkTaskQueueOf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.task = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_sdkTaskQueueOf_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_sdkTaskQueueOf_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRING, 1);
    output.writeString(this.task);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 2);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_sdkTaskQueueOf_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_sdkTaskQueueOf_result.prototype = {};
IFaceLog_sdkTaskQueueOf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_sdkTaskQueueOf_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_sdkTaskQueueOf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDate_args = function(args) {
  this.personId = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryDate is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDate_args.prototype = {};
IFaceLog_setPersonExpiryDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDate_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 2);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDate_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDate_result.prototype = {};
IFaceLog_setPersonExpiryDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDate_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDate_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateList_args = function(args) {
  this.personIdList = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personIdList !== undefined && args.personIdList !== null) {
      this.personIdList = Thrift.copyList(args.personIdList, [null]);
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryDate is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDateList_args.prototype = {};
IFaceLog_setPersonExpiryDateList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size604 = 0;
        var _rtmp3608;
        this.personIdList = [];
        var _etype607 = 0;
        _rtmp3608 = input.readListBegin();
        _etype607 = _rtmp3608.etype;
        _size604 = _rtmp3608.size;
        for (var _i609 = 0; _i609 < _size604; ++_i609)
        {
          var elem610 = null;
          elem610 = input.readI32();
          this.personIdList.push(elem610);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateList_args');
  if (this.personIdList !== null && this.personIdList !== undefined) {
    output.writeFieldBegin('personIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.personIdList.length);
    for (var iter611 in this.personIdList)
    {
      if (this.personIdList.hasOwnProperty(iter611))
      {
        iter611 = this.personIdList[iter611];
        output.writeI32(iter611);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 2);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateList_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDateList_result.prototype = {};
IFaceLog_setPersonExpiryDateList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateList_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateList_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateTimeStr_args = function(args) {
  this.personId = null;
  this.expiryDate = null;
  this.token = null;
  if (args) {
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field personId is unset!');
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setPersonExpiryDateTimeStr_args.prototype = {};
IFaceLog_setPersonExpiryDateTimeStr_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expiryDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateTimeStr_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateTimeStr_args');
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 1);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.STRING, 2);
    output.writeString(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setPersonExpiryDateTimeStr_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setPersonExpiryDateTimeStr_result.prototype = {};
IFaceLog_setPersonExpiryDateTimeStr_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setPersonExpiryDateTimeStr_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setPersonExpiryDateTimeStr_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperties_args = function(args) {
  this.config = null;
  this.token = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = Thrift.copyMap(args.config, [null]);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setProperties_args.prototype = {};
IFaceLog_setProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size612 = 0;
        var _rtmp3616;
        this.config = {};
        var _ktype613 = 0;
        var _vtype614 = 0;
        _rtmp3616 = input.readMapBegin();
        _ktype613 = _rtmp3616.ktype;
        _vtype614 = _rtmp3616.vtype;
        _size612 = _rtmp3616.size;
        for (var _i617 = 0; _i617 < _size612; ++_i617)
        {
          var key618 = null;
          var val619 = null;
          key618 = input.readString();
          val619 = input.readString();
          this.config[key618] = val619;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperties_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperties_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.config));
    for (var kiter620 in this.config)
    {
      if (this.config.hasOwnProperty(kiter620))
      {
        var viter621 = this.config[kiter620];
        output.writeString(kiter620);
        output.writeString(viter621);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperties_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setProperties_result.prototype = {};
IFaceLog_setProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperties_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperties_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperty_args = function(args) {
  this.key = null;
  this.value = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_setProperty_args.prototype = {};
IFaceLog_setProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperty_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperty_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_setProperty_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_setProperty_result.prototype = {};
IFaceLog_setProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_setProperty_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_setProperty_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_taskQueueOf_args = function(args) {
  this.task = null;
  this.token = null;
  if (args) {
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_taskQueueOf_args.prototype = {};
IFaceLog_taskQueueOf_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.task = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskQueueOf_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskQueueOf_args');
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRING, 1);
    output.writeString(this.task);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_taskQueueOf_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_taskQueueOf_result.prototype = {};
IFaceLog_taskQueueOf_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_taskQueueOf_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_taskQueueOf_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unbindBorder_args = function(args) {
  this.personGroupId = null;
  this.deviceGroupId = null;
  this.token = null;
  if (args) {
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_unbindBorder_args.prototype = {};
IFaceLog_unbindBorder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unbindBorder_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unbindBorder_args');
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 1);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 2);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unbindBorder_result = function(args) {
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_unbindBorder_result.prototype = {};
IFaceLog_unbindBorder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unbindBorder_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unbindBorder_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unregisterDevice_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_unregisterDevice_args.prototype = {};
IFaceLog_unregisterDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unregisterDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unregisterDevice_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_unregisterDevice_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.ServiceSecurityException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
IFaceLog_unregisterDevice_result.prototype = {};
IFaceLog_unregisterDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceSecurityException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.ServiceRuntimeException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_unregisterDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_unregisterDevice_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_updateDevice_args = function(args) {
  this.deviceBean = null;
  this.token = null;
  if (args) {
    if (args.deviceBean !== undefined && args.deviceBean !== null) {
      this.deviceBean = new ttypes.DeviceBean(args.deviceBean);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
  }
};
IFaceLog_updateDevice_args.prototype = {};
IFaceLog_updateDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceBean = new ttypes.DeviceBean();
        this.deviceBean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_updateDevice_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_updateDevice_args');
  if (this.deviceBean !== null && this.deviceBean !== undefined) {
    output.writeFieldBegin('deviceBean', Thrift.Type.STRUCT, 1);
    this.deviceBean.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_updateDevice_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceBean(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_updateDevice_result.prototype = {};
IFaceLog_updateDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_updateDevice_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_updateDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_version_args = function(args) {
};
IFaceLog_version_args.prototype = {};
IFaceLog_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_version_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_version_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_version_result.prototype = {};
IFaceLog_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_version_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_versionInfo_args = function(args) {
};
IFaceLog_versionInfo_args.prototype = {};
IFaceLog_versionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_versionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_versionInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLog_versionInfo_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ServiceRuntimeException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
IFaceLog_versionInfo_result.prototype = {};
IFaceLog_versionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size622 = 0;
        var _rtmp3626;
        this.success = {};
        var _ktype623 = 0;
        var _vtype624 = 0;
        _rtmp3626 = input.readMapBegin();
        _ktype623 = _rtmp3626.ktype;
        _vtype624 = _rtmp3626.vtype;
        _size622 = _rtmp3626.size;
        for (var _i627 = 0; _i627 < _size622; ++_i627)
        {
          var key628 = null;
          var val629 = null;
          key628 = input.readString();
          val629 = input.readString();
          this.success[key628] = val629;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ServiceRuntimeException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IFaceLog_versionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('IFaceLog_versionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter630 in this.success)
    {
      if (this.success.hasOwnProperty(kiter630))
      {
        var viter631 = this.success[kiter630];
        output.writeString(kiter630);
        output.writeString(viter631);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IFaceLogClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
IFaceLogClient.prototype = {};
IFaceLogClient.prototype.seqid = function() { return this._seqid; };
IFaceLogClient.prototype.new_seqid = function() { return this._seqid += 1; };
IFaceLogClient.prototype.addFeature = function(feature, featureVersion, personId, faecBeans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFeature(feature, featureVersion, personId, faecBeans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFeature(feature, featureVersion, personId, faecBeans, token);
  }
};

IFaceLogClient.prototype.send_addFeature = function(feature, featureVersion, personId, faecBeans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    feature: feature,
    featureVersion: featureVersion,
    personId: personId,
    faecBeans: faecBeans,
    token: token
  };
  var args = new IFaceLog_addFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFeature failed: unknown result');
};
IFaceLogClient.prototype.addFeatureMulti = function(feature, featureVersion, personId, photos, faces, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFeatureMulti(feature, featureVersion, personId, photos, faces, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFeatureMulti(feature, featureVersion, personId, photos, faces, token);
  }
};

IFaceLogClient.prototype.send_addFeatureMulti = function(feature, featureVersion, personId, photos, faces, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFeatureMulti', Thrift.MessageType.CALL, this.seqid());
  var params = {
    feature: feature,
    featureVersion: featureVersion,
    personId: personId,
    photos: photos,
    faces: faces,
    token: token
  };
  var args = new IFaceLog_addFeatureMulti_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addFeatureMulti = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addFeatureMulti_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFeatureMulti failed: unknown result');
};
IFaceLogClient.prototype.addFeatureWithImage = function(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFeatureWithImage(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFeatureWithImage(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, token);
  }
};

IFaceLogClient.prototype.send_addFeatureWithImage = function(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFeatureWithImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    feature: feature,
    featureVersion: featureVersion,
    personId: personId,
    asIdPhotoIfAbsent: asIdPhotoIfAbsent,
    featurePhoto: featurePhoto,
    faceBean: faceBean,
    token: token
  };
  var args = new IFaceLog_addFeatureWithImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addFeatureWithImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addFeatureWithImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFeatureWithImage failed: unknown result');
};
IFaceLogClient.prototype.addImage = function(imageData, deviceId, faceBean, personId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addImage(imageData, deviceId, faceBean, personId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addImage(imageData, deviceId, faceBean, personId, token);
  }
};

IFaceLogClient.prototype.send_addImage = function(imageData, deviceId, faceBean, personId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageData: imageData,
    deviceId: deviceId,
    faceBean: faceBean,
    personId: personId,
    token: token
  };
  var args = new IFaceLog_addImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addImage failed: unknown result');
};
IFaceLogClient.prototype.addLog = function(logBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLog(logBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLog(logBean, token);
  }
};

IFaceLogClient.prototype.send_addLog = function(logBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLog', Thrift.MessageType.CALL, this.seqid());
  var params = {
    logBean: logBean,
    token: token
  };
  var args = new IFaceLog_addLog_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLog_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.addLogFull = function(logBean, faceBean, featureImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLogFull(logBean, faceBean, featureImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLogFull(logBean, faceBean, featureImage, token);
  }
};

IFaceLogClient.prototype.send_addLogFull = function(logBean, faceBean, featureImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLogFull', Thrift.MessageType.CALL, this.seqid());
  var params = {
    logBean: logBean,
    faceBean: faceBean,
    featureImage: featureImage,
    token: token
  };
  var args = new IFaceLog_addLogFull_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLogFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLogFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.addLogs = function(beans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLogs(beans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLogs(beans, token);
  }
};

IFaceLogClient.prototype.send_addLogs = function(beans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLogs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    beans: beans,
    token: token
  };
  var args = new IFaceLog_addLogs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLogs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLogs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.addLogsFull = function(logBeans, faceBeans, featureImages, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addLogsFull(logBeans, faceBeans, featureImages, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addLogsFull(logBeans, faceBeans, featureImages, token);
  }
};

IFaceLogClient.prototype.send_addLogsFull = function(logBeans, faceBeans, featureImages, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addLogsFull', Thrift.MessageType.CALL, this.seqid());
  var params = {
    logBeans: logBeans,
    faceBeans: faceBeans,
    featureImages: featureImages,
    token: token
  };
  var args = new IFaceLog_addLogsFull_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_addLogsFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_addLogsFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.applyAckChannel = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyAckChannel(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyAckChannel(token);
  }
};

IFaceLogClient.prototype.send_applyAckChannel = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyAckChannel', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_applyAckChannel_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyAckChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyAckChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyAckChannel failed: unknown result');
};
IFaceLogClient.prototype.applyAckChannelWithDuration = function(duration, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyAckChannelWithDuration(duration, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyAckChannelWithDuration(duration, token);
  }
};

IFaceLogClient.prototype.send_applyAckChannelWithDuration = function(duration, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyAckChannelWithDuration', Thrift.MessageType.CALL, this.seqid());
  var params = {
    duration: duration,
    token: token
  };
  var args = new IFaceLog_applyAckChannelWithDuration_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyAckChannelWithDuration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyAckChannelWithDuration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyAckChannelWithDuration failed: unknown result');
};
IFaceLogClient.prototype.applyCmdSn = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyCmdSn(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyCmdSn(token);
  }
};

IFaceLogClient.prototype.send_applyCmdSn = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyCmdSn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_applyCmdSn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyCmdSn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyCmdSn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyCmdSn failed: unknown result');
};
IFaceLogClient.prototype.applyPersonToken = function(personId, password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyPersonToken(personId, password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyPersonToken(personId, password, isMd5);
  }
};

IFaceLogClient.prototype.send_applyPersonToken = function(personId, password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyPersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyPersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyPersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyPersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyPersonToken failed: unknown result');
};
IFaceLogClient.prototype.applyRootToken = function(password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyRootToken(password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyRootToken(password, isMd5);
  }
};

IFaceLogClient.prototype.send_applyRootToken = function(password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyRootToken failed: unknown result');
};
IFaceLogClient.prototype.applyUserToken = function(userid, password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_applyUserToken(userid, password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_applyUserToken(userid, password, isMd5);
  }
};

IFaceLogClient.prototype.send_applyUserToken = function(userid, password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('applyUserToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    userid: userid,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_applyUserToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_applyUserToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_applyUserToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('applyUserToken failed: unknown result');
};
IFaceLogClient.prototype.bindBorder = function(personGroupId, deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_bindBorder(personGroupId, deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_bindBorder(personGroupId, deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_bindBorder = function(personGroupId, deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('bindBorder', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_bindBorder_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_bindBorder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_bindBorder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.childListForDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_childListForDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_childListForDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_childListForDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('childListForDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_childListForDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_childListForDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_childListForDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('childListForDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.childListForPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_childListForPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_childListForPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_childListForPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('childListForPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_childListForPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_childListForPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_childListForPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('childListForPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.countDeviceByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countDeviceByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countDeviceByWhere(where);
  }
};

IFaceLogClient.prototype.send_countDeviceByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countDeviceByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countDeviceByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countDeviceByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countDeviceByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countDeviceByWhere failed: unknown result');
};
IFaceLogClient.prototype.countDeviceGroupByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countDeviceGroupByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countDeviceGroupByWhere(where);
  }
};

IFaceLogClient.prototype.send_countDeviceGroupByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countDeviceGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countDeviceGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countDeviceGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countDeviceGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countDeviceGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.countLogByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogByWhere(where);
  }
};

IFaceLogClient.prototype.send_countLogByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countLogByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogByWhere failed: unknown result');
};
IFaceLogClient.prototype.countLogLightByVerifyTime = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogLightByVerifyTime(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogLightByVerifyTime(timestamp);
  }
};

IFaceLogClient.prototype.send_countLogLightByVerifyTime = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogLightByVerifyTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_countLogLightByVerifyTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogLightByVerifyTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogLightByVerifyTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogLightByVerifyTime failed: unknown result');
};
IFaceLogClient.prototype.countLogLightByVerifyTimeTimestr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogLightByVerifyTimeTimestr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogLightByVerifyTimeTimestr(timestamp);
  }
};

IFaceLogClient.prototype.send_countLogLightByVerifyTimeTimestr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogLightByVerifyTimeTimestr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_countLogLightByVerifyTimeTimestr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogLightByVerifyTimeTimestr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogLightByVerifyTimeTimestr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogLightByVerifyTimeTimestr failed: unknown result');
};
IFaceLogClient.prototype.countLogLightByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countLogLightByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countLogLightByWhere(where);
  }
};

IFaceLogClient.prototype.send_countLogLightByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countLogLightByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countLogLightByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countLogLightByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countLogLightByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countLogLightByWhere failed: unknown result');
};
IFaceLogClient.prototype.countPersonByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countPersonByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countPersonByWhere(where);
  }
};

IFaceLogClient.prototype.send_countPersonByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countPersonByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countPersonByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countPersonByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countPersonByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countPersonByWhere failed: unknown result');
};
IFaceLogClient.prototype.countPersonGroupByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_countPersonGroupByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_countPersonGroupByWhere(where);
  }
};

IFaceLogClient.prototype.send_countPersonGroupByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('countPersonGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_countPersonGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_countPersonGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_countPersonGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('countPersonGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.deleteAllFeaturesByPersonId = function(personId, deleteImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllFeaturesByPersonId(personId, deleteImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllFeaturesByPersonId(personId, deleteImage, token);
  }
};

IFaceLogClient.prototype.send_deleteAllFeaturesByPersonId = function(personId, deleteImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllFeaturesByPersonId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    deleteImage: deleteImage,
    token: token
  };
  var args = new IFaceLog_deleteAllFeaturesByPersonId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteAllFeaturesByPersonId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteAllFeaturesByPersonId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteAllFeaturesByPersonId failed: unknown result');
};
IFaceLogClient.prototype.deleteDeviceGroup = function(deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteDeviceGroup(deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteDeviceGroup(deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_deleteDeviceGroup = function(deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_deleteDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.deleteFeature = function(featureMd5, deleteImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteFeature(featureMd5, deleteImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteFeature(featureMd5, deleteImage, token);
  }
};

IFaceLogClient.prototype.send_deleteFeature = function(featureMd5, deleteImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5,
    deleteImage: deleteImage,
    token: token
  };
  var args = new IFaceLog_deleteFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteFeature failed: unknown result');
};
IFaceLogClient.prototype.deleteGroupPermitOnDeviceGroup = function(deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteGroupPermitOnDeviceGroup(deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteGroupPermitOnDeviceGroup(deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_deleteGroupPermitOnDeviceGroup = function(deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteGroupPermitOnDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_deleteGroupPermitOnDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteGroupPermitOnDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteGroupPermitOnDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteGroupPermitOnDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.deleteImage = function(imageMd5, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteImage(imageMd5, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteImage(imageMd5, token);
  }
};

IFaceLogClient.prototype.send_deleteImage = function(imageMd5, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMd5: imageMd5,
    token: token
  };
  var args = new IFaceLog_deleteImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deleteImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deleteImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteImage failed: unknown result');
};
IFaceLogClient.prototype.deletePermitById = function(deviceGroupId, personGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePermitById(deviceGroupId, personGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePermitById(deviceGroupId, personGroupId, token);
  }
};

IFaceLogClient.prototype.send_deletePermitById = function(deviceGroupId, personGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePermitById', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_deletePermitById_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePermitById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePermitById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePermitById failed: unknown result');
};
IFaceLogClient.prototype.deletePerson = function(personId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePerson(personId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePerson(personId, token);
  }
};

IFaceLogClient.prototype.send_deletePerson = function(personId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    token: token
  };
  var args = new IFaceLog_deletePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePerson failed: unknown result');
};
IFaceLogClient.prototype.deletePersonByPapersNum = function(papersNum, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonByPapersNum(papersNum, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonByPapersNum(papersNum, token);
  }
};

IFaceLogClient.prototype.send_deletePersonByPapersNum = function(papersNum, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNum: papersNum,
    token: token
  };
  var args = new IFaceLog_deletePersonByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.deletePersonGroup = function(personGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonGroup(personGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonGroup(personGroupId, token);
  }
};

IFaceLogClient.prototype.send_deletePersonGroup = function(personGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_deletePersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonGroup failed: unknown result');
};
IFaceLogClient.prototype.deletePersonGroupPermit = function(personGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonGroupPermit(personGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonGroupPermit(personGroupId, token);
  }
};

IFaceLogClient.prototype.send_deletePersonGroupPermit = function(personGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonGroupPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    token: token
  };
  var args = new IFaceLog_deletePersonGroupPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonGroupPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonGroupPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonGroupPermit failed: unknown result');
};
IFaceLogClient.prototype.deletePersons = function(personIdList, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersons(personIdList, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersons(personIdList, token);
  }
};

IFaceLogClient.prototype.send_deletePersons = function(personIdList, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    token: token
  };
  var args = new IFaceLog_deletePersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersons failed: unknown result');
};
IFaceLogClient.prototype.deletePersonsByPapersNum = function(papersNumlist, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePersonsByPapersNum(papersNumlist, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePersonsByPapersNum(papersNumlist, token);
  }
};

IFaceLogClient.prototype.send_deletePersonsByPapersNum = function(papersNumlist, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePersonsByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNumlist: papersNumlist,
    token: token
  };
  var args = new IFaceLog_deletePersonsByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_deletePersonsByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_deletePersonsByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deletePersonsByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.disablePerson = function(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disablePerson(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disablePerson(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
  }
};

IFaceLogClient.prototype.send_disablePerson = function(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disablePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    moveToGroupId: moveToGroupId,
    deletePhoto: deletePhoto,
    deleteFeature: deleteFeature,
    deleteLog: deleteLog,
    token: token
  };
  var args = new IFaceLog_disablePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_disablePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_disablePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.disablePersonList = function(personIdList, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disablePersonList(personIdList, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disablePersonList(personIdList, token);
  }
};

IFaceLogClient.prototype.send_disablePersonList = function(personIdList, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disablePersonList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    token: token
  };
  var args = new IFaceLog_disablePersonList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_disablePersonList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_disablePersonList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.existsDevice = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsDevice(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsDevice(id);
  }
};

IFaceLogClient.prototype.send_existsDevice = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id
  };
  var args = new IFaceLog_existsDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsDevice failed: unknown result');
};
IFaceLogClient.prototype.existsFeature = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsFeature(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsFeature(md5);
  }
};

IFaceLogClient.prototype.send_existsFeature = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_existsFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsFeature failed: unknown result');
};
IFaceLogClient.prototype.existsImage = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsImage(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsImage(md5);
  }
};

IFaceLogClient.prototype.send_existsImage = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_existsImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsImage failed: unknown result');
};
IFaceLogClient.prototype.existsPerson = function(persionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsPerson(persionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsPerson(persionId);
  }
};

IFaceLogClient.prototype.send_existsPerson = function(persionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('existsPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    persionId: persionId
  };
  var args = new IFaceLog_existsPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_existsPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_existsPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsPerson failed: unknown result');
};
IFaceLogClient.prototype.getDevice = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevice(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevice(deviceId);
  }
};

IFaceLogClient.prototype.send_getDevice = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_getDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevice failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroups = function(groupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroups(groupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroups(groupIdList);
  }
};

IFaceLogClient.prototype.send_getDeviceGroups = function(groupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroups', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupIdList: groupIdList
  };
  var args = new IFaceLog_getDeviceGroups_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroups failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsBelongs = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsBelongs(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsBelongs(deviceId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsBelongs = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsBelongs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_getDeviceGroupsBelongs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsBelongs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsBelongs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsBelongs failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsPermit = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsPermit(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsPermit(personGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsPermit = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getDeviceGroupsPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsPermit failed: unknown result');
};
IFaceLogClient.prototype.getDeviceGroupsPermittedBy = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceGroupsPermittedBy(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceGroupsPermittedBy(personGroupId);
  }
};

IFaceLogClient.prototype.send_getDeviceGroupsPermittedBy = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceGroupsPermittedBy', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getDeviceGroupsPermittedBy_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceGroupsPermittedBy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceGroupsPermittedBy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceGroupsPermittedBy failed: unknown result');
};
IFaceLogClient.prototype.getDeviceIdOfFeature = function(featureMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDeviceIdOfFeature(featureMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDeviceIdOfFeature(featureMd5);
  }
};

IFaceLogClient.prototype.send_getDeviceIdOfFeature = function(featureMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDeviceIdOfFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getDeviceIdOfFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDeviceIdOfFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDeviceIdOfFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDeviceIdOfFeature failed: unknown result');
};
IFaceLogClient.prototype.getDevices = function(idList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevices(idList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevices(idList);
  }
};

IFaceLogClient.prototype.send_getDevices = function(idList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevices', Thrift.MessageType.CALL, this.seqid());
  var params = {
    idList: idList
  };
  var args = new IFaceLog_getDevices_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevices failed: unknown result');
};
IFaceLogClient.prototype.getDevicesOfGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDevicesOfGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDevicesOfGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getDevicesOfGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDevicesOfGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getDevicesOfGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getDevicesOfGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getDevicesOfGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDevicesOfGroup failed: unknown result');
};
IFaceLogClient.prototype.getFace = function(faceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFace(faceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFace(faceId);
  }
};

IFaceLogClient.prototype.send_getFace = function(faceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFace', Thrift.MessageType.CALL, this.seqid());
  var params = {
    faceId: faceId
  };
  var args = new IFaceLog_getFace_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFace failed: unknown result');
};
IFaceLogClient.prototype.getFeature = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeature(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeature(md5);
  }
};

IFaceLogClient.prototype.send_getFeature = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeature failed: unknown result');
};
IFaceLogClient.prototype.getFeatureBytes = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeatureBytes(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeatureBytes(md5);
  }
};

IFaceLogClient.prototype.send_getFeatureBytes = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeatureBytes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeatureBytes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeatureBytes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeatureBytes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeatureBytes failed: unknown result');
};
IFaceLogClient.prototype.getFeatures = function(md5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeatures(md5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeatures(md5);
  }
};

IFaceLogClient.prototype.send_getFeatures = function(md5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeatures', Thrift.MessageType.CALL, this.seqid());
  var params = {
    md5: md5
  };
  var args = new IFaceLog_getFeatures_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeatures = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeatures_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeatures failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesByPersonId = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesByPersonId(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesByPersonId(personId);
  }
};

IFaceLogClient.prototype.send_getFeaturesByPersonId = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesByPersonId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getFeaturesByPersonId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesByPersonId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesByPersonId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesByPersonId failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesByPersonIdAndSdkVersion = function(personId, sdkVersion, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesByPersonIdAndSdkVersion(personId, sdkVersion);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesByPersonIdAndSdkVersion(personId, sdkVersion);
  }
};

IFaceLogClient.prototype.send_getFeaturesByPersonIdAndSdkVersion = function(personId, sdkVersion) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesByPersonIdAndSdkVersion', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    sdkVersion: sdkVersion
  };
  var args = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesByPersonIdAndSdkVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesByPersonIdAndSdkVersion failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesOfPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesOfPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesOfPerson(personId);
  }
};

IFaceLogClient.prototype.send_getFeaturesOfPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesOfPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getFeaturesOfPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesOfPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesOfPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesOfPerson failed: unknown result');
};
IFaceLogClient.prototype.getFeaturesPermittedOnDevice = function(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFeaturesPermittedOnDevice(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFeaturesPermittedOnDevice(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds);
  }
};

IFaceLogClient.prototype.send_getFeaturesPermittedOnDevice = function(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFeaturesPermittedOnDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    ignoreSchedule: ignoreSchedule,
    sdkVersion: sdkVersion,
    excludeFeatureIds: excludeFeatureIds
  };
  var args = new IFaceLog_getFeaturesPermittedOnDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getFeaturesPermittedOnDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getFeaturesPermittedOnDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFeaturesPermittedOnDevice failed: unknown result');
};
IFaceLogClient.prototype.getGroupPermit = function(deviceId, personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupPermit(deviceId, personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupPermit(deviceId, personGroupId);
  }
};

IFaceLogClient.prototype.send_getGroupPermit = function(deviceId, personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getGroupPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getGroupPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getGroupPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupPermit failed: unknown result');
};
IFaceLogClient.prototype.getGroupPermitOnDeviceGroup = function(deviceGroupId, personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupPermitOnDeviceGroup(deviceGroupId, personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupPermitOnDeviceGroup(deviceGroupId, personGroupId);
  }
};

IFaceLogClient.prototype.send_getGroupPermitOnDeviceGroup = function(deviceGroupId, personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupPermitOnDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getGroupPermitOnDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getGroupPermitOnDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getGroupPermitOnDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupPermitOnDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.getGroupPermits = function(deviceId, personGroupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupPermits(deviceId, personGroupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupPermits(deviceId, personGroupIdList);
  }
};

IFaceLogClient.prototype.send_getGroupPermits = function(deviceId, personGroupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupPermits', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personGroupIdList: personGroupIdList
  };
  var args = new IFaceLog_getGroupPermits_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getGroupPermits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getGroupPermits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupPermits failed: unknown result');
};
IFaceLogClient.prototype.getImage = function(imageMD5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImage(imageMD5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImage(imageMD5);
  }
};

IFaceLogClient.prototype.send_getImage = function(imageMD5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMD5: imageMD5
  };
  var args = new IFaceLog_getImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImage failed: unknown result');
};
IFaceLogClient.prototype.getImageBytes = function(imageMD5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImageBytes(imageMD5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImageBytes(imageMD5);
  }
};

IFaceLogClient.prototype.send_getImageBytes = function(imageMD5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImageBytes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    imageMD5: imageMD5
  };
  var args = new IFaceLog_getImageBytes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImageBytes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImageBytes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImageBytes failed: unknown result');
};
IFaceLogClient.prototype.getImagesAssociatedByFeature = function(featureMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getImagesAssociatedByFeature(featureMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getImagesAssociatedByFeature(featureMd5);
  }
};

IFaceLogClient.prototype.send_getImagesAssociatedByFeature = function(featureMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getImagesAssociatedByFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureMd5: featureMd5
  };
  var args = new IFaceLog_getImagesAssociatedByFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getImagesAssociatedByFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getImagesAssociatedByFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getImagesAssociatedByFeature failed: unknown result');
};
IFaceLogClient.prototype.getLogBeansByPersonId = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLogBeansByPersonId(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLogBeansByPersonId(personId);
  }
};

IFaceLogClient.prototype.send_getLogBeansByPersonId = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLogBeansByPersonId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getLogBeansByPersonId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getLogBeansByPersonId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getLogBeansByPersonId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLogBeansByPersonId failed: unknown result');
};
IFaceLogClient.prototype.getPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPerson(personId);
  }
};

IFaceLogClient.prototype.send_getPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPerson failed: unknown result');
};
IFaceLogClient.prototype.getPersonByPapersNum = function(papersNum, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonByPapersNum(papersNum);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonByPapersNum(papersNum);
  }
};

IFaceLogClient.prototype.send_getPersonByPapersNum = function(papersNum) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonByPapersNum', Thrift.MessageType.CALL, this.seqid());
  var params = {
    papersNum: papersNum
  };
  var args = new IFaceLog_getPersonByPapersNum_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonByPapersNum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonByPapersNum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonByPapersNum failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroups = function(groupIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroups(groupIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroups(groupIdList);
  }
};

IFaceLogClient.prototype.send_getPersonGroups = function(groupIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroups', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupIdList: groupIdList
  };
  var args = new IFaceLog_getPersonGroups_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroups failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroupsBelongs = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroupsBelongs(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroupsBelongs(personId);
  }
};

IFaceLogClient.prototype.send_getPersonGroupsBelongs = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroupsBelongs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_getPersonGroupsBelongs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroupsBelongs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroupsBelongs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroupsBelongs failed: unknown result');
};
IFaceLogClient.prototype.getPersonGroupsPermittedBy = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonGroupsPermittedBy(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonGroupsPermittedBy(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonGroupsPermittedBy = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonGroupsPermittedBy', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getPersonGroupsPermittedBy_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonGroupsPermittedBy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonGroupsPermittedBy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonGroupsPermittedBy failed: unknown result');
};
IFaceLogClient.prototype.getPersonPermit = function(deviceId, personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonPermit(deviceId, personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonPermit(deviceId, personId);
  }
};

IFaceLogClient.prototype.send_getPersonPermit = function(deviceId, personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonPermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personId: personId
  };
  var args = new IFaceLog_getPersonPermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonPermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonPermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonPermit failed: unknown result');
};
IFaceLogClient.prototype.getPersonPermits = function(deviceId, personIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonPermits(deviceId, personIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonPermits(deviceId, personIdList);
  }
};

IFaceLogClient.prototype.send_getPersonPermits = function(deviceId, personIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonPermits', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId,
    personIdList: personIdList
  };
  var args = new IFaceLog_getPersonPermits_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonPermits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonPermits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonPermits failed: unknown result');
};
IFaceLogClient.prototype.getPersons = function(idList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersons(idList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersons(idList);
  }
};

IFaceLogClient.prototype.send_getPersons = function(idList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    idList: idList
  };
  var args = new IFaceLog_getPersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersons failed: unknown result');
};
IFaceLogClient.prototype.getPersonsOfGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPersonsOfGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPersonsOfGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getPersonsOfGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPersonsOfGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getPersonsOfGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getPersonsOfGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getPersonsOfGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPersonsOfGroup failed: unknown result');
};
IFaceLogClient.prototype.getProperty = function(key, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProperty(key, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProperty(key, token);
  }
};

IFaceLogClient.prototype.send_getProperty = function(key, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProperty', Thrift.MessageType.CALL, this.seqid());
  var params = {
    key: key,
    token: token
  };
  var args = new IFaceLog_getProperty_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProperty failed: unknown result');
};
IFaceLogClient.prototype.getRedisParameters = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRedisParameters(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRedisParameters(token);
  }
};

IFaceLogClient.prototype.send_getRedisParameters = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRedisParameters', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_getRedisParameters_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getRedisParameters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getRedisParameters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRedisParameters failed: unknown result');
};
IFaceLogClient.prototype.getServiceConfig = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getServiceConfig(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getServiceConfig(token);
  }
};

IFaceLogClient.prototype.send_getServiceConfig = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getServiceConfig', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_getServiceConfig_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getServiceConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getServiceConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServiceConfig failed: unknown result');
};
IFaceLogClient.prototype.getSubDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_getSubDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_getSubDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getSubDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getSubDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.getSubPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_getSubPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_getSubPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_getSubPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_getSubPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.isDisable = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isDisable(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isDisable(personId);
  }
};

IFaceLogClient.prototype.send_isDisable = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isDisable', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_isDisable_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isDisable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isDisable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isDisable failed: unknown result');
};
IFaceLogClient.prototype.isLocal = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isLocal();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isLocal();
  }
};

IFaceLogClient.prototype.send_isLocal = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isLocal', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_isLocal_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isLocal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isLocal_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isLocal failed: unknown result');
};
IFaceLogClient.prototype.isValidAckChannel = function(ackChannel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidAckChannel(ackChannel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidAckChannel(ackChannel);
  }
};

IFaceLogClient.prototype.send_isValidAckChannel = function(ackChannel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidAckChannel', Thrift.MessageType.CALL, this.seqid());
  var params = {
    ackChannel: ackChannel
  };
  var args = new IFaceLog_isValidAckChannel_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidAckChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidAckChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidAckChannel failed: unknown result');
};
IFaceLogClient.prototype.isValidCmdSn = function(cmdSn, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidCmdSn(cmdSn);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidCmdSn(cmdSn);
  }
};

IFaceLogClient.prototype.send_isValidCmdSn = function(cmdSn) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidCmdSn', Thrift.MessageType.CALL, this.seqid());
  var params = {
    cmdSn: cmdSn
  };
  var args = new IFaceLog_isValidCmdSn_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidCmdSn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidCmdSn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidCmdSn failed: unknown result');
};
IFaceLogClient.prototype.isValidDeviceToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidDeviceToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidDeviceToken(token);
  }
};

IFaceLogClient.prototype.send_isValidDeviceToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidDeviceToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidDeviceToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidDeviceToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidDeviceToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidDeviceToken failed: unknown result');
};
IFaceLogClient.prototype.isValidPassword = function(userId, password, isMd5, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidPassword(userId, password, isMd5);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidPassword(userId, password, isMd5);
  }
};

IFaceLogClient.prototype.send_isValidPassword = function(userId, password, isMd5) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidPassword', Thrift.MessageType.CALL, this.seqid());
  var params = {
    userId: userId,
    password: password,
    isMd5: isMd5
  };
  var args = new IFaceLog_isValidPassword_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidPassword failed: unknown result');
};
IFaceLogClient.prototype.isValidPersonToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidPersonToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidPersonToken(token);
  }
};

IFaceLogClient.prototype.send_isValidPersonToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidPersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidPersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidPersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidPersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidPersonToken failed: unknown result');
};
IFaceLogClient.prototype.isValidRootToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidRootToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidRootToken(token);
  }
};

IFaceLogClient.prototype.send_isValidRootToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidRootToken failed: unknown result');
};
IFaceLogClient.prototype.isValidToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidToken(token);
  }
};

IFaceLogClient.prototype.send_isValidToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidToken failed: unknown result');
};
IFaceLogClient.prototype.isValidUserToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isValidUserToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isValidUserToken(token);
  }
};

IFaceLogClient.prototype.send_isValidUserToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isValidUserToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_isValidUserToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_isValidUserToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_isValidUserToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isValidUserToken failed: unknown result');
};
IFaceLogClient.prototype.listOfParentForDeviceGroup = function(deviceGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listOfParentForDeviceGroup(deviceGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listOfParentForDeviceGroup(deviceGroupId);
  }
};

IFaceLogClient.prototype.send_listOfParentForDeviceGroup = function(deviceGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listOfParentForDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId
  };
  var args = new IFaceLog_listOfParentForDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_listOfParentForDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_listOfParentForDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listOfParentForDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.listOfParentForPersonGroup = function(personGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listOfParentForPersonGroup(personGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listOfParentForPersonGroup(personGroupId);
  }
};

IFaceLogClient.prototype.send_listOfParentForPersonGroup = function(personGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listOfParentForPersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId
  };
  var args = new IFaceLog_listOfParentForPersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_listOfParentForPersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_listOfParentForPersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listOfParentForPersonGroup failed: unknown result');
};
IFaceLogClient.prototype.loadAllPerson = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadAllPerson();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadAllPerson();
  }
};

IFaceLogClient.prototype.send_loadAllPerson = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadAllPerson', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_loadAllPerson_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadAllPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadAllPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadAllPerson failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadDeviceByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadDeviceByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceGroupByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceGroupByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceGroupByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadDeviceGroupByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadDeviceGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceGroupIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceGroupIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceGroupIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadDeviceGroupIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceGroupIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadDeviceGroupIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceGroupIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceGroupIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceGroupIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadDeviceIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadDeviceIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadDeviceIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadDeviceIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadDeviceIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadDeviceIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadDeviceIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadDeviceIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadDeviceIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadFeatureMd5ByUpdate = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadFeatureMd5ByUpdate(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadFeatureMd5ByUpdate(timestamp);
  }
};

IFaceLogClient.prototype.send_loadFeatureMd5ByUpdate = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadFeatureMd5ByUpdate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadFeatureMd5ByUpdate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadFeatureMd5ByUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadFeatureMd5ByUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadFeatureMd5ByUpdate failed: unknown result');
};
IFaceLogClient.prototype.loadFeatureMd5ByUpdateTimeStr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadFeatureMd5ByUpdateTimeStr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadFeatureMd5ByUpdateTimeStr(timestamp);
  }
};

IFaceLogClient.prototype.send_loadFeatureMd5ByUpdateTimeStr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadFeatureMd5ByUpdateTimeStr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadFeatureMd5ByUpdateTimeStr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadFeatureMd5ByUpdateTimeStr failed: unknown result');
};
IFaceLogClient.prototype.loadLogByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadLogLightByVerifyTime = function(timestamp, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogLightByVerifyTime(timestamp, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogLightByVerifyTime(timestamp, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogLightByVerifyTime = function(timestamp, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogLightByVerifyTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByVerifyTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogLightByVerifyTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogLightByVerifyTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogLightByVerifyTime failed: unknown result');
};
IFaceLogClient.prototype.loadLogLightByVerifyTimeTimestr = function(timestamp, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogLightByVerifyTimeTimestr(timestamp, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogLightByVerifyTimeTimestr(timestamp, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogLightByVerifyTimeTimestr = function(timestamp, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogLightByVerifyTimeTimestr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByVerifyTimeTimestr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogLightByVerifyTimeTimestr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogLightByVerifyTimeTimestr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogLightByVerifyTimeTimestr failed: unknown result');
};
IFaceLogClient.prototype.loadLogLightByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadLogLightByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadLogLightByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadLogLightByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadLogLightByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadLogLightByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadLogLightByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadLogLightByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadLogLightByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPermitByUpdate = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPermitByUpdate(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPermitByUpdate(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPermitByUpdate = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPermitByUpdate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPermitByUpdate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPermitByUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPermitByUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPermitByUpdate failed: unknown result');
};
IFaceLogClient.prototype.loadPermitByUpdateTimestr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPermitByUpdateTimestr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPermitByUpdateTimestr(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPermitByUpdateTimestr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPermitByUpdateTimestr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPermitByUpdateTimestr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPermitByUpdateTimestr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPermitByUpdateTimestr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPermitByUpdateTimestr failed: unknown result');
};
IFaceLogClient.prototype.loadPersonByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadPersonByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadPersonByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonGroupByWhere = function(where, startRow, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonGroupByWhere(where, startRow, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonGroupByWhere(where, startRow, numRows);
  }
};

IFaceLogClient.prototype.send_loadPersonGroupByWhere = function(where, startRow, numRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonGroupByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where,
    startRow: startRow,
    numRows: numRows
  };
  var args = new IFaceLog_loadPersonGroupByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonGroupByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonGroupByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonGroupByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonGroupIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonGroupIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonGroupIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadPersonGroupIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonGroupIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadPersonGroupIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonGroupIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonGroupIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonGroupIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadPersonIdByUpdateTime = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonIdByUpdateTime(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonIdByUpdateTime(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByUpdateTime = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonIdByUpdateTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPersonIdByUpdateTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonIdByUpdateTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonIdByUpdateTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonIdByUpdateTime failed: unknown result');
};
IFaceLogClient.prototype.loadPersonIdByUpdateTimeTimeStr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonIdByUpdateTimeTimeStr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonIdByUpdateTimeTimeStr(timestamp);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByUpdateTimeTimeStr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonIdByUpdateTimeTimeStr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonIdByUpdateTimeTimeStr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonIdByUpdateTimeTimeStr failed: unknown result');
};
IFaceLogClient.prototype.loadPersonIdByWhere = function(where, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadPersonIdByWhere(where);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadPersonIdByWhere(where);
  }
};

IFaceLogClient.prototype.send_loadPersonIdByWhere = function(where) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadPersonIdByWhere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    where: where
  };
  var args = new IFaceLog_loadPersonIdByWhere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadPersonIdByWhere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadPersonIdByWhere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadPersonIdByWhere failed: unknown result');
};
IFaceLogClient.prototype.loadUpdatedPersons = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadUpdatedPersons(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadUpdatedPersons(timestamp);
  }
};

IFaceLogClient.prototype.send_loadUpdatedPersons = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadUpdatedPersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadUpdatedPersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadUpdatedPersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadUpdatedPersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadUpdatedPersons failed: unknown result');
};
IFaceLogClient.prototype.loadUpdatedPersonsTimestr = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadUpdatedPersonsTimestr(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadUpdatedPersonsTimestr(timestamp);
  }
};

IFaceLogClient.prototype.send_loadUpdatedPersonsTimestr = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loadUpdatedPersonsTimestr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    timestamp: timestamp
  };
  var args = new IFaceLog_loadUpdatedPersonsTimestr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_loadUpdatedPersonsTimestr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_loadUpdatedPersonsTimestr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadUpdatedPersonsTimestr failed: unknown result');
};
IFaceLogClient.prototype.offline = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offline(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offline(token);
  }
};

IFaceLogClient.prototype.send_offline = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offline', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_offline_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_offline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_offline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.online = function(device, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_online(device);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_online(device);
  }
};

IFaceLogClient.prototype.send_online = function(device) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('online', Thrift.MessageType.CALL, this.seqid());
  var params = {
    device: device
  };
  var args = new IFaceLog_online_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_online = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_online_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('online failed: unknown result');
};
IFaceLogClient.prototype.registerDevice = function(newDevice, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerDevice(newDevice);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerDevice(newDevice);
  }
};

IFaceLogClient.prototype.send_registerDevice = function(newDevice) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    newDevice: newDevice
  };
  var args = new IFaceLog_registerDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_registerDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_registerDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerDevice failed: unknown result');
};
IFaceLogClient.prototype.releasePersonToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releasePersonToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releasePersonToken(token);
  }
};

IFaceLogClient.prototype.send_releasePersonToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releasePersonToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_releasePersonToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_releasePersonToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_releasePersonToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.releaseRootToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseRootToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseRootToken(token);
  }
};

IFaceLogClient.prototype.send_releaseRootToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseRootToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_releaseRootToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_releaseRootToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_releaseRootToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.releaseUserToken = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseUserToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseUserToken(token);
  }
};

IFaceLogClient.prototype.send_releaseUserToken = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseUserToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_releaseUserToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_releaseUserToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_releaseUserToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.replaceFeature = function(personId, featureMd5, deleteOldFeatureImage, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
  }
};

IFaceLogClient.prototype.send_replaceFeature = function(personId, featureMd5, deleteOldFeatureImage, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('replaceFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    featureMd5: featureMd5,
    deleteOldFeatureImage: deleteOldFeatureImage,
    token: token
  };
  var args = new IFaceLog_replaceFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_replaceFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_replaceFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.rootGroupOfDevice = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rootGroupOfDevice(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rootGroupOfDevice(deviceId);
  }
};

IFaceLogClient.prototype.send_rootGroupOfDevice = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rootGroupOfDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceId: deviceId
  };
  var args = new IFaceLog_rootGroupOfDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_rootGroupOfDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_rootGroupOfDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rootGroupOfDevice failed: unknown result');
};
IFaceLogClient.prototype.rootGroupOfPerson = function(personId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rootGroupOfPerson(personId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rootGroupOfPerson(personId);
  }
};

IFaceLogClient.prototype.send_rootGroupOfPerson = function(personId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rootGroupOfPerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId
  };
  var args = new IFaceLog_rootGroupOfPerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_rootGroupOfPerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_rootGroupOfPerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rootGroupOfPerson failed: unknown result');
};
IFaceLogClient.prototype.runCmd = function(target, group, cmdpath, jsonArgs, ackChannel, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_runCmd(target, group, cmdpath, jsonArgs, ackChannel, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_runCmd(target, group, cmdpath, jsonArgs, ackChannel, token);
  }
};

IFaceLogClient.prototype.send_runCmd = function(target, group, cmdpath, jsonArgs, ackChannel, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('runCmd', Thrift.MessageType.CALL, this.seqid());
  var params = {
    target: target,
    group: group,
    cmdpath: cmdpath,
    jsonArgs: jsonArgs,
    ackChannel: ackChannel,
    token: token
  };
  var args = new IFaceLog_runCmd_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_runCmd = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_runCmd_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('runCmd failed: unknown result');
};
IFaceLogClient.prototype.runTask = function(taskQueue, cmdpath, jsonArgs, ackChannel, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_runTask(taskQueue, cmdpath, jsonArgs, ackChannel, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_runTask(taskQueue, cmdpath, jsonArgs, ackChannel, token);
  }
};

IFaceLogClient.prototype.send_runTask = function(taskQueue, cmdpath, jsonArgs, ackChannel, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('runTask', Thrift.MessageType.CALL, this.seqid());
  var params = {
    taskQueue: taskQueue,
    cmdpath: cmdpath,
    jsonArgs: jsonArgs,
    ackChannel: ackChannel,
    token: token
  };
  var args = new IFaceLog_runTask_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_runTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_runTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('runTask failed: unknown result');
};
IFaceLogClient.prototype.saveDevice = function(deviceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveDevice(deviceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveDevice(deviceBean, token);
  }
};

IFaceLogClient.prototype.send_saveDevice = function(deviceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceBean: deviceBean,
    token: token
  };
  var args = new IFaceLog_saveDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveDevice failed: unknown result');
};
IFaceLogClient.prototype.saveDeviceGroup = function(deviceGroupBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveDeviceGroup(deviceGroupBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveDeviceGroup(deviceGroupBean, token);
  }
};

IFaceLogClient.prototype.send_saveDeviceGroup = function(deviceGroupBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveDeviceGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupBean: deviceGroupBean,
    token: token
  };
  var args = new IFaceLog_saveDeviceGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveDeviceGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveDeviceGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveDeviceGroup failed: unknown result');
};
IFaceLogClient.prototype.savePermit = function(permitBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePermit(permitBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePermit(permitBean, token);
  }
};

IFaceLogClient.prototype.send_savePermit = function(permitBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePermit', Thrift.MessageType.CALL, this.seqid());
  var params = {
    permitBean: permitBean,
    token: token
  };
  var args = new IFaceLog_savePermit_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePermit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePermit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePermit failed: unknown result');
};
IFaceLogClient.prototype.savePermitWithSchedule = function(deviceGroupId, personGroupId, schedule, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePermitWithSchedule(deviceGroupId, personGroupId, schedule, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePermitWithSchedule(deviceGroupId, personGroupId, schedule, token);
  }
};

IFaceLogClient.prototype.send_savePermitWithSchedule = function(deviceGroupId, personGroupId, schedule, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePermitWithSchedule', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceGroupId: deviceGroupId,
    personGroupId: personGroupId,
    schedule: schedule,
    token: token
  };
  var args = new IFaceLog_savePermitWithSchedule_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePermitWithSchedule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePermitWithSchedule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePermitWithSchedule failed: unknown result');
};
IFaceLogClient.prototype.savePerson = function(personBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePerson(personBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePerson(personBean, token);
  }
};

IFaceLogClient.prototype.send_savePerson = function(personBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePerson', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    token: token
  };
  var args = new IFaceLog_savePerson_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePerson = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePerson_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePerson failed: unknown result');
};
IFaceLogClient.prototype.savePersonFull = function(personBean, idPhoto, feature, featureVersion, featureImage, featureFaceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonFull(personBean, idPhoto, feature, featureVersion, featureImage, featureFaceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonFull(personBean, idPhoto, feature, featureVersion, featureImage, featureFaceBean, token);
  }
};

IFaceLogClient.prototype.send_savePersonFull = function(personBean, idPhoto, feature, featureVersion, featureImage, featureFaceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonFull', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    feature: feature,
    featureVersion: featureVersion,
    featureImage: featureImage,
    featureFaceBean: featureFaceBean,
    token: token
  };
  var args = new IFaceLog_savePersonFull_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonFull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonFull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonFull failed: unknown result');
};
IFaceLogClient.prototype.savePersonGroup = function(personGroupBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonGroup(personGroupBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonGroup(personGroupBean, token);
  }
};

IFaceLogClient.prototype.send_savePersonGroup = function(personGroupBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupBean: personGroupBean,
    token: token
  };
  var args = new IFaceLog_savePersonGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonGroup failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhoto = function(personBean, idPhoto, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhoto(personBean, idPhoto, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhoto(personBean, idPhoto, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhoto = function(personBean, idPhoto, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhoto', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhoto_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhoto = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhoto_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhoto failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeature = function(personBean, idPhoto, featureBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeature(personBean, idPhoto, featureBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeature(personBean, idPhoto, featureBean, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeature = function(personBean, idPhoto, featureBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeature', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    featureBean: featureBean,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeature_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeature failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureMultiFaces = function(personBean, idPhoto, feature, featureVersion, faceBeans, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureMultiFaces(personBean, idPhoto, feature, featureVersion, faceBeans, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureMultiFaces(personBean, idPhoto, feature, featureVersion, faceBeans, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureMultiFaces = function(personBean, idPhoto, feature, featureVersion, faceBeans, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureMultiFaces', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    feature: feature,
    featureVersion: featureVersion,
    faceBeans: faceBeans,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureMultiFaces = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureMultiFaces failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureMultiImage = function(personBean, idPhoto, feature, featureVersion, photos, faces, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureMultiImage(personBean, idPhoto, feature, featureVersion, photos, faces, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureMultiImage(personBean, idPhoto, feature, featureVersion, photos, faces, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureMultiImage = function(personBean, idPhoto, feature, featureVersion, photos, faces, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureMultiImage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhoto: idPhoto,
    feature: feature,
    featureVersion: featureVersion,
    photos: photos,
    faces: faces,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureMultiImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureMultiImage failed: unknown result');
};
IFaceLogClient.prototype.savePersonWithPhotoAndFeatureSaved = function(personBean, idPhotoMd5, featureMd5, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonWithPhotoAndFeatureSaved(personBean, idPhotoMd5, featureMd5, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonWithPhotoAndFeatureSaved(personBean, idPhotoMd5, featureMd5, token);
  }
};

IFaceLogClient.prototype.send_savePersonWithPhotoAndFeatureSaved = function(personBean, idPhotoMd5, featureMd5, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonWithPhotoAndFeatureSaved', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personBean: personBean,
    idPhotoMd5: idPhotoMd5,
    featureMd5: featureMd5,
    token: token
  };
  var args = new IFaceLog_savePersonWithPhotoAndFeatureSaved_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonWithPhotoAndFeatureSaved = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonWithPhotoAndFeatureSaved failed: unknown result');
};
IFaceLogClient.prototype.savePersons = function(persons, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersons(persons, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersons(persons, token);
  }
};

IFaceLogClient.prototype.send_savePersons = function(persons, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersons', Thrift.MessageType.CALL, this.seqid());
  var params = {
    persons: persons,
    token: token
  };
  var args = new IFaceLog_savePersons_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersons = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersons_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.savePersonsWithPhoto = function(photos, persons, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_savePersonsWithPhoto(photos, persons, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_savePersonsWithPhoto(photos, persons, token);
  }
};

IFaceLogClient.prototype.send_savePersonsWithPhoto = function(photos, persons, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('savePersonsWithPhoto', Thrift.MessageType.CALL, this.seqid());
  var params = {
    photos: photos,
    persons: persons,
    token: token
  };
  var args = new IFaceLog_savePersonsWithPhoto_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_savePersonsWithPhoto = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_savePersonsWithPhoto_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('savePersonsWithPhoto failed: unknown result');
};
IFaceLogClient.prototype.saveServiceConfig = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveServiceConfig(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveServiceConfig(token);
  }
};

IFaceLogClient.prototype.send_saveServiceConfig = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveServiceConfig', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_saveServiceConfig_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_saveServiceConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_saveServiceConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.sdkTaskQueueOf = function(task, sdkVersion, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sdkTaskQueueOf(task, sdkVersion, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sdkTaskQueueOf(task, sdkVersion, token);
  }
};

IFaceLogClient.prototype.send_sdkTaskQueueOf = function(task, sdkVersion, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sdkTaskQueueOf', Thrift.MessageType.CALL, this.seqid());
  var params = {
    task: task,
    sdkVersion: sdkVersion,
    token: token
  };
  var args = new IFaceLog_sdkTaskQueueOf_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_sdkTaskQueueOf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_sdkTaskQueueOf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sdkTaskQueueOf failed: unknown result');
};
IFaceLogClient.prototype.setPersonExpiryDate = function(personId, expiryDate, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPersonExpiryDate(personId, expiryDate, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPersonExpiryDate(personId, expiryDate, token);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDate = function(personId, expiryDate, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPersonExpiryDate', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDate_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setPersonExpiryDate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setPersonExpiryDate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setPersonExpiryDateList = function(personIdList, expiryDate, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPersonExpiryDateList(personIdList, expiryDate, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPersonExpiryDateList(personIdList, expiryDate, token);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDateList = function(personIdList, expiryDate, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPersonExpiryDateList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personIdList: personIdList,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDateList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setPersonExpiryDateList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setPersonExpiryDateList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setPersonExpiryDateTimeStr = function(personId, expiryDate, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPersonExpiryDateTimeStr(personId, expiryDate, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPersonExpiryDateTimeStr(personId, expiryDate, token);
  }
};

IFaceLogClient.prototype.send_setPersonExpiryDateTimeStr = function(personId, expiryDate, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPersonExpiryDateTimeStr', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personId: personId,
    expiryDate: expiryDate,
    token: token
  };
  var args = new IFaceLog_setPersonExpiryDateTimeStr_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setPersonExpiryDateTimeStr = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setPersonExpiryDateTimeStr_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setProperties = function(config, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setProperties(config, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setProperties(config, token);
  }
};

IFaceLogClient.prototype.send_setProperties = function(config, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setProperties', Thrift.MessageType.CALL, this.seqid());
  var params = {
    config: config,
    token: token
  };
  var args = new IFaceLog_setProperties_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setProperties = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setProperties_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.setProperty = function(key, value, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setProperty(key, value, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setProperty(key, value, token);
  }
};

IFaceLogClient.prototype.send_setProperty = function(key, value, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setProperty', Thrift.MessageType.CALL, this.seqid());
  var params = {
    key: key,
    value: value,
    token: token
  };
  var args = new IFaceLog_setProperty_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_setProperty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_setProperty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.taskQueueOf = function(task, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_taskQueueOf(task, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_taskQueueOf(task, token);
  }
};

IFaceLogClient.prototype.send_taskQueueOf = function(task, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('taskQueueOf', Thrift.MessageType.CALL, this.seqid());
  var params = {
    task: task,
    token: token
  };
  var args = new IFaceLog_taskQueueOf_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_taskQueueOf = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_taskQueueOf_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('taskQueueOf failed: unknown result');
};
IFaceLogClient.prototype.unbindBorder = function(personGroupId, deviceGroupId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unbindBorder(personGroupId, deviceGroupId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unbindBorder(personGroupId, deviceGroupId, token);
  }
};

IFaceLogClient.prototype.send_unbindBorder = function(personGroupId, deviceGroupId, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unbindBorder', Thrift.MessageType.CALL, this.seqid());
  var params = {
    personGroupId: personGroupId,
    deviceGroupId: deviceGroupId,
    token: token
  };
  var args = new IFaceLog_unbindBorder_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_unbindBorder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_unbindBorder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  callback(null);
};
IFaceLogClient.prototype.unregisterDevice = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregisterDevice(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregisterDevice(token);
  }
};

IFaceLogClient.prototype.send_unregisterDevice = function(token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unregisterDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    token: token
  };
  var args = new IFaceLog_unregisterDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_unregisterDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_unregisterDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null);
};
IFaceLogClient.prototype.updateDevice = function(deviceBean, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDevice(deviceBean, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDevice(deviceBean, token);
  }
};

IFaceLogClient.prototype.send_updateDevice = function(deviceBean, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDevice', Thrift.MessageType.CALL, this.seqid());
  var params = {
    deviceBean: deviceBean,
    token: token
  };
  var args = new IFaceLog_updateDevice_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_updateDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_updateDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateDevice failed: unknown result');
};
IFaceLogClient.prototype.version = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_version();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_version();
  }
};

IFaceLogClient.prototype.send_version = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('version', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_version_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('version failed: unknown result');
};
IFaceLogClient.prototype.versionInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionInfo();
  }
};

IFaceLogClient.prototype.send_versionInfo = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new IFaceLog_versionInfo_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IFaceLogClient.prototype.recv_versionInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IFaceLog_versionInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionInfo failed: unknown result');
};
var IFaceLogProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
IFaceLogProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
IFaceLogProcessor.prototype.process_addFeature = function(seqid, input, output) {
  var args = new IFaceLog_addFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFeature.length === 5) {
    Q.fcall(this._handler.addFeature.bind(this._handler), args.feature, args.featureVersion, args.personId, args.faecBeans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addFeature_result({success: result});
        output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addFeature_result(err);
          output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFeature(args.feature, args.featureVersion, args.personId, args.faecBeans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addFeatureMulti = function(seqid, input, output) {
  var args = new IFaceLog_addFeatureMulti_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFeatureMulti.length === 6) {
    Q.fcall(this._handler.addFeatureMulti.bind(this._handler), args.feature, args.featureVersion, args.personId, args.photos, args.faces, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addFeatureMulti_result({success: result});
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addFeatureMulti_result(err);
          output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFeatureMulti(args.feature, args.featureVersion, args.personId, args.photos, args.faces, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addFeatureMulti_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFeatureMulti", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addFeatureWithImage = function(seqid, input, output) {
  var args = new IFaceLog_addFeatureWithImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFeatureWithImage.length === 7) {
    Q.fcall(this._handler.addFeatureWithImage.bind(this._handler), args.feature, args.featureVersion, args.personId, args.asIdPhotoIfAbsent, args.featurePhoto, args.faceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addFeatureWithImage_result({success: result});
        output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addFeatureWithImage_result(err);
          output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFeatureWithImage(args.feature, args.featureVersion, args.personId, args.asIdPhotoIfAbsent, args.featurePhoto, args.faceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addFeatureWithImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFeatureWithImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addImage = function(seqid, input, output) {
  var args = new IFaceLog_addImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addImage.length === 5) {
    Q.fcall(this._handler.addImage.bind(this._handler), args.imageData, args.deviceId, args.faceBean, args.personId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addImage_result({success: result});
        output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addImage_result(err);
          output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addImage(args.imageData, args.deviceId, args.faceBean, args.personId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLog = function(seqid, input, output) {
  var args = new IFaceLog_addLog_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLog.length === 2) {
    Q.fcall(this._handler.addLog.bind(this._handler), args.logBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLog_result({success: result});
        output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLog_result(err);
          output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLog", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLog(args.logBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLog_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLog", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLog", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLogFull = function(seqid, input, output) {
  var args = new IFaceLog_addLogFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLogFull.length === 4) {
    Q.fcall(this._handler.addLogFull.bind(this._handler), args.logBean, args.faceBean, args.featureImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLogFull_result({success: result});
        output.writeMessageBegin("addLogFull", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLogFull_result(err);
          output.writeMessageBegin("addLogFull", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLogFull", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLogFull(args.logBean, args.faceBean, args.featureImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLogFull_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLogFull", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLogFull", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLogs = function(seqid, input, output) {
  var args = new IFaceLog_addLogs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLogs.length === 2) {
    Q.fcall(this._handler.addLogs.bind(this._handler), args.beans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLogs_result({success: result});
        output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLogs_result(err);
          output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLogs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLogs(args.beans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLogs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLogs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLogs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_addLogsFull = function(seqid, input, output) {
  var args = new IFaceLog_addLogsFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addLogsFull.length === 4) {
    Q.fcall(this._handler.addLogsFull.bind(this._handler), args.logBeans, args.faceBeans, args.featureImages, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_addLogsFull_result({success: result});
        output.writeMessageBegin("addLogsFull", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_addLogsFull_result(err);
          output.writeMessageBegin("addLogsFull", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addLogsFull", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addLogsFull(args.logBeans, args.faceBeans, args.featureImages, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DuplicateRecordException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_addLogsFull_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addLogsFull", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addLogsFull", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyAckChannel = function(seqid, input, output) {
  var args = new IFaceLog_applyAckChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyAckChannel.length === 1) {
    Q.fcall(this._handler.applyAckChannel.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_applyAckChannel_result({success: result});
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyAckChannel_result(err);
          output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyAckChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyAckChannel(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyAckChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyAckChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyAckChannelWithDuration = function(seqid, input, output) {
  var args = new IFaceLog_applyAckChannelWithDuration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyAckChannelWithDuration.length === 2) {
    Q.fcall(this._handler.applyAckChannelWithDuration.bind(this._handler), args.duration, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_applyAckChannelWithDuration_result({success: result});
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyAckChannelWithDuration_result(err);
          output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyAckChannelWithDuration(args.duration, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyAckChannelWithDuration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyAckChannelWithDuration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyCmdSn = function(seqid, input, output) {
  var args = new IFaceLog_applyCmdSn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyCmdSn.length === 1) {
    Q.fcall(this._handler.applyCmdSn.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_applyCmdSn_result({success: result});
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyCmdSn_result(err);
          output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyCmdSn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyCmdSn(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyCmdSn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyCmdSn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyPersonToken = function(seqid, input, output) {
  var args = new IFaceLog_applyPersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyPersonToken.length === 3) {
    Q.fcall(this._handler.applyPersonToken.bind(this._handler), args.personId, args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_applyPersonToken_result({success: result});
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyPersonToken_result(err);
          output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyPersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyPersonToken(args.personId, args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyPersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyPersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyRootToken = function(seqid, input, output) {
  var args = new IFaceLog_applyRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyRootToken.length === 2) {
    Q.fcall(this._handler.applyRootToken.bind(this._handler), args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_applyRootToken_result({success: result});
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyRootToken_result(err);
          output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyRootToken(args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_applyUserToken = function(seqid, input, output) {
  var args = new IFaceLog_applyUserToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.applyUserToken.length === 3) {
    Q.fcall(this._handler.applyUserToken.bind(this._handler), args.userid, args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_applyUserToken_result({success: result});
        output.writeMessageBegin("applyUserToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_applyUserToken_result(err);
          output.writeMessageBegin("applyUserToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("applyUserToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.applyUserToken(args.userid, args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_applyUserToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("applyUserToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("applyUserToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_bindBorder = function(seqid, input, output) {
  var args = new IFaceLog_bindBorder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.bindBorder.length === 3) {
    Q.fcall(this._handler.bindBorder.bind(this._handler), args.personGroupId, args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_bindBorder_result({success: result});
        output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_bindBorder_result(err);
          output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("bindBorder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.bindBorder(args.personGroupId, args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_bindBorder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("bindBorder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("bindBorder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_childListForDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_childListForDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.childListForDeviceGroup.length === 1) {
    Q.fcall(this._handler.childListForDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_childListForDeviceGroup_result({success: result});
        output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_childListForDeviceGroup_result(err);
          output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.childListForDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_childListForDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("childListForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_childListForPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_childListForPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.childListForPersonGroup.length === 1) {
    Q.fcall(this._handler.childListForPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_childListForPersonGroup_result({success: result});
        output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_childListForPersonGroup_result(err);
          output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.childListForPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_childListForPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("childListForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countDeviceByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countDeviceByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countDeviceByWhere.length === 1) {
    Q.fcall(this._handler.countDeviceByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countDeviceByWhere_result({success: result});
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countDeviceByWhere_result(err);
          output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countDeviceByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countDeviceByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countDeviceGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countDeviceGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countDeviceGroupByWhere.length === 1) {
    Q.fcall(this._handler.countDeviceGroupByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countDeviceGroupByWhere_result({success: result});
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countDeviceGroupByWhere_result(err);
          output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countDeviceGroupByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countDeviceGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countLogByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogByWhere.length === 1) {
    Q.fcall(this._handler.countLogByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogByWhere_result({success: result});
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogByWhere_result(err);
          output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogLightByVerifyTime = function(seqid, input, output) {
  var args = new IFaceLog_countLogLightByVerifyTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogLightByVerifyTime.length === 1) {
    Q.fcall(this._handler.countLogLightByVerifyTime.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogLightByVerifyTime_result({success: result});
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogLightByVerifyTime_result(err);
          output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogLightByVerifyTime(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogLightByVerifyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogLightByVerifyTimeTimestr = function(seqid, input, output) {
  var args = new IFaceLog_countLogLightByVerifyTimeTimestr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogLightByVerifyTimeTimestr.length === 1) {
    Q.fcall(this._handler.countLogLightByVerifyTimeTimestr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogLightByVerifyTimeTimestr_result({success: result});
        output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogLightByVerifyTimeTimestr_result(err);
          output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogLightByVerifyTimeTimestr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogLightByVerifyTimeTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogLightByVerifyTimeTimestr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countLogLightByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countLogLightByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countLogLightByWhere.length === 1) {
    Q.fcall(this._handler.countLogLightByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countLogLightByWhere_result({success: result});
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countLogLightByWhere_result(err);
          output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countLogLightByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countLogLightByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countPersonByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countPersonByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countPersonByWhere.length === 1) {
    Q.fcall(this._handler.countPersonByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countPersonByWhere_result({success: result});
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countPersonByWhere_result(err);
          output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countPersonByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countPersonByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_countPersonGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_countPersonGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.countPersonGroupByWhere.length === 1) {
    Q.fcall(this._handler.countPersonGroupByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_countPersonGroupByWhere_result({success: result});
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_countPersonGroupByWhere_result(err);
          output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.countPersonGroupByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_countPersonGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("countPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteAllFeaturesByPersonId = function(seqid, input, output) {
  var args = new IFaceLog_deleteAllFeaturesByPersonId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllFeaturesByPersonId.length === 3) {
    Q.fcall(this._handler.deleteAllFeaturesByPersonId.bind(this._handler), args.personId, args.deleteImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteAllFeaturesByPersonId_result({success: result});
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteAllFeaturesByPersonId_result(err);
          output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAllFeaturesByPersonId(args.personId, args.deleteImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteAllFeaturesByPersonId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAllFeaturesByPersonId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_deleteDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteDeviceGroup.length === 2) {
    Q.fcall(this._handler.deleteDeviceGroup.bind(this._handler), args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteDeviceGroup_result({success: result});
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteDeviceGroup_result(err);
          output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteDeviceGroup(args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteFeature = function(seqid, input, output) {
  var args = new IFaceLog_deleteFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteFeature.length === 3) {
    Q.fcall(this._handler.deleteFeature.bind(this._handler), args.featureMd5, args.deleteImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteFeature_result({success: result});
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteFeature_result(err);
          output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteFeature(args.featureMd5, args.deleteImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteGroupPermitOnDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_deleteGroupPermitOnDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteGroupPermitOnDeviceGroup.length === 2) {
    Q.fcall(this._handler.deleteGroupPermitOnDeviceGroup.bind(this._handler), args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteGroupPermitOnDeviceGroup_result({success: result});
        output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteGroupPermitOnDeviceGroup_result(err);
          output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteGroupPermitOnDeviceGroup(args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteGroupPermitOnDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteGroupPermitOnDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deleteImage = function(seqid, input, output) {
  var args = new IFaceLog_deleteImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteImage.length === 2) {
    Q.fcall(this._handler.deleteImage.bind(this._handler), args.imageMd5, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deleteImage_result({success: result});
        output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deleteImage_result(err);
          output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteImage(args.imageMd5, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deleteImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePermitById = function(seqid, input, output) {
  var args = new IFaceLog_deletePermitById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePermitById.length === 3) {
    Q.fcall(this._handler.deletePermitById.bind(this._handler), args.deviceGroupId, args.personGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePermitById_result({success: result});
        output.writeMessageBegin("deletePermitById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePermitById_result(err);
          output.writeMessageBegin("deletePermitById", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePermitById", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePermitById(args.deviceGroupId, args.personGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePermitById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePermitById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePermitById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePerson = function(seqid, input, output) {
  var args = new IFaceLog_deletePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePerson.length === 2) {
    Q.fcall(this._handler.deletePerson.bind(this._handler), args.personId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePerson_result({success: result});
        output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePerson_result(err);
          output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePerson(args.personId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonByPapersNum.length === 2) {
    Q.fcall(this._handler.deletePersonByPapersNum.bind(this._handler), args.papersNum, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonByPapersNum_result({success: result});
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonByPapersNum_result(err);
          output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonByPapersNum(args.papersNum, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonGroup.length === 2) {
    Q.fcall(this._handler.deletePersonGroup.bind(this._handler), args.personGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonGroup_result({success: result});
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonGroup_result(err);
          output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonGroup(args.personGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonGroupPermit = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonGroupPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonGroupPermit.length === 2) {
    Q.fcall(this._handler.deletePersonGroupPermit.bind(this._handler), args.personGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonGroupPermit_result({success: result});
        output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonGroupPermit_result(err);
          output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonGroupPermit(args.personGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonGroupPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersons = function(seqid, input, output) {
  var args = new IFaceLog_deletePersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersons.length === 2) {
    Q.fcall(this._handler.deletePersons.bind(this._handler), args.personIdList, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersons_result({success: result});
        output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersons_result(err);
          output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersons(args.personIdList, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_deletePersonsByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_deletePersonsByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePersonsByPapersNum.length === 2) {
    Q.fcall(this._handler.deletePersonsByPapersNum.bind(this._handler), args.papersNumlist, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_deletePersonsByPapersNum_result({success: result});
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_deletePersonsByPapersNum_result(err);
          output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePersonsByPapersNum(args.papersNumlist, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_deletePersonsByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePersonsByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_disablePerson = function(seqid, input, output) {
  var args = new IFaceLog_disablePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disablePerson.length === 6) {
    Q.fcall(this._handler.disablePerson.bind(this._handler), args.personId, args.moveToGroupId, args.deletePhoto, args.deleteFeature, args.deleteLog, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_disablePerson_result({success: result});
        output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_disablePerson_result(err);
          output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disablePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disablePerson(args.personId, args.moveToGroupId, args.deletePhoto, args.deleteFeature, args.deleteLog, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_disablePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disablePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disablePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_disablePersonList = function(seqid, input, output) {
  var args = new IFaceLog_disablePersonList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disablePersonList.length === 2) {
    Q.fcall(this._handler.disablePersonList.bind(this._handler), args.personIdList, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_disablePersonList_result({success: result});
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_disablePersonList_result(err);
          output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disablePersonList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disablePersonList(args.personIdList, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_disablePersonList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disablePersonList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsDevice = function(seqid, input, output) {
  var args = new IFaceLog_existsDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsDevice.length === 1) {
    Q.fcall(this._handler.existsDevice.bind(this._handler), args.id)
      .then(function(result) {
        var result_obj = new IFaceLog_existsDevice_result({success: result});
        output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsDevice_result(err);
          output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsDevice(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsFeature = function(seqid, input, output) {
  var args = new IFaceLog_existsFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsFeature.length === 1) {
    Q.fcall(this._handler.existsFeature.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_existsFeature_result({success: result});
        output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsFeature_result(err);
          output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsFeature(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsImage = function(seqid, input, output) {
  var args = new IFaceLog_existsImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsImage.length === 1) {
    Q.fcall(this._handler.existsImage.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_existsImage_result({success: result});
        output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsImage_result(err);
          output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsImage(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_existsPerson = function(seqid, input, output) {
  var args = new IFaceLog_existsPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsPerson.length === 1) {
    Q.fcall(this._handler.existsPerson.bind(this._handler), args.persionId)
      .then(function(result) {
        var result_obj = new IFaceLog_existsPerson_result({success: result});
        output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_existsPerson_result(err);
          output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("existsPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.existsPerson(args.persionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_existsPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevice = function(seqid, input, output) {
  var args = new IFaceLog_getDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevice.length === 1) {
    Q.fcall(this._handler.getDevice.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevice_result({success: result});
        output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevice_result(err);
          output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevice(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroup.length === 1) {
    Q.fcall(this._handler.getDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroup_result({success: result});
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroup_result(err);
          output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroups = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroups.length === 1) {
    Q.fcall(this._handler.getDeviceGroups.bind(this._handler), args.groupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroups_result({success: result});
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroups_result(err);
          output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroups(args.groupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsBelongs = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsBelongs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsBelongs.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsBelongs.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsBelongs_result({success: result});
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsBelongs_result(err);
          output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsBelongs(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsBelongs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsPermit = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsPermit.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsPermit.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsPermit_result({success: result});
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsPermit_result(err);
          output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsPermit(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceGroupsPermittedBy = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceGroupsPermittedBy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceGroupsPermittedBy.length === 1) {
    Q.fcall(this._handler.getDeviceGroupsPermittedBy.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceGroupsPermittedBy_result({success: result});
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceGroupsPermittedBy_result(err);
          output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceGroupsPermittedBy(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceGroupsPermittedBy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDeviceIdOfFeature = function(seqid, input, output) {
  var args = new IFaceLog_getDeviceIdOfFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDeviceIdOfFeature.length === 1) {
    Q.fcall(this._handler.getDeviceIdOfFeature.bind(this._handler), args.featureMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getDeviceIdOfFeature_result({success: result});
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDeviceIdOfFeature_result(err);
          output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDeviceIdOfFeature(args.featureMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDeviceIdOfFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDeviceIdOfFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevices = function(seqid, input, output) {
  var args = new IFaceLog_getDevices_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevices.length === 1) {
    Q.fcall(this._handler.getDevices.bind(this._handler), args.idList)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevices_result({success: result});
        output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevices_result(err);
          output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevices", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevices(args.idList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevices_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevices", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevices", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getDevicesOfGroup = function(seqid, input, output) {
  var args = new IFaceLog_getDevicesOfGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDevicesOfGroup.length === 1) {
    Q.fcall(this._handler.getDevicesOfGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getDevicesOfGroup_result({success: result});
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getDevicesOfGroup_result(err);
          output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDevicesOfGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getDevicesOfGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDevicesOfGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFace = function(seqid, input, output) {
  var args = new IFaceLog_getFace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFace.length === 1) {
    Q.fcall(this._handler.getFace.bind(this._handler), args.faceId)
      .then(function(result) {
        var result_obj = new IFaceLog_getFace_result({success: result});
        output.writeMessageBegin("getFace", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFace_result(err);
          output.writeMessageBegin("getFace", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFace", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFace(args.faceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeature = function(seqid, input, output) {
  var args = new IFaceLog_getFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeature.length === 1) {
    Q.fcall(this._handler.getFeature.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeature_result({success: result});
        output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeature_result(err);
          output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeature(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeatureBytes = function(seqid, input, output) {
  var args = new IFaceLog_getFeatureBytes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeatureBytes.length === 1) {
    Q.fcall(this._handler.getFeatureBytes.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeatureBytes_result({success: result});
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeatureBytes_result(err);
          output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeatureBytes(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeatureBytes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeatureBytes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeatures = function(seqid, input, output) {
  var args = new IFaceLog_getFeatures_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeatures.length === 1) {
    Q.fcall(this._handler.getFeatures.bind(this._handler), args.md5)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeatures_result({success: result});
        output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeatures_result(err);
          output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeatures", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeatures(args.md5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeatures_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeatures", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeatures", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesByPersonId = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesByPersonId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesByPersonId.length === 1) {
    Q.fcall(this._handler.getFeaturesByPersonId.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesByPersonId_result({success: result});
        output.writeMessageBegin("getFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesByPersonId_result(err);
          output.writeMessageBegin("getFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesByPersonId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesByPersonId(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesByPersonId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesByPersonId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesByPersonId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesByPersonIdAndSdkVersion = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesByPersonIdAndSdkVersion.length === 2) {
    Q.fcall(this._handler.getFeaturesByPersonIdAndSdkVersion.bind(this._handler), args.personId, args.sdkVersion)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_result({success: result});
        output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_result(err);
          output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesByPersonIdAndSdkVersion(args.personId, args.sdkVersion, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesByPersonIdAndSdkVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesByPersonIdAndSdkVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesOfPerson = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesOfPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesOfPerson.length === 1) {
    Q.fcall(this._handler.getFeaturesOfPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesOfPerson_result({success: result});
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesOfPerson_result(err);
          output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesOfPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesOfPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesOfPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getFeaturesPermittedOnDevice = function(seqid, input, output) {
  var args = new IFaceLog_getFeaturesPermittedOnDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFeaturesPermittedOnDevice.length === 4) {
    Q.fcall(this._handler.getFeaturesPermittedOnDevice.bind(this._handler), args.deviceId, args.ignoreSchedule, args.sdkVersion, args.excludeFeatureIds)
      .then(function(result) {
        var result_obj = new IFaceLog_getFeaturesPermittedOnDevice_result({success: result});
        output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getFeaturesPermittedOnDevice_result(err);
          output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFeaturesPermittedOnDevice(args.deviceId, args.ignoreSchedule, args.sdkVersion, args.excludeFeatureIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getFeaturesPermittedOnDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFeaturesPermittedOnDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getGroupPermit = function(seqid, input, output) {
  var args = new IFaceLog_getGroupPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupPermit.length === 2) {
    Q.fcall(this._handler.getGroupPermit.bind(this._handler), args.deviceId, args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getGroupPermit_result({success: result});
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getGroupPermit_result(err);
          output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupPermit(args.deviceId, args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getGroupPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getGroupPermitOnDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_getGroupPermitOnDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupPermitOnDeviceGroup.length === 2) {
    Q.fcall(this._handler.getGroupPermitOnDeviceGroup.bind(this._handler), args.deviceGroupId, args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getGroupPermitOnDeviceGroup_result({success: result});
        output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getGroupPermitOnDeviceGroup_result(err);
          output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupPermitOnDeviceGroup(args.deviceGroupId, args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getGroupPermitOnDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupPermitOnDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getGroupPermits = function(seqid, input, output) {
  var args = new IFaceLog_getGroupPermits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupPermits.length === 2) {
    Q.fcall(this._handler.getGroupPermits.bind(this._handler), args.deviceId, args.personGroupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getGroupPermits_result({success: result});
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getGroupPermits_result(err);
          output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupPermits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupPermits(args.deviceId, args.personGroupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getGroupPermits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupPermits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImage = function(seqid, input, output) {
  var args = new IFaceLog_getImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImage.length === 1) {
    Q.fcall(this._handler.getImage.bind(this._handler), args.imageMD5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImage_result({success: result});
        output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImage_result(err);
          output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImage(args.imageMD5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImageBytes = function(seqid, input, output) {
  var args = new IFaceLog_getImageBytes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImageBytes.length === 1) {
    Q.fcall(this._handler.getImageBytes.bind(this._handler), args.imageMD5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImageBytes_result({success: result});
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImageBytes_result(err);
          output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImageBytes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImageBytes(args.imageMD5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImageBytes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImageBytes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getImagesAssociatedByFeature = function(seqid, input, output) {
  var args = new IFaceLog_getImagesAssociatedByFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getImagesAssociatedByFeature.length === 1) {
    Q.fcall(this._handler.getImagesAssociatedByFeature.bind(this._handler), args.featureMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_getImagesAssociatedByFeature_result({success: result});
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getImagesAssociatedByFeature_result(err);
          output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getImagesAssociatedByFeature(args.featureMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getImagesAssociatedByFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getImagesAssociatedByFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getLogBeansByPersonId = function(seqid, input, output) {
  var args = new IFaceLog_getLogBeansByPersonId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLogBeansByPersonId.length === 1) {
    Q.fcall(this._handler.getLogBeansByPersonId.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getLogBeansByPersonId_result({success: result});
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getLogBeansByPersonId_result(err);
          output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLogBeansByPersonId(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getLogBeansByPersonId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLogBeansByPersonId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPerson = function(seqid, input, output) {
  var args = new IFaceLog_getPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPerson.length === 1) {
    Q.fcall(this._handler.getPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPerson_result({success: result});
        output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPerson_result(err);
          output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonByPapersNum = function(seqid, input, output) {
  var args = new IFaceLog_getPersonByPapersNum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonByPapersNum.length === 1) {
    Q.fcall(this._handler.getPersonByPapersNum.bind(this._handler), args.papersNum)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonByPapersNum_result({success: result});
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonByPapersNum_result(err);
          output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonByPapersNum(args.papersNum, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonByPapersNum_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonByPapersNum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroup.length === 1) {
    Q.fcall(this._handler.getPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroup_result({success: result});
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroup_result(err);
          output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroups = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroups.length === 1) {
    Q.fcall(this._handler.getPersonGroups.bind(this._handler), args.groupIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroups_result({success: result});
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroups_result(err);
          output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroups(args.groupIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroupsBelongs = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroupsBelongs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroupsBelongs.length === 1) {
    Q.fcall(this._handler.getPersonGroupsBelongs.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroupsBelongs_result({success: result});
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroupsBelongs_result(err);
          output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroupsBelongs(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroupsBelongs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroupsBelongs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonGroupsPermittedBy = function(seqid, input, output) {
  var args = new IFaceLog_getPersonGroupsPermittedBy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonGroupsPermittedBy.length === 1) {
    Q.fcall(this._handler.getPersonGroupsPermittedBy.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonGroupsPermittedBy_result({success: result});
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonGroupsPermittedBy_result(err);
          output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonGroupsPermittedBy(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonGroupsPermittedBy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonGroupsPermittedBy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonPermit = function(seqid, input, output) {
  var args = new IFaceLog_getPersonPermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonPermit.length === 2) {
    Q.fcall(this._handler.getPersonPermit.bind(this._handler), args.deviceId, args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonPermit_result({success: result});
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonPermit_result(err);
          output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonPermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonPermit(args.deviceId, args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonPermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonPermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonPermits = function(seqid, input, output) {
  var args = new IFaceLog_getPersonPermits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonPermits.length === 2) {
    Q.fcall(this._handler.getPersonPermits.bind(this._handler), args.deviceId, args.personIdList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonPermits_result({success: result});
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonPermits_result(err);
          output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonPermits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonPermits(args.deviceId, args.personIdList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonPermits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonPermits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersons = function(seqid, input, output) {
  var args = new IFaceLog_getPersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersons.length === 1) {
    Q.fcall(this._handler.getPersons.bind(this._handler), args.idList)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersons_result({success: result});
        output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersons_result(err);
          output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersons(args.idList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getPersonsOfGroup = function(seqid, input, output) {
  var args = new IFaceLog_getPersonsOfGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPersonsOfGroup.length === 1) {
    Q.fcall(this._handler.getPersonsOfGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getPersonsOfGroup_result({success: result});
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getPersonsOfGroup_result(err);
          output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPersonsOfGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getPersonsOfGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPersonsOfGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getProperty = function(seqid, input, output) {
  var args = new IFaceLog_getProperty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProperty.length === 2) {
    Q.fcall(this._handler.getProperty.bind(this._handler), args.key, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getProperty_result({success: result});
        output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getProperty_result(err);
          output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProperty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProperty(args.key, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getProperty_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getProperty", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProperty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getRedisParameters = function(seqid, input, output) {
  var args = new IFaceLog_getRedisParameters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRedisParameters.length === 1) {
    Q.fcall(this._handler.getRedisParameters.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getRedisParameters_result({success: result});
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getRedisParameters_result(err);
          output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRedisParameters", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRedisParameters(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getRedisParameters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRedisParameters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getServiceConfig = function(seqid, input, output) {
  var args = new IFaceLog_getServiceConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getServiceConfig.length === 1) {
    Q.fcall(this._handler.getServiceConfig.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_getServiceConfig_result({success: result});
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getServiceConfig_result(err);
          output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getServiceConfig(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getServiceConfig_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getSubDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_getSubDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubDeviceGroup.length === 1) {
    Q.fcall(this._handler.getSubDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getSubDeviceGroup_result({success: result});
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getSubDeviceGroup_result(err);
          output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getSubDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSubDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_getSubPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_getSubPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubPersonGroup.length === 1) {
    Q.fcall(this._handler.getSubPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_getSubPersonGroup_result({success: result});
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_getSubPersonGroup_result(err);
          output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_getSubPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSubPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isDisable = function(seqid, input, output) {
  var args = new IFaceLog_isDisable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isDisable.length === 1) {
    Q.fcall(this._handler.isDisable.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_isDisable_result({success: result});
        output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isDisable_result(err);
          output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isDisable", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isDisable(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isDisable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isDisable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isDisable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isLocal = function(seqid, input, output) {
  var args = new IFaceLog_isLocal_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isLocal.length === 0) {
    Q.fcall(this._handler.isLocal.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_isLocal_result({success: result});
        output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isLocal_result(err);
          output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isLocal", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isLocal(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isLocal_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isLocal", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isLocal", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidAckChannel = function(seqid, input, output) {
  var args = new IFaceLog_isValidAckChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidAckChannel.length === 1) {
    Q.fcall(this._handler.isValidAckChannel.bind(this._handler), args.ackChannel)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidAckChannel_result({success: result});
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidAckChannel_result(err);
          output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidAckChannel(args.ackChannel, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidAckChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidAckChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidCmdSn = function(seqid, input, output) {
  var args = new IFaceLog_isValidCmdSn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidCmdSn.length === 1) {
    Q.fcall(this._handler.isValidCmdSn.bind(this._handler), args.cmdSn)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidCmdSn_result({success: result});
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidCmdSn_result(err);
          output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidCmdSn(args.cmdSn, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidCmdSn_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidCmdSn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidDeviceToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidDeviceToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidDeviceToken.length === 1) {
    Q.fcall(this._handler.isValidDeviceToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidDeviceToken_result({success: result});
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidDeviceToken_result(err);
          output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidDeviceToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidDeviceToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidDeviceToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidPassword = function(seqid, input, output) {
  var args = new IFaceLog_isValidPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidPassword.length === 3) {
    Q.fcall(this._handler.isValidPassword.bind(this._handler), args.userId, args.password, args.isMd5)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidPassword_result({success: result});
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidPassword_result(err);
          output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidPassword", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidPassword(args.userId, args.password, args.isMd5, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidPassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidPersonToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidPersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidPersonToken.length === 1) {
    Q.fcall(this._handler.isValidPersonToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidPersonToken_result({success: result});
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidPersonToken_result(err);
          output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidPersonToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidPersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidPersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidRootToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidRootToken.length === 1) {
    Q.fcall(this._handler.isValidRootToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidRootToken_result({success: result});
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidRootToken_result(err);
          output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidRootToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidToken.length === 1) {
    Q.fcall(this._handler.isValidToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidToken_result({success: result});
        output.writeMessageBegin("isValidToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidToken_result(err);
          output.writeMessageBegin("isValidToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_isValidUserToken = function(seqid, input, output) {
  var args = new IFaceLog_isValidUserToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isValidUserToken.length === 1) {
    Q.fcall(this._handler.isValidUserToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_isValidUserToken_result({success: result});
        output.writeMessageBegin("isValidUserToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_isValidUserToken_result(err);
          output.writeMessageBegin("isValidUserToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isValidUserToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isValidUserToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_isValidUserToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isValidUserToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isValidUserToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_listOfParentForDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_listOfParentForDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listOfParentForDeviceGroup.length === 1) {
    Q.fcall(this._handler.listOfParentForDeviceGroup.bind(this._handler), args.deviceGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_listOfParentForDeviceGroup_result({success: result});
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_listOfParentForDeviceGroup_result(err);
          output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listOfParentForDeviceGroup(args.deviceGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_listOfParentForDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listOfParentForDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_listOfParentForPersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_listOfParentForPersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listOfParentForPersonGroup.length === 1) {
    Q.fcall(this._handler.listOfParentForPersonGroup.bind(this._handler), args.personGroupId)
      .then(function(result) {
        var result_obj = new IFaceLog_listOfParentForPersonGroup_result({success: result});
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_listOfParentForPersonGroup_result(err);
          output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listOfParentForPersonGroup(args.personGroupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_listOfParentForPersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listOfParentForPersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadAllPerson = function(seqid, input, output) {
  var args = new IFaceLog_loadAllPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadAllPerson.length === 0) {
    Q.fcall(this._handler.loadAllPerson.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_loadAllPerson_result({success: result});
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadAllPerson_result(err);
          output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadAllPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadAllPerson(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadAllPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadAllPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceByWhere.length === 3) {
    Q.fcall(this._handler.loadDeviceByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceByWhere_result(err);
          output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceGroupByWhere.length === 3) {
    Q.fcall(this._handler.loadDeviceGroupByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceGroupByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceGroupByWhere_result(err);
          output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceGroupByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceGroupIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceGroupIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceGroupIdByWhere.length === 1) {
    Q.fcall(this._handler.loadDeviceGroupIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceGroupIdByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceGroupIdByWhere_result(err);
          output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceGroupIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceGroupIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadDeviceIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadDeviceIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadDeviceIdByWhere.length === 1) {
    Q.fcall(this._handler.loadDeviceIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadDeviceIdByWhere_result({success: result});
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadDeviceIdByWhere_result(err);
          output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadDeviceIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadDeviceIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadDeviceIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadFeatureMd5ByUpdate = function(seqid, input, output) {
  var args = new IFaceLog_loadFeatureMd5ByUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadFeatureMd5ByUpdate.length === 1) {
    Q.fcall(this._handler.loadFeatureMd5ByUpdate.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadFeatureMd5ByUpdate_result({success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadFeatureMd5ByUpdate_result(err);
          output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadFeatureMd5ByUpdate(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadFeatureMd5ByUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadFeatureMd5ByUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadFeatureMd5ByUpdateTimeStr = function(seqid, input, output) {
  var args = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadFeatureMd5ByUpdateTimeStr.length === 1) {
    Q.fcall(this._handler.loadFeatureMd5ByUpdateTimeStr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_result({success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_result(err);
          output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadFeatureMd5ByUpdateTimeStr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadFeatureMd5ByUpdateTimeStr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadFeatureMd5ByUpdateTimeStr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadLogByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogByWhere.length === 3) {
    Q.fcall(this._handler.loadLogByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogByWhere_result({success: result});
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogByWhere_result(err);
          output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogLightByVerifyTime = function(seqid, input, output) {
  var args = new IFaceLog_loadLogLightByVerifyTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogLightByVerifyTime.length === 3) {
    Q.fcall(this._handler.loadLogLightByVerifyTime.bind(this._handler), args.timestamp, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogLightByVerifyTime_result({success: result});
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogLightByVerifyTime_result(err);
          output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogLightByVerifyTime(args.timestamp, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogLightByVerifyTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogLightByVerifyTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogLightByVerifyTimeTimestr = function(seqid, input, output) {
  var args = new IFaceLog_loadLogLightByVerifyTimeTimestr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogLightByVerifyTimeTimestr.length === 3) {
    Q.fcall(this._handler.loadLogLightByVerifyTimeTimestr.bind(this._handler), args.timestamp, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogLightByVerifyTimeTimestr_result({success: result});
        output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogLightByVerifyTimeTimestr_result(err);
          output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogLightByVerifyTimeTimestr(args.timestamp, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogLightByVerifyTimeTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogLightByVerifyTimeTimestr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadLogLightByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadLogLightByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadLogLightByWhere.length === 3) {
    Q.fcall(this._handler.loadLogLightByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadLogLightByWhere_result({success: result});
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadLogLightByWhere_result(err);
          output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadLogLightByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadLogLightByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadLogLightByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPermitByUpdate = function(seqid, input, output) {
  var args = new IFaceLog_loadPermitByUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPermitByUpdate.length === 1) {
    Q.fcall(this._handler.loadPermitByUpdate.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPermitByUpdate_result({success: result});
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPermitByUpdate_result(err);
          output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPermitByUpdate(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPermitByUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPermitByUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPermitByUpdateTimestr = function(seqid, input, output) {
  var args = new IFaceLog_loadPermitByUpdateTimestr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPermitByUpdateTimestr.length === 1) {
    Q.fcall(this._handler.loadPermitByUpdateTimestr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPermitByUpdateTimestr_result({success: result});
        output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPermitByUpdateTimestr_result(err);
          output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPermitByUpdateTimestr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPermitByUpdateTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPermitByUpdateTimestr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonByWhere.length === 3) {
    Q.fcall(this._handler.loadPersonByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonByWhere_result({success: result});
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonByWhere_result(err);
          output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonGroupByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonGroupByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonGroupByWhere.length === 3) {
    Q.fcall(this._handler.loadPersonGroupByWhere.bind(this._handler), args.where, args.startRow, args.numRows)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonGroupByWhere_result({success: result});
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonGroupByWhere_result(err);
          output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonGroupByWhere(args.where, args.startRow, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonGroupByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonGroupByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonGroupIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonGroupIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonGroupIdByWhere.length === 1) {
    Q.fcall(this._handler.loadPersonGroupIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonGroupIdByWhere_result({success: result});
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonGroupIdByWhere_result(err);
          output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonGroupIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonGroupIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonGroupIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonIdByUpdateTime = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonIdByUpdateTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonIdByUpdateTime.length === 1) {
    Q.fcall(this._handler.loadPersonIdByUpdateTime.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonIdByUpdateTime_result({success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonIdByUpdateTime_result(err);
          output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonIdByUpdateTime(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonIdByUpdateTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonIdByUpdateTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonIdByUpdateTimeTimeStr = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonIdByUpdateTimeTimeStr.length === 1) {
    Q.fcall(this._handler.loadPersonIdByUpdateTimeTimeStr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_result({success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_result(err);
          output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonIdByUpdateTimeTimeStr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonIdByUpdateTimeTimeStr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonIdByUpdateTimeTimeStr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadPersonIdByWhere = function(seqid, input, output) {
  var args = new IFaceLog_loadPersonIdByWhere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadPersonIdByWhere.length === 1) {
    Q.fcall(this._handler.loadPersonIdByWhere.bind(this._handler), args.where)
      .then(function(result) {
        var result_obj = new IFaceLog_loadPersonIdByWhere_result({success: result});
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadPersonIdByWhere_result(err);
          output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadPersonIdByWhere(args.where, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadPersonIdByWhere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadPersonIdByWhere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadUpdatedPersons = function(seqid, input, output) {
  var args = new IFaceLog_loadUpdatedPersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadUpdatedPersons.length === 1) {
    Q.fcall(this._handler.loadUpdatedPersons.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadUpdatedPersons_result({success: result});
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadUpdatedPersons_result(err);
          output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadUpdatedPersons(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadUpdatedPersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadUpdatedPersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_loadUpdatedPersonsTimestr = function(seqid, input, output) {
  var args = new IFaceLog_loadUpdatedPersonsTimestr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadUpdatedPersonsTimestr.length === 1) {
    Q.fcall(this._handler.loadUpdatedPersonsTimestr.bind(this._handler), args.timestamp)
      .then(function(result) {
        var result_obj = new IFaceLog_loadUpdatedPersonsTimestr_result({success: result});
        output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_loadUpdatedPersonsTimestr_result(err);
          output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loadUpdatedPersonsTimestr(args.timestamp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_loadUpdatedPersonsTimestr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadUpdatedPersonsTimestr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_offline = function(seqid, input, output) {
  var args = new IFaceLog_offline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offline.length === 1) {
    Q.fcall(this._handler.offline.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_offline_result({success: result});
        output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_offline_result(err);
          output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("offline", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.offline(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_offline_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_online = function(seqid, input, output) {
  var args = new IFaceLog_online_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.online.length === 1) {
    Q.fcall(this._handler.online.bind(this._handler), args.device)
      .then(function(result) {
        var result_obj = new IFaceLog_online_result({success: result});
        output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_online_result(err);
          output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("online", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.online(args.device, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_online_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("online", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_registerDevice = function(seqid, input, output) {
  var args = new IFaceLog_registerDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerDevice.length === 1) {
    Q.fcall(this._handler.registerDevice.bind(this._handler), args.newDevice)
      .then(function(result) {
        var result_obj = new IFaceLog_registerDevice_result({success: result});
        output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_registerDevice_result(err);
          output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerDevice(args.newDevice, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_registerDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_releasePersonToken = function(seqid, input, output) {
  var args = new IFaceLog_releasePersonToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releasePersonToken.length === 1) {
    Q.fcall(this._handler.releasePersonToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_releasePersonToken_result({success: result});
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_releasePersonToken_result(err);
          output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releasePersonToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releasePersonToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_releasePersonToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releasePersonToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_releaseRootToken = function(seqid, input, output) {
  var args = new IFaceLog_releaseRootToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseRootToken.length === 1) {
    Q.fcall(this._handler.releaseRootToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_releaseRootToken_result({success: result});
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_releaseRootToken_result(err);
          output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releaseRootToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseRootToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_releaseRootToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releaseRootToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_releaseUserToken = function(seqid, input, output) {
  var args = new IFaceLog_releaseUserToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseUserToken.length === 1) {
    Q.fcall(this._handler.releaseUserToken.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_releaseUserToken_result({success: result});
        output.writeMessageBegin("releaseUserToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_releaseUserToken_result(err);
          output.writeMessageBegin("releaseUserToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releaseUserToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseUserToken(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_releaseUserToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("releaseUserToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releaseUserToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_replaceFeature = function(seqid, input, output) {
  var args = new IFaceLog_replaceFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.replaceFeature.length === 4) {
    Q.fcall(this._handler.replaceFeature.bind(this._handler), args.personId, args.featureMd5, args.deleteOldFeatureImage, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_replaceFeature_result({success: result});
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_replaceFeature_result(err);
          output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("replaceFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.replaceFeature(args.personId, args.featureMd5, args.deleteOldFeatureImage, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_replaceFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("replaceFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_rootGroupOfDevice = function(seqid, input, output) {
  var args = new IFaceLog_rootGroupOfDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rootGroupOfDevice.length === 1) {
    Q.fcall(this._handler.rootGroupOfDevice.bind(this._handler), args.deviceId)
      .then(function(result) {
        var result_obj = new IFaceLog_rootGroupOfDevice_result({success: result});
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_rootGroupOfDevice_result(err);
          output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rootGroupOfDevice(args.deviceId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_rootGroupOfDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rootGroupOfDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_rootGroupOfPerson = function(seqid, input, output) {
  var args = new IFaceLog_rootGroupOfPerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rootGroupOfPerson.length === 1) {
    Q.fcall(this._handler.rootGroupOfPerson.bind(this._handler), args.personId)
      .then(function(result) {
        var result_obj = new IFaceLog_rootGroupOfPerson_result({success: result});
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_rootGroupOfPerson_result(err);
          output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rootGroupOfPerson(args.personId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_rootGroupOfPerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rootGroupOfPerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_runCmd = function(seqid, input, output) {
  var args = new IFaceLog_runCmd_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.runCmd.length === 6) {
    Q.fcall(this._handler.runCmd.bind(this._handler), args.target, args.group, args.cmdpath, args.jsonArgs, args.ackChannel, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_runCmd_result({success: result});
        output.writeMessageBegin("runCmd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_runCmd_result(err);
          output.writeMessageBegin("runCmd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runCmd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.runCmd(args.target, args.group, args.cmdpath, args.jsonArgs, args.ackChannel, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_runCmd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("runCmd", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runCmd", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_runTask = function(seqid, input, output) {
  var args = new IFaceLog_runTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.runTask.length === 5) {
    Q.fcall(this._handler.runTask.bind(this._handler), args.taskQueue, args.cmdpath, args.jsonArgs, args.ackChannel, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_runTask_result({success: result});
        output.writeMessageBegin("runTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_runTask_result(err);
          output.writeMessageBegin("runTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.runTask(args.taskQueue, args.cmdpath, args.jsonArgs, args.ackChannel, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_runTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("runTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveDevice = function(seqid, input, output) {
  var args = new IFaceLog_saveDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveDevice.length === 2) {
    Q.fcall(this._handler.saveDevice.bind(this._handler), args.deviceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveDevice_result({success: result});
        output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveDevice_result(err);
          output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveDevice(args.deviceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveDeviceGroup = function(seqid, input, output) {
  var args = new IFaceLog_saveDeviceGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveDeviceGroup.length === 2) {
    Q.fcall(this._handler.saveDeviceGroup.bind(this._handler), args.deviceGroupBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveDeviceGroup_result({success: result});
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveDeviceGroup_result(err);
          output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveDeviceGroup(args.deviceGroupBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveDeviceGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveDeviceGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePermit = function(seqid, input, output) {
  var args = new IFaceLog_savePermit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePermit.length === 2) {
    Q.fcall(this._handler.savePermit.bind(this._handler), args.permitBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePermit_result({success: result});
        output.writeMessageBegin("savePermit", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePermit_result(err);
          output.writeMessageBegin("savePermit", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePermit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePermit(args.permitBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePermit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePermit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePermit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePermitWithSchedule = function(seqid, input, output) {
  var args = new IFaceLog_savePermitWithSchedule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePermitWithSchedule.length === 4) {
    Q.fcall(this._handler.savePermitWithSchedule.bind(this._handler), args.deviceGroupId, args.personGroupId, args.schedule, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePermitWithSchedule_result({success: result});
        output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePermitWithSchedule_result(err);
          output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePermitWithSchedule(args.deviceGroupId, args.personGroupId, args.schedule, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePermitWithSchedule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePermitWithSchedule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePerson = function(seqid, input, output) {
  var args = new IFaceLog_savePerson_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePerson.length === 2) {
    Q.fcall(this._handler.savePerson.bind(this._handler), args.personBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePerson_result({success: result});
        output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePerson_result(err);
          output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePerson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePerson(args.personBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePerson_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePerson", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePerson", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonFull = function(seqid, input, output) {
  var args = new IFaceLog_savePersonFull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonFull.length === 7) {
    Q.fcall(this._handler.savePersonFull.bind(this._handler), args.personBean, args.idPhoto, args.feature, args.featureVersion, args.featureImage, args.featureFaceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonFull_result({success: result});
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonFull_result(err);
          output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonFull", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonFull(args.personBean, args.idPhoto, args.feature, args.featureVersion, args.featureImage, args.featureFaceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonFull_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonFull", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonGroup = function(seqid, input, output) {
  var args = new IFaceLog_savePersonGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonGroup.length === 2) {
    Q.fcall(this._handler.savePersonGroup.bind(this._handler), args.personGroupBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonGroup_result({success: result});
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonGroup_result(err);
          output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonGroup(args.personGroupBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhoto = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhoto_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhoto.length === 3) {
    Q.fcall(this._handler.savePersonWithPhoto.bind(this._handler), args.personBean, args.idPhoto, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhoto_result({success: result});
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhoto_result(err);
          output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhoto(args.personBean, args.idPhoto, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhoto_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeature = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeature.length === 4) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeature.bind(this._handler), args.personBean, args.idPhoto, args.featureBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeature_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeature_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeature(args.personBean, args.idPhoto, args.featureBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureMultiFaces = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureMultiFaces.length === 6) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureMultiFaces.bind(this._handler), args.personBean, args.idPhoto, args.feature, args.featureVersion, args.faceBeans, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureMultiFaces(args.personBean, args.idPhoto, args.feature, args.featureVersion, args.faceBeans, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiFaces_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiFaces", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureMultiImage = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureMultiImage.length === 7) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureMultiImage.bind(this._handler), args.personBean, args.idPhoto, args.feature, args.featureVersion, args.photos, args.faces, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureMultiImage(args.personBean, args.idPhoto, args.feature, args.featureVersion, args.photos, args.faces, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureMultiImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureMultiImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonWithPhotoAndFeatureSaved = function(seqid, input, output) {
  var args = new IFaceLog_savePersonWithPhotoAndFeatureSaved_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonWithPhotoAndFeatureSaved.length === 4) {
    Q.fcall(this._handler.savePersonWithPhotoAndFeatureSaved.bind(this._handler), args.personBean, args.idPhotoMd5, args.featureMd5, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result({success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result(err);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonWithPhotoAndFeatureSaved(args.personBean, args.idPhotoMd5, args.featureMd5, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonWithPhotoAndFeatureSaved_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonWithPhotoAndFeatureSaved", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersons = function(seqid, input, output) {
  var args = new IFaceLog_savePersons_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersons.length === 2) {
    Q.fcall(this._handler.savePersons.bind(this._handler), args.persons, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersons_result({success: result});
        output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersons_result(err);
          output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersons", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersons(args.persons, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersons_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersons", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersons", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_savePersonsWithPhoto = function(seqid, input, output) {
  var args = new IFaceLog_savePersonsWithPhoto_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.savePersonsWithPhoto.length === 3) {
    Q.fcall(this._handler.savePersonsWithPhoto.bind(this._handler), args.photos, args.persons, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_savePersonsWithPhoto_result({success: result});
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_savePersonsWithPhoto_result(err);
          output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.savePersonsWithPhoto(args.photos, args.persons, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_savePersonsWithPhoto_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("savePersonsWithPhoto", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_saveServiceConfig = function(seqid, input, output) {
  var args = new IFaceLog_saveServiceConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveServiceConfig.length === 1) {
    Q.fcall(this._handler.saveServiceConfig.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_saveServiceConfig_result({success: result});
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_saveServiceConfig_result(err);
          output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveServiceConfig(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_saveServiceConfig_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveServiceConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_sdkTaskQueueOf = function(seqid, input, output) {
  var args = new IFaceLog_sdkTaskQueueOf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sdkTaskQueueOf.length === 3) {
    Q.fcall(this._handler.sdkTaskQueueOf.bind(this._handler), args.task, args.sdkVersion, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_sdkTaskQueueOf_result({success: result});
        output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_sdkTaskQueueOf_result(err);
          output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sdkTaskQueueOf(args.task, args.sdkVersion, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_sdkTaskQueueOf_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sdkTaskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setPersonExpiryDate = function(seqid, input, output) {
  var args = new IFaceLog_setPersonExpiryDate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPersonExpiryDate.length === 3) {
    Q.fcall(this._handler.setPersonExpiryDate.bind(this._handler), args.personId, args.expiryDate, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setPersonExpiryDate_result({success: result});
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setPersonExpiryDate_result(err);
          output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPersonExpiryDate(args.personId, args.expiryDate, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setPersonExpiryDate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPersonExpiryDate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setPersonExpiryDateList = function(seqid, input, output) {
  var args = new IFaceLog_setPersonExpiryDateList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPersonExpiryDateList.length === 3) {
    Q.fcall(this._handler.setPersonExpiryDateList.bind(this._handler), args.personIdList, args.expiryDate, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setPersonExpiryDateList_result({success: result});
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setPersonExpiryDateList_result(err);
          output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPersonExpiryDateList(args.personIdList, args.expiryDate, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setPersonExpiryDateList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPersonExpiryDateList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setPersonExpiryDateTimeStr = function(seqid, input, output) {
  var args = new IFaceLog_setPersonExpiryDateTimeStr_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPersonExpiryDateTimeStr.length === 3) {
    Q.fcall(this._handler.setPersonExpiryDateTimeStr.bind(this._handler), args.personId, args.expiryDate, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setPersonExpiryDateTimeStr_result({success: result});
        output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setPersonExpiryDateTimeStr_result(err);
          output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPersonExpiryDateTimeStr(args.personId, args.expiryDate, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setPersonExpiryDateTimeStr_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPersonExpiryDateTimeStr", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setProperties = function(seqid, input, output) {
  var args = new IFaceLog_setProperties_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setProperties.length === 2) {
    Q.fcall(this._handler.setProperties.bind(this._handler), args.config, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setProperties_result({success: result});
        output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setProperties_result(err);
          output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setProperties", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setProperties(args.config, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setProperties_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setProperties", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setProperties", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_setProperty = function(seqid, input, output) {
  var args = new IFaceLog_setProperty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setProperty.length === 3) {
    Q.fcall(this._handler.setProperty.bind(this._handler), args.key, args.value, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_setProperty_result({success: result});
        output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_setProperty_result(err);
          output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setProperty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setProperty(args.key, args.value, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_setProperty_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setProperty", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setProperty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_taskQueueOf = function(seqid, input, output) {
  var args = new IFaceLog_taskQueueOf_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.taskQueueOf.length === 2) {
    Q.fcall(this._handler.taskQueueOf.bind(this._handler), args.task, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_taskQueueOf_result({success: result});
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_taskQueueOf_result(err);
          output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("taskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.taskQueueOf(args.task, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_taskQueueOf_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("taskQueueOf", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_unbindBorder = function(seqid, input, output) {
  var args = new IFaceLog_unbindBorder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unbindBorder.length === 3) {
    Q.fcall(this._handler.unbindBorder.bind(this._handler), args.personGroupId, args.deviceGroupId, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_unbindBorder_result({success: result});
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_unbindBorder_result(err);
          output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unbindBorder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unbindBorder(args.personGroupId, args.deviceGroupId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_unbindBorder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unbindBorder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_unregisterDevice = function(seqid, input, output) {
  var args = new IFaceLog_unregisterDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregisterDevice.length === 1) {
    Q.fcall(this._handler.unregisterDevice.bind(this._handler), args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_unregisterDevice_result({success: result});
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_unregisterDevice_result(err);
          output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unregisterDevice(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceSecurityException || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_unregisterDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregisterDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_updateDevice = function(seqid, input, output) {
  var args = new IFaceLog_updateDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDevice.length === 2) {
    Q.fcall(this._handler.updateDevice.bind(this._handler), args.deviceBean, args.token)
      .then(function(result) {
        var result_obj = new IFaceLog_updateDevice_result({success: result});
        output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_updateDevice_result(err);
          output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDevice(args.deviceBean, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_updateDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_version = function(seqid, input, output) {
  var args = new IFaceLog_version_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.version.length === 0) {
    Q.fcall(this._handler.version.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_version_result({success: result});
        output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_version_result(err);
          output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("version", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.version(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_version_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("version", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IFaceLogProcessor.prototype.process_versionInfo = function(seqid, input, output) {
  var args = new IFaceLog_versionInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionInfo.length === 0) {
    Q.fcall(this._handler.versionInfo.bind(this._handler))
      .then(function(result) {
        var result_obj = new IFaceLog_versionInfo_result({success: result});
        output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ServiceRuntimeException) {
          result = new IFaceLog_versionInfo_result(err);
          output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("versionInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceRuntimeException) {
        result_obj = new IFaceLog_versionInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
