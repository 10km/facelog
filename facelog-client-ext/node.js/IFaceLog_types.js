//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TokenType = {
  'UNINITIALIZED' : 0,
  'DEVICE' : 1,
  'PERSON' : 2,
  'ROOT' : 3
};
ttypes.SecurityExceptionType = {
  'UNCLASSIFIED' : 0,
  'INVALID_MAC' : 1,
  'INVALID_SN' : 2,
  'OCCUPIED_SN' : 3,
  'INVALID_TOKEN' : 4,
  'INVALID_DEVICE_ID' : 5,
  'INVALID_PERSON_ID' : 6,
  'INVALID_PASSWORD' : 7,
  'REJECT_APPLY' : 8,
  'ACCESS_DENIED' : 9,
  'TABLE_INSERT_DENIED' : 10,
  'TABLE_UPDATE_DENIED' : 11,
  'TABLE_DELETE_DENIED' : 12,
  'TOO_LOW_RANK' : 13
};
ttypes.MQParam = {
  'REDIS_URI' : 0,
  'WEBREDIS_URL' : 1,
  'CMD_CHANNEL' : 2,
  'LOG_MONITOR_CHANNEL' : 3,
  'HB_MONITOR_CHANNEL' : 4,
  'HB_INTERVAL' : 5,
  'HB_EXPIRE' : 6
};
var FaceBean = module.exports.FaceBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.id = null;
  this.imageMd5 = null;
  this.faceLeft = null;
  this.faceTop = null;
  this.faceWidth = null;
  this.faceHeight = null;
  this.eyeLeftx = null;
  this.eyeLefty = null;
  this.eyeRightx = null;
  this.eyeRighty = null;
  this.mouthX = null;
  this.mouthY = null;
  this.noseX = null;
  this.noseY = null;
  this.angleYaw = null;
  this.anglePitch = null;
  this.angleRoll = null;
  this.extInfo = null;
  this.featureMd5 = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.imageMd5 !== undefined && args.imageMd5 !== null) {
      this.imageMd5 = args.imageMd5;
    }
    if (args.faceLeft !== undefined && args.faceLeft !== null) {
      this.faceLeft = args.faceLeft;
    }
    if (args.faceTop !== undefined && args.faceTop !== null) {
      this.faceTop = args.faceTop;
    }
    if (args.faceWidth !== undefined && args.faceWidth !== null) {
      this.faceWidth = args.faceWidth;
    }
    if (args.faceHeight !== undefined && args.faceHeight !== null) {
      this.faceHeight = args.faceHeight;
    }
    if (args.eyeLeftx !== undefined && args.eyeLeftx !== null) {
      this.eyeLeftx = args.eyeLeftx;
    }
    if (args.eyeLefty !== undefined && args.eyeLefty !== null) {
      this.eyeLefty = args.eyeLefty;
    }
    if (args.eyeRightx !== undefined && args.eyeRightx !== null) {
      this.eyeRightx = args.eyeRightx;
    }
    if (args.eyeRighty !== undefined && args.eyeRighty !== null) {
      this.eyeRighty = args.eyeRighty;
    }
    if (args.mouthX !== undefined && args.mouthX !== null) {
      this.mouthX = args.mouthX;
    }
    if (args.mouthY !== undefined && args.mouthY !== null) {
      this.mouthY = args.mouthY;
    }
    if (args.noseX !== undefined && args.noseX !== null) {
      this.noseX = args.noseX;
    }
    if (args.noseY !== undefined && args.noseY !== null) {
      this.noseY = args.noseY;
    }
    if (args.angleYaw !== undefined && args.angleYaw !== null) {
      this.angleYaw = args.angleYaw;
    }
    if (args.anglePitch !== undefined && args.anglePitch !== null) {
      this.anglePitch = args.anglePitch;
    }
    if (args.angleRoll !== undefined && args.angleRoll !== null) {
      this.angleRoll = args.angleRoll;
    }
    if (args.extInfo !== undefined && args.extInfo !== null) {
      this.extInfo = args.extInfo;
    }
    if (args.featureMd5 !== undefined && args.featureMd5 !== null) {
      this.featureMd5 = args.featureMd5;
    }
  }
};
FaceBean.prototype = {};
FaceBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.imageMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.faceLeft = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.faceTop = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.faceWidth = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.faceHeight = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.eyeLeftx = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.eyeLefty = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.eyeRightx = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.eyeRighty = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.mouthX = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.mouthY = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.noseX = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.noseY = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.angleYaw = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.anglePitch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.angleRoll = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.extInfo = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.featureMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FaceBean.prototype.write = function(output) {
  output.writeStructBegin('FaceBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 4);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.imageMd5 !== null && this.imageMd5 !== undefined) {
    output.writeFieldBegin('imageMd5', Thrift.Type.STRING, 5);
    output.writeString(this.imageMd5);
    output.writeFieldEnd();
  }
  if (this.faceLeft !== null && this.faceLeft !== undefined) {
    output.writeFieldBegin('faceLeft', Thrift.Type.I32, 6);
    output.writeI32(this.faceLeft);
    output.writeFieldEnd();
  }
  if (this.faceTop !== null && this.faceTop !== undefined) {
    output.writeFieldBegin('faceTop', Thrift.Type.I32, 7);
    output.writeI32(this.faceTop);
    output.writeFieldEnd();
  }
  if (this.faceWidth !== null && this.faceWidth !== undefined) {
    output.writeFieldBegin('faceWidth', Thrift.Type.I32, 8);
    output.writeI32(this.faceWidth);
    output.writeFieldEnd();
  }
  if (this.faceHeight !== null && this.faceHeight !== undefined) {
    output.writeFieldBegin('faceHeight', Thrift.Type.I32, 9);
    output.writeI32(this.faceHeight);
    output.writeFieldEnd();
  }
  if (this.eyeLeftx !== null && this.eyeLeftx !== undefined) {
    output.writeFieldBegin('eyeLeftx', Thrift.Type.I32, 10);
    output.writeI32(this.eyeLeftx);
    output.writeFieldEnd();
  }
  if (this.eyeLefty !== null && this.eyeLefty !== undefined) {
    output.writeFieldBegin('eyeLefty', Thrift.Type.I32, 11);
    output.writeI32(this.eyeLefty);
    output.writeFieldEnd();
  }
  if (this.eyeRightx !== null && this.eyeRightx !== undefined) {
    output.writeFieldBegin('eyeRightx', Thrift.Type.I32, 12);
    output.writeI32(this.eyeRightx);
    output.writeFieldEnd();
  }
  if (this.eyeRighty !== null && this.eyeRighty !== undefined) {
    output.writeFieldBegin('eyeRighty', Thrift.Type.I32, 13);
    output.writeI32(this.eyeRighty);
    output.writeFieldEnd();
  }
  if (this.mouthX !== null && this.mouthX !== undefined) {
    output.writeFieldBegin('mouthX', Thrift.Type.I32, 14);
    output.writeI32(this.mouthX);
    output.writeFieldEnd();
  }
  if (this.mouthY !== null && this.mouthY !== undefined) {
    output.writeFieldBegin('mouthY', Thrift.Type.I32, 15);
    output.writeI32(this.mouthY);
    output.writeFieldEnd();
  }
  if (this.noseX !== null && this.noseX !== undefined) {
    output.writeFieldBegin('noseX', Thrift.Type.I32, 16);
    output.writeI32(this.noseX);
    output.writeFieldEnd();
  }
  if (this.noseY !== null && this.noseY !== undefined) {
    output.writeFieldBegin('noseY', Thrift.Type.I32, 17);
    output.writeI32(this.noseY);
    output.writeFieldEnd();
  }
  if (this.angleYaw !== null && this.angleYaw !== undefined) {
    output.writeFieldBegin('angleYaw', Thrift.Type.I32, 18);
    output.writeI32(this.angleYaw);
    output.writeFieldEnd();
  }
  if (this.anglePitch !== null && this.anglePitch !== undefined) {
    output.writeFieldBegin('anglePitch', Thrift.Type.I32, 19);
    output.writeI32(this.anglePitch);
    output.writeFieldEnd();
  }
  if (this.angleRoll !== null && this.angleRoll !== undefined) {
    output.writeFieldBegin('angleRoll', Thrift.Type.I32, 20);
    output.writeI32(this.angleRoll);
    output.writeFieldEnd();
  }
  if (this.extInfo !== null && this.extInfo !== undefined) {
    output.writeFieldBegin('extInfo', Thrift.Type.STRING, 21);
    output.writeBinary(this.extInfo);
    output.writeFieldEnd();
  }
  if (this.featureMd5 !== null && this.featureMd5 !== undefined) {
    output.writeFieldBegin('featureMd5', Thrift.Type.STRING, 22);
    output.writeString(this.featureMd5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DuplicateRecordException = module.exports.DuplicateRecordException = function(args) {
  Thrift.TException.call(this, "DuplicateRecordException");
  this.name = "DuplicateRecordException";
  this.message = null;
  this.causeClass = null;
  this.serviceStackTraceMessage = null;
  this.causeFields = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.causeClass !== undefined && args.causeClass !== null) {
      this.causeClass = args.causeClass;
    }
    if (args.serviceStackTraceMessage !== undefined && args.serviceStackTraceMessage !== null) {
      this.serviceStackTraceMessage = args.serviceStackTraceMessage;
    }
    if (args.causeFields !== undefined && args.causeFields !== null) {
      this.causeFields = args.causeFields;
    }
  }
};
Thrift.inherits(DuplicateRecordException, Thrift.TException);
DuplicateRecordException.prototype.name = 'DuplicateRecordException';
DuplicateRecordException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.causeClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceStackTraceMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.causeFields = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DuplicateRecordException.prototype.write = function(output) {
  output.writeStructBegin('DuplicateRecordException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.causeClass !== null && this.causeClass !== undefined) {
    output.writeFieldBegin('causeClass', Thrift.Type.STRING, 2);
    output.writeString(this.causeClass);
    output.writeFieldEnd();
  }
  if (this.serviceStackTraceMessage !== null && this.serviceStackTraceMessage !== undefined) {
    output.writeFieldBegin('serviceStackTraceMessage', Thrift.Type.STRING, 3);
    output.writeString(this.serviceStackTraceMessage);
    output.writeFieldEnd();
  }
  if (this.causeFields !== null && this.causeFields !== undefined) {
    output.writeFieldBegin('causeFields', Thrift.Type.STRING, 4);
    output.writeString(this.causeFields);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceRuntimeException = module.exports.ServiceRuntimeException = function(args) {
  Thrift.TException.call(this, "ServiceRuntimeException");
  this.name = "ServiceRuntimeException";
  this.message = null;
  this.causeClass = null;
  this.serviceStackTraceMessage = null;
  this.causeFields = null;
  this.type = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.causeClass !== undefined && args.causeClass !== null) {
      this.causeClass = args.causeClass;
    }
    if (args.serviceStackTraceMessage !== undefined && args.serviceStackTraceMessage !== null) {
      this.serviceStackTraceMessage = args.serviceStackTraceMessage;
    }
    if (args.causeFields !== undefined && args.causeFields !== null) {
      this.causeFields = args.causeFields;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
Thrift.inherits(ServiceRuntimeException, Thrift.TException);
ServiceRuntimeException.prototype.name = 'ServiceRuntimeException';
ServiceRuntimeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.causeClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceStackTraceMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.causeFields = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceRuntimeException.prototype.write = function(output) {
  output.writeStructBegin('ServiceRuntimeException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.causeClass !== null && this.causeClass !== undefined) {
    output.writeFieldBegin('causeClass', Thrift.Type.STRING, 2);
    output.writeString(this.causeClass);
    output.writeFieldEnd();
  }
  if (this.serviceStackTraceMessage !== null && this.serviceStackTraceMessage !== undefined) {
    output.writeFieldBegin('serviceStackTraceMessage', Thrift.Type.STRING, 3);
    output.writeString(this.serviceStackTraceMessage);
    output.writeFieldEnd();
  }
  if (this.causeFields !== null && this.causeFields !== undefined) {
    output.writeFieldBegin('causeFields', Thrift.Type.STRING, 4);
    output.writeString(this.causeFields);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FeatureBean = module.exports.FeatureBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.md5 = null;
  this.version = null;
  this.personId = null;
  this.feature = null;
  this.updateTime = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.feature !== undefined && args.feature !== null) {
      this.feature = args.feature;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
  }
};
FeatureBean.prototype = {};
FeatureBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.feature = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.updateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeatureBean.prototype.write = function(output) {
  output.writeStructBegin('FeatureBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 4);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 5);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 6);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.feature !== null && this.feature !== undefined) {
    output.writeFieldBegin('feature', Thrift.Type.STRING, 7);
    output.writeBinary(this.feature);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.I64, 8);
    output.writeI64(this.updateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ImageBean = module.exports.ImageBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.md5 = null;
  this.format = null;
  this.width = null;
  this.height = null;
  this.depth = null;
  this.faceNum = null;
  this.thumbMd5 = null;
  this.deviceId = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
    if (args.format !== undefined && args.format !== null) {
      this.format = args.format;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.depth !== undefined && args.depth !== null) {
      this.depth = args.depth;
    }
    if (args.faceNum !== undefined && args.faceNum !== null) {
      this.faceNum = args.faceNum;
    }
    if (args.thumbMd5 !== undefined && args.thumbMd5 !== null) {
      this.thumbMd5 = args.thumbMd5;
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
  }
};
ImageBean.prototype = {};
ImageBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.format = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.depth = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.faceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.thumbMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImageBean.prototype.write = function(output) {
  output.writeStructBegin('ImageBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 4);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRING, 5);
    output.writeString(this.format);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 6);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 7);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.depth !== null && this.depth !== undefined) {
    output.writeFieldBegin('depth', Thrift.Type.I32, 8);
    output.writeI32(this.depth);
    output.writeFieldEnd();
  }
  if (this.faceNum !== null && this.faceNum !== undefined) {
    output.writeFieldBegin('faceNum', Thrift.Type.I32, 9);
    output.writeI32(this.faceNum);
    output.writeFieldEnd();
  }
  if (this.thumbMd5 !== null && this.thumbMd5 !== undefined) {
    output.writeFieldBegin('thumbMd5', Thrift.Type.STRING, 10);
    output.writeString(this.thumbMd5);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 11);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogBean = module.exports.LogBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.id = null;
  this.personId = null;
  this.deviceId = null;
  this.verifyFeature = null;
  this.compareFace = null;
  this.verifyStatus = null;
  this.similarty = null;
  this.verifyTime = null;
  this.createTime = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.verifyFeature !== undefined && args.verifyFeature !== null) {
      this.verifyFeature = args.verifyFeature;
    }
    if (args.compareFace !== undefined && args.compareFace !== null) {
      this.compareFace = args.compareFace;
    }
    if (args.verifyStatus !== undefined && args.verifyStatus !== null) {
      this.verifyStatus = args.verifyStatus;
    }
    if (args.similarty !== undefined && args.similarty !== null) {
      this.similarty = args.similarty;
    }
    if (args.verifyTime !== undefined && args.verifyTime !== null) {
      this.verifyTime = args.verifyTime;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
  }
};
LogBean.prototype = {};
LogBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.deviceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.verifyFeature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.compareFace = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.verifyStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.similarty = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.verifyTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogBean.prototype.write = function(output) {
  output.writeStructBegin('LogBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 4);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 5);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.I32, 6);
    output.writeI32(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.verifyFeature !== null && this.verifyFeature !== undefined) {
    output.writeFieldBegin('verifyFeature', Thrift.Type.STRING, 7);
    output.writeString(this.verifyFeature);
    output.writeFieldEnd();
  }
  if (this.compareFace !== null && this.compareFace !== undefined) {
    output.writeFieldBegin('compareFace', Thrift.Type.I32, 8);
    output.writeI32(this.compareFace);
    output.writeFieldEnd();
  }
  if (this.verifyStatus !== null && this.verifyStatus !== undefined) {
    output.writeFieldBegin('verifyStatus', Thrift.Type.I32, 9);
    output.writeI32(this.verifyStatus);
    output.writeFieldEnd();
  }
  if (this.similarty !== null && this.similarty !== undefined) {
    output.writeFieldBegin('similarty', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.similarty);
    output.writeFieldEnd();
  }
  if (this.verifyTime !== null && this.verifyTime !== undefined) {
    output.writeFieldBegin('verifyTime', Thrift.Type.I64, 11);
    output.writeI64(this.verifyTime);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 12);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceBean = module.exports.DeviceBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.id = null;
  this.groupId = null;
  this.name = null;
  this.productName = null;
  this.model = null;
  this.vendor = null;
  this.manufacturer = null;
  this.madeDate = null;
  this.version = null;
  this.usedSdks = null;
  this.serialNo = null;
  this.mac = null;
  this.remark = null;
  this.extBin = null;
  this.extTxt = null;
  this.createTime = null;
  this.updateTime = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = args.model;
    }
    if (args.vendor !== undefined && args.vendor !== null) {
      this.vendor = args.vendor;
    }
    if (args.manufacturer !== undefined && args.manufacturer !== null) {
      this.manufacturer = args.manufacturer;
    }
    if (args.madeDate !== undefined && args.madeDate !== null) {
      this.madeDate = args.madeDate;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.usedSdks !== undefined && args.usedSdks !== null) {
      this.usedSdks = args.usedSdks;
    }
    if (args.serialNo !== undefined && args.serialNo !== null) {
      this.serialNo = args.serialNo;
    }
    if (args.mac !== undefined && args.mac !== null) {
      this.mac = args.mac;
    }
    if (args.remark !== undefined && args.remark !== null) {
      this.remark = args.remark;
    }
    if (args.extBin !== undefined && args.extBin !== null) {
      this.extBin = args.extBin;
    }
    if (args.extTxt !== undefined && args.extTxt !== null) {
      this.extTxt = args.extTxt;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
  }
};
DeviceBean.prototype = {};
DeviceBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.groupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.model = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.vendor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.manufacturer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.madeDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.usedSdks = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.serialNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.mac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.extBin = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.extTxt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.updateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceBean.prototype.write = function(output) {
  output.writeStructBegin('DeviceBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 4);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I32, 5);
    output.writeI32(this.groupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 7);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRING, 8);
    output.writeString(this.model);
    output.writeFieldEnd();
  }
  if (this.vendor !== null && this.vendor !== undefined) {
    output.writeFieldBegin('vendor', Thrift.Type.STRING, 9);
    output.writeString(this.vendor);
    output.writeFieldEnd();
  }
  if (this.manufacturer !== null && this.manufacturer !== undefined) {
    output.writeFieldBegin('manufacturer', Thrift.Type.STRING, 10);
    output.writeString(this.manufacturer);
    output.writeFieldEnd();
  }
  if (this.madeDate !== null && this.madeDate !== undefined) {
    output.writeFieldBegin('madeDate', Thrift.Type.I64, 11);
    output.writeI64(this.madeDate);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 12);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.usedSdks !== null && this.usedSdks !== undefined) {
    output.writeFieldBegin('usedSdks', Thrift.Type.STRING, 13);
    output.writeString(this.usedSdks);
    output.writeFieldEnd();
  }
  if (this.serialNo !== null && this.serialNo !== undefined) {
    output.writeFieldBegin('serialNo', Thrift.Type.STRING, 14);
    output.writeString(this.serialNo);
    output.writeFieldEnd();
  }
  if (this.mac !== null && this.mac !== undefined) {
    output.writeFieldBegin('mac', Thrift.Type.STRING, 15);
    output.writeString(this.mac);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 16);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.extBin !== null && this.extBin !== undefined) {
    output.writeFieldBegin('extBin', Thrift.Type.STRING, 17);
    output.writeBinary(this.extBin);
    output.writeFieldEnd();
  }
  if (this.extTxt !== null && this.extTxt !== undefined) {
    output.writeFieldBegin('extTxt', Thrift.Type.STRING, 18);
    output.writeString(this.extTxt);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 19);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.I64, 20);
    output.writeI64(this.updateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceGroupBean = module.exports.DeviceGroupBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.id = null;
  this.name = null;
  this.leaf = null;
  this.parent = null;
  this.rootGroup = null;
  this.schedule = null;
  this.remark = null;
  this.extBin = null;
  this.extTxt = null;
  this.createTime = null;
  this.updateTime = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.leaf !== undefined && args.leaf !== null) {
      this.leaf = args.leaf;
    }
    if (args.parent !== undefined && args.parent !== null) {
      this.parent = args.parent;
    }
    if (args.rootGroup !== undefined && args.rootGroup !== null) {
      this.rootGroup = args.rootGroup;
    }
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = args.schedule;
    }
    if (args.remark !== undefined && args.remark !== null) {
      this.remark = args.remark;
    }
    if (args.extBin !== undefined && args.extBin !== null) {
      this.extBin = args.extBin;
    }
    if (args.extTxt !== undefined && args.extTxt !== null) {
      this.extTxt = args.extTxt;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
  }
};
DeviceGroupBean.prototype = {};
DeviceGroupBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.leaf = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.parent = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.rootGroup = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.schedule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.extBin = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.extTxt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.updateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceGroupBean.prototype.write = function(output) {
  output.writeStructBegin('DeviceGroupBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 4);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.leaf !== null && this.leaf !== undefined) {
    output.writeFieldBegin('leaf', Thrift.Type.I32, 6);
    output.writeI32(this.leaf);
    output.writeFieldEnd();
  }
  if (this.parent !== null && this.parent !== undefined) {
    output.writeFieldBegin('parent', Thrift.Type.I32, 7);
    output.writeI32(this.parent);
    output.writeFieldEnd();
  }
  if (this.rootGroup !== null && this.rootGroup !== undefined) {
    output.writeFieldBegin('rootGroup', Thrift.Type.I32, 8);
    output.writeI32(this.rootGroup);
    output.writeFieldEnd();
  }
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRING, 9);
    output.writeString(this.schedule);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 10);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.extBin !== null && this.extBin !== undefined) {
    output.writeFieldBegin('extBin', Thrift.Type.STRING, 11);
    output.writeBinary(this.extBin);
    output.writeFieldEnd();
  }
  if (this.extTxt !== null && this.extTxt !== undefined) {
    output.writeFieldBegin('extTxt', Thrift.Type.STRING, 12);
    output.writeString(this.extTxt);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 13);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.I64, 14);
    output.writeI64(this.updateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PermitBean = module.exports.PermitBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.deviceGroupId = null;
  this.personGroupId = null;
  this.schedule = null;
  this.remark = null;
  this.extBin = null;
  this.extTxt = null;
  this.createTime = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.deviceGroupId !== undefined && args.deviceGroupId !== null) {
      this.deviceGroupId = args.deviceGroupId;
    }
    if (args.personGroupId !== undefined && args.personGroupId !== null) {
      this.personGroupId = args.personGroupId;
    }
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = args.schedule;
    }
    if (args.remark !== undefined && args.remark !== null) {
      this.remark = args.remark;
    }
    if (args.extBin !== undefined && args.extBin !== null) {
      this.extBin = args.extBin;
    }
    if (args.extTxt !== undefined && args.extTxt !== null) {
      this.extTxt = args.extTxt;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
  }
};
PermitBean.prototype = {};
PermitBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.deviceGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.personGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.schedule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.extBin = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.extTxt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PermitBean.prototype.write = function(output) {
  output.writeStructBegin('PermitBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.deviceGroupId !== null && this.deviceGroupId !== undefined) {
    output.writeFieldBegin('deviceGroupId', Thrift.Type.I32, 4);
    output.writeI32(this.deviceGroupId);
    output.writeFieldEnd();
  }
  if (this.personGroupId !== null && this.personGroupId !== undefined) {
    output.writeFieldBegin('personGroupId', Thrift.Type.I32, 5);
    output.writeI32(this.personGroupId);
    output.writeFieldEnd();
  }
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRING, 6);
    output.writeString(this.schedule);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 7);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.extBin !== null && this.extBin !== undefined) {
    output.writeFieldBegin('extBin', Thrift.Type.STRING, 8);
    output.writeBinary(this.extBin);
    output.writeFieldEnd();
  }
  if (this.extTxt !== null && this.extTxt !== undefined) {
    output.writeFieldBegin('extTxt', Thrift.Type.STRING, 9);
    output.writeString(this.extTxt);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 10);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PersonBean = module.exports.PersonBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.id = null;
  this.groupId = null;
  this.name = null;
  this.sex = null;
  this.rank = null;
  this.password = null;
  this.birthdate = null;
  this.mobilePhone = null;
  this.papersType = null;
  this.papersNum = null;
  this.imageMd5 = null;
  this.expiryDate = null;
  this.remark = null;
  this.extBin = null;
  this.extTxt = null;
  this.createTime = null;
  this.updateTime = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.sex !== undefined && args.sex !== null) {
      this.sex = args.sex;
    }
    if (args.rank !== undefined && args.rank !== null) {
      this.rank = args.rank;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.birthdate !== undefined && args.birthdate !== null) {
      this.birthdate = args.birthdate;
    }
    if (args.mobilePhone !== undefined && args.mobilePhone !== null) {
      this.mobilePhone = args.mobilePhone;
    }
    if (args.papersType !== undefined && args.papersType !== null) {
      this.papersType = args.papersType;
    }
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
    if (args.imageMd5 !== undefined && args.imageMd5 !== null) {
      this.imageMd5 = args.imageMd5;
    }
    if (args.expiryDate !== undefined && args.expiryDate !== null) {
      this.expiryDate = args.expiryDate;
    }
    if (args.remark !== undefined && args.remark !== null) {
      this.remark = args.remark;
    }
    if (args.extBin !== undefined && args.extBin !== null) {
      this.extBin = args.extBin;
    }
    if (args.extTxt !== undefined && args.extTxt !== null) {
      this.extTxt = args.extTxt;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
  }
};
PersonBean.prototype = {};
PersonBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.groupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.sex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.rank = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.birthdate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.mobilePhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.papersType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.imageMd5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.expiryDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.extBin = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.extTxt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.updateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PersonBean.prototype.write = function(output) {
  output.writeStructBegin('PersonBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 4);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I32, 5);
    output.writeI32(this.groupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.sex !== null && this.sex !== undefined) {
    output.writeFieldBegin('sex', Thrift.Type.I32, 7);
    output.writeI32(this.sex);
    output.writeFieldEnd();
  }
  if (this.rank !== null && this.rank !== undefined) {
    output.writeFieldBegin('rank', Thrift.Type.I32, 8);
    output.writeI32(this.rank);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 9);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.birthdate !== null && this.birthdate !== undefined) {
    output.writeFieldBegin('birthdate', Thrift.Type.I64, 10);
    output.writeI64(this.birthdate);
    output.writeFieldEnd();
  }
  if (this.mobilePhone !== null && this.mobilePhone !== undefined) {
    output.writeFieldBegin('mobilePhone', Thrift.Type.STRING, 11);
    output.writeString(this.mobilePhone);
    output.writeFieldEnd();
  }
  if (this.papersType !== null && this.papersType !== undefined) {
    output.writeFieldBegin('papersType', Thrift.Type.I32, 12);
    output.writeI32(this.papersType);
    output.writeFieldEnd();
  }
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 13);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  if (this.imageMd5 !== null && this.imageMd5 !== undefined) {
    output.writeFieldBegin('imageMd5', Thrift.Type.STRING, 14);
    output.writeString(this.imageMd5);
    output.writeFieldEnd();
  }
  if (this.expiryDate !== null && this.expiryDate !== undefined) {
    output.writeFieldBegin('expiryDate', Thrift.Type.I64, 15);
    output.writeI64(this.expiryDate);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 16);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.extBin !== null && this.extBin !== undefined) {
    output.writeFieldBegin('extBin', Thrift.Type.STRING, 17);
    output.writeBinary(this.extBin);
    output.writeFieldEnd();
  }
  if (this.extTxt !== null && this.extTxt !== undefined) {
    output.writeFieldBegin('extTxt', Thrift.Type.STRING, 18);
    output.writeString(this.extTxt);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 19);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.I64, 20);
    output.writeI64(this.updateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PersonGroupBean = module.exports.PersonGroupBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.id = null;
  this.name = null;
  this.leaf = null;
  this.parent = null;
  this.rootGroup = null;
  this.remark = null;
  this.extBin = null;
  this.extTxt = null;
  this.createTime = null;
  this.updateTime = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.leaf !== undefined && args.leaf !== null) {
      this.leaf = args.leaf;
    }
    if (args.parent !== undefined && args.parent !== null) {
      this.parent = args.parent;
    }
    if (args.rootGroup !== undefined && args.rootGroup !== null) {
      this.rootGroup = args.rootGroup;
    }
    if (args.remark !== undefined && args.remark !== null) {
      this.remark = args.remark;
    }
    if (args.extBin !== undefined && args.extBin !== null) {
      this.extBin = args.extBin;
    }
    if (args.extTxt !== undefined && args.extTxt !== null) {
      this.extTxt = args.extTxt;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
  }
};
PersonGroupBean.prototype = {};
PersonGroupBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.leaf = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.parent = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.rootGroup = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.extBin = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.extTxt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.updateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PersonGroupBean.prototype.write = function(output) {
  output.writeStructBegin('PersonGroupBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 4);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.leaf !== null && this.leaf !== undefined) {
    output.writeFieldBegin('leaf', Thrift.Type.I32, 6);
    output.writeI32(this.leaf);
    output.writeFieldEnd();
  }
  if (this.parent !== null && this.parent !== undefined) {
    output.writeFieldBegin('parent', Thrift.Type.I32, 7);
    output.writeI32(this.parent);
    output.writeFieldEnd();
  }
  if (this.rootGroup !== null && this.rootGroup !== undefined) {
    output.writeFieldBegin('rootGroup', Thrift.Type.I32, 8);
    output.writeI32(this.rootGroup);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 9);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  if (this.extBin !== null && this.extBin !== undefined) {
    output.writeFieldBegin('extBin', Thrift.Type.STRING, 10);
    output.writeBinary(this.extBin);
    output.writeFieldEnd();
  }
  if (this.extTxt !== null && this.extTxt !== undefined) {
    output.writeFieldBegin('extTxt', Thrift.Type.STRING, 11);
    output.writeString(this.extTxt);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 12);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.I64, 13);
    output.writeI64(this.updateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogLightBean = module.exports.LogLightBean = function(args) {
  this._new = null;
  this.modified = null;
  this.initialized = null;
  this.id = null;
  this.personId = null;
  this.name = null;
  this.papersType = null;
  this.papersNum = null;
  this.verifyTime = null;
  if (args) {
    if (args._new !== undefined && args._new !== null) {
      this._new = args._new;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _new is unset!');
    }
    if (args.modified !== undefined && args.modified !== null) {
      this.modified = args.modified;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modified is unset!');
    }
    if (args.initialized !== undefined && args.initialized !== null) {
      this.initialized = args.initialized;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initialized is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.personId !== undefined && args.personId !== null) {
      this.personId = args.personId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.papersType !== undefined && args.papersType !== null) {
      this.papersType = args.papersType;
    }
    if (args.papersNum !== undefined && args.papersNum !== null) {
      this.papersNum = args.papersNum;
    }
    if (args.verifyTime !== undefined && args.verifyTime !== null) {
      this.verifyTime = args.verifyTime;
    }
  }
};
LogLightBean.prototype = {};
LogLightBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this._new = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modified = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.initialized = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.personId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.papersType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.papersNum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.verifyTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogLightBean.prototype.write = function(output) {
  output.writeStructBegin('LogLightBean');
  if (this._new !== null && this._new !== undefined) {
    output.writeFieldBegin('_new', Thrift.Type.BOOL, 1);
    output.writeBool(this._new);
    output.writeFieldEnd();
  }
  if (this.modified !== null && this.modified !== undefined) {
    output.writeFieldBegin('modified', Thrift.Type.I32, 2);
    output.writeI32(this.modified);
    output.writeFieldEnd();
  }
  if (this.initialized !== null && this.initialized !== undefined) {
    output.writeFieldBegin('initialized', Thrift.Type.I32, 3);
    output.writeI32(this.initialized);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 4);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.personId !== null && this.personId !== undefined) {
    output.writeFieldBegin('personId', Thrift.Type.I32, 5);
    output.writeI32(this.personId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.papersType !== null && this.papersType !== undefined) {
    output.writeFieldBegin('papersType', Thrift.Type.I32, 7);
    output.writeI32(this.papersType);
    output.writeFieldEnd();
  }
  if (this.papersNum !== null && this.papersNum !== undefined) {
    output.writeFieldBegin('papersNum', Thrift.Type.STRING, 8);
    output.writeString(this.papersNum);
    output.writeFieldEnd();
  }
  if (this.verifyTime !== null && this.verifyTime !== undefined) {
    output.writeFieldBegin('verifyTime', Thrift.Type.I64, 9);
    output.writeI64(this.verifyTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Token = module.exports.Token = function(args) {
  this.id = null;
  this.t1 = null;
  this.t2 = null;
  this.t3 = null;
  this.t4 = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.t1 !== undefined && args.t1 !== null) {
      this.t1 = args.t1;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field t1 is unset!');
    }
    if (args.t2 !== undefined && args.t2 !== null) {
      this.t2 = args.t2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field t2 is unset!');
    }
    if (args.t3 !== undefined && args.t3 !== null) {
      this.t3 = args.t3;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field t3 is unset!');
    }
    if (args.t4 !== undefined && args.t4 !== null) {
      this.t4 = args.t4;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field t4 is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Token.prototype = {};
Token.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.t1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.t2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.t3 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.t4 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Token.prototype.write = function(output) {
  output.writeStructBegin('Token');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.t1 !== null && this.t1 !== undefined) {
    output.writeFieldBegin('t1', Thrift.Type.I32, 2);
    output.writeI32(this.t1);
    output.writeFieldEnd();
  }
  if (this.t2 !== null && this.t2 !== undefined) {
    output.writeFieldBegin('t2', Thrift.Type.I32, 3);
    output.writeI32(this.t2);
    output.writeFieldEnd();
  }
  if (this.t3 !== null && this.t3 !== undefined) {
    output.writeFieldBegin('t3', Thrift.Type.I32, 4);
    output.writeI32(this.t3);
    output.writeFieldEnd();
  }
  if (this.t4 !== null && this.t4 !== undefined) {
    output.writeFieldBegin('t4', Thrift.Type.I32, 5);
    output.writeI32(this.t4);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceSecurityException = module.exports.ServiceSecurityException = function(args) {
  Thrift.TException.call(this, "ServiceSecurityException");
  this.name = "ServiceSecurityException";
  this.message = null;
  this.causeClass = null;
  this.serviceStackTraceMessage = null;
  this.causeFields = null;
  this.deviceID = null;
  this.type = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.causeClass !== undefined && args.causeClass !== null) {
      this.causeClass = args.causeClass;
    }
    if (args.serviceStackTraceMessage !== undefined && args.serviceStackTraceMessage !== null) {
      this.serviceStackTraceMessage = args.serviceStackTraceMessage;
    }
    if (args.causeFields !== undefined && args.causeFields !== null) {
      this.causeFields = args.causeFields;
    }
    if (args.deviceID !== undefined && args.deviceID !== null) {
      this.deviceID = args.deviceID;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Thrift.inherits(ServiceSecurityException, Thrift.TException);
ServiceSecurityException.prototype.name = 'ServiceSecurityException';
ServiceSecurityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.causeClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceStackTraceMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.causeFields = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.deviceID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceSecurityException.prototype.write = function(output) {
  output.writeStructBegin('ServiceSecurityException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.causeClass !== null && this.causeClass !== undefined) {
    output.writeFieldBegin('causeClass', Thrift.Type.STRING, 2);
    output.writeString(this.causeClass);
    output.writeFieldEnd();
  }
  if (this.serviceStackTraceMessage !== null && this.serviceStackTraceMessage !== undefined) {
    output.writeFieldBegin('serviceStackTraceMessage', Thrift.Type.STRING, 3);
    output.writeString(this.serviceStackTraceMessage);
    output.writeFieldEnd();
  }
  if (this.causeFields !== null && this.causeFields !== undefined) {
    output.writeFieldBegin('causeFields', Thrift.Type.STRING, 4);
    output.writeString(this.causeFields);
    output.writeFieldEnd();
  }
  if (this.deviceID !== null && this.deviceID !== undefined) {
    output.writeFieldBegin('deviceID', Thrift.Type.I32, 5);
    output.writeI32(this.deviceID);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

