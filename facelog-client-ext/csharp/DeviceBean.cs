/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class DeviceBean : TBase
{

  public bool _new { get; set; }

  public long Modified { get; set; }

  public long Initialized { get; set; }

  public int? Id { get; set; }

  public int? GroupId { get; set; }

  public string Name { get; set; }

  public string ProductName { get; set; }

  public string Model { get; set; }

  public string Vendor { get; set; }

  public string Manufacturer { get; set; }

  public long? MadeDate { get; set; }

  public string Version { get; set; }

  public string SerialNo { get; set; }

  public string Mac { get; set; }

  public string Remark { get; set; }

  public byte[] ExtBin { get; set; }

  public string ExtTxt { get; set; }

  public long? CreateTime { get; set; }

  public long? UpdateTime { get; set; }

  public DeviceBean() {
  }

  public DeviceBean(bool _new, long modified, long initialized) : this() {
    this._new = _new;
    this.Modified = modified;
    this.Initialized = initialized;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset__new = false;
      bool isset_modified = false;
      bool isset_initialized = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              _new = iprot.ReadBool();
              isset__new = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Modified = iprot.ReadI64();
              isset_modified = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Initialized = iprot.ReadI64();
              isset_initialized = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              GroupId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              ProductName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Model = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Vendor = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Manufacturer = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              MadeDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Version = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              SerialNo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Mac = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              Remark = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              ExtBin = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              ExtTxt = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I64) {
              CreateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I64) {
              UpdateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset__new)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field _new not set");
      if (!isset_modified)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Modified not set");
      if (!isset_initialized)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Initialized not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("DeviceBean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "_new";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(_new);
      oprot.WriteFieldEnd();
      field.Name = "modified";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Modified);
      oprot.WriteFieldEnd();
      field.Name = "initialized";
      field.Type = TType.I64;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Initialized);
      oprot.WriteFieldEnd();
      if (Id != null) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id.Value);
        oprot.WriteFieldEnd();
      }
      if (GroupId != null) {
        field.Name = "groupId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GroupId.Value);
        oprot.WriteFieldEnd();
      }
      if (Name != null) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (ProductName != null) {
        field.Name = "productName";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProductName);
        oprot.WriteFieldEnd();
      }
      if (Model != null) {
        field.Name = "model";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Model);
        oprot.WriteFieldEnd();
      }
      if (Vendor != null) {
        field.Name = "vendor";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Vendor);
        oprot.WriteFieldEnd();
      }
      if (Manufacturer != null) {
        field.Name = "manufacturer";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Manufacturer);
        oprot.WriteFieldEnd();
      }
      if (MadeDate != null) {
        field.Name = "madeDate";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MadeDate.Value);
        oprot.WriteFieldEnd();
      }
      if (Version != null) {
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Version);
        oprot.WriteFieldEnd();
      }
      if (SerialNo != null) {
        field.Name = "serialNo";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SerialNo);
        oprot.WriteFieldEnd();
      }
      if (Mac != null) {
        field.Name = "mac";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mac);
        oprot.WriteFieldEnd();
      }
      if (Remark != null) {
        field.Name = "remark";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Remark);
        oprot.WriteFieldEnd();
      }
      if (ExtBin != null) {
        field.Name = "extBin";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(ExtBin);
        oprot.WriteFieldEnd();
      }
      if (ExtTxt != null) {
        field.Name = "extTxt";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtTxt);
        oprot.WriteFieldEnd();
      }
      if (CreateTime != null) {
        field.Name = "createTime";
        field.Type = TType.I64;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTime.Value);
        oprot.WriteFieldEnd();
      }
      if (UpdateTime != null) {
        field.Name = "updateTime";
        field.Type = TType.I64;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpdateTime.Value);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("DeviceBean(");
    __sb.Append(", _new: ");
    __sb.Append(_new);
    __sb.Append(", Modified: ");
    __sb.Append(Modified);
    __sb.Append(", Initialized: ");
    __sb.Append(Initialized);
    if (Id != null) {
      __sb.Append(", Id: ");
      __sb.Append(Id);
    }
    if (GroupId != null) {
      __sb.Append(", GroupId: ");
      __sb.Append(GroupId);
    }
    if (Name != null) {
      __sb.Append(", Name: ");
      __sb.Append(Name);
    }
    if (ProductName != null) {
      __sb.Append(", ProductName: ");
      __sb.Append(ProductName);
    }
    if (Model != null) {
      __sb.Append(", Model: ");
      __sb.Append(Model);
    }
    if (Vendor != null) {
      __sb.Append(", Vendor: ");
      __sb.Append(Vendor);
    }
    if (Manufacturer != null) {
      __sb.Append(", Manufacturer: ");
      __sb.Append(Manufacturer);
    }
    if (MadeDate != null) {
      __sb.Append(", MadeDate: ");
      __sb.Append(MadeDate);
    }
    if (Version != null) {
      __sb.Append(", Version: ");
      __sb.Append(Version);
    }
    if (SerialNo != null) {
      __sb.Append(", SerialNo: ");
      __sb.Append(SerialNo);
    }
    if (Mac != null) {
      __sb.Append(", Mac: ");
      __sb.Append(Mac);
    }
    if (Remark != null) {
      __sb.Append(", Remark: ");
      __sb.Append(Remark);
    }
    if (ExtBin != null) {
      __sb.Append(", ExtBin: ");
      __sb.Append(ExtBin);
    }
    if (ExtTxt != null) {
      __sb.Append(", ExtTxt: ");
      __sb.Append(ExtTxt);
    }
    if (CreateTime != null) {
      __sb.Append(", CreateTime: ");
      __sb.Append(CreateTime);
    }
    if (UpdateTime != null) {
      __sb.Append(", UpdateTime: ");
      __sb.Append(UpdateTime);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

