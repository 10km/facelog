/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class IFaceLog {
  public interface ISync {
    FeatureBean addFeature(byte[] feature, string featureVersion, int personId, List<FaceBean> faecBeans, Token token);
    FeatureBean addFeatureMulti(byte[] feature, string featureVersion, int personId, List<byte[]> photos, List<FaceBean> faces, Token token);
    FeatureBean addFeatureWithImage(byte[] feature, string featureVersion, int personId, bool asIdPhotoIfAbsent, byte[] featurePhoto, FaceBean faceBean, Token token);
    ImageBean addImage(byte[] imageData, int deviceId, FaceBean faceBean, int personId, Token token);
    void addLog(LogBean logBean, Token token);
    void addLogFull(LogBean logBean, FaceBean faceBean, byte[] featureImage, Token token);
    void addLogs(List<LogBean> beans, Token token);
    void addLogsFull(List<LogBean> logBeans, List<FaceBean> faceBeans, List<byte[]> featureImages, Token token);
    string applyAckChannel(Token token);
    string applyAckChannelWithDuration(int duration, Token token);
    int applyCmdSn(Token token);
    Token applyPersonToken(int personId, string password, bool isMd5);
    Token applyRootToken(string password, bool isMd5);
    Token applyUserToken(int userid, string password, bool isMd5);
    void bindBorder(int personGroupId, int deviceGroupId, Token token);
    List<int> childListForDeviceGroup(int deviceGroupId);
    List<int> childListForPersonGroup(int personGroupId);
    int countDeviceByWhere(string @where);
    int countDeviceGroupByWhere(string @where);
    int countLogByWhere(string @where);
    int countLogLightByVerifyTime(long timestamp);
    int countLogLightByVerifyTimeTimestr(string timestamp);
    int countLogLightByWhere(string @where);
    int countPersonByWhere(string @where);
    int countPersonGroupByWhere(string @where);
    int deleteAllFeaturesByPersonId(int personId, bool deleteImage, Token token);
    int deleteDeviceGroup(int deviceGroupId, Token token);
    List<string> deleteFeature(string featureMd5, bool deleteImage, Token token);
    int deleteGroupPermitOnDeviceGroup(int deviceGroupId, Token token);
    int deleteImage(string imageMd5, Token token);
    int deletePermitById(int deviceGroupId, int personGroupId, Token token);
    int deletePerson(int personId, Token token);
    int deletePersonByPapersNum(string papersNum, Token token);
    int deletePersonGroup(int personGroupId, Token token);
    int deletePersonGroupPermit(int personGroupId, Token token);
    int deletePersons(List<int> personIdList, Token token);
    int deletePersonsByPapersNum(List<string> papersNumlist, Token token);
    void disablePerson(int personId, int moveToGroupId, bool deletePhoto, bool deleteFeature, bool deleteLog, Token token);
    void disablePersonList(List<int> personIdList, Token token);
    bool existsDevice(int id);
    bool existsFeature(string md5);
    bool existsImage(string md5);
    bool existsPerson(int persionId);
    DeviceBean getDevice(int deviceId);
    DeviceGroupBean getDeviceGroup(int deviceGroupId);
    List<DeviceGroupBean> getDeviceGroups(List<int> groupIdList);
    List<int> getDeviceGroupsBelongs(int deviceId);
    List<int> getDeviceGroupsPermit(int personGroupId);
    List<int> getDeviceGroupsPermittedBy(int personGroupId);
    int getDeviceIdOfFeature(string featureMd5);
    List<DeviceBean> getDevices(List<int> idList);
    List<int> getDevicesOfGroup(int deviceGroupId);
    FaceBean getFace(int faceId);
    FeatureBean getFeature(string md5);
    byte[] getFeatureBytes(string md5);
    List<FeatureBean> getFeatures(List<string> md5);
    List<string> getFeaturesByPersonId(int personId);
    List<string> getFeaturesByPersonIdAndSdkVersion(int personId, string sdkVersion);
    List<string> getFeaturesOfPerson(int personId);
    List<FeatureBean> getFeaturesPermittedOnDevice(int deviceId, bool ignoreSchedule, string sdkVersion, List<string> excludeFeatureIds);
    PermitBean getGroupPermit(int deviceId, int personGroupId);
    PermitBean getGroupPermitOnDeviceGroup(int deviceGroupId, int personGroupId);
    List<PermitBean> getGroupPermits(int deviceId, List<int> personGroupIdList);
    ImageBean getImage(string imageMD5);
    byte[] getImageBytes(string imageMD5);
    List<string> getImagesAssociatedByFeature(string featureMd5);
    List<LogBean> getLogBeansByPersonId(int personId);
    PersonBean getPerson(int personId);
    PersonBean getPersonByPapersNum(string papersNum);
    PersonGroupBean getPersonGroup(int personGroupId);
    List<PersonGroupBean> getPersonGroups(List<int> groupIdList);
    List<int> getPersonGroupsBelongs(int personId);
    List<int> getPersonGroupsPermittedBy(int deviceGroupId);
    PermitBean getPersonPermit(int deviceId, int personId);
    List<PermitBean> getPersonPermits(int deviceId, List<int> personIdList);
    List<PersonBean> getPersons(List<int> idList);
    List<int> getPersonsOfGroup(int personGroupId);
    string getProperty(string key, Token token);
    Dictionary<MQParam, string> getRedisParameters(Token token);
    Dictionary<string, string> getServiceConfig(Token token);
    List<int> getSubDeviceGroup(int deviceGroupId);
    List<int> getSubPersonGroup(int personGroupId);
    bool isDisable(int personId);
    bool isLocal();
    bool isValidAckChannel(string ackChannel);
    bool isValidCmdSn(int cmdSn);
    bool isValidDeviceToken(Token token);
    bool isValidPassword(string userId, string password, bool isMd5);
    bool isValidPersonToken(Token token);
    bool isValidRootToken(Token token);
    bool isValidToken(Token token);
    bool isValidUserToken(Token token);
    List<int> listOfParentForDeviceGroup(int deviceGroupId);
    List<int> listOfParentForPersonGroup(int personGroupId);
    List<int> loadAllPerson();
    List<DeviceBean> loadDeviceByWhere(string @where, int startRow, int numRows);
    List<int> loadDeviceGroupByWhere(string @where, int startRow, int numRows);
    List<int> loadDeviceGroupIdByWhere(string @where);
    List<int> loadDeviceIdByWhere(string @where);
    List<string> loadFeatureMd5ByUpdate(long timestamp);
    List<string> loadFeatureMd5ByUpdateTimeStr(string timestamp);
    List<LogBean> loadLogByWhere(string @where, int startRow, int numRows);
    List<LogLightBean> loadLogLightByVerifyTime(long timestamp, int startRow, int numRows);
    List<LogLightBean> loadLogLightByVerifyTimeTimestr(string timestamp, int startRow, int numRows);
    List<LogLightBean> loadLogLightByWhere(string @where, int startRow, int numRows);
    List<PermitBean> loadPermitByUpdate(long timestamp);
    List<PermitBean> loadPermitByUpdateTimestr(string timestamp);
    List<PersonBean> loadPersonByWhere(string @where, int startRow, int numRows);
    List<int> loadPersonGroupByWhere(string @where, int startRow, int numRows);
    List<int> loadPersonGroupIdByWhere(string @where);
    List<int> loadPersonIdByUpdateTime(long timestamp);
    List<int> loadPersonIdByUpdateTimeTimeStr(string timestamp);
    List<int> loadPersonIdByWhere(string @where);
    List<int> loadUpdatedPersons(long timestamp);
    List<int> loadUpdatedPersonsTimestr(string timestamp);
    void offline(Token token);
    Token online(DeviceBean device);
    DeviceBean registerDevice(DeviceBean newDevice);
    void releasePersonToken(Token token);
    void releaseRootToken(Token token);
    void releaseUserToken(Token token);
    void replaceFeature(int personId, string featureMd5, bool deleteOldFeatureImage, Token token);
    int rootGroupOfDevice(int deviceId);
    int rootGroupOfPerson(int personId);
    int runCmd(List<int> target, bool @group, string cmdpath, string jsonArgs, string ackChannel, Token token);
    bool runTask(string taskQueue, string cmdpath, string jsonArgs, string ackChannel, Token token);
    DeviceBean saveDevice(DeviceBean deviceBean, Token token);
    DeviceGroupBean saveDeviceGroup(DeviceGroupBean deviceGroupBean, Token token);
    PermitBean savePermit(PermitBean permitBean, Token token);
    PermitBean savePermitWithSchedule(int deviceGroupId, int personGroupId, string schedule, Token token);
    PersonBean savePerson(PersonBean personBean, Token token);
    PersonBean savePersonFull(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, byte[] featureImage, FaceBean featureFaceBean, Token token);
    PersonGroupBean savePersonGroup(PersonGroupBean personGroupBean, Token token);
    PersonBean savePersonWithPhoto(PersonBean personBean, byte[] idPhoto, Token token);
    PersonBean savePersonWithPhotoAndFeature(PersonBean personBean, byte[] idPhoto, FeatureBean featureBean, Token token);
    PersonBean savePersonWithPhotoAndFeatureMultiFaces(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<FaceBean> faceBeans, Token token);
    PersonBean savePersonWithPhotoAndFeatureMultiImage(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<byte[]> photos, List<FaceBean> faces, Token token);
    PersonBean savePersonWithPhotoAndFeatureSaved(PersonBean personBean, string idPhotoMd5, string featureMd5, Token token);
    void savePersons(List<PersonBean> persons, Token token);
    int savePersonsWithPhoto(List<byte[]> photos, List<PersonBean> persons, Token token);
    void saveServiceConfig(Token token);
    string sdkTaskQueueOf(string task, string sdkVersion, Token token);
    void setPersonExpiryDate(int personId, long expiryDate, Token token);
    void setPersonExpiryDateList(List<int> personIdList, long expiryDate, Token token);
    void setPersonExpiryDateTimeStr(int personId, string expiryDate, Token token);
    void setProperties(Dictionary<string, string> config, Token token);
    void setProperty(string key, string @value, Token token);
    string taskQueueOf(string task, Token token);
    void unbindBorder(int personGroupId, int deviceGroupId, Token token);
    void unregisterDevice(Token token);
    DeviceBean updateDevice(DeviceBean deviceBean, Token token);
    string version();
    Dictionary<string, string> versionInfo();
  }

  public interface IAsync {
    Task<FeatureBean> addFeatureAsync(byte[] feature, string featureVersion, int personId, List<FaceBean> faecBeans, Token token);
    Task<FeatureBean> addFeatureMultiAsync(byte[] feature, string featureVersion, int personId, List<byte[]> photos, List<FaceBean> faces, Token token);
    Task<FeatureBean> addFeatureWithImageAsync(byte[] feature, string featureVersion, int personId, bool asIdPhotoIfAbsent, byte[] featurePhoto, FaceBean faceBean, Token token);
    Task<ImageBean> addImageAsync(byte[] imageData, int deviceId, FaceBean faceBean, int personId, Token token);
    Task addLogAsync(LogBean logBean, Token token);
    Task addLogFullAsync(LogBean logBean, FaceBean faceBean, byte[] featureImage, Token token);
    Task addLogsAsync(List<LogBean> beans, Token token);
    Task addLogsFullAsync(List<LogBean> logBeans, List<FaceBean> faceBeans, List<byte[]> featureImages, Token token);
    Task<string> applyAckChannelAsync(Token token);
    Task<string> applyAckChannelWithDurationAsync(int duration, Token token);
    Task<int> applyCmdSnAsync(Token token);
    Task<Token> applyPersonTokenAsync(int personId, string password, bool isMd5);
    Task<Token> applyRootTokenAsync(string password, bool isMd5);
    Task<Token> applyUserTokenAsync(int userid, string password, bool isMd5);
    Task bindBorderAsync(int personGroupId, int deviceGroupId, Token token);
    Task<List<int>> childListForDeviceGroupAsync(int deviceGroupId);
    Task<List<int>> childListForPersonGroupAsync(int personGroupId);
    Task<int> countDeviceByWhereAsync(string @where);
    Task<int> countDeviceGroupByWhereAsync(string @where);
    Task<int> countLogByWhereAsync(string @where);
    Task<int> countLogLightByVerifyTimeAsync(long timestamp);
    Task<int> countLogLightByVerifyTimeTimestrAsync(string timestamp);
    Task<int> countLogLightByWhereAsync(string @where);
    Task<int> countPersonByWhereAsync(string @where);
    Task<int> countPersonGroupByWhereAsync(string @where);
    Task<int> deleteAllFeaturesByPersonIdAsync(int personId, bool deleteImage, Token token);
    Task<int> deleteDeviceGroupAsync(int deviceGroupId, Token token);
    Task<List<string>> deleteFeatureAsync(string featureMd5, bool deleteImage, Token token);
    Task<int> deleteGroupPermitOnDeviceGroupAsync(int deviceGroupId, Token token);
    Task<int> deleteImageAsync(string imageMd5, Token token);
    Task<int> deletePermitByIdAsync(int deviceGroupId, int personGroupId, Token token);
    Task<int> deletePersonAsync(int personId, Token token);
    Task<int> deletePersonByPapersNumAsync(string papersNum, Token token);
    Task<int> deletePersonGroupAsync(int personGroupId, Token token);
    Task<int> deletePersonGroupPermitAsync(int personGroupId, Token token);
    Task<int> deletePersonsAsync(List<int> personIdList, Token token);
    Task<int> deletePersonsByPapersNumAsync(List<string> papersNumlist, Token token);
    Task disablePersonAsync(int personId, int moveToGroupId, bool deletePhoto, bool deleteFeature, bool deleteLog, Token token);
    Task disablePersonListAsync(List<int> personIdList, Token token);
    Task<bool> existsDeviceAsync(int id);
    Task<bool> existsFeatureAsync(string md5);
    Task<bool> existsImageAsync(string md5);
    Task<bool> existsPersonAsync(int persionId);
    Task<DeviceBean> getDeviceAsync(int deviceId);
    Task<DeviceGroupBean> getDeviceGroupAsync(int deviceGroupId);
    Task<List<DeviceGroupBean>> getDeviceGroupsAsync(List<int> groupIdList);
    Task<List<int>> getDeviceGroupsBelongsAsync(int deviceId);
    Task<List<int>> getDeviceGroupsPermitAsync(int personGroupId);
    Task<List<int>> getDeviceGroupsPermittedByAsync(int personGroupId);
    Task<int> getDeviceIdOfFeatureAsync(string featureMd5);
    Task<List<DeviceBean>> getDevicesAsync(List<int> idList);
    Task<List<int>> getDevicesOfGroupAsync(int deviceGroupId);
    Task<FaceBean> getFaceAsync(int faceId);
    Task<FeatureBean> getFeatureAsync(string md5);
    Task<byte[]> getFeatureBytesAsync(string md5);
    Task<List<FeatureBean>> getFeaturesAsync(List<string> md5);
    Task<List<string>> getFeaturesByPersonIdAsync(int personId);
    Task<List<string>> getFeaturesByPersonIdAndSdkVersionAsync(int personId, string sdkVersion);
    Task<List<string>> getFeaturesOfPersonAsync(int personId);
    Task<List<FeatureBean>> getFeaturesPermittedOnDeviceAsync(int deviceId, bool ignoreSchedule, string sdkVersion, List<string> excludeFeatureIds);
    Task<PermitBean> getGroupPermitAsync(int deviceId, int personGroupId);
    Task<PermitBean> getGroupPermitOnDeviceGroupAsync(int deviceGroupId, int personGroupId);
    Task<List<PermitBean>> getGroupPermitsAsync(int deviceId, List<int> personGroupIdList);
    Task<ImageBean> getImageAsync(string imageMD5);
    Task<byte[]> getImageBytesAsync(string imageMD5);
    Task<List<string>> getImagesAssociatedByFeatureAsync(string featureMd5);
    Task<List<LogBean>> getLogBeansByPersonIdAsync(int personId);
    Task<PersonBean> getPersonAsync(int personId);
    Task<PersonBean> getPersonByPapersNumAsync(string papersNum);
    Task<PersonGroupBean> getPersonGroupAsync(int personGroupId);
    Task<List<PersonGroupBean>> getPersonGroupsAsync(List<int> groupIdList);
    Task<List<int>> getPersonGroupsBelongsAsync(int personId);
    Task<List<int>> getPersonGroupsPermittedByAsync(int deviceGroupId);
    Task<PermitBean> getPersonPermitAsync(int deviceId, int personId);
    Task<List<PermitBean>> getPersonPermitsAsync(int deviceId, List<int> personIdList);
    Task<List<PersonBean>> getPersonsAsync(List<int> idList);
    Task<List<int>> getPersonsOfGroupAsync(int personGroupId);
    Task<string> getPropertyAsync(string key, Token token);
    Task<Dictionary<MQParam, string>> getRedisParametersAsync(Token token);
    Task<Dictionary<string, string>> getServiceConfigAsync(Token token);
    Task<List<int>> getSubDeviceGroupAsync(int deviceGroupId);
    Task<List<int>> getSubPersonGroupAsync(int personGroupId);
    Task<bool> isDisableAsync(int personId);
    Task<bool> isLocalAsync();
    Task<bool> isValidAckChannelAsync(string ackChannel);
    Task<bool> isValidCmdSnAsync(int cmdSn);
    Task<bool> isValidDeviceTokenAsync(Token token);
    Task<bool> isValidPasswordAsync(string userId, string password, bool isMd5);
    Task<bool> isValidPersonTokenAsync(Token token);
    Task<bool> isValidRootTokenAsync(Token token);
    Task<bool> isValidTokenAsync(Token token);
    Task<bool> isValidUserTokenAsync(Token token);
    Task<List<int>> listOfParentForDeviceGroupAsync(int deviceGroupId);
    Task<List<int>> listOfParentForPersonGroupAsync(int personGroupId);
    Task<List<int>> loadAllPersonAsync();
    Task<List<DeviceBean>> loadDeviceByWhereAsync(string @where, int startRow, int numRows);
    Task<List<int>> loadDeviceGroupByWhereAsync(string @where, int startRow, int numRows);
    Task<List<int>> loadDeviceGroupIdByWhereAsync(string @where);
    Task<List<int>> loadDeviceIdByWhereAsync(string @where);
    Task<List<string>> loadFeatureMd5ByUpdateAsync(long timestamp);
    Task<List<string>> loadFeatureMd5ByUpdateTimeStrAsync(string timestamp);
    Task<List<LogBean>> loadLogByWhereAsync(string @where, int startRow, int numRows);
    Task<List<LogLightBean>> loadLogLightByVerifyTimeAsync(long timestamp, int startRow, int numRows);
    Task<List<LogLightBean>> loadLogLightByVerifyTimeTimestrAsync(string timestamp, int startRow, int numRows);
    Task<List<LogLightBean>> loadLogLightByWhereAsync(string @where, int startRow, int numRows);
    Task<List<PermitBean>> loadPermitByUpdateAsync(long timestamp);
    Task<List<PermitBean>> loadPermitByUpdateTimestrAsync(string timestamp);
    Task<List<PersonBean>> loadPersonByWhereAsync(string @where, int startRow, int numRows);
    Task<List<int>> loadPersonGroupByWhereAsync(string @where, int startRow, int numRows);
    Task<List<int>> loadPersonGroupIdByWhereAsync(string @where);
    Task<List<int>> loadPersonIdByUpdateTimeAsync(long timestamp);
    Task<List<int>> loadPersonIdByUpdateTimeTimeStrAsync(string timestamp);
    Task<List<int>> loadPersonIdByWhereAsync(string @where);
    Task<List<int>> loadUpdatedPersonsAsync(long timestamp);
    Task<List<int>> loadUpdatedPersonsTimestrAsync(string timestamp);
    Task offlineAsync(Token token);
    Task<Token> onlineAsync(DeviceBean device);
    Task<DeviceBean> registerDeviceAsync(DeviceBean newDevice);
    Task releasePersonTokenAsync(Token token);
    Task releaseRootTokenAsync(Token token);
    Task releaseUserTokenAsync(Token token);
    Task replaceFeatureAsync(int personId, string featureMd5, bool deleteOldFeatureImage, Token token);
    Task<int> rootGroupOfDeviceAsync(int deviceId);
    Task<int> rootGroupOfPersonAsync(int personId);
    Task<int> runCmdAsync(List<int> target, bool @group, string cmdpath, string jsonArgs, string ackChannel, Token token);
    Task<bool> runTaskAsync(string taskQueue, string cmdpath, string jsonArgs, string ackChannel, Token token);
    Task<DeviceBean> saveDeviceAsync(DeviceBean deviceBean, Token token);
    Task<DeviceGroupBean> saveDeviceGroupAsync(DeviceGroupBean deviceGroupBean, Token token);
    Task<PermitBean> savePermitAsync(PermitBean permitBean, Token token);
    Task<PermitBean> savePermitWithScheduleAsync(int deviceGroupId, int personGroupId, string schedule, Token token);
    Task<PersonBean> savePersonAsync(PersonBean personBean, Token token);
    Task<PersonBean> savePersonFullAsync(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, byte[] featureImage, FaceBean featureFaceBean, Token token);
    Task<PersonGroupBean> savePersonGroupAsync(PersonGroupBean personGroupBean, Token token);
    Task<PersonBean> savePersonWithPhotoAsync(PersonBean personBean, byte[] idPhoto, Token token);
    Task<PersonBean> savePersonWithPhotoAndFeatureAsync(PersonBean personBean, byte[] idPhoto, FeatureBean featureBean, Token token);
    Task<PersonBean> savePersonWithPhotoAndFeatureMultiFacesAsync(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<FaceBean> faceBeans, Token token);
    Task<PersonBean> savePersonWithPhotoAndFeatureMultiImageAsync(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<byte[]> photos, List<FaceBean> faces, Token token);
    Task<PersonBean> savePersonWithPhotoAndFeatureSavedAsync(PersonBean personBean, string idPhotoMd5, string featureMd5, Token token);
    Task savePersonsAsync(List<PersonBean> persons, Token token);
    Task<int> savePersonsWithPhotoAsync(List<byte[]> photos, List<PersonBean> persons, Token token);
    Task saveServiceConfigAsync(Token token);
    Task<string> sdkTaskQueueOfAsync(string task, string sdkVersion, Token token);
    Task setPersonExpiryDateAsync(int personId, long expiryDate, Token token);
    Task setPersonExpiryDateListAsync(List<int> personIdList, long expiryDate, Token token);
    Task setPersonExpiryDateTimeStrAsync(int personId, string expiryDate, Token token);
    Task setPropertiesAsync(Dictionary<string, string> config, Token token);
    Task setPropertyAsync(string key, string @value, Token token);
    Task<string> taskQueueOfAsync(string task, Token token);
    Task unbindBorderAsync(int personGroupId, int deviceGroupId, Token token);
    Task unregisterDeviceAsync(Token token);
    Task<DeviceBean> updateDeviceAsync(DeviceBean deviceBean, Token token);
    Task<string> versionAsync();
    Task<Dictionary<string, string>> versionInfoAsync();
  }

  public interface Iface : ISync, IAsync {
    IAsyncResult Begin_addFeature(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, List<FaceBean> faecBeans, Token token);
    FeatureBean End_addFeature(IAsyncResult asyncResult);
    IAsyncResult Begin_addFeatureMulti(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, List<byte[]> photos, List<FaceBean> faces, Token token);
    FeatureBean End_addFeatureMulti(IAsyncResult asyncResult);
    IAsyncResult Begin_addFeatureWithImage(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, bool asIdPhotoIfAbsent, byte[] featurePhoto, FaceBean faceBean, Token token);
    FeatureBean End_addFeatureWithImage(IAsyncResult asyncResult);
    IAsyncResult Begin_addImage(AsyncCallback callback, object state, byte[] imageData, int deviceId, FaceBean faceBean, int personId, Token token);
    ImageBean End_addImage(IAsyncResult asyncResult);
    IAsyncResult Begin_addLog(AsyncCallback callback, object state, LogBean logBean, Token token);
    void End_addLog(IAsyncResult asyncResult);
    IAsyncResult Begin_addLogFull(AsyncCallback callback, object state, LogBean logBean, FaceBean faceBean, byte[] featureImage, Token token);
    void End_addLogFull(IAsyncResult asyncResult);
    IAsyncResult Begin_addLogs(AsyncCallback callback, object state, List<LogBean> beans, Token token);
    void End_addLogs(IAsyncResult asyncResult);
    IAsyncResult Begin_addLogsFull(AsyncCallback callback, object state, List<LogBean> logBeans, List<FaceBean> faceBeans, List<byte[]> featureImages, Token token);
    void End_addLogsFull(IAsyncResult asyncResult);
    IAsyncResult Begin_applyAckChannel(AsyncCallback callback, object state, Token token);
    string End_applyAckChannel(IAsyncResult asyncResult);
    IAsyncResult Begin_applyAckChannelWithDuration(AsyncCallback callback, object state, int duration, Token token);
    string End_applyAckChannelWithDuration(IAsyncResult asyncResult);
    IAsyncResult Begin_applyCmdSn(AsyncCallback callback, object state, Token token);
    int End_applyCmdSn(IAsyncResult asyncResult);
    IAsyncResult Begin_applyPersonToken(AsyncCallback callback, object state, int personId, string password, bool isMd5);
    Token End_applyPersonToken(IAsyncResult asyncResult);
    IAsyncResult Begin_applyRootToken(AsyncCallback callback, object state, string password, bool isMd5);
    Token End_applyRootToken(IAsyncResult asyncResult);
    IAsyncResult Begin_applyUserToken(AsyncCallback callback, object state, int userid, string password, bool isMd5);
    Token End_applyUserToken(IAsyncResult asyncResult);
    IAsyncResult Begin_bindBorder(AsyncCallback callback, object state, int personGroupId, int deviceGroupId, Token token);
    void End_bindBorder(IAsyncResult asyncResult);
    IAsyncResult Begin_childListForDeviceGroup(AsyncCallback callback, object state, int deviceGroupId);
    List<int> End_childListForDeviceGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_childListForPersonGroup(AsyncCallback callback, object state, int personGroupId);
    List<int> End_childListForPersonGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_countDeviceByWhere(AsyncCallback callback, object state, string @where);
    int End_countDeviceByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_countDeviceGroupByWhere(AsyncCallback callback, object state, string @where);
    int End_countDeviceGroupByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_countLogByWhere(AsyncCallback callback, object state, string @where);
    int End_countLogByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_countLogLightByVerifyTime(AsyncCallback callback, object state, long timestamp);
    int End_countLogLightByVerifyTime(IAsyncResult asyncResult);
    IAsyncResult Begin_countLogLightByVerifyTimeTimestr(AsyncCallback callback, object state, string timestamp);
    int End_countLogLightByVerifyTimeTimestr(IAsyncResult asyncResult);
    IAsyncResult Begin_countLogLightByWhere(AsyncCallback callback, object state, string @where);
    int End_countLogLightByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_countPersonByWhere(AsyncCallback callback, object state, string @where);
    int End_countPersonByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_countPersonGroupByWhere(AsyncCallback callback, object state, string @where);
    int End_countPersonGroupByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_deleteAllFeaturesByPersonId(AsyncCallback callback, object state, int personId, bool deleteImage, Token token);
    int End_deleteAllFeaturesByPersonId(IAsyncResult asyncResult);
    IAsyncResult Begin_deleteDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, Token token);
    int End_deleteDeviceGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_deleteFeature(AsyncCallback callback, object state, string featureMd5, bool deleteImage, Token token);
    List<string> End_deleteFeature(IAsyncResult asyncResult);
    IAsyncResult Begin_deleteGroupPermitOnDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, Token token);
    int End_deleteGroupPermitOnDeviceGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_deleteImage(AsyncCallback callback, object state, string imageMd5, Token token);
    int End_deleteImage(IAsyncResult asyncResult);
    IAsyncResult Begin_deletePermitById(AsyncCallback callback, object state, int deviceGroupId, int personGroupId, Token token);
    int End_deletePermitById(IAsyncResult asyncResult);
    IAsyncResult Begin_deletePerson(AsyncCallback callback, object state, int personId, Token token);
    int End_deletePerson(IAsyncResult asyncResult);
    IAsyncResult Begin_deletePersonByPapersNum(AsyncCallback callback, object state, string papersNum, Token token);
    int End_deletePersonByPapersNum(IAsyncResult asyncResult);
    IAsyncResult Begin_deletePersonGroup(AsyncCallback callback, object state, int personGroupId, Token token);
    int End_deletePersonGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_deletePersonGroupPermit(AsyncCallback callback, object state, int personGroupId, Token token);
    int End_deletePersonGroupPermit(IAsyncResult asyncResult);
    IAsyncResult Begin_deletePersons(AsyncCallback callback, object state, List<int> personIdList, Token token);
    int End_deletePersons(IAsyncResult asyncResult);
    IAsyncResult Begin_deletePersonsByPapersNum(AsyncCallback callback, object state, List<string> papersNumlist, Token token);
    int End_deletePersonsByPapersNum(IAsyncResult asyncResult);
    IAsyncResult Begin_disablePerson(AsyncCallback callback, object state, int personId, int moveToGroupId, bool deletePhoto, bool deleteFeature, bool deleteLog, Token token);
    void End_disablePerson(IAsyncResult asyncResult);
    IAsyncResult Begin_disablePersonList(AsyncCallback callback, object state, List<int> personIdList, Token token);
    void End_disablePersonList(IAsyncResult asyncResult);
    IAsyncResult Begin_existsDevice(AsyncCallback callback, object state, int id);
    bool End_existsDevice(IAsyncResult asyncResult);
    IAsyncResult Begin_existsFeature(AsyncCallback callback, object state, string md5);
    bool End_existsFeature(IAsyncResult asyncResult);
    IAsyncResult Begin_existsImage(AsyncCallback callback, object state, string md5);
    bool End_existsImage(IAsyncResult asyncResult);
    IAsyncResult Begin_existsPerson(AsyncCallback callback, object state, int persionId);
    bool End_existsPerson(IAsyncResult asyncResult);
    IAsyncResult Begin_getDevice(AsyncCallback callback, object state, int deviceId);
    DeviceBean End_getDevice(IAsyncResult asyncResult);
    IAsyncResult Begin_getDeviceGroup(AsyncCallback callback, object state, int deviceGroupId);
    DeviceGroupBean End_getDeviceGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_getDeviceGroups(AsyncCallback callback, object state, List<int> groupIdList);
    List<DeviceGroupBean> End_getDeviceGroups(IAsyncResult asyncResult);
    IAsyncResult Begin_getDeviceGroupsBelongs(AsyncCallback callback, object state, int deviceId);
    List<int> End_getDeviceGroupsBelongs(IAsyncResult asyncResult);
    IAsyncResult Begin_getDeviceGroupsPermit(AsyncCallback callback, object state, int personGroupId);
    List<int> End_getDeviceGroupsPermit(IAsyncResult asyncResult);
    IAsyncResult Begin_getDeviceGroupsPermittedBy(AsyncCallback callback, object state, int personGroupId);
    List<int> End_getDeviceGroupsPermittedBy(IAsyncResult asyncResult);
    IAsyncResult Begin_getDeviceIdOfFeature(AsyncCallback callback, object state, string featureMd5);
    int End_getDeviceIdOfFeature(IAsyncResult asyncResult);
    IAsyncResult Begin_getDevices(AsyncCallback callback, object state, List<int> idList);
    List<DeviceBean> End_getDevices(IAsyncResult asyncResult);
    IAsyncResult Begin_getDevicesOfGroup(AsyncCallback callback, object state, int deviceGroupId);
    List<int> End_getDevicesOfGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_getFace(AsyncCallback callback, object state, int faceId);
    FaceBean End_getFace(IAsyncResult asyncResult);
    IAsyncResult Begin_getFeature(AsyncCallback callback, object state, string md5);
    FeatureBean End_getFeature(IAsyncResult asyncResult);
    IAsyncResult Begin_getFeatureBytes(AsyncCallback callback, object state, string md5);
    byte[] End_getFeatureBytes(IAsyncResult asyncResult);
    IAsyncResult Begin_getFeatures(AsyncCallback callback, object state, List<string> md5);
    List<FeatureBean> End_getFeatures(IAsyncResult asyncResult);
    IAsyncResult Begin_getFeaturesByPersonId(AsyncCallback callback, object state, int personId);
    List<string> End_getFeaturesByPersonId(IAsyncResult asyncResult);
    IAsyncResult Begin_getFeaturesByPersonIdAndSdkVersion(AsyncCallback callback, object state, int personId, string sdkVersion);
    List<string> End_getFeaturesByPersonIdAndSdkVersion(IAsyncResult asyncResult);
    IAsyncResult Begin_getFeaturesOfPerson(AsyncCallback callback, object state, int personId);
    List<string> End_getFeaturesOfPerson(IAsyncResult asyncResult);
    IAsyncResult Begin_getFeaturesPermittedOnDevice(AsyncCallback callback, object state, int deviceId, bool ignoreSchedule, string sdkVersion, List<string> excludeFeatureIds);
    List<FeatureBean> End_getFeaturesPermittedOnDevice(IAsyncResult asyncResult);
    IAsyncResult Begin_getGroupPermit(AsyncCallback callback, object state, int deviceId, int personGroupId);
    PermitBean End_getGroupPermit(IAsyncResult asyncResult);
    IAsyncResult Begin_getGroupPermitOnDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, int personGroupId);
    PermitBean End_getGroupPermitOnDeviceGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_getGroupPermits(AsyncCallback callback, object state, int deviceId, List<int> personGroupIdList);
    List<PermitBean> End_getGroupPermits(IAsyncResult asyncResult);
    IAsyncResult Begin_getImage(AsyncCallback callback, object state, string imageMD5);
    ImageBean End_getImage(IAsyncResult asyncResult);
    IAsyncResult Begin_getImageBytes(AsyncCallback callback, object state, string imageMD5);
    byte[] End_getImageBytes(IAsyncResult asyncResult);
    IAsyncResult Begin_getImagesAssociatedByFeature(AsyncCallback callback, object state, string featureMd5);
    List<string> End_getImagesAssociatedByFeature(IAsyncResult asyncResult);
    IAsyncResult Begin_getLogBeansByPersonId(AsyncCallback callback, object state, int personId);
    List<LogBean> End_getLogBeansByPersonId(IAsyncResult asyncResult);
    IAsyncResult Begin_getPerson(AsyncCallback callback, object state, int personId);
    PersonBean End_getPerson(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersonByPapersNum(AsyncCallback callback, object state, string papersNum);
    PersonBean End_getPersonByPapersNum(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersonGroup(AsyncCallback callback, object state, int personGroupId);
    PersonGroupBean End_getPersonGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersonGroups(AsyncCallback callback, object state, List<int> groupIdList);
    List<PersonGroupBean> End_getPersonGroups(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersonGroupsBelongs(AsyncCallback callback, object state, int personId);
    List<int> End_getPersonGroupsBelongs(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersonGroupsPermittedBy(AsyncCallback callback, object state, int deviceGroupId);
    List<int> End_getPersonGroupsPermittedBy(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersonPermit(AsyncCallback callback, object state, int deviceId, int personId);
    PermitBean End_getPersonPermit(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersonPermits(AsyncCallback callback, object state, int deviceId, List<int> personIdList);
    List<PermitBean> End_getPersonPermits(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersons(AsyncCallback callback, object state, List<int> idList);
    List<PersonBean> End_getPersons(IAsyncResult asyncResult);
    IAsyncResult Begin_getPersonsOfGroup(AsyncCallback callback, object state, int personGroupId);
    List<int> End_getPersonsOfGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_getProperty(AsyncCallback callback, object state, string key, Token token);
    string End_getProperty(IAsyncResult asyncResult);
    IAsyncResult Begin_getRedisParameters(AsyncCallback callback, object state, Token token);
    Dictionary<MQParam, string> End_getRedisParameters(IAsyncResult asyncResult);
    IAsyncResult Begin_getServiceConfig(AsyncCallback callback, object state, Token token);
    Dictionary<string, string> End_getServiceConfig(IAsyncResult asyncResult);
    IAsyncResult Begin_getSubDeviceGroup(AsyncCallback callback, object state, int deviceGroupId);
    List<int> End_getSubDeviceGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_getSubPersonGroup(AsyncCallback callback, object state, int personGroupId);
    List<int> End_getSubPersonGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_isDisable(AsyncCallback callback, object state, int personId);
    bool End_isDisable(IAsyncResult asyncResult);
    IAsyncResult Begin_isLocal(AsyncCallback callback, object state);
    bool End_isLocal(IAsyncResult asyncResult);
    IAsyncResult Begin_isValidAckChannel(AsyncCallback callback, object state, string ackChannel);
    bool End_isValidAckChannel(IAsyncResult asyncResult);
    IAsyncResult Begin_isValidCmdSn(AsyncCallback callback, object state, int cmdSn);
    bool End_isValidCmdSn(IAsyncResult asyncResult);
    IAsyncResult Begin_isValidDeviceToken(AsyncCallback callback, object state, Token token);
    bool End_isValidDeviceToken(IAsyncResult asyncResult);
    IAsyncResult Begin_isValidPassword(AsyncCallback callback, object state, string userId, string password, bool isMd5);
    bool End_isValidPassword(IAsyncResult asyncResult);
    IAsyncResult Begin_isValidPersonToken(AsyncCallback callback, object state, Token token);
    bool End_isValidPersonToken(IAsyncResult asyncResult);
    IAsyncResult Begin_isValidRootToken(AsyncCallback callback, object state, Token token);
    bool End_isValidRootToken(IAsyncResult asyncResult);
    IAsyncResult Begin_isValidToken(AsyncCallback callback, object state, Token token);
    bool End_isValidToken(IAsyncResult asyncResult);
    IAsyncResult Begin_isValidUserToken(AsyncCallback callback, object state, Token token);
    bool End_isValidUserToken(IAsyncResult asyncResult);
    IAsyncResult Begin_listOfParentForDeviceGroup(AsyncCallback callback, object state, int deviceGroupId);
    List<int> End_listOfParentForDeviceGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_listOfParentForPersonGroup(AsyncCallback callback, object state, int personGroupId);
    List<int> End_listOfParentForPersonGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_loadAllPerson(AsyncCallback callback, object state);
    List<int> End_loadAllPerson(IAsyncResult asyncResult);
    IAsyncResult Begin_loadDeviceByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows);
    List<DeviceBean> End_loadDeviceByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadDeviceGroupByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows);
    List<int> End_loadDeviceGroupByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadDeviceGroupIdByWhere(AsyncCallback callback, object state, string @where);
    List<int> End_loadDeviceGroupIdByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadDeviceIdByWhere(AsyncCallback callback, object state, string @where);
    List<int> End_loadDeviceIdByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadFeatureMd5ByUpdate(AsyncCallback callback, object state, long timestamp);
    List<string> End_loadFeatureMd5ByUpdate(IAsyncResult asyncResult);
    IAsyncResult Begin_loadFeatureMd5ByUpdateTimeStr(AsyncCallback callback, object state, string timestamp);
    List<string> End_loadFeatureMd5ByUpdateTimeStr(IAsyncResult asyncResult);
    IAsyncResult Begin_loadLogByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows);
    List<LogBean> End_loadLogByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadLogLightByVerifyTime(AsyncCallback callback, object state, long timestamp, int startRow, int numRows);
    List<LogLightBean> End_loadLogLightByVerifyTime(IAsyncResult asyncResult);
    IAsyncResult Begin_loadLogLightByVerifyTimeTimestr(AsyncCallback callback, object state, string timestamp, int startRow, int numRows);
    List<LogLightBean> End_loadLogLightByVerifyTimeTimestr(IAsyncResult asyncResult);
    IAsyncResult Begin_loadLogLightByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows);
    List<LogLightBean> End_loadLogLightByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadPermitByUpdate(AsyncCallback callback, object state, long timestamp);
    List<PermitBean> End_loadPermitByUpdate(IAsyncResult asyncResult);
    IAsyncResult Begin_loadPermitByUpdateTimestr(AsyncCallback callback, object state, string timestamp);
    List<PermitBean> End_loadPermitByUpdateTimestr(IAsyncResult asyncResult);
    IAsyncResult Begin_loadPersonByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows);
    List<PersonBean> End_loadPersonByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadPersonGroupByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows);
    List<int> End_loadPersonGroupByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadPersonGroupIdByWhere(AsyncCallback callback, object state, string @where);
    List<int> End_loadPersonGroupIdByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadPersonIdByUpdateTime(AsyncCallback callback, object state, long timestamp);
    List<int> End_loadPersonIdByUpdateTime(IAsyncResult asyncResult);
    IAsyncResult Begin_loadPersonIdByUpdateTimeTimeStr(AsyncCallback callback, object state, string timestamp);
    List<int> End_loadPersonIdByUpdateTimeTimeStr(IAsyncResult asyncResult);
    IAsyncResult Begin_loadPersonIdByWhere(AsyncCallback callback, object state, string @where);
    List<int> End_loadPersonIdByWhere(IAsyncResult asyncResult);
    IAsyncResult Begin_loadUpdatedPersons(AsyncCallback callback, object state, long timestamp);
    List<int> End_loadUpdatedPersons(IAsyncResult asyncResult);
    IAsyncResult Begin_loadUpdatedPersonsTimestr(AsyncCallback callback, object state, string timestamp);
    List<int> End_loadUpdatedPersonsTimestr(IAsyncResult asyncResult);
    IAsyncResult Begin_offline(AsyncCallback callback, object state, Token token);
    void End_offline(IAsyncResult asyncResult);
    IAsyncResult Begin_online(AsyncCallback callback, object state, DeviceBean device);
    Token End_online(IAsyncResult asyncResult);
    IAsyncResult Begin_registerDevice(AsyncCallback callback, object state, DeviceBean newDevice);
    DeviceBean End_registerDevice(IAsyncResult asyncResult);
    IAsyncResult Begin_releasePersonToken(AsyncCallback callback, object state, Token token);
    void End_releasePersonToken(IAsyncResult asyncResult);
    IAsyncResult Begin_releaseRootToken(AsyncCallback callback, object state, Token token);
    void End_releaseRootToken(IAsyncResult asyncResult);
    IAsyncResult Begin_releaseUserToken(AsyncCallback callback, object state, Token token);
    void End_releaseUserToken(IAsyncResult asyncResult);
    IAsyncResult Begin_replaceFeature(AsyncCallback callback, object state, int personId, string featureMd5, bool deleteOldFeatureImage, Token token);
    void End_replaceFeature(IAsyncResult asyncResult);
    IAsyncResult Begin_rootGroupOfDevice(AsyncCallback callback, object state, int deviceId);
    int End_rootGroupOfDevice(IAsyncResult asyncResult);
    IAsyncResult Begin_rootGroupOfPerson(AsyncCallback callback, object state, int personId);
    int End_rootGroupOfPerson(IAsyncResult asyncResult);
    IAsyncResult Begin_runCmd(AsyncCallback callback, object state, List<int> target, bool @group, string cmdpath, string jsonArgs, string ackChannel, Token token);
    int End_runCmd(IAsyncResult asyncResult);
    IAsyncResult Begin_runTask(AsyncCallback callback, object state, string taskQueue, string cmdpath, string jsonArgs, string ackChannel, Token token);
    bool End_runTask(IAsyncResult asyncResult);
    IAsyncResult Begin_saveDevice(AsyncCallback callback, object state, DeviceBean deviceBean, Token token);
    DeviceBean End_saveDevice(IAsyncResult asyncResult);
    IAsyncResult Begin_saveDeviceGroup(AsyncCallback callback, object state, DeviceGroupBean deviceGroupBean, Token token);
    DeviceGroupBean End_saveDeviceGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_savePermit(AsyncCallback callback, object state, PermitBean permitBean, Token token);
    PermitBean End_savePermit(IAsyncResult asyncResult);
    IAsyncResult Begin_savePermitWithSchedule(AsyncCallback callback, object state, int deviceGroupId, int personGroupId, string schedule, Token token);
    PermitBean End_savePermitWithSchedule(IAsyncResult asyncResult);
    IAsyncResult Begin_savePerson(AsyncCallback callback, object state, PersonBean personBean, Token token);
    PersonBean End_savePerson(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersonFull(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, byte[] featureImage, FaceBean featureFaceBean, Token token);
    PersonBean End_savePersonFull(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersonGroup(AsyncCallback callback, object state, PersonGroupBean personGroupBean, Token token);
    PersonGroupBean End_savePersonGroup(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersonWithPhoto(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, Token token);
    PersonBean End_savePersonWithPhoto(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersonWithPhotoAndFeature(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, FeatureBean featureBean, Token token);
    PersonBean End_savePersonWithPhotoAndFeature(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersonWithPhotoAndFeatureMultiFaces(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<FaceBean> faceBeans, Token token);
    PersonBean End_savePersonWithPhotoAndFeatureMultiFaces(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersonWithPhotoAndFeatureMultiImage(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<byte[]> photos, List<FaceBean> faces, Token token);
    PersonBean End_savePersonWithPhotoAndFeatureMultiImage(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersonWithPhotoAndFeatureSaved(AsyncCallback callback, object state, PersonBean personBean, string idPhotoMd5, string featureMd5, Token token);
    PersonBean End_savePersonWithPhotoAndFeatureSaved(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersons(AsyncCallback callback, object state, List<PersonBean> persons, Token token);
    void End_savePersons(IAsyncResult asyncResult);
    IAsyncResult Begin_savePersonsWithPhoto(AsyncCallback callback, object state, List<byte[]> photos, List<PersonBean> persons, Token token);
    int End_savePersonsWithPhoto(IAsyncResult asyncResult);
    IAsyncResult Begin_saveServiceConfig(AsyncCallback callback, object state, Token token);
    void End_saveServiceConfig(IAsyncResult asyncResult);
    IAsyncResult Begin_sdkTaskQueueOf(AsyncCallback callback, object state, string task, string sdkVersion, Token token);
    string End_sdkTaskQueueOf(IAsyncResult asyncResult);
    IAsyncResult Begin_setPersonExpiryDate(AsyncCallback callback, object state, int personId, long expiryDate, Token token);
    void End_setPersonExpiryDate(IAsyncResult asyncResult);
    IAsyncResult Begin_setPersonExpiryDateList(AsyncCallback callback, object state, List<int> personIdList, long expiryDate, Token token);
    void End_setPersonExpiryDateList(IAsyncResult asyncResult);
    IAsyncResult Begin_setPersonExpiryDateTimeStr(AsyncCallback callback, object state, int personId, string expiryDate, Token token);
    void End_setPersonExpiryDateTimeStr(IAsyncResult asyncResult);
    IAsyncResult Begin_setProperties(AsyncCallback callback, object state, Dictionary<string, string> config, Token token);
    void End_setProperties(IAsyncResult asyncResult);
    IAsyncResult Begin_setProperty(AsyncCallback callback, object state, string key, string @value, Token token);
    void End_setProperty(IAsyncResult asyncResult);
    IAsyncResult Begin_taskQueueOf(AsyncCallback callback, object state, string task, Token token);
    string End_taskQueueOf(IAsyncResult asyncResult);
    IAsyncResult Begin_unbindBorder(AsyncCallback callback, object state, int personGroupId, int deviceGroupId, Token token);
    void End_unbindBorder(IAsyncResult asyncResult);
    IAsyncResult Begin_unregisterDevice(AsyncCallback callback, object state, Token token);
    void End_unregisterDevice(IAsyncResult asyncResult);
    IAsyncResult Begin_updateDevice(AsyncCallback callback, object state, DeviceBean deviceBean, Token token);
    DeviceBean End_updateDevice(IAsyncResult asyncResult);
    IAsyncResult Begin_version(AsyncCallback callback, object state);
    string End_version(IAsyncResult asyncResult);
    IAsyncResult Begin_versionInfo(AsyncCallback callback, object state);
    Dictionary<string, string> End_versionInfo(IAsyncResult asyncResult);
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    public IAsyncResult Begin_addFeature(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, List<FaceBean> faecBeans, Token token)
    {
      return send_addFeature(callback, state, feature, featureVersion, personId, faecBeans, token);
    }

    public FeatureBean End_addFeature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addFeature();
    }

    public async Task<FeatureBean> addFeatureAsync(byte[] feature, string featureVersion, int personId, List<FaceBean> faecBeans, Token token)
    {
      FeatureBean retval;
      retval = await Task.Run(() =>
      {
        return addFeature(feature, featureVersion, personId, faecBeans, token);
      });
      return retval;
    }

    public FeatureBean addFeature(byte[] feature, string featureVersion, int personId, List<FaceBean> faecBeans, Token token)
    {
      var asyncResult = Begin_addFeature(null, null, feature, featureVersion, personId, faecBeans, token);
      return End_addFeature(asyncResult);

    }
    public IAsyncResult send_addFeature(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, List<FaceBean> faecBeans, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("addFeature", TMessageType.Call, seqid_));
      addFeature_args args = new addFeature_args();
      args.Feature = feature;
      args.FeatureVersion = featureVersion;
      args.PersonId = personId;
      args.FaecBeans = faecBeans;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public FeatureBean recv_addFeature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addFeature_result result = new addFeature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addFeature failed: unknown result");
    }

    
    public IAsyncResult Begin_addFeatureMulti(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, List<byte[]> photos, List<FaceBean> faces, Token token)
    {
      return send_addFeatureMulti(callback, state, feature, featureVersion, personId, photos, faces, token);
    }

    public FeatureBean End_addFeatureMulti(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addFeatureMulti();
    }

    public async Task<FeatureBean> addFeatureMultiAsync(byte[] feature, string featureVersion, int personId, List<byte[]> photos, List<FaceBean> faces, Token token)
    {
      FeatureBean retval;
      retval = await Task.Run(() =>
      {
        return addFeatureMulti(feature, featureVersion, personId, photos, faces, token);
      });
      return retval;
    }

    public FeatureBean addFeatureMulti(byte[] feature, string featureVersion, int personId, List<byte[]> photos, List<FaceBean> faces, Token token)
    {
      var asyncResult = Begin_addFeatureMulti(null, null, feature, featureVersion, personId, photos, faces, token);
      return End_addFeatureMulti(asyncResult);

    }
    public IAsyncResult send_addFeatureMulti(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, List<byte[]> photos, List<FaceBean> faces, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("addFeatureMulti", TMessageType.Call, seqid_));
      addFeatureMulti_args args = new addFeatureMulti_args();
      args.Feature = feature;
      args.FeatureVersion = featureVersion;
      args.PersonId = personId;
      args.Photos = photos;
      args.Faces = faces;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public FeatureBean recv_addFeatureMulti()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addFeatureMulti_result result = new addFeatureMulti_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addFeatureMulti failed: unknown result");
    }

    
    public IAsyncResult Begin_addFeatureWithImage(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, bool asIdPhotoIfAbsent, byte[] featurePhoto, FaceBean faceBean, Token token)
    {
      return send_addFeatureWithImage(callback, state, feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, token);
    }

    public FeatureBean End_addFeatureWithImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addFeatureWithImage();
    }

    public async Task<FeatureBean> addFeatureWithImageAsync(byte[] feature, string featureVersion, int personId, bool asIdPhotoIfAbsent, byte[] featurePhoto, FaceBean faceBean, Token token)
    {
      FeatureBean retval;
      retval = await Task.Run(() =>
      {
        return addFeatureWithImage(feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, token);
      });
      return retval;
    }

    public FeatureBean addFeatureWithImage(byte[] feature, string featureVersion, int personId, bool asIdPhotoIfAbsent, byte[] featurePhoto, FaceBean faceBean, Token token)
    {
      var asyncResult = Begin_addFeatureWithImage(null, null, feature, featureVersion, personId, asIdPhotoIfAbsent, featurePhoto, faceBean, token);
      return End_addFeatureWithImage(asyncResult);

    }
    public IAsyncResult send_addFeatureWithImage(AsyncCallback callback, object state, byte[] feature, string featureVersion, int personId, bool asIdPhotoIfAbsent, byte[] featurePhoto, FaceBean faceBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("addFeatureWithImage", TMessageType.Call, seqid_));
      addFeatureWithImage_args args = new addFeatureWithImage_args();
      args.Feature = feature;
      args.FeatureVersion = featureVersion;
      args.PersonId = personId;
      args.AsIdPhotoIfAbsent = asIdPhotoIfAbsent;
      args.FeaturePhoto = featurePhoto;
      args.FaceBean = faceBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public FeatureBean recv_addFeatureWithImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addFeatureWithImage_result result = new addFeatureWithImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addFeatureWithImage failed: unknown result");
    }

    
    public IAsyncResult Begin_addImage(AsyncCallback callback, object state, byte[] imageData, int deviceId, FaceBean faceBean, int personId, Token token)
    {
      return send_addImage(callback, state, imageData, deviceId, faceBean, personId, token);
    }

    public ImageBean End_addImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addImage();
    }

    public async Task<ImageBean> addImageAsync(byte[] imageData, int deviceId, FaceBean faceBean, int personId, Token token)
    {
      ImageBean retval;
      retval = await Task.Run(() =>
      {
        return addImage(imageData, deviceId, faceBean, personId, token);
      });
      return retval;
    }

    public ImageBean addImage(byte[] imageData, int deviceId, FaceBean faceBean, int personId, Token token)
    {
      var asyncResult = Begin_addImage(null, null, imageData, deviceId, faceBean, personId, token);
      return End_addImage(asyncResult);

    }
    public IAsyncResult send_addImage(AsyncCallback callback, object state, byte[] imageData, int deviceId, FaceBean faceBean, int personId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("addImage", TMessageType.Call, seqid_));
      addImage_args args = new addImage_args();
      args.ImageData = imageData;
      args.DeviceId = deviceId;
      args.FaceBean = faceBean;
      args.PersonId = personId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public ImageBean recv_addImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addImage_result result = new addImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addImage failed: unknown result");
    }

    
    public IAsyncResult Begin_addLog(AsyncCallback callback, object state, LogBean logBean, Token token)
    {
      return send_addLog(callback, state, logBean, token);
    }

    public void End_addLog(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addLog();
    }

    public async Task addLogAsync(LogBean logBean, Token token)
    {
      await Task.Run(() =>
      {
        addLog(logBean, token);
      });
    }

    public void addLog(LogBean logBean, Token token)
    {
      var asyncResult = Begin_addLog(null, null, logBean, token);
      End_addLog(asyncResult);

    }
    public IAsyncResult send_addLog(AsyncCallback callback, object state, LogBean logBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("addLog", TMessageType.Call, seqid_));
      addLog_args args = new addLog_args();
      args.LogBean = logBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_addLog()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addLog_result result = new addLog_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_addLogFull(AsyncCallback callback, object state, LogBean logBean, FaceBean faceBean, byte[] featureImage, Token token)
    {
      return send_addLogFull(callback, state, logBean, faceBean, featureImage, token);
    }

    public void End_addLogFull(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addLogFull();
    }

    public async Task addLogFullAsync(LogBean logBean, FaceBean faceBean, byte[] featureImage, Token token)
    {
      await Task.Run(() =>
      {
        addLogFull(logBean, faceBean, featureImage, token);
      });
    }

    public void addLogFull(LogBean logBean, FaceBean faceBean, byte[] featureImage, Token token)
    {
      var asyncResult = Begin_addLogFull(null, null, logBean, faceBean, featureImage, token);
      End_addLogFull(asyncResult);

    }
    public IAsyncResult send_addLogFull(AsyncCallback callback, object state, LogBean logBean, FaceBean faceBean, byte[] featureImage, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("addLogFull", TMessageType.Call, seqid_));
      addLogFull_args args = new addLogFull_args();
      args.LogBean = logBean;
      args.FaceBean = faceBean;
      args.FeatureImage = featureImage;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_addLogFull()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addLogFull_result result = new addLogFull_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_addLogs(AsyncCallback callback, object state, List<LogBean> beans, Token token)
    {
      return send_addLogs(callback, state, beans, token);
    }

    public void End_addLogs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addLogs();
    }

    public async Task addLogsAsync(List<LogBean> beans, Token token)
    {
      await Task.Run(() =>
      {
        addLogs(beans, token);
      });
    }

    public void addLogs(List<LogBean> beans, Token token)
    {
      var asyncResult = Begin_addLogs(null, null, beans, token);
      End_addLogs(asyncResult);

    }
    public IAsyncResult send_addLogs(AsyncCallback callback, object state, List<LogBean> beans, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("addLogs", TMessageType.Call, seqid_));
      addLogs_args args = new addLogs_args();
      args.Beans = beans;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_addLogs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addLogs_result result = new addLogs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_addLogsFull(AsyncCallback callback, object state, List<LogBean> logBeans, List<FaceBean> faceBeans, List<byte[]> featureImages, Token token)
    {
      return send_addLogsFull(callback, state, logBeans, faceBeans, featureImages, token);
    }

    public void End_addLogsFull(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addLogsFull();
    }

    public async Task addLogsFullAsync(List<LogBean> logBeans, List<FaceBean> faceBeans, List<byte[]> featureImages, Token token)
    {
      await Task.Run(() =>
      {
        addLogsFull(logBeans, faceBeans, featureImages, token);
      });
    }

    public void addLogsFull(List<LogBean> logBeans, List<FaceBean> faceBeans, List<byte[]> featureImages, Token token)
    {
      var asyncResult = Begin_addLogsFull(null, null, logBeans, faceBeans, featureImages, token);
      End_addLogsFull(asyncResult);

    }
    public IAsyncResult send_addLogsFull(AsyncCallback callback, object state, List<LogBean> logBeans, List<FaceBean> faceBeans, List<byte[]> featureImages, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("addLogsFull", TMessageType.Call, seqid_));
      addLogsFull_args args = new addLogsFull_args();
      args.LogBeans = logBeans;
      args.FaceBeans = faceBeans;
      args.FeatureImages = featureImages;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_addLogsFull()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addLogsFull_result result = new addLogsFull_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_applyAckChannel(AsyncCallback callback, object state, Token token)
    {
      return send_applyAckChannel(callback, state, token);
    }

    public string End_applyAckChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_applyAckChannel();
    }

    public async Task<string> applyAckChannelAsync(Token token)
    {
      string retval;
      retval = await Task.Run(() =>
      {
        return applyAckChannel(token);
      });
      return retval;
    }

    public string applyAckChannel(Token token)
    {
      var asyncResult = Begin_applyAckChannel(null, null, token);
      return End_applyAckChannel(asyncResult);

    }
    public IAsyncResult send_applyAckChannel(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("applyAckChannel", TMessageType.Call, seqid_));
      applyAckChannel_args args = new applyAckChannel_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public string recv_applyAckChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      applyAckChannel_result result = new applyAckChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "applyAckChannel failed: unknown result");
    }

    
    public IAsyncResult Begin_applyAckChannelWithDuration(AsyncCallback callback, object state, int duration, Token token)
    {
      return send_applyAckChannelWithDuration(callback, state, duration, token);
    }

    public string End_applyAckChannelWithDuration(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_applyAckChannelWithDuration();
    }

    public async Task<string> applyAckChannelWithDurationAsync(int duration, Token token)
    {
      string retval;
      retval = await Task.Run(() =>
      {
        return applyAckChannelWithDuration(duration, token);
      });
      return retval;
    }

    public string applyAckChannelWithDuration(int duration, Token token)
    {
      var asyncResult = Begin_applyAckChannelWithDuration(null, null, duration, token);
      return End_applyAckChannelWithDuration(asyncResult);

    }
    public IAsyncResult send_applyAckChannelWithDuration(AsyncCallback callback, object state, int duration, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("applyAckChannelWithDuration", TMessageType.Call, seqid_));
      applyAckChannelWithDuration_args args = new applyAckChannelWithDuration_args();
      args.Duration = duration;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public string recv_applyAckChannelWithDuration()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      applyAckChannelWithDuration_result result = new applyAckChannelWithDuration_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "applyAckChannelWithDuration failed: unknown result");
    }

    
    public IAsyncResult Begin_applyCmdSn(AsyncCallback callback, object state, Token token)
    {
      return send_applyCmdSn(callback, state, token);
    }

    public int End_applyCmdSn(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_applyCmdSn();
    }

    public async Task<int> applyCmdSnAsync(Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return applyCmdSn(token);
      });
      return retval;
    }

    public int applyCmdSn(Token token)
    {
      var asyncResult = Begin_applyCmdSn(null, null, token);
      return End_applyCmdSn(asyncResult);

    }
    public IAsyncResult send_applyCmdSn(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("applyCmdSn", TMessageType.Call, seqid_));
      applyCmdSn_args args = new applyCmdSn_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_applyCmdSn()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      applyCmdSn_result result = new applyCmdSn_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "applyCmdSn failed: unknown result");
    }

    
    public IAsyncResult Begin_applyPersonToken(AsyncCallback callback, object state, int personId, string password, bool isMd5)
    {
      return send_applyPersonToken(callback, state, personId, password, isMd5);
    }

    public Token End_applyPersonToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_applyPersonToken();
    }

    public async Task<Token> applyPersonTokenAsync(int personId, string password, bool isMd5)
    {
      Token retval;
      retval = await Task.Run(() =>
      {
        return applyPersonToken(personId, password, isMd5);
      });
      return retval;
    }

    public Token applyPersonToken(int personId, string password, bool isMd5)
    {
      var asyncResult = Begin_applyPersonToken(null, null, personId, password, isMd5);
      return End_applyPersonToken(asyncResult);

    }
    public IAsyncResult send_applyPersonToken(AsyncCallback callback, object state, int personId, string password, bool isMd5)
    {
      oprot_.WriteMessageBegin(new TMessage("applyPersonToken", TMessageType.Call, seqid_));
      applyPersonToken_args args = new applyPersonToken_args();
      args.PersonId = personId;
      args.Password = password;
      args.IsMd5 = isMd5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public Token recv_applyPersonToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      applyPersonToken_result result = new applyPersonToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "applyPersonToken failed: unknown result");
    }

    
    public IAsyncResult Begin_applyRootToken(AsyncCallback callback, object state, string password, bool isMd5)
    {
      return send_applyRootToken(callback, state, password, isMd5);
    }

    public Token End_applyRootToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_applyRootToken();
    }

    public async Task<Token> applyRootTokenAsync(string password, bool isMd5)
    {
      Token retval;
      retval = await Task.Run(() =>
      {
        return applyRootToken(password, isMd5);
      });
      return retval;
    }

    public Token applyRootToken(string password, bool isMd5)
    {
      var asyncResult = Begin_applyRootToken(null, null, password, isMd5);
      return End_applyRootToken(asyncResult);

    }
    public IAsyncResult send_applyRootToken(AsyncCallback callback, object state, string password, bool isMd5)
    {
      oprot_.WriteMessageBegin(new TMessage("applyRootToken", TMessageType.Call, seqid_));
      applyRootToken_args args = new applyRootToken_args();
      args.Password = password;
      args.IsMd5 = isMd5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public Token recv_applyRootToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      applyRootToken_result result = new applyRootToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "applyRootToken failed: unknown result");
    }

    
    public IAsyncResult Begin_applyUserToken(AsyncCallback callback, object state, int userid, string password, bool isMd5)
    {
      return send_applyUserToken(callback, state, userid, password, isMd5);
    }

    public Token End_applyUserToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_applyUserToken();
    }

    public async Task<Token> applyUserTokenAsync(int userid, string password, bool isMd5)
    {
      Token retval;
      retval = await Task.Run(() =>
      {
        return applyUserToken(userid, password, isMd5);
      });
      return retval;
    }

    public Token applyUserToken(int userid, string password, bool isMd5)
    {
      var asyncResult = Begin_applyUserToken(null, null, userid, password, isMd5);
      return End_applyUserToken(asyncResult);

    }
    public IAsyncResult send_applyUserToken(AsyncCallback callback, object state, int userid, string password, bool isMd5)
    {
      oprot_.WriteMessageBegin(new TMessage("applyUserToken", TMessageType.Call, seqid_));
      applyUserToken_args args = new applyUserToken_args();
      args.Userid = userid;
      args.Password = password;
      args.IsMd5 = isMd5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public Token recv_applyUserToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      applyUserToken_result result = new applyUserToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "applyUserToken failed: unknown result");
    }

    
    public IAsyncResult Begin_bindBorder(AsyncCallback callback, object state, int personGroupId, int deviceGroupId, Token token)
    {
      return send_bindBorder(callback, state, personGroupId, deviceGroupId, token);
    }

    public void End_bindBorder(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_bindBorder();
    }

    public async Task bindBorderAsync(int personGroupId, int deviceGroupId, Token token)
    {
      await Task.Run(() =>
      {
        bindBorder(personGroupId, deviceGroupId, token);
      });
    }

    public void bindBorder(int personGroupId, int deviceGroupId, Token token)
    {
      var asyncResult = Begin_bindBorder(null, null, personGroupId, deviceGroupId, token);
      End_bindBorder(asyncResult);

    }
    public IAsyncResult send_bindBorder(AsyncCallback callback, object state, int personGroupId, int deviceGroupId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("bindBorder", TMessageType.Call, seqid_));
      bindBorder_args args = new bindBorder_args();
      args.PersonGroupId = personGroupId;
      args.DeviceGroupId = deviceGroupId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_bindBorder()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      bindBorder_result result = new bindBorder_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_childListForDeviceGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      return send_childListForDeviceGroup(callback, state, deviceGroupId);
    }

    public List<int> End_childListForDeviceGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_childListForDeviceGroup();
    }

    public async Task<List<int>> childListForDeviceGroupAsync(int deviceGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return childListForDeviceGroup(deviceGroupId);
      });
      return retval;
    }

    public List<int> childListForDeviceGroup(int deviceGroupId)
    {
      var asyncResult = Begin_childListForDeviceGroup(null, null, deviceGroupId);
      return End_childListForDeviceGroup(asyncResult);

    }
    public IAsyncResult send_childListForDeviceGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("childListForDeviceGroup", TMessageType.Call, seqid_));
      childListForDeviceGroup_args args = new childListForDeviceGroup_args();
      args.DeviceGroupId = deviceGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_childListForDeviceGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      childListForDeviceGroup_result result = new childListForDeviceGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "childListForDeviceGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_childListForPersonGroup(AsyncCallback callback, object state, int personGroupId)
    {
      return send_childListForPersonGroup(callback, state, personGroupId);
    }

    public List<int> End_childListForPersonGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_childListForPersonGroup();
    }

    public async Task<List<int>> childListForPersonGroupAsync(int personGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return childListForPersonGroup(personGroupId);
      });
      return retval;
    }

    public List<int> childListForPersonGroup(int personGroupId)
    {
      var asyncResult = Begin_childListForPersonGroup(null, null, personGroupId);
      return End_childListForPersonGroup(asyncResult);

    }
    public IAsyncResult send_childListForPersonGroup(AsyncCallback callback, object state, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("childListForPersonGroup", TMessageType.Call, seqid_));
      childListForPersonGroup_args args = new childListForPersonGroup_args();
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_childListForPersonGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      childListForPersonGroup_result result = new childListForPersonGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "childListForPersonGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_countDeviceByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_countDeviceByWhere(callback, state, @where);
    }

    public int End_countDeviceByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_countDeviceByWhere();
    }

    public async Task<int> countDeviceByWhereAsync(string @where)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return countDeviceByWhere(where);
      });
      return retval;
    }

    public int countDeviceByWhere(string @where)
    {
      var asyncResult = Begin_countDeviceByWhere(null, null, @where);
      return End_countDeviceByWhere(asyncResult);

    }
    public IAsyncResult send_countDeviceByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("countDeviceByWhere", TMessageType.Call, seqid_));
      countDeviceByWhere_args args = new countDeviceByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_countDeviceByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      countDeviceByWhere_result result = new countDeviceByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "countDeviceByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_countDeviceGroupByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_countDeviceGroupByWhere(callback, state, @where);
    }

    public int End_countDeviceGroupByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_countDeviceGroupByWhere();
    }

    public async Task<int> countDeviceGroupByWhereAsync(string @where)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return countDeviceGroupByWhere(where);
      });
      return retval;
    }

    public int countDeviceGroupByWhere(string @where)
    {
      var asyncResult = Begin_countDeviceGroupByWhere(null, null, @where);
      return End_countDeviceGroupByWhere(asyncResult);

    }
    public IAsyncResult send_countDeviceGroupByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("countDeviceGroupByWhere", TMessageType.Call, seqid_));
      countDeviceGroupByWhere_args args = new countDeviceGroupByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_countDeviceGroupByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      countDeviceGroupByWhere_result result = new countDeviceGroupByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "countDeviceGroupByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_countLogByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_countLogByWhere(callback, state, @where);
    }

    public int End_countLogByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_countLogByWhere();
    }

    public async Task<int> countLogByWhereAsync(string @where)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return countLogByWhere(where);
      });
      return retval;
    }

    public int countLogByWhere(string @where)
    {
      var asyncResult = Begin_countLogByWhere(null, null, @where);
      return End_countLogByWhere(asyncResult);

    }
    public IAsyncResult send_countLogByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("countLogByWhere", TMessageType.Call, seqid_));
      countLogByWhere_args args = new countLogByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_countLogByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      countLogByWhere_result result = new countLogByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "countLogByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_countLogLightByVerifyTime(AsyncCallback callback, object state, long timestamp)
    {
      return send_countLogLightByVerifyTime(callback, state, timestamp);
    }

    public int End_countLogLightByVerifyTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_countLogLightByVerifyTime();
    }

    public async Task<int> countLogLightByVerifyTimeAsync(long timestamp)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return countLogLightByVerifyTime(timestamp);
      });
      return retval;
    }

    public int countLogLightByVerifyTime(long timestamp)
    {
      var asyncResult = Begin_countLogLightByVerifyTime(null, null, timestamp);
      return End_countLogLightByVerifyTime(asyncResult);

    }
    public IAsyncResult send_countLogLightByVerifyTime(AsyncCallback callback, object state, long timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("countLogLightByVerifyTime", TMessageType.Call, seqid_));
      countLogLightByVerifyTime_args args = new countLogLightByVerifyTime_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_countLogLightByVerifyTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      countLogLightByVerifyTime_result result = new countLogLightByVerifyTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "countLogLightByVerifyTime failed: unknown result");
    }

    
    public IAsyncResult Begin_countLogLightByVerifyTimeTimestr(AsyncCallback callback, object state, string timestamp)
    {
      return send_countLogLightByVerifyTimeTimestr(callback, state, timestamp);
    }

    public int End_countLogLightByVerifyTimeTimestr(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_countLogLightByVerifyTimeTimestr();
    }

    public async Task<int> countLogLightByVerifyTimeTimestrAsync(string timestamp)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return countLogLightByVerifyTimeTimestr(timestamp);
      });
      return retval;
    }

    public int countLogLightByVerifyTimeTimestr(string timestamp)
    {
      var asyncResult = Begin_countLogLightByVerifyTimeTimestr(null, null, timestamp);
      return End_countLogLightByVerifyTimeTimestr(asyncResult);

    }
    public IAsyncResult send_countLogLightByVerifyTimeTimestr(AsyncCallback callback, object state, string timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("countLogLightByVerifyTimeTimestr", TMessageType.Call, seqid_));
      countLogLightByVerifyTimeTimestr_args args = new countLogLightByVerifyTimeTimestr_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_countLogLightByVerifyTimeTimestr()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      countLogLightByVerifyTimeTimestr_result result = new countLogLightByVerifyTimeTimestr_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "countLogLightByVerifyTimeTimestr failed: unknown result");
    }

    
    public IAsyncResult Begin_countLogLightByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_countLogLightByWhere(callback, state, @where);
    }

    public int End_countLogLightByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_countLogLightByWhere();
    }

    public async Task<int> countLogLightByWhereAsync(string @where)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return countLogLightByWhere(where);
      });
      return retval;
    }

    public int countLogLightByWhere(string @where)
    {
      var asyncResult = Begin_countLogLightByWhere(null, null, @where);
      return End_countLogLightByWhere(asyncResult);

    }
    public IAsyncResult send_countLogLightByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("countLogLightByWhere", TMessageType.Call, seqid_));
      countLogLightByWhere_args args = new countLogLightByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_countLogLightByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      countLogLightByWhere_result result = new countLogLightByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "countLogLightByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_countPersonByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_countPersonByWhere(callback, state, @where);
    }

    public int End_countPersonByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_countPersonByWhere();
    }

    public async Task<int> countPersonByWhereAsync(string @where)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return countPersonByWhere(where);
      });
      return retval;
    }

    public int countPersonByWhere(string @where)
    {
      var asyncResult = Begin_countPersonByWhere(null, null, @where);
      return End_countPersonByWhere(asyncResult);

    }
    public IAsyncResult send_countPersonByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("countPersonByWhere", TMessageType.Call, seqid_));
      countPersonByWhere_args args = new countPersonByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_countPersonByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      countPersonByWhere_result result = new countPersonByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "countPersonByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_countPersonGroupByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_countPersonGroupByWhere(callback, state, @where);
    }

    public int End_countPersonGroupByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_countPersonGroupByWhere();
    }

    public async Task<int> countPersonGroupByWhereAsync(string @where)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return countPersonGroupByWhere(where);
      });
      return retval;
    }

    public int countPersonGroupByWhere(string @where)
    {
      var asyncResult = Begin_countPersonGroupByWhere(null, null, @where);
      return End_countPersonGroupByWhere(asyncResult);

    }
    public IAsyncResult send_countPersonGroupByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("countPersonGroupByWhere", TMessageType.Call, seqid_));
      countPersonGroupByWhere_args args = new countPersonGroupByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_countPersonGroupByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      countPersonGroupByWhere_result result = new countPersonGroupByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "countPersonGroupByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_deleteAllFeaturesByPersonId(AsyncCallback callback, object state, int personId, bool deleteImage, Token token)
    {
      return send_deleteAllFeaturesByPersonId(callback, state, personId, deleteImage, token);
    }

    public int End_deleteAllFeaturesByPersonId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteAllFeaturesByPersonId();
    }

    public async Task<int> deleteAllFeaturesByPersonIdAsync(int personId, bool deleteImage, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deleteAllFeaturesByPersonId(personId, deleteImage, token);
      });
      return retval;
    }

    public int deleteAllFeaturesByPersonId(int personId, bool deleteImage, Token token)
    {
      var asyncResult = Begin_deleteAllFeaturesByPersonId(null, null, personId, deleteImage, token);
      return End_deleteAllFeaturesByPersonId(asyncResult);

    }
    public IAsyncResult send_deleteAllFeaturesByPersonId(AsyncCallback callback, object state, int personId, bool deleteImage, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteAllFeaturesByPersonId", TMessageType.Call, seqid_));
      deleteAllFeaturesByPersonId_args args = new deleteAllFeaturesByPersonId_args();
      args.PersonId = personId;
      args.DeleteImage = deleteImage;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deleteAllFeaturesByPersonId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteAllFeaturesByPersonId_result result = new deleteAllFeaturesByPersonId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteAllFeaturesByPersonId failed: unknown result");
    }

    
    public IAsyncResult Begin_deleteDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, Token token)
    {
      return send_deleteDeviceGroup(callback, state, deviceGroupId, token);
    }

    public int End_deleteDeviceGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteDeviceGroup();
    }

    public async Task<int> deleteDeviceGroupAsync(int deviceGroupId, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deleteDeviceGroup(deviceGroupId, token);
      });
      return retval;
    }

    public int deleteDeviceGroup(int deviceGroupId, Token token)
    {
      var asyncResult = Begin_deleteDeviceGroup(null, null, deviceGroupId, token);
      return End_deleteDeviceGroup(asyncResult);

    }
    public IAsyncResult send_deleteDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteDeviceGroup", TMessageType.Call, seqid_));
      deleteDeviceGroup_args args = new deleteDeviceGroup_args();
      args.DeviceGroupId = deviceGroupId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deleteDeviceGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteDeviceGroup_result result = new deleteDeviceGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteDeviceGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_deleteFeature(AsyncCallback callback, object state, string featureMd5, bool deleteImage, Token token)
    {
      return send_deleteFeature(callback, state, featureMd5, deleteImage, token);
    }

    public List<string> End_deleteFeature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteFeature();
    }

    public async Task<List<string>> deleteFeatureAsync(string featureMd5, bool deleteImage, Token token)
    {
      List<string> retval;
      retval = await Task.Run(() =>
      {
        return deleteFeature(featureMd5, deleteImage, token);
      });
      return retval;
    }

    public List<string> deleteFeature(string featureMd5, bool deleteImage, Token token)
    {
      var asyncResult = Begin_deleteFeature(null, null, featureMd5, deleteImage, token);
      return End_deleteFeature(asyncResult);

    }
    public IAsyncResult send_deleteFeature(AsyncCallback callback, object state, string featureMd5, bool deleteImage, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteFeature", TMessageType.Call, seqid_));
      deleteFeature_args args = new deleteFeature_args();
      args.FeatureMd5 = featureMd5;
      args.DeleteImage = deleteImage;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<string> recv_deleteFeature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteFeature_result result = new deleteFeature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteFeature failed: unknown result");
    }

    
    public IAsyncResult Begin_deleteGroupPermitOnDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, Token token)
    {
      return send_deleteGroupPermitOnDeviceGroup(callback, state, deviceGroupId, token);
    }

    public int End_deleteGroupPermitOnDeviceGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteGroupPermitOnDeviceGroup();
    }

    public async Task<int> deleteGroupPermitOnDeviceGroupAsync(int deviceGroupId, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deleteGroupPermitOnDeviceGroup(deviceGroupId, token);
      });
      return retval;
    }

    public int deleteGroupPermitOnDeviceGroup(int deviceGroupId, Token token)
    {
      var asyncResult = Begin_deleteGroupPermitOnDeviceGroup(null, null, deviceGroupId, token);
      return End_deleteGroupPermitOnDeviceGroup(asyncResult);

    }
    public IAsyncResult send_deleteGroupPermitOnDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteGroupPermitOnDeviceGroup", TMessageType.Call, seqid_));
      deleteGroupPermitOnDeviceGroup_args args = new deleteGroupPermitOnDeviceGroup_args();
      args.DeviceGroupId = deviceGroupId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deleteGroupPermitOnDeviceGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteGroupPermitOnDeviceGroup_result result = new deleteGroupPermitOnDeviceGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteGroupPermitOnDeviceGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_deleteImage(AsyncCallback callback, object state, string imageMd5, Token token)
    {
      return send_deleteImage(callback, state, imageMd5, token);
    }

    public int End_deleteImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteImage();
    }

    public async Task<int> deleteImageAsync(string imageMd5, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deleteImage(imageMd5, token);
      });
      return retval;
    }

    public int deleteImage(string imageMd5, Token token)
    {
      var asyncResult = Begin_deleteImage(null, null, imageMd5, token);
      return End_deleteImage(asyncResult);

    }
    public IAsyncResult send_deleteImage(AsyncCallback callback, object state, string imageMd5, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteImage", TMessageType.Call, seqid_));
      deleteImage_args args = new deleteImage_args();
      args.ImageMd5 = imageMd5;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deleteImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteImage_result result = new deleteImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteImage failed: unknown result");
    }

    
    public IAsyncResult Begin_deletePermitById(AsyncCallback callback, object state, int deviceGroupId, int personGroupId, Token token)
    {
      return send_deletePermitById(callback, state, deviceGroupId, personGroupId, token);
    }

    public int End_deletePermitById(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deletePermitById();
    }

    public async Task<int> deletePermitByIdAsync(int deviceGroupId, int personGroupId, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deletePermitById(deviceGroupId, personGroupId, token);
      });
      return retval;
    }

    public int deletePermitById(int deviceGroupId, int personGroupId, Token token)
    {
      var asyncResult = Begin_deletePermitById(null, null, deviceGroupId, personGroupId, token);
      return End_deletePermitById(asyncResult);

    }
    public IAsyncResult send_deletePermitById(AsyncCallback callback, object state, int deviceGroupId, int personGroupId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deletePermitById", TMessageType.Call, seqid_));
      deletePermitById_args args = new deletePermitById_args();
      args.DeviceGroupId = deviceGroupId;
      args.PersonGroupId = personGroupId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deletePermitById()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deletePermitById_result result = new deletePermitById_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deletePermitById failed: unknown result");
    }

    
    public IAsyncResult Begin_deletePerson(AsyncCallback callback, object state, int personId, Token token)
    {
      return send_deletePerson(callback, state, personId, token);
    }

    public int End_deletePerson(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deletePerson();
    }

    public async Task<int> deletePersonAsync(int personId, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deletePerson(personId, token);
      });
      return retval;
    }

    public int deletePerson(int personId, Token token)
    {
      var asyncResult = Begin_deletePerson(null, null, personId, token);
      return End_deletePerson(asyncResult);

    }
    public IAsyncResult send_deletePerson(AsyncCallback callback, object state, int personId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deletePerson", TMessageType.Call, seqid_));
      deletePerson_args args = new deletePerson_args();
      args.PersonId = personId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deletePerson()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deletePerson_result result = new deletePerson_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deletePerson failed: unknown result");
    }

    
    public IAsyncResult Begin_deletePersonByPapersNum(AsyncCallback callback, object state, string papersNum, Token token)
    {
      return send_deletePersonByPapersNum(callback, state, papersNum, token);
    }

    public int End_deletePersonByPapersNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deletePersonByPapersNum();
    }

    public async Task<int> deletePersonByPapersNumAsync(string papersNum, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deletePersonByPapersNum(papersNum, token);
      });
      return retval;
    }

    public int deletePersonByPapersNum(string papersNum, Token token)
    {
      var asyncResult = Begin_deletePersonByPapersNum(null, null, papersNum, token);
      return End_deletePersonByPapersNum(asyncResult);

    }
    public IAsyncResult send_deletePersonByPapersNum(AsyncCallback callback, object state, string papersNum, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deletePersonByPapersNum", TMessageType.Call, seqid_));
      deletePersonByPapersNum_args args = new deletePersonByPapersNum_args();
      args.PapersNum = papersNum;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deletePersonByPapersNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deletePersonByPapersNum_result result = new deletePersonByPapersNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deletePersonByPapersNum failed: unknown result");
    }

    
    public IAsyncResult Begin_deletePersonGroup(AsyncCallback callback, object state, int personGroupId, Token token)
    {
      return send_deletePersonGroup(callback, state, personGroupId, token);
    }

    public int End_deletePersonGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deletePersonGroup();
    }

    public async Task<int> deletePersonGroupAsync(int personGroupId, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deletePersonGroup(personGroupId, token);
      });
      return retval;
    }

    public int deletePersonGroup(int personGroupId, Token token)
    {
      var asyncResult = Begin_deletePersonGroup(null, null, personGroupId, token);
      return End_deletePersonGroup(asyncResult);

    }
    public IAsyncResult send_deletePersonGroup(AsyncCallback callback, object state, int personGroupId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deletePersonGroup", TMessageType.Call, seqid_));
      deletePersonGroup_args args = new deletePersonGroup_args();
      args.PersonGroupId = personGroupId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deletePersonGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deletePersonGroup_result result = new deletePersonGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deletePersonGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_deletePersonGroupPermit(AsyncCallback callback, object state, int personGroupId, Token token)
    {
      return send_deletePersonGroupPermit(callback, state, personGroupId, token);
    }

    public int End_deletePersonGroupPermit(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deletePersonGroupPermit();
    }

    public async Task<int> deletePersonGroupPermitAsync(int personGroupId, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deletePersonGroupPermit(personGroupId, token);
      });
      return retval;
    }

    public int deletePersonGroupPermit(int personGroupId, Token token)
    {
      var asyncResult = Begin_deletePersonGroupPermit(null, null, personGroupId, token);
      return End_deletePersonGroupPermit(asyncResult);

    }
    public IAsyncResult send_deletePersonGroupPermit(AsyncCallback callback, object state, int personGroupId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deletePersonGroupPermit", TMessageType.Call, seqid_));
      deletePersonGroupPermit_args args = new deletePersonGroupPermit_args();
      args.PersonGroupId = personGroupId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deletePersonGroupPermit()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deletePersonGroupPermit_result result = new deletePersonGroupPermit_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deletePersonGroupPermit failed: unknown result");
    }

    
    public IAsyncResult Begin_deletePersons(AsyncCallback callback, object state, List<int> personIdList, Token token)
    {
      return send_deletePersons(callback, state, personIdList, token);
    }

    public int End_deletePersons(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deletePersons();
    }

    public async Task<int> deletePersonsAsync(List<int> personIdList, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deletePersons(personIdList, token);
      });
      return retval;
    }

    public int deletePersons(List<int> personIdList, Token token)
    {
      var asyncResult = Begin_deletePersons(null, null, personIdList, token);
      return End_deletePersons(asyncResult);

    }
    public IAsyncResult send_deletePersons(AsyncCallback callback, object state, List<int> personIdList, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deletePersons", TMessageType.Call, seqid_));
      deletePersons_args args = new deletePersons_args();
      args.PersonIdList = personIdList;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deletePersons()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deletePersons_result result = new deletePersons_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deletePersons failed: unknown result");
    }

    
    public IAsyncResult Begin_deletePersonsByPapersNum(AsyncCallback callback, object state, List<string> papersNumlist, Token token)
    {
      return send_deletePersonsByPapersNum(callback, state, papersNumlist, token);
    }

    public int End_deletePersonsByPapersNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deletePersonsByPapersNum();
    }

    public async Task<int> deletePersonsByPapersNumAsync(List<string> papersNumlist, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return deletePersonsByPapersNum(papersNumlist, token);
      });
      return retval;
    }

    public int deletePersonsByPapersNum(List<string> papersNumlist, Token token)
    {
      var asyncResult = Begin_deletePersonsByPapersNum(null, null, papersNumlist, token);
      return End_deletePersonsByPapersNum(asyncResult);

    }
    public IAsyncResult send_deletePersonsByPapersNum(AsyncCallback callback, object state, List<string> papersNumlist, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("deletePersonsByPapersNum", TMessageType.Call, seqid_));
      deletePersonsByPapersNum_args args = new deletePersonsByPapersNum_args();
      args.PapersNumlist = papersNumlist;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_deletePersonsByPapersNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deletePersonsByPapersNum_result result = new deletePersonsByPapersNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deletePersonsByPapersNum failed: unknown result");
    }

    
    public IAsyncResult Begin_disablePerson(AsyncCallback callback, object state, int personId, int moveToGroupId, bool deletePhoto, bool deleteFeature, bool deleteLog, Token token)
    {
      return send_disablePerson(callback, state, personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
    }

    public void End_disablePerson(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_disablePerson();
    }

    public async Task disablePersonAsync(int personId, int moveToGroupId, bool deletePhoto, bool deleteFeature, bool deleteLog, Token token)
    {
      await Task.Run(() =>
      {
        disablePerson(personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
      });
    }

    public void disablePerson(int personId, int moveToGroupId, bool deletePhoto, bool deleteFeature, bool deleteLog, Token token)
    {
      var asyncResult = Begin_disablePerson(null, null, personId, moveToGroupId, deletePhoto, deleteFeature, deleteLog, token);
      End_disablePerson(asyncResult);

    }
    public IAsyncResult send_disablePerson(AsyncCallback callback, object state, int personId, int moveToGroupId, bool deletePhoto, bool deleteFeature, bool deleteLog, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("disablePerson", TMessageType.Call, seqid_));
      disablePerson_args args = new disablePerson_args();
      args.PersonId = personId;
      args.MoveToGroupId = moveToGroupId;
      args.DeletePhoto = deletePhoto;
      args.DeleteFeature = deleteFeature;
      args.DeleteLog = deleteLog;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_disablePerson()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disablePerson_result result = new disablePerson_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_disablePersonList(AsyncCallback callback, object state, List<int> personIdList, Token token)
    {
      return send_disablePersonList(callback, state, personIdList, token);
    }

    public void End_disablePersonList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_disablePersonList();
    }

    public async Task disablePersonListAsync(List<int> personIdList, Token token)
    {
      await Task.Run(() =>
      {
        disablePersonList(personIdList, token);
      });
    }

    public void disablePersonList(List<int> personIdList, Token token)
    {
      var asyncResult = Begin_disablePersonList(null, null, personIdList, token);
      End_disablePersonList(asyncResult);

    }
    public IAsyncResult send_disablePersonList(AsyncCallback callback, object state, List<int> personIdList, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("disablePersonList", TMessageType.Call, seqid_));
      disablePersonList_args args = new disablePersonList_args();
      args.PersonIdList = personIdList;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_disablePersonList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      disablePersonList_result result = new disablePersonList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_existsDevice(AsyncCallback callback, object state, int id)
    {
      return send_existsDevice(callback, state, id);
    }

    public bool End_existsDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_existsDevice();
    }

    public async Task<bool> existsDeviceAsync(int id)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return existsDevice(id);
      });
      return retval;
    }

    public bool existsDevice(int id)
    {
      var asyncResult = Begin_existsDevice(null, null, id);
      return End_existsDevice(asyncResult);

    }
    public IAsyncResult send_existsDevice(AsyncCallback callback, object state, int id)
    {
      oprot_.WriteMessageBegin(new TMessage("existsDevice", TMessageType.Call, seqid_));
      existsDevice_args args = new existsDevice_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_existsDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      existsDevice_result result = new existsDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "existsDevice failed: unknown result");
    }

    
    public IAsyncResult Begin_existsFeature(AsyncCallback callback, object state, string md5)
    {
      return send_existsFeature(callback, state, md5);
    }

    public bool End_existsFeature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_existsFeature();
    }

    public async Task<bool> existsFeatureAsync(string md5)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return existsFeature(md5);
      });
      return retval;
    }

    public bool existsFeature(string md5)
    {
      var asyncResult = Begin_existsFeature(null, null, md5);
      return End_existsFeature(asyncResult);

    }
    public IAsyncResult send_existsFeature(AsyncCallback callback, object state, string md5)
    {
      oprot_.WriteMessageBegin(new TMessage("existsFeature", TMessageType.Call, seqid_));
      existsFeature_args args = new existsFeature_args();
      args.Md5 = md5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_existsFeature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      existsFeature_result result = new existsFeature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "existsFeature failed: unknown result");
    }

    
    public IAsyncResult Begin_existsImage(AsyncCallback callback, object state, string md5)
    {
      return send_existsImage(callback, state, md5);
    }

    public bool End_existsImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_existsImage();
    }

    public async Task<bool> existsImageAsync(string md5)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return existsImage(md5);
      });
      return retval;
    }

    public bool existsImage(string md5)
    {
      var asyncResult = Begin_existsImage(null, null, md5);
      return End_existsImage(asyncResult);

    }
    public IAsyncResult send_existsImage(AsyncCallback callback, object state, string md5)
    {
      oprot_.WriteMessageBegin(new TMessage("existsImage", TMessageType.Call, seqid_));
      existsImage_args args = new existsImage_args();
      args.Md5 = md5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_existsImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      existsImage_result result = new existsImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "existsImage failed: unknown result");
    }

    
    public IAsyncResult Begin_existsPerson(AsyncCallback callback, object state, int persionId)
    {
      return send_existsPerson(callback, state, persionId);
    }

    public bool End_existsPerson(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_existsPerson();
    }

    public async Task<bool> existsPersonAsync(int persionId)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return existsPerson(persionId);
      });
      return retval;
    }

    public bool existsPerson(int persionId)
    {
      var asyncResult = Begin_existsPerson(null, null, persionId);
      return End_existsPerson(asyncResult);

    }
    public IAsyncResult send_existsPerson(AsyncCallback callback, object state, int persionId)
    {
      oprot_.WriteMessageBegin(new TMessage("existsPerson", TMessageType.Call, seqid_));
      existsPerson_args args = new existsPerson_args();
      args.PersionId = persionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_existsPerson()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      existsPerson_result result = new existsPerson_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "existsPerson failed: unknown result");
    }

    
    public IAsyncResult Begin_getDevice(AsyncCallback callback, object state, int deviceId)
    {
      return send_getDevice(callback, state, deviceId);
    }

    public DeviceBean End_getDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDevice();
    }

    public async Task<DeviceBean> getDeviceAsync(int deviceId)
    {
      DeviceBean retval;
      retval = await Task.Run(() =>
      {
        return getDevice(deviceId);
      });
      return retval;
    }

    public DeviceBean getDevice(int deviceId)
    {
      var asyncResult = Begin_getDevice(null, null, deviceId);
      return End_getDevice(asyncResult);

    }
    public IAsyncResult send_getDevice(AsyncCallback callback, object state, int deviceId)
    {
      oprot_.WriteMessageBegin(new TMessage("getDevice", TMessageType.Call, seqid_));
      getDevice_args args = new getDevice_args();
      args.DeviceId = deviceId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public DeviceBean recv_getDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDevice_result result = new getDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDevice failed: unknown result");
    }

    
    public IAsyncResult Begin_getDeviceGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      return send_getDeviceGroup(callback, state, deviceGroupId);
    }

    public DeviceGroupBean End_getDeviceGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDeviceGroup();
    }

    public async Task<DeviceGroupBean> getDeviceGroupAsync(int deviceGroupId)
    {
      DeviceGroupBean retval;
      retval = await Task.Run(() =>
      {
        return getDeviceGroup(deviceGroupId);
      });
      return retval;
    }

    public DeviceGroupBean getDeviceGroup(int deviceGroupId)
    {
      var asyncResult = Begin_getDeviceGroup(null, null, deviceGroupId);
      return End_getDeviceGroup(asyncResult);

    }
    public IAsyncResult send_getDeviceGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviceGroup", TMessageType.Call, seqid_));
      getDeviceGroup_args args = new getDeviceGroup_args();
      args.DeviceGroupId = deviceGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public DeviceGroupBean recv_getDeviceGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDeviceGroup_result result = new getDeviceGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviceGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_getDeviceGroups(AsyncCallback callback, object state, List<int> groupIdList)
    {
      return send_getDeviceGroups(callback, state, groupIdList);
    }

    public List<DeviceGroupBean> End_getDeviceGroups(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDeviceGroups();
    }

    public async Task<List<DeviceGroupBean>> getDeviceGroupsAsync(List<int> groupIdList)
    {
      List<DeviceGroupBean> retval;
      retval = await Task.Run(() =>
      {
        return getDeviceGroups(groupIdList);
      });
      return retval;
    }

    public List<DeviceGroupBean> getDeviceGroups(List<int> groupIdList)
    {
      var asyncResult = Begin_getDeviceGroups(null, null, groupIdList);
      return End_getDeviceGroups(asyncResult);

    }
    public IAsyncResult send_getDeviceGroups(AsyncCallback callback, object state, List<int> groupIdList)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviceGroups", TMessageType.Call, seqid_));
      getDeviceGroups_args args = new getDeviceGroups_args();
      args.GroupIdList = groupIdList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<DeviceGroupBean> recv_getDeviceGroups()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDeviceGroups_result result = new getDeviceGroups_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviceGroups failed: unknown result");
    }

    
    public IAsyncResult Begin_getDeviceGroupsBelongs(AsyncCallback callback, object state, int deviceId)
    {
      return send_getDeviceGroupsBelongs(callback, state, deviceId);
    }

    public List<int> End_getDeviceGroupsBelongs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDeviceGroupsBelongs();
    }

    public async Task<List<int>> getDeviceGroupsBelongsAsync(int deviceId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getDeviceGroupsBelongs(deviceId);
      });
      return retval;
    }

    public List<int> getDeviceGroupsBelongs(int deviceId)
    {
      var asyncResult = Begin_getDeviceGroupsBelongs(null, null, deviceId);
      return End_getDeviceGroupsBelongs(asyncResult);

    }
    public IAsyncResult send_getDeviceGroupsBelongs(AsyncCallback callback, object state, int deviceId)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviceGroupsBelongs", TMessageType.Call, seqid_));
      getDeviceGroupsBelongs_args args = new getDeviceGroupsBelongs_args();
      args.DeviceId = deviceId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getDeviceGroupsBelongs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDeviceGroupsBelongs_result result = new getDeviceGroupsBelongs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviceGroupsBelongs failed: unknown result");
    }

    
    public IAsyncResult Begin_getDeviceGroupsPermit(AsyncCallback callback, object state, int personGroupId)
    {
      return send_getDeviceGroupsPermit(callback, state, personGroupId);
    }

    public List<int> End_getDeviceGroupsPermit(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDeviceGroupsPermit();
    }

    public async Task<List<int>> getDeviceGroupsPermitAsync(int personGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getDeviceGroupsPermit(personGroupId);
      });
      return retval;
    }

    public List<int> getDeviceGroupsPermit(int personGroupId)
    {
      var asyncResult = Begin_getDeviceGroupsPermit(null, null, personGroupId);
      return End_getDeviceGroupsPermit(asyncResult);

    }
    public IAsyncResult send_getDeviceGroupsPermit(AsyncCallback callback, object state, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviceGroupsPermit", TMessageType.Call, seqid_));
      getDeviceGroupsPermit_args args = new getDeviceGroupsPermit_args();
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getDeviceGroupsPermit()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDeviceGroupsPermit_result result = new getDeviceGroupsPermit_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviceGroupsPermit failed: unknown result");
    }

    
    public IAsyncResult Begin_getDeviceGroupsPermittedBy(AsyncCallback callback, object state, int personGroupId)
    {
      return send_getDeviceGroupsPermittedBy(callback, state, personGroupId);
    }

    public List<int> End_getDeviceGroupsPermittedBy(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDeviceGroupsPermittedBy();
    }

    public async Task<List<int>> getDeviceGroupsPermittedByAsync(int personGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getDeviceGroupsPermittedBy(personGroupId);
      });
      return retval;
    }

    public List<int> getDeviceGroupsPermittedBy(int personGroupId)
    {
      var asyncResult = Begin_getDeviceGroupsPermittedBy(null, null, personGroupId);
      return End_getDeviceGroupsPermittedBy(asyncResult);

    }
    public IAsyncResult send_getDeviceGroupsPermittedBy(AsyncCallback callback, object state, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviceGroupsPermittedBy", TMessageType.Call, seqid_));
      getDeviceGroupsPermittedBy_args args = new getDeviceGroupsPermittedBy_args();
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getDeviceGroupsPermittedBy()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDeviceGroupsPermittedBy_result result = new getDeviceGroupsPermittedBy_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviceGroupsPermittedBy failed: unknown result");
    }

    
    public IAsyncResult Begin_getDeviceIdOfFeature(AsyncCallback callback, object state, string featureMd5)
    {
      return send_getDeviceIdOfFeature(callback, state, featureMd5);
    }

    public int End_getDeviceIdOfFeature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDeviceIdOfFeature();
    }

    public async Task<int> getDeviceIdOfFeatureAsync(string featureMd5)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return getDeviceIdOfFeature(featureMd5);
      });
      return retval;
    }

    public int getDeviceIdOfFeature(string featureMd5)
    {
      var asyncResult = Begin_getDeviceIdOfFeature(null, null, featureMd5);
      return End_getDeviceIdOfFeature(asyncResult);

    }
    public IAsyncResult send_getDeviceIdOfFeature(AsyncCallback callback, object state, string featureMd5)
    {
      oprot_.WriteMessageBegin(new TMessage("getDeviceIdOfFeature", TMessageType.Call, seqid_));
      getDeviceIdOfFeature_args args = new getDeviceIdOfFeature_args();
      args.FeatureMd5 = featureMd5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_getDeviceIdOfFeature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDeviceIdOfFeature_result result = new getDeviceIdOfFeature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDeviceIdOfFeature failed: unknown result");
    }

    
    public IAsyncResult Begin_getDevices(AsyncCallback callback, object state, List<int> idList)
    {
      return send_getDevices(callback, state, idList);
    }

    public List<DeviceBean> End_getDevices(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDevices();
    }

    public async Task<List<DeviceBean>> getDevicesAsync(List<int> idList)
    {
      List<DeviceBean> retval;
      retval = await Task.Run(() =>
      {
        return getDevices(idList);
      });
      return retval;
    }

    public List<DeviceBean> getDevices(List<int> idList)
    {
      var asyncResult = Begin_getDevices(null, null, idList);
      return End_getDevices(asyncResult);

    }
    public IAsyncResult send_getDevices(AsyncCallback callback, object state, List<int> idList)
    {
      oprot_.WriteMessageBegin(new TMessage("getDevices", TMessageType.Call, seqid_));
      getDevices_args args = new getDevices_args();
      args.IdList = idList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<DeviceBean> recv_getDevices()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDevices_result result = new getDevices_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDevices failed: unknown result");
    }

    
    public IAsyncResult Begin_getDevicesOfGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      return send_getDevicesOfGroup(callback, state, deviceGroupId);
    }

    public List<int> End_getDevicesOfGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDevicesOfGroup();
    }

    public async Task<List<int>> getDevicesOfGroupAsync(int deviceGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getDevicesOfGroup(deviceGroupId);
      });
      return retval;
    }

    public List<int> getDevicesOfGroup(int deviceGroupId)
    {
      var asyncResult = Begin_getDevicesOfGroup(null, null, deviceGroupId);
      return End_getDevicesOfGroup(asyncResult);

    }
    public IAsyncResult send_getDevicesOfGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getDevicesOfGroup", TMessageType.Call, seqid_));
      getDevicesOfGroup_args args = new getDevicesOfGroup_args();
      args.DeviceGroupId = deviceGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getDevicesOfGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDevicesOfGroup_result result = new getDevicesOfGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDevicesOfGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_getFace(AsyncCallback callback, object state, int faceId)
    {
      return send_getFace(callback, state, faceId);
    }

    public FaceBean End_getFace(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFace();
    }

    public async Task<FaceBean> getFaceAsync(int faceId)
    {
      FaceBean retval;
      retval = await Task.Run(() =>
      {
        return getFace(faceId);
      });
      return retval;
    }

    public FaceBean getFace(int faceId)
    {
      var asyncResult = Begin_getFace(null, null, faceId);
      return End_getFace(asyncResult);

    }
    public IAsyncResult send_getFace(AsyncCallback callback, object state, int faceId)
    {
      oprot_.WriteMessageBegin(new TMessage("getFace", TMessageType.Call, seqid_));
      getFace_args args = new getFace_args();
      args.FaceId = faceId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public FaceBean recv_getFace()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFace_result result = new getFace_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFace failed: unknown result");
    }

    
    public IAsyncResult Begin_getFeature(AsyncCallback callback, object state, string md5)
    {
      return send_getFeature(callback, state, md5);
    }

    public FeatureBean End_getFeature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFeature();
    }

    public async Task<FeatureBean> getFeatureAsync(string md5)
    {
      FeatureBean retval;
      retval = await Task.Run(() =>
      {
        return getFeature(md5);
      });
      return retval;
    }

    public FeatureBean getFeature(string md5)
    {
      var asyncResult = Begin_getFeature(null, null, md5);
      return End_getFeature(asyncResult);

    }
    public IAsyncResult send_getFeature(AsyncCallback callback, object state, string md5)
    {
      oprot_.WriteMessageBegin(new TMessage("getFeature", TMessageType.Call, seqid_));
      getFeature_args args = new getFeature_args();
      args.Md5 = md5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public FeatureBean recv_getFeature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFeature_result result = new getFeature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeature failed: unknown result");
    }

    
    public IAsyncResult Begin_getFeatureBytes(AsyncCallback callback, object state, string md5)
    {
      return send_getFeatureBytes(callback, state, md5);
    }

    public byte[] End_getFeatureBytes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFeatureBytes();
    }

    public async Task<byte[]> getFeatureBytesAsync(string md5)
    {
      byte[] retval;
      retval = await Task.Run(() =>
      {
        return getFeatureBytes(md5);
      });
      return retval;
    }

    public byte[] getFeatureBytes(string md5)
    {
      var asyncResult = Begin_getFeatureBytes(null, null, md5);
      return End_getFeatureBytes(asyncResult);

    }
    public IAsyncResult send_getFeatureBytes(AsyncCallback callback, object state, string md5)
    {
      oprot_.WriteMessageBegin(new TMessage("getFeatureBytes", TMessageType.Call, seqid_));
      getFeatureBytes_args args = new getFeatureBytes_args();
      args.Md5 = md5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public byte[] recv_getFeatureBytes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFeatureBytes_result result = new getFeatureBytes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeatureBytes failed: unknown result");
    }

    
    public IAsyncResult Begin_getFeatures(AsyncCallback callback, object state, List<string> md5)
    {
      return send_getFeatures(callback, state, md5);
    }

    public List<FeatureBean> End_getFeatures(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFeatures();
    }

    public async Task<List<FeatureBean>> getFeaturesAsync(List<string> md5)
    {
      List<FeatureBean> retval;
      retval = await Task.Run(() =>
      {
        return getFeatures(md5);
      });
      return retval;
    }

    public List<FeatureBean> getFeatures(List<string> md5)
    {
      var asyncResult = Begin_getFeatures(null, null, md5);
      return End_getFeatures(asyncResult);

    }
    public IAsyncResult send_getFeatures(AsyncCallback callback, object state, List<string> md5)
    {
      oprot_.WriteMessageBegin(new TMessage("getFeatures", TMessageType.Call, seqid_));
      getFeatures_args args = new getFeatures_args();
      args.Md5 = md5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<FeatureBean> recv_getFeatures()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFeatures_result result = new getFeatures_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeatures failed: unknown result");
    }

    
    public IAsyncResult Begin_getFeaturesByPersonId(AsyncCallback callback, object state, int personId)
    {
      return send_getFeaturesByPersonId(callback, state, personId);
    }

    public List<string> End_getFeaturesByPersonId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFeaturesByPersonId();
    }

    public async Task<List<string>> getFeaturesByPersonIdAsync(int personId)
    {
      List<string> retval;
      retval = await Task.Run(() =>
      {
        return getFeaturesByPersonId(personId);
      });
      return retval;
    }

    public List<string> getFeaturesByPersonId(int personId)
    {
      var asyncResult = Begin_getFeaturesByPersonId(null, null, personId);
      return End_getFeaturesByPersonId(asyncResult);

    }
    public IAsyncResult send_getFeaturesByPersonId(AsyncCallback callback, object state, int personId)
    {
      oprot_.WriteMessageBegin(new TMessage("getFeaturesByPersonId", TMessageType.Call, seqid_));
      getFeaturesByPersonId_args args = new getFeaturesByPersonId_args();
      args.PersonId = personId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<string> recv_getFeaturesByPersonId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFeaturesByPersonId_result result = new getFeaturesByPersonId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeaturesByPersonId failed: unknown result");
    }

    
    public IAsyncResult Begin_getFeaturesByPersonIdAndSdkVersion(AsyncCallback callback, object state, int personId, string sdkVersion)
    {
      return send_getFeaturesByPersonIdAndSdkVersion(callback, state, personId, sdkVersion);
    }

    public List<string> End_getFeaturesByPersonIdAndSdkVersion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFeaturesByPersonIdAndSdkVersion();
    }

    public async Task<List<string>> getFeaturesByPersonIdAndSdkVersionAsync(int personId, string sdkVersion)
    {
      List<string> retval;
      retval = await Task.Run(() =>
      {
        return getFeaturesByPersonIdAndSdkVersion(personId, sdkVersion);
      });
      return retval;
    }

    public List<string> getFeaturesByPersonIdAndSdkVersion(int personId, string sdkVersion)
    {
      var asyncResult = Begin_getFeaturesByPersonIdAndSdkVersion(null, null, personId, sdkVersion);
      return End_getFeaturesByPersonIdAndSdkVersion(asyncResult);

    }
    public IAsyncResult send_getFeaturesByPersonIdAndSdkVersion(AsyncCallback callback, object state, int personId, string sdkVersion)
    {
      oprot_.WriteMessageBegin(new TMessage("getFeaturesByPersonIdAndSdkVersion", TMessageType.Call, seqid_));
      getFeaturesByPersonIdAndSdkVersion_args args = new getFeaturesByPersonIdAndSdkVersion_args();
      args.PersonId = personId;
      args.SdkVersion = sdkVersion;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<string> recv_getFeaturesByPersonIdAndSdkVersion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFeaturesByPersonIdAndSdkVersion_result result = new getFeaturesByPersonIdAndSdkVersion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeaturesByPersonIdAndSdkVersion failed: unknown result");
    }

    
    public IAsyncResult Begin_getFeaturesOfPerson(AsyncCallback callback, object state, int personId)
    {
      return send_getFeaturesOfPerson(callback, state, personId);
    }

    public List<string> End_getFeaturesOfPerson(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFeaturesOfPerson();
    }

    public async Task<List<string>> getFeaturesOfPersonAsync(int personId)
    {
      List<string> retval;
      retval = await Task.Run(() =>
      {
        return getFeaturesOfPerson(personId);
      });
      return retval;
    }

    public List<string> getFeaturesOfPerson(int personId)
    {
      var asyncResult = Begin_getFeaturesOfPerson(null, null, personId);
      return End_getFeaturesOfPerson(asyncResult);

    }
    public IAsyncResult send_getFeaturesOfPerson(AsyncCallback callback, object state, int personId)
    {
      oprot_.WriteMessageBegin(new TMessage("getFeaturesOfPerson", TMessageType.Call, seqid_));
      getFeaturesOfPerson_args args = new getFeaturesOfPerson_args();
      args.PersonId = personId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<string> recv_getFeaturesOfPerson()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFeaturesOfPerson_result result = new getFeaturesOfPerson_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeaturesOfPerson failed: unknown result");
    }

    
    public IAsyncResult Begin_getFeaturesPermittedOnDevice(AsyncCallback callback, object state, int deviceId, bool ignoreSchedule, string sdkVersion, List<string> excludeFeatureIds)
    {
      return send_getFeaturesPermittedOnDevice(callback, state, deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds);
    }

    public List<FeatureBean> End_getFeaturesPermittedOnDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFeaturesPermittedOnDevice();
    }

    public async Task<List<FeatureBean>> getFeaturesPermittedOnDeviceAsync(int deviceId, bool ignoreSchedule, string sdkVersion, List<string> excludeFeatureIds)
    {
      List<FeatureBean> retval;
      retval = await Task.Run(() =>
      {
        return getFeaturesPermittedOnDevice(deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds);
      });
      return retval;
    }

    public List<FeatureBean> getFeaturesPermittedOnDevice(int deviceId, bool ignoreSchedule, string sdkVersion, List<string> excludeFeatureIds)
    {
      var asyncResult = Begin_getFeaturesPermittedOnDevice(null, null, deviceId, ignoreSchedule, sdkVersion, excludeFeatureIds);
      return End_getFeaturesPermittedOnDevice(asyncResult);

    }
    public IAsyncResult send_getFeaturesPermittedOnDevice(AsyncCallback callback, object state, int deviceId, bool ignoreSchedule, string sdkVersion, List<string> excludeFeatureIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getFeaturesPermittedOnDevice", TMessageType.Call, seqid_));
      getFeaturesPermittedOnDevice_args args = new getFeaturesPermittedOnDevice_args();
      args.DeviceId = deviceId;
      args.IgnoreSchedule = ignoreSchedule;
      args.SdkVersion = sdkVersion;
      args.ExcludeFeatureIds = excludeFeatureIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<FeatureBean> recv_getFeaturesPermittedOnDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFeaturesPermittedOnDevice_result result = new getFeaturesPermittedOnDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeaturesPermittedOnDevice failed: unknown result");
    }

    
    public IAsyncResult Begin_getGroupPermit(AsyncCallback callback, object state, int deviceId, int personGroupId)
    {
      return send_getGroupPermit(callback, state, deviceId, personGroupId);
    }

    public PermitBean End_getGroupPermit(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupPermit();
    }

    public async Task<PermitBean> getGroupPermitAsync(int deviceId, int personGroupId)
    {
      PermitBean retval;
      retval = await Task.Run(() =>
      {
        return getGroupPermit(deviceId, personGroupId);
      });
      return retval;
    }

    public PermitBean getGroupPermit(int deviceId, int personGroupId)
    {
      var asyncResult = Begin_getGroupPermit(null, null, deviceId, personGroupId);
      return End_getGroupPermit(asyncResult);

    }
    public IAsyncResult send_getGroupPermit(AsyncCallback callback, object state, int deviceId, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupPermit", TMessageType.Call, seqid_));
      getGroupPermit_args args = new getGroupPermit_args();
      args.DeviceId = deviceId;
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PermitBean recv_getGroupPermit()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupPermit_result result = new getGroupPermit_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupPermit failed: unknown result");
    }

    
    public IAsyncResult Begin_getGroupPermitOnDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, int personGroupId)
    {
      return send_getGroupPermitOnDeviceGroup(callback, state, deviceGroupId, personGroupId);
    }

    public PermitBean End_getGroupPermitOnDeviceGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupPermitOnDeviceGroup();
    }

    public async Task<PermitBean> getGroupPermitOnDeviceGroupAsync(int deviceGroupId, int personGroupId)
    {
      PermitBean retval;
      retval = await Task.Run(() =>
      {
        return getGroupPermitOnDeviceGroup(deviceGroupId, personGroupId);
      });
      return retval;
    }

    public PermitBean getGroupPermitOnDeviceGroup(int deviceGroupId, int personGroupId)
    {
      var asyncResult = Begin_getGroupPermitOnDeviceGroup(null, null, deviceGroupId, personGroupId);
      return End_getGroupPermitOnDeviceGroup(asyncResult);

    }
    public IAsyncResult send_getGroupPermitOnDeviceGroup(AsyncCallback callback, object state, int deviceGroupId, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupPermitOnDeviceGroup", TMessageType.Call, seqid_));
      getGroupPermitOnDeviceGroup_args args = new getGroupPermitOnDeviceGroup_args();
      args.DeviceGroupId = deviceGroupId;
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PermitBean recv_getGroupPermitOnDeviceGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupPermitOnDeviceGroup_result result = new getGroupPermitOnDeviceGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupPermitOnDeviceGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_getGroupPermits(AsyncCallback callback, object state, int deviceId, List<int> personGroupIdList)
    {
      return send_getGroupPermits(callback, state, deviceId, personGroupIdList);
    }

    public List<PermitBean> End_getGroupPermits(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupPermits();
    }

    public async Task<List<PermitBean>> getGroupPermitsAsync(int deviceId, List<int> personGroupIdList)
    {
      List<PermitBean> retval;
      retval = await Task.Run(() =>
      {
        return getGroupPermits(deviceId, personGroupIdList);
      });
      return retval;
    }

    public List<PermitBean> getGroupPermits(int deviceId, List<int> personGroupIdList)
    {
      var asyncResult = Begin_getGroupPermits(null, null, deviceId, personGroupIdList);
      return End_getGroupPermits(asyncResult);

    }
    public IAsyncResult send_getGroupPermits(AsyncCallback callback, object state, int deviceId, List<int> personGroupIdList)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupPermits", TMessageType.Call, seqid_));
      getGroupPermits_args args = new getGroupPermits_args();
      args.DeviceId = deviceId;
      args.PersonGroupIdList = personGroupIdList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<PermitBean> recv_getGroupPermits()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupPermits_result result = new getGroupPermits_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupPermits failed: unknown result");
    }

    
    public IAsyncResult Begin_getImage(AsyncCallback callback, object state, string imageMD5)
    {
      return send_getImage(callback, state, imageMD5);
    }

    public ImageBean End_getImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getImage();
    }

    public async Task<ImageBean> getImageAsync(string imageMD5)
    {
      ImageBean retval;
      retval = await Task.Run(() =>
      {
        return getImage(imageMD5);
      });
      return retval;
    }

    public ImageBean getImage(string imageMD5)
    {
      var asyncResult = Begin_getImage(null, null, imageMD5);
      return End_getImage(asyncResult);

    }
    public IAsyncResult send_getImage(AsyncCallback callback, object state, string imageMD5)
    {
      oprot_.WriteMessageBegin(new TMessage("getImage", TMessageType.Call, seqid_));
      getImage_args args = new getImage_args();
      args.ImageMD5 = imageMD5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public ImageBean recv_getImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getImage_result result = new getImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getImage failed: unknown result");
    }

    
    public IAsyncResult Begin_getImageBytes(AsyncCallback callback, object state, string imageMD5)
    {
      return send_getImageBytes(callback, state, imageMD5);
    }

    public byte[] End_getImageBytes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getImageBytes();
    }

    public async Task<byte[]> getImageBytesAsync(string imageMD5)
    {
      byte[] retval;
      retval = await Task.Run(() =>
      {
        return getImageBytes(imageMD5);
      });
      return retval;
    }

    public byte[] getImageBytes(string imageMD5)
    {
      var asyncResult = Begin_getImageBytes(null, null, imageMD5);
      return End_getImageBytes(asyncResult);

    }
    public IAsyncResult send_getImageBytes(AsyncCallback callback, object state, string imageMD5)
    {
      oprot_.WriteMessageBegin(new TMessage("getImageBytes", TMessageType.Call, seqid_));
      getImageBytes_args args = new getImageBytes_args();
      args.ImageMD5 = imageMD5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public byte[] recv_getImageBytes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getImageBytes_result result = new getImageBytes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getImageBytes failed: unknown result");
    }

    
    public IAsyncResult Begin_getImagesAssociatedByFeature(AsyncCallback callback, object state, string featureMd5)
    {
      return send_getImagesAssociatedByFeature(callback, state, featureMd5);
    }

    public List<string> End_getImagesAssociatedByFeature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getImagesAssociatedByFeature();
    }

    public async Task<List<string>> getImagesAssociatedByFeatureAsync(string featureMd5)
    {
      List<string> retval;
      retval = await Task.Run(() =>
      {
        return getImagesAssociatedByFeature(featureMd5);
      });
      return retval;
    }

    public List<string> getImagesAssociatedByFeature(string featureMd5)
    {
      var asyncResult = Begin_getImagesAssociatedByFeature(null, null, featureMd5);
      return End_getImagesAssociatedByFeature(asyncResult);

    }
    public IAsyncResult send_getImagesAssociatedByFeature(AsyncCallback callback, object state, string featureMd5)
    {
      oprot_.WriteMessageBegin(new TMessage("getImagesAssociatedByFeature", TMessageType.Call, seqid_));
      getImagesAssociatedByFeature_args args = new getImagesAssociatedByFeature_args();
      args.FeatureMd5 = featureMd5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<string> recv_getImagesAssociatedByFeature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getImagesAssociatedByFeature_result result = new getImagesAssociatedByFeature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getImagesAssociatedByFeature failed: unknown result");
    }

    
    public IAsyncResult Begin_getLogBeansByPersonId(AsyncCallback callback, object state, int personId)
    {
      return send_getLogBeansByPersonId(callback, state, personId);
    }

    public List<LogBean> End_getLogBeansByPersonId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getLogBeansByPersonId();
    }

    public async Task<List<LogBean>> getLogBeansByPersonIdAsync(int personId)
    {
      List<LogBean> retval;
      retval = await Task.Run(() =>
      {
        return getLogBeansByPersonId(personId);
      });
      return retval;
    }

    public List<LogBean> getLogBeansByPersonId(int personId)
    {
      var asyncResult = Begin_getLogBeansByPersonId(null, null, personId);
      return End_getLogBeansByPersonId(asyncResult);

    }
    public IAsyncResult send_getLogBeansByPersonId(AsyncCallback callback, object state, int personId)
    {
      oprot_.WriteMessageBegin(new TMessage("getLogBeansByPersonId", TMessageType.Call, seqid_));
      getLogBeansByPersonId_args args = new getLogBeansByPersonId_args();
      args.PersonId = personId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<LogBean> recv_getLogBeansByPersonId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getLogBeansByPersonId_result result = new getLogBeansByPersonId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLogBeansByPersonId failed: unknown result");
    }

    
    public IAsyncResult Begin_getPerson(AsyncCallback callback, object state, int personId)
    {
      return send_getPerson(callback, state, personId);
    }

    public PersonBean End_getPerson(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPerson();
    }

    public async Task<PersonBean> getPersonAsync(int personId)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return getPerson(personId);
      });
      return retval;
    }

    public PersonBean getPerson(int personId)
    {
      var asyncResult = Begin_getPerson(null, null, personId);
      return End_getPerson(asyncResult);

    }
    public IAsyncResult send_getPerson(AsyncCallback callback, object state, int personId)
    {
      oprot_.WriteMessageBegin(new TMessage("getPerson", TMessageType.Call, seqid_));
      getPerson_args args = new getPerson_args();
      args.PersonId = personId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_getPerson()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPerson_result result = new getPerson_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPerson failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersonByPapersNum(AsyncCallback callback, object state, string papersNum)
    {
      return send_getPersonByPapersNum(callback, state, papersNum);
    }

    public PersonBean End_getPersonByPapersNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonByPapersNum();
    }

    public async Task<PersonBean> getPersonByPapersNumAsync(string papersNum)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return getPersonByPapersNum(papersNum);
      });
      return retval;
    }

    public PersonBean getPersonByPapersNum(string papersNum)
    {
      var asyncResult = Begin_getPersonByPapersNum(null, null, papersNum);
      return End_getPersonByPapersNum(asyncResult);

    }
    public IAsyncResult send_getPersonByPapersNum(AsyncCallback callback, object state, string papersNum)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonByPapersNum", TMessageType.Call, seqid_));
      getPersonByPapersNum_args args = new getPersonByPapersNum_args();
      args.PapersNum = papersNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_getPersonByPapersNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonByPapersNum_result result = new getPersonByPapersNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonByPapersNum failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersonGroup(AsyncCallback callback, object state, int personGroupId)
    {
      return send_getPersonGroup(callback, state, personGroupId);
    }

    public PersonGroupBean End_getPersonGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonGroup();
    }

    public async Task<PersonGroupBean> getPersonGroupAsync(int personGroupId)
    {
      PersonGroupBean retval;
      retval = await Task.Run(() =>
      {
        return getPersonGroup(personGroupId);
      });
      return retval;
    }

    public PersonGroupBean getPersonGroup(int personGroupId)
    {
      var asyncResult = Begin_getPersonGroup(null, null, personGroupId);
      return End_getPersonGroup(asyncResult);

    }
    public IAsyncResult send_getPersonGroup(AsyncCallback callback, object state, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonGroup", TMessageType.Call, seqid_));
      getPersonGroup_args args = new getPersonGroup_args();
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonGroupBean recv_getPersonGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonGroup_result result = new getPersonGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersonGroups(AsyncCallback callback, object state, List<int> groupIdList)
    {
      return send_getPersonGroups(callback, state, groupIdList);
    }

    public List<PersonGroupBean> End_getPersonGroups(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonGroups();
    }

    public async Task<List<PersonGroupBean>> getPersonGroupsAsync(List<int> groupIdList)
    {
      List<PersonGroupBean> retval;
      retval = await Task.Run(() =>
      {
        return getPersonGroups(groupIdList);
      });
      return retval;
    }

    public List<PersonGroupBean> getPersonGroups(List<int> groupIdList)
    {
      var asyncResult = Begin_getPersonGroups(null, null, groupIdList);
      return End_getPersonGroups(asyncResult);

    }
    public IAsyncResult send_getPersonGroups(AsyncCallback callback, object state, List<int> groupIdList)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonGroups", TMessageType.Call, seqid_));
      getPersonGroups_args args = new getPersonGroups_args();
      args.GroupIdList = groupIdList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<PersonGroupBean> recv_getPersonGroups()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonGroups_result result = new getPersonGroups_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonGroups failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersonGroupsBelongs(AsyncCallback callback, object state, int personId)
    {
      return send_getPersonGroupsBelongs(callback, state, personId);
    }

    public List<int> End_getPersonGroupsBelongs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonGroupsBelongs();
    }

    public async Task<List<int>> getPersonGroupsBelongsAsync(int personId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getPersonGroupsBelongs(personId);
      });
      return retval;
    }

    public List<int> getPersonGroupsBelongs(int personId)
    {
      var asyncResult = Begin_getPersonGroupsBelongs(null, null, personId);
      return End_getPersonGroupsBelongs(asyncResult);

    }
    public IAsyncResult send_getPersonGroupsBelongs(AsyncCallback callback, object state, int personId)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonGroupsBelongs", TMessageType.Call, seqid_));
      getPersonGroupsBelongs_args args = new getPersonGroupsBelongs_args();
      args.PersonId = personId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getPersonGroupsBelongs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonGroupsBelongs_result result = new getPersonGroupsBelongs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonGroupsBelongs failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersonGroupsPermittedBy(AsyncCallback callback, object state, int deviceGroupId)
    {
      return send_getPersonGroupsPermittedBy(callback, state, deviceGroupId);
    }

    public List<int> End_getPersonGroupsPermittedBy(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonGroupsPermittedBy();
    }

    public async Task<List<int>> getPersonGroupsPermittedByAsync(int deviceGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getPersonGroupsPermittedBy(deviceGroupId);
      });
      return retval;
    }

    public List<int> getPersonGroupsPermittedBy(int deviceGroupId)
    {
      var asyncResult = Begin_getPersonGroupsPermittedBy(null, null, deviceGroupId);
      return End_getPersonGroupsPermittedBy(asyncResult);

    }
    public IAsyncResult send_getPersonGroupsPermittedBy(AsyncCallback callback, object state, int deviceGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonGroupsPermittedBy", TMessageType.Call, seqid_));
      getPersonGroupsPermittedBy_args args = new getPersonGroupsPermittedBy_args();
      args.DeviceGroupId = deviceGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getPersonGroupsPermittedBy()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonGroupsPermittedBy_result result = new getPersonGroupsPermittedBy_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonGroupsPermittedBy failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersonPermit(AsyncCallback callback, object state, int deviceId, int personId)
    {
      return send_getPersonPermit(callback, state, deviceId, personId);
    }

    public PermitBean End_getPersonPermit(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonPermit();
    }

    public async Task<PermitBean> getPersonPermitAsync(int deviceId, int personId)
    {
      PermitBean retval;
      retval = await Task.Run(() =>
      {
        return getPersonPermit(deviceId, personId);
      });
      return retval;
    }

    public PermitBean getPersonPermit(int deviceId, int personId)
    {
      var asyncResult = Begin_getPersonPermit(null, null, deviceId, personId);
      return End_getPersonPermit(asyncResult);

    }
    public IAsyncResult send_getPersonPermit(AsyncCallback callback, object state, int deviceId, int personId)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonPermit", TMessageType.Call, seqid_));
      getPersonPermit_args args = new getPersonPermit_args();
      args.DeviceId = deviceId;
      args.PersonId = personId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PermitBean recv_getPersonPermit()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonPermit_result result = new getPersonPermit_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonPermit failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersonPermits(AsyncCallback callback, object state, int deviceId, List<int> personIdList)
    {
      return send_getPersonPermits(callback, state, deviceId, personIdList);
    }

    public List<PermitBean> End_getPersonPermits(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonPermits();
    }

    public async Task<List<PermitBean>> getPersonPermitsAsync(int deviceId, List<int> personIdList)
    {
      List<PermitBean> retval;
      retval = await Task.Run(() =>
      {
        return getPersonPermits(deviceId, personIdList);
      });
      return retval;
    }

    public List<PermitBean> getPersonPermits(int deviceId, List<int> personIdList)
    {
      var asyncResult = Begin_getPersonPermits(null, null, deviceId, personIdList);
      return End_getPersonPermits(asyncResult);

    }
    public IAsyncResult send_getPersonPermits(AsyncCallback callback, object state, int deviceId, List<int> personIdList)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonPermits", TMessageType.Call, seqid_));
      getPersonPermits_args args = new getPersonPermits_args();
      args.DeviceId = deviceId;
      args.PersonIdList = personIdList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<PermitBean> recv_getPersonPermits()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonPermits_result result = new getPersonPermits_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonPermits failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersons(AsyncCallback callback, object state, List<int> idList)
    {
      return send_getPersons(callback, state, idList);
    }

    public List<PersonBean> End_getPersons(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersons();
    }

    public async Task<List<PersonBean>> getPersonsAsync(List<int> idList)
    {
      List<PersonBean> retval;
      retval = await Task.Run(() =>
      {
        return getPersons(idList);
      });
      return retval;
    }

    public List<PersonBean> getPersons(List<int> idList)
    {
      var asyncResult = Begin_getPersons(null, null, idList);
      return End_getPersons(asyncResult);

    }
    public IAsyncResult send_getPersons(AsyncCallback callback, object state, List<int> idList)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersons", TMessageType.Call, seqid_));
      getPersons_args args = new getPersons_args();
      args.IdList = idList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<PersonBean> recv_getPersons()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersons_result result = new getPersons_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersons failed: unknown result");
    }

    
    public IAsyncResult Begin_getPersonsOfGroup(AsyncCallback callback, object state, int personGroupId)
    {
      return send_getPersonsOfGroup(callback, state, personGroupId);
    }

    public List<int> End_getPersonsOfGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonsOfGroup();
    }

    public async Task<List<int>> getPersonsOfGroupAsync(int personGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getPersonsOfGroup(personGroupId);
      });
      return retval;
    }

    public List<int> getPersonsOfGroup(int personGroupId)
    {
      var asyncResult = Begin_getPersonsOfGroup(null, null, personGroupId);
      return End_getPersonsOfGroup(asyncResult);

    }
    public IAsyncResult send_getPersonsOfGroup(AsyncCallback callback, object state, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonsOfGroup", TMessageType.Call, seqid_));
      getPersonsOfGroup_args args = new getPersonsOfGroup_args();
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getPersonsOfGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonsOfGroup_result result = new getPersonsOfGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonsOfGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_getProperty(AsyncCallback callback, object state, string key, Token token)
    {
      return send_getProperty(callback, state, key, token);
    }

    public string End_getProperty(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProperty();
    }

    public async Task<string> getPropertyAsync(string key, Token token)
    {
      string retval;
      retval = await Task.Run(() =>
      {
        return getProperty(key, token);
      });
      return retval;
    }

    public string getProperty(string key, Token token)
    {
      var asyncResult = Begin_getProperty(null, null, key, token);
      return End_getProperty(asyncResult);

    }
    public IAsyncResult send_getProperty(AsyncCallback callback, object state, string key, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("getProperty", TMessageType.Call, seqid_));
      getProperty_args args = new getProperty_args();
      args.Key = key;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public string recv_getProperty()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProperty_result result = new getProperty_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProperty failed: unknown result");
    }

    
    public IAsyncResult Begin_getRedisParameters(AsyncCallback callback, object state, Token token)
    {
      return send_getRedisParameters(callback, state, token);
    }

    public Dictionary<MQParam, string> End_getRedisParameters(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRedisParameters();
    }

    public async Task<Dictionary<MQParam, string>> getRedisParametersAsync(Token token)
    {
      Dictionary<MQParam, string> retval;
      retval = await Task.Run(() =>
      {
        return getRedisParameters(token);
      });
      return retval;
    }

    public Dictionary<MQParam, string> getRedisParameters(Token token)
    {
      var asyncResult = Begin_getRedisParameters(null, null, token);
      return End_getRedisParameters(asyncResult);

    }
    public IAsyncResult send_getRedisParameters(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("getRedisParameters", TMessageType.Call, seqid_));
      getRedisParameters_args args = new getRedisParameters_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public Dictionary<MQParam, string> recv_getRedisParameters()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRedisParameters_result result = new getRedisParameters_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRedisParameters failed: unknown result");
    }

    
    public IAsyncResult Begin_getServiceConfig(AsyncCallback callback, object state, Token token)
    {
      return send_getServiceConfig(callback, state, token);
    }

    public Dictionary<string, string> End_getServiceConfig(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getServiceConfig();
    }

    public async Task<Dictionary<string, string>> getServiceConfigAsync(Token token)
    {
      Dictionary<string, string> retval;
      retval = await Task.Run(() =>
      {
        return getServiceConfig(token);
      });
      return retval;
    }

    public Dictionary<string, string> getServiceConfig(Token token)
    {
      var asyncResult = Begin_getServiceConfig(null, null, token);
      return End_getServiceConfig(asyncResult);

    }
    public IAsyncResult send_getServiceConfig(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("getServiceConfig", TMessageType.Call, seqid_));
      getServiceConfig_args args = new getServiceConfig_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public Dictionary<string, string> recv_getServiceConfig()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getServiceConfig_result result = new getServiceConfig_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getServiceConfig failed: unknown result");
    }

    
    public IAsyncResult Begin_getSubDeviceGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      return send_getSubDeviceGroup(callback, state, deviceGroupId);
    }

    public List<int> End_getSubDeviceGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSubDeviceGroup();
    }

    public async Task<List<int>> getSubDeviceGroupAsync(int deviceGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getSubDeviceGroup(deviceGroupId);
      });
      return retval;
    }

    public List<int> getSubDeviceGroup(int deviceGroupId)
    {
      var asyncResult = Begin_getSubDeviceGroup(null, null, deviceGroupId);
      return End_getSubDeviceGroup(asyncResult);

    }
    public IAsyncResult send_getSubDeviceGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getSubDeviceGroup", TMessageType.Call, seqid_));
      getSubDeviceGroup_args args = new getSubDeviceGroup_args();
      args.DeviceGroupId = deviceGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getSubDeviceGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSubDeviceGroup_result result = new getSubDeviceGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSubDeviceGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_getSubPersonGroup(AsyncCallback callback, object state, int personGroupId)
    {
      return send_getSubPersonGroup(callback, state, personGroupId);
    }

    public List<int> End_getSubPersonGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSubPersonGroup();
    }

    public async Task<List<int>> getSubPersonGroupAsync(int personGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return getSubPersonGroup(personGroupId);
      });
      return retval;
    }

    public List<int> getSubPersonGroup(int personGroupId)
    {
      var asyncResult = Begin_getSubPersonGroup(null, null, personGroupId);
      return End_getSubPersonGroup(asyncResult);

    }
    public IAsyncResult send_getSubPersonGroup(AsyncCallback callback, object state, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getSubPersonGroup", TMessageType.Call, seqid_));
      getSubPersonGroup_args args = new getSubPersonGroup_args();
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_getSubPersonGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSubPersonGroup_result result = new getSubPersonGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSubPersonGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_isDisable(AsyncCallback callback, object state, int personId)
    {
      return send_isDisable(callback, state, personId);
    }

    public bool End_isDisable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isDisable();
    }

    public async Task<bool> isDisableAsync(int personId)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isDisable(personId);
      });
      return retval;
    }

    public bool isDisable(int personId)
    {
      var asyncResult = Begin_isDisable(null, null, personId);
      return End_isDisable(asyncResult);

    }
    public IAsyncResult send_isDisable(AsyncCallback callback, object state, int personId)
    {
      oprot_.WriteMessageBegin(new TMessage("isDisable", TMessageType.Call, seqid_));
      isDisable_args args = new isDisable_args();
      args.PersonId = personId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isDisable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isDisable_result result = new isDisable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isDisable failed: unknown result");
    }

    
    public IAsyncResult Begin_isLocal(AsyncCallback callback, object state)
    {
      return send_isLocal(callback, state);
    }

    public bool End_isLocal(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isLocal();
    }

    public async Task<bool> isLocalAsync()
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isLocal();
      });
      return retval;
    }

    public bool isLocal()
    {
      var asyncResult = Begin_isLocal(null, null);
      return End_isLocal(asyncResult);

    }
    public IAsyncResult send_isLocal(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("isLocal", TMessageType.Call, seqid_));
      isLocal_args args = new isLocal_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isLocal()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isLocal_result result = new isLocal_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isLocal failed: unknown result");
    }

    
    public IAsyncResult Begin_isValidAckChannel(AsyncCallback callback, object state, string ackChannel)
    {
      return send_isValidAckChannel(callback, state, ackChannel);
    }

    public bool End_isValidAckChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isValidAckChannel();
    }

    public async Task<bool> isValidAckChannelAsync(string ackChannel)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isValidAckChannel(ackChannel);
      });
      return retval;
    }

    public bool isValidAckChannel(string ackChannel)
    {
      var asyncResult = Begin_isValidAckChannel(null, null, ackChannel);
      return End_isValidAckChannel(asyncResult);

    }
    public IAsyncResult send_isValidAckChannel(AsyncCallback callback, object state, string ackChannel)
    {
      oprot_.WriteMessageBegin(new TMessage("isValidAckChannel", TMessageType.Call, seqid_));
      isValidAckChannel_args args = new isValidAckChannel_args();
      args.AckChannel = ackChannel;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isValidAckChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isValidAckChannel_result result = new isValidAckChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isValidAckChannel failed: unknown result");
    }

    
    public IAsyncResult Begin_isValidCmdSn(AsyncCallback callback, object state, int cmdSn)
    {
      return send_isValidCmdSn(callback, state, cmdSn);
    }

    public bool End_isValidCmdSn(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isValidCmdSn();
    }

    public async Task<bool> isValidCmdSnAsync(int cmdSn)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isValidCmdSn(cmdSn);
      });
      return retval;
    }

    public bool isValidCmdSn(int cmdSn)
    {
      var asyncResult = Begin_isValidCmdSn(null, null, cmdSn);
      return End_isValidCmdSn(asyncResult);

    }
    public IAsyncResult send_isValidCmdSn(AsyncCallback callback, object state, int cmdSn)
    {
      oprot_.WriteMessageBegin(new TMessage("isValidCmdSn", TMessageType.Call, seqid_));
      isValidCmdSn_args args = new isValidCmdSn_args();
      args.CmdSn = cmdSn;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isValidCmdSn()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isValidCmdSn_result result = new isValidCmdSn_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isValidCmdSn failed: unknown result");
    }

    
    public IAsyncResult Begin_isValidDeviceToken(AsyncCallback callback, object state, Token token)
    {
      return send_isValidDeviceToken(callback, state, token);
    }

    public bool End_isValidDeviceToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isValidDeviceToken();
    }

    public async Task<bool> isValidDeviceTokenAsync(Token token)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isValidDeviceToken(token);
      });
      return retval;
    }

    public bool isValidDeviceToken(Token token)
    {
      var asyncResult = Begin_isValidDeviceToken(null, null, token);
      return End_isValidDeviceToken(asyncResult);

    }
    public IAsyncResult send_isValidDeviceToken(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("isValidDeviceToken", TMessageType.Call, seqid_));
      isValidDeviceToken_args args = new isValidDeviceToken_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isValidDeviceToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isValidDeviceToken_result result = new isValidDeviceToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isValidDeviceToken failed: unknown result");
    }

    
    public IAsyncResult Begin_isValidPassword(AsyncCallback callback, object state, string userId, string password, bool isMd5)
    {
      return send_isValidPassword(callback, state, userId, password, isMd5);
    }

    public bool End_isValidPassword(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isValidPassword();
    }

    public async Task<bool> isValidPasswordAsync(string userId, string password, bool isMd5)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isValidPassword(userId, password, isMd5);
      });
      return retval;
    }

    public bool isValidPassword(string userId, string password, bool isMd5)
    {
      var asyncResult = Begin_isValidPassword(null, null, userId, password, isMd5);
      return End_isValidPassword(asyncResult);

    }
    public IAsyncResult send_isValidPassword(AsyncCallback callback, object state, string userId, string password, bool isMd5)
    {
      oprot_.WriteMessageBegin(new TMessage("isValidPassword", TMessageType.Call, seqid_));
      isValidPassword_args args = new isValidPassword_args();
      args.UserId = userId;
      args.Password = password;
      args.IsMd5 = isMd5;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isValidPassword()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isValidPassword_result result = new isValidPassword_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isValidPassword failed: unknown result");
    }

    
    public IAsyncResult Begin_isValidPersonToken(AsyncCallback callback, object state, Token token)
    {
      return send_isValidPersonToken(callback, state, token);
    }

    public bool End_isValidPersonToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isValidPersonToken();
    }

    public async Task<bool> isValidPersonTokenAsync(Token token)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isValidPersonToken(token);
      });
      return retval;
    }

    public bool isValidPersonToken(Token token)
    {
      var asyncResult = Begin_isValidPersonToken(null, null, token);
      return End_isValidPersonToken(asyncResult);

    }
    public IAsyncResult send_isValidPersonToken(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("isValidPersonToken", TMessageType.Call, seqid_));
      isValidPersonToken_args args = new isValidPersonToken_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isValidPersonToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isValidPersonToken_result result = new isValidPersonToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isValidPersonToken failed: unknown result");
    }

    
    public IAsyncResult Begin_isValidRootToken(AsyncCallback callback, object state, Token token)
    {
      return send_isValidRootToken(callback, state, token);
    }

    public bool End_isValidRootToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isValidRootToken();
    }

    public async Task<bool> isValidRootTokenAsync(Token token)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isValidRootToken(token);
      });
      return retval;
    }

    public bool isValidRootToken(Token token)
    {
      var asyncResult = Begin_isValidRootToken(null, null, token);
      return End_isValidRootToken(asyncResult);

    }
    public IAsyncResult send_isValidRootToken(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("isValidRootToken", TMessageType.Call, seqid_));
      isValidRootToken_args args = new isValidRootToken_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isValidRootToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isValidRootToken_result result = new isValidRootToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isValidRootToken failed: unknown result");
    }

    
    public IAsyncResult Begin_isValidToken(AsyncCallback callback, object state, Token token)
    {
      return send_isValidToken(callback, state, token);
    }

    public bool End_isValidToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isValidToken();
    }

    public async Task<bool> isValidTokenAsync(Token token)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isValidToken(token);
      });
      return retval;
    }

    public bool isValidToken(Token token)
    {
      var asyncResult = Begin_isValidToken(null, null, token);
      return End_isValidToken(asyncResult);

    }
    public IAsyncResult send_isValidToken(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("isValidToken", TMessageType.Call, seqid_));
      isValidToken_args args = new isValidToken_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isValidToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isValidToken_result result = new isValidToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isValidToken failed: unknown result");
    }

    
    public IAsyncResult Begin_isValidUserToken(AsyncCallback callback, object state, Token token)
    {
      return send_isValidUserToken(callback, state, token);
    }

    public bool End_isValidUserToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isValidUserToken();
    }

    public async Task<bool> isValidUserTokenAsync(Token token)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return isValidUserToken(token);
      });
      return retval;
    }

    public bool isValidUserToken(Token token)
    {
      var asyncResult = Begin_isValidUserToken(null, null, token);
      return End_isValidUserToken(asyncResult);

    }
    public IAsyncResult send_isValidUserToken(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("isValidUserToken", TMessageType.Call, seqid_));
      isValidUserToken_args args = new isValidUserToken_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_isValidUserToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isValidUserToken_result result = new isValidUserToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isValidUserToken failed: unknown result");
    }

    
    public IAsyncResult Begin_listOfParentForDeviceGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      return send_listOfParentForDeviceGroup(callback, state, deviceGroupId);
    }

    public List<int> End_listOfParentForDeviceGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_listOfParentForDeviceGroup();
    }

    public async Task<List<int>> listOfParentForDeviceGroupAsync(int deviceGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return listOfParentForDeviceGroup(deviceGroupId);
      });
      return retval;
    }

    public List<int> listOfParentForDeviceGroup(int deviceGroupId)
    {
      var asyncResult = Begin_listOfParentForDeviceGroup(null, null, deviceGroupId);
      return End_listOfParentForDeviceGroup(asyncResult);

    }
    public IAsyncResult send_listOfParentForDeviceGroup(AsyncCallback callback, object state, int deviceGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("listOfParentForDeviceGroup", TMessageType.Call, seqid_));
      listOfParentForDeviceGroup_args args = new listOfParentForDeviceGroup_args();
      args.DeviceGroupId = deviceGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_listOfParentForDeviceGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      listOfParentForDeviceGroup_result result = new listOfParentForDeviceGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listOfParentForDeviceGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_listOfParentForPersonGroup(AsyncCallback callback, object state, int personGroupId)
    {
      return send_listOfParentForPersonGroup(callback, state, personGroupId);
    }

    public List<int> End_listOfParentForPersonGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_listOfParentForPersonGroup();
    }

    public async Task<List<int>> listOfParentForPersonGroupAsync(int personGroupId)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return listOfParentForPersonGroup(personGroupId);
      });
      return retval;
    }

    public List<int> listOfParentForPersonGroup(int personGroupId)
    {
      var asyncResult = Begin_listOfParentForPersonGroup(null, null, personGroupId);
      return End_listOfParentForPersonGroup(asyncResult);

    }
    public IAsyncResult send_listOfParentForPersonGroup(AsyncCallback callback, object state, int personGroupId)
    {
      oprot_.WriteMessageBegin(new TMessage("listOfParentForPersonGroup", TMessageType.Call, seqid_));
      listOfParentForPersonGroup_args args = new listOfParentForPersonGroup_args();
      args.PersonGroupId = personGroupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_listOfParentForPersonGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      listOfParentForPersonGroup_result result = new listOfParentForPersonGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listOfParentForPersonGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_loadAllPerson(AsyncCallback callback, object state)
    {
      return send_loadAllPerson(callback, state);
    }

    public List<int> End_loadAllPerson(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadAllPerson();
    }

    public async Task<List<int>> loadAllPersonAsync()
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadAllPerson();
      });
      return retval;
    }

    public List<int> loadAllPerson()
    {
      var asyncResult = Begin_loadAllPerson(null, null);
      return End_loadAllPerson(asyncResult);

    }
    public IAsyncResult send_loadAllPerson(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("loadAllPerson", TMessageType.Call, seqid_));
      loadAllPerson_args args = new loadAllPerson_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadAllPerson()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadAllPerson_result result = new loadAllPerson_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadAllPerson failed: unknown result");
    }

    
    public IAsyncResult Begin_loadDeviceByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      return send_loadDeviceByWhere(callback, state, @where, startRow, numRows);
    }

    public List<DeviceBean> End_loadDeviceByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadDeviceByWhere();
    }

    public async Task<List<DeviceBean>> loadDeviceByWhereAsync(string @where, int startRow, int numRows)
    {
      List<DeviceBean> retval;
      retval = await Task.Run(() =>
      {
        return loadDeviceByWhere(where, startRow, numRows);
      });
      return retval;
    }

    public List<DeviceBean> loadDeviceByWhere(string @where, int startRow, int numRows)
    {
      var asyncResult = Begin_loadDeviceByWhere(null, null, @where, startRow, numRows);
      return End_loadDeviceByWhere(asyncResult);

    }
    public IAsyncResult send_loadDeviceByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      oprot_.WriteMessageBegin(new TMessage("loadDeviceByWhere", TMessageType.Call, seqid_));
      loadDeviceByWhere_args args = new loadDeviceByWhere_args();
      args.Where = @where;
      args.StartRow = startRow;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<DeviceBean> recv_loadDeviceByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadDeviceByWhere_result result = new loadDeviceByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadDeviceByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadDeviceGroupByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      return send_loadDeviceGroupByWhere(callback, state, @where, startRow, numRows);
    }

    public List<int> End_loadDeviceGroupByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadDeviceGroupByWhere();
    }

    public async Task<List<int>> loadDeviceGroupByWhereAsync(string @where, int startRow, int numRows)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadDeviceGroupByWhere(where, startRow, numRows);
      });
      return retval;
    }

    public List<int> loadDeviceGroupByWhere(string @where, int startRow, int numRows)
    {
      var asyncResult = Begin_loadDeviceGroupByWhere(null, null, @where, startRow, numRows);
      return End_loadDeviceGroupByWhere(asyncResult);

    }
    public IAsyncResult send_loadDeviceGroupByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      oprot_.WriteMessageBegin(new TMessage("loadDeviceGroupByWhere", TMessageType.Call, seqid_));
      loadDeviceGroupByWhere_args args = new loadDeviceGroupByWhere_args();
      args.Where = @where;
      args.StartRow = startRow;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadDeviceGroupByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadDeviceGroupByWhere_result result = new loadDeviceGroupByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadDeviceGroupByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadDeviceGroupIdByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_loadDeviceGroupIdByWhere(callback, state, @where);
    }

    public List<int> End_loadDeviceGroupIdByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadDeviceGroupIdByWhere();
    }

    public async Task<List<int>> loadDeviceGroupIdByWhereAsync(string @where)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadDeviceGroupIdByWhere(where);
      });
      return retval;
    }

    public List<int> loadDeviceGroupIdByWhere(string @where)
    {
      var asyncResult = Begin_loadDeviceGroupIdByWhere(null, null, @where);
      return End_loadDeviceGroupIdByWhere(asyncResult);

    }
    public IAsyncResult send_loadDeviceGroupIdByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("loadDeviceGroupIdByWhere", TMessageType.Call, seqid_));
      loadDeviceGroupIdByWhere_args args = new loadDeviceGroupIdByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadDeviceGroupIdByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadDeviceGroupIdByWhere_result result = new loadDeviceGroupIdByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadDeviceGroupIdByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadDeviceIdByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_loadDeviceIdByWhere(callback, state, @where);
    }

    public List<int> End_loadDeviceIdByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadDeviceIdByWhere();
    }

    public async Task<List<int>> loadDeviceIdByWhereAsync(string @where)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadDeviceIdByWhere(where);
      });
      return retval;
    }

    public List<int> loadDeviceIdByWhere(string @where)
    {
      var asyncResult = Begin_loadDeviceIdByWhere(null, null, @where);
      return End_loadDeviceIdByWhere(asyncResult);

    }
    public IAsyncResult send_loadDeviceIdByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("loadDeviceIdByWhere", TMessageType.Call, seqid_));
      loadDeviceIdByWhere_args args = new loadDeviceIdByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadDeviceIdByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadDeviceIdByWhere_result result = new loadDeviceIdByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadDeviceIdByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadFeatureMd5ByUpdate(AsyncCallback callback, object state, long timestamp)
    {
      return send_loadFeatureMd5ByUpdate(callback, state, timestamp);
    }

    public List<string> End_loadFeatureMd5ByUpdate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadFeatureMd5ByUpdate();
    }

    public async Task<List<string>> loadFeatureMd5ByUpdateAsync(long timestamp)
    {
      List<string> retval;
      retval = await Task.Run(() =>
      {
        return loadFeatureMd5ByUpdate(timestamp);
      });
      return retval;
    }

    public List<string> loadFeatureMd5ByUpdate(long timestamp)
    {
      var asyncResult = Begin_loadFeatureMd5ByUpdate(null, null, timestamp);
      return End_loadFeatureMd5ByUpdate(asyncResult);

    }
    public IAsyncResult send_loadFeatureMd5ByUpdate(AsyncCallback callback, object state, long timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdate", TMessageType.Call, seqid_));
      loadFeatureMd5ByUpdate_args args = new loadFeatureMd5ByUpdate_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<string> recv_loadFeatureMd5ByUpdate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadFeatureMd5ByUpdate_result result = new loadFeatureMd5ByUpdate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadFeatureMd5ByUpdate failed: unknown result");
    }

    
    public IAsyncResult Begin_loadFeatureMd5ByUpdateTimeStr(AsyncCallback callback, object state, string timestamp)
    {
      return send_loadFeatureMd5ByUpdateTimeStr(callback, state, timestamp);
    }

    public List<string> End_loadFeatureMd5ByUpdateTimeStr(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadFeatureMd5ByUpdateTimeStr();
    }

    public async Task<List<string>> loadFeatureMd5ByUpdateTimeStrAsync(string timestamp)
    {
      List<string> retval;
      retval = await Task.Run(() =>
      {
        return loadFeatureMd5ByUpdateTimeStr(timestamp);
      });
      return retval;
    }

    public List<string> loadFeatureMd5ByUpdateTimeStr(string timestamp)
    {
      var asyncResult = Begin_loadFeatureMd5ByUpdateTimeStr(null, null, timestamp);
      return End_loadFeatureMd5ByUpdateTimeStr(asyncResult);

    }
    public IAsyncResult send_loadFeatureMd5ByUpdateTimeStr(AsyncCallback callback, object state, string timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdateTimeStr", TMessageType.Call, seqid_));
      loadFeatureMd5ByUpdateTimeStr_args args = new loadFeatureMd5ByUpdateTimeStr_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<string> recv_loadFeatureMd5ByUpdateTimeStr()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadFeatureMd5ByUpdateTimeStr_result result = new loadFeatureMd5ByUpdateTimeStr_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadFeatureMd5ByUpdateTimeStr failed: unknown result");
    }

    
    public IAsyncResult Begin_loadLogByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      return send_loadLogByWhere(callback, state, @where, startRow, numRows);
    }

    public List<LogBean> End_loadLogByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadLogByWhere();
    }

    public async Task<List<LogBean>> loadLogByWhereAsync(string @where, int startRow, int numRows)
    {
      List<LogBean> retval;
      retval = await Task.Run(() =>
      {
        return loadLogByWhere(where, startRow, numRows);
      });
      return retval;
    }

    public List<LogBean> loadLogByWhere(string @where, int startRow, int numRows)
    {
      var asyncResult = Begin_loadLogByWhere(null, null, @where, startRow, numRows);
      return End_loadLogByWhere(asyncResult);

    }
    public IAsyncResult send_loadLogByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      oprot_.WriteMessageBegin(new TMessage("loadLogByWhere", TMessageType.Call, seqid_));
      loadLogByWhere_args args = new loadLogByWhere_args();
      args.Where = @where;
      args.StartRow = startRow;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<LogBean> recv_loadLogByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadLogByWhere_result result = new loadLogByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadLogByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadLogLightByVerifyTime(AsyncCallback callback, object state, long timestamp, int startRow, int numRows)
    {
      return send_loadLogLightByVerifyTime(callback, state, timestamp, startRow, numRows);
    }

    public List<LogLightBean> End_loadLogLightByVerifyTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadLogLightByVerifyTime();
    }

    public async Task<List<LogLightBean>> loadLogLightByVerifyTimeAsync(long timestamp, int startRow, int numRows)
    {
      List<LogLightBean> retval;
      retval = await Task.Run(() =>
      {
        return loadLogLightByVerifyTime(timestamp, startRow, numRows);
      });
      return retval;
    }

    public List<LogLightBean> loadLogLightByVerifyTime(long timestamp, int startRow, int numRows)
    {
      var asyncResult = Begin_loadLogLightByVerifyTime(null, null, timestamp, startRow, numRows);
      return End_loadLogLightByVerifyTime(asyncResult);

    }
    public IAsyncResult send_loadLogLightByVerifyTime(AsyncCallback callback, object state, long timestamp, int startRow, int numRows)
    {
      oprot_.WriteMessageBegin(new TMessage("loadLogLightByVerifyTime", TMessageType.Call, seqid_));
      loadLogLightByVerifyTime_args args = new loadLogLightByVerifyTime_args();
      args.Timestamp = timestamp;
      args.StartRow = startRow;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<LogLightBean> recv_loadLogLightByVerifyTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadLogLightByVerifyTime_result result = new loadLogLightByVerifyTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadLogLightByVerifyTime failed: unknown result");
    }

    
    public IAsyncResult Begin_loadLogLightByVerifyTimeTimestr(AsyncCallback callback, object state, string timestamp, int startRow, int numRows)
    {
      return send_loadLogLightByVerifyTimeTimestr(callback, state, timestamp, startRow, numRows);
    }

    public List<LogLightBean> End_loadLogLightByVerifyTimeTimestr(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadLogLightByVerifyTimeTimestr();
    }

    public async Task<List<LogLightBean>> loadLogLightByVerifyTimeTimestrAsync(string timestamp, int startRow, int numRows)
    {
      List<LogLightBean> retval;
      retval = await Task.Run(() =>
      {
        return loadLogLightByVerifyTimeTimestr(timestamp, startRow, numRows);
      });
      return retval;
    }

    public List<LogLightBean> loadLogLightByVerifyTimeTimestr(string timestamp, int startRow, int numRows)
    {
      var asyncResult = Begin_loadLogLightByVerifyTimeTimestr(null, null, timestamp, startRow, numRows);
      return End_loadLogLightByVerifyTimeTimestr(asyncResult);

    }
    public IAsyncResult send_loadLogLightByVerifyTimeTimestr(AsyncCallback callback, object state, string timestamp, int startRow, int numRows)
    {
      oprot_.WriteMessageBegin(new TMessage("loadLogLightByVerifyTimeTimestr", TMessageType.Call, seqid_));
      loadLogLightByVerifyTimeTimestr_args args = new loadLogLightByVerifyTimeTimestr_args();
      args.Timestamp = timestamp;
      args.StartRow = startRow;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<LogLightBean> recv_loadLogLightByVerifyTimeTimestr()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadLogLightByVerifyTimeTimestr_result result = new loadLogLightByVerifyTimeTimestr_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadLogLightByVerifyTimeTimestr failed: unknown result");
    }

    
    public IAsyncResult Begin_loadLogLightByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      return send_loadLogLightByWhere(callback, state, @where, startRow, numRows);
    }

    public List<LogLightBean> End_loadLogLightByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadLogLightByWhere();
    }

    public async Task<List<LogLightBean>> loadLogLightByWhereAsync(string @where, int startRow, int numRows)
    {
      List<LogLightBean> retval;
      retval = await Task.Run(() =>
      {
        return loadLogLightByWhere(where, startRow, numRows);
      });
      return retval;
    }

    public List<LogLightBean> loadLogLightByWhere(string @where, int startRow, int numRows)
    {
      var asyncResult = Begin_loadLogLightByWhere(null, null, @where, startRow, numRows);
      return End_loadLogLightByWhere(asyncResult);

    }
    public IAsyncResult send_loadLogLightByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      oprot_.WriteMessageBegin(new TMessage("loadLogLightByWhere", TMessageType.Call, seqid_));
      loadLogLightByWhere_args args = new loadLogLightByWhere_args();
      args.Where = @where;
      args.StartRow = startRow;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<LogLightBean> recv_loadLogLightByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadLogLightByWhere_result result = new loadLogLightByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadLogLightByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadPermitByUpdate(AsyncCallback callback, object state, long timestamp)
    {
      return send_loadPermitByUpdate(callback, state, timestamp);
    }

    public List<PermitBean> End_loadPermitByUpdate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadPermitByUpdate();
    }

    public async Task<List<PermitBean>> loadPermitByUpdateAsync(long timestamp)
    {
      List<PermitBean> retval;
      retval = await Task.Run(() =>
      {
        return loadPermitByUpdate(timestamp);
      });
      return retval;
    }

    public List<PermitBean> loadPermitByUpdate(long timestamp)
    {
      var asyncResult = Begin_loadPermitByUpdate(null, null, timestamp);
      return End_loadPermitByUpdate(asyncResult);

    }
    public IAsyncResult send_loadPermitByUpdate(AsyncCallback callback, object state, long timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("loadPermitByUpdate", TMessageType.Call, seqid_));
      loadPermitByUpdate_args args = new loadPermitByUpdate_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<PermitBean> recv_loadPermitByUpdate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadPermitByUpdate_result result = new loadPermitByUpdate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadPermitByUpdate failed: unknown result");
    }

    
    public IAsyncResult Begin_loadPermitByUpdateTimestr(AsyncCallback callback, object state, string timestamp)
    {
      return send_loadPermitByUpdateTimestr(callback, state, timestamp);
    }

    public List<PermitBean> End_loadPermitByUpdateTimestr(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadPermitByUpdateTimestr();
    }

    public async Task<List<PermitBean>> loadPermitByUpdateTimestrAsync(string timestamp)
    {
      List<PermitBean> retval;
      retval = await Task.Run(() =>
      {
        return loadPermitByUpdateTimestr(timestamp);
      });
      return retval;
    }

    public List<PermitBean> loadPermitByUpdateTimestr(string timestamp)
    {
      var asyncResult = Begin_loadPermitByUpdateTimestr(null, null, timestamp);
      return End_loadPermitByUpdateTimestr(asyncResult);

    }
    public IAsyncResult send_loadPermitByUpdateTimestr(AsyncCallback callback, object state, string timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("loadPermitByUpdateTimestr", TMessageType.Call, seqid_));
      loadPermitByUpdateTimestr_args args = new loadPermitByUpdateTimestr_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<PermitBean> recv_loadPermitByUpdateTimestr()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadPermitByUpdateTimestr_result result = new loadPermitByUpdateTimestr_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadPermitByUpdateTimestr failed: unknown result");
    }

    
    public IAsyncResult Begin_loadPersonByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      return send_loadPersonByWhere(callback, state, @where, startRow, numRows);
    }

    public List<PersonBean> End_loadPersonByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadPersonByWhere();
    }

    public async Task<List<PersonBean>> loadPersonByWhereAsync(string @where, int startRow, int numRows)
    {
      List<PersonBean> retval;
      retval = await Task.Run(() =>
      {
        return loadPersonByWhere(where, startRow, numRows);
      });
      return retval;
    }

    public List<PersonBean> loadPersonByWhere(string @where, int startRow, int numRows)
    {
      var asyncResult = Begin_loadPersonByWhere(null, null, @where, startRow, numRows);
      return End_loadPersonByWhere(asyncResult);

    }
    public IAsyncResult send_loadPersonByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      oprot_.WriteMessageBegin(new TMessage("loadPersonByWhere", TMessageType.Call, seqid_));
      loadPersonByWhere_args args = new loadPersonByWhere_args();
      args.Where = @where;
      args.StartRow = startRow;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<PersonBean> recv_loadPersonByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadPersonByWhere_result result = new loadPersonByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadPersonByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadPersonGroupByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      return send_loadPersonGroupByWhere(callback, state, @where, startRow, numRows);
    }

    public List<int> End_loadPersonGroupByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadPersonGroupByWhere();
    }

    public async Task<List<int>> loadPersonGroupByWhereAsync(string @where, int startRow, int numRows)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadPersonGroupByWhere(where, startRow, numRows);
      });
      return retval;
    }

    public List<int> loadPersonGroupByWhere(string @where, int startRow, int numRows)
    {
      var asyncResult = Begin_loadPersonGroupByWhere(null, null, @where, startRow, numRows);
      return End_loadPersonGroupByWhere(asyncResult);

    }
    public IAsyncResult send_loadPersonGroupByWhere(AsyncCallback callback, object state, string @where, int startRow, int numRows)
    {
      oprot_.WriteMessageBegin(new TMessage("loadPersonGroupByWhere", TMessageType.Call, seqid_));
      loadPersonGroupByWhere_args args = new loadPersonGroupByWhere_args();
      args.Where = @where;
      args.StartRow = startRow;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadPersonGroupByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadPersonGroupByWhere_result result = new loadPersonGroupByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadPersonGroupByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadPersonGroupIdByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_loadPersonGroupIdByWhere(callback, state, @where);
    }

    public List<int> End_loadPersonGroupIdByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadPersonGroupIdByWhere();
    }

    public async Task<List<int>> loadPersonGroupIdByWhereAsync(string @where)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadPersonGroupIdByWhere(where);
      });
      return retval;
    }

    public List<int> loadPersonGroupIdByWhere(string @where)
    {
      var asyncResult = Begin_loadPersonGroupIdByWhere(null, null, @where);
      return End_loadPersonGroupIdByWhere(asyncResult);

    }
    public IAsyncResult send_loadPersonGroupIdByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("loadPersonGroupIdByWhere", TMessageType.Call, seqid_));
      loadPersonGroupIdByWhere_args args = new loadPersonGroupIdByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadPersonGroupIdByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadPersonGroupIdByWhere_result result = new loadPersonGroupIdByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadPersonGroupIdByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadPersonIdByUpdateTime(AsyncCallback callback, object state, long timestamp)
    {
      return send_loadPersonIdByUpdateTime(callback, state, timestamp);
    }

    public List<int> End_loadPersonIdByUpdateTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadPersonIdByUpdateTime();
    }

    public async Task<List<int>> loadPersonIdByUpdateTimeAsync(long timestamp)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadPersonIdByUpdateTime(timestamp);
      });
      return retval;
    }

    public List<int> loadPersonIdByUpdateTime(long timestamp)
    {
      var asyncResult = Begin_loadPersonIdByUpdateTime(null, null, timestamp);
      return End_loadPersonIdByUpdateTime(asyncResult);

    }
    public IAsyncResult send_loadPersonIdByUpdateTime(AsyncCallback callback, object state, long timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTime", TMessageType.Call, seqid_));
      loadPersonIdByUpdateTime_args args = new loadPersonIdByUpdateTime_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadPersonIdByUpdateTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadPersonIdByUpdateTime_result result = new loadPersonIdByUpdateTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadPersonIdByUpdateTime failed: unknown result");
    }

    
    public IAsyncResult Begin_loadPersonIdByUpdateTimeTimeStr(AsyncCallback callback, object state, string timestamp)
    {
      return send_loadPersonIdByUpdateTimeTimeStr(callback, state, timestamp);
    }

    public List<int> End_loadPersonIdByUpdateTimeTimeStr(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadPersonIdByUpdateTimeTimeStr();
    }

    public async Task<List<int>> loadPersonIdByUpdateTimeTimeStrAsync(string timestamp)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadPersonIdByUpdateTimeTimeStr(timestamp);
      });
      return retval;
    }

    public List<int> loadPersonIdByUpdateTimeTimeStr(string timestamp)
    {
      var asyncResult = Begin_loadPersonIdByUpdateTimeTimeStr(null, null, timestamp);
      return End_loadPersonIdByUpdateTimeTimeStr(asyncResult);

    }
    public IAsyncResult send_loadPersonIdByUpdateTimeTimeStr(AsyncCallback callback, object state, string timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTimeTimeStr", TMessageType.Call, seqid_));
      loadPersonIdByUpdateTimeTimeStr_args args = new loadPersonIdByUpdateTimeTimeStr_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadPersonIdByUpdateTimeTimeStr()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadPersonIdByUpdateTimeTimeStr_result result = new loadPersonIdByUpdateTimeTimeStr_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadPersonIdByUpdateTimeTimeStr failed: unknown result");
    }

    
    public IAsyncResult Begin_loadPersonIdByWhere(AsyncCallback callback, object state, string @where)
    {
      return send_loadPersonIdByWhere(callback, state, @where);
    }

    public List<int> End_loadPersonIdByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadPersonIdByWhere();
    }

    public async Task<List<int>> loadPersonIdByWhereAsync(string @where)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadPersonIdByWhere(where);
      });
      return retval;
    }

    public List<int> loadPersonIdByWhere(string @where)
    {
      var asyncResult = Begin_loadPersonIdByWhere(null, null, @where);
      return End_loadPersonIdByWhere(asyncResult);

    }
    public IAsyncResult send_loadPersonIdByWhere(AsyncCallback callback, object state, string @where)
    {
      oprot_.WriteMessageBegin(new TMessage("loadPersonIdByWhere", TMessageType.Call, seqid_));
      loadPersonIdByWhere_args args = new loadPersonIdByWhere_args();
      args.Where = @where;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadPersonIdByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadPersonIdByWhere_result result = new loadPersonIdByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadPersonIdByWhere failed: unknown result");
    }

    
    public IAsyncResult Begin_loadUpdatedPersons(AsyncCallback callback, object state, long timestamp)
    {
      return send_loadUpdatedPersons(callback, state, timestamp);
    }

    public List<int> End_loadUpdatedPersons(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadUpdatedPersons();
    }

    public async Task<List<int>> loadUpdatedPersonsAsync(long timestamp)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadUpdatedPersons(timestamp);
      });
      return retval;
    }

    public List<int> loadUpdatedPersons(long timestamp)
    {
      var asyncResult = Begin_loadUpdatedPersons(null, null, timestamp);
      return End_loadUpdatedPersons(asyncResult);

    }
    public IAsyncResult send_loadUpdatedPersons(AsyncCallback callback, object state, long timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("loadUpdatedPersons", TMessageType.Call, seqid_));
      loadUpdatedPersons_args args = new loadUpdatedPersons_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadUpdatedPersons()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadUpdatedPersons_result result = new loadUpdatedPersons_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadUpdatedPersons failed: unknown result");
    }

    
    public IAsyncResult Begin_loadUpdatedPersonsTimestr(AsyncCallback callback, object state, string timestamp)
    {
      return send_loadUpdatedPersonsTimestr(callback, state, timestamp);
    }

    public List<int> End_loadUpdatedPersonsTimestr(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loadUpdatedPersonsTimestr();
    }

    public async Task<List<int>> loadUpdatedPersonsTimestrAsync(string timestamp)
    {
      List<int> retval;
      retval = await Task.Run(() =>
      {
        return loadUpdatedPersonsTimestr(timestamp);
      });
      return retval;
    }

    public List<int> loadUpdatedPersonsTimestr(string timestamp)
    {
      var asyncResult = Begin_loadUpdatedPersonsTimestr(null, null, timestamp);
      return End_loadUpdatedPersonsTimestr(asyncResult);

    }
    public IAsyncResult send_loadUpdatedPersonsTimestr(AsyncCallback callback, object state, string timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("loadUpdatedPersonsTimestr", TMessageType.Call, seqid_));
      loadUpdatedPersonsTimestr_args args = new loadUpdatedPersonsTimestr_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public List<int> recv_loadUpdatedPersonsTimestr()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loadUpdatedPersonsTimestr_result result = new loadUpdatedPersonsTimestr_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadUpdatedPersonsTimestr failed: unknown result");
    }

    
    public IAsyncResult Begin_offline(AsyncCallback callback, object state, Token token)
    {
      return send_offline(callback, state, token);
    }

    public void End_offline(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_offline();
    }

    public async Task offlineAsync(Token token)
    {
      await Task.Run(() =>
      {
        offline(token);
      });
    }

    public void offline(Token token)
    {
      var asyncResult = Begin_offline(null, null, token);
      End_offline(asyncResult);

    }
    public IAsyncResult send_offline(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("offline", TMessageType.Call, seqid_));
      offline_args args = new offline_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_offline()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      offline_result result = new offline_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_online(AsyncCallback callback, object state, DeviceBean device)
    {
      return send_online(callback, state, device);
    }

    public Token End_online(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_online();
    }

    public async Task<Token> onlineAsync(DeviceBean device)
    {
      Token retval;
      retval = await Task.Run(() =>
      {
        return online(device);
      });
      return retval;
    }

    public Token online(DeviceBean device)
    {
      var asyncResult = Begin_online(null, null, device);
      return End_online(asyncResult);

    }
    public IAsyncResult send_online(AsyncCallback callback, object state, DeviceBean device)
    {
      oprot_.WriteMessageBegin(new TMessage("online", TMessageType.Call, seqid_));
      online_args args = new online_args();
      args.Device = device;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public Token recv_online()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      online_result result = new online_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "online failed: unknown result");
    }

    
    public IAsyncResult Begin_registerDevice(AsyncCallback callback, object state, DeviceBean newDevice)
    {
      return send_registerDevice(callback, state, newDevice);
    }

    public DeviceBean End_registerDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerDevice();
    }

    public async Task<DeviceBean> registerDeviceAsync(DeviceBean newDevice)
    {
      DeviceBean retval;
      retval = await Task.Run(() =>
      {
        return registerDevice(newDevice);
      });
      return retval;
    }

    public DeviceBean registerDevice(DeviceBean newDevice)
    {
      var asyncResult = Begin_registerDevice(null, null, newDevice);
      return End_registerDevice(asyncResult);

    }
    public IAsyncResult send_registerDevice(AsyncCallback callback, object state, DeviceBean newDevice)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Call, seqid_));
      registerDevice_args args = new registerDevice_args();
      args.NewDevice = newDevice;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public DeviceBean recv_registerDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerDevice_result result = new registerDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDevice failed: unknown result");
    }

    
    public IAsyncResult Begin_releasePersonToken(AsyncCallback callback, object state, Token token)
    {
      return send_releasePersonToken(callback, state, token);
    }

    public void End_releasePersonToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_releasePersonToken();
    }

    public async Task releasePersonTokenAsync(Token token)
    {
      await Task.Run(() =>
      {
        releasePersonToken(token);
      });
    }

    public void releasePersonToken(Token token)
    {
      var asyncResult = Begin_releasePersonToken(null, null, token);
      End_releasePersonToken(asyncResult);

    }
    public IAsyncResult send_releasePersonToken(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("releasePersonToken", TMessageType.Call, seqid_));
      releasePersonToken_args args = new releasePersonToken_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_releasePersonToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      releasePersonToken_result result = new releasePersonToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_releaseRootToken(AsyncCallback callback, object state, Token token)
    {
      return send_releaseRootToken(callback, state, token);
    }

    public void End_releaseRootToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_releaseRootToken();
    }

    public async Task releaseRootTokenAsync(Token token)
    {
      await Task.Run(() =>
      {
        releaseRootToken(token);
      });
    }

    public void releaseRootToken(Token token)
    {
      var asyncResult = Begin_releaseRootToken(null, null, token);
      End_releaseRootToken(asyncResult);

    }
    public IAsyncResult send_releaseRootToken(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("releaseRootToken", TMessageType.Call, seqid_));
      releaseRootToken_args args = new releaseRootToken_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_releaseRootToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      releaseRootToken_result result = new releaseRootToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_releaseUserToken(AsyncCallback callback, object state, Token token)
    {
      return send_releaseUserToken(callback, state, token);
    }

    public void End_releaseUserToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_releaseUserToken();
    }

    public async Task releaseUserTokenAsync(Token token)
    {
      await Task.Run(() =>
      {
        releaseUserToken(token);
      });
    }

    public void releaseUserToken(Token token)
    {
      var asyncResult = Begin_releaseUserToken(null, null, token);
      End_releaseUserToken(asyncResult);

    }
    public IAsyncResult send_releaseUserToken(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("releaseUserToken", TMessageType.Call, seqid_));
      releaseUserToken_args args = new releaseUserToken_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_releaseUserToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      releaseUserToken_result result = new releaseUserToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_replaceFeature(AsyncCallback callback, object state, int personId, string featureMd5, bool deleteOldFeatureImage, Token token)
    {
      return send_replaceFeature(callback, state, personId, featureMd5, deleteOldFeatureImage, token);
    }

    public void End_replaceFeature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_replaceFeature();
    }

    public async Task replaceFeatureAsync(int personId, string featureMd5, bool deleteOldFeatureImage, Token token)
    {
      await Task.Run(() =>
      {
        replaceFeature(personId, featureMd5, deleteOldFeatureImage, token);
      });
    }

    public void replaceFeature(int personId, string featureMd5, bool deleteOldFeatureImage, Token token)
    {
      var asyncResult = Begin_replaceFeature(null, null, personId, featureMd5, deleteOldFeatureImage, token);
      End_replaceFeature(asyncResult);

    }
    public IAsyncResult send_replaceFeature(AsyncCallback callback, object state, int personId, string featureMd5, bool deleteOldFeatureImage, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("replaceFeature", TMessageType.Call, seqid_));
      replaceFeature_args args = new replaceFeature_args();
      args.PersonId = personId;
      args.FeatureMd5 = featureMd5;
      args.DeleteOldFeatureImage = deleteOldFeatureImage;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_replaceFeature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      replaceFeature_result result = new replaceFeature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_rootGroupOfDevice(AsyncCallback callback, object state, int deviceId)
    {
      return send_rootGroupOfDevice(callback, state, deviceId);
    }

    public int End_rootGroupOfDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_rootGroupOfDevice();
    }

    public async Task<int> rootGroupOfDeviceAsync(int deviceId)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return rootGroupOfDevice(deviceId);
      });
      return retval;
    }

    public int rootGroupOfDevice(int deviceId)
    {
      var asyncResult = Begin_rootGroupOfDevice(null, null, deviceId);
      return End_rootGroupOfDevice(asyncResult);

    }
    public IAsyncResult send_rootGroupOfDevice(AsyncCallback callback, object state, int deviceId)
    {
      oprot_.WriteMessageBegin(new TMessage("rootGroupOfDevice", TMessageType.Call, seqid_));
      rootGroupOfDevice_args args = new rootGroupOfDevice_args();
      args.DeviceId = deviceId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_rootGroupOfDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      rootGroupOfDevice_result result = new rootGroupOfDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rootGroupOfDevice failed: unknown result");
    }

    
    public IAsyncResult Begin_rootGroupOfPerson(AsyncCallback callback, object state, int personId)
    {
      return send_rootGroupOfPerson(callback, state, personId);
    }

    public int End_rootGroupOfPerson(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_rootGroupOfPerson();
    }

    public async Task<int> rootGroupOfPersonAsync(int personId)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return rootGroupOfPerson(personId);
      });
      return retval;
    }

    public int rootGroupOfPerson(int personId)
    {
      var asyncResult = Begin_rootGroupOfPerson(null, null, personId);
      return End_rootGroupOfPerson(asyncResult);

    }
    public IAsyncResult send_rootGroupOfPerson(AsyncCallback callback, object state, int personId)
    {
      oprot_.WriteMessageBegin(new TMessage("rootGroupOfPerson", TMessageType.Call, seqid_));
      rootGroupOfPerson_args args = new rootGroupOfPerson_args();
      args.PersonId = personId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_rootGroupOfPerson()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      rootGroupOfPerson_result result = new rootGroupOfPerson_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rootGroupOfPerson failed: unknown result");
    }

    
    public IAsyncResult Begin_runCmd(AsyncCallback callback, object state, List<int> target, bool @group, string cmdpath, string jsonArgs, string ackChannel, Token token)
    {
      return send_runCmd(callback, state, target, @group, cmdpath, jsonArgs, ackChannel, token);
    }

    public int End_runCmd(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_runCmd();
    }

    public async Task<int> runCmdAsync(List<int> target, bool @group, string cmdpath, string jsonArgs, string ackChannel, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return runCmd(target, group, cmdpath, jsonArgs, ackChannel, token);
      });
      return retval;
    }

    public int runCmd(List<int> target, bool @group, string cmdpath, string jsonArgs, string ackChannel, Token token)
    {
      var asyncResult = Begin_runCmd(null, null, target, @group, cmdpath, jsonArgs, ackChannel, token);
      return End_runCmd(asyncResult);

    }
    public IAsyncResult send_runCmd(AsyncCallback callback, object state, List<int> target, bool @group, string cmdpath, string jsonArgs, string ackChannel, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("runCmd", TMessageType.Call, seqid_));
      runCmd_args args = new runCmd_args();
      args.Target = target;
      args.Group = @group;
      args.Cmdpath = cmdpath;
      args.JsonArgs = jsonArgs;
      args.AckChannel = ackChannel;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_runCmd()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      runCmd_result result = new runCmd_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "runCmd failed: unknown result");
    }

    
    public IAsyncResult Begin_runTask(AsyncCallback callback, object state, string taskQueue, string cmdpath, string jsonArgs, string ackChannel, Token token)
    {
      return send_runTask(callback, state, taskQueue, cmdpath, jsonArgs, ackChannel, token);
    }

    public bool End_runTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_runTask();
    }

    public async Task<bool> runTaskAsync(string taskQueue, string cmdpath, string jsonArgs, string ackChannel, Token token)
    {
      bool retval;
      retval = await Task.Run(() =>
      {
        return runTask(taskQueue, cmdpath, jsonArgs, ackChannel, token);
      });
      return retval;
    }

    public bool runTask(string taskQueue, string cmdpath, string jsonArgs, string ackChannel, Token token)
    {
      var asyncResult = Begin_runTask(null, null, taskQueue, cmdpath, jsonArgs, ackChannel, token);
      return End_runTask(asyncResult);

    }
    public IAsyncResult send_runTask(AsyncCallback callback, object state, string taskQueue, string cmdpath, string jsonArgs, string ackChannel, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("runTask", TMessageType.Call, seqid_));
      runTask_args args = new runTask_args();
      args.TaskQueue = taskQueue;
      args.Cmdpath = cmdpath;
      args.JsonArgs = jsonArgs;
      args.AckChannel = ackChannel;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public bool recv_runTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      runTask_result result = new runTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "runTask failed: unknown result");
    }

    
    public IAsyncResult Begin_saveDevice(AsyncCallback callback, object state, DeviceBean deviceBean, Token token)
    {
      return send_saveDevice(callback, state, deviceBean, token);
    }

    public DeviceBean End_saveDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_saveDevice();
    }

    public async Task<DeviceBean> saveDeviceAsync(DeviceBean deviceBean, Token token)
    {
      DeviceBean retval;
      retval = await Task.Run(() =>
      {
        return saveDevice(deviceBean, token);
      });
      return retval;
    }

    public DeviceBean saveDevice(DeviceBean deviceBean, Token token)
    {
      var asyncResult = Begin_saveDevice(null, null, deviceBean, token);
      return End_saveDevice(asyncResult);

    }
    public IAsyncResult send_saveDevice(AsyncCallback callback, object state, DeviceBean deviceBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("saveDevice", TMessageType.Call, seqid_));
      saveDevice_args args = new saveDevice_args();
      args.DeviceBean = deviceBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public DeviceBean recv_saveDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      saveDevice_result result = new saveDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saveDevice failed: unknown result");
    }

    
    public IAsyncResult Begin_saveDeviceGroup(AsyncCallback callback, object state, DeviceGroupBean deviceGroupBean, Token token)
    {
      return send_saveDeviceGroup(callback, state, deviceGroupBean, token);
    }

    public DeviceGroupBean End_saveDeviceGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_saveDeviceGroup();
    }

    public async Task<DeviceGroupBean> saveDeviceGroupAsync(DeviceGroupBean deviceGroupBean, Token token)
    {
      DeviceGroupBean retval;
      retval = await Task.Run(() =>
      {
        return saveDeviceGroup(deviceGroupBean, token);
      });
      return retval;
    }

    public DeviceGroupBean saveDeviceGroup(DeviceGroupBean deviceGroupBean, Token token)
    {
      var asyncResult = Begin_saveDeviceGroup(null, null, deviceGroupBean, token);
      return End_saveDeviceGroup(asyncResult);

    }
    public IAsyncResult send_saveDeviceGroup(AsyncCallback callback, object state, DeviceGroupBean deviceGroupBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("saveDeviceGroup", TMessageType.Call, seqid_));
      saveDeviceGroup_args args = new saveDeviceGroup_args();
      args.DeviceGroupBean = deviceGroupBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public DeviceGroupBean recv_saveDeviceGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      saveDeviceGroup_result result = new saveDeviceGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saveDeviceGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_savePermit(AsyncCallback callback, object state, PermitBean permitBean, Token token)
    {
      return send_savePermit(callback, state, permitBean, token);
    }

    public PermitBean End_savePermit(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePermit();
    }

    public async Task<PermitBean> savePermitAsync(PermitBean permitBean, Token token)
    {
      PermitBean retval;
      retval = await Task.Run(() =>
      {
        return savePermit(permitBean, token);
      });
      return retval;
    }

    public PermitBean savePermit(PermitBean permitBean, Token token)
    {
      var asyncResult = Begin_savePermit(null, null, permitBean, token);
      return End_savePermit(asyncResult);

    }
    public IAsyncResult send_savePermit(AsyncCallback callback, object state, PermitBean permitBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePermit", TMessageType.Call, seqid_));
      savePermit_args args = new savePermit_args();
      args.PermitBean = permitBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PermitBean recv_savePermit()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePermit_result result = new savePermit_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePermit failed: unknown result");
    }

    
    public IAsyncResult Begin_savePermitWithSchedule(AsyncCallback callback, object state, int deviceGroupId, int personGroupId, string schedule, Token token)
    {
      return send_savePermitWithSchedule(callback, state, deviceGroupId, personGroupId, schedule, token);
    }

    public PermitBean End_savePermitWithSchedule(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePermitWithSchedule();
    }

    public async Task<PermitBean> savePermitWithScheduleAsync(int deviceGroupId, int personGroupId, string schedule, Token token)
    {
      PermitBean retval;
      retval = await Task.Run(() =>
      {
        return savePermitWithSchedule(deviceGroupId, personGroupId, schedule, token);
      });
      return retval;
    }

    public PermitBean savePermitWithSchedule(int deviceGroupId, int personGroupId, string schedule, Token token)
    {
      var asyncResult = Begin_savePermitWithSchedule(null, null, deviceGroupId, personGroupId, schedule, token);
      return End_savePermitWithSchedule(asyncResult);

    }
    public IAsyncResult send_savePermitWithSchedule(AsyncCallback callback, object state, int deviceGroupId, int personGroupId, string schedule, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePermitWithSchedule", TMessageType.Call, seqid_));
      savePermitWithSchedule_args args = new savePermitWithSchedule_args();
      args.DeviceGroupId = deviceGroupId;
      args.PersonGroupId = personGroupId;
      args.Schedule = schedule;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PermitBean recv_savePermitWithSchedule()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePermitWithSchedule_result result = new savePermitWithSchedule_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePermitWithSchedule failed: unknown result");
    }

    
    public IAsyncResult Begin_savePerson(AsyncCallback callback, object state, PersonBean personBean, Token token)
    {
      return send_savePerson(callback, state, personBean, token);
    }

    public PersonBean End_savePerson(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePerson();
    }

    public async Task<PersonBean> savePersonAsync(PersonBean personBean, Token token)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return savePerson(personBean, token);
      });
      return retval;
    }

    public PersonBean savePerson(PersonBean personBean, Token token)
    {
      var asyncResult = Begin_savePerson(null, null, personBean, token);
      return End_savePerson(asyncResult);

    }
    public IAsyncResult send_savePerson(AsyncCallback callback, object state, PersonBean personBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePerson", TMessageType.Call, seqid_));
      savePerson_args args = new savePerson_args();
      args.PersonBean = personBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_savePerson()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePerson_result result = new savePerson_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePerson failed: unknown result");
    }

    
    public IAsyncResult Begin_savePersonFull(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, byte[] featureImage, FaceBean featureFaceBean, Token token)
    {
      return send_savePersonFull(callback, state, personBean, idPhoto, feature, featureVersion, featureImage, featureFaceBean, token);
    }

    public PersonBean End_savePersonFull(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePersonFull();
    }

    public async Task<PersonBean> savePersonFullAsync(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, byte[] featureImage, FaceBean featureFaceBean, Token token)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return savePersonFull(personBean, idPhoto, feature, featureVersion, featureImage, featureFaceBean, token);
      });
      return retval;
    }

    public PersonBean savePersonFull(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, byte[] featureImage, FaceBean featureFaceBean, Token token)
    {
      var asyncResult = Begin_savePersonFull(null, null, personBean, idPhoto, feature, featureVersion, featureImage, featureFaceBean, token);
      return End_savePersonFull(asyncResult);

    }
    public IAsyncResult send_savePersonFull(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, byte[] featureImage, FaceBean featureFaceBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersonFull", TMessageType.Call, seqid_));
      savePersonFull_args args = new savePersonFull_args();
      args.PersonBean = personBean;
      args.IdPhoto = idPhoto;
      args.Feature = feature;
      args.FeatureVersion = featureVersion;
      args.FeatureImage = featureImage;
      args.FeatureFaceBean = featureFaceBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_savePersonFull()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersonFull_result result = new savePersonFull_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePersonFull failed: unknown result");
    }

    
    public IAsyncResult Begin_savePersonGroup(AsyncCallback callback, object state, PersonGroupBean personGroupBean, Token token)
    {
      return send_savePersonGroup(callback, state, personGroupBean, token);
    }

    public PersonGroupBean End_savePersonGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePersonGroup();
    }

    public async Task<PersonGroupBean> savePersonGroupAsync(PersonGroupBean personGroupBean, Token token)
    {
      PersonGroupBean retval;
      retval = await Task.Run(() =>
      {
        return savePersonGroup(personGroupBean, token);
      });
      return retval;
    }

    public PersonGroupBean savePersonGroup(PersonGroupBean personGroupBean, Token token)
    {
      var asyncResult = Begin_savePersonGroup(null, null, personGroupBean, token);
      return End_savePersonGroup(asyncResult);

    }
    public IAsyncResult send_savePersonGroup(AsyncCallback callback, object state, PersonGroupBean personGroupBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersonGroup", TMessageType.Call, seqid_));
      savePersonGroup_args args = new savePersonGroup_args();
      args.PersonGroupBean = personGroupBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonGroupBean recv_savePersonGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersonGroup_result result = new savePersonGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePersonGroup failed: unknown result");
    }

    
    public IAsyncResult Begin_savePersonWithPhoto(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, Token token)
    {
      return send_savePersonWithPhoto(callback, state, personBean, idPhoto, token);
    }

    public PersonBean End_savePersonWithPhoto(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePersonWithPhoto();
    }

    public async Task<PersonBean> savePersonWithPhotoAsync(PersonBean personBean, byte[] idPhoto, Token token)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return savePersonWithPhoto(personBean, idPhoto, token);
      });
      return retval;
    }

    public PersonBean savePersonWithPhoto(PersonBean personBean, byte[] idPhoto, Token token)
    {
      var asyncResult = Begin_savePersonWithPhoto(null, null, personBean, idPhoto, token);
      return End_savePersonWithPhoto(asyncResult);

    }
    public IAsyncResult send_savePersonWithPhoto(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersonWithPhoto", TMessageType.Call, seqid_));
      savePersonWithPhoto_args args = new savePersonWithPhoto_args();
      args.PersonBean = personBean;
      args.IdPhoto = idPhoto;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_savePersonWithPhoto()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersonWithPhoto_result result = new savePersonWithPhoto_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePersonWithPhoto failed: unknown result");
    }

    
    public IAsyncResult Begin_savePersonWithPhotoAndFeature(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, FeatureBean featureBean, Token token)
    {
      return send_savePersonWithPhotoAndFeature(callback, state, personBean, idPhoto, featureBean, token);
    }

    public PersonBean End_savePersonWithPhotoAndFeature(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePersonWithPhotoAndFeature();
    }

    public async Task<PersonBean> savePersonWithPhotoAndFeatureAsync(PersonBean personBean, byte[] idPhoto, FeatureBean featureBean, Token token)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return savePersonWithPhotoAndFeature(personBean, idPhoto, featureBean, token);
      });
      return retval;
    }

    public PersonBean savePersonWithPhotoAndFeature(PersonBean personBean, byte[] idPhoto, FeatureBean featureBean, Token token)
    {
      var asyncResult = Begin_savePersonWithPhotoAndFeature(null, null, personBean, idPhoto, featureBean, token);
      return End_savePersonWithPhotoAndFeature(asyncResult);

    }
    public IAsyncResult send_savePersonWithPhotoAndFeature(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, FeatureBean featureBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeature", TMessageType.Call, seqid_));
      savePersonWithPhotoAndFeature_args args = new savePersonWithPhotoAndFeature_args();
      args.PersonBean = personBean;
      args.IdPhoto = idPhoto;
      args.FeatureBean = featureBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_savePersonWithPhotoAndFeature()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersonWithPhotoAndFeature_result result = new savePersonWithPhotoAndFeature_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePersonWithPhotoAndFeature failed: unknown result");
    }

    
    public IAsyncResult Begin_savePersonWithPhotoAndFeatureMultiFaces(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<FaceBean> faceBeans, Token token)
    {
      return send_savePersonWithPhotoAndFeatureMultiFaces(callback, state, personBean, idPhoto, feature, featureVersion, faceBeans, token);
    }

    public PersonBean End_savePersonWithPhotoAndFeatureMultiFaces(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePersonWithPhotoAndFeatureMultiFaces();
    }

    public async Task<PersonBean> savePersonWithPhotoAndFeatureMultiFacesAsync(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<FaceBean> faceBeans, Token token)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return savePersonWithPhotoAndFeatureMultiFaces(personBean, idPhoto, feature, featureVersion, faceBeans, token);
      });
      return retval;
    }

    public PersonBean savePersonWithPhotoAndFeatureMultiFaces(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<FaceBean> faceBeans, Token token)
    {
      var asyncResult = Begin_savePersonWithPhotoAndFeatureMultiFaces(null, null, personBean, idPhoto, feature, featureVersion, faceBeans, token);
      return End_savePersonWithPhotoAndFeatureMultiFaces(asyncResult);

    }
    public IAsyncResult send_savePersonWithPhotoAndFeatureMultiFaces(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<FaceBean> faceBeans, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiFaces", TMessageType.Call, seqid_));
      savePersonWithPhotoAndFeatureMultiFaces_args args = new savePersonWithPhotoAndFeatureMultiFaces_args();
      args.PersonBean = personBean;
      args.IdPhoto = idPhoto;
      args.Feature = feature;
      args.FeatureVersion = featureVersion;
      args.FaceBeans = faceBeans;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_savePersonWithPhotoAndFeatureMultiFaces()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersonWithPhotoAndFeatureMultiFaces_result result = new savePersonWithPhotoAndFeatureMultiFaces_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePersonWithPhotoAndFeatureMultiFaces failed: unknown result");
    }

    
    public IAsyncResult Begin_savePersonWithPhotoAndFeatureMultiImage(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<byte[]> photos, List<FaceBean> faces, Token token)
    {
      return send_savePersonWithPhotoAndFeatureMultiImage(callback, state, personBean, idPhoto, feature, featureVersion, photos, faces, token);
    }

    public PersonBean End_savePersonWithPhotoAndFeatureMultiImage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePersonWithPhotoAndFeatureMultiImage();
    }

    public async Task<PersonBean> savePersonWithPhotoAndFeatureMultiImageAsync(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<byte[]> photos, List<FaceBean> faces, Token token)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return savePersonWithPhotoAndFeatureMultiImage(personBean, idPhoto, feature, featureVersion, photos, faces, token);
      });
      return retval;
    }

    public PersonBean savePersonWithPhotoAndFeatureMultiImage(PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<byte[]> photos, List<FaceBean> faces, Token token)
    {
      var asyncResult = Begin_savePersonWithPhotoAndFeatureMultiImage(null, null, personBean, idPhoto, feature, featureVersion, photos, faces, token);
      return End_savePersonWithPhotoAndFeatureMultiImage(asyncResult);

    }
    public IAsyncResult send_savePersonWithPhotoAndFeatureMultiImage(AsyncCallback callback, object state, PersonBean personBean, byte[] idPhoto, byte[] feature, string featureVersion, List<byte[]> photos, List<FaceBean> faces, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiImage", TMessageType.Call, seqid_));
      savePersonWithPhotoAndFeatureMultiImage_args args = new savePersonWithPhotoAndFeatureMultiImage_args();
      args.PersonBean = personBean;
      args.IdPhoto = idPhoto;
      args.Feature = feature;
      args.FeatureVersion = featureVersion;
      args.Photos = photos;
      args.Faces = faces;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_savePersonWithPhotoAndFeatureMultiImage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersonWithPhotoAndFeatureMultiImage_result result = new savePersonWithPhotoAndFeatureMultiImage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePersonWithPhotoAndFeatureMultiImage failed: unknown result");
    }

    
    public IAsyncResult Begin_savePersonWithPhotoAndFeatureSaved(AsyncCallback callback, object state, PersonBean personBean, string idPhotoMd5, string featureMd5, Token token)
    {
      return send_savePersonWithPhotoAndFeatureSaved(callback, state, personBean, idPhotoMd5, featureMd5, token);
    }

    public PersonBean End_savePersonWithPhotoAndFeatureSaved(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePersonWithPhotoAndFeatureSaved();
    }

    public async Task<PersonBean> savePersonWithPhotoAndFeatureSavedAsync(PersonBean personBean, string idPhotoMd5, string featureMd5, Token token)
    {
      PersonBean retval;
      retval = await Task.Run(() =>
      {
        return savePersonWithPhotoAndFeatureSaved(personBean, idPhotoMd5, featureMd5, token);
      });
      return retval;
    }

    public PersonBean savePersonWithPhotoAndFeatureSaved(PersonBean personBean, string idPhotoMd5, string featureMd5, Token token)
    {
      var asyncResult = Begin_savePersonWithPhotoAndFeatureSaved(null, null, personBean, idPhotoMd5, featureMd5, token);
      return End_savePersonWithPhotoAndFeatureSaved(asyncResult);

    }
    public IAsyncResult send_savePersonWithPhotoAndFeatureSaved(AsyncCallback callback, object state, PersonBean personBean, string idPhotoMd5, string featureMd5, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureSaved", TMessageType.Call, seqid_));
      savePersonWithPhotoAndFeatureSaved_args args = new savePersonWithPhotoAndFeatureSaved_args();
      args.PersonBean = personBean;
      args.IdPhotoMd5 = idPhotoMd5;
      args.FeatureMd5 = featureMd5;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public PersonBean recv_savePersonWithPhotoAndFeatureSaved()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersonWithPhotoAndFeatureSaved_result result = new savePersonWithPhotoAndFeatureSaved_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePersonWithPhotoAndFeatureSaved failed: unknown result");
    }

    
    public IAsyncResult Begin_savePersons(AsyncCallback callback, object state, List<PersonBean> persons, Token token)
    {
      return send_savePersons(callback, state, persons, token);
    }

    public void End_savePersons(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_savePersons();
    }

    public async Task savePersonsAsync(List<PersonBean> persons, Token token)
    {
      await Task.Run(() =>
      {
        savePersons(persons, token);
      });
    }

    public void savePersons(List<PersonBean> persons, Token token)
    {
      var asyncResult = Begin_savePersons(null, null, persons, token);
      End_savePersons(asyncResult);

    }
    public IAsyncResult send_savePersons(AsyncCallback callback, object state, List<PersonBean> persons, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersons", TMessageType.Call, seqid_));
      savePersons_args args = new savePersons_args();
      args.Persons = persons;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_savePersons()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersons_result result = new savePersons_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_savePersonsWithPhoto(AsyncCallback callback, object state, List<byte[]> photos, List<PersonBean> persons, Token token)
    {
      return send_savePersonsWithPhoto(callback, state, photos, persons, token);
    }

    public int End_savePersonsWithPhoto(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_savePersonsWithPhoto();
    }

    public async Task<int> savePersonsWithPhotoAsync(List<byte[]> photos, List<PersonBean> persons, Token token)
    {
      int retval;
      retval = await Task.Run(() =>
      {
        return savePersonsWithPhoto(photos, persons, token);
      });
      return retval;
    }

    public int savePersonsWithPhoto(List<byte[]> photos, List<PersonBean> persons, Token token)
    {
      var asyncResult = Begin_savePersonsWithPhoto(null, null, photos, persons, token);
      return End_savePersonsWithPhoto(asyncResult);

    }
    public IAsyncResult send_savePersonsWithPhoto(AsyncCallback callback, object state, List<byte[]> photos, List<PersonBean> persons, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("savePersonsWithPhoto", TMessageType.Call, seqid_));
      savePersonsWithPhoto_args args = new savePersonsWithPhoto_args();
      args.Photos = photos;
      args.Persons = persons;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public int recv_savePersonsWithPhoto()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      savePersonsWithPhoto_result result = new savePersonsWithPhoto_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success.HasValue) {
        return result.Success.Value;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "savePersonsWithPhoto failed: unknown result");
    }

    
    public IAsyncResult Begin_saveServiceConfig(AsyncCallback callback, object state, Token token)
    {
      return send_saveServiceConfig(callback, state, token);
    }

    public void End_saveServiceConfig(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_saveServiceConfig();
    }

    public async Task saveServiceConfigAsync(Token token)
    {
      await Task.Run(() =>
      {
        saveServiceConfig(token);
      });
    }

    public void saveServiceConfig(Token token)
    {
      var asyncResult = Begin_saveServiceConfig(null, null, token);
      End_saveServiceConfig(asyncResult);

    }
    public IAsyncResult send_saveServiceConfig(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("saveServiceConfig", TMessageType.Call, seqid_));
      saveServiceConfig_args args = new saveServiceConfig_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_saveServiceConfig()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      saveServiceConfig_result result = new saveServiceConfig_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_sdkTaskQueueOf(AsyncCallback callback, object state, string task, string sdkVersion, Token token)
    {
      return send_sdkTaskQueueOf(callback, state, task, sdkVersion, token);
    }

    public string End_sdkTaskQueueOf(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sdkTaskQueueOf();
    }

    public async Task<string> sdkTaskQueueOfAsync(string task, string sdkVersion, Token token)
    {
      string retval;
      retval = await Task.Run(() =>
      {
        return sdkTaskQueueOf(task, sdkVersion, token);
      });
      return retval;
    }

    public string sdkTaskQueueOf(string task, string sdkVersion, Token token)
    {
      var asyncResult = Begin_sdkTaskQueueOf(null, null, task, sdkVersion, token);
      return End_sdkTaskQueueOf(asyncResult);

    }
    public IAsyncResult send_sdkTaskQueueOf(AsyncCallback callback, object state, string task, string sdkVersion, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("sdkTaskQueueOf", TMessageType.Call, seqid_));
      sdkTaskQueueOf_args args = new sdkTaskQueueOf_args();
      args.Task = task;
      args.SdkVersion = sdkVersion;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public string recv_sdkTaskQueueOf()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sdkTaskQueueOf_result result = new sdkTaskQueueOf_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sdkTaskQueueOf failed: unknown result");
    }

    
    public IAsyncResult Begin_setPersonExpiryDate(AsyncCallback callback, object state, int personId, long expiryDate, Token token)
    {
      return send_setPersonExpiryDate(callback, state, personId, expiryDate, token);
    }

    public void End_setPersonExpiryDate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setPersonExpiryDate();
    }

    public async Task setPersonExpiryDateAsync(int personId, long expiryDate, Token token)
    {
      await Task.Run(() =>
      {
        setPersonExpiryDate(personId, expiryDate, token);
      });
    }

    public void setPersonExpiryDate(int personId, long expiryDate, Token token)
    {
      var asyncResult = Begin_setPersonExpiryDate(null, null, personId, expiryDate, token);
      End_setPersonExpiryDate(asyncResult);

    }
    public IAsyncResult send_setPersonExpiryDate(AsyncCallback callback, object state, int personId, long expiryDate, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("setPersonExpiryDate", TMessageType.Call, seqid_));
      setPersonExpiryDate_args args = new setPersonExpiryDate_args();
      args.PersonId = personId;
      args.ExpiryDate = expiryDate;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_setPersonExpiryDate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setPersonExpiryDate_result result = new setPersonExpiryDate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_setPersonExpiryDateList(AsyncCallback callback, object state, List<int> personIdList, long expiryDate, Token token)
    {
      return send_setPersonExpiryDateList(callback, state, personIdList, expiryDate, token);
    }

    public void End_setPersonExpiryDateList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setPersonExpiryDateList();
    }

    public async Task setPersonExpiryDateListAsync(List<int> personIdList, long expiryDate, Token token)
    {
      await Task.Run(() =>
      {
        setPersonExpiryDateList(personIdList, expiryDate, token);
      });
    }

    public void setPersonExpiryDateList(List<int> personIdList, long expiryDate, Token token)
    {
      var asyncResult = Begin_setPersonExpiryDateList(null, null, personIdList, expiryDate, token);
      End_setPersonExpiryDateList(asyncResult);

    }
    public IAsyncResult send_setPersonExpiryDateList(AsyncCallback callback, object state, List<int> personIdList, long expiryDate, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("setPersonExpiryDateList", TMessageType.Call, seqid_));
      setPersonExpiryDateList_args args = new setPersonExpiryDateList_args();
      args.PersonIdList = personIdList;
      args.ExpiryDate = expiryDate;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_setPersonExpiryDateList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setPersonExpiryDateList_result result = new setPersonExpiryDateList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_setPersonExpiryDateTimeStr(AsyncCallback callback, object state, int personId, string expiryDate, Token token)
    {
      return send_setPersonExpiryDateTimeStr(callback, state, personId, expiryDate, token);
    }

    public void End_setPersonExpiryDateTimeStr(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setPersonExpiryDateTimeStr();
    }

    public async Task setPersonExpiryDateTimeStrAsync(int personId, string expiryDate, Token token)
    {
      await Task.Run(() =>
      {
        setPersonExpiryDateTimeStr(personId, expiryDate, token);
      });
    }

    public void setPersonExpiryDateTimeStr(int personId, string expiryDate, Token token)
    {
      var asyncResult = Begin_setPersonExpiryDateTimeStr(null, null, personId, expiryDate, token);
      End_setPersonExpiryDateTimeStr(asyncResult);

    }
    public IAsyncResult send_setPersonExpiryDateTimeStr(AsyncCallback callback, object state, int personId, string expiryDate, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("setPersonExpiryDateTimeStr", TMessageType.Call, seqid_));
      setPersonExpiryDateTimeStr_args args = new setPersonExpiryDateTimeStr_args();
      args.PersonId = personId;
      args.ExpiryDate = expiryDate;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_setPersonExpiryDateTimeStr()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setPersonExpiryDateTimeStr_result result = new setPersonExpiryDateTimeStr_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_setProperties(AsyncCallback callback, object state, Dictionary<string, string> config, Token token)
    {
      return send_setProperties(callback, state, config, token);
    }

    public void End_setProperties(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setProperties();
    }

    public async Task setPropertiesAsync(Dictionary<string, string> config, Token token)
    {
      await Task.Run(() =>
      {
        setProperties(config, token);
      });
    }

    public void setProperties(Dictionary<string, string> config, Token token)
    {
      var asyncResult = Begin_setProperties(null, null, config, token);
      End_setProperties(asyncResult);

    }
    public IAsyncResult send_setProperties(AsyncCallback callback, object state, Dictionary<string, string> config, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("setProperties", TMessageType.Call, seqid_));
      setProperties_args args = new setProperties_args();
      args.Config = config;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_setProperties()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setProperties_result result = new setProperties_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_setProperty(AsyncCallback callback, object state, string key, string @value, Token token)
    {
      return send_setProperty(callback, state, key, @value, token);
    }

    public void End_setProperty(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setProperty();
    }

    public async Task setPropertyAsync(string key, string @value, Token token)
    {
      await Task.Run(() =>
      {
        setProperty(key, value, token);
      });
    }

    public void setProperty(string key, string @value, Token token)
    {
      var asyncResult = Begin_setProperty(null, null, key, @value, token);
      End_setProperty(asyncResult);

    }
    public IAsyncResult send_setProperty(AsyncCallback callback, object state, string key, string @value, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("setProperty", TMessageType.Call, seqid_));
      setProperty_args args = new setProperty_args();
      args.Key = key;
      args.Value = @value;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_setProperty()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setProperty_result result = new setProperty_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_taskQueueOf(AsyncCallback callback, object state, string task, Token token)
    {
      return send_taskQueueOf(callback, state, task, token);
    }

    public string End_taskQueueOf(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_taskQueueOf();
    }

    public async Task<string> taskQueueOfAsync(string task, Token token)
    {
      string retval;
      retval = await Task.Run(() =>
      {
        return taskQueueOf(task, token);
      });
      return retval;
    }

    public string taskQueueOf(string task, Token token)
    {
      var asyncResult = Begin_taskQueueOf(null, null, task, token);
      return End_taskQueueOf(asyncResult);

    }
    public IAsyncResult send_taskQueueOf(AsyncCallback callback, object state, string task, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("taskQueueOf", TMessageType.Call, seqid_));
      taskQueueOf_args args = new taskQueueOf_args();
      args.Task = task;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public string recv_taskQueueOf()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      taskQueueOf_result result = new taskQueueOf_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "taskQueueOf failed: unknown result");
    }

    
    public IAsyncResult Begin_unbindBorder(AsyncCallback callback, object state, int personGroupId, int deviceGroupId, Token token)
    {
      return send_unbindBorder(callback, state, personGroupId, deviceGroupId, token);
    }

    public void End_unbindBorder(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_unbindBorder();
    }

    public async Task unbindBorderAsync(int personGroupId, int deviceGroupId, Token token)
    {
      await Task.Run(() =>
      {
        unbindBorder(personGroupId, deviceGroupId, token);
      });
    }

    public void unbindBorder(int personGroupId, int deviceGroupId, Token token)
    {
      var asyncResult = Begin_unbindBorder(null, null, personGroupId, deviceGroupId, token);
      End_unbindBorder(asyncResult);

    }
    public IAsyncResult send_unbindBorder(AsyncCallback callback, object state, int personGroupId, int deviceGroupId, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("unbindBorder", TMessageType.Call, seqid_));
      unbindBorder_args args = new unbindBorder_args();
      args.PersonGroupId = personGroupId;
      args.DeviceGroupId = deviceGroupId;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_unbindBorder()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      unbindBorder_result result = new unbindBorder_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      return;
    }

    
    public IAsyncResult Begin_unregisterDevice(AsyncCallback callback, object state, Token token)
    {
      return send_unregisterDevice(callback, state, token);
    }

    public void End_unregisterDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_unregisterDevice();
    }

    public async Task unregisterDeviceAsync(Token token)
    {
      await Task.Run(() =>
      {
        unregisterDevice(token);
      });
    }

    public void unregisterDevice(Token token)
    {
      var asyncResult = Begin_unregisterDevice(null, null, token);
      End_unregisterDevice(asyncResult);

    }
    public IAsyncResult send_unregisterDevice(AsyncCallback callback, object state, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("unregisterDevice", TMessageType.Call, seqid_));
      unregisterDevice_args args = new unregisterDevice_args();
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public void recv_unregisterDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      unregisterDevice_result result = new unregisterDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      if (result.Ex2 != null) {
        throw result.Ex2;
      }
      return;
    }

    
    public IAsyncResult Begin_updateDevice(AsyncCallback callback, object state, DeviceBean deviceBean, Token token)
    {
      return send_updateDevice(callback, state, deviceBean, token);
    }

    public DeviceBean End_updateDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateDevice();
    }

    public async Task<DeviceBean> updateDeviceAsync(DeviceBean deviceBean, Token token)
    {
      DeviceBean retval;
      retval = await Task.Run(() =>
      {
        return updateDevice(deviceBean, token);
      });
      return retval;
    }

    public DeviceBean updateDevice(DeviceBean deviceBean, Token token)
    {
      var asyncResult = Begin_updateDevice(null, null, deviceBean, token);
      return End_updateDevice(asyncResult);

    }
    public IAsyncResult send_updateDevice(AsyncCallback callback, object state, DeviceBean deviceBean, Token token)
    {
      oprot_.WriteMessageBegin(new TMessage("updateDevice", TMessageType.Call, seqid_));
      updateDevice_args args = new updateDevice_args();
      args.DeviceBean = deviceBean;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public DeviceBean recv_updateDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateDevice_result result = new updateDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateDevice failed: unknown result");
    }

    
    public IAsyncResult Begin_version(AsyncCallback callback, object state)
    {
      return send_version(callback, state);
    }

    public string End_version(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_version();
    }

    public async Task<string> versionAsync()
    {
      string retval;
      retval = await Task.Run(() =>
      {
        return version();
      });
      return retval;
    }

    public string version()
    {
      var asyncResult = Begin_version(null, null);
      return End_version(asyncResult);

    }
    public IAsyncResult send_version(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("version", TMessageType.Call, seqid_));
      version_args args = new version_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public string recv_version()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      version_result result = new version_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "version failed: unknown result");
    }

    
    public IAsyncResult Begin_versionInfo(AsyncCallback callback, object state)
    {
      return send_versionInfo(callback, state);
    }

    public Dictionary<string, string> End_versionInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_versionInfo();
    }

    public async Task<Dictionary<string, string>> versionInfoAsync()
    {
      Dictionary<string, string> retval;
      retval = await Task.Run(() =>
      {
        return versionInfo();
      });
      return retval;
    }

    public Dictionary<string, string> versionInfo()
    {
      var asyncResult = Begin_versionInfo(null, null);
      return End_versionInfo(asyncResult);

    }
    public IAsyncResult send_versionInfo(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("versionInfo", TMessageType.Call, seqid_));
      versionInfo_args args = new versionInfo_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    public Dictionary<string, string> recv_versionInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      versionInfo_result result = new versionInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.Success != null) {
        return result.Success;
      }
      if (result.Ex1 != null) {
        throw result.Ex1;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "versionInfo failed: unknown result");
    }

  }
  public class AsyncProcessor : TAsyncProcessor {
    public AsyncProcessor(IAsync iface)
    {
      iface_ = iface;
      processMap_["addFeature"] = addFeature_ProcessAsync;
      processMap_["addFeatureMulti"] = addFeatureMulti_ProcessAsync;
      processMap_["addFeatureWithImage"] = addFeatureWithImage_ProcessAsync;
      processMap_["addImage"] = addImage_ProcessAsync;
      processMap_["addLog"] = addLog_ProcessAsync;
      processMap_["addLogFull"] = addLogFull_ProcessAsync;
      processMap_["addLogs"] = addLogs_ProcessAsync;
      processMap_["addLogsFull"] = addLogsFull_ProcessAsync;
      processMap_["applyAckChannel"] = applyAckChannel_ProcessAsync;
      processMap_["applyAckChannelWithDuration"] = applyAckChannelWithDuration_ProcessAsync;
      processMap_["applyCmdSn"] = applyCmdSn_ProcessAsync;
      processMap_["applyPersonToken"] = applyPersonToken_ProcessAsync;
      processMap_["applyRootToken"] = applyRootToken_ProcessAsync;
      processMap_["applyUserToken"] = applyUserToken_ProcessAsync;
      processMap_["bindBorder"] = bindBorder_ProcessAsync;
      processMap_["childListForDeviceGroup"] = childListForDeviceGroup_ProcessAsync;
      processMap_["childListForPersonGroup"] = childListForPersonGroup_ProcessAsync;
      processMap_["countDeviceByWhere"] = countDeviceByWhere_ProcessAsync;
      processMap_["countDeviceGroupByWhere"] = countDeviceGroupByWhere_ProcessAsync;
      processMap_["countLogByWhere"] = countLogByWhere_ProcessAsync;
      processMap_["countLogLightByVerifyTime"] = countLogLightByVerifyTime_ProcessAsync;
      processMap_["countLogLightByVerifyTimeTimestr"] = countLogLightByVerifyTimeTimestr_ProcessAsync;
      processMap_["countLogLightByWhere"] = countLogLightByWhere_ProcessAsync;
      processMap_["countPersonByWhere"] = countPersonByWhere_ProcessAsync;
      processMap_["countPersonGroupByWhere"] = countPersonGroupByWhere_ProcessAsync;
      processMap_["deleteAllFeaturesByPersonId"] = deleteAllFeaturesByPersonId_ProcessAsync;
      processMap_["deleteDeviceGroup"] = deleteDeviceGroup_ProcessAsync;
      processMap_["deleteFeature"] = deleteFeature_ProcessAsync;
      processMap_["deleteGroupPermitOnDeviceGroup"] = deleteGroupPermitOnDeviceGroup_ProcessAsync;
      processMap_["deleteImage"] = deleteImage_ProcessAsync;
      processMap_["deletePermitById"] = deletePermitById_ProcessAsync;
      processMap_["deletePerson"] = deletePerson_ProcessAsync;
      processMap_["deletePersonByPapersNum"] = deletePersonByPapersNum_ProcessAsync;
      processMap_["deletePersonGroup"] = deletePersonGroup_ProcessAsync;
      processMap_["deletePersonGroupPermit"] = deletePersonGroupPermit_ProcessAsync;
      processMap_["deletePersons"] = deletePersons_ProcessAsync;
      processMap_["deletePersonsByPapersNum"] = deletePersonsByPapersNum_ProcessAsync;
      processMap_["disablePerson"] = disablePerson_ProcessAsync;
      processMap_["disablePersonList"] = disablePersonList_ProcessAsync;
      processMap_["existsDevice"] = existsDevice_ProcessAsync;
      processMap_["existsFeature"] = existsFeature_ProcessAsync;
      processMap_["existsImage"] = existsImage_ProcessAsync;
      processMap_["existsPerson"] = existsPerson_ProcessAsync;
      processMap_["getDevice"] = getDevice_ProcessAsync;
      processMap_["getDeviceGroup"] = getDeviceGroup_ProcessAsync;
      processMap_["getDeviceGroups"] = getDeviceGroups_ProcessAsync;
      processMap_["getDeviceGroupsBelongs"] = getDeviceGroupsBelongs_ProcessAsync;
      processMap_["getDeviceGroupsPermit"] = getDeviceGroupsPermit_ProcessAsync;
      processMap_["getDeviceGroupsPermittedBy"] = getDeviceGroupsPermittedBy_ProcessAsync;
      processMap_["getDeviceIdOfFeature"] = getDeviceIdOfFeature_ProcessAsync;
      processMap_["getDevices"] = getDevices_ProcessAsync;
      processMap_["getDevicesOfGroup"] = getDevicesOfGroup_ProcessAsync;
      processMap_["getFace"] = getFace_ProcessAsync;
      processMap_["getFeature"] = getFeature_ProcessAsync;
      processMap_["getFeatureBytes"] = getFeatureBytes_ProcessAsync;
      processMap_["getFeatures"] = getFeatures_ProcessAsync;
      processMap_["getFeaturesByPersonId"] = getFeaturesByPersonId_ProcessAsync;
      processMap_["getFeaturesByPersonIdAndSdkVersion"] = getFeaturesByPersonIdAndSdkVersion_ProcessAsync;
      processMap_["getFeaturesOfPerson"] = getFeaturesOfPerson_ProcessAsync;
      processMap_["getFeaturesPermittedOnDevice"] = getFeaturesPermittedOnDevice_ProcessAsync;
      processMap_["getGroupPermit"] = getGroupPermit_ProcessAsync;
      processMap_["getGroupPermitOnDeviceGroup"] = getGroupPermitOnDeviceGroup_ProcessAsync;
      processMap_["getGroupPermits"] = getGroupPermits_ProcessAsync;
      processMap_["getImage"] = getImage_ProcessAsync;
      processMap_["getImageBytes"] = getImageBytes_ProcessAsync;
      processMap_["getImagesAssociatedByFeature"] = getImagesAssociatedByFeature_ProcessAsync;
      processMap_["getLogBeansByPersonId"] = getLogBeansByPersonId_ProcessAsync;
      processMap_["getPerson"] = getPerson_ProcessAsync;
      processMap_["getPersonByPapersNum"] = getPersonByPapersNum_ProcessAsync;
      processMap_["getPersonGroup"] = getPersonGroup_ProcessAsync;
      processMap_["getPersonGroups"] = getPersonGroups_ProcessAsync;
      processMap_["getPersonGroupsBelongs"] = getPersonGroupsBelongs_ProcessAsync;
      processMap_["getPersonGroupsPermittedBy"] = getPersonGroupsPermittedBy_ProcessAsync;
      processMap_["getPersonPermit"] = getPersonPermit_ProcessAsync;
      processMap_["getPersonPermits"] = getPersonPermits_ProcessAsync;
      processMap_["getPersons"] = getPersons_ProcessAsync;
      processMap_["getPersonsOfGroup"] = getPersonsOfGroup_ProcessAsync;
      processMap_["getProperty"] = getProperty_ProcessAsync;
      processMap_["getRedisParameters"] = getRedisParameters_ProcessAsync;
      processMap_["getServiceConfig"] = getServiceConfig_ProcessAsync;
      processMap_["getSubDeviceGroup"] = getSubDeviceGroup_ProcessAsync;
      processMap_["getSubPersonGroup"] = getSubPersonGroup_ProcessAsync;
      processMap_["isDisable"] = isDisable_ProcessAsync;
      processMap_["isLocal"] = isLocal_ProcessAsync;
      processMap_["isValidAckChannel"] = isValidAckChannel_ProcessAsync;
      processMap_["isValidCmdSn"] = isValidCmdSn_ProcessAsync;
      processMap_["isValidDeviceToken"] = isValidDeviceToken_ProcessAsync;
      processMap_["isValidPassword"] = isValidPassword_ProcessAsync;
      processMap_["isValidPersonToken"] = isValidPersonToken_ProcessAsync;
      processMap_["isValidRootToken"] = isValidRootToken_ProcessAsync;
      processMap_["isValidToken"] = isValidToken_ProcessAsync;
      processMap_["isValidUserToken"] = isValidUserToken_ProcessAsync;
      processMap_["listOfParentForDeviceGroup"] = listOfParentForDeviceGroup_ProcessAsync;
      processMap_["listOfParentForPersonGroup"] = listOfParentForPersonGroup_ProcessAsync;
      processMap_["loadAllPerson"] = loadAllPerson_ProcessAsync;
      processMap_["loadDeviceByWhere"] = loadDeviceByWhere_ProcessAsync;
      processMap_["loadDeviceGroupByWhere"] = loadDeviceGroupByWhere_ProcessAsync;
      processMap_["loadDeviceGroupIdByWhere"] = loadDeviceGroupIdByWhere_ProcessAsync;
      processMap_["loadDeviceIdByWhere"] = loadDeviceIdByWhere_ProcessAsync;
      processMap_["loadFeatureMd5ByUpdate"] = loadFeatureMd5ByUpdate_ProcessAsync;
      processMap_["loadFeatureMd5ByUpdateTimeStr"] = loadFeatureMd5ByUpdateTimeStr_ProcessAsync;
      processMap_["loadLogByWhere"] = loadLogByWhere_ProcessAsync;
      processMap_["loadLogLightByVerifyTime"] = loadLogLightByVerifyTime_ProcessAsync;
      processMap_["loadLogLightByVerifyTimeTimestr"] = loadLogLightByVerifyTimeTimestr_ProcessAsync;
      processMap_["loadLogLightByWhere"] = loadLogLightByWhere_ProcessAsync;
      processMap_["loadPermitByUpdate"] = loadPermitByUpdate_ProcessAsync;
      processMap_["loadPermitByUpdateTimestr"] = loadPermitByUpdateTimestr_ProcessAsync;
      processMap_["loadPersonByWhere"] = loadPersonByWhere_ProcessAsync;
      processMap_["loadPersonGroupByWhere"] = loadPersonGroupByWhere_ProcessAsync;
      processMap_["loadPersonGroupIdByWhere"] = loadPersonGroupIdByWhere_ProcessAsync;
      processMap_["loadPersonIdByUpdateTime"] = loadPersonIdByUpdateTime_ProcessAsync;
      processMap_["loadPersonIdByUpdateTimeTimeStr"] = loadPersonIdByUpdateTimeTimeStr_ProcessAsync;
      processMap_["loadPersonIdByWhere"] = loadPersonIdByWhere_ProcessAsync;
      processMap_["loadUpdatedPersons"] = loadUpdatedPersons_ProcessAsync;
      processMap_["loadUpdatedPersonsTimestr"] = loadUpdatedPersonsTimestr_ProcessAsync;
      processMap_["offline"] = offline_ProcessAsync;
      processMap_["online"] = online_ProcessAsync;
      processMap_["registerDevice"] = registerDevice_ProcessAsync;
      processMap_["releasePersonToken"] = releasePersonToken_ProcessAsync;
      processMap_["releaseRootToken"] = releaseRootToken_ProcessAsync;
      processMap_["releaseUserToken"] = releaseUserToken_ProcessAsync;
      processMap_["replaceFeature"] = replaceFeature_ProcessAsync;
      processMap_["rootGroupOfDevice"] = rootGroupOfDevice_ProcessAsync;
      processMap_["rootGroupOfPerson"] = rootGroupOfPerson_ProcessAsync;
      processMap_["runCmd"] = runCmd_ProcessAsync;
      processMap_["runTask"] = runTask_ProcessAsync;
      processMap_["saveDevice"] = saveDevice_ProcessAsync;
      processMap_["saveDeviceGroup"] = saveDeviceGroup_ProcessAsync;
      processMap_["savePermit"] = savePermit_ProcessAsync;
      processMap_["savePermitWithSchedule"] = savePermitWithSchedule_ProcessAsync;
      processMap_["savePerson"] = savePerson_ProcessAsync;
      processMap_["savePersonFull"] = savePersonFull_ProcessAsync;
      processMap_["savePersonGroup"] = savePersonGroup_ProcessAsync;
      processMap_["savePersonWithPhoto"] = savePersonWithPhoto_ProcessAsync;
      processMap_["savePersonWithPhotoAndFeature"] = savePersonWithPhotoAndFeature_ProcessAsync;
      processMap_["savePersonWithPhotoAndFeatureMultiFaces"] = savePersonWithPhotoAndFeatureMultiFaces_ProcessAsync;
      processMap_["savePersonWithPhotoAndFeatureMultiImage"] = savePersonWithPhotoAndFeatureMultiImage_ProcessAsync;
      processMap_["savePersonWithPhotoAndFeatureSaved"] = savePersonWithPhotoAndFeatureSaved_ProcessAsync;
      processMap_["savePersons"] = savePersons_ProcessAsync;
      processMap_["savePersonsWithPhoto"] = savePersonsWithPhoto_ProcessAsync;
      processMap_["saveServiceConfig"] = saveServiceConfig_ProcessAsync;
      processMap_["sdkTaskQueueOf"] = sdkTaskQueueOf_ProcessAsync;
      processMap_["setPersonExpiryDate"] = setPersonExpiryDate_ProcessAsync;
      processMap_["setPersonExpiryDateList"] = setPersonExpiryDateList_ProcessAsync;
      processMap_["setPersonExpiryDateTimeStr"] = setPersonExpiryDateTimeStr_ProcessAsync;
      processMap_["setProperties"] = setProperties_ProcessAsync;
      processMap_["setProperty"] = setProperty_ProcessAsync;
      processMap_["taskQueueOf"] = taskQueueOf_ProcessAsync;
      processMap_["unbindBorder"] = unbindBorder_ProcessAsync;
      processMap_["unregisterDevice"] = unregisterDevice_ProcessAsync;
      processMap_["updateDevice"] = updateDevice_ProcessAsync;
      processMap_["version"] = version_ProcessAsync;
      processMap_["versionInfo"] = versionInfo_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private IAsync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        await fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public async Task addFeature_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addFeature_args args = new addFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addFeature_result result = new addFeature_result();
      try
      {
        try
        {
          result.Success = await iface_.addFeatureAsync(args.Feature, args.FeatureVersion, args.PersonId.Value, args.FaecBeans, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task addFeatureMulti_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addFeatureMulti_args args = new addFeatureMulti_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addFeatureMulti_result result = new addFeatureMulti_result();
      try
      {
        try
        {
          result.Success = await iface_.addFeatureMultiAsync(args.Feature, args.FeatureVersion, args.PersonId.Value, args.Photos, args.Faces, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addFeatureMulti", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addFeatureMulti", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task addFeatureWithImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addFeatureWithImage_args args = new addFeatureWithImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addFeatureWithImage_result result = new addFeatureWithImage_result();
      try
      {
        try
        {
          result.Success = await iface_.addFeatureWithImageAsync(args.Feature, args.FeatureVersion, args.PersonId.Value, args.AsIdPhotoIfAbsent.Value, args.FeaturePhoto, args.FaceBean, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addFeatureWithImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addFeatureWithImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task addImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addImage_args args = new addImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addImage_result result = new addImage_result();
      try
      {
        try
        {
          result.Success = await iface_.addImageAsync(args.ImageData, args.DeviceId.Value, args.FaceBean, args.PersonId.Value, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task addLog_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addLog_args args = new addLog_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addLog_result result = new addLog_result();
      try
      {
        try
        {
          await iface_.addLogAsync(args.LogBean, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addLog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addLog", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task addLogFull_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addLogFull_args args = new addLogFull_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addLogFull_result result = new addLogFull_result();
      try
      {
        try
        {
          await iface_.addLogFullAsync(args.LogBean, args.FaceBean, args.FeatureImage, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addLogFull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addLogFull", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task addLogs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addLogs_args args = new addLogs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addLogs_result result = new addLogs_result();
      try
      {
        try
        {
          await iface_.addLogsAsync(args.Beans, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addLogs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addLogs", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task addLogsFull_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addLogsFull_args args = new addLogsFull_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addLogsFull_result result = new addLogsFull_result();
      try
      {
        try
        {
          await iface_.addLogsFullAsync(args.LogBeans, args.FaceBeans, args.FeatureImages, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addLogsFull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addLogsFull", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task applyAckChannel_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyAckChannel_args args = new applyAckChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyAckChannel_result result = new applyAckChannel_result();
      try
      {
        try
        {
          result.Success = await iface_.applyAckChannelAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("applyAckChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyAckChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task applyAckChannelWithDuration_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyAckChannelWithDuration_args args = new applyAckChannelWithDuration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyAckChannelWithDuration_result result = new applyAckChannelWithDuration_result();
      try
      {
        try
        {
          result.Success = await iface_.applyAckChannelWithDurationAsync(args.Duration.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("applyAckChannelWithDuration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyAckChannelWithDuration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task applyCmdSn_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyCmdSn_args args = new applyCmdSn_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyCmdSn_result result = new applyCmdSn_result();
      try
      {
        try
        {
          result.Success = await iface_.applyCmdSnAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("applyCmdSn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyCmdSn", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task applyPersonToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyPersonToken_args args = new applyPersonToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyPersonToken_result result = new applyPersonToken_result();
      try
      {
        try
        {
          result.Success = await iface_.applyPersonTokenAsync(args.PersonId.Value, args.Password, args.IsMd5.Value);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("applyPersonToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyPersonToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task applyRootToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyRootToken_args args = new applyRootToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyRootToken_result result = new applyRootToken_result();
      try
      {
        try
        {
          result.Success = await iface_.applyRootTokenAsync(args.Password, args.IsMd5.Value);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("applyRootToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyRootToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task applyUserToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyUserToken_args args = new applyUserToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyUserToken_result result = new applyUserToken_result();
      try
      {
        try
        {
          result.Success = await iface_.applyUserTokenAsync(args.Userid.Value, args.Password, args.IsMd5.Value);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("applyUserToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyUserToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task bindBorder_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      bindBorder_args args = new bindBorder_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      bindBorder_result result = new bindBorder_result();
      try
      {
        try
        {
          await iface_.bindBorderAsync(args.PersonGroupId.Value, args.DeviceGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("bindBorder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("bindBorder", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task childListForDeviceGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      childListForDeviceGroup_args args = new childListForDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      childListForDeviceGroup_result result = new childListForDeviceGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.childListForDeviceGroupAsync(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("childListForDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("childListForDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task childListForPersonGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      childListForPersonGroup_args args = new childListForPersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      childListForPersonGroup_result result = new childListForPersonGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.childListForPersonGroupAsync(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("childListForPersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("childListForPersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task countDeviceByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countDeviceByWhere_args args = new countDeviceByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countDeviceByWhere_result result = new countDeviceByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.countDeviceByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countDeviceByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countDeviceByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task countDeviceGroupByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countDeviceGroupByWhere_args args = new countDeviceGroupByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countDeviceGroupByWhere_result result = new countDeviceGroupByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.countDeviceGroupByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countDeviceGroupByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countDeviceGroupByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task countLogByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countLogByWhere_args args = new countLogByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countLogByWhere_result result = new countLogByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.countLogByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countLogByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countLogByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task countLogLightByVerifyTime_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countLogLightByVerifyTime_args args = new countLogLightByVerifyTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countLogLightByVerifyTime_result result = new countLogLightByVerifyTime_result();
      try
      {
        try
        {
          result.Success = await iface_.countLogLightByVerifyTimeAsync(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countLogLightByVerifyTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countLogLightByVerifyTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task countLogLightByVerifyTimeTimestr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countLogLightByVerifyTimeTimestr_args args = new countLogLightByVerifyTimeTimestr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countLogLightByVerifyTimeTimestr_result result = new countLogLightByVerifyTimeTimestr_result();
      try
      {
        try
        {
          result.Success = await iface_.countLogLightByVerifyTimeTimestrAsync(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countLogLightByVerifyTimeTimestr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countLogLightByVerifyTimeTimestr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task countLogLightByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countLogLightByWhere_args args = new countLogLightByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countLogLightByWhere_result result = new countLogLightByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.countLogLightByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countLogLightByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countLogLightByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task countPersonByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countPersonByWhere_args args = new countPersonByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countPersonByWhere_result result = new countPersonByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.countPersonByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countPersonByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countPersonByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task countPersonGroupByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countPersonGroupByWhere_args args = new countPersonGroupByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countPersonGroupByWhere_result result = new countPersonGroupByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.countPersonGroupByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countPersonGroupByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countPersonGroupByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deleteAllFeaturesByPersonId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteAllFeaturesByPersonId_args args = new deleteAllFeaturesByPersonId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteAllFeaturesByPersonId_result result = new deleteAllFeaturesByPersonId_result();
      try
      {
        try
        {
          result.Success = await iface_.deleteAllFeaturesByPersonIdAsync(args.PersonId.Value, args.DeleteImage.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteAllFeaturesByPersonId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteAllFeaturesByPersonId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deleteDeviceGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteDeviceGroup_args args = new deleteDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteDeviceGroup_result result = new deleteDeviceGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.deleteDeviceGroupAsync(args.DeviceGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deleteFeature_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteFeature_args args = new deleteFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteFeature_result result = new deleteFeature_result();
      try
      {
        try
        {
          result.Success = await iface_.deleteFeatureAsync(args.FeatureMd5, args.DeleteImage.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deleteGroupPermitOnDeviceGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteGroupPermitOnDeviceGroup_args args = new deleteGroupPermitOnDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteGroupPermitOnDeviceGroup_result result = new deleteGroupPermitOnDeviceGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.deleteGroupPermitOnDeviceGroupAsync(args.DeviceGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteGroupPermitOnDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteGroupPermitOnDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deleteImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteImage_args args = new deleteImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteImage_result result = new deleteImage_result();
      try
      {
        try
        {
          result.Success = await iface_.deleteImageAsync(args.ImageMd5, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deletePermitById_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePermitById_args args = new deletePermitById_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePermitById_result result = new deletePermitById_result();
      try
      {
        try
        {
          result.Success = await iface_.deletePermitByIdAsync(args.DeviceGroupId.Value, args.PersonGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePermitById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePermitById", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deletePerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePerson_args args = new deletePerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePerson_result result = new deletePerson_result();
      try
      {
        try
        {
          result.Success = await iface_.deletePersonAsync(args.PersonId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deletePersonByPapersNum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersonByPapersNum_args args = new deletePersonByPapersNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersonByPapersNum_result result = new deletePersonByPapersNum_result();
      try
      {
        try
        {
          result.Success = await iface_.deletePersonByPapersNumAsync(args.PapersNum, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersonByPapersNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersonByPapersNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deletePersonGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersonGroup_args args = new deletePersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersonGroup_result result = new deletePersonGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.deletePersonGroupAsync(args.PersonGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deletePersonGroupPermit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersonGroupPermit_args args = new deletePersonGroupPermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersonGroupPermit_result result = new deletePersonGroupPermit_result();
      try
      {
        try
        {
          result.Success = await iface_.deletePersonGroupPermitAsync(args.PersonGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersonGroupPermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersonGroupPermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deletePersons_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersons_args args = new deletePersons_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersons_result result = new deletePersons_result();
      try
      {
        try
        {
          result.Success = await iface_.deletePersonsAsync(args.PersonIdList, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersons", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task deletePersonsByPapersNum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersonsByPapersNum_args args = new deletePersonsByPapersNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersonsByPapersNum_result result = new deletePersonsByPapersNum_result();
      try
      {
        try
        {
          result.Success = await iface_.deletePersonsByPapersNumAsync(args.PapersNumlist, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersonsByPapersNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersonsByPapersNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task disablePerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disablePerson_args args = new disablePerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disablePerson_result result = new disablePerson_result();
      try
      {
        try
        {
          await iface_.disablePersonAsync(args.PersonId.Value, args.MoveToGroupId.Value, args.DeletePhoto.Value, args.DeleteFeature.Value, args.DeleteLog.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("disablePerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disablePerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task disablePersonList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disablePersonList_args args = new disablePersonList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disablePersonList_result result = new disablePersonList_result();
      try
      {
        try
        {
          await iface_.disablePersonListAsync(args.PersonIdList, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("disablePersonList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disablePersonList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task existsDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      existsDevice_args args = new existsDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      existsDevice_result result = new existsDevice_result();
      try
      {
        try
        {
          result.Success = await iface_.existsDeviceAsync(args.Id.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("existsDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("existsDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task existsFeature_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      existsFeature_args args = new existsFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      existsFeature_result result = new existsFeature_result();
      try
      {
        try
        {
          result.Success = await iface_.existsFeatureAsync(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("existsFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("existsFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task existsImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      existsImage_args args = new existsImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      existsImage_result result = new existsImage_result();
      try
      {
        try
        {
          result.Success = await iface_.existsImageAsync(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("existsImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("existsImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task existsPerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      existsPerson_args args = new existsPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      existsPerson_result result = new existsPerson_result();
      try
      {
        try
        {
          result.Success = await iface_.existsPersonAsync(args.PersionId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("existsPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("existsPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDevice_args args = new getDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDevice_result result = new getDevice_result();
      try
      {
        try
        {
          result.Success = await iface_.getDeviceAsync(args.DeviceId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDeviceGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroup_args args = new getDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroup_result result = new getDeviceGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.getDeviceGroupAsync(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDeviceGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroups_args args = new getDeviceGroups_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroups_result result = new getDeviceGroups_result();
      try
      {
        try
        {
          result.Success = await iface_.getDeviceGroupsAsync(args.GroupIdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroups", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDeviceGroupsBelongs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroupsBelongs_args args = new getDeviceGroupsBelongs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroupsBelongs_result result = new getDeviceGroupsBelongs_result();
      try
      {
        try
        {
          result.Success = await iface_.getDeviceGroupsBelongsAsync(args.DeviceId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsBelongs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsBelongs", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDeviceGroupsPermit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroupsPermit_args args = new getDeviceGroupsPermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroupsPermit_result result = new getDeviceGroupsPermit_result();
      try
      {
        try
        {
          result.Success = await iface_.getDeviceGroupsPermitAsync(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsPermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsPermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDeviceGroupsPermittedBy_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroupsPermittedBy_args args = new getDeviceGroupsPermittedBy_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroupsPermittedBy_result result = new getDeviceGroupsPermittedBy_result();
      try
      {
        try
        {
          result.Success = await iface_.getDeviceGroupsPermittedByAsync(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsPermittedBy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsPermittedBy", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDeviceIdOfFeature_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceIdOfFeature_args args = new getDeviceIdOfFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceIdOfFeature_result result = new getDeviceIdOfFeature_result();
      try
      {
        try
        {
          result.Success = await iface_.getDeviceIdOfFeatureAsync(args.FeatureMd5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceIdOfFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceIdOfFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDevices_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDevices_args args = new getDevices_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDevices_result result = new getDevices_result();
      try
      {
        try
        {
          result.Success = await iface_.getDevicesAsync(args.IdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDevices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDevices", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getDevicesOfGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDevicesOfGroup_args args = new getDevicesOfGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDevicesOfGroup_result result = new getDevicesOfGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.getDevicesOfGroupAsync(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDevicesOfGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDevicesOfGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getFace_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFace_args args = new getFace_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFace_result result = new getFace_result();
      try
      {
        try
        {
          result.Success = await iface_.getFaceAsync(args.FaceId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFace", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getFeature_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeature_args args = new getFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeature_result result = new getFeature_result();
      try
      {
        try
        {
          result.Success = await iface_.getFeatureAsync(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getFeatureBytes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeatureBytes_args args = new getFeatureBytes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeatureBytes_result result = new getFeatureBytes_result();
      try
      {
        try
        {
          result.Success = await iface_.getFeatureBytesAsync(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeatureBytes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeatureBytes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getFeatures_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeatures_args args = new getFeatures_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeatures_result result = new getFeatures_result();
      try
      {
        try
        {
          result.Success = await iface_.getFeaturesAsync(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeatures", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeatures", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getFeaturesByPersonId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeaturesByPersonId_args args = new getFeaturesByPersonId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeaturesByPersonId_result result = new getFeaturesByPersonId_result();
      try
      {
        try
        {
          result.Success = await iface_.getFeaturesByPersonIdAsync(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeaturesByPersonId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeaturesByPersonId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getFeaturesByPersonIdAndSdkVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeaturesByPersonIdAndSdkVersion_args args = new getFeaturesByPersonIdAndSdkVersion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeaturesByPersonIdAndSdkVersion_result result = new getFeaturesByPersonIdAndSdkVersion_result();
      try
      {
        try
        {
          result.Success = await iface_.getFeaturesByPersonIdAndSdkVersionAsync(args.PersonId.Value, args.SdkVersion);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeaturesByPersonIdAndSdkVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeaturesByPersonIdAndSdkVersion", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getFeaturesOfPerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeaturesOfPerson_args args = new getFeaturesOfPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeaturesOfPerson_result result = new getFeaturesOfPerson_result();
      try
      {
        try
        {
          result.Success = await iface_.getFeaturesOfPersonAsync(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeaturesOfPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeaturesOfPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getFeaturesPermittedOnDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeaturesPermittedOnDevice_args args = new getFeaturesPermittedOnDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeaturesPermittedOnDevice_result result = new getFeaturesPermittedOnDevice_result();
      try
      {
        try
        {
          result.Success = await iface_.getFeaturesPermittedOnDeviceAsync(args.DeviceId.Value, args.IgnoreSchedule.Value, args.SdkVersion, args.ExcludeFeatureIds);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeaturesPermittedOnDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeaturesPermittedOnDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getGroupPermit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupPermit_args args = new getGroupPermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupPermit_result result = new getGroupPermit_result();
      try
      {
        try
        {
          result.Success = await iface_.getGroupPermitAsync(args.DeviceId.Value, args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupPermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupPermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getGroupPermitOnDeviceGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupPermitOnDeviceGroup_args args = new getGroupPermitOnDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupPermitOnDeviceGroup_result result = new getGroupPermitOnDeviceGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.getGroupPermitOnDeviceGroupAsync(args.DeviceGroupId.Value, args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupPermitOnDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupPermitOnDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getGroupPermits_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupPermits_args args = new getGroupPermits_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupPermits_result result = new getGroupPermits_result();
      try
      {
        try
        {
          result.Success = await iface_.getGroupPermitsAsync(args.DeviceId.Value, args.PersonGroupIdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupPermits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupPermits", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getImage_args args = new getImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getImage_result result = new getImage_result();
      try
      {
        try
        {
          result.Success = await iface_.getImageAsync(args.ImageMD5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getImageBytes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getImageBytes_args args = new getImageBytes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getImageBytes_result result = new getImageBytes_result();
      try
      {
        try
        {
          result.Success = await iface_.getImageBytesAsync(args.ImageMD5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getImageBytes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getImageBytes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getImagesAssociatedByFeature_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getImagesAssociatedByFeature_args args = new getImagesAssociatedByFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getImagesAssociatedByFeature_result result = new getImagesAssociatedByFeature_result();
      try
      {
        try
        {
          result.Success = await iface_.getImagesAssociatedByFeatureAsync(args.FeatureMd5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getImagesAssociatedByFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getImagesAssociatedByFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getLogBeansByPersonId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLogBeansByPersonId_args args = new getLogBeansByPersonId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLogBeansByPersonId_result result = new getLogBeansByPersonId_result();
      try
      {
        try
        {
          result.Success = await iface_.getLogBeansByPersonIdAsync(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getLogBeansByPersonId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getLogBeansByPersonId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPerson_args args = new getPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPerson_result result = new getPerson_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonAsync(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersonByPapersNum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonByPapersNum_args args = new getPersonByPapersNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonByPapersNum_result result = new getPersonByPapersNum_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonByPapersNumAsync(args.PapersNum);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonByPapersNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonByPapersNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersonGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonGroup_args args = new getPersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonGroup_result result = new getPersonGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonGroupAsync(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersonGroups_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonGroups_args args = new getPersonGroups_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonGroups_result result = new getPersonGroups_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonGroupsAsync(args.GroupIdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonGroups", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersonGroupsBelongs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonGroupsBelongs_args args = new getPersonGroupsBelongs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonGroupsBelongs_result result = new getPersonGroupsBelongs_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonGroupsBelongsAsync(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonGroupsBelongs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonGroupsBelongs", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersonGroupsPermittedBy_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonGroupsPermittedBy_args args = new getPersonGroupsPermittedBy_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonGroupsPermittedBy_result result = new getPersonGroupsPermittedBy_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonGroupsPermittedByAsync(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonGroupsPermittedBy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonGroupsPermittedBy", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersonPermit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonPermit_args args = new getPersonPermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonPermit_result result = new getPersonPermit_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonPermitAsync(args.DeviceId.Value, args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonPermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonPermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersonPermits_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonPermits_args args = new getPersonPermits_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonPermits_result result = new getPersonPermits_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonPermitsAsync(args.DeviceId.Value, args.PersonIdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonPermits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonPermits", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersons_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersons_args args = new getPersons_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersons_result result = new getPersons_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonsAsync(args.IdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersons", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getPersonsOfGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonsOfGroup_args args = new getPersonsOfGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonsOfGroup_result result = new getPersonsOfGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.getPersonsOfGroupAsync(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonsOfGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonsOfGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProperty_args args = new getProperty_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProperty_result result = new getProperty_result();
      try
      {
        try
        {
          result.Success = await iface_.getPropertyAsync(args.Key, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getProperty", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProperty", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getRedisParameters_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRedisParameters_args args = new getRedisParameters_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRedisParameters_result result = new getRedisParameters_result();
      try
      {
        try
        {
          result.Success = await iface_.getRedisParametersAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getRedisParameters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRedisParameters", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getServiceConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getServiceConfig_args args = new getServiceConfig_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getServiceConfig_result result = new getServiceConfig_result();
      try
      {
        try
        {
          result.Success = await iface_.getServiceConfigAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getServiceConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getServiceConfig", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getSubDeviceGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSubDeviceGroup_args args = new getSubDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSubDeviceGroup_result result = new getSubDeviceGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.getSubDeviceGroupAsync(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getSubDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSubDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task getSubPersonGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSubPersonGroup_args args = new getSubPersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSubPersonGroup_result result = new getSubPersonGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.getSubPersonGroupAsync(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getSubPersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSubPersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isDisable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isDisable_args args = new isDisable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isDisable_result result = new isDisable_result();
      try
      {
        try
        {
          result.Success = await iface_.isDisableAsync(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isDisable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isDisable", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isLocal_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isLocal_args args = new isLocal_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isLocal_result result = new isLocal_result();
      try
      {
        try
        {
          result.Success = await iface_.isLocalAsync();
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isLocal", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isLocal", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isValidAckChannel_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidAckChannel_args args = new isValidAckChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidAckChannel_result result = new isValidAckChannel_result();
      try
      {
        try
        {
          result.Success = await iface_.isValidAckChannelAsync(args.AckChannel);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidAckChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidAckChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isValidCmdSn_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidCmdSn_args args = new isValidCmdSn_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidCmdSn_result result = new isValidCmdSn_result();
      try
      {
        try
        {
          result.Success = await iface_.isValidCmdSnAsync(args.CmdSn.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidCmdSn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidCmdSn", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isValidDeviceToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidDeviceToken_args args = new isValidDeviceToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidDeviceToken_result result = new isValidDeviceToken_result();
      try
      {
        try
        {
          result.Success = await iface_.isValidDeviceTokenAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidDeviceToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidDeviceToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isValidPassword_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidPassword_args args = new isValidPassword_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidPassword_result result = new isValidPassword_result();
      try
      {
        try
        {
          result.Success = await iface_.isValidPasswordAsync(args.UserId, args.Password, args.IsMd5.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidPassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidPassword", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isValidPersonToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidPersonToken_args args = new isValidPersonToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidPersonToken_result result = new isValidPersonToken_result();
      try
      {
        try
        {
          result.Success = await iface_.isValidPersonTokenAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidPersonToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidPersonToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isValidRootToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidRootToken_args args = new isValidRootToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidRootToken_result result = new isValidRootToken_result();
      try
      {
        try
        {
          result.Success = await iface_.isValidRootTokenAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidRootToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidRootToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isValidToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidToken_args args = new isValidToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidToken_result result = new isValidToken_result();
      try
      {
        try
        {
          result.Success = await iface_.isValidTokenAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task isValidUserToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidUserToken_args args = new isValidUserToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidUserToken_result result = new isValidUserToken_result();
      try
      {
        try
        {
          result.Success = await iface_.isValidUserTokenAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidUserToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidUserToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task listOfParentForDeviceGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      listOfParentForDeviceGroup_args args = new listOfParentForDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      listOfParentForDeviceGroup_result result = new listOfParentForDeviceGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.listOfParentForDeviceGroupAsync(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("listOfParentForDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("listOfParentForDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task listOfParentForPersonGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      listOfParentForPersonGroup_args args = new listOfParentForPersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      listOfParentForPersonGroup_result result = new listOfParentForPersonGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.listOfParentForPersonGroupAsync(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("listOfParentForPersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("listOfParentForPersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadAllPerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadAllPerson_args args = new loadAllPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadAllPerson_result result = new loadAllPerson_result();
      try
      {
        try
        {
          result.Success = await iface_.loadAllPersonAsync();
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadAllPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadAllPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadDeviceByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadDeviceByWhere_args args = new loadDeviceByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadDeviceByWhere_result result = new loadDeviceByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadDeviceByWhereAsync(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadDeviceByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadDeviceByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadDeviceGroupByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadDeviceGroupByWhere_args args = new loadDeviceGroupByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadDeviceGroupByWhere_result result = new loadDeviceGroupByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadDeviceGroupByWhereAsync(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadDeviceGroupByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadDeviceGroupByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadDeviceGroupIdByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadDeviceGroupIdByWhere_args args = new loadDeviceGroupIdByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadDeviceGroupIdByWhere_result result = new loadDeviceGroupIdByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadDeviceGroupIdByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadDeviceGroupIdByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadDeviceGroupIdByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadDeviceIdByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadDeviceIdByWhere_args args = new loadDeviceIdByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadDeviceIdByWhere_result result = new loadDeviceIdByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadDeviceIdByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadDeviceIdByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadDeviceIdByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadFeatureMd5ByUpdate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadFeatureMd5ByUpdate_args args = new loadFeatureMd5ByUpdate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadFeatureMd5ByUpdate_result result = new loadFeatureMd5ByUpdate_result();
      try
      {
        try
        {
          result.Success = await iface_.loadFeatureMd5ByUpdateAsync(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadFeatureMd5ByUpdateTimeStr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadFeatureMd5ByUpdateTimeStr_args args = new loadFeatureMd5ByUpdateTimeStr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadFeatureMd5ByUpdateTimeStr_result result = new loadFeatureMd5ByUpdateTimeStr_result();
      try
      {
        try
        {
          result.Success = await iface_.loadFeatureMd5ByUpdateTimeStrAsync(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdateTimeStr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdateTimeStr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadLogByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadLogByWhere_args args = new loadLogByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadLogByWhere_result result = new loadLogByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadLogByWhereAsync(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadLogByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadLogByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadLogLightByVerifyTime_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadLogLightByVerifyTime_args args = new loadLogLightByVerifyTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadLogLightByVerifyTime_result result = new loadLogLightByVerifyTime_result();
      try
      {
        try
        {
          result.Success = await iface_.loadLogLightByVerifyTimeAsync(args.Timestamp.Value, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadLogLightByVerifyTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadLogLightByVerifyTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadLogLightByVerifyTimeTimestr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadLogLightByVerifyTimeTimestr_args args = new loadLogLightByVerifyTimeTimestr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadLogLightByVerifyTimeTimestr_result result = new loadLogLightByVerifyTimeTimestr_result();
      try
      {
        try
        {
          result.Success = await iface_.loadLogLightByVerifyTimeTimestrAsync(args.Timestamp, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadLogLightByVerifyTimeTimestr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadLogLightByVerifyTimeTimestr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadLogLightByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadLogLightByWhere_args args = new loadLogLightByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadLogLightByWhere_result result = new loadLogLightByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadLogLightByWhereAsync(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadLogLightByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadLogLightByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadPermitByUpdate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPermitByUpdate_args args = new loadPermitByUpdate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPermitByUpdate_result result = new loadPermitByUpdate_result();
      try
      {
        try
        {
          result.Success = await iface_.loadPermitByUpdateAsync(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPermitByUpdate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPermitByUpdate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadPermitByUpdateTimestr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPermitByUpdateTimestr_args args = new loadPermitByUpdateTimestr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPermitByUpdateTimestr_result result = new loadPermitByUpdateTimestr_result();
      try
      {
        try
        {
          result.Success = await iface_.loadPermitByUpdateTimestrAsync(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPermitByUpdateTimestr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPermitByUpdateTimestr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadPersonByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonByWhere_args args = new loadPersonByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonByWhere_result result = new loadPersonByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadPersonByWhereAsync(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadPersonGroupByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonGroupByWhere_args args = new loadPersonGroupByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonGroupByWhere_result result = new loadPersonGroupByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadPersonGroupByWhereAsync(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonGroupByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonGroupByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadPersonGroupIdByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonGroupIdByWhere_args args = new loadPersonGroupIdByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonGroupIdByWhere_result result = new loadPersonGroupIdByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadPersonGroupIdByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonGroupIdByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonGroupIdByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadPersonIdByUpdateTime_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonIdByUpdateTime_args args = new loadPersonIdByUpdateTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonIdByUpdateTime_result result = new loadPersonIdByUpdateTime_result();
      try
      {
        try
        {
          result.Success = await iface_.loadPersonIdByUpdateTimeAsync(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadPersonIdByUpdateTimeTimeStr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonIdByUpdateTimeTimeStr_args args = new loadPersonIdByUpdateTimeTimeStr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonIdByUpdateTimeTimeStr_result result = new loadPersonIdByUpdateTimeTimeStr_result();
      try
      {
        try
        {
          result.Success = await iface_.loadPersonIdByUpdateTimeTimeStrAsync(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTimeTimeStr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTimeTimeStr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadPersonIdByWhere_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonIdByWhere_args args = new loadPersonIdByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonIdByWhere_result result = new loadPersonIdByWhere_result();
      try
      {
        try
        {
          result.Success = await iface_.loadPersonIdByWhereAsync(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadUpdatedPersons_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadUpdatedPersons_args args = new loadUpdatedPersons_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadUpdatedPersons_result result = new loadUpdatedPersons_result();
      try
      {
        try
        {
          result.Success = await iface_.loadUpdatedPersonsAsync(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadUpdatedPersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadUpdatedPersons", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task loadUpdatedPersonsTimestr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadUpdatedPersonsTimestr_args args = new loadUpdatedPersonsTimestr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadUpdatedPersonsTimestr_result result = new loadUpdatedPersonsTimestr_result();
      try
      {
        try
        {
          result.Success = await iface_.loadUpdatedPersonsTimestrAsync(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadUpdatedPersonsTimestr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadUpdatedPersonsTimestr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task offline_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      offline_args args = new offline_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      offline_result result = new offline_result();
      try
      {
        try
        {
          await iface_.offlineAsync(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("offline", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("offline", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task online_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      online_args args = new online_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      online_result result = new online_result();
      try
      {
        try
        {
          result.Success = await iface_.onlineAsync(args.Device);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("online", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("online", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task registerDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerDevice_args args = new registerDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerDevice_result result = new registerDevice_result();
      try
      {
        try
        {
          result.Success = await iface_.registerDeviceAsync(args.NewDevice);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task releasePersonToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      releasePersonToken_args args = new releasePersonToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      releasePersonToken_result result = new releasePersonToken_result();
      try
      {
        try
        {
          await iface_.releasePersonTokenAsync(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("releasePersonToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("releasePersonToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task releaseRootToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      releaseRootToken_args args = new releaseRootToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      releaseRootToken_result result = new releaseRootToken_result();
      try
      {
        try
        {
          await iface_.releaseRootTokenAsync(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("releaseRootToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("releaseRootToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task releaseUserToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      releaseUserToken_args args = new releaseUserToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      releaseUserToken_result result = new releaseUserToken_result();
      try
      {
        try
        {
          await iface_.releaseUserTokenAsync(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("releaseUserToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("releaseUserToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task replaceFeature_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      replaceFeature_args args = new replaceFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      replaceFeature_result result = new replaceFeature_result();
      try
      {
        try
        {
          await iface_.replaceFeatureAsync(args.PersonId.Value, args.FeatureMd5, args.DeleteOldFeatureImage.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("replaceFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("replaceFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task rootGroupOfDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      rootGroupOfDevice_args args = new rootGroupOfDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      rootGroupOfDevice_result result = new rootGroupOfDevice_result();
      try
      {
        try
        {
          result.Success = await iface_.rootGroupOfDeviceAsync(args.DeviceId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("rootGroupOfDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("rootGroupOfDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task rootGroupOfPerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      rootGroupOfPerson_args args = new rootGroupOfPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      rootGroupOfPerson_result result = new rootGroupOfPerson_result();
      try
      {
        try
        {
          result.Success = await iface_.rootGroupOfPersonAsync(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("rootGroupOfPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("rootGroupOfPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task runCmd_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      runCmd_args args = new runCmd_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      runCmd_result result = new runCmd_result();
      try
      {
        try
        {
          result.Success = await iface_.runCmdAsync(args.Target, args.Group.Value, args.Cmdpath, args.JsonArgs, args.AckChannel, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("runCmd", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("runCmd", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task runTask_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      runTask_args args = new runTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      runTask_result result = new runTask_result();
      try
      {
        try
        {
          result.Success = await iface_.runTaskAsync(args.TaskQueue, args.Cmdpath, args.JsonArgs, args.AckChannel, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("runTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("runTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task saveDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      saveDevice_args args = new saveDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      saveDevice_result result = new saveDevice_result();
      try
      {
        try
        {
          result.Success = await iface_.saveDeviceAsync(args.DeviceBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("saveDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("saveDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task saveDeviceGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      saveDeviceGroup_args args = new saveDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      saveDeviceGroup_result result = new saveDeviceGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.saveDeviceGroupAsync(args.DeviceGroupBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("saveDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("saveDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePermit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePermit_args args = new savePermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePermit_result result = new savePermit_result();
      try
      {
        try
        {
          result.Success = await iface_.savePermitAsync(args.PermitBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePermitWithSchedule_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePermitWithSchedule_args args = new savePermitWithSchedule_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePermitWithSchedule_result result = new savePermitWithSchedule_result();
      try
      {
        try
        {
          result.Success = await iface_.savePermitWithScheduleAsync(args.DeviceGroupId.Value, args.PersonGroupId.Value, args.Schedule, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePermitWithSchedule", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePermitWithSchedule", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePerson_args args = new savePerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePerson_result result = new savePerson_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonAsync(args.PersonBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersonFull_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonFull_args args = new savePersonFull_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonFull_result result = new savePersonFull_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonFullAsync(args.PersonBean, args.IdPhoto, args.Feature, args.FeatureVersion, args.FeatureImage, args.FeatureFaceBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonFull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonFull", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersonGroup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonGroup_args args = new savePersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonGroup_result result = new savePersonGroup_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonGroupAsync(args.PersonGroupBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersonWithPhoto_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhoto_args args = new savePersonWithPhoto_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhoto_result result = new savePersonWithPhoto_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonWithPhotoAsync(args.PersonBean, args.IdPhoto, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhoto", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhoto", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersonWithPhotoAndFeature_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhotoAndFeature_args args = new savePersonWithPhotoAndFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhotoAndFeature_result result = new savePersonWithPhotoAndFeature_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonWithPhotoAndFeatureAsync(args.PersonBean, args.IdPhoto, args.FeatureBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersonWithPhotoAndFeatureMultiFaces_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhotoAndFeatureMultiFaces_args args = new savePersonWithPhotoAndFeatureMultiFaces_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhotoAndFeatureMultiFaces_result result = new savePersonWithPhotoAndFeatureMultiFaces_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonWithPhotoAndFeatureMultiFacesAsync(args.PersonBean, args.IdPhoto, args.Feature, args.FeatureVersion, args.FaceBeans, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiFaces", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiFaces", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersonWithPhotoAndFeatureMultiImage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhotoAndFeatureMultiImage_args args = new savePersonWithPhotoAndFeatureMultiImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhotoAndFeatureMultiImage_result result = new savePersonWithPhotoAndFeatureMultiImage_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonWithPhotoAndFeatureMultiImageAsync(args.PersonBean, args.IdPhoto, args.Feature, args.FeatureVersion, args.Photos, args.Faces, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersonWithPhotoAndFeatureSaved_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhotoAndFeatureSaved_args args = new savePersonWithPhotoAndFeatureSaved_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhotoAndFeatureSaved_result result = new savePersonWithPhotoAndFeatureSaved_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonWithPhotoAndFeatureSavedAsync(args.PersonBean, args.IdPhotoMd5, args.FeatureMd5, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureSaved", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureSaved", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersons_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersons_args args = new savePersons_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersons_result result = new savePersons_result();
      try
      {
        try
        {
          await iface_.savePersonsAsync(args.Persons, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersons", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task savePersonsWithPhoto_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonsWithPhoto_args args = new savePersonsWithPhoto_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonsWithPhoto_result result = new savePersonsWithPhoto_result();
      try
      {
        try
        {
          result.Success = await iface_.savePersonsWithPhotoAsync(args.Photos, args.Persons, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonsWithPhoto", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonsWithPhoto", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task saveServiceConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      saveServiceConfig_args args = new saveServiceConfig_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      saveServiceConfig_result result = new saveServiceConfig_result();
      try
      {
        try
        {
          await iface_.saveServiceConfigAsync(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("saveServiceConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("saveServiceConfig", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task sdkTaskQueueOf_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sdkTaskQueueOf_args args = new sdkTaskQueueOf_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sdkTaskQueueOf_result result = new sdkTaskQueueOf_result();
      try
      {
        try
        {
          result.Success = await iface_.sdkTaskQueueOfAsync(args.Task, args.SdkVersion, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("sdkTaskQueueOf", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sdkTaskQueueOf", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task setPersonExpiryDate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setPersonExpiryDate_args args = new setPersonExpiryDate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setPersonExpiryDate_result result = new setPersonExpiryDate_result();
      try
      {
        try
        {
          await iface_.setPersonExpiryDateAsync(args.PersonId.Value, args.ExpiryDate.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task setPersonExpiryDateList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setPersonExpiryDateList_args args = new setPersonExpiryDateList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setPersonExpiryDateList_result result = new setPersonExpiryDateList_result();
      try
      {
        try
        {
          await iface_.setPersonExpiryDateListAsync(args.PersonIdList, args.ExpiryDate.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDateList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDateList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task setPersonExpiryDateTimeStr_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setPersonExpiryDateTimeStr_args args = new setPersonExpiryDateTimeStr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setPersonExpiryDateTimeStr_result result = new setPersonExpiryDateTimeStr_result();
      try
      {
        try
        {
          await iface_.setPersonExpiryDateTimeStrAsync(args.PersonId.Value, args.ExpiryDate, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDateTimeStr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDateTimeStr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task setProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setProperties_args args = new setProperties_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setProperties_result result = new setProperties_result();
      try
      {
        try
        {
          await iface_.setPropertiesAsync(args.Config, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setProperties", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setProperties", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task setProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setProperty_args args = new setProperty_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setProperty_result result = new setProperty_result();
      try
      {
        try
        {
          await iface_.setPropertyAsync(args.Key, args.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setProperty", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setProperty", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task taskQueueOf_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      taskQueueOf_args args = new taskQueueOf_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      taskQueueOf_result result = new taskQueueOf_result();
      try
      {
        try
        {
          result.Success = await iface_.taskQueueOfAsync(args.Task, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("taskQueueOf", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("taskQueueOf", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task unbindBorder_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unbindBorder_args args = new unbindBorder_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unbindBorder_result result = new unbindBorder_result();
      try
      {
        try
        {
          await iface_.unbindBorderAsync(args.PersonGroupId.Value, args.DeviceGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("unbindBorder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unbindBorder", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task unregisterDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unregisterDevice_args args = new unregisterDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unregisterDevice_result result = new unregisterDevice_result();
      try
      {
        try
        {
          await iface_.unregisterDeviceAsync(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("unregisterDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unregisterDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task updateDevice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateDevice_args args = new updateDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateDevice_result result = new updateDevice_result();
      try
      {
        try
        {
          result.Success = await iface_.updateDeviceAsync(args.DeviceBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("updateDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task version_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      version_args args = new version_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      version_result result = new version_result();
      try
      {
        try
        {
          result.Success = await iface_.versionAsync();
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("version", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("version", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public async Task versionInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot)
    {
      versionInfo_args args = new versionInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      versionInfo_result result = new versionInfo_result();
      try
      {
        try
        {
          result.Success = await iface_.versionInfoAsync();
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("versionInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("versionInfo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }

  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["addFeature"] = addFeature_Process;
      processMap_["addFeatureMulti"] = addFeatureMulti_Process;
      processMap_["addFeatureWithImage"] = addFeatureWithImage_Process;
      processMap_["addImage"] = addImage_Process;
      processMap_["addLog"] = addLog_Process;
      processMap_["addLogFull"] = addLogFull_Process;
      processMap_["addLogs"] = addLogs_Process;
      processMap_["addLogsFull"] = addLogsFull_Process;
      processMap_["applyAckChannel"] = applyAckChannel_Process;
      processMap_["applyAckChannelWithDuration"] = applyAckChannelWithDuration_Process;
      processMap_["applyCmdSn"] = applyCmdSn_Process;
      processMap_["applyPersonToken"] = applyPersonToken_Process;
      processMap_["applyRootToken"] = applyRootToken_Process;
      processMap_["applyUserToken"] = applyUserToken_Process;
      processMap_["bindBorder"] = bindBorder_Process;
      processMap_["childListForDeviceGroup"] = childListForDeviceGroup_Process;
      processMap_["childListForPersonGroup"] = childListForPersonGroup_Process;
      processMap_["countDeviceByWhere"] = countDeviceByWhere_Process;
      processMap_["countDeviceGroupByWhere"] = countDeviceGroupByWhere_Process;
      processMap_["countLogByWhere"] = countLogByWhere_Process;
      processMap_["countLogLightByVerifyTime"] = countLogLightByVerifyTime_Process;
      processMap_["countLogLightByVerifyTimeTimestr"] = countLogLightByVerifyTimeTimestr_Process;
      processMap_["countLogLightByWhere"] = countLogLightByWhere_Process;
      processMap_["countPersonByWhere"] = countPersonByWhere_Process;
      processMap_["countPersonGroupByWhere"] = countPersonGroupByWhere_Process;
      processMap_["deleteAllFeaturesByPersonId"] = deleteAllFeaturesByPersonId_Process;
      processMap_["deleteDeviceGroup"] = deleteDeviceGroup_Process;
      processMap_["deleteFeature"] = deleteFeature_Process;
      processMap_["deleteGroupPermitOnDeviceGroup"] = deleteGroupPermitOnDeviceGroup_Process;
      processMap_["deleteImage"] = deleteImage_Process;
      processMap_["deletePermitById"] = deletePermitById_Process;
      processMap_["deletePerson"] = deletePerson_Process;
      processMap_["deletePersonByPapersNum"] = deletePersonByPapersNum_Process;
      processMap_["deletePersonGroup"] = deletePersonGroup_Process;
      processMap_["deletePersonGroupPermit"] = deletePersonGroupPermit_Process;
      processMap_["deletePersons"] = deletePersons_Process;
      processMap_["deletePersonsByPapersNum"] = deletePersonsByPapersNum_Process;
      processMap_["disablePerson"] = disablePerson_Process;
      processMap_["disablePersonList"] = disablePersonList_Process;
      processMap_["existsDevice"] = existsDevice_Process;
      processMap_["existsFeature"] = existsFeature_Process;
      processMap_["existsImage"] = existsImage_Process;
      processMap_["existsPerson"] = existsPerson_Process;
      processMap_["getDevice"] = getDevice_Process;
      processMap_["getDeviceGroup"] = getDeviceGroup_Process;
      processMap_["getDeviceGroups"] = getDeviceGroups_Process;
      processMap_["getDeviceGroupsBelongs"] = getDeviceGroupsBelongs_Process;
      processMap_["getDeviceGroupsPermit"] = getDeviceGroupsPermit_Process;
      processMap_["getDeviceGroupsPermittedBy"] = getDeviceGroupsPermittedBy_Process;
      processMap_["getDeviceIdOfFeature"] = getDeviceIdOfFeature_Process;
      processMap_["getDevices"] = getDevices_Process;
      processMap_["getDevicesOfGroup"] = getDevicesOfGroup_Process;
      processMap_["getFace"] = getFace_Process;
      processMap_["getFeature"] = getFeature_Process;
      processMap_["getFeatureBytes"] = getFeatureBytes_Process;
      processMap_["getFeatures"] = getFeatures_Process;
      processMap_["getFeaturesByPersonId"] = getFeaturesByPersonId_Process;
      processMap_["getFeaturesByPersonIdAndSdkVersion"] = getFeaturesByPersonIdAndSdkVersion_Process;
      processMap_["getFeaturesOfPerson"] = getFeaturesOfPerson_Process;
      processMap_["getFeaturesPermittedOnDevice"] = getFeaturesPermittedOnDevice_Process;
      processMap_["getGroupPermit"] = getGroupPermit_Process;
      processMap_["getGroupPermitOnDeviceGroup"] = getGroupPermitOnDeviceGroup_Process;
      processMap_["getGroupPermits"] = getGroupPermits_Process;
      processMap_["getImage"] = getImage_Process;
      processMap_["getImageBytes"] = getImageBytes_Process;
      processMap_["getImagesAssociatedByFeature"] = getImagesAssociatedByFeature_Process;
      processMap_["getLogBeansByPersonId"] = getLogBeansByPersonId_Process;
      processMap_["getPerson"] = getPerson_Process;
      processMap_["getPersonByPapersNum"] = getPersonByPapersNum_Process;
      processMap_["getPersonGroup"] = getPersonGroup_Process;
      processMap_["getPersonGroups"] = getPersonGroups_Process;
      processMap_["getPersonGroupsBelongs"] = getPersonGroupsBelongs_Process;
      processMap_["getPersonGroupsPermittedBy"] = getPersonGroupsPermittedBy_Process;
      processMap_["getPersonPermit"] = getPersonPermit_Process;
      processMap_["getPersonPermits"] = getPersonPermits_Process;
      processMap_["getPersons"] = getPersons_Process;
      processMap_["getPersonsOfGroup"] = getPersonsOfGroup_Process;
      processMap_["getProperty"] = getProperty_Process;
      processMap_["getRedisParameters"] = getRedisParameters_Process;
      processMap_["getServiceConfig"] = getServiceConfig_Process;
      processMap_["getSubDeviceGroup"] = getSubDeviceGroup_Process;
      processMap_["getSubPersonGroup"] = getSubPersonGroup_Process;
      processMap_["isDisable"] = isDisable_Process;
      processMap_["isLocal"] = isLocal_Process;
      processMap_["isValidAckChannel"] = isValidAckChannel_Process;
      processMap_["isValidCmdSn"] = isValidCmdSn_Process;
      processMap_["isValidDeviceToken"] = isValidDeviceToken_Process;
      processMap_["isValidPassword"] = isValidPassword_Process;
      processMap_["isValidPersonToken"] = isValidPersonToken_Process;
      processMap_["isValidRootToken"] = isValidRootToken_Process;
      processMap_["isValidToken"] = isValidToken_Process;
      processMap_["isValidUserToken"] = isValidUserToken_Process;
      processMap_["listOfParentForDeviceGroup"] = listOfParentForDeviceGroup_Process;
      processMap_["listOfParentForPersonGroup"] = listOfParentForPersonGroup_Process;
      processMap_["loadAllPerson"] = loadAllPerson_Process;
      processMap_["loadDeviceByWhere"] = loadDeviceByWhere_Process;
      processMap_["loadDeviceGroupByWhere"] = loadDeviceGroupByWhere_Process;
      processMap_["loadDeviceGroupIdByWhere"] = loadDeviceGroupIdByWhere_Process;
      processMap_["loadDeviceIdByWhere"] = loadDeviceIdByWhere_Process;
      processMap_["loadFeatureMd5ByUpdate"] = loadFeatureMd5ByUpdate_Process;
      processMap_["loadFeatureMd5ByUpdateTimeStr"] = loadFeatureMd5ByUpdateTimeStr_Process;
      processMap_["loadLogByWhere"] = loadLogByWhere_Process;
      processMap_["loadLogLightByVerifyTime"] = loadLogLightByVerifyTime_Process;
      processMap_["loadLogLightByVerifyTimeTimestr"] = loadLogLightByVerifyTimeTimestr_Process;
      processMap_["loadLogLightByWhere"] = loadLogLightByWhere_Process;
      processMap_["loadPermitByUpdate"] = loadPermitByUpdate_Process;
      processMap_["loadPermitByUpdateTimestr"] = loadPermitByUpdateTimestr_Process;
      processMap_["loadPersonByWhere"] = loadPersonByWhere_Process;
      processMap_["loadPersonGroupByWhere"] = loadPersonGroupByWhere_Process;
      processMap_["loadPersonGroupIdByWhere"] = loadPersonGroupIdByWhere_Process;
      processMap_["loadPersonIdByUpdateTime"] = loadPersonIdByUpdateTime_Process;
      processMap_["loadPersonIdByUpdateTimeTimeStr"] = loadPersonIdByUpdateTimeTimeStr_Process;
      processMap_["loadPersonIdByWhere"] = loadPersonIdByWhere_Process;
      processMap_["loadUpdatedPersons"] = loadUpdatedPersons_Process;
      processMap_["loadUpdatedPersonsTimestr"] = loadUpdatedPersonsTimestr_Process;
      processMap_["offline"] = offline_Process;
      processMap_["online"] = online_Process;
      processMap_["registerDevice"] = registerDevice_Process;
      processMap_["releasePersonToken"] = releasePersonToken_Process;
      processMap_["releaseRootToken"] = releaseRootToken_Process;
      processMap_["releaseUserToken"] = releaseUserToken_Process;
      processMap_["replaceFeature"] = replaceFeature_Process;
      processMap_["rootGroupOfDevice"] = rootGroupOfDevice_Process;
      processMap_["rootGroupOfPerson"] = rootGroupOfPerson_Process;
      processMap_["runCmd"] = runCmd_Process;
      processMap_["runTask"] = runTask_Process;
      processMap_["saveDevice"] = saveDevice_Process;
      processMap_["saveDeviceGroup"] = saveDeviceGroup_Process;
      processMap_["savePermit"] = savePermit_Process;
      processMap_["savePermitWithSchedule"] = savePermitWithSchedule_Process;
      processMap_["savePerson"] = savePerson_Process;
      processMap_["savePersonFull"] = savePersonFull_Process;
      processMap_["savePersonGroup"] = savePersonGroup_Process;
      processMap_["savePersonWithPhoto"] = savePersonWithPhoto_Process;
      processMap_["savePersonWithPhotoAndFeature"] = savePersonWithPhotoAndFeature_Process;
      processMap_["savePersonWithPhotoAndFeatureMultiFaces"] = savePersonWithPhotoAndFeatureMultiFaces_Process;
      processMap_["savePersonWithPhotoAndFeatureMultiImage"] = savePersonWithPhotoAndFeatureMultiImage_Process;
      processMap_["savePersonWithPhotoAndFeatureSaved"] = savePersonWithPhotoAndFeatureSaved_Process;
      processMap_["savePersons"] = savePersons_Process;
      processMap_["savePersonsWithPhoto"] = savePersonsWithPhoto_Process;
      processMap_["saveServiceConfig"] = saveServiceConfig_Process;
      processMap_["sdkTaskQueueOf"] = sdkTaskQueueOf_Process;
      processMap_["setPersonExpiryDate"] = setPersonExpiryDate_Process;
      processMap_["setPersonExpiryDateList"] = setPersonExpiryDateList_Process;
      processMap_["setPersonExpiryDateTimeStr"] = setPersonExpiryDateTimeStr_Process;
      processMap_["setProperties"] = setProperties_Process;
      processMap_["setProperty"] = setProperty_Process;
      processMap_["taskQueueOf"] = taskQueueOf_Process;
      processMap_["unbindBorder"] = unbindBorder_Process;
      processMap_["unregisterDevice"] = unregisterDevice_Process;
      processMap_["updateDevice"] = updateDevice_Process;
      processMap_["version"] = version_Process;
      processMap_["versionInfo"] = versionInfo_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void addFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addFeature_args args = new addFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addFeature_result result = new addFeature_result();
      try
      {
        try
        {
          result.Success = iface_.addFeature(args.Feature, args.FeatureVersion, args.PersonId.Value, args.FaecBeans, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addFeatureMulti_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addFeatureMulti_args args = new addFeatureMulti_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addFeatureMulti_result result = new addFeatureMulti_result();
      try
      {
        try
        {
          result.Success = iface_.addFeatureMulti(args.Feature, args.FeatureVersion, args.PersonId.Value, args.Photos, args.Faces, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addFeatureMulti", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addFeatureMulti", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addFeatureWithImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addFeatureWithImage_args args = new addFeatureWithImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addFeatureWithImage_result result = new addFeatureWithImage_result();
      try
      {
        try
        {
          result.Success = iface_.addFeatureWithImage(args.Feature, args.FeatureVersion, args.PersonId.Value, args.AsIdPhotoIfAbsent.Value, args.FeaturePhoto, args.FaceBean, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addFeatureWithImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addFeatureWithImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addImage_args args = new addImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addImage_result result = new addImage_result();
      try
      {
        try
        {
          result.Success = iface_.addImage(args.ImageData, args.DeviceId.Value, args.FaceBean, args.PersonId.Value, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addLog_args args = new addLog_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addLog_result result = new addLog_result();
      try
      {
        try
        {
          iface_.addLog(args.LogBean, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addLog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addLog", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addLogFull_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addLogFull_args args = new addLogFull_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addLogFull_result result = new addLogFull_result();
      try
      {
        try
        {
          iface_.addLogFull(args.LogBean, args.FaceBean, args.FeatureImage, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addLogFull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addLogFull", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addLogs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addLogs_args args = new addLogs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addLogs_result result = new addLogs_result();
      try
      {
        try
        {
          iface_.addLogs(args.Beans, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addLogs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addLogs", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addLogsFull_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addLogsFull_args args = new addLogsFull_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addLogsFull_result result = new addLogsFull_result();
      try
      {
        try
        {
          iface_.addLogsFull(args.LogBeans, args.FaceBeans, args.FeatureImages, args.Token);
        }
        catch (DuplicateRecordException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("addLogsFull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addLogsFull", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void applyAckChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyAckChannel_args args = new applyAckChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyAckChannel_result result = new applyAckChannel_result();
      try
      {
        try
        {
          result.Success = iface_.applyAckChannel(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("applyAckChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyAckChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void applyAckChannelWithDuration_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyAckChannelWithDuration_args args = new applyAckChannelWithDuration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyAckChannelWithDuration_result result = new applyAckChannelWithDuration_result();
      try
      {
        try
        {
          result.Success = iface_.applyAckChannelWithDuration(args.Duration.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("applyAckChannelWithDuration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyAckChannelWithDuration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void applyCmdSn_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyCmdSn_args args = new applyCmdSn_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyCmdSn_result result = new applyCmdSn_result();
      try
      {
        try
        {
          result.Success = iface_.applyCmdSn(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("applyCmdSn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyCmdSn", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void applyPersonToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyPersonToken_args args = new applyPersonToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyPersonToken_result result = new applyPersonToken_result();
      try
      {
        try
        {
          result.Success = iface_.applyPersonToken(args.PersonId.Value, args.Password, args.IsMd5.Value);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("applyPersonToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyPersonToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void applyRootToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyRootToken_args args = new applyRootToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyRootToken_result result = new applyRootToken_result();
      try
      {
        try
        {
          result.Success = iface_.applyRootToken(args.Password, args.IsMd5.Value);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("applyRootToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyRootToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void applyUserToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      applyUserToken_args args = new applyUserToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      applyUserToken_result result = new applyUserToken_result();
      try
      {
        try
        {
          result.Success = iface_.applyUserToken(args.Userid.Value, args.Password, args.IsMd5.Value);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("applyUserToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("applyUserToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void bindBorder_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      bindBorder_args args = new bindBorder_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      bindBorder_result result = new bindBorder_result();
      try
      {
        try
        {
          iface_.bindBorder(args.PersonGroupId.Value, args.DeviceGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("bindBorder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("bindBorder", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void childListForDeviceGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      childListForDeviceGroup_args args = new childListForDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      childListForDeviceGroup_result result = new childListForDeviceGroup_result();
      try
      {
        try
        {
          result.Success = iface_.childListForDeviceGroup(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("childListForDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("childListForDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void childListForPersonGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      childListForPersonGroup_args args = new childListForPersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      childListForPersonGroup_result result = new childListForPersonGroup_result();
      try
      {
        try
        {
          result.Success = iface_.childListForPersonGroup(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("childListForPersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("childListForPersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void countDeviceByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countDeviceByWhere_args args = new countDeviceByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countDeviceByWhere_result result = new countDeviceByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.countDeviceByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countDeviceByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countDeviceByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void countDeviceGroupByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countDeviceGroupByWhere_args args = new countDeviceGroupByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countDeviceGroupByWhere_result result = new countDeviceGroupByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.countDeviceGroupByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countDeviceGroupByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countDeviceGroupByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void countLogByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countLogByWhere_args args = new countLogByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countLogByWhere_result result = new countLogByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.countLogByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countLogByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countLogByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void countLogLightByVerifyTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countLogLightByVerifyTime_args args = new countLogLightByVerifyTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countLogLightByVerifyTime_result result = new countLogLightByVerifyTime_result();
      try
      {
        try
        {
          result.Success = iface_.countLogLightByVerifyTime(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countLogLightByVerifyTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countLogLightByVerifyTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void countLogLightByVerifyTimeTimestr_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countLogLightByVerifyTimeTimestr_args args = new countLogLightByVerifyTimeTimestr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countLogLightByVerifyTimeTimestr_result result = new countLogLightByVerifyTimeTimestr_result();
      try
      {
        try
        {
          result.Success = iface_.countLogLightByVerifyTimeTimestr(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countLogLightByVerifyTimeTimestr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countLogLightByVerifyTimeTimestr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void countLogLightByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countLogLightByWhere_args args = new countLogLightByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countLogLightByWhere_result result = new countLogLightByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.countLogLightByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countLogLightByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countLogLightByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void countPersonByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countPersonByWhere_args args = new countPersonByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countPersonByWhere_result result = new countPersonByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.countPersonByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countPersonByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countPersonByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void countPersonGroupByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      countPersonGroupByWhere_args args = new countPersonGroupByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      countPersonGroupByWhere_result result = new countPersonGroupByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.countPersonGroupByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("countPersonGroupByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("countPersonGroupByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteAllFeaturesByPersonId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteAllFeaturesByPersonId_args args = new deleteAllFeaturesByPersonId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteAllFeaturesByPersonId_result result = new deleteAllFeaturesByPersonId_result();
      try
      {
        try
        {
          result.Success = iface_.deleteAllFeaturesByPersonId(args.PersonId.Value, args.DeleteImage.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteAllFeaturesByPersonId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteAllFeaturesByPersonId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteDeviceGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteDeviceGroup_args args = new deleteDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteDeviceGroup_result result = new deleteDeviceGroup_result();
      try
      {
        try
        {
          result.Success = iface_.deleteDeviceGroup(args.DeviceGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteFeature_args args = new deleteFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteFeature_result result = new deleteFeature_result();
      try
      {
        try
        {
          result.Success = iface_.deleteFeature(args.FeatureMd5, args.DeleteImage.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteGroupPermitOnDeviceGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteGroupPermitOnDeviceGroup_args args = new deleteGroupPermitOnDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteGroupPermitOnDeviceGroup_result result = new deleteGroupPermitOnDeviceGroup_result();
      try
      {
        try
        {
          result.Success = iface_.deleteGroupPermitOnDeviceGroup(args.DeviceGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteGroupPermitOnDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteGroupPermitOnDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteImage_args args = new deleteImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteImage_result result = new deleteImage_result();
      try
      {
        try
        {
          result.Success = iface_.deleteImage(args.ImageMd5, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deleteImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deletePermitById_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePermitById_args args = new deletePermitById_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePermitById_result result = new deletePermitById_result();
      try
      {
        try
        {
          result.Success = iface_.deletePermitById(args.DeviceGroupId.Value, args.PersonGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePermitById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePermitById", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deletePerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePerson_args args = new deletePerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePerson_result result = new deletePerson_result();
      try
      {
        try
        {
          result.Success = iface_.deletePerson(args.PersonId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deletePersonByPapersNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersonByPapersNum_args args = new deletePersonByPapersNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersonByPapersNum_result result = new deletePersonByPapersNum_result();
      try
      {
        try
        {
          result.Success = iface_.deletePersonByPapersNum(args.PapersNum, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersonByPapersNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersonByPapersNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deletePersonGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersonGroup_args args = new deletePersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersonGroup_result result = new deletePersonGroup_result();
      try
      {
        try
        {
          result.Success = iface_.deletePersonGroup(args.PersonGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deletePersonGroupPermit_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersonGroupPermit_args args = new deletePersonGroupPermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersonGroupPermit_result result = new deletePersonGroupPermit_result();
      try
      {
        try
        {
          result.Success = iface_.deletePersonGroupPermit(args.PersonGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersonGroupPermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersonGroupPermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deletePersons_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersons_args args = new deletePersons_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersons_result result = new deletePersons_result();
      try
      {
        try
        {
          result.Success = iface_.deletePersons(args.PersonIdList, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersons", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deletePersonsByPapersNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePersonsByPapersNum_args args = new deletePersonsByPapersNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePersonsByPapersNum_result result = new deletePersonsByPapersNum_result();
      try
      {
        try
        {
          result.Success = iface_.deletePersonsByPapersNum(args.PapersNumlist, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("deletePersonsByPapersNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePersonsByPapersNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disablePerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disablePerson_args args = new disablePerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disablePerson_result result = new disablePerson_result();
      try
      {
        try
        {
          iface_.disablePerson(args.PersonId.Value, args.MoveToGroupId.Value, args.DeletePhoto.Value, args.DeleteFeature.Value, args.DeleteLog.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("disablePerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disablePerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void disablePersonList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      disablePersonList_args args = new disablePersonList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      disablePersonList_result result = new disablePersonList_result();
      try
      {
        try
        {
          iface_.disablePersonList(args.PersonIdList, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("disablePersonList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("disablePersonList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void existsDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      existsDevice_args args = new existsDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      existsDevice_result result = new existsDevice_result();
      try
      {
        try
        {
          result.Success = iface_.existsDevice(args.Id.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("existsDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("existsDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void existsFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      existsFeature_args args = new existsFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      existsFeature_result result = new existsFeature_result();
      try
      {
        try
        {
          result.Success = iface_.existsFeature(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("existsFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("existsFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void existsImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      existsImage_args args = new existsImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      existsImage_result result = new existsImage_result();
      try
      {
        try
        {
          result.Success = iface_.existsImage(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("existsImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("existsImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void existsPerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      existsPerson_args args = new existsPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      existsPerson_result result = new existsPerson_result();
      try
      {
        try
        {
          result.Success = iface_.existsPerson(args.PersionId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("existsPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("existsPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDevice_args args = new getDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDevice_result result = new getDevice_result();
      try
      {
        try
        {
          result.Success = iface_.getDevice(args.DeviceId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDeviceGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroup_args args = new getDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroup_result result = new getDeviceGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getDeviceGroup(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDeviceGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroups_args args = new getDeviceGroups_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroups_result result = new getDeviceGroups_result();
      try
      {
        try
        {
          result.Success = iface_.getDeviceGroups(args.GroupIdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroups", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDeviceGroupsBelongs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroupsBelongs_args args = new getDeviceGroupsBelongs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroupsBelongs_result result = new getDeviceGroupsBelongs_result();
      try
      {
        try
        {
          result.Success = iface_.getDeviceGroupsBelongs(args.DeviceId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsBelongs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsBelongs", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDeviceGroupsPermit_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroupsPermit_args args = new getDeviceGroupsPermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroupsPermit_result result = new getDeviceGroupsPermit_result();
      try
      {
        try
        {
          result.Success = iface_.getDeviceGroupsPermit(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsPermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsPermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDeviceGroupsPermittedBy_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceGroupsPermittedBy_args args = new getDeviceGroupsPermittedBy_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceGroupsPermittedBy_result result = new getDeviceGroupsPermittedBy_result();
      try
      {
        try
        {
          result.Success = iface_.getDeviceGroupsPermittedBy(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsPermittedBy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceGroupsPermittedBy", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDeviceIdOfFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDeviceIdOfFeature_args args = new getDeviceIdOfFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDeviceIdOfFeature_result result = new getDeviceIdOfFeature_result();
      try
      {
        try
        {
          result.Success = iface_.getDeviceIdOfFeature(args.FeatureMd5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDeviceIdOfFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDeviceIdOfFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDevices_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDevices_args args = new getDevices_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDevices_result result = new getDevices_result();
      try
      {
        try
        {
          result.Success = iface_.getDevices(args.IdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDevices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDevices", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDevicesOfGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDevicesOfGroup_args args = new getDevicesOfGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDevicesOfGroup_result result = new getDevicesOfGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getDevicesOfGroup(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getDevicesOfGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDevicesOfGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFace_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFace_args args = new getFace_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFace_result result = new getFace_result();
      try
      {
        try
        {
          result.Success = iface_.getFace(args.FaceId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFace", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeature_args args = new getFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeature_result result = new getFeature_result();
      try
      {
        try
        {
          result.Success = iface_.getFeature(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFeatureBytes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeatureBytes_args args = new getFeatureBytes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeatureBytes_result result = new getFeatureBytes_result();
      try
      {
        try
        {
          result.Success = iface_.getFeatureBytes(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeatureBytes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeatureBytes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFeatures_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeatures_args args = new getFeatures_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeatures_result result = new getFeatures_result();
      try
      {
        try
        {
          result.Success = iface_.getFeatures(args.Md5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeatures", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeatures", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFeaturesByPersonId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeaturesByPersonId_args args = new getFeaturesByPersonId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeaturesByPersonId_result result = new getFeaturesByPersonId_result();
      try
      {
        try
        {
          result.Success = iface_.getFeaturesByPersonId(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeaturesByPersonId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeaturesByPersonId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFeaturesByPersonIdAndSdkVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeaturesByPersonIdAndSdkVersion_args args = new getFeaturesByPersonIdAndSdkVersion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeaturesByPersonIdAndSdkVersion_result result = new getFeaturesByPersonIdAndSdkVersion_result();
      try
      {
        try
        {
          result.Success = iface_.getFeaturesByPersonIdAndSdkVersion(args.PersonId.Value, args.SdkVersion);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeaturesByPersonIdAndSdkVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeaturesByPersonIdAndSdkVersion", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFeaturesOfPerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeaturesOfPerson_args args = new getFeaturesOfPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeaturesOfPerson_result result = new getFeaturesOfPerson_result();
      try
      {
        try
        {
          result.Success = iface_.getFeaturesOfPerson(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeaturesOfPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeaturesOfPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFeaturesPermittedOnDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeaturesPermittedOnDevice_args args = new getFeaturesPermittedOnDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeaturesPermittedOnDevice_result result = new getFeaturesPermittedOnDevice_result();
      try
      {
        try
        {
          result.Success = iface_.getFeaturesPermittedOnDevice(args.DeviceId.Value, args.IgnoreSchedule.Value, args.SdkVersion, args.ExcludeFeatureIds);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getFeaturesPermittedOnDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeaturesPermittedOnDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupPermit_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupPermit_args args = new getGroupPermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupPermit_result result = new getGroupPermit_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupPermit(args.DeviceId.Value, args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupPermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupPermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupPermitOnDeviceGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupPermitOnDeviceGroup_args args = new getGroupPermitOnDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupPermitOnDeviceGroup_result result = new getGroupPermitOnDeviceGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupPermitOnDeviceGroup(args.DeviceGroupId.Value, args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupPermitOnDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupPermitOnDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupPermits_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupPermits_args args = new getGroupPermits_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupPermits_result result = new getGroupPermits_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupPermits(args.DeviceId.Value, args.PersonGroupIdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupPermits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupPermits", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getImage_args args = new getImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getImage_result result = new getImage_result();
      try
      {
        try
        {
          result.Success = iface_.getImage(args.ImageMD5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getImageBytes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getImageBytes_args args = new getImageBytes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getImageBytes_result result = new getImageBytes_result();
      try
      {
        try
        {
          result.Success = iface_.getImageBytes(args.ImageMD5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getImageBytes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getImageBytes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getImagesAssociatedByFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getImagesAssociatedByFeature_args args = new getImagesAssociatedByFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getImagesAssociatedByFeature_result result = new getImagesAssociatedByFeature_result();
      try
      {
        try
        {
          result.Success = iface_.getImagesAssociatedByFeature(args.FeatureMd5);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getImagesAssociatedByFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getImagesAssociatedByFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getLogBeansByPersonId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLogBeansByPersonId_args args = new getLogBeansByPersonId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLogBeansByPersonId_result result = new getLogBeansByPersonId_result();
      try
      {
        try
        {
          result.Success = iface_.getLogBeansByPersonId(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getLogBeansByPersonId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getLogBeansByPersonId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPerson_args args = new getPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPerson_result result = new getPerson_result();
      try
      {
        try
        {
          result.Success = iface_.getPerson(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonByPapersNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonByPapersNum_args args = new getPersonByPapersNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonByPapersNum_result result = new getPersonByPapersNum_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonByPapersNum(args.PapersNum);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonByPapersNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonByPapersNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonGroup_args args = new getPersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonGroup_result result = new getPersonGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonGroup(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonGroups_args args = new getPersonGroups_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonGroups_result result = new getPersonGroups_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonGroups(args.GroupIdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonGroups", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonGroupsBelongs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonGroupsBelongs_args args = new getPersonGroupsBelongs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonGroupsBelongs_result result = new getPersonGroupsBelongs_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonGroupsBelongs(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonGroupsBelongs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonGroupsBelongs", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonGroupsPermittedBy_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonGroupsPermittedBy_args args = new getPersonGroupsPermittedBy_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonGroupsPermittedBy_result result = new getPersonGroupsPermittedBy_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonGroupsPermittedBy(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonGroupsPermittedBy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonGroupsPermittedBy", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonPermit_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonPermit_args args = new getPersonPermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonPermit_result result = new getPersonPermit_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonPermit(args.DeviceId.Value, args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonPermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonPermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonPermits_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonPermits_args args = new getPersonPermits_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonPermits_result result = new getPersonPermits_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonPermits(args.DeviceId.Value, args.PersonIdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonPermits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonPermits", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersons_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersons_args args = new getPersons_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersons_result result = new getPersons_result();
      try
      {
        try
        {
          result.Success = iface_.getPersons(args.IdList);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersons", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonsOfGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonsOfGroup_args args = new getPersonsOfGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonsOfGroup_result result = new getPersonsOfGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonsOfGroup(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonsOfGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonsOfGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProperty_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProperty_args args = new getProperty_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProperty_result result = new getProperty_result();
      try
      {
        try
        {
          result.Success = iface_.getProperty(args.Key, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getProperty", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProperty", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRedisParameters_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRedisParameters_args args = new getRedisParameters_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRedisParameters_result result = new getRedisParameters_result();
      try
      {
        try
        {
          result.Success = iface_.getRedisParameters(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getRedisParameters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRedisParameters", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getServiceConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getServiceConfig_args args = new getServiceConfig_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getServiceConfig_result result = new getServiceConfig_result();
      try
      {
        try
        {
          result.Success = iface_.getServiceConfig(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getServiceConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getServiceConfig", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSubDeviceGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSubDeviceGroup_args args = new getSubDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSubDeviceGroup_result result = new getSubDeviceGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getSubDeviceGroup(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getSubDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSubDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSubPersonGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSubPersonGroup_args args = new getSubPersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSubPersonGroup_result result = new getSubPersonGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getSubPersonGroup(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("getSubPersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSubPersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isDisable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isDisable_args args = new isDisable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isDisable_result result = new isDisable_result();
      try
      {
        try
        {
          result.Success = iface_.isDisable(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isDisable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isDisable", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isLocal_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isLocal_args args = new isLocal_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isLocal_result result = new isLocal_result();
      try
      {
        try
        {
          result.Success = iface_.isLocal();
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isLocal", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isLocal", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isValidAckChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidAckChannel_args args = new isValidAckChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidAckChannel_result result = new isValidAckChannel_result();
      try
      {
        try
        {
          result.Success = iface_.isValidAckChannel(args.AckChannel);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidAckChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidAckChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isValidCmdSn_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidCmdSn_args args = new isValidCmdSn_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidCmdSn_result result = new isValidCmdSn_result();
      try
      {
        try
        {
          result.Success = iface_.isValidCmdSn(args.CmdSn.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidCmdSn", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidCmdSn", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isValidDeviceToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidDeviceToken_args args = new isValidDeviceToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidDeviceToken_result result = new isValidDeviceToken_result();
      try
      {
        try
        {
          result.Success = iface_.isValidDeviceToken(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidDeviceToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidDeviceToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isValidPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidPassword_args args = new isValidPassword_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidPassword_result result = new isValidPassword_result();
      try
      {
        try
        {
          result.Success = iface_.isValidPassword(args.UserId, args.Password, args.IsMd5.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidPassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidPassword", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isValidPersonToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidPersonToken_args args = new isValidPersonToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidPersonToken_result result = new isValidPersonToken_result();
      try
      {
        try
        {
          result.Success = iface_.isValidPersonToken(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidPersonToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidPersonToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isValidRootToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidRootToken_args args = new isValidRootToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidRootToken_result result = new isValidRootToken_result();
      try
      {
        try
        {
          result.Success = iface_.isValidRootToken(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidRootToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidRootToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isValidToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidToken_args args = new isValidToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidToken_result result = new isValidToken_result();
      try
      {
        try
        {
          result.Success = iface_.isValidToken(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isValidUserToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isValidUserToken_args args = new isValidUserToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isValidUserToken_result result = new isValidUserToken_result();
      try
      {
        try
        {
          result.Success = iface_.isValidUserToken(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("isValidUserToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isValidUserToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void listOfParentForDeviceGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      listOfParentForDeviceGroup_args args = new listOfParentForDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      listOfParentForDeviceGroup_result result = new listOfParentForDeviceGroup_result();
      try
      {
        try
        {
          result.Success = iface_.listOfParentForDeviceGroup(args.DeviceGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("listOfParentForDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("listOfParentForDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void listOfParentForPersonGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      listOfParentForPersonGroup_args args = new listOfParentForPersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      listOfParentForPersonGroup_result result = new listOfParentForPersonGroup_result();
      try
      {
        try
        {
          result.Success = iface_.listOfParentForPersonGroup(args.PersonGroupId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("listOfParentForPersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("listOfParentForPersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadAllPerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadAllPerson_args args = new loadAllPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadAllPerson_result result = new loadAllPerson_result();
      try
      {
        try
        {
          result.Success = iface_.loadAllPerson();
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadAllPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadAllPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadDeviceByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadDeviceByWhere_args args = new loadDeviceByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadDeviceByWhere_result result = new loadDeviceByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadDeviceByWhere(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadDeviceByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadDeviceByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadDeviceGroupByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadDeviceGroupByWhere_args args = new loadDeviceGroupByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadDeviceGroupByWhere_result result = new loadDeviceGroupByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadDeviceGroupByWhere(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadDeviceGroupByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadDeviceGroupByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadDeviceGroupIdByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadDeviceGroupIdByWhere_args args = new loadDeviceGroupIdByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadDeviceGroupIdByWhere_result result = new loadDeviceGroupIdByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadDeviceGroupIdByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadDeviceGroupIdByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadDeviceGroupIdByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadDeviceIdByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadDeviceIdByWhere_args args = new loadDeviceIdByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadDeviceIdByWhere_result result = new loadDeviceIdByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadDeviceIdByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadDeviceIdByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadDeviceIdByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadFeatureMd5ByUpdate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadFeatureMd5ByUpdate_args args = new loadFeatureMd5ByUpdate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadFeatureMd5ByUpdate_result result = new loadFeatureMd5ByUpdate_result();
      try
      {
        try
        {
          result.Success = iface_.loadFeatureMd5ByUpdate(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadFeatureMd5ByUpdateTimeStr_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadFeatureMd5ByUpdateTimeStr_args args = new loadFeatureMd5ByUpdateTimeStr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadFeatureMd5ByUpdateTimeStr_result result = new loadFeatureMd5ByUpdateTimeStr_result();
      try
      {
        try
        {
          result.Success = iface_.loadFeatureMd5ByUpdateTimeStr(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdateTimeStr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadFeatureMd5ByUpdateTimeStr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadLogByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadLogByWhere_args args = new loadLogByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadLogByWhere_result result = new loadLogByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadLogByWhere(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadLogByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadLogByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadLogLightByVerifyTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadLogLightByVerifyTime_args args = new loadLogLightByVerifyTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadLogLightByVerifyTime_result result = new loadLogLightByVerifyTime_result();
      try
      {
        try
        {
          result.Success = iface_.loadLogLightByVerifyTime(args.Timestamp.Value, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadLogLightByVerifyTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadLogLightByVerifyTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadLogLightByVerifyTimeTimestr_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadLogLightByVerifyTimeTimestr_args args = new loadLogLightByVerifyTimeTimestr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadLogLightByVerifyTimeTimestr_result result = new loadLogLightByVerifyTimeTimestr_result();
      try
      {
        try
        {
          result.Success = iface_.loadLogLightByVerifyTimeTimestr(args.Timestamp, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadLogLightByVerifyTimeTimestr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadLogLightByVerifyTimeTimestr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadLogLightByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadLogLightByWhere_args args = new loadLogLightByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadLogLightByWhere_result result = new loadLogLightByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadLogLightByWhere(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadLogLightByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadLogLightByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadPermitByUpdate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPermitByUpdate_args args = new loadPermitByUpdate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPermitByUpdate_result result = new loadPermitByUpdate_result();
      try
      {
        try
        {
          result.Success = iface_.loadPermitByUpdate(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPermitByUpdate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPermitByUpdate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadPermitByUpdateTimestr_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPermitByUpdateTimestr_args args = new loadPermitByUpdateTimestr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPermitByUpdateTimestr_result result = new loadPermitByUpdateTimestr_result();
      try
      {
        try
        {
          result.Success = iface_.loadPermitByUpdateTimestr(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPermitByUpdateTimestr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPermitByUpdateTimestr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadPersonByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonByWhere_args args = new loadPersonByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonByWhere_result result = new loadPersonByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadPersonByWhere(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadPersonGroupByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonGroupByWhere_args args = new loadPersonGroupByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonGroupByWhere_result result = new loadPersonGroupByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadPersonGroupByWhere(args.Where, args.StartRow.Value, args.NumRows.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonGroupByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonGroupByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadPersonGroupIdByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonGroupIdByWhere_args args = new loadPersonGroupIdByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonGroupIdByWhere_result result = new loadPersonGroupIdByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadPersonGroupIdByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonGroupIdByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonGroupIdByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadPersonIdByUpdateTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonIdByUpdateTime_args args = new loadPersonIdByUpdateTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonIdByUpdateTime_result result = new loadPersonIdByUpdateTime_result();
      try
      {
        try
        {
          result.Success = iface_.loadPersonIdByUpdateTime(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadPersonIdByUpdateTimeTimeStr_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonIdByUpdateTimeTimeStr_args args = new loadPersonIdByUpdateTimeTimeStr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonIdByUpdateTimeTimeStr_result result = new loadPersonIdByUpdateTimeTimeStr_result();
      try
      {
        try
        {
          result.Success = iface_.loadPersonIdByUpdateTimeTimeStr(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTimeTimeStr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByUpdateTimeTimeStr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadPersonIdByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadPersonIdByWhere_args args = new loadPersonIdByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadPersonIdByWhere_result result = new loadPersonIdByWhere_result();
      try
      {
        try
        {
          result.Success = iface_.loadPersonIdByWhere(args.Where);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByWhere", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadPersonIdByWhere", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadUpdatedPersons_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadUpdatedPersons_args args = new loadUpdatedPersons_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadUpdatedPersons_result result = new loadUpdatedPersons_result();
      try
      {
        try
        {
          result.Success = iface_.loadUpdatedPersons(args.Timestamp.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadUpdatedPersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadUpdatedPersons", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loadUpdatedPersonsTimestr_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loadUpdatedPersonsTimestr_args args = new loadUpdatedPersonsTimestr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loadUpdatedPersonsTimestr_result result = new loadUpdatedPersonsTimestr_result();
      try
      {
        try
        {
          result.Success = iface_.loadUpdatedPersonsTimestr(args.Timestamp);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("loadUpdatedPersonsTimestr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loadUpdatedPersonsTimestr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void offline_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      offline_args args = new offline_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      offline_result result = new offline_result();
      try
      {
        try
        {
          iface_.offline(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("offline", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("offline", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void online_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      online_args args = new online_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      online_result result = new online_result();
      try
      {
        try
        {
          result.Success = iface_.online(args.Device);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("online", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("online", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerDevice_args args = new registerDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerDevice_result result = new registerDevice_result();
      try
      {
        try
        {
          result.Success = iface_.registerDevice(args.NewDevice);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void releasePersonToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      releasePersonToken_args args = new releasePersonToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      releasePersonToken_result result = new releasePersonToken_result();
      try
      {
        try
        {
          iface_.releasePersonToken(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("releasePersonToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("releasePersonToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void releaseRootToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      releaseRootToken_args args = new releaseRootToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      releaseRootToken_result result = new releaseRootToken_result();
      try
      {
        try
        {
          iface_.releaseRootToken(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("releaseRootToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("releaseRootToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void releaseUserToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      releaseUserToken_args args = new releaseUserToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      releaseUserToken_result result = new releaseUserToken_result();
      try
      {
        try
        {
          iface_.releaseUserToken(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("releaseUserToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("releaseUserToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void replaceFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      replaceFeature_args args = new replaceFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      replaceFeature_result result = new replaceFeature_result();
      try
      {
        try
        {
          iface_.replaceFeature(args.PersonId.Value, args.FeatureMd5, args.DeleteOldFeatureImage.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("replaceFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("replaceFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void rootGroupOfDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      rootGroupOfDevice_args args = new rootGroupOfDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      rootGroupOfDevice_result result = new rootGroupOfDevice_result();
      try
      {
        try
        {
          result.Success = iface_.rootGroupOfDevice(args.DeviceId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("rootGroupOfDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("rootGroupOfDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void rootGroupOfPerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      rootGroupOfPerson_args args = new rootGroupOfPerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      rootGroupOfPerson_result result = new rootGroupOfPerson_result();
      try
      {
        try
        {
          result.Success = iface_.rootGroupOfPerson(args.PersonId.Value);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("rootGroupOfPerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("rootGroupOfPerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void runCmd_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      runCmd_args args = new runCmd_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      runCmd_result result = new runCmd_result();
      try
      {
        try
        {
          result.Success = iface_.runCmd(args.Target, args.Group.Value, args.Cmdpath, args.JsonArgs, args.AckChannel, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("runCmd", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("runCmd", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void runTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      runTask_args args = new runTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      runTask_result result = new runTask_result();
      try
      {
        try
        {
          result.Success = iface_.runTask(args.TaskQueue, args.Cmdpath, args.JsonArgs, args.AckChannel, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("runTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("runTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void saveDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      saveDevice_args args = new saveDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      saveDevice_result result = new saveDevice_result();
      try
      {
        try
        {
          result.Success = iface_.saveDevice(args.DeviceBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("saveDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("saveDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void saveDeviceGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      saveDeviceGroup_args args = new saveDeviceGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      saveDeviceGroup_result result = new saveDeviceGroup_result();
      try
      {
        try
        {
          result.Success = iface_.saveDeviceGroup(args.DeviceGroupBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("saveDeviceGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("saveDeviceGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePermit_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePermit_args args = new savePermit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePermit_result result = new savePermit_result();
      try
      {
        try
        {
          result.Success = iface_.savePermit(args.PermitBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePermit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePermit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePermitWithSchedule_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePermitWithSchedule_args args = new savePermitWithSchedule_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePermitWithSchedule_result result = new savePermitWithSchedule_result();
      try
      {
        try
        {
          result.Success = iface_.savePermitWithSchedule(args.DeviceGroupId.Value, args.PersonGroupId.Value, args.Schedule, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePermitWithSchedule", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePermitWithSchedule", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePerson_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePerson_args args = new savePerson_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePerson_result result = new savePerson_result();
      try
      {
        try
        {
          result.Success = iface_.savePerson(args.PersonBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePerson", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePerson", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersonFull_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonFull_args args = new savePersonFull_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonFull_result result = new savePersonFull_result();
      try
      {
        try
        {
          result.Success = iface_.savePersonFull(args.PersonBean, args.IdPhoto, args.Feature, args.FeatureVersion, args.FeatureImage, args.FeatureFaceBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonFull", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonFull", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersonGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonGroup_args args = new savePersonGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonGroup_result result = new savePersonGroup_result();
      try
      {
        try
        {
          result.Success = iface_.savePersonGroup(args.PersonGroupBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersonWithPhoto_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhoto_args args = new savePersonWithPhoto_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhoto_result result = new savePersonWithPhoto_result();
      try
      {
        try
        {
          result.Success = iface_.savePersonWithPhoto(args.PersonBean, args.IdPhoto, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhoto", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhoto", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersonWithPhotoAndFeature_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhotoAndFeature_args args = new savePersonWithPhotoAndFeature_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhotoAndFeature_result result = new savePersonWithPhotoAndFeature_result();
      try
      {
        try
        {
          result.Success = iface_.savePersonWithPhotoAndFeature(args.PersonBean, args.IdPhoto, args.FeatureBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeature", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersonWithPhotoAndFeatureMultiFaces_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhotoAndFeatureMultiFaces_args args = new savePersonWithPhotoAndFeatureMultiFaces_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhotoAndFeatureMultiFaces_result result = new savePersonWithPhotoAndFeatureMultiFaces_result();
      try
      {
        try
        {
          result.Success = iface_.savePersonWithPhotoAndFeatureMultiFaces(args.PersonBean, args.IdPhoto, args.Feature, args.FeatureVersion, args.FaceBeans, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiFaces", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiFaces", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersonWithPhotoAndFeatureMultiImage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhotoAndFeatureMultiImage_args args = new savePersonWithPhotoAndFeatureMultiImage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhotoAndFeatureMultiImage_result result = new savePersonWithPhotoAndFeatureMultiImage_result();
      try
      {
        try
        {
          result.Success = iface_.savePersonWithPhotoAndFeatureMultiImage(args.PersonBean, args.IdPhoto, args.Feature, args.FeatureVersion, args.Photos, args.Faces, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiImage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureMultiImage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersonWithPhotoAndFeatureSaved_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonWithPhotoAndFeatureSaved_args args = new savePersonWithPhotoAndFeatureSaved_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonWithPhotoAndFeatureSaved_result result = new savePersonWithPhotoAndFeatureSaved_result();
      try
      {
        try
        {
          result.Success = iface_.savePersonWithPhotoAndFeatureSaved(args.PersonBean, args.IdPhotoMd5, args.FeatureMd5, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureSaved", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonWithPhotoAndFeatureSaved", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersons_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersons_args args = new savePersons_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersons_result result = new savePersons_result();
      try
      {
        try
        {
          iface_.savePersons(args.Persons, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersons", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersons", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void savePersonsWithPhoto_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      savePersonsWithPhoto_args args = new savePersonsWithPhoto_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      savePersonsWithPhoto_result result = new savePersonsWithPhoto_result();
      try
      {
        try
        {
          result.Success = iface_.savePersonsWithPhoto(args.Photos, args.Persons, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("savePersonsWithPhoto", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("savePersonsWithPhoto", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void saveServiceConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      saveServiceConfig_args args = new saveServiceConfig_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      saveServiceConfig_result result = new saveServiceConfig_result();
      try
      {
        try
        {
          iface_.saveServiceConfig(args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("saveServiceConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("saveServiceConfig", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sdkTaskQueueOf_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sdkTaskQueueOf_args args = new sdkTaskQueueOf_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sdkTaskQueueOf_result result = new sdkTaskQueueOf_result();
      try
      {
        try
        {
          result.Success = iface_.sdkTaskQueueOf(args.Task, args.SdkVersion, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("sdkTaskQueueOf", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sdkTaskQueueOf", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setPersonExpiryDate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setPersonExpiryDate_args args = new setPersonExpiryDate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setPersonExpiryDate_result result = new setPersonExpiryDate_result();
      try
      {
        try
        {
          iface_.setPersonExpiryDate(args.PersonId.Value, args.ExpiryDate.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setPersonExpiryDateList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setPersonExpiryDateList_args args = new setPersonExpiryDateList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setPersonExpiryDateList_result result = new setPersonExpiryDateList_result();
      try
      {
        try
        {
          iface_.setPersonExpiryDateList(args.PersonIdList, args.ExpiryDate.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDateList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDateList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setPersonExpiryDateTimeStr_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setPersonExpiryDateTimeStr_args args = new setPersonExpiryDateTimeStr_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setPersonExpiryDateTimeStr_result result = new setPersonExpiryDateTimeStr_result();
      try
      {
        try
        {
          iface_.setPersonExpiryDateTimeStr(args.PersonId.Value, args.ExpiryDate, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDateTimeStr", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setPersonExpiryDateTimeStr", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setProperties_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setProperties_args args = new setProperties_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setProperties_result result = new setProperties_result();
      try
      {
        try
        {
          iface_.setProperties(args.Config, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setProperties", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setProperties", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setProperty_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setProperty_args args = new setProperty_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setProperty_result result = new setProperty_result();
      try
      {
        try
        {
          iface_.setProperty(args.Key, args.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("setProperty", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setProperty", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void taskQueueOf_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      taskQueueOf_args args = new taskQueueOf_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      taskQueueOf_result result = new taskQueueOf_result();
      try
      {
        try
        {
          result.Success = iface_.taskQueueOf(args.Task, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("taskQueueOf", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("taskQueueOf", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void unbindBorder_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unbindBorder_args args = new unbindBorder_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unbindBorder_result result = new unbindBorder_result();
      try
      {
        try
        {
          iface_.unbindBorder(args.PersonGroupId.Value, args.DeviceGroupId.Value, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("unbindBorder", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unbindBorder", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void unregisterDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unregisterDevice_args args = new unregisterDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unregisterDevice_result result = new unregisterDevice_result();
      try
      {
        try
        {
          iface_.unregisterDevice(args.Token);
        }
        catch (ServiceSecurityException ex1)
        {
          result.Ex1 = ex1;
        }
        catch (ServiceRuntimeException ex2)
        {
          result.Ex2 = ex2;
        }
        oprot.WriteMessageBegin(new TMessage("unregisterDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unregisterDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateDevice_args args = new updateDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateDevice_result result = new updateDevice_result();
      try
      {
        try
        {
          result.Success = iface_.updateDevice(args.DeviceBean, args.Token);
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("updateDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void version_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      version_args args = new version_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      version_result result = new version_result();
      try
      {
        try
        {
          result.Success = iface_.version();
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("version", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("version", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void versionInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      versionInfo_args args = new versionInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      versionInfo_result result = new versionInfo_result();
      try
      {
        try
        {
          result.Success = iface_.versionInfo();
        }
        catch (ServiceRuntimeException ex1)
        {
          result.Ex1 = ex1;
        }
        oprot.WriteMessageBegin(new TMessage("versionInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("versionInfo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addFeature_args : TBase
  {

    public byte[] Feature { get; set; }

    public string FeatureVersion { get; set; }

    public int? PersonId { get; set; }

    public List<FaceBean> FaecBeans { get; set; }

    public Token Token { get; set; }

    public addFeature_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FeatureVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  FaecBeans = new List<FaceBean>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    FaceBean _elem2;
                    _elem2 = new FaceBean();
                    _elem2.Read(iprot);
                    FaecBeans.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null) {
          field.Name = "feature";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (FeatureVersion != null) {
          field.Name = "featureVersion";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureVersion);
          oprot.WriteFieldEnd();
        }
        if (PersonId != null) {
          field.Name = "personId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersonId.Value);
          oprot.WriteFieldEnd();
        }
        if (FaecBeans != null) {
          field.Name = "faecBeans";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, FaecBeans.Count));
            foreach (FaceBean _iter3 in FaecBeans)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addFeature_args(");
      bool __first = true;
      if (Feature != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (FeatureVersion != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureVersion: ");
        __sb.Append(FeatureVersion);
      }
      if (PersonId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonId: ");
        __sb.Append(PersonId);
      }
      if (FaecBeans != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FaecBeans: ");
        __sb.Append(FaecBeans);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addFeature_result : TBase
  {

    public FeatureBean Success { get; set; }

    public DuplicateRecordException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public addFeature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FeatureBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new DuplicateRecordException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addFeature_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addFeatureMulti_args : TBase
  {

    public byte[] Feature { get; set; }

    public string FeatureVersion { get; set; }

    public int? PersonId { get; set; }

    public List<byte[]> Photos { get; set; }

    public List<FaceBean> Faces { get; set; }

    public Token Token { get; set; }

    public addFeatureMulti_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FeatureVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Photos = new List<byte[]>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    byte[] _elem6;
                    _elem6 = iprot.ReadBinary();
                    Photos.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Faces = new List<FaceBean>();
                  TList _list7 = iprot.ReadListBegin();
                  for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                  {
                    FaceBean _elem9;
                    _elem9 = new FaceBean();
                    _elem9.Read(iprot);
                    Faces.Add(_elem9);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addFeatureMulti_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null) {
          field.Name = "feature";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (FeatureVersion != null) {
          field.Name = "featureVersion";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureVersion);
          oprot.WriteFieldEnd();
        }
        if (PersonId != null) {
          field.Name = "personId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersonId.Value);
          oprot.WriteFieldEnd();
        }
        if (Photos != null) {
          field.Name = "photos";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Photos.Count));
            foreach (byte[] _iter10 in Photos)
            {
              oprot.WriteBinary(_iter10);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Faces != null) {
          field.Name = "faces";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Faces.Count));
            foreach (FaceBean _iter11 in Faces)
            {
              _iter11.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addFeatureMulti_args(");
      bool __first = true;
      if (Feature != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (FeatureVersion != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureVersion: ");
        __sb.Append(FeatureVersion);
      }
      if (PersonId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonId: ");
        __sb.Append(PersonId);
      }
      if (Photos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Photos: ");
        __sb.Append(Photos);
      }
      if (Faces != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Faces: ");
        __sb.Append(Faces);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addFeatureMulti_result : TBase
  {

    public FeatureBean Success { get; set; }

    public DuplicateRecordException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public addFeatureMulti_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FeatureBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new DuplicateRecordException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addFeatureMulti_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addFeatureMulti_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addFeatureWithImage_args : TBase
  {

    public byte[] Feature { get; set; }

    public string FeatureVersion { get; set; }

    public int? PersonId { get; set; }

    public bool AsIdPhotoIfAbsent { get; set; }

    public byte[] FeaturePhoto { get; set; }

    public FaceBean FaceBean { get; set; }

    public Token Token { get; set; }

    public addFeatureWithImage_args() {
    }

    public addFeatureWithImage_args(bool asIdPhotoIfAbsent) : this() {
      this.AsIdPhotoIfAbsent = asIdPhotoIfAbsent;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_asIdPhotoIfAbsent = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FeatureVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                AsIdPhotoIfAbsent = iprot.ReadBool();
                isset_asIdPhotoIfAbsent = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                FeaturePhoto = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                FaceBean = new FaceBean();
                FaceBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_asIdPhotoIfAbsent)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AsIdPhotoIfAbsent not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addFeatureWithImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Feature != null) {
          field.Name = "feature";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (FeatureVersion != null) {
          field.Name = "featureVersion";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureVersion);
          oprot.WriteFieldEnd();
        }
        if (PersonId != null) {
          field.Name = "personId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersonId.Value);
          oprot.WriteFieldEnd();
        }
        field.Name = "asIdPhotoIfAbsent";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AsIdPhotoIfAbsent);
        oprot.WriteFieldEnd();
        if (FeaturePhoto != null) {
          field.Name = "featurePhoto";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(FeaturePhoto);
          oprot.WriteFieldEnd();
        }
        if (FaceBean != null) {
          field.Name = "faceBean";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          FaceBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addFeatureWithImage_args(");
      bool __first = true;
      if (Feature != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (FeatureVersion != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureVersion: ");
        __sb.Append(FeatureVersion);
      }
      if (PersonId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonId: ");
        __sb.Append(PersonId);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("AsIdPhotoIfAbsent: ");
      __sb.Append(AsIdPhotoIfAbsent);
      if (FeaturePhoto != null) {
        __sb.Append(", FeaturePhoto: ");
        __sb.Append(FeaturePhoto);
      }
      if (FaceBean != null) {
        __sb.Append(", FaceBean: ");
        __sb.Append(FaceBean== null ? "<null>" : FaceBean.ToString());
      }
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addFeatureWithImage_result : TBase
  {

    public FeatureBean Success { get; set; }

    public DuplicateRecordException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public addFeatureWithImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FeatureBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new DuplicateRecordException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addFeatureWithImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addFeatureWithImage_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addImage_args : TBase
  {

    public byte[] ImageData { get; set; }

    public int? DeviceId { get; set; }

    public FaceBean FaceBean { get; set; }

    public int? PersonId { get; set; }

    public Token Token { get; set; }

    public addImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ImageData = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                FaceBean = new FaceBean();
                FaceBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ImageData != null) {
          field.Name = "imageData";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(ImageData);
          oprot.WriteFieldEnd();
        }
        if (DeviceId != null) {
          field.Name = "deviceId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DeviceId.Value);
          oprot.WriteFieldEnd();
        }
        if (FaceBean != null) {
          field.Name = "faceBean";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          FaceBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PersonId != null) {
          field.Name = "personId";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersonId.Value);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addImage_args(");
      bool __first = true;
      if (ImageData != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImageData: ");
        __sb.Append(ImageData);
      }
      if (DeviceId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceId: ");
        __sb.Append(DeviceId);
      }
      if (FaceBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FaceBean: ");
        __sb.Append(FaceBean== null ? "<null>" : FaceBean.ToString());
      }
      if (PersonId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonId: ");
        __sb.Append(PersonId);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addImage_result : TBase
  {

    public ImageBean Success { get; set; }

    public DuplicateRecordException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public addImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ImageBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new DuplicateRecordException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addImage_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addLog_args : TBase
  {

    public LogBean LogBean { get; set; }

    public Token Token { get; set; }

    public addLog_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                LogBean = new LogBean();
                LogBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (LogBean != null) {
          field.Name = "logBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          LogBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addLog_args(");
      bool __first = true;
      if (LogBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LogBean: ");
        __sb.Append(LogBean== null ? "<null>" : LogBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addLog_result : TBase
  {

    public DuplicateRecordException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public addLog_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new DuplicateRecordException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addLog_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addLogFull_args : TBase
  {

    public LogBean LogBean { get; set; }

    public FaceBean FaceBean { get; set; }

    public byte[] FeatureImage { get; set; }

    public Token Token { get; set; }

    public addLogFull_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                LogBean = new LogBean();
                LogBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                FaceBean = new FaceBean();
                FaceBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                FeatureImage = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addLogFull_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (LogBean != null) {
          field.Name = "logBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          LogBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FaceBean != null) {
          field.Name = "faceBean";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          FaceBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FeatureImage != null) {
          field.Name = "featureImage";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(FeatureImage);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addLogFull_args(");
      bool __first = true;
      if (LogBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LogBean: ");
        __sb.Append(LogBean== null ? "<null>" : LogBean.ToString());
      }
      if (FaceBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FaceBean: ");
        __sb.Append(FaceBean== null ? "<null>" : FaceBean.ToString());
      }
      if (FeatureImage != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureImage: ");
        __sb.Append(FeatureImage);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addLogFull_result : TBase
  {

    public DuplicateRecordException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public addLogFull_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new DuplicateRecordException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addLogFull_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addLogFull_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addLogs_args : TBase
  {

    public List<LogBean> Beans { get; set; }

    public Token Token { get; set; }

    public addLogs_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Beans = new List<LogBean>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    LogBean _elem14;
                    _elem14 = new LogBean();
                    _elem14.Read(iprot);
                    Beans.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addLogs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Beans != null) {
          field.Name = "beans";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Beans.Count));
            foreach (LogBean _iter15 in Beans)
            {
              _iter15.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addLogs_args(");
      bool __first = true;
      if (Beans != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Beans: ");
        __sb.Append(Beans);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addLogs_result : TBase
  {

    public DuplicateRecordException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public addLogs_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new DuplicateRecordException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addLogs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addLogs_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addLogsFull_args : TBase
  {

    public List<LogBean> LogBeans { get; set; }

    public List<FaceBean> FaceBeans { get; set; }

    public List<byte[]> FeatureImages { get; set; }

    public Token Token { get; set; }

    public addLogsFull_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  LogBeans = new List<LogBean>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    LogBean _elem18;
                    _elem18 = new LogBean();
                    _elem18.Read(iprot);
                    LogBeans.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  FaceBeans = new List<FaceBean>();
                  TList _list19 = iprot.ReadListBegin();
                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                  {
                    FaceBean _elem21;
                    _elem21 = new FaceBean();
                    _elem21.Read(iprot);
                    FaceBeans.Add(_elem21);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  FeatureImages = new List<byte[]>();
                  TList _list22 = iprot.ReadListBegin();
                  for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                  {
                    byte[] _elem24;
                    _elem24 = iprot.ReadBinary();
                    FeatureImages.Add(_elem24);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addLogsFull_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (LogBeans != null) {
          field.Name = "logBeans";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, LogBeans.Count));
            foreach (LogBean _iter25 in LogBeans)
            {
              _iter25.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (FaceBeans != null) {
          field.Name = "faceBeans";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, FaceBeans.Count));
            foreach (FaceBean _iter26 in FaceBeans)
            {
              _iter26.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (FeatureImages != null) {
          field.Name = "featureImages";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, FeatureImages.Count));
            foreach (byte[] _iter27 in FeatureImages)
            {
              oprot.WriteBinary(_iter27);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addLogsFull_args(");
      bool __first = true;
      if (LogBeans != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LogBeans: ");
        __sb.Append(LogBeans);
      }
      if (FaceBeans != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FaceBeans: ");
        __sb.Append(FaceBeans);
      }
      if (FeatureImages != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureImages: ");
        __sb.Append(FeatureImages);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addLogsFull_result : TBase
  {

    public DuplicateRecordException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public addLogsFull_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new DuplicateRecordException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addLogsFull_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addLogsFull_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyAckChannel_args : TBase
  {

    public Token Token { get; set; }

    public applyAckChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyAckChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyAckChannel_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyAckChannel_result : TBase
  {

    public string Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public applyAckChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyAckChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyAckChannel_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyAckChannelWithDuration_args : TBase
  {

    public int Duration { get; set; }

    public Token Token { get; set; }

    public applyAckChannelWithDuration_args() {
    }

    public applyAckChannelWithDuration_args(int duration) : this() {
      this.Duration = duration;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_duration = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Duration = iprot.ReadI32();
                isset_duration = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_duration)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Duration not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyAckChannelWithDuration_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "duration";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Duration);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyAckChannelWithDuration_args(");
      __sb.Append(", Duration: ");
      __sb.Append(Duration);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyAckChannelWithDuration_result : TBase
  {

    public string Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public applyAckChannelWithDuration_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyAckChannelWithDuration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyAckChannelWithDuration_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyCmdSn_args : TBase
  {

    public Token Token { get; set; }

    public applyCmdSn_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyCmdSn_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyCmdSn_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyCmdSn_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public applyCmdSn_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyCmdSn_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyCmdSn_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyPersonToken_args : TBase
  {

    public int PersonId { get; set; }

    public string Password { get; set; }

    public bool IsMd5 { get; set; }

    public applyPersonToken_args() {
    }

    public applyPersonToken_args(int personId, bool isMd5) : this() {
      this.PersonId = personId;
      this.IsMd5 = isMd5;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        bool isset_isMd5 = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IsMd5 = iprot.ReadBool();
                isset_isMd5 = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
        if (!isset_isMd5)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field IsMd5 not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyPersonToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        if (Password != null) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        field.Name = "isMd5";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsMd5);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyPersonToken_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      if (Password != null) {
        __sb.Append(", Password: ");
        __sb.Append(Password);
      }
      __sb.Append(", IsMd5: ");
      __sb.Append(IsMd5);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyPersonToken_result : TBase
  {

    public Token Success { get; set; }

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public applyPersonToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Token();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyPersonToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyPersonToken_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyRootToken_args : TBase
  {

    public string Password { get; set; }

    public bool IsMd5 { get; set; }

    public applyRootToken_args() {
    }

    public applyRootToken_args(bool isMd5) : this() {
      this.IsMd5 = isMd5;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_isMd5 = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IsMd5 = iprot.ReadBool();
                isset_isMd5 = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_isMd5)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field IsMd5 not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyRootToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Password != null) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        field.Name = "isMd5";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsMd5);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyRootToken_args(");
      bool __first = true;
      if (Password != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("IsMd5: ");
      __sb.Append(IsMd5);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyRootToken_result : TBase
  {

    public Token Success { get; set; }

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public applyRootToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Token();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyRootToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyRootToken_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyUserToken_args : TBase
  {

    public int Userid { get; set; }

    public string Password { get; set; }

    public bool IsMd5 { get; set; }

    public applyUserToken_args() {
    }

    public applyUserToken_args(int userid, bool isMd5) : this() {
      this.Userid = userid;
      this.IsMd5 = isMd5;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_userid = false;
        bool isset_isMd5 = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Userid = iprot.ReadI32();
                isset_userid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IsMd5 = iprot.ReadBool();
                isset_isMd5 = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_userid)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Userid not set");
        if (!isset_isMd5)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field IsMd5 not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyUserToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "userid";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Userid);
        oprot.WriteFieldEnd();
        if (Password != null) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        field.Name = "isMd5";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsMd5);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyUserToken_args(");
      __sb.Append(", Userid: ");
      __sb.Append(Userid);
      if (Password != null) {
        __sb.Append(", Password: ");
        __sb.Append(Password);
      }
      __sb.Append(", IsMd5: ");
      __sb.Append(IsMd5);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class applyUserToken_result : TBase
  {

    public Token Success { get; set; }

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public applyUserToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Token();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("applyUserToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("applyUserToken_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class bindBorder_args : TBase
  {

    public int? PersonGroupId { get; set; }

    public int? DeviceGroupId { get; set; }

    public Token Token { get; set; }

    public bindBorder_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("bindBorder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonGroupId != null) {
          field.Name = "personGroupId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersonGroupId.Value);
          oprot.WriteFieldEnd();
        }
        if (DeviceGroupId != null) {
          field.Name = "deviceGroupId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DeviceGroupId.Value);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("bindBorder_args(");
      bool __first = true;
      if (PersonGroupId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonGroupId: ");
        __sb.Append(PersonGroupId);
      }
      if (DeviceGroupId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceGroupId: ");
        __sb.Append(DeviceGroupId);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class bindBorder_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public bindBorder_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("bindBorder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("bindBorder_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class childListForDeviceGroup_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public childListForDeviceGroup_args() {
    }

    public childListForDeviceGroup_args(int deviceGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("childListForDeviceGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("childListForDeviceGroup_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class childListForDeviceGroup_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public childListForDeviceGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    int _elem30;
                    _elem30 = iprot.ReadI32();
                    Success.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("childListForDeviceGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter31 in Success)
            {
              oprot.WriteI32(_iter31);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("childListForDeviceGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class childListForPersonGroup_args : TBase
  {

    public int PersonGroupId { get; set; }

    public childListForPersonGroup_args() {
    }

    public childListForPersonGroup_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("childListForPersonGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("childListForPersonGroup_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class childListForPersonGroup_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public childListForPersonGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    int _elem34;
                    _elem34 = iprot.ReadI32();
                    Success.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("childListForPersonGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter35 in Success)
            {
              oprot.WriteI32(_iter35);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("childListForPersonGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countDeviceByWhere_args : TBase
  {

    public string Where { get; set; }

    public countDeviceByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countDeviceByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countDeviceByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countDeviceByWhere_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public countDeviceByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countDeviceByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countDeviceByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countDeviceGroupByWhere_args : TBase
  {

    public string Where { get; set; }

    public countDeviceGroupByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countDeviceGroupByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countDeviceGroupByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countDeviceGroupByWhere_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public countDeviceGroupByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countDeviceGroupByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countDeviceGroupByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countLogByWhere_args : TBase
  {

    public string Where { get; set; }

    public countLogByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countLogByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countLogByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countLogByWhere_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public countLogByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countLogByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countLogByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countLogLightByVerifyTime_args : TBase
  {

    public long Timestamp { get; set; }

    public countLogLightByVerifyTime_args() {
    }

    public countLogLightByVerifyTime_args(long timestamp) : this() {
      this.Timestamp = timestamp;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_timestamp = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
                isset_timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_timestamp)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamp not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countLogLightByVerifyTime_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countLogLightByVerifyTime_args(");
      __sb.Append(", Timestamp: ");
      __sb.Append(Timestamp);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countLogLightByVerifyTime_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public countLogLightByVerifyTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countLogLightByVerifyTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countLogLightByVerifyTime_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countLogLightByVerifyTimeTimestr_args : TBase
  {

    public string Timestamp { get; set; }

    public countLogLightByVerifyTimeTimestr_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Timestamp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countLogLightByVerifyTimeTimestr_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Timestamp != null) {
          field.Name = "timestamp";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Timestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countLogLightByVerifyTimeTimestr_args(");
      bool __first = true;
      if (Timestamp != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countLogLightByVerifyTimeTimestr_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public countLogLightByVerifyTimeTimestr_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countLogLightByVerifyTimeTimestr_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countLogLightByVerifyTimeTimestr_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countLogLightByWhere_args : TBase
  {

    public string Where { get; set; }

    public countLogLightByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countLogLightByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countLogLightByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countLogLightByWhere_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public countLogLightByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countLogLightByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countLogLightByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countPersonByWhere_args : TBase
  {

    public string Where { get; set; }

    public countPersonByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countPersonByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countPersonByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countPersonByWhere_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public countPersonByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countPersonByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countPersonByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countPersonGroupByWhere_args : TBase
  {

    public string Where { get; set; }

    public countPersonGroupByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countPersonGroupByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countPersonGroupByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class countPersonGroupByWhere_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public countPersonGroupByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("countPersonGroupByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("countPersonGroupByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllFeaturesByPersonId_args : TBase
  {

    public int PersonId { get; set; }

    public bool DeleteImage { get; set; }

    public Token Token { get; set; }

    public deleteAllFeaturesByPersonId_args() {
    }

    public deleteAllFeaturesByPersonId_args(int personId, bool deleteImage) : this() {
      this.PersonId = personId;
      this.DeleteImage = deleteImage;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        bool isset_deleteImage = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                DeleteImage = iprot.ReadBool();
                isset_deleteImage = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
        if (!isset_deleteImage)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeleteImage not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteAllFeaturesByPersonId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        field.Name = "deleteImage";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DeleteImage);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteAllFeaturesByPersonId_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(", DeleteImage: ");
      __sb.Append(DeleteImage);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllFeaturesByPersonId_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deleteAllFeaturesByPersonId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteAllFeaturesByPersonId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteAllFeaturesByPersonId_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteDeviceGroup_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public Token Token { get; set; }

    public deleteDeviceGroup_args() {
    }

    public deleteDeviceGroup_args(int deviceGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteDeviceGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteDeviceGroup_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteDeviceGroup_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deleteDeviceGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteDeviceGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteDeviceGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteFeature_args : TBase
  {

    public string FeatureMd5 { get; set; }

    public bool DeleteImage { get; set; }

    public Token Token { get; set; }

    public deleteFeature_args() {
    }

    public deleteFeature_args(bool deleteImage) : this() {
      this.DeleteImage = deleteImage;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deleteImage = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FeatureMd5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                DeleteImage = iprot.ReadBool();
                isset_deleteImage = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deleteImage)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeleteImage not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FeatureMd5 != null) {
          field.Name = "featureMd5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureMd5);
          oprot.WriteFieldEnd();
        }
        field.Name = "deleteImage";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DeleteImage);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteFeature_args(");
      bool __first = true;
      if (FeatureMd5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureMd5: ");
        __sb.Append(FeatureMd5);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("DeleteImage: ");
      __sb.Append(DeleteImage);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteFeature_result : TBase
  {

    public List<string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deleteFeature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    string _elem38;
                    _elem38 = iprot.ReadString();
                    Success.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter39 in Success)
            {
              oprot.WriteString(_iter39);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteFeature_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteGroupPermitOnDeviceGroup_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public Token Token { get; set; }

    public deleteGroupPermitOnDeviceGroup_args() {
    }

    public deleteGroupPermitOnDeviceGroup_args(int deviceGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteGroupPermitOnDeviceGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteGroupPermitOnDeviceGroup_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteGroupPermitOnDeviceGroup_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deleteGroupPermitOnDeviceGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteGroupPermitOnDeviceGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteGroupPermitOnDeviceGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteImage_args : TBase
  {

    public string ImageMd5 { get; set; }

    public Token Token { get; set; }

    public deleteImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ImageMd5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ImageMd5 != null) {
          field.Name = "imageMd5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ImageMd5);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteImage_args(");
      bool __first = true;
      if (ImageMd5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImageMd5: ");
        __sb.Append(ImageMd5);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteImage_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deleteImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteImage_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePermitById_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public int PersonGroupId { get; set; }

    public Token Token { get; set; }

    public deletePermitById_args() {
    }

    public deletePermitById_args(int deviceGroupId, int personGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePermitById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePermitById_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePermitById_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deletePermitById_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePermitById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePermitById_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePerson_args : TBase
  {

    public int PersonId { get; set; }

    public Token Token { get; set; }

    public deletePerson_args() {
    }

    public deletePerson_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePerson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePerson_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePerson_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deletePerson_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePerson_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersonByPapersNum_args : TBase
  {

    public string PapersNum { get; set; }

    public Token Token { get; set; }

    public deletePersonByPapersNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PapersNum = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersonByPapersNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PapersNum != null) {
          field.Name = "papersNum";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PapersNum);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersonByPapersNum_args(");
      bool __first = true;
      if (PapersNum != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PapersNum: ");
        __sb.Append(PapersNum);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersonByPapersNum_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deletePersonByPapersNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersonByPapersNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersonByPapersNum_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersonGroup_args : TBase
  {

    public int PersonGroupId { get; set; }

    public Token Token { get; set; }

    public deletePersonGroup_args() {
    }

    public deletePersonGroup_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersonGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersonGroup_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersonGroup_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deletePersonGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersonGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersonGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersonGroupPermit_args : TBase
  {

    public int PersonGroupId { get; set; }

    public Token Token { get; set; }

    public deletePersonGroupPermit_args() {
    }

    public deletePersonGroupPermit_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersonGroupPermit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersonGroupPermit_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersonGroupPermit_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deletePersonGroupPermit_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersonGroupPermit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersonGroupPermit_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersons_args : TBase
  {

    public List<int> PersonIdList { get; set; }

    public Token Token { get; set; }

    public deletePersons_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  PersonIdList = new List<int>();
                  TList _list40 = iprot.ReadListBegin();
                  for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    int _elem42;
                    _elem42 = iprot.ReadI32();
                    PersonIdList.Add(_elem42);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersons_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonIdList != null) {
          field.Name = "personIdList";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, PersonIdList.Count));
            foreach (int _iter43 in PersonIdList)
            {
              oprot.WriteI32(_iter43);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersons_args(");
      bool __first = true;
      if (PersonIdList != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonIdList: ");
        __sb.Append(PersonIdList);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersons_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deletePersons_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersons_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersons_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersonsByPapersNum_args : TBase
  {

    public List<string> PapersNumlist { get; set; }

    public Token Token { get; set; }

    public deletePersonsByPapersNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  PapersNumlist = new List<string>();
                  TList _list44 = iprot.ReadListBegin();
                  for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    string _elem46;
                    _elem46 = iprot.ReadString();
                    PapersNumlist.Add(_elem46);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersonsByPapersNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PapersNumlist != null) {
          field.Name = "papersNumlist";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, PapersNumlist.Count));
            foreach (string _iter47 in PapersNumlist)
            {
              oprot.WriteString(_iter47);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersonsByPapersNum_args(");
      bool __first = true;
      if (PapersNumlist != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PapersNumlist: ");
        __sb.Append(PapersNumlist);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePersonsByPapersNum_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public deletePersonsByPapersNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePersonsByPapersNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePersonsByPapersNum_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disablePerson_args : TBase
  {

    public int PersonId { get; set; }

    public int? MoveToGroupId { get; set; }

    public bool DeletePhoto { get; set; }

    public bool DeleteFeature { get; set; }

    public bool DeleteLog { get; set; }

    public Token Token { get; set; }

    public disablePerson_args() {
    }

    public disablePerson_args(int personId, bool deletePhoto, bool deleteFeature, bool deleteLog) : this() {
      this.PersonId = personId;
      this.DeletePhoto = deletePhoto;
      this.DeleteFeature = deleteFeature;
      this.DeleteLog = deleteLog;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        bool isset_deletePhoto = false;
        bool isset_deleteFeature = false;
        bool isset_deleteLog = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                MoveToGroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                DeletePhoto = iprot.ReadBool();
                isset_deletePhoto = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                DeleteFeature = iprot.ReadBool();
                isset_deleteFeature = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                DeleteLog = iprot.ReadBool();
                isset_deleteLog = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
        if (!isset_deletePhoto)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeletePhoto not set");
        if (!isset_deleteFeature)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeleteFeature not set");
        if (!isset_deleteLog)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeleteLog not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disablePerson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        if (MoveToGroupId != null) {
          field.Name = "moveToGroupId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MoveToGroupId.Value);
          oprot.WriteFieldEnd();
        }
        field.Name = "deletePhoto";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DeletePhoto);
        oprot.WriteFieldEnd();
        field.Name = "deleteFeature";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DeleteFeature);
        oprot.WriteFieldEnd();
        field.Name = "deleteLog";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DeleteLog);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disablePerson_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      if (MoveToGroupId != null) {
        __sb.Append(", MoveToGroupId: ");
        __sb.Append(MoveToGroupId);
      }
      __sb.Append(", DeletePhoto: ");
      __sb.Append(DeletePhoto);
      __sb.Append(", DeleteFeature: ");
      __sb.Append(DeleteFeature);
      __sb.Append(", DeleteLog: ");
      __sb.Append(DeleteLog);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disablePerson_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public disablePerson_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disablePerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disablePerson_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disablePersonList_args : TBase
  {

    public List<int> PersonIdList { get; set; }

    public Token Token { get; set; }

    public disablePersonList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  PersonIdList = new List<int>();
                  TList _list48 = iprot.ReadListBegin();
                  for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                  {
                    int _elem50;
                    _elem50 = iprot.ReadI32();
                    PersonIdList.Add(_elem50);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disablePersonList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonIdList != null) {
          field.Name = "personIdList";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, PersonIdList.Count));
            foreach (int _iter51 in PersonIdList)
            {
              oprot.WriteI32(_iter51);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disablePersonList_args(");
      bool __first = true;
      if (PersonIdList != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonIdList: ");
        __sb.Append(PersonIdList);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class disablePersonList_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public disablePersonList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("disablePersonList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("disablePersonList_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class existsDevice_args : TBase
  {

    public int Id { get; set; }

    public existsDevice_args() {
    }

    public existsDevice_args(int id) : this() {
      this.Id = id;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_id = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
                isset_id = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_id)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Id not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("existsDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("existsDevice_args(");
      __sb.Append(", Id: ");
      __sb.Append(Id);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class existsDevice_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public existsDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("existsDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("existsDevice_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class existsFeature_args : TBase
  {

    public string Md5 { get; set; }

    public existsFeature_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Md5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("existsFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Md5 != null) {
          field.Name = "md5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Md5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("existsFeature_args(");
      bool __first = true;
      if (Md5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Md5: ");
        __sb.Append(Md5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class existsFeature_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public existsFeature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("existsFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("existsFeature_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class existsImage_args : TBase
  {

    public string Md5 { get; set; }

    public existsImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Md5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("existsImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Md5 != null) {
          field.Name = "md5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Md5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("existsImage_args(");
      bool __first = true;
      if (Md5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Md5: ");
        __sb.Append(Md5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class existsImage_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public existsImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("existsImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("existsImage_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class existsPerson_args : TBase
  {

    public int PersionId { get; set; }

    public existsPerson_args() {
    }

    public existsPerson_args(int persionId) : this() {
      this.PersionId = persionId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_persionId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersionId = iprot.ReadI32();
                isset_persionId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_persionId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersionId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("existsPerson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "persionId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersionId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("existsPerson_args(");
      __sb.Append(", PersionId: ");
      __sb.Append(PersionId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class existsPerson_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public existsPerson_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("existsPerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("existsPerson_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDevice_args : TBase
  {

    public int DeviceId { get; set; }

    public getDevice_args() {
    }

    public getDevice_args(int deviceId) : this() {
      this.DeviceId = deviceId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
                isset_deviceId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDevice_args(");
      __sb.Append(", DeviceId: ");
      __sb.Append(DeviceId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDevice_result : TBase
  {

    public DeviceBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeviceBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDevice_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroup_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public getDeviceGroup_args() {
    }

    public getDeviceGroup_args(int deviceGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroup_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroup_result : TBase
  {

    public DeviceGroupBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDeviceGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeviceGroupBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroups_args : TBase
  {

    public List<int> GroupIdList { get; set; }

    public getDeviceGroups_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  GroupIdList = new List<int>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    int _elem54;
                    _elem54 = iprot.ReadI32();
                    GroupIdList.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupIdList != null) {
          field.Name = "groupIdList";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, GroupIdList.Count));
            foreach (int _iter55 in GroupIdList)
            {
              oprot.WriteI32(_iter55);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroups_args(");
      bool __first = true;
      if (GroupIdList != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupIdList: ");
        __sb.Append(GroupIdList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroups_result : TBase
  {

    public List<DeviceGroupBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDeviceGroups_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<DeviceGroupBean>();
                  TList _list56 = iprot.ReadListBegin();
                  for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                  {
                    DeviceGroupBean _elem58;
                    _elem58 = new DeviceGroupBean();
                    _elem58.Read(iprot);
                    Success.Add(_elem58);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (DeviceGroupBean _iter59 in Success)
            {
              _iter59.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroups_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroupsBelongs_args : TBase
  {

    public int DeviceId { get; set; }

    public getDeviceGroupsBelongs_args() {
    }

    public getDeviceGroupsBelongs_args(int deviceId) : this() {
      this.DeviceId = deviceId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
                isset_deviceId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroupsBelongs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroupsBelongs_args(");
      __sb.Append(", DeviceId: ");
      __sb.Append(DeviceId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroupsBelongs_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDeviceGroupsBelongs_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list60 = iprot.ReadListBegin();
                  for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                  {
                    int _elem62;
                    _elem62 = iprot.ReadI32();
                    Success.Add(_elem62);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroupsBelongs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter63 in Success)
            {
              oprot.WriteI32(_iter63);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroupsBelongs_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroupsPermit_args : TBase
  {

    public int PersonGroupId { get; set; }

    public getDeviceGroupsPermit_args() {
    }

    public getDeviceGroupsPermit_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroupsPermit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroupsPermit_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroupsPermit_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDeviceGroupsPermit_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list64 = iprot.ReadListBegin();
                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    int _elem66;
                    _elem66 = iprot.ReadI32();
                    Success.Add(_elem66);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroupsPermit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter67 in Success)
            {
              oprot.WriteI32(_iter67);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroupsPermit_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroupsPermittedBy_args : TBase
  {

    public int PersonGroupId { get; set; }

    public getDeviceGroupsPermittedBy_args() {
    }

    public getDeviceGroupsPermittedBy_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroupsPermittedBy_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroupsPermittedBy_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceGroupsPermittedBy_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDeviceGroupsPermittedBy_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list68 = iprot.ReadListBegin();
                  for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                  {
                    int _elem70;
                    _elem70 = iprot.ReadI32();
                    Success.Add(_elem70);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceGroupsPermittedBy_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter71 in Success)
            {
              oprot.WriteI32(_iter71);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceGroupsPermittedBy_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceIdOfFeature_args : TBase
  {

    public string FeatureMd5 { get; set; }

    public getDeviceIdOfFeature_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FeatureMd5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceIdOfFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FeatureMd5 != null) {
          field.Name = "featureMd5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureMd5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceIdOfFeature_args(");
      bool __first = true;
      if (FeatureMd5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureMd5: ");
        __sb.Append(FeatureMd5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDeviceIdOfFeature_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDeviceIdOfFeature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDeviceIdOfFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDeviceIdOfFeature_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDevices_args : TBase
  {

    public List<int> IdList { get; set; }

    public getDevices_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  IdList = new List<int>();
                  TList _list72 = iprot.ReadListBegin();
                  for( int _i73 = 0; _i73 < _list72.Count; ++_i73)
                  {
                    int _elem74;
                    _elem74 = iprot.ReadI32();
                    IdList.Add(_elem74);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDevices_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IdList != null) {
          field.Name = "idList";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, IdList.Count));
            foreach (int _iter75 in IdList)
            {
              oprot.WriteI32(_iter75);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDevices_args(");
      bool __first = true;
      if (IdList != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdList: ");
        __sb.Append(IdList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDevices_result : TBase
  {

    public List<DeviceBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDevices_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<DeviceBean>();
                  TList _list76 = iprot.ReadListBegin();
                  for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                  {
                    DeviceBean _elem78;
                    _elem78 = new DeviceBean();
                    _elem78.Read(iprot);
                    Success.Add(_elem78);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDevices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (DeviceBean _iter79 in Success)
            {
              _iter79.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDevices_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDevicesOfGroup_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public getDevicesOfGroup_args() {
    }

    public getDevicesOfGroup_args(int deviceGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDevicesOfGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDevicesOfGroup_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDevicesOfGroup_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getDevicesOfGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list80 = iprot.ReadListBegin();
                  for( int _i81 = 0; _i81 < _list80.Count; ++_i81)
                  {
                    int _elem82;
                    _elem82 = iprot.ReadI32();
                    Success.Add(_elem82);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDevicesOfGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter83 in Success)
            {
              oprot.WriteI32(_iter83);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDevicesOfGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFace_args : TBase
  {

    public int FaceId { get; set; }

    public getFace_args() {
    }

    public getFace_args(int faceId) : this() {
      this.FaceId = faceId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_faceId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                FaceId = iprot.ReadI32();
                isset_faceId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_faceId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FaceId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "faceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FaceId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFace_args(");
      __sb.Append(", FaceId: ");
      __sb.Append(FaceId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFace_result : TBase
  {

    public FaceBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getFace_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FaceBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFace_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeature_args : TBase
  {

    public string Md5 { get; set; }

    public getFeature_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Md5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Md5 != null) {
          field.Name = "md5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Md5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeature_args(");
      bool __first = true;
      if (Md5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Md5: ");
        __sb.Append(Md5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeature_result : TBase
  {

    public FeatureBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getFeature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FeatureBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeature_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeatureBytes_args : TBase
  {

    public string Md5 { get; set; }

    public getFeatureBytes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Md5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeatureBytes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Md5 != null) {
          field.Name = "md5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Md5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeatureBytes_args(");
      bool __first = true;
      if (Md5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Md5: ");
        __sb.Append(Md5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeatureBytes_result : TBase
  {

    public byte[] Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getFeatureBytes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeatureBytes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Success);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeatureBytes_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeatures_args : TBase
  {

    public List<string> Md5 { get; set; }

    public getFeatures_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Md5 = new List<string>();
                  TList _list84 = iprot.ReadListBegin();
                  for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                  {
                    string _elem86;
                    _elem86 = iprot.ReadString();
                    Md5.Add(_elem86);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeatures_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Md5 != null) {
          field.Name = "md5";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Md5.Count));
            foreach (string _iter87 in Md5)
            {
              oprot.WriteString(_iter87);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeatures_args(");
      bool __first = true;
      if (Md5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Md5: ");
        __sb.Append(Md5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeatures_result : TBase
  {

    public List<FeatureBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getFeatures_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FeatureBean>();
                  TList _list88 = iprot.ReadListBegin();
                  for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                  {
                    FeatureBean _elem90;
                    _elem90 = new FeatureBean();
                    _elem90.Read(iprot);
                    Success.Add(_elem90);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeatures_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (FeatureBean _iter91 in Success)
            {
              _iter91.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeatures_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeaturesByPersonId_args : TBase
  {

    public int PersonId { get; set; }

    public getFeaturesByPersonId_args() {
    }

    public getFeaturesByPersonId_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeaturesByPersonId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeaturesByPersonId_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeaturesByPersonId_result : TBase
  {

    public List<string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getFeaturesByPersonId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list92 = iprot.ReadListBegin();
                  for( int _i93 = 0; _i93 < _list92.Count; ++_i93)
                  {
                    string _elem94;
                    _elem94 = iprot.ReadString();
                    Success.Add(_elem94);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeaturesByPersonId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter95 in Success)
            {
              oprot.WriteString(_iter95);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeaturesByPersonId_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeaturesByPersonIdAndSdkVersion_args : TBase
  {

    public int PersonId { get; set; }

    public string SdkVersion { get; set; }

    public getFeaturesByPersonIdAndSdkVersion_args() {
    }

    public getFeaturesByPersonIdAndSdkVersion_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SdkVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeaturesByPersonIdAndSdkVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        if (SdkVersion != null) {
          field.Name = "sdkVersion";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SdkVersion);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeaturesByPersonIdAndSdkVersion_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      if (SdkVersion != null) {
        __sb.Append(", SdkVersion: ");
        __sb.Append(SdkVersion);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeaturesByPersonIdAndSdkVersion_result : TBase
  {

    public List<string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getFeaturesByPersonIdAndSdkVersion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list96 = iprot.ReadListBegin();
                  for( int _i97 = 0; _i97 < _list96.Count; ++_i97)
                  {
                    string _elem98;
                    _elem98 = iprot.ReadString();
                    Success.Add(_elem98);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeaturesByPersonIdAndSdkVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter99 in Success)
            {
              oprot.WriteString(_iter99);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeaturesByPersonIdAndSdkVersion_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeaturesOfPerson_args : TBase
  {

    public int PersonId { get; set; }

    public getFeaturesOfPerson_args() {
    }

    public getFeaturesOfPerson_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeaturesOfPerson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeaturesOfPerson_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeaturesOfPerson_result : TBase
  {

    public List<string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getFeaturesOfPerson_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list100 = iprot.ReadListBegin();
                  for( int _i101 = 0; _i101 < _list100.Count; ++_i101)
                  {
                    string _elem102;
                    _elem102 = iprot.ReadString();
                    Success.Add(_elem102);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeaturesOfPerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter103 in Success)
            {
              oprot.WriteString(_iter103);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeaturesOfPerson_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeaturesPermittedOnDevice_args : TBase
  {

    public int DeviceId { get; set; }

    public bool IgnoreSchedule { get; set; }

    public string SdkVersion { get; set; }

    public List<string> ExcludeFeatureIds { get; set; }

    public getFeaturesPermittedOnDevice_args() {
    }

    public getFeaturesPermittedOnDevice_args(int deviceId, bool ignoreSchedule) : this() {
      this.DeviceId = deviceId;
      this.IgnoreSchedule = ignoreSchedule;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceId = false;
        bool isset_ignoreSchedule = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
                isset_deviceId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IgnoreSchedule = iprot.ReadBool();
                isset_ignoreSchedule = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SdkVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  ExcludeFeatureIds = new List<string>();
                  TList _list104 = iprot.ReadListBegin();
                  for( int _i105 = 0; _i105 < _list104.Count; ++_i105)
                  {
                    string _elem106;
                    _elem106 = iprot.ReadString();
                    ExcludeFeatureIds.Add(_elem106);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
        if (!isset_ignoreSchedule)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field IgnoreSchedule not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeaturesPermittedOnDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
        field.Name = "ignoreSchedule";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IgnoreSchedule);
        oprot.WriteFieldEnd();
        if (SdkVersion != null) {
          field.Name = "sdkVersion";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SdkVersion);
          oprot.WriteFieldEnd();
        }
        if (ExcludeFeatureIds != null) {
          field.Name = "excludeFeatureIds";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ExcludeFeatureIds.Count));
            foreach (string _iter107 in ExcludeFeatureIds)
            {
              oprot.WriteString(_iter107);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeaturesPermittedOnDevice_args(");
      __sb.Append(", DeviceId: ");
      __sb.Append(DeviceId);
      __sb.Append(", IgnoreSchedule: ");
      __sb.Append(IgnoreSchedule);
      if (SdkVersion != null) {
        __sb.Append(", SdkVersion: ");
        __sb.Append(SdkVersion);
      }
      if (ExcludeFeatureIds != null) {
        __sb.Append(", ExcludeFeatureIds: ");
        __sb.Append(ExcludeFeatureIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeaturesPermittedOnDevice_result : TBase
  {

    public List<FeatureBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getFeaturesPermittedOnDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FeatureBean>();
                  TList _list108 = iprot.ReadListBegin();
                  for( int _i109 = 0; _i109 < _list108.Count; ++_i109)
                  {
                    FeatureBean _elem110;
                    _elem110 = new FeatureBean();
                    _elem110.Read(iprot);
                    Success.Add(_elem110);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeaturesPermittedOnDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (FeatureBean _iter111 in Success)
            {
              _iter111.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeaturesPermittedOnDevice_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupPermit_args : TBase
  {

    public int DeviceId { get; set; }

    public int PersonGroupId { get; set; }

    public getGroupPermit_args() {
    }

    public getGroupPermit_args(int deviceId, int personGroupId) : this() {
      this.DeviceId = deviceId;
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceId = false;
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
                isset_deviceId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupPermit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupPermit_args(");
      __sb.Append(", DeviceId: ");
      __sb.Append(DeviceId);
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupPermit_result : TBase
  {

    public PermitBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getGroupPermit_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PermitBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupPermit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupPermit_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupPermitOnDeviceGroup_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public int PersonGroupId { get; set; }

    public getGroupPermitOnDeviceGroup_args() {
    }

    public getGroupPermitOnDeviceGroup_args(int deviceGroupId, int personGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupPermitOnDeviceGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupPermitOnDeviceGroup_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupPermitOnDeviceGroup_result : TBase
  {

    public PermitBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getGroupPermitOnDeviceGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PermitBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupPermitOnDeviceGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupPermitOnDeviceGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupPermits_args : TBase
  {

    public int DeviceId { get; set; }

    public List<int> PersonGroupIdList { get; set; }

    public getGroupPermits_args() {
    }

    public getGroupPermits_args(int deviceId) : this() {
      this.DeviceId = deviceId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
                isset_deviceId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  PersonGroupIdList = new List<int>();
                  TList _list112 = iprot.ReadListBegin();
                  for( int _i113 = 0; _i113 < _list112.Count; ++_i113)
                  {
                    int _elem114;
                    _elem114 = iprot.ReadI32();
                    PersonGroupIdList.Add(_elem114);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupPermits_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
        if (PersonGroupIdList != null) {
          field.Name = "personGroupIdList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, PersonGroupIdList.Count));
            foreach (int _iter115 in PersonGroupIdList)
            {
              oprot.WriteI32(_iter115);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupPermits_args(");
      __sb.Append(", DeviceId: ");
      __sb.Append(DeviceId);
      if (PersonGroupIdList != null) {
        __sb.Append(", PersonGroupIdList: ");
        __sb.Append(PersonGroupIdList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupPermits_result : TBase
  {

    public List<PermitBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getGroupPermits_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PermitBean>();
                  TList _list116 = iprot.ReadListBegin();
                  for( int _i117 = 0; _i117 < _list116.Count; ++_i117)
                  {
                    PermitBean _elem118;
                    _elem118 = new PermitBean();
                    _elem118.Read(iprot);
                    Success.Add(_elem118);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupPermits_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (PermitBean _iter119 in Success)
            {
              _iter119.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupPermits_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getImage_args : TBase
  {

    public string ImageMD5 { get; set; }

    public getImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ImageMD5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ImageMD5 != null) {
          field.Name = "imageMD5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ImageMD5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getImage_args(");
      bool __first = true;
      if (ImageMD5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImageMD5: ");
        __sb.Append(ImageMD5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getImage_result : TBase
  {

    public ImageBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ImageBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getImage_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getImageBytes_args : TBase
  {

    public string ImageMD5 { get; set; }

    public getImageBytes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ImageMD5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getImageBytes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ImageMD5 != null) {
          field.Name = "imageMD5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ImageMD5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getImageBytes_args(");
      bool __first = true;
      if (ImageMD5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImageMD5: ");
        __sb.Append(ImageMD5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getImageBytes_result : TBase
  {

    public byte[] Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getImageBytes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getImageBytes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Success);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getImageBytes_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getImagesAssociatedByFeature_args : TBase
  {

    public string FeatureMd5 { get; set; }

    public getImagesAssociatedByFeature_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FeatureMd5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getImagesAssociatedByFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FeatureMd5 != null) {
          field.Name = "featureMd5";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureMd5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getImagesAssociatedByFeature_args(");
      bool __first = true;
      if (FeatureMd5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureMd5: ");
        __sb.Append(FeatureMd5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getImagesAssociatedByFeature_result : TBase
  {

    public List<string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getImagesAssociatedByFeature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list120 = iprot.ReadListBegin();
                  for( int _i121 = 0; _i121 < _list120.Count; ++_i121)
                  {
                    string _elem122;
                    _elem122 = iprot.ReadString();
                    Success.Add(_elem122);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getImagesAssociatedByFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter123 in Success)
            {
              oprot.WriteString(_iter123);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getImagesAssociatedByFeature_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLogBeansByPersonId_args : TBase
  {

    public int PersonId { get; set; }

    public getLogBeansByPersonId_args() {
    }

    public getLogBeansByPersonId_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLogBeansByPersonId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLogBeansByPersonId_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLogBeansByPersonId_result : TBase
  {

    public List<LogBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getLogBeansByPersonId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LogBean>();
                  TList _list124 = iprot.ReadListBegin();
                  for( int _i125 = 0; _i125 < _list124.Count; ++_i125)
                  {
                    LogBean _elem126;
                    _elem126 = new LogBean();
                    _elem126.Read(iprot);
                    Success.Add(_elem126);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLogBeansByPersonId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (LogBean _iter127 in Success)
            {
              _iter127.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLogBeansByPersonId_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPerson_args : TBase
  {

    public int PersonId { get; set; }

    public getPerson_args() {
    }

    public getPerson_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPerson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPerson_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPerson_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPerson_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPerson_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonByPapersNum_args : TBase
  {

    public string PapersNum { get; set; }

    public getPersonByPapersNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PapersNum = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonByPapersNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PapersNum != null) {
          field.Name = "papersNum";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PapersNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonByPapersNum_args(");
      bool __first = true;
      if (PapersNum != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PapersNum: ");
        __sb.Append(PapersNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonByPapersNum_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersonByPapersNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonByPapersNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonByPapersNum_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonGroup_args : TBase
  {

    public int PersonGroupId { get; set; }

    public getPersonGroup_args() {
    }

    public getPersonGroup_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonGroup_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonGroup_result : TBase
  {

    public PersonGroupBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersonGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonGroupBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonGroups_args : TBase
  {

    public List<int> GroupIdList { get; set; }

    public getPersonGroups_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  GroupIdList = new List<int>();
                  TList _list128 = iprot.ReadListBegin();
                  for( int _i129 = 0; _i129 < _list128.Count; ++_i129)
                  {
                    int _elem130;
                    _elem130 = iprot.ReadI32();
                    GroupIdList.Add(_elem130);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupIdList != null) {
          field.Name = "groupIdList";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, GroupIdList.Count));
            foreach (int _iter131 in GroupIdList)
            {
              oprot.WriteI32(_iter131);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonGroups_args(");
      bool __first = true;
      if (GroupIdList != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupIdList: ");
        __sb.Append(GroupIdList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonGroups_result : TBase
  {

    public List<PersonGroupBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersonGroups_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PersonGroupBean>();
                  TList _list132 = iprot.ReadListBegin();
                  for( int _i133 = 0; _i133 < _list132.Count; ++_i133)
                  {
                    PersonGroupBean _elem134;
                    _elem134 = new PersonGroupBean();
                    _elem134.Read(iprot);
                    Success.Add(_elem134);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (PersonGroupBean _iter135 in Success)
            {
              _iter135.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonGroups_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonGroupsBelongs_args : TBase
  {

    public int PersonId { get; set; }

    public getPersonGroupsBelongs_args() {
    }

    public getPersonGroupsBelongs_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonGroupsBelongs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonGroupsBelongs_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonGroupsBelongs_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersonGroupsBelongs_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list136 = iprot.ReadListBegin();
                  for( int _i137 = 0; _i137 < _list136.Count; ++_i137)
                  {
                    int _elem138;
                    _elem138 = iprot.ReadI32();
                    Success.Add(_elem138);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonGroupsBelongs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter139 in Success)
            {
              oprot.WriteI32(_iter139);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonGroupsBelongs_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonGroupsPermittedBy_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public getPersonGroupsPermittedBy_args() {
    }

    public getPersonGroupsPermittedBy_args(int deviceGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonGroupsPermittedBy_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonGroupsPermittedBy_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonGroupsPermittedBy_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersonGroupsPermittedBy_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list140 = iprot.ReadListBegin();
                  for( int _i141 = 0; _i141 < _list140.Count; ++_i141)
                  {
                    int _elem142;
                    _elem142 = iprot.ReadI32();
                    Success.Add(_elem142);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonGroupsPermittedBy_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter143 in Success)
            {
              oprot.WriteI32(_iter143);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonGroupsPermittedBy_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonPermit_args : TBase
  {

    public int DeviceId { get; set; }

    public int PersonId { get; set; }

    public getPersonPermit_args() {
    }

    public getPersonPermit_args(int deviceId, int personId) : this() {
      this.DeviceId = deviceId;
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceId = false;
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
                isset_deviceId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonPermit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonPermit_args(");
      __sb.Append(", DeviceId: ");
      __sb.Append(DeviceId);
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonPermit_result : TBase
  {

    public PermitBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersonPermit_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PermitBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonPermit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonPermit_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonPermits_args : TBase
  {

    public int DeviceId { get; set; }

    public List<int> PersonIdList { get; set; }

    public getPersonPermits_args() {
    }

    public getPersonPermits_args(int deviceId) : this() {
      this.DeviceId = deviceId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
                isset_deviceId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  PersonIdList = new List<int>();
                  TList _list144 = iprot.ReadListBegin();
                  for( int _i145 = 0; _i145 < _list144.Count; ++_i145)
                  {
                    int _elem146;
                    _elem146 = iprot.ReadI32();
                    PersonIdList.Add(_elem146);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonPermits_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId);
        oprot.WriteFieldEnd();
        if (PersonIdList != null) {
          field.Name = "personIdList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, PersonIdList.Count));
            foreach (int _iter147 in PersonIdList)
            {
              oprot.WriteI32(_iter147);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonPermits_args(");
      __sb.Append(", DeviceId: ");
      __sb.Append(DeviceId);
      if (PersonIdList != null) {
        __sb.Append(", PersonIdList: ");
        __sb.Append(PersonIdList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonPermits_result : TBase
  {

    public List<PermitBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersonPermits_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PermitBean>();
                  TList _list148 = iprot.ReadListBegin();
                  for( int _i149 = 0; _i149 < _list148.Count; ++_i149)
                  {
                    PermitBean _elem150;
                    _elem150 = new PermitBean();
                    _elem150.Read(iprot);
                    Success.Add(_elem150);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonPermits_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (PermitBean _iter151 in Success)
            {
              _iter151.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonPermits_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersons_args : TBase
  {

    public List<int> IdList { get; set; }

    public getPersons_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  IdList = new List<int>();
                  TList _list152 = iprot.ReadListBegin();
                  for( int _i153 = 0; _i153 < _list152.Count; ++_i153)
                  {
                    int _elem154;
                    _elem154 = iprot.ReadI32();
                    IdList.Add(_elem154);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersons_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IdList != null) {
          field.Name = "idList";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, IdList.Count));
            foreach (int _iter155 in IdList)
            {
              oprot.WriteI32(_iter155);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersons_args(");
      bool __first = true;
      if (IdList != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdList: ");
        __sb.Append(IdList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersons_result : TBase
  {

    public List<PersonBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersons_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PersonBean>();
                  TList _list156 = iprot.ReadListBegin();
                  for( int _i157 = 0; _i157 < _list156.Count; ++_i157)
                  {
                    PersonBean _elem158;
                    _elem158 = new PersonBean();
                    _elem158.Read(iprot);
                    Success.Add(_elem158);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersons_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (PersonBean _iter159 in Success)
            {
              _iter159.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersons_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonsOfGroup_args : TBase
  {

    public int PersonGroupId { get; set; }

    public getPersonsOfGroup_args() {
    }

    public getPersonsOfGroup_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonsOfGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonsOfGroup_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonsOfGroup_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getPersonsOfGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list160 = iprot.ReadListBegin();
                  for( int _i161 = 0; _i161 < _list160.Count; ++_i161)
                  {
                    int _elem162;
                    _elem162 = iprot.ReadI32();
                    Success.Add(_elem162);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonsOfGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter163 in Success)
            {
              oprot.WriteI32(_iter163);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonsOfGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProperty_args : TBase
  {

    public string Key { get; set; }

    public Token Token { get; set; }

    public getProperty_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProperty_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProperty_args(");
      bool __first = true;
      if (Key != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Key: ");
        __sb.Append(Key);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProperty_result : TBase
  {

    public string Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getProperty_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProperty_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProperty_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRedisParameters_args : TBase
  {

    public Token Token { get; set; }

    public getRedisParameters_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRedisParameters_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRedisParameters_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRedisParameters_result : TBase
  {

    public Dictionary<MQParam, string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getRedisParameters_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<MQParam, string>();
                  TMap _map164 = iprot.ReadMapBegin();
                  for( int _i165 = 0; _i165 < _map164.Count; ++_i165)
                  {
                    MQParam _key166;
                    string _val167;
                    _key166 = (MQParam)iprot.ReadI32();
                    _val167 = iprot.ReadString();
                    Success[_key166] = _val167;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRedisParameters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.String, Success.Count));
            foreach (MQParam _iter168 in Success.Keys)
            {
              oprot.WriteI32((int)_iter168);
              oprot.WriteString(Success[_iter168]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRedisParameters_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getServiceConfig_args : TBase
  {

    public Token Token { get; set; }

    public getServiceConfig_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getServiceConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getServiceConfig_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getServiceConfig_result : TBase
  {

    public Dictionary<string, string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getServiceConfig_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map169 = iprot.ReadMapBegin();
                  for( int _i170 = 0; _i170 < _map169.Count; ++_i170)
                  {
                    string _key171;
                    string _val172;
                    _key171 = iprot.ReadString();
                    _val172 = iprot.ReadString();
                    Success[_key171] = _val172;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getServiceConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
            foreach (string _iter173 in Success.Keys)
            {
              oprot.WriteString(_iter173);
              oprot.WriteString(Success[_iter173]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getServiceConfig_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSubDeviceGroup_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public getSubDeviceGroup_args() {
    }

    public getSubDeviceGroup_args(int deviceGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSubDeviceGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSubDeviceGroup_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSubDeviceGroup_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getSubDeviceGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list174 = iprot.ReadListBegin();
                  for( int _i175 = 0; _i175 < _list174.Count; ++_i175)
                  {
                    int _elem176;
                    _elem176 = iprot.ReadI32();
                    Success.Add(_elem176);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSubDeviceGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter177 in Success)
            {
              oprot.WriteI32(_iter177);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSubDeviceGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSubPersonGroup_args : TBase
  {

    public int PersonGroupId { get; set; }

    public getSubPersonGroup_args() {
    }

    public getSubPersonGroup_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSubPersonGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSubPersonGroup_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSubPersonGroup_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public getSubPersonGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list178 = iprot.ReadListBegin();
                  for( int _i179 = 0; _i179 < _list178.Count; ++_i179)
                  {
                    int _elem180;
                    _elem180 = iprot.ReadI32();
                    Success.Add(_elem180);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSubPersonGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter181 in Success)
            {
              oprot.WriteI32(_iter181);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSubPersonGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isDisable_args : TBase
  {

    public int PersonId { get; set; }

    public isDisable_args() {
    }

    public isDisable_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isDisable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isDisable_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isDisable_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isDisable_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isDisable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isDisable_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isLocal_args : TBase
  {

    public isLocal_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isLocal_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isLocal_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isLocal_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isLocal_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isLocal_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isLocal_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidAckChannel_args : TBase
  {

    public string AckChannel { get; set; }

    public isValidAckChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AckChannel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidAckChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AckChannel != null) {
          field.Name = "ackChannel";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AckChannel);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidAckChannel_args(");
      bool __first = true;
      if (AckChannel != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AckChannel: ");
        __sb.Append(AckChannel);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidAckChannel_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isValidAckChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidAckChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidAckChannel_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidCmdSn_args : TBase
  {

    public int CmdSn { get; set; }

    public isValidCmdSn_args() {
    }

    public isValidCmdSn_args(int cmdSn) : this() {
      this.CmdSn = cmdSn;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_cmdSn = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                CmdSn = iprot.ReadI32();
                isset_cmdSn = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_cmdSn)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CmdSn not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidCmdSn_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "cmdSn";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CmdSn);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidCmdSn_args(");
      __sb.Append(", CmdSn: ");
      __sb.Append(CmdSn);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidCmdSn_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isValidCmdSn_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidCmdSn_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidCmdSn_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidDeviceToken_args : TBase
  {

    public Token Token { get; set; }

    public isValidDeviceToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidDeviceToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidDeviceToken_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidDeviceToken_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isValidDeviceToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidDeviceToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidDeviceToken_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidPassword_args : TBase
  {

    public string UserId { get; set; }

    public string Password { get; set; }

    public bool IsMd5 { get; set; }

    public isValidPassword_args() {
    }

    public isValidPassword_args(bool isMd5) : this() {
      this.IsMd5 = isMd5;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_isMd5 = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IsMd5 = iprot.ReadBool();
                isset_isMd5 = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_isMd5)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field IsMd5 not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidPassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (Password != null) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        field.Name = "isMd5";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsMd5);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidPassword_args(");
      bool __first = true;
      if (UserId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (Password != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("IsMd5: ");
      __sb.Append(IsMd5);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidPassword_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isValidPassword_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidPassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidPassword_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidPersonToken_args : TBase
  {

    public Token Token { get; set; }

    public isValidPersonToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidPersonToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidPersonToken_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidPersonToken_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isValidPersonToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidPersonToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidPersonToken_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidRootToken_args : TBase
  {

    public Token Token { get; set; }

    public isValidRootToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidRootToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidRootToken_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidRootToken_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isValidRootToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidRootToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidRootToken_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidToken_args : TBase
  {

    public Token Token { get; set; }

    public isValidToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidToken_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidToken_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isValidToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidToken_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidUserToken_args : TBase
  {

    public Token Token { get; set; }

    public isValidUserToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidUserToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidUserToken_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isValidUserToken_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public isValidUserToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isValidUserToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isValidUserToken_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class listOfParentForDeviceGroup_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public listOfParentForDeviceGroup_args() {
    }

    public listOfParentForDeviceGroup_args(int deviceGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("listOfParentForDeviceGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("listOfParentForDeviceGroup_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class listOfParentForDeviceGroup_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public listOfParentForDeviceGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list182 = iprot.ReadListBegin();
                  for( int _i183 = 0; _i183 < _list182.Count; ++_i183)
                  {
                    int _elem184;
                    _elem184 = iprot.ReadI32();
                    Success.Add(_elem184);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("listOfParentForDeviceGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter185 in Success)
            {
              oprot.WriteI32(_iter185);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("listOfParentForDeviceGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class listOfParentForPersonGroup_args : TBase
  {

    public int PersonGroupId { get; set; }

    public listOfParentForPersonGroup_args() {
    }

    public listOfParentForPersonGroup_args(int personGroupId) : this() {
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("listOfParentForPersonGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("listOfParentForPersonGroup_args(");
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class listOfParentForPersonGroup_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public listOfParentForPersonGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list186 = iprot.ReadListBegin();
                  for( int _i187 = 0; _i187 < _list186.Count; ++_i187)
                  {
                    int _elem188;
                    _elem188 = iprot.ReadI32();
                    Success.Add(_elem188);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("listOfParentForPersonGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter189 in Success)
            {
              oprot.WriteI32(_iter189);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("listOfParentForPersonGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadAllPerson_args : TBase
  {

    public loadAllPerson_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadAllPerson_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadAllPerson_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadAllPerson_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadAllPerson_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list190 = iprot.ReadListBegin();
                  for( int _i191 = 0; _i191 < _list190.Count; ++_i191)
                  {
                    int _elem192;
                    _elem192 = iprot.ReadI32();
                    Success.Add(_elem192);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadAllPerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter193 in Success)
            {
              oprot.WriteI32(_iter193);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadAllPerson_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadDeviceByWhere_args : TBase
  {

    public string Where { get; set; }

    public int StartRow { get; set; }

    public int NumRows { get; set; }

    public loadDeviceByWhere_args() {
    }

    public loadDeviceByWhere_args(int startRow, int numRows) : this() {
      this.StartRow = startRow;
      this.NumRows = numRows;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_startRow = false;
        bool isset_numRows = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                StartRow = iprot.ReadI32();
                isset_startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
                isset_numRows = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_startRow)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartRow not set");
        if (!isset_numRows)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field NumRows not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadDeviceByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        field.Name = "startRow";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartRow);
        oprot.WriteFieldEnd();
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadDeviceByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("StartRow: ");
      __sb.Append(StartRow);
      __sb.Append(", NumRows: ");
      __sb.Append(NumRows);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadDeviceByWhere_result : TBase
  {

    public List<DeviceBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadDeviceByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<DeviceBean>();
                  TList _list194 = iprot.ReadListBegin();
                  for( int _i195 = 0; _i195 < _list194.Count; ++_i195)
                  {
                    DeviceBean _elem196;
                    _elem196 = new DeviceBean();
                    _elem196.Read(iprot);
                    Success.Add(_elem196);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadDeviceByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (DeviceBean _iter197 in Success)
            {
              _iter197.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadDeviceByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadDeviceGroupByWhere_args : TBase
  {

    public string Where { get; set; }

    public int StartRow { get; set; }

    public int NumRows { get; set; }

    public loadDeviceGroupByWhere_args() {
    }

    public loadDeviceGroupByWhere_args(int startRow, int numRows) : this() {
      this.StartRow = startRow;
      this.NumRows = numRows;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_startRow = false;
        bool isset_numRows = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                StartRow = iprot.ReadI32();
                isset_startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
                isset_numRows = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_startRow)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartRow not set");
        if (!isset_numRows)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field NumRows not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadDeviceGroupByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        field.Name = "startRow";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartRow);
        oprot.WriteFieldEnd();
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadDeviceGroupByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("StartRow: ");
      __sb.Append(StartRow);
      __sb.Append(", NumRows: ");
      __sb.Append(NumRows);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadDeviceGroupByWhere_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadDeviceGroupByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list198 = iprot.ReadListBegin();
                  for( int _i199 = 0; _i199 < _list198.Count; ++_i199)
                  {
                    int _elem200;
                    _elem200 = iprot.ReadI32();
                    Success.Add(_elem200);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadDeviceGroupByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter201 in Success)
            {
              oprot.WriteI32(_iter201);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadDeviceGroupByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadDeviceGroupIdByWhere_args : TBase
  {

    public string Where { get; set; }

    public loadDeviceGroupIdByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadDeviceGroupIdByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadDeviceGroupIdByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadDeviceGroupIdByWhere_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadDeviceGroupIdByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list202 = iprot.ReadListBegin();
                  for( int _i203 = 0; _i203 < _list202.Count; ++_i203)
                  {
                    int _elem204;
                    _elem204 = iprot.ReadI32();
                    Success.Add(_elem204);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadDeviceGroupIdByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter205 in Success)
            {
              oprot.WriteI32(_iter205);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadDeviceGroupIdByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadDeviceIdByWhere_args : TBase
  {

    public string Where { get; set; }

    public loadDeviceIdByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadDeviceIdByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadDeviceIdByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadDeviceIdByWhere_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadDeviceIdByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list206 = iprot.ReadListBegin();
                  for( int _i207 = 0; _i207 < _list206.Count; ++_i207)
                  {
                    int _elem208;
                    _elem208 = iprot.ReadI32();
                    Success.Add(_elem208);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadDeviceIdByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter209 in Success)
            {
              oprot.WriteI32(_iter209);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadDeviceIdByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadFeatureMd5ByUpdate_args : TBase
  {

    public long Timestamp { get; set; }

    public loadFeatureMd5ByUpdate_args() {
    }

    public loadFeatureMd5ByUpdate_args(long timestamp) : this() {
      this.Timestamp = timestamp;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_timestamp = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
                isset_timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_timestamp)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamp not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadFeatureMd5ByUpdate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadFeatureMd5ByUpdate_args(");
      __sb.Append(", Timestamp: ");
      __sb.Append(Timestamp);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadFeatureMd5ByUpdate_result : TBase
  {

    public List<string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadFeatureMd5ByUpdate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list210 = iprot.ReadListBegin();
                  for( int _i211 = 0; _i211 < _list210.Count; ++_i211)
                  {
                    string _elem212;
                    _elem212 = iprot.ReadString();
                    Success.Add(_elem212);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadFeatureMd5ByUpdate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter213 in Success)
            {
              oprot.WriteString(_iter213);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadFeatureMd5ByUpdate_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadFeatureMd5ByUpdateTimeStr_args : TBase
  {

    public string Timestamp { get; set; }

    public loadFeatureMd5ByUpdateTimeStr_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Timestamp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadFeatureMd5ByUpdateTimeStr_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Timestamp != null) {
          field.Name = "timestamp";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Timestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadFeatureMd5ByUpdateTimeStr_args(");
      bool __first = true;
      if (Timestamp != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadFeatureMd5ByUpdateTimeStr_result : TBase
  {

    public List<string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadFeatureMd5ByUpdateTimeStr_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list214 = iprot.ReadListBegin();
                  for( int _i215 = 0; _i215 < _list214.Count; ++_i215)
                  {
                    string _elem216;
                    _elem216 = iprot.ReadString();
                    Success.Add(_elem216);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadFeatureMd5ByUpdateTimeStr_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter217 in Success)
            {
              oprot.WriteString(_iter217);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadFeatureMd5ByUpdateTimeStr_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadLogByWhere_args : TBase
  {

    public string Where { get; set; }

    public int StartRow { get; set; }

    public int NumRows { get; set; }

    public loadLogByWhere_args() {
    }

    public loadLogByWhere_args(int startRow, int numRows) : this() {
      this.StartRow = startRow;
      this.NumRows = numRows;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_startRow = false;
        bool isset_numRows = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                StartRow = iprot.ReadI32();
                isset_startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
                isset_numRows = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_startRow)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartRow not set");
        if (!isset_numRows)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field NumRows not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadLogByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        field.Name = "startRow";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartRow);
        oprot.WriteFieldEnd();
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadLogByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("StartRow: ");
      __sb.Append(StartRow);
      __sb.Append(", NumRows: ");
      __sb.Append(NumRows);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadLogByWhere_result : TBase
  {

    public List<LogBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadLogByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LogBean>();
                  TList _list218 = iprot.ReadListBegin();
                  for( int _i219 = 0; _i219 < _list218.Count; ++_i219)
                  {
                    LogBean _elem220;
                    _elem220 = new LogBean();
                    _elem220.Read(iprot);
                    Success.Add(_elem220);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadLogByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (LogBean _iter221 in Success)
            {
              _iter221.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadLogByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadLogLightByVerifyTime_args : TBase
  {

    public long Timestamp { get; set; }

    public int StartRow { get; set; }

    public int NumRows { get; set; }

    public loadLogLightByVerifyTime_args() {
    }

    public loadLogLightByVerifyTime_args(long timestamp, int startRow, int numRows) : this() {
      this.Timestamp = timestamp;
      this.StartRow = startRow;
      this.NumRows = numRows;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_timestamp = false;
        bool isset_startRow = false;
        bool isset_numRows = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
                isset_timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                StartRow = iprot.ReadI32();
                isset_startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
                isset_numRows = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_timestamp)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamp not set");
        if (!isset_startRow)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartRow not set");
        if (!isset_numRows)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field NumRows not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadLogLightByVerifyTime_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
        field.Name = "startRow";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartRow);
        oprot.WriteFieldEnd();
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadLogLightByVerifyTime_args(");
      __sb.Append(", Timestamp: ");
      __sb.Append(Timestamp);
      __sb.Append(", StartRow: ");
      __sb.Append(StartRow);
      __sb.Append(", NumRows: ");
      __sb.Append(NumRows);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadLogLightByVerifyTime_result : TBase
  {

    public List<LogLightBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadLogLightByVerifyTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LogLightBean>();
                  TList _list222 = iprot.ReadListBegin();
                  for( int _i223 = 0; _i223 < _list222.Count; ++_i223)
                  {
                    LogLightBean _elem224;
                    _elem224 = new LogLightBean();
                    _elem224.Read(iprot);
                    Success.Add(_elem224);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadLogLightByVerifyTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (LogLightBean _iter225 in Success)
            {
              _iter225.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadLogLightByVerifyTime_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadLogLightByVerifyTimeTimestr_args : TBase
  {

    public string Timestamp { get; set; }

    public int StartRow { get; set; }

    public int NumRows { get; set; }

    public loadLogLightByVerifyTimeTimestr_args() {
    }

    public loadLogLightByVerifyTimeTimestr_args(int startRow, int numRows) : this() {
      this.StartRow = startRow;
      this.NumRows = numRows;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_startRow = false;
        bool isset_numRows = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Timestamp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                StartRow = iprot.ReadI32();
                isset_startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
                isset_numRows = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_startRow)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartRow not set");
        if (!isset_numRows)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field NumRows not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadLogLightByVerifyTimeTimestr_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Timestamp != null) {
          field.Name = "timestamp";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Timestamp);
          oprot.WriteFieldEnd();
        }
        field.Name = "startRow";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartRow);
        oprot.WriteFieldEnd();
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadLogLightByVerifyTimeTimestr_args(");
      bool __first = true;
      if (Timestamp != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("StartRow: ");
      __sb.Append(StartRow);
      __sb.Append(", NumRows: ");
      __sb.Append(NumRows);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadLogLightByVerifyTimeTimestr_result : TBase
  {

    public List<LogLightBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadLogLightByVerifyTimeTimestr_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LogLightBean>();
                  TList _list226 = iprot.ReadListBegin();
                  for( int _i227 = 0; _i227 < _list226.Count; ++_i227)
                  {
                    LogLightBean _elem228;
                    _elem228 = new LogLightBean();
                    _elem228.Read(iprot);
                    Success.Add(_elem228);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadLogLightByVerifyTimeTimestr_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (LogLightBean _iter229 in Success)
            {
              _iter229.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadLogLightByVerifyTimeTimestr_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadLogLightByWhere_args : TBase
  {

    public string Where { get; set; }

    public int StartRow { get; set; }

    public int NumRows { get; set; }

    public loadLogLightByWhere_args() {
    }

    public loadLogLightByWhere_args(int startRow, int numRows) : this() {
      this.StartRow = startRow;
      this.NumRows = numRows;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_startRow = false;
        bool isset_numRows = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                StartRow = iprot.ReadI32();
                isset_startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
                isset_numRows = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_startRow)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartRow not set");
        if (!isset_numRows)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field NumRows not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadLogLightByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        field.Name = "startRow";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartRow);
        oprot.WriteFieldEnd();
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadLogLightByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("StartRow: ");
      __sb.Append(StartRow);
      __sb.Append(", NumRows: ");
      __sb.Append(NumRows);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadLogLightByWhere_result : TBase
  {

    public List<LogLightBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadLogLightByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LogLightBean>();
                  TList _list230 = iprot.ReadListBegin();
                  for( int _i231 = 0; _i231 < _list230.Count; ++_i231)
                  {
                    LogLightBean _elem232;
                    _elem232 = new LogLightBean();
                    _elem232.Read(iprot);
                    Success.Add(_elem232);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadLogLightByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (LogLightBean _iter233 in Success)
            {
              _iter233.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadLogLightByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPermitByUpdate_args : TBase
  {

    public long Timestamp { get; set; }

    public loadPermitByUpdate_args() {
    }

    public loadPermitByUpdate_args(long timestamp) : this() {
      this.Timestamp = timestamp;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_timestamp = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
                isset_timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_timestamp)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamp not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPermitByUpdate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPermitByUpdate_args(");
      __sb.Append(", Timestamp: ");
      __sb.Append(Timestamp);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPermitByUpdate_result : TBase
  {

    public List<PermitBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadPermitByUpdate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PermitBean>();
                  TList _list234 = iprot.ReadListBegin();
                  for( int _i235 = 0; _i235 < _list234.Count; ++_i235)
                  {
                    PermitBean _elem236;
                    _elem236 = new PermitBean();
                    _elem236.Read(iprot);
                    Success.Add(_elem236);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPermitByUpdate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (PermitBean _iter237 in Success)
            {
              _iter237.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPermitByUpdate_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPermitByUpdateTimestr_args : TBase
  {

    public string Timestamp { get; set; }

    public loadPermitByUpdateTimestr_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Timestamp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPermitByUpdateTimestr_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Timestamp != null) {
          field.Name = "timestamp";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Timestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPermitByUpdateTimestr_args(");
      bool __first = true;
      if (Timestamp != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPermitByUpdateTimestr_result : TBase
  {

    public List<PermitBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadPermitByUpdateTimestr_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PermitBean>();
                  TList _list238 = iprot.ReadListBegin();
                  for( int _i239 = 0; _i239 < _list238.Count; ++_i239)
                  {
                    PermitBean _elem240;
                    _elem240 = new PermitBean();
                    _elem240.Read(iprot);
                    Success.Add(_elem240);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPermitByUpdateTimestr_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (PermitBean _iter241 in Success)
            {
              _iter241.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPermitByUpdateTimestr_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonByWhere_args : TBase
  {

    public string Where { get; set; }

    public int StartRow { get; set; }

    public int NumRows { get; set; }

    public loadPersonByWhere_args() {
    }

    public loadPersonByWhere_args(int startRow, int numRows) : this() {
      this.StartRow = startRow;
      this.NumRows = numRows;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_startRow = false;
        bool isset_numRows = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                StartRow = iprot.ReadI32();
                isset_startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
                isset_numRows = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_startRow)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartRow not set");
        if (!isset_numRows)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field NumRows not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        field.Name = "startRow";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartRow);
        oprot.WriteFieldEnd();
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("StartRow: ");
      __sb.Append(StartRow);
      __sb.Append(", NumRows: ");
      __sb.Append(NumRows);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonByWhere_result : TBase
  {

    public List<PersonBean> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadPersonByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PersonBean>();
                  TList _list242 = iprot.ReadListBegin();
                  for( int _i243 = 0; _i243 < _list242.Count; ++_i243)
                  {
                    PersonBean _elem244;
                    _elem244 = new PersonBean();
                    _elem244.Read(iprot);
                    Success.Add(_elem244);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (PersonBean _iter245 in Success)
            {
              _iter245.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonGroupByWhere_args : TBase
  {

    public string Where { get; set; }

    public int StartRow { get; set; }

    public int NumRows { get; set; }

    public loadPersonGroupByWhere_args() {
    }

    public loadPersonGroupByWhere_args(int startRow, int numRows) : this() {
      this.StartRow = startRow;
      this.NumRows = numRows;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_startRow = false;
        bool isset_numRows = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                StartRow = iprot.ReadI32();
                isset_startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
                isset_numRows = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_startRow)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StartRow not set");
        if (!isset_numRows)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field NumRows not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonGroupByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        field.Name = "startRow";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartRow);
        oprot.WriteFieldEnd();
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonGroupByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("StartRow: ");
      __sb.Append(StartRow);
      __sb.Append(", NumRows: ");
      __sb.Append(NumRows);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonGroupByWhere_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadPersonGroupByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list246 = iprot.ReadListBegin();
                  for( int _i247 = 0; _i247 < _list246.Count; ++_i247)
                  {
                    int _elem248;
                    _elem248 = iprot.ReadI32();
                    Success.Add(_elem248);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonGroupByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter249 in Success)
            {
              oprot.WriteI32(_iter249);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonGroupByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonGroupIdByWhere_args : TBase
  {

    public string Where { get; set; }

    public loadPersonGroupIdByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonGroupIdByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonGroupIdByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonGroupIdByWhere_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadPersonGroupIdByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list250 = iprot.ReadListBegin();
                  for( int _i251 = 0; _i251 < _list250.Count; ++_i251)
                  {
                    int _elem252;
                    _elem252 = iprot.ReadI32();
                    Success.Add(_elem252);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonGroupIdByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter253 in Success)
            {
              oprot.WriteI32(_iter253);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonGroupIdByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonIdByUpdateTime_args : TBase
  {

    public long Timestamp { get; set; }

    public loadPersonIdByUpdateTime_args() {
    }

    public loadPersonIdByUpdateTime_args(long timestamp) : this() {
      this.Timestamp = timestamp;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_timestamp = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
                isset_timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_timestamp)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamp not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonIdByUpdateTime_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonIdByUpdateTime_args(");
      __sb.Append(", Timestamp: ");
      __sb.Append(Timestamp);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonIdByUpdateTime_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadPersonIdByUpdateTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list254 = iprot.ReadListBegin();
                  for( int _i255 = 0; _i255 < _list254.Count; ++_i255)
                  {
                    int _elem256;
                    _elem256 = iprot.ReadI32();
                    Success.Add(_elem256);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonIdByUpdateTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter257 in Success)
            {
              oprot.WriteI32(_iter257);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonIdByUpdateTime_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonIdByUpdateTimeTimeStr_args : TBase
  {

    public string Timestamp { get; set; }

    public loadPersonIdByUpdateTimeTimeStr_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Timestamp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonIdByUpdateTimeTimeStr_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Timestamp != null) {
          field.Name = "timestamp";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Timestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonIdByUpdateTimeTimeStr_args(");
      bool __first = true;
      if (Timestamp != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonIdByUpdateTimeTimeStr_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadPersonIdByUpdateTimeTimeStr_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list258 = iprot.ReadListBegin();
                  for( int _i259 = 0; _i259 < _list258.Count; ++_i259)
                  {
                    int _elem260;
                    _elem260 = iprot.ReadI32();
                    Success.Add(_elem260);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonIdByUpdateTimeTimeStr_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter261 in Success)
            {
              oprot.WriteI32(_iter261);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonIdByUpdateTimeTimeStr_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonIdByWhere_args : TBase
  {

    public string Where { get; set; }

    public loadPersonIdByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Where = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonIdByWhere_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Where != null) {
          field.Name = "where";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Where);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonIdByWhere_args(");
      bool __first = true;
      if (Where != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Where: ");
        __sb.Append(Where);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadPersonIdByWhere_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadPersonIdByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list262 = iprot.ReadListBegin();
                  for( int _i263 = 0; _i263 < _list262.Count; ++_i263)
                  {
                    int _elem264;
                    _elem264 = iprot.ReadI32();
                    Success.Add(_elem264);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadPersonIdByWhere_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter265 in Success)
            {
              oprot.WriteI32(_iter265);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadPersonIdByWhere_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadUpdatedPersons_args : TBase
  {

    public long Timestamp { get; set; }

    public loadUpdatedPersons_args() {
    }

    public loadUpdatedPersons_args(long timestamp) : this() {
      this.Timestamp = timestamp;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_timestamp = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
                isset_timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_timestamp)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Timestamp not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadUpdatedPersons_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadUpdatedPersons_args(");
      __sb.Append(", Timestamp: ");
      __sb.Append(Timestamp);
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadUpdatedPersons_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadUpdatedPersons_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list266 = iprot.ReadListBegin();
                  for( int _i267 = 0; _i267 < _list266.Count; ++_i267)
                  {
                    int _elem268;
                    _elem268 = iprot.ReadI32();
                    Success.Add(_elem268);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadUpdatedPersons_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter269 in Success)
            {
              oprot.WriteI32(_iter269);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadUpdatedPersons_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadUpdatedPersonsTimestr_args : TBase
  {

    public string Timestamp { get; set; }

    public loadUpdatedPersonsTimestr_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Timestamp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadUpdatedPersonsTimestr_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Timestamp != null) {
          field.Name = "timestamp";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Timestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadUpdatedPersonsTimestr_args(");
      bool __first = true;
      if (Timestamp != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loadUpdatedPersonsTimestr_result : TBase
  {

    public List<int> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public loadUpdatedPersonsTimestr_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list270 = iprot.ReadListBegin();
                  for( int _i271 = 0; _i271 < _list270.Count; ++_i271)
                  {
                    int _elem272;
                    _elem272 = iprot.ReadI32();
                    Success.Add(_elem272);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loadUpdatedPersonsTimestr_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter273 in Success)
            {
              oprot.WriteI32(_iter273);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loadUpdatedPersonsTimestr_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class offline_args : TBase
  {

    public Token Token { get; set; }

    public offline_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("offline_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("offline_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class offline_result : TBase
  {

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public offline_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("offline_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("offline_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class online_args : TBase
  {

    public DeviceBean Device { get; set; }

    public online_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Device = new DeviceBean();
                Device.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("online_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Device != null) {
          field.Name = "device";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Device.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("online_args(");
      bool __first = true;
      if (Device != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Device: ");
        __sb.Append(Device== null ? "<null>" : Device.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class online_result : TBase
  {

    public Token Success { get; set; }

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public online_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Token();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("online_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("online_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDevice_args : TBase
  {

    public DeviceBean NewDevice { get; set; }

    public registerDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                NewDevice = new DeviceBean();
                NewDevice.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NewDevice != null) {
          field.Name = "newDevice";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          NewDevice.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDevice_args(");
      bool __first = true;
      if (NewDevice != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NewDevice: ");
        __sb.Append(NewDevice== null ? "<null>" : NewDevice.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDevice_result : TBase
  {

    public DeviceBean Success { get; set; }

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public registerDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeviceBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDevice_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class releasePersonToken_args : TBase
  {

    public Token Token { get; set; }

    public releasePersonToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("releasePersonToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("releasePersonToken_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class releasePersonToken_result : TBase
  {

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public releasePersonToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("releasePersonToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("releasePersonToken_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class releaseRootToken_args : TBase
  {

    public Token Token { get; set; }

    public releaseRootToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("releaseRootToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("releaseRootToken_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class releaseRootToken_result : TBase
  {

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public releaseRootToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("releaseRootToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("releaseRootToken_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class releaseUserToken_args : TBase
  {

    public Token Token { get; set; }

    public releaseUserToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("releaseUserToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("releaseUserToken_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class releaseUserToken_result : TBase
  {

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public releaseUserToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("releaseUserToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("releaseUserToken_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class replaceFeature_args : TBase
  {

    public int? PersonId { get; set; }

    public string FeatureMd5 { get; set; }

    public bool DeleteOldFeatureImage { get; set; }

    public Token Token { get; set; }

    public replaceFeature_args() {
    }

    public replaceFeature_args(bool deleteOldFeatureImage) : this() {
      this.DeleteOldFeatureImage = deleteOldFeatureImage;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deleteOldFeatureImage = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FeatureMd5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                DeleteOldFeatureImage = iprot.ReadBool();
                isset_deleteOldFeatureImage = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deleteOldFeatureImage)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeleteOldFeatureImage not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("replaceFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonId != null) {
          field.Name = "personId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersonId.Value);
          oprot.WriteFieldEnd();
        }
        if (FeatureMd5 != null) {
          field.Name = "featureMd5";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureMd5);
          oprot.WriteFieldEnd();
        }
        field.Name = "deleteOldFeatureImage";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(DeleteOldFeatureImage);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("replaceFeature_args(");
      bool __first = true;
      if (PersonId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonId: ");
        __sb.Append(PersonId);
      }
      if (FeatureMd5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureMd5: ");
        __sb.Append(FeatureMd5);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("DeleteOldFeatureImage: ");
      __sb.Append(DeleteOldFeatureImage);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class replaceFeature_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public replaceFeature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("replaceFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("replaceFeature_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rootGroupOfDevice_args : TBase
  {

    public int? DeviceId { get; set; }

    public rootGroupOfDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rootGroupOfDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DeviceId != null) {
          field.Name = "deviceId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DeviceId.Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rootGroupOfDevice_args(");
      bool __first = true;
      if (DeviceId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceId: ");
        __sb.Append(DeviceId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rootGroupOfDevice_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public rootGroupOfDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rootGroupOfDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rootGroupOfDevice_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rootGroupOfPerson_args : TBase
  {

    public int? PersonId { get; set; }

    public rootGroupOfPerson_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rootGroupOfPerson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonId != null) {
          field.Name = "personId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersonId.Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rootGroupOfPerson_args(");
      bool __first = true;
      if (PersonId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonId: ");
        __sb.Append(PersonId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rootGroupOfPerson_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public rootGroupOfPerson_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rootGroupOfPerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rootGroupOfPerson_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class runCmd_args : TBase
  {

    public List<int> Target { get; set; }

    public bool Group { get; set; }

    public string Cmdpath { get; set; }

    public string JsonArgs { get; set; }

    public string AckChannel { get; set; }

    public Token Token { get; set; }

    public runCmd_args() {
    }

    public runCmd_args(bool group) : this() {
      this.Group = group;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_group = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Target = new List<int>();
                  TList _list274 = iprot.ReadListBegin();
                  for( int _i275 = 0; _i275 < _list274.Count; ++_i275)
                  {
                    int _elem276;
                    _elem276 = iprot.ReadI32();
                    Target.Add(_elem276);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Group = iprot.ReadBool();
                isset_group = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Cmdpath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                JsonArgs = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                AckChannel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_group)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Group not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("runCmd_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Target != null) {
          field.Name = "target";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Target.Count));
            foreach (int _iter277 in Target)
            {
              oprot.WriteI32(_iter277);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        field.Name = "group";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Group);
        oprot.WriteFieldEnd();
        if (Cmdpath != null) {
          field.Name = "cmdpath";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Cmdpath);
          oprot.WriteFieldEnd();
        }
        if (JsonArgs != null) {
          field.Name = "jsonArgs";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JsonArgs);
          oprot.WriteFieldEnd();
        }
        if (AckChannel != null) {
          field.Name = "ackChannel";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AckChannel);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("runCmd_args(");
      bool __first = true;
      if (Target != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Target: ");
        __sb.Append(Target);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("Group: ");
      __sb.Append(Group);
      if (Cmdpath != null) {
        __sb.Append(", Cmdpath: ");
        __sb.Append(Cmdpath);
      }
      if (JsonArgs != null) {
        __sb.Append(", JsonArgs: ");
        __sb.Append(JsonArgs);
      }
      if (AckChannel != null) {
        __sb.Append(", AckChannel: ");
        __sb.Append(AckChannel);
      }
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class runCmd_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public runCmd_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("runCmd_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("runCmd_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class runTask_args : TBase
  {

    public string TaskQueue { get; set; }

    public string Cmdpath { get; set; }

    public string JsonArgs { get; set; }

    public string AckChannel { get; set; }

    public Token Token { get; set; }

    public runTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TaskQueue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Cmdpath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                JsonArgs = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                AckChannel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("runTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TaskQueue != null) {
          field.Name = "taskQueue";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TaskQueue);
          oprot.WriteFieldEnd();
        }
        if (Cmdpath != null) {
          field.Name = "cmdpath";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Cmdpath);
          oprot.WriteFieldEnd();
        }
        if (JsonArgs != null) {
          field.Name = "jsonArgs";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JsonArgs);
          oprot.WriteFieldEnd();
        }
        if (AckChannel != null) {
          field.Name = "ackChannel";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AckChannel);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("runTask_args(");
      bool __first = true;
      if (TaskQueue != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TaskQueue: ");
        __sb.Append(TaskQueue);
      }
      if (Cmdpath != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cmdpath: ");
        __sb.Append(Cmdpath);
      }
      if (JsonArgs != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JsonArgs: ");
        __sb.Append(JsonArgs);
      }
      if (AckChannel != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AckChannel: ");
        __sb.Append(AckChannel);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class runTask_result : TBase
  {

    public bool? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public runTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("runTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("runTask_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class saveDevice_args : TBase
  {

    public DeviceBean DeviceBean { get; set; }

    public Token Token { get; set; }

    public saveDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DeviceBean = new DeviceBean();
                DeviceBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("saveDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DeviceBean != null) {
          field.Name = "deviceBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DeviceBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("saveDevice_args(");
      bool __first = true;
      if (DeviceBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceBean: ");
        __sb.Append(DeviceBean== null ? "<null>" : DeviceBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class saveDevice_result : TBase
  {

    public DeviceBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public saveDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeviceBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("saveDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("saveDevice_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class saveDeviceGroup_args : TBase
  {

    public DeviceGroupBean DeviceGroupBean { get; set; }

    public Token Token { get; set; }

    public saveDeviceGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DeviceGroupBean = new DeviceGroupBean();
                DeviceGroupBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("saveDeviceGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DeviceGroupBean != null) {
          field.Name = "deviceGroupBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DeviceGroupBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("saveDeviceGroup_args(");
      bool __first = true;
      if (DeviceGroupBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceGroupBean: ");
        __sb.Append(DeviceGroupBean== null ? "<null>" : DeviceGroupBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class saveDeviceGroup_result : TBase
  {

    public DeviceGroupBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public saveDeviceGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeviceGroupBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("saveDeviceGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("saveDeviceGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePermit_args : TBase
  {

    public PermitBean PermitBean { get; set; }

    public Token Token { get; set; }

    public savePermit_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PermitBean = new PermitBean();
                PermitBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePermit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PermitBean != null) {
          field.Name = "permitBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PermitBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePermit_args(");
      bool __first = true;
      if (PermitBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PermitBean: ");
        __sb.Append(PermitBean== null ? "<null>" : PermitBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePermit_result : TBase
  {

    public PermitBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePermit_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PermitBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePermit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePermit_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePermitWithSchedule_args : TBase
  {

    public int DeviceGroupId { get; set; }

    public int PersonGroupId { get; set; }

    public string Schedule { get; set; }

    public Token Token { get; set; }

    public savePermitWithSchedule_args() {
    }

    public savePermitWithSchedule_args(int deviceGroupId, int personGroupId) : this() {
      this.DeviceGroupId = deviceGroupId;
      this.PersonGroupId = personGroupId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deviceGroupId = false;
        bool isset_personGroupId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
                isset_deviceGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
                isset_personGroupId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Schedule = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deviceGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field DeviceGroupId not set");
        if (!isset_personGroupId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonGroupId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePermitWithSchedule_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deviceGroupId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceGroupId);
        oprot.WriteFieldEnd();
        field.Name = "personGroupId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonGroupId);
        oprot.WriteFieldEnd();
        if (Schedule != null) {
          field.Name = "schedule";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Schedule);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePermitWithSchedule_args(");
      __sb.Append(", DeviceGroupId: ");
      __sb.Append(DeviceGroupId);
      __sb.Append(", PersonGroupId: ");
      __sb.Append(PersonGroupId);
      if (Schedule != null) {
        __sb.Append(", Schedule: ");
        __sb.Append(Schedule);
      }
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePermitWithSchedule_result : TBase
  {

    public PermitBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePermitWithSchedule_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PermitBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePermitWithSchedule_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePermitWithSchedule_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePerson_args : TBase
  {

    public PersonBean PersonBean { get; set; }

    public Token Token { get; set; }

    public savePerson_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PersonBean = new PersonBean();
                PersonBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePerson_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonBean != null) {
          field.Name = "personBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PersonBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePerson_args(");
      bool __first = true;
      if (PersonBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonBean: ");
        __sb.Append(PersonBean== null ? "<null>" : PersonBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePerson_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePerson_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePerson_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePerson_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonFull_args : TBase
  {

    public PersonBean PersonBean { get; set; }

    public byte[] IdPhoto { get; set; }

    public byte[] Feature { get; set; }

    public string FeatureVersion { get; set; }

    public byte[] FeatureImage { get; set; }

    public FaceBean FeatureFaceBean { get; set; }

    public Token Token { get; set; }

    public savePersonFull_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PersonBean = new PersonBean();
                PersonBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                IdPhoto = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                FeatureVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                FeatureImage = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                FeatureFaceBean = new FaceBean();
                FeatureFaceBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonFull_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonBean != null) {
          field.Name = "personBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PersonBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (IdPhoto != null) {
          field.Name = "idPhoto";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(IdPhoto);
          oprot.WriteFieldEnd();
        }
        if (Feature != null) {
          field.Name = "feature";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (FeatureVersion != null) {
          field.Name = "featureVersion";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureVersion);
          oprot.WriteFieldEnd();
        }
        if (FeatureImage != null) {
          field.Name = "featureImage";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(FeatureImage);
          oprot.WriteFieldEnd();
        }
        if (FeatureFaceBean != null) {
          field.Name = "featureFaceBean";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          FeatureFaceBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonFull_args(");
      bool __first = true;
      if (PersonBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonBean: ");
        __sb.Append(PersonBean== null ? "<null>" : PersonBean.ToString());
      }
      if (IdPhoto != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdPhoto: ");
        __sb.Append(IdPhoto);
      }
      if (Feature != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (FeatureVersion != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureVersion: ");
        __sb.Append(FeatureVersion);
      }
      if (FeatureImage != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureImage: ");
        __sb.Append(FeatureImage);
      }
      if (FeatureFaceBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureFaceBean: ");
        __sb.Append(FeatureFaceBean== null ? "<null>" : FeatureFaceBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonFull_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersonFull_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonFull_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonFull_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonGroup_args : TBase
  {

    public PersonGroupBean PersonGroupBean { get; set; }

    public Token Token { get; set; }

    public savePersonGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PersonGroupBean = new PersonGroupBean();
                PersonGroupBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonGroupBean != null) {
          field.Name = "personGroupBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PersonGroupBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonGroup_args(");
      bool __first = true;
      if (PersonGroupBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonGroupBean: ");
        __sb.Append(PersonGroupBean== null ? "<null>" : PersonGroupBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonGroup_result : TBase
  {

    public PersonGroupBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersonGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonGroupBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonGroup_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhoto_args : TBase
  {

    public PersonBean PersonBean { get; set; }

    public byte[] IdPhoto { get; set; }

    public Token Token { get; set; }

    public savePersonWithPhoto_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PersonBean = new PersonBean();
                PersonBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                IdPhoto = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhoto_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonBean != null) {
          field.Name = "personBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PersonBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (IdPhoto != null) {
          field.Name = "idPhoto";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(IdPhoto);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhoto_args(");
      bool __first = true;
      if (PersonBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonBean: ");
        __sb.Append(PersonBean== null ? "<null>" : PersonBean.ToString());
      }
      if (IdPhoto != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdPhoto: ");
        __sb.Append(IdPhoto);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhoto_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersonWithPhoto_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhoto_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhoto_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhotoAndFeature_args : TBase
  {

    public PersonBean PersonBean { get; set; }

    public byte[] IdPhoto { get; set; }

    public FeatureBean FeatureBean { get; set; }

    public Token Token { get; set; }

    public savePersonWithPhotoAndFeature_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PersonBean = new PersonBean();
                PersonBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                IdPhoto = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                FeatureBean = new FeatureBean();
                FeatureBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhotoAndFeature_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonBean != null) {
          field.Name = "personBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PersonBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (IdPhoto != null) {
          field.Name = "idPhoto";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(IdPhoto);
          oprot.WriteFieldEnd();
        }
        if (FeatureBean != null) {
          field.Name = "featureBean";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          FeatureBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhotoAndFeature_args(");
      bool __first = true;
      if (PersonBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonBean: ");
        __sb.Append(PersonBean== null ? "<null>" : PersonBean.ToString());
      }
      if (IdPhoto != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdPhoto: ");
        __sb.Append(IdPhoto);
      }
      if (FeatureBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureBean: ");
        __sb.Append(FeatureBean== null ? "<null>" : FeatureBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhotoAndFeature_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersonWithPhotoAndFeature_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhotoAndFeature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhotoAndFeature_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhotoAndFeatureMultiFaces_args : TBase
  {

    public PersonBean PersonBean { get; set; }

    public byte[] IdPhoto { get; set; }

    public byte[] Feature { get; set; }

    public string FeatureVersion { get; set; }

    public List<FaceBean> FaceBeans { get; set; }

    public Token Token { get; set; }

    public savePersonWithPhotoAndFeatureMultiFaces_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PersonBean = new PersonBean();
                PersonBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                IdPhoto = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                FeatureVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  FaceBeans = new List<FaceBean>();
                  TList _list278 = iprot.ReadListBegin();
                  for( int _i279 = 0; _i279 < _list278.Count; ++_i279)
                  {
                    FaceBean _elem280;
                    _elem280 = new FaceBean();
                    _elem280.Read(iprot);
                    FaceBeans.Add(_elem280);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhotoAndFeatureMultiFaces_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonBean != null) {
          field.Name = "personBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PersonBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (IdPhoto != null) {
          field.Name = "idPhoto";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(IdPhoto);
          oprot.WriteFieldEnd();
        }
        if (Feature != null) {
          field.Name = "feature";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (FeatureVersion != null) {
          field.Name = "featureVersion";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureVersion);
          oprot.WriteFieldEnd();
        }
        if (FaceBeans != null) {
          field.Name = "faceBeans";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, FaceBeans.Count));
            foreach (FaceBean _iter281 in FaceBeans)
            {
              _iter281.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhotoAndFeatureMultiFaces_args(");
      bool __first = true;
      if (PersonBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonBean: ");
        __sb.Append(PersonBean== null ? "<null>" : PersonBean.ToString());
      }
      if (IdPhoto != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdPhoto: ");
        __sb.Append(IdPhoto);
      }
      if (Feature != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (FeatureVersion != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureVersion: ");
        __sb.Append(FeatureVersion);
      }
      if (FaceBeans != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FaceBeans: ");
        __sb.Append(FaceBeans);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhotoAndFeatureMultiFaces_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersonWithPhotoAndFeatureMultiFaces_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhotoAndFeatureMultiFaces_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhotoAndFeatureMultiFaces_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhotoAndFeatureMultiImage_args : TBase
  {

    public PersonBean PersonBean { get; set; }

    public byte[] IdPhoto { get; set; }

    public byte[] Feature { get; set; }

    public string FeatureVersion { get; set; }

    public List<byte[]> Photos { get; set; }

    public List<FaceBean> Faces { get; set; }

    public Token Token { get; set; }

    public savePersonWithPhotoAndFeatureMultiImage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PersonBean = new PersonBean();
                PersonBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                IdPhoto = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Feature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                FeatureVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Photos = new List<byte[]>();
                  TList _list282 = iprot.ReadListBegin();
                  for( int _i283 = 0; _i283 < _list282.Count; ++_i283)
                  {
                    byte[] _elem284;
                    _elem284 = iprot.ReadBinary();
                    Photos.Add(_elem284);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  Faces = new List<FaceBean>();
                  TList _list285 = iprot.ReadListBegin();
                  for( int _i286 = 0; _i286 < _list285.Count; ++_i286)
                  {
                    FaceBean _elem287;
                    _elem287 = new FaceBean();
                    _elem287.Read(iprot);
                    Faces.Add(_elem287);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhotoAndFeatureMultiImage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonBean != null) {
          field.Name = "personBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PersonBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (IdPhoto != null) {
          field.Name = "idPhoto";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(IdPhoto);
          oprot.WriteFieldEnd();
        }
        if (Feature != null) {
          field.Name = "feature";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Feature);
          oprot.WriteFieldEnd();
        }
        if (FeatureVersion != null) {
          field.Name = "featureVersion";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureVersion);
          oprot.WriteFieldEnd();
        }
        if (Photos != null) {
          field.Name = "photos";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Photos.Count));
            foreach (byte[] _iter288 in Photos)
            {
              oprot.WriteBinary(_iter288);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Faces != null) {
          field.Name = "faces";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Faces.Count));
            foreach (FaceBean _iter289 in Faces)
            {
              _iter289.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhotoAndFeatureMultiImage_args(");
      bool __first = true;
      if (PersonBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonBean: ");
        __sb.Append(PersonBean== null ? "<null>" : PersonBean.ToString());
      }
      if (IdPhoto != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdPhoto: ");
        __sb.Append(IdPhoto);
      }
      if (Feature != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Feature: ");
        __sb.Append(Feature);
      }
      if (FeatureVersion != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureVersion: ");
        __sb.Append(FeatureVersion);
      }
      if (Photos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Photos: ");
        __sb.Append(Photos);
      }
      if (Faces != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Faces: ");
        __sb.Append(Faces);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhotoAndFeatureMultiImage_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersonWithPhotoAndFeatureMultiImage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhotoAndFeatureMultiImage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhotoAndFeatureMultiImage_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhotoAndFeatureSaved_args : TBase
  {

    public PersonBean PersonBean { get; set; }

    public string IdPhotoMd5 { get; set; }

    public string FeatureMd5 { get; set; }

    public Token Token { get; set; }

    public savePersonWithPhotoAndFeatureSaved_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PersonBean = new PersonBean();
                PersonBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                IdPhotoMd5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                FeatureMd5 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhotoAndFeatureSaved_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonBean != null) {
          field.Name = "personBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PersonBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (IdPhotoMd5 != null) {
          field.Name = "idPhotoMd5";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IdPhotoMd5);
          oprot.WriteFieldEnd();
        }
        if (FeatureMd5 != null) {
          field.Name = "featureMd5";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeatureMd5);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhotoAndFeatureSaved_args(");
      bool __first = true;
      if (PersonBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonBean: ");
        __sb.Append(PersonBean== null ? "<null>" : PersonBean.ToString());
      }
      if (IdPhotoMd5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdPhotoMd5: ");
        __sb.Append(IdPhotoMd5);
      }
      if (FeatureMd5 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureMd5: ");
        __sb.Append(FeatureMd5);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonWithPhotoAndFeatureSaved_result : TBase
  {

    public PersonBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersonWithPhotoAndFeatureSaved_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PersonBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonWithPhotoAndFeatureSaved_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonWithPhotoAndFeatureSaved_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersons_args : TBase
  {

    public List<PersonBean> Persons { get; set; }

    public Token Token { get; set; }

    public savePersons_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Persons = new List<PersonBean>();
                  TList _list290 = iprot.ReadListBegin();
                  for( int _i291 = 0; _i291 < _list290.Count; ++_i291)
                  {
                    PersonBean _elem292;
                    _elem292 = new PersonBean();
                    _elem292.Read(iprot);
                    Persons.Add(_elem292);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersons_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Persons != null) {
          field.Name = "persons";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Persons.Count));
            foreach (PersonBean _iter293 in Persons)
            {
              _iter293.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersons_args(");
      bool __first = true;
      if (Persons != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Persons: ");
        __sb.Append(Persons);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersons_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersons_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersons_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersons_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonsWithPhoto_args : TBase
  {

    public List<byte[]> Photos { get; set; }

    public List<PersonBean> Persons { get; set; }

    public Token Token { get; set; }

    public savePersonsWithPhoto_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Photos = new List<byte[]>();
                  TList _list294 = iprot.ReadListBegin();
                  for( int _i295 = 0; _i295 < _list294.Count; ++_i295)
                  {
                    byte[] _elem296;
                    _elem296 = iprot.ReadBinary();
                    Photos.Add(_elem296);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Persons = new List<PersonBean>();
                  TList _list297 = iprot.ReadListBegin();
                  for( int _i298 = 0; _i298 < _list297.Count; ++_i298)
                  {
                    PersonBean _elem299;
                    _elem299 = new PersonBean();
                    _elem299.Read(iprot);
                    Persons.Add(_elem299);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonsWithPhoto_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Photos != null) {
          field.Name = "photos";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Photos.Count));
            foreach (byte[] _iter300 in Photos)
            {
              oprot.WriteBinary(_iter300);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Persons != null) {
          field.Name = "persons";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Persons.Count));
            foreach (PersonBean _iter301 in Persons)
            {
              _iter301.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonsWithPhoto_args(");
      bool __first = true;
      if (Photos != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Photos: ");
        __sb.Append(Photos);
      }
      if (Persons != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Persons: ");
        __sb.Append(Persons);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class savePersonsWithPhoto_result : TBase
  {

    public int? Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public savePersonsWithPhoto_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("savePersonsWithPhoto_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success.Value);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("savePersonsWithPhoto_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class saveServiceConfig_args : TBase
  {

    public Token Token { get; set; }

    public saveServiceConfig_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("saveServiceConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("saveServiceConfig_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class saveServiceConfig_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public saveServiceConfig_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("saveServiceConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("saveServiceConfig_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sdkTaskQueueOf_args : TBase
  {

    public string Task { get; set; }

    public string SdkVersion { get; set; }

    public Token Token { get; set; }

    public sdkTaskQueueOf_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Task = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SdkVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sdkTaskQueueOf_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Task != null) {
          field.Name = "task";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Task);
          oprot.WriteFieldEnd();
        }
        if (SdkVersion != null) {
          field.Name = "sdkVersion";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SdkVersion);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sdkTaskQueueOf_args(");
      bool __first = true;
      if (Task != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Task: ");
        __sb.Append(Task);
      }
      if (SdkVersion != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkVersion: ");
        __sb.Append(SdkVersion);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sdkTaskQueueOf_result : TBase
  {

    public string Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public sdkTaskQueueOf_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sdkTaskQueueOf_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sdkTaskQueueOf_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setPersonExpiryDate_args : TBase
  {

    public int PersonId { get; set; }

    public long ExpiryDate { get; set; }

    public Token Token { get; set; }

    public setPersonExpiryDate_args() {
    }

    public setPersonExpiryDate_args(int personId, long expiryDate) : this() {
      this.PersonId = personId;
      this.ExpiryDate = expiryDate;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        bool isset_expiryDate = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                ExpiryDate = iprot.ReadI64();
                isset_expiryDate = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
        if (!isset_expiryDate)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ExpiryDate not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setPersonExpiryDate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        field.Name = "expiryDate";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ExpiryDate);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setPersonExpiryDate_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      __sb.Append(", ExpiryDate: ");
      __sb.Append(ExpiryDate);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setPersonExpiryDate_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public setPersonExpiryDate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setPersonExpiryDate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setPersonExpiryDate_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setPersonExpiryDateList_args : TBase
  {

    public List<int> PersonIdList { get; set; }

    public long ExpiryDate { get; set; }

    public Token Token { get; set; }

    public setPersonExpiryDateList_args() {
    }

    public setPersonExpiryDateList_args(long expiryDate) : this() {
      this.ExpiryDate = expiryDate;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_expiryDate = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  PersonIdList = new List<int>();
                  TList _list302 = iprot.ReadListBegin();
                  for( int _i303 = 0; _i303 < _list302.Count; ++_i303)
                  {
                    int _elem304;
                    _elem304 = iprot.ReadI32();
                    PersonIdList.Add(_elem304);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                ExpiryDate = iprot.ReadI64();
                isset_expiryDate = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_expiryDate)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ExpiryDate not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setPersonExpiryDateList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonIdList != null) {
          field.Name = "personIdList";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, PersonIdList.Count));
            foreach (int _iter305 in PersonIdList)
            {
              oprot.WriteI32(_iter305);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        field.Name = "expiryDate";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ExpiryDate);
        oprot.WriteFieldEnd();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setPersonExpiryDateList_args(");
      bool __first = true;
      if (PersonIdList != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonIdList: ");
        __sb.Append(PersonIdList);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("ExpiryDate: ");
      __sb.Append(ExpiryDate);
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setPersonExpiryDateList_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public setPersonExpiryDateList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setPersonExpiryDateList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setPersonExpiryDateList_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setPersonExpiryDateTimeStr_args : TBase
  {

    public int PersonId { get; set; }

    public string ExpiryDate { get; set; }

    public Token Token { get; set; }

    public setPersonExpiryDateTimeStr_args() {
    }

    public setPersonExpiryDateTimeStr_args(int personId) : this() {
      this.PersonId = personId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_personId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonId = iprot.ReadI32();
                isset_personId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ExpiryDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_personId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field PersonId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setPersonExpiryDateTimeStr_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "personId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PersonId);
        oprot.WriteFieldEnd();
        if (ExpiryDate != null) {
          field.Name = "expiryDate";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExpiryDate);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setPersonExpiryDateTimeStr_args(");
      __sb.Append(", PersonId: ");
      __sb.Append(PersonId);
      if (ExpiryDate != null) {
        __sb.Append(", ExpiryDate: ");
        __sb.Append(ExpiryDate);
      }
      if (Token != null) {
        __sb.Append(", Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setPersonExpiryDateTimeStr_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public setPersonExpiryDateTimeStr_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setPersonExpiryDateTimeStr_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setPersonExpiryDateTimeStr_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProperties_args : TBase
  {

    public Dictionary<string, string> Config { get; set; }

    public Token Token { get; set; }

    public setProperties_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Config = new Dictionary<string, string>();
                  TMap _map306 = iprot.ReadMapBegin();
                  for( int _i307 = 0; _i307 < _map306.Count; ++_i307)
                  {
                    string _key308;
                    string _val309;
                    _key308 = iprot.ReadString();
                    _val309 = iprot.ReadString();
                    Config[_key308] = _val309;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setProperties_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Config != null) {
          field.Name = "config";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Config.Count));
            foreach (string _iter310 in Config.Keys)
            {
              oprot.WriteString(_iter310);
              oprot.WriteString(Config[_iter310]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setProperties_args(");
      bool __first = true;
      if (Config != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Config: ");
        __sb.Append(Config);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProperties_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public setProperties_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setProperties_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setProperties_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProperty_args : TBase
  {

    public string Key { get; set; }

    public string Value { get; set; }

    public Token Token { get; set; }

    public setProperty_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setProperty_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Value != null) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setProperty_args(");
      bool __first = true;
      if (Key != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Key: ");
        __sb.Append(Key);
      }
      if (Value != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setProperty_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public setProperty_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setProperty_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setProperty_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class taskQueueOf_args : TBase
  {

    public string Task { get; set; }

    public Token Token { get; set; }

    public taskQueueOf_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Task = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("taskQueueOf_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Task != null) {
          field.Name = "task";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Task);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("taskQueueOf_args(");
      bool __first = true;
      if (Task != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Task: ");
        __sb.Append(Task);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class taskQueueOf_result : TBase
  {

    public string Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public taskQueueOf_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("taskQueueOf_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("taskQueueOf_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unbindBorder_args : TBase
  {

    public int? PersonGroupId { get; set; }

    public int? DeviceGroupId { get; set; }

    public Token Token { get; set; }

    public unbindBorder_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PersonGroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                DeviceGroupId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unbindBorder_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PersonGroupId != null) {
          field.Name = "personGroupId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PersonGroupId.Value);
          oprot.WriteFieldEnd();
        }
        if (DeviceGroupId != null) {
          field.Name = "deviceGroupId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DeviceGroupId.Value);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unbindBorder_args(");
      bool __first = true;
      if (PersonGroupId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersonGroupId: ");
        __sb.Append(PersonGroupId);
      }
      if (DeviceGroupId != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceGroupId: ");
        __sb.Append(DeviceGroupId);
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unbindBorder_result : TBase
  {

    public ServiceRuntimeException Ex1 { get; set; }

    public unbindBorder_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unbindBorder_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unbindBorder_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unregisterDevice_args : TBase
  {

    public Token Token { get; set; }

    public unregisterDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unregisterDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unregisterDevice_args(");
      bool __first = true;
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unregisterDevice_result : TBase
  {

    public ServiceSecurityException Ex1 { get; set; }

    public ServiceRuntimeException Ex2 { get; set; }

    public unregisterDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceSecurityException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ex2 = new ServiceRuntimeException();
                Ex2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unregisterDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex2 != null) {
          field.Name = "Ex2";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ex2.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unregisterDevice_result(");
      bool __first = true;
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      if (Ex2 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex2: ");
        __sb.Append(Ex2== null ? "<null>" : Ex2.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateDevice_args : TBase
  {

    public DeviceBean DeviceBean { get; set; }

    public Token Token { get; set; }

    public updateDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DeviceBean = new DeviceBean();
                DeviceBean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Token = new Token();
                Token.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DeviceBean != null) {
          field.Name = "deviceBean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DeviceBean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Token != null) {
          field.Name = "token";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Token.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateDevice_args(");
      bool __first = true;
      if (DeviceBean != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceBean: ");
        __sb.Append(DeviceBean== null ? "<null>" : DeviceBean.ToString());
      }
      if (Token != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token== null ? "<null>" : Token.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateDevice_result : TBase
  {

    public DeviceBean Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public updateDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeviceBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateDevice_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class version_args : TBase
  {

    public version_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("version_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("version_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class version_result : TBase
  {

    public string Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public version_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("version_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("version_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class versionInfo_args : TBase
  {

    public versionInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("versionInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("versionInfo_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class versionInfo_result : TBase
  {

    public Dictionary<string, string> Success { get; set; }

    public ServiceRuntimeException Ex1 { get; set; }

    public versionInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map311 = iprot.ReadMapBegin();
                  for( int _i312 = 0; _i312 < _map311.Count; ++_i312)
                  {
                    string _key313;
                    string _val314;
                    _key313 = iprot.ReadString();
                    _val314 = iprot.ReadString();
                    Success[_key313] = _val314;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex1 = new ServiceRuntimeException();
                Ex1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("versionInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.Success != null) {
          field.Name = "Success";
          field.Type = TType.Map;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
            foreach (string _iter315 in Success.Keys)
            {
              oprot.WriteString(_iter315);
              oprot.WriteString(Success[_iter315]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        } else if (this.Ex1 != null) {
          field.Name = "Ex1";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex1.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("versionInfo_result(");
      bool __first = true;
      if (Success != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex1 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex1: ");
        __sb.Append(Ex1== null ? "<null>" : Ex1.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
