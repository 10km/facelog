/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class FaceBean : TBase
{

  public bool _new { get; set; }

  public int Modified { get; set; }

  public int Initialized { get; set; }

  public int? Id { get; set; }

  public string ImageMd5 { get; set; }

  public int? FaceLeft { get; set; }

  public int? FaceTop { get; set; }

  public int? FaceWidth { get; set; }

  public int? FaceHeight { get; set; }

  public int? EyeLeftx { get; set; }

  public int? EyeLefty { get; set; }

  public int? EyeRightx { get; set; }

  public int? EyeRighty { get; set; }

  public int? MouthX { get; set; }

  public int? MouthY { get; set; }

  public int? NoseX { get; set; }

  public int? NoseY { get; set; }

  public int? AngleYaw { get; set; }

  public int? AnglePitch { get; set; }

  public int? AngleRoll { get; set; }

  public byte[] ExtInfo { get; set; }

  public string FeatureMd5 { get; set; }

  public FaceBean() {
  }

  public FaceBean(bool _new, int modified, int initialized) : this() {
    this._new = _new;
    this.Modified = modified;
    this.Initialized = initialized;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset__new = false;
      bool isset_modified = false;
      bool isset_initialized = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              _new = iprot.ReadBool();
              isset__new = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Modified = iprot.ReadI32();
              isset_modified = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Initialized = iprot.ReadI32();
              isset_initialized = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              ImageMd5 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              FaceLeft = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              FaceTop = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              FaceWidth = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              FaceHeight = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              EyeLeftx = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              EyeLefty = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              EyeRightx = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              EyeRighty = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              MouthX = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              MouthY = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              NoseX = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I32) {
              NoseY = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I32) {
              AngleYaw = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              AnglePitch = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              AngleRoll = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              ExtInfo = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.String) {
              FeatureMd5 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset__new)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field _new not set");
      if (!isset_modified)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Modified not set");
      if (!isset_initialized)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Initialized not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("FaceBean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "_new";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(_new);
      oprot.WriteFieldEnd();
      field.Name = "modified";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Modified);
      oprot.WriteFieldEnd();
      field.Name = "initialized";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Initialized);
      oprot.WriteFieldEnd();
      if (Id != null) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id.Value);
        oprot.WriteFieldEnd();
      }
      if (ImageMd5 != null) {
        field.Name = "imageMd5";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ImageMd5);
        oprot.WriteFieldEnd();
      }
      if (FaceLeft != null) {
        field.Name = "faceLeft";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FaceLeft.Value);
        oprot.WriteFieldEnd();
      }
      if (FaceTop != null) {
        field.Name = "faceTop";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FaceTop.Value);
        oprot.WriteFieldEnd();
      }
      if (FaceWidth != null) {
        field.Name = "faceWidth";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FaceWidth.Value);
        oprot.WriteFieldEnd();
      }
      if (FaceHeight != null) {
        field.Name = "faceHeight";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FaceHeight.Value);
        oprot.WriteFieldEnd();
      }
      if (EyeLeftx != null) {
        field.Name = "eyeLeftx";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EyeLeftx.Value);
        oprot.WriteFieldEnd();
      }
      if (EyeLefty != null) {
        field.Name = "eyeLefty";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EyeLefty.Value);
        oprot.WriteFieldEnd();
      }
      if (EyeRightx != null) {
        field.Name = "eyeRightx";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EyeRightx.Value);
        oprot.WriteFieldEnd();
      }
      if (EyeRighty != null) {
        field.Name = "eyeRighty";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EyeRighty.Value);
        oprot.WriteFieldEnd();
      }
      if (MouthX != null) {
        field.Name = "mouthX";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MouthX.Value);
        oprot.WriteFieldEnd();
      }
      if (MouthY != null) {
        field.Name = "mouthY";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MouthY.Value);
        oprot.WriteFieldEnd();
      }
      if (NoseX != null) {
        field.Name = "noseX";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NoseX.Value);
        oprot.WriteFieldEnd();
      }
      if (NoseY != null) {
        field.Name = "noseY";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NoseY.Value);
        oprot.WriteFieldEnd();
      }
      if (AngleYaw != null) {
        field.Name = "angleYaw";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AngleYaw.Value);
        oprot.WriteFieldEnd();
      }
      if (AnglePitch != null) {
        field.Name = "anglePitch";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AnglePitch.Value);
        oprot.WriteFieldEnd();
      }
      if (AngleRoll != null) {
        field.Name = "angleRoll";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AngleRoll.Value);
        oprot.WriteFieldEnd();
      }
      if (ExtInfo != null) {
        field.Name = "extInfo";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(ExtInfo);
        oprot.WriteFieldEnd();
      }
      if (FeatureMd5 != null) {
        field.Name = "featureMd5";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FeatureMd5);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("FaceBean(");
    __sb.Append(", _new: ");
    __sb.Append(_new);
    __sb.Append(", Modified: ");
    __sb.Append(Modified);
    __sb.Append(", Initialized: ");
    __sb.Append(Initialized);
    if (Id != null) {
      __sb.Append(", Id: ");
      __sb.Append(Id);
    }
    if (ImageMd5 != null) {
      __sb.Append(", ImageMd5: ");
      __sb.Append(ImageMd5);
    }
    if (FaceLeft != null) {
      __sb.Append(", FaceLeft: ");
      __sb.Append(FaceLeft);
    }
    if (FaceTop != null) {
      __sb.Append(", FaceTop: ");
      __sb.Append(FaceTop);
    }
    if (FaceWidth != null) {
      __sb.Append(", FaceWidth: ");
      __sb.Append(FaceWidth);
    }
    if (FaceHeight != null) {
      __sb.Append(", FaceHeight: ");
      __sb.Append(FaceHeight);
    }
    if (EyeLeftx != null) {
      __sb.Append(", EyeLeftx: ");
      __sb.Append(EyeLeftx);
    }
    if (EyeLefty != null) {
      __sb.Append(", EyeLefty: ");
      __sb.Append(EyeLefty);
    }
    if (EyeRightx != null) {
      __sb.Append(", EyeRightx: ");
      __sb.Append(EyeRightx);
    }
    if (EyeRighty != null) {
      __sb.Append(", EyeRighty: ");
      __sb.Append(EyeRighty);
    }
    if (MouthX != null) {
      __sb.Append(", MouthX: ");
      __sb.Append(MouthX);
    }
    if (MouthY != null) {
      __sb.Append(", MouthY: ");
      __sb.Append(MouthY);
    }
    if (NoseX != null) {
      __sb.Append(", NoseX: ");
      __sb.Append(NoseX);
    }
    if (NoseY != null) {
      __sb.Append(", NoseY: ");
      __sb.Append(NoseY);
    }
    if (AngleYaw != null) {
      __sb.Append(", AngleYaw: ");
      __sb.Append(AngleYaw);
    }
    if (AnglePitch != null) {
      __sb.Append(", AnglePitch: ");
      __sb.Append(AnglePitch);
    }
    if (AngleRoll != null) {
      __sb.Append(", AngleRoll: ");
      __sb.Append(AngleRoll);
    }
    if (ExtInfo != null) {
      __sb.Append(", ExtInfo: ");
      __sb.Append(ExtInfo);
    }
    if (FeatureMd5 != null) {
      __sb.Append(", FeatureMd5: ");
      __sb.Append(FeatureMd5);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

