/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ImageBean : TBase
{

  public bool _new { get; set; }

  public int Modified { get; set; }

  public int Initialized { get; set; }

  public string Md5 { get; set; }

  public string Format { get; set; }

  public int? Width { get; set; }

  public int? Height { get; set; }

  public int? Depth { get; set; }

  public int? FaceNum { get; set; }

  public string ThumbMd5 { get; set; }

  public int? DeviceId { get; set; }

  public ImageBean() {
  }

  public ImageBean(bool _new, int modified, int initialized) : this() {
    this._new = _new;
    this.Modified = modified;
    this.Initialized = initialized;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset__new = false;
      bool isset_modified = false;
      bool isset_initialized = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              _new = iprot.ReadBool();
              isset__new = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Modified = iprot.ReadI32();
              isset_modified = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Initialized = iprot.ReadI32();
              isset_initialized = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Md5 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Format = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Width = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Height = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Depth = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              FaceNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              ThumbMd5 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              DeviceId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset__new)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field _new not set");
      if (!isset_modified)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Modified not set");
      if (!isset_initialized)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Initialized not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ImageBean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "_new";
      field.Type = TType.Bool;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(_new);
      oprot.WriteFieldEnd();
      field.Name = "modified";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Modified);
      oprot.WriteFieldEnd();
      field.Name = "initialized";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Initialized);
      oprot.WriteFieldEnd();
      if (Md5 != null) {
        field.Name = "md5";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Md5);
        oprot.WriteFieldEnd();
      }
      if (Format != null) {
        field.Name = "format";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Format);
        oprot.WriteFieldEnd();
      }
      if (Width != null) {
        field.Name = "width";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Width.Value);
        oprot.WriteFieldEnd();
      }
      if (Height != null) {
        field.Name = "height";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Height.Value);
        oprot.WriteFieldEnd();
      }
      if (Depth != null) {
        field.Name = "depth";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Depth.Value);
        oprot.WriteFieldEnd();
      }
      if (FaceNum != null) {
        field.Name = "faceNum";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FaceNum.Value);
        oprot.WriteFieldEnd();
      }
      if (ThumbMd5 != null) {
        field.Name = "thumbMd5";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ThumbMd5);
        oprot.WriteFieldEnd();
      }
      if (DeviceId != null) {
        field.Name = "deviceId";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeviceId.Value);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ImageBean(");
    __sb.Append(", _new: ");
    __sb.Append(_new);
    __sb.Append(", Modified: ");
    __sb.Append(Modified);
    __sb.Append(", Initialized: ");
    __sb.Append(Initialized);
    if (Md5 != null) {
      __sb.Append(", Md5: ");
      __sb.Append(Md5);
    }
    if (Format != null) {
      __sb.Append(", Format: ");
      __sb.Append(Format);
    }
    if (Width != null) {
      __sb.Append(", Width: ");
      __sb.Append(Width);
    }
    if (Height != null) {
      __sb.Append(", Height: ");
      __sb.Append(Height);
    }
    if (Depth != null) {
      __sb.Append(", Depth: ");
      __sb.Append(Depth);
    }
    if (FaceNum != null) {
      __sb.Append(", FaceNum: ");
      __sb.Append(FaceNum);
    }
    if (ThumbMd5 != null) {
      __sb.Append(", ThumbMd5: ");
      __sb.Append(ThumbMd5);
    }
    if (DeviceId != null) {
      __sb.Append(", DeviceId: ");
      __sb.Append(DeviceId);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

